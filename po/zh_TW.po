msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: 2021-03-26 16:40\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/po/docs.pot\n"
"X-Crowdin-File-ID: 6\n"

#. type: Title #
#: docs/8.x/artisan.md:1 docs/master/artisan.md:1
#, no-wrap
msgid "Artisan Console"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/8.x/authentication.md:30
#: docs/8.x/authorization.md:24 docs/8.x/billing.md:61 docs/8.x/blade.md:37
#: docs/8.x/broadcasting.md:36 docs/8.x/cache.md:24
#: docs/8.x/cashier-paddle.md:45 docs/8.x/collections.md:13
#: docs/8.x/configuration.md:12 docs/8.x/container.md:19
#: docs/8.x/contracts.md:8 docs/8.x/controllers.md:17
#: docs/8.x/database-testing.md:22 docs/8.x/database.md:11
#: docs/8.x/deployment.md:14 docs/8.x/dusk.md:50
#: docs/8.x/eloquent-mutators.md:17 docs/8.x/eloquent-relationships.md:38
#: docs/8.x/eloquent-resources.md:14 docs/8.x/eloquent-serialization.md:10
#: docs/8.x/eloquent.md:36 docs/8.x/envoy.md:18 docs/8.x/errors.md:12
#: docs/8.x/events.md:18 docs/8.x/facades.md:10 docs/8.x/filesystem.md:20
#: docs/8.x/fortify.md:25 docs/8.x/hashing.md:9 docs/8.x/homestead.md:36
#: docs/8.x/horizon.md:16 docs/8.x/http-client.md:15 docs/8.x/http-tests.md:17
#: docs/8.x/lifecycle.md:11 docs/8.x/localization.md:12 docs/8.x/logging.md:14
#: docs/8.x/mail.md:26 docs/8.x/middleware.md:12 docs/8.x/migrations.md:24
#: docs/8.x/mix.md:21 docs/8.x/mocking.md:19 docs/8.x/notifications.md:48
#: docs/8.x/packages.md:17 docs/8.x/pagination.md:15 docs/8.x/passport.md:45
#: docs/8.x/passwords.md:11 docs/8.x/providers.md:9 docs/8.x/queries.md:33
#: docs/8.x/queues.md:44 docs/8.x/redis.md:12 docs/8.x/requests.md:22
#: docs/8.x/sail.md:24 docs/8.x/sanctum.md:23 docs/8.x/scheduling.md:18
#: docs/8.x/scout.md:26 docs/8.x/seeding.md:8 docs/8.x/session.md:16
#: docs/8.x/socialite.md:12 docs/8.x/starter-kits.md:7 docs/8.x/structure.md:29
#: docs/8.x/telescope.md:33 docs/8.x/testing.md:8 docs/8.x/urls.md:11
#: docs/8.x/valet.md:20 docs/8.x/validation.md:32 docs/8.x/verification.md:13
#: docs/8.x/views.md:13 docs/master/artisan.md:23
#: docs/master/authentication.md:30 docs/master/authorization.md:24
#: docs/master/billing.md:59 docs/master/blade.md:36
#: docs/master/broadcasting.md:36 docs/master/cache.md:24
#: docs/master/cashier-paddle.md:43 docs/master/collections.md:13
#: docs/master/configuration.md:12 docs/master/container.md:19
#: docs/master/contracts.md:8 docs/master/controllers.md:17
#: docs/master/database-testing.md:22 docs/master/database.md:11
#: docs/master/deployment.md:14 docs/master/dusk.md:50
#: docs/master/eloquent-mutators.md:17 docs/master/eloquent-relationships.md:38
#: docs/master/eloquent-resources.md:14
#: docs/master/eloquent-serialization.md:10 docs/master/eloquent.md:36
#: docs/master/envoy.md:17 docs/master/errors.md:12 docs/master/events.md:18
#: docs/master/facades.md:10 docs/master/filesystem.md:20
#: docs/master/fortify.md:25 docs/master/hashing.md:9
#: docs/master/homestead.md:36 docs/master/horizon.md:16
#: docs/master/http-client.md:15 docs/master/http-tests.md:16
#: docs/master/lifecycle.md:11 docs/master/localization.md:12
#: docs/master/logging.md:14 docs/master/mail.md:26
#: docs/master/middleware.md:12 docs/master/migrations.md:24
#: docs/master/mix.md:21 docs/master/mocking.md:19
#: docs/master/notifications.md:47 docs/master/packages.md:17
#: docs/master/pagination.md:15 docs/master/passport.md:45
#: docs/master/passwords.md:10 docs/master/providers.md:9
#: docs/master/queries.md:33 docs/master/queues.md:43 docs/master/redis.md:12
#: docs/master/requests.md:21 docs/master/sail.md:23 docs/master/sanctum.md:23
#: docs/master/scheduling.md:18 docs/master/scout.md:26
#: docs/master/seeding.md:8 docs/master/session.md:16
#: docs/master/socialite.md:12 docs/master/starter-kits.md:7
#: docs/master/structure.md:29 docs/master/telescope.md:33
#: docs/master/testing.md:8 docs/master/urls.md:11 docs/master/valet.md:20
#: docs/master/validation.md:32 docs/master/verification.md:13
#: docs/master/views.md:13
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Tinker (REPL)](#tinker)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Writing Commands](#writing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Generating Commands](#generating-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Command Structure](#command-structure)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Closure Commands](#closure-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Defining Input Expectations](#defining-input-expectations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Arguments](#arguments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Options](#options)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Input Arrays](#input-arrays)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Input Descriptions](#input-descriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Command I/O](#command-io)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/8.x/requests.md:22 docs/master/artisan.md:23
#: docs/master/requests.md:21
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Prompting For Input](#prompting-for-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Writing Output](#writing-output)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Registering Commands](#registering-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Programmatically Executing Commands](#programmatically-executing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Calling Commands From Other Commands](#calling-commands-from-other-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/master/artisan.md:23
msgid "[Stub Customization](#stub-customization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/artisan.md:23 docs/8.x/authentication.md:30 docs/8.x/cache.md:24
#: docs/8.x/eloquent.md:36 docs/8.x/mail.md:26 docs/8.x/passport.md:45
#: docs/8.x/verification.md:13 docs/master/artisan.md:23
#: docs/master/authentication.md:30 docs/master/cache.md:24
#: docs/master/eloquent.md:36 docs/master/mail.md:26 docs/master/passport.md:45
#: docs/master/verification.md:13
msgid "[Events](#events)"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:25 docs/8.x/authentication.md:32
#: docs/8.x/authorization.md:26 docs/8.x/billing.md:63 docs/8.x/blade.md:39
#: docs/8.x/broadcasting.md:38 docs/8.x/cache.md:26
#: docs/8.x/cashier-paddle.md:47 docs/8.x/collections.md:15
#: docs/8.x/configuration.md:14 docs/8.x/console-tests.md:7
#: docs/8.x/container.md:21 docs/8.x/contracts.md:10 docs/8.x/controllers.md:19
#: docs/8.x/database-testing.md:24 docs/8.x/database.md:13
#: docs/8.x/deployment.md:16 docs/8.x/dusk.md:52
#: docs/8.x/eloquent-collections.md:8 docs/8.x/eloquent-mutators.md:19
#: docs/8.x/eloquent-relationships.md:40 docs/8.x/eloquent-resources.md:16
#: docs/8.x/eloquent-serialization.md:12 docs/8.x/eloquent.md:38
#: docs/8.x/encryption.md:8 docs/8.x/envoy.md:20 docs/8.x/errors.md:14
#: docs/8.x/events.md:20 docs/8.x/facades.md:12 docs/8.x/filesystem.md:22
#: docs/8.x/fortify.md:27 docs/8.x/hashing.md:11 docs/8.x/helpers.md:7
#: docs/8.x/homestead.md:38 docs/8.x/horizon.md:18 docs/8.x/http-client.md:17
#: docs/8.x/http-tests.md:19 docs/8.x/lifecycle.md:13
#: docs/8.x/localization.md:14 docs/8.x/logging.md:16 docs/8.x/mail.md:28
#: docs/8.x/middleware.md:14 docs/8.x/migrations.md:26 docs/8.x/mix.md:23
#: docs/8.x/mocking.md:21 docs/8.x/notifications.md:50 docs/8.x/packages.md:19
#: docs/8.x/pagination.md:17 docs/8.x/passport.md:47 docs/8.x/passwords.md:13
#: docs/8.x/providers.md:11 docs/8.x/queries.md:35 docs/8.x/queues.md:46
#: docs/8.x/redis.md:14 docs/8.x/requests.md:24 docs/8.x/sail.md:26
#: docs/8.x/sanctum.md:25 docs/8.x/scheduling.md:20 docs/8.x/scout.md:28
#: docs/8.x/seeding.md:10 docs/8.x/session.md:18 docs/8.x/socialite.md:14
#: docs/8.x/starter-kits.md:9 docs/8.x/structure.md:31 docs/8.x/telescope.md:35
#: docs/8.x/testing.md:10 docs/8.x/urls.md:13 docs/8.x/valet.md:22
#: docs/8.x/validation.md:34 docs/8.x/verification.md:15 docs/8.x/views.md:15
#: docs/master/artisan.md:25 docs/master/authentication.md:32
#: docs/master/authorization.md:26 docs/master/billing.md:61
#: docs/master/blade.md:38 docs/master/broadcasting.md:38
#: docs/master/cache.md:26 docs/master/cashier-paddle.md:45
#: docs/master/collections.md:15 docs/master/configuration.md:14
#: docs/master/console-tests.md:7 docs/master/container.md:21
#: docs/master/contracts.md:10 docs/master/controllers.md:19
#: docs/master/database-testing.md:24 docs/master/database.md:13
#: docs/master/deployment.md:16 docs/master/dusk.md:52
#: docs/master/eloquent-collections.md:8 docs/master/eloquent-mutators.md:19
#: docs/master/eloquent-relationships.md:40
#: docs/master/eloquent-resources.md:16
#: docs/master/eloquent-serialization.md:12 docs/master/eloquent.md:38
#: docs/master/encryption.md:8 docs/master/envoy.md:19 docs/master/errors.md:14
#: docs/master/events.md:20 docs/master/facades.md:12
#: docs/master/filesystem.md:22 docs/master/fortify.md:27
#: docs/master/hashing.md:11 docs/master/helpers.md:7
#: docs/master/homestead.md:38 docs/master/horizon.md:18
#: docs/master/http-client.md:17 docs/master/http-tests.md:18
#: docs/master/lifecycle.md:13 docs/master/localization.md:14
#: docs/master/logging.md:16 docs/master/mail.md:28
#: docs/master/middleware.md:14 docs/master/migrations.md:26
#: docs/master/mix.md:23 docs/master/mocking.md:21
#: docs/master/notifications.md:49 docs/master/packages.md:19
#: docs/master/pagination.md:17 docs/master/passport.md:47
#: docs/master/passwords.md:12 docs/master/providers.md:11
#: docs/master/queries.md:35 docs/master/queues.md:45 docs/master/redis.md:14
#: docs/master/requests.md:23 docs/master/sail.md:25 docs/master/sanctum.md:25
#: docs/master/scheduling.md:20 docs/master/scout.md:28
#: docs/master/seeding.md:10 docs/master/session.md:18
#: docs/master/socialite.md:14 docs/master/starter-kits.md:9
#: docs/master/structure.md:31 docs/master/telescope.md:35
#: docs/master/testing.md:10 docs/master/urls.md:13 docs/master/valet.md:22
#: docs/master/validation.md:34 docs/master/verification.md:15
#: docs/master/views.md:15
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authorization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  blade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  console-tests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  contracts.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  controllers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  csrf.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  deployment.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-mutators.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-serialization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  encryption.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  events.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  facades.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  helpers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-tests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  localization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  middleware.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mocking.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  pagination.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  providers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  queries.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  requests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  seeding.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  structure.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  urls.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  validation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  views.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authorization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  blade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  console-tests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  contracts.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  controllers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  csrf.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  deployment.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-mutators.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent-serialization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  encryption.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  events.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  facades.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  helpers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-tests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  localization.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  middleware.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mocking.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  pagination.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  providers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  queries.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  requests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  seeding.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  structure.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  urls.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  validation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  views.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/artisan.md:25 docs/8.x/authentication.md:32
#: docs/8.x/authorization.md:26 docs/8.x/billing.md:63 docs/8.x/blade.md:39
#: docs/8.x/broadcasting.md:38 docs/8.x/cache.md:26
#: docs/8.x/cashier-paddle.md:47 docs/8.x/collections.md:15
#: docs/8.x/collections.md:2899 docs/8.x/configuration.md:14
#: docs/8.x/console-tests.md:7 docs/8.x/container.md:21
#: docs/8.x/contracts.md:10 docs/8.x/controllers.md:19 docs/8.x/csrf.md:10
#: docs/8.x/database-testing.md:24 docs/8.x/database.md:13
#: docs/8.x/deployment.md:16 docs/8.x/dusk.md:52
#: docs/8.x/eloquent-collections.md:8 docs/8.x/eloquent-mutators.md:19
#: docs/8.x/eloquent-relationships.md:40 docs/8.x/eloquent-resources.md:16
#: docs/8.x/eloquent-serialization.md:12 docs/8.x/eloquent.md:38
#: docs/8.x/encryption.md:8 docs/8.x/envoy.md:20 docs/8.x/errors.md:14
#: docs/8.x/events.md:20 docs/8.x/facades.md:12 docs/8.x/filesystem.md:22
#: docs/8.x/fortify.md:27 docs/8.x/hashing.md:11 docs/8.x/helpers.md:7
#: docs/8.x/homestead.md:38 docs/8.x/horizon.md:18 docs/8.x/http-client.md:17
#: docs/8.x/http-tests.md:19 docs/8.x/lifecycle.md:13
#: docs/8.x/localization.md:14 docs/8.x/logging.md:16 docs/8.x/mail.md:28
#: docs/8.x/middleware.md:14 docs/8.x/migrations.md:26 docs/8.x/mix.md:23
#: docs/8.x/mocking.md:21 docs/8.x/notifications.md:50 docs/8.x/packages.md:19
#: docs/8.x/pagination.md:17 docs/8.x/passport.md:47 docs/8.x/passwords.md:13
#: docs/8.x/providers.md:11 docs/8.x/queries.md:35 docs/8.x/queues.md:46
#: docs/8.x/redis.md:14 docs/8.x/requests.md:24 docs/8.x/sail.md:26
#: docs/8.x/sanctum.md:25 docs/8.x/scheduling.md:20 docs/8.x/scout.md:28
#: docs/8.x/seeding.md:10 docs/8.x/session.md:18 docs/8.x/socialite.md:14
#: docs/8.x/starter-kits.md:9 docs/8.x/structure.md:31 docs/8.x/telescope.md:35
#: docs/8.x/testing.md:10 docs/8.x/urls.md:13 docs/8.x/valet.md:22
#: docs/8.x/validation.md:34 docs/8.x/verification.md:15 docs/8.x/views.md:15
#: docs/master/artisan.md:25 docs/master/authentication.md:32
#: docs/master/authorization.md:26 docs/master/billing.md:61
#: docs/master/blade.md:38 docs/master/broadcasting.md:38
#: docs/master/cache.md:26 docs/master/cashier-paddle.md:45
#: docs/master/collections.md:15 docs/master/collections.md:2895
#: docs/master/configuration.md:14 docs/master/console-tests.md:7
#: docs/master/container.md:21 docs/master/contracts.md:10
#: docs/master/controllers.md:19 docs/master/csrf.md:10
#: docs/master/database-testing.md:24 docs/master/database.md:13
#: docs/master/deployment.md:16 docs/master/dusk.md:52
#: docs/master/eloquent-collections.md:8 docs/master/eloquent-mutators.md:19
#: docs/master/eloquent-relationships.md:40
#: docs/master/eloquent-resources.md:16
#: docs/master/eloquent-serialization.md:12 docs/master/eloquent.md:38
#: docs/master/encryption.md:8 docs/master/envoy.md:19 docs/master/errors.md:14
#: docs/master/events.md:20 docs/master/facades.md:12
#: docs/master/filesystem.md:22 docs/master/fortify.md:27
#: docs/master/hashing.md:11 docs/master/helpers.md:7
#: docs/master/homestead.md:38 docs/master/horizon.md:18
#: docs/master/http-client.md:17 docs/master/http-tests.md:18
#: docs/master/lifecycle.md:13 docs/master/localization.md:14
#: docs/master/logging.md:16 docs/master/mail.md:28
#: docs/master/middleware.md:14 docs/master/migrations.md:26
#: docs/master/mix.md:23 docs/master/mocking.md:21
#: docs/master/notifications.md:49 docs/master/packages.md:19
#: docs/master/pagination.md:17 docs/master/passport.md:47
#: docs/master/passwords.md:12 docs/master/providers.md:11
#: docs/master/queries.md:35 docs/master/queues.md:45 docs/master/redis.md:14
#: docs/master/requests.md:23 docs/master/sail.md:25 docs/master/sanctum.md:25
#: docs/master/scheduling.md:20 docs/master/scout.md:28
#: docs/master/seeding.md:10 docs/master/session.md:18
#: docs/master/socialite.md:14 docs/master/starter-kits.md:9
#: docs/master/structure.md:31 docs/master/telescope.md:35
#: docs/master/testing.md:10 docs/master/urls.md:13 docs/master/valet.md:22
#: docs/master/validation.md:34 docs/master/verification.md:15
#: docs/master/views.md:15
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:28 docs/master/artisan.md:28
msgid "Artisan is the command line interface included with Laravel. Artisan exists at the root of your application as the `artisan` script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the `list` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:30 docs/master/artisan.md:30
#, no-wrap
msgid "    php artisan list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:32 docs/master/artisan.md:32
msgid "Every command also includes a \"help\" screen which displays and describes the command's available arguments and options. To view a help screen, precede the name of the command with `help`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:34 docs/master/artisan.md:34
#, no-wrap
msgid "    php artisan help migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:36 docs/master/artisan.md:36
#, no-wrap
msgid "<a name=\"laravel-sail\"></a>\n"
msgstr ""

#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/artisan.md:36 docs/8.x/sail.md:1 docs/master/artisan.md:36
#: docs/master/sail.md:1
#, no-wrap
msgid "Laravel Sail"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:39 docs/master/artisan.md:39
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail) as your local development environment, remember to use the `sail` command line to invoke Artisan commands. Sail will execute your Artisan commands within your application's Docker containers:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:41 docs/master/artisan.md:41
#, no-wrap
msgid "    ./sail artisan list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:43 docs/master/artisan.md:43
#, no-wrap
msgid "<a name=\"tinker\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:43 docs/master/artisan.md:43
#, no-wrap
msgid "Tinker (REPL)"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:46 docs/master/artisan.md:46
msgid "Laravel Tinker is a powerful REPL for the Laravel framework, powered by the [PsySH](https://github.com/bobthecow/psysh) package."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:48 docs/8.x/billing.md:75 docs/8.x/cashier-paddle.md:59
#: docs/8.x/dusk.md:57 docs/8.x/envoy.md:25 docs/8.x/fortify.md:67
#: docs/8.x/horizon.md:29 docs/8.x/mix.md:37 docs/8.x/passport.md:61
#: docs/8.x/sail.md:35 docs/8.x/sanctum.md:53 docs/8.x/scout.md:35
#: docs/8.x/socialite.md:21 docs/8.x/telescope.md:42 docs/8.x/valet.md:65
#: docs/master/artisan.md:48 docs/master/billing.md:73
#: docs/master/cashier-paddle.md:57 docs/master/dusk.md:57
#: docs/master/envoy.md:24 docs/master/fortify.md:67 docs/master/horizon.md:29
#: docs/master/mix.md:37 docs/master/passport.md:61 docs/master/sail.md:34
#: docs/master/sanctum.md:53 docs/master/scout.md:35
#: docs/master/socialite.md:21 docs/master/telescope.md:42
#: docs/master/valet.md:65
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  installation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  installation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/artisan.md:48 docs/8.x/billing.md:75 docs/8.x/cashier-paddle.md:59
#: docs/8.x/dusk.md:57 docs/8.x/envoy.md:25 docs/8.x/fortify.md:67
#: docs/8.x/horizon.md:29 docs/8.x/installation.md:1 docs/8.x/passport.md:61
#: docs/8.x/sanctum.md:53 docs/8.x/scout.md:35 docs/8.x/socialite.md:21
#: docs/8.x/starter-kits.md:21 docs/8.x/telescope.md:42 docs/8.x/valet.md:65
#: docs/master/artisan.md:48 docs/master/billing.md:73
#: docs/master/cashier-paddle.md:57 docs/master/dusk.md:57
#: docs/master/envoy.md:24 docs/master/fortify.md:67 docs/master/horizon.md:29
#: docs/master/installation.md:1 docs/master/passport.md:61
#: docs/master/sanctum.md:53 docs/master/scout.md:35
#: docs/master/socialite.md:21 docs/master/starter-kits.md:21
#: docs/master/telescope.md:42 docs/master/valet.md:65
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:51 docs/master/artisan.md:51
msgid "All Laravel applications include Tinker by default. However, you may install Tinker using Composer if you have previously removed it from your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:53 docs/master/artisan.md:53
#, no-wrap
msgid "    composer require laravel/tinker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:55 docs/master/artisan.md:55
#, no-wrap
msgid "> {tip} Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:57 docs/master/artisan.md:57
#, no-wrap
msgid "<a name=\"usage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:57 docs/master/artisan.md:57
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:60 docs/master/artisan.md:60
msgid "Tinker allows you to interact with your entire Laravel application on the command line, including your Eloquent models, jobs, events, and more. To enter the Tinker environment, run the `tinker` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:62 docs/master/artisan.md:62
#, no-wrap
msgid "    php artisan tinker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:64 docs/master/artisan.md:64
msgid "You can publish Tinker's configuration file using the `vendor:publish` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:66 docs/master/artisan.md:66
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:68 docs/master/artisan.md:68
#, no-wrap
msgid "> {note} The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:70 docs/master/artisan.md:70
#, no-wrap
msgid "<a name=\"command-allow-list\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:70 docs/master/artisan.md:70
#, no-wrap
msgid "Command Allow List"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:73 docs/master/artisan.md:73
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:77 docs/master/artisan.md:77
#, no-wrap
msgid "    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:79 docs/master/artisan.md:79
#, no-wrap
msgid "<a name=\"classes-that-should-not-be-aliased\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:79 docs/master/artisan.md:79
#, no-wrap
msgid "Classes That Should Not Be Aliased"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:82 docs/master/artisan.md:82
msgid "Typically, Tinker automatically aliases classes as you interact with them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the `dont_alias` array of your `tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:86 docs/master/artisan.md:86
#, no-wrap
msgid "    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:88 docs/master/artisan.md:88
#, no-wrap
msgid "<a name=\"writing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:88 docs/master/artisan.md:88
#, no-wrap
msgid "Writing Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:91 docs/master/artisan.md:91
msgid "In addition to the commands provided with Artisan, you may build your own custom commands. Commands are typically stored in the `app/Console/Commands` directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:93 docs/master/artisan.md:93
#, no-wrap
msgid "<a name=\"generating-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:93 docs/master/artisan.md:93
#, no-wrap
msgid "Generating Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:96 docs/master/artisan.md:96
msgid "To create a new command, you may use the `make:command` Artisan command. This command will create a new command class in the `app/Console/Commands` directory. Don't worry if this directory does not exist in your application - it will be created the first time you run the `make:command` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:98 docs/master/artisan.md:98
#, no-wrap
msgid "    php artisan make:command SendEmails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:100 docs/master/artisan.md:100
#, no-wrap
msgid "<a name=\"command-structure\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:100 docs/master/artisan.md:100
#, no-wrap
msgid "Command Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:103 docs/master/artisan.md:103
msgid "After generating your command, you should define appropriate values for the `signature` and `description` properties of the class. These properties will be used when displaying your command on the `list` screen. The `signature` property also allows you to define [your command's input expectations](#defining-input-expectations). The `handle` method will be called when your command is executed. You may place your command logic in this method."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:105 docs/master/artisan.md:105
msgid "Let's take a look at an example command. Note that we are able to request any dependencies we need via the command's `handle` method. The Laravel [service container](/docs/{{version}}/container) will automatically inject all dependencies that are type-hinted in this method's signature:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:107 docs/8.x/authentication.md:144
#: docs/8.x/authentication.md:225 docs/8.x/authentication.md:363
#: docs/8.x/authentication.md:506 docs/8.x/authentication.md:580
#: docs/8.x/authentication.md:631 docs/8.x/authentication.md:659
#: docs/8.x/authorization.md:87 docs/8.x/authorization.md:246
#: docs/8.x/authorization.md:304 docs/8.x/authorization.md:394
#: docs/8.x/authorization.md:449 docs/8.x/authorization.md:483
#: docs/8.x/authorization.md:516 docs/8.x/authorization.md:573
#: docs/8.x/billing.md:534 docs/8.x/billing.md:1196 docs/8.x/blade.md:95
#: docs/8.x/blade.md:526 docs/8.x/blade.md:689 docs/8.x/blade.md:1248
#: docs/8.x/broadcasting.md:238 docs/8.x/broadcasting.md:306
#: docs/8.x/broadcasting.md:420 docs/8.x/broadcasting.md:451
#: docs/8.x/broadcasting.md:544 docs/8.x/cache.md:96 docs/8.x/cache.md:382
#: docs/8.x/cache.md:415 docs/8.x/cashier-paddle.md:526
#: docs/8.x/cashier-paddle.md:944 docs/8.x/cashier-paddle.md:1138
#: docs/8.x/container.md:28 docs/8.x/container.md:79 docs/8.x/container.md:240
#: docs/8.x/container.md:383 docs/8.x/contracts.md:42
#: docs/8.x/controllers.md:32 docs/8.x/controllers.md:70
#: docs/8.x/controllers.md:356 docs/8.x/controllers.md:386
#: docs/8.x/controllers.md:416 docs/8.x/csrf.md:74
#: docs/8.x/database-testing.md:34 docs/8.x/database-testing.md:529
#: docs/8.x/database-testing.md:561 docs/8.x/database.md:116
#: docs/8.x/database.md:230 docs/8.x/dusk.md:140 docs/8.x/dusk.md:218
#: docs/8.x/dusk.md:323 docs/8.x/dusk.md:1561 docs/8.x/dusk.md:1608
#: docs/8.x/dusk.md:1682 docs/8.x/eloquent-collections.md:198
#: docs/8.x/eloquent-mutators.md:34 docs/8.x/eloquent-mutators.md:83
#: docs/8.x/eloquent-mutators.md:142 docs/8.x/eloquent-mutators.md:175
#: docs/8.x/eloquent-mutators.md:319 docs/8.x/eloquent-mutators.md:358
#: docs/8.x/eloquent-mutators.md:384 docs/8.x/eloquent-mutators.md:471
#: docs/8.x/eloquent-mutators.md:541 docs/8.x/eloquent-mutators.md:575
#: docs/8.x/eloquent-relationships.md:70 docs/8.x/eloquent-relationships.md:104
#: docs/8.x/eloquent-relationships.md:148
#: docs/8.x/eloquent-relationships.md:194
#: docs/8.x/eloquent-relationships.md:301
#: docs/8.x/eloquent-relationships.md:364
#: docs/8.x/eloquent-relationships.md:434
#: docs/8.x/eloquent-relationships.md:478
#: docs/8.x/eloquent-relationships.md:562
#: docs/8.x/eloquent-relationships.md:581
#: docs/8.x/eloquent-relationships.md:640
#: docs/8.x/eloquent-relationships.md:742
#: docs/8.x/eloquent-relationships.md:838
#: docs/8.x/eloquent-relationships.md:862
#: docs/8.x/eloquent-relationships.md:963
#: docs/8.x/eloquent-relationships.md:1276
#: docs/8.x/eloquent-relationships.md:1340
#: docs/8.x/eloquent-relationships.md:1384
#: docs/8.x/eloquent-relationships.md:1482
#: docs/8.x/eloquent-relationships.md:1680 docs/8.x/eloquent-resources.md:48
#: docs/8.x/eloquent-resources.md:103 docs/8.x/eloquent-resources.md:142
#: docs/8.x/eloquent-resources.md:174 docs/8.x/eloquent-resources.md:197
#: docs/8.x/eloquent-resources.md:273 docs/8.x/eloquent-resources.md:329
#: docs/8.x/eloquent-resources.md:347 docs/8.x/eloquent-resources.md:386
#: docs/8.x/eloquent-resources.md:652 docs/8.x/eloquent-resources.md:722
#: docs/8.x/eloquent-serialization.md:78 docs/8.x/eloquent-serialization.md:98
#: docs/8.x/eloquent-serialization.md:130
#: docs/8.x/eloquent-serialization.md:151 docs/8.x/eloquent.md:80
#: docs/8.x/eloquent.md:98 docs/8.x/eloquent.md:119 docs/8.x/eloquent.md:137
#: docs/8.x/eloquent.md:151 docs/8.x/eloquent.md:173 docs/8.x/eloquent.md:191
#: docs/8.x/eloquent.md:209 docs/8.x/eloquent.md:222 docs/8.x/eloquent.md:243
#: docs/8.x/eloquent.md:493 docs/8.x/eloquent.md:635 docs/8.x/eloquent.md:750
#: docs/8.x/eloquent.md:876 docs/8.x/eloquent.md:906 docs/8.x/eloquent.md:937
#: docs/8.x/eloquent.md:987 docs/8.x/eloquent.md:1042 docs/8.x/eloquent.md:1095
#: docs/8.x/eloquent.md:1127 docs/8.x/eloquent.md:1168
#: docs/8.x/encryption.md:26 docs/8.x/errors.md:84 docs/8.x/errors.md:165
#: docs/8.x/events.md:195 docs/8.x/events.md:234 docs/8.x/events.md:278
#: docs/8.x/events.md:297 docs/8.x/events.md:345 docs/8.x/events.md:382
#: docs/8.x/events.md:415 docs/8.x/events.md:436 docs/8.x/events.md:479
#: docs/8.x/events.md:516 docs/8.x/events.md:553 docs/8.x/events.md:594
#: docs/8.x/facades.md:133 docs/8.x/facades.md:177 docs/8.x/facades.md:202
#: docs/8.x/facades.md:226 docs/8.x/filesystem.md:308
#: docs/8.x/filesystem.md:494 docs/8.x/hashing.md:33 docs/8.x/horizon.md:237
#: docs/8.x/http-tests.md:24 docs/8.x/http-tests.md:56
#: docs/8.x/http-tests.md:86 docs/8.x/http-tests.md:114
#: docs/8.x/http-tests.md:138 docs/8.x/http-tests.md:154
#: docs/8.x/http-tests.md:182 docs/8.x/http-tests.md:214
#: docs/8.x/http-tests.md:250 docs/8.x/http-tests.md:280
#: docs/8.x/http-tests.md:401 docs/8.x/http-tests.md:457
#: docs/8.x/localization.md:90 docs/8.x/logging.md:147 docs/8.x/logging.md:213
#: docs/8.x/logging.md:291 docs/8.x/mail.md:201 docs/8.x/mail.md:254
#: docs/8.x/mail.md:545 docs/8.x/middleware.md:30 docs/8.x/middleware.md:67
#: docs/8.x/middleware.md:85 docs/8.x/middleware.md:237
#: docs/8.x/middleware.md:275 docs/8.x/migrations.md:69
#: docs/8.x/migrations.md:846 docs/8.x/mocking.md:80 docs/8.x/mocking.md:103
#: docs/8.x/mocking.md:154 docs/8.x/mocking.md:228 docs/8.x/mocking.md:299
#: docs/8.x/mocking.md:342 docs/8.x/mocking.md:403 docs/8.x/mocking.md:473
#: docs/8.x/mocking.md:544 docs/8.x/notifications.md:74
#: docs/8.x/notifications.md:130 docs/8.x/notifications.md:201
#: docs/8.x/notifications.md:339 docs/8.x/notifications.md:803
#: docs/8.x/notifications.md:927 docs/8.x/notifications.md:1094
#: docs/8.x/notifications.md:1197 docs/8.x/notifications.md:1222
#: docs/8.x/pagination.md:34 docs/8.x/pagination.md:211 docs/8.x/passport.md:80
#: docs/8.x/passport.md:96 docs/8.x/passport.md:408 docs/8.x/passport.md:692
#: docs/8.x/passport.md:721 docs/8.x/providers.md:40 docs/8.x/providers.md:69
#: docs/8.x/providers.md:107 docs/8.x/providers.md:171 docs/8.x/queries.md:52
#: docs/8.x/queues.md:150 docs/8.x/queues.md:239 docs/8.x/queues.md:253
#: docs/8.x/queues.md:293 docs/8.x/queues.md:357 docs/8.x/queues.md:561
#: docs/8.x/queues.md:599 docs/8.x/queues.md:652 docs/8.x/queues.md:774
#: docs/8.x/queues.md:803 docs/8.x/queues.md:833 docs/8.x/queues.md:868
#: docs/8.x/queues.md:909 docs/8.x/queues.md:945 docs/8.x/queues.md:1000
#: docs/8.x/queues.md:1079 docs/8.x/queues.md:1590 docs/8.x/queues.md:1697
#: docs/8.x/queues.md:1752 docs/8.x/redis.md:185 docs/8.x/redis.md:285
#: docs/8.x/releases.md:63 docs/8.x/requests.md:37 docs/8.x/requests.md:78
#: docs/8.x/requests.md:477 docs/8.x/responses.md:321 docs/8.x/scheduling.md:32
#: docs/8.x/scout.md:48 docs/8.x/scout.md:92 docs/8.x/scout.md:119
#: docs/8.x/scout.md:150 docs/8.x/seeding.md:28 docs/8.x/session.md:81
#: docs/8.x/session.md:269 docs/8.x/session.md:301 docs/8.x/testing.md:53
#: docs/8.x/testing.md:119 docs/8.x/upgrade.md:99 docs/8.x/urls.md:167
#: docs/8.x/valet.md:215 docs/8.x/validation.md:63 docs/8.x/validation.md:425
#: docs/8.x/validation.md:1418 docs/8.x/verification.md:27
#: docs/8.x/views.md:106 docs/8.x/views.md:144 docs/8.x/views.md:185
#: docs/master/artisan.md:107 docs/master/authentication.md:144
#: docs/master/authentication.md:225 docs/master/authentication.md:363
#: docs/master/authentication.md:506 docs/master/authentication.md:580
#: docs/master/authentication.md:631 docs/master/authentication.md:659
#: docs/master/authorization.md:87 docs/master/authorization.md:246
#: docs/master/authorization.md:304 docs/master/authorization.md:394
#: docs/master/authorization.md:449 docs/master/authorization.md:483
#: docs/master/authorization.md:516 docs/master/authorization.md:573
#: docs/master/billing.md:495 docs/master/billing.md:1069
#: docs/master/blade.md:94 docs/master/blade.md:716 docs/master/blade.md:1189
#: docs/master/broadcasting.md:238 docs/master/broadcasting.md:306
#: docs/master/broadcasting.md:420 docs/master/broadcasting.md:451
#: docs/master/broadcasting.md:544 docs/master/cache.md:96
#: docs/master/cache.md:382 docs/master/cache.md:415
#: docs/master/cashier-paddle.md:486 docs/master/cashier-paddle.md:904
#: docs/master/cashier-paddle.md:1098 docs/master/container.md:28
#: docs/master/container.md:79 docs/master/container.md:234
#: docs/master/container.md:377 docs/master/contracts.md:42
#: docs/master/controllers.md:32 docs/master/controllers.md:70
#: docs/master/controllers.md:343 docs/master/controllers.md:373
#: docs/master/controllers.md:403 docs/master/csrf.md:74
#: docs/master/database-testing.md:34 docs/master/database-testing.md:520
#: docs/master/database-testing.md:552 docs/master/database.md:116
#: docs/master/database.md:230 docs/master/dusk.md:140 docs/master/dusk.md:218
#: docs/master/dusk.md:323 docs/master/dusk.md:1553 docs/master/dusk.md:1600
#: docs/master/dusk.md:1674 docs/master/eloquent-collections.md:198
#: docs/master/eloquent-mutators.md:34 docs/master/eloquent-mutators.md:83
#: docs/master/eloquent-mutators.md:142 docs/master/eloquent-mutators.md:175
#: docs/master/eloquent-mutators.md:284 docs/master/eloquent-mutators.md:323
#: docs/master/eloquent-mutators.md:349 docs/master/eloquent-mutators.md:436
#: docs/master/eloquent-mutators.md:506 docs/master/eloquent-mutators.md:540
#: docs/master/eloquent-relationships.md:70
#: docs/master/eloquent-relationships.md:104
#: docs/master/eloquent-relationships.md:148
#: docs/master/eloquent-relationships.md:194
#: docs/master/eloquent-relationships.md:301
#: docs/master/eloquent-relationships.md:364
#: docs/master/eloquent-relationships.md:434
#: docs/master/eloquent-relationships.md:478
#: docs/master/eloquent-relationships.md:562
#: docs/master/eloquent-relationships.md:581
#: docs/master/eloquent-relationships.md:640
#: docs/master/eloquent-relationships.md:742
#: docs/master/eloquent-relationships.md:838
#: docs/master/eloquent-relationships.md:862
#: docs/master/eloquent-relationships.md:963
#: docs/master/eloquent-relationships.md:1276
#: docs/master/eloquent-relationships.md:1340
#: docs/master/eloquent-relationships.md:1384
#: docs/master/eloquent-relationships.md:1482
#: docs/master/eloquent-relationships.md:1680
#: docs/master/eloquent-resources.md:48 docs/master/eloquent-resources.md:103
#: docs/master/eloquent-resources.md:142 docs/master/eloquent-resources.md:174
#: docs/master/eloquent-resources.md:197 docs/master/eloquent-resources.md:273
#: docs/master/eloquent-resources.md:329 docs/master/eloquent-resources.md:347
#: docs/master/eloquent-resources.md:386 docs/master/eloquent-resources.md:652
#: docs/master/eloquent-resources.md:722
#: docs/master/eloquent-serialization.md:78
#: docs/master/eloquent-serialization.md:98
#: docs/master/eloquent-serialization.md:130
#: docs/master/eloquent-serialization.md:151 docs/master/eloquent.md:80
#: docs/master/eloquent.md:98 docs/master/eloquent.md:119
#: docs/master/eloquent.md:137 docs/master/eloquent.md:151
#: docs/master/eloquent.md:173 docs/master/eloquent.md:191
#: docs/master/eloquent.md:209 docs/master/eloquent.md:222
#: docs/master/eloquent.md:243 docs/master/eloquent.md:493
#: docs/master/eloquent.md:635 docs/master/eloquent.md:746
#: docs/master/eloquent.md:872 docs/master/eloquent.md:902
#: docs/master/eloquent.md:933 docs/master/eloquent.md:983
#: docs/master/eloquent.md:1038 docs/master/eloquent.md:1087
#: docs/master/eloquent.md:1119 docs/master/eloquent.md:1160
#: docs/master/encryption.md:26 docs/master/errors.md:139
#: docs/master/events.md:195 docs/master/events.md:234
#: docs/master/events.md:278 docs/master/events.md:297
#: docs/master/events.md:345 docs/master/events.md:382
#: docs/master/events.md:415 docs/master/events.md:436
#: docs/master/events.md:479 docs/master/events.md:516
#: docs/master/events.md:553 docs/master/events.md:594
#: docs/master/facades.md:132 docs/master/facades.md:176
#: docs/master/facades.md:201 docs/master/facades.md:225
#: docs/master/filesystem.md:308 docs/master/filesystem.md:494
#: docs/master/hashing.md:33 docs/master/horizon.md:237
#: docs/master/http-tests.md:23 docs/master/http-tests.md:55
#: docs/master/http-tests.md:85 docs/master/http-tests.md:113
#: docs/master/http-tests.md:137 docs/master/http-tests.md:153
#: docs/master/http-tests.md:181 docs/master/http-tests.md:213
#: docs/master/http-tests.md:249 docs/master/http-tests.md:279
#: docs/master/http-tests.md:307 docs/master/http-tests.md:363
#: docs/master/localization.md:90 docs/master/logging.md:147
#: docs/master/logging.md:213 docs/master/logging.md:291
#: docs/master/mail.md:201 docs/master/mail.md:254 docs/master/mail.md:545
#: docs/master/middleware.md:30 docs/master/middleware.md:67
#: docs/master/middleware.md:85 docs/master/middleware.md:237
#: docs/master/middleware.md:275 docs/master/migrations.md:69
#: docs/master/migrations.md:820 docs/master/mocking.md:80
#: docs/master/mocking.md:103 docs/master/mocking.md:154
#: docs/master/mocking.md:228 docs/master/mocking.md:299
#: docs/master/mocking.md:342 docs/master/mocking.md:403
#: docs/master/mocking.md:473 docs/master/mocking.md:544
#: docs/master/notifications.md:73 docs/master/notifications.md:129
#: docs/master/notifications.md:200 docs/master/notifications.md:354
#: docs/master/notifications.md:775 docs/master/notifications.md:899
#: docs/master/notifications.md:1066 docs/master/notifications.md:1169
#: docs/master/notifications.md:1194 docs/master/pagination.md:34
#: docs/master/pagination.md:211 docs/master/passport.md:80
#: docs/master/passport.md:96 docs/master/passport.md:406
#: docs/master/passport.md:690 docs/master/passport.md:719
#: docs/master/providers.md:40 docs/master/providers.md:69
#: docs/master/providers.md:107 docs/master/providers.md:171
#: docs/master/queries.md:52 docs/master/queues.md:149
#: docs/master/queues.md:238 docs/master/queues.md:252
#: docs/master/queues.md:292 docs/master/queues.md:356
#: docs/master/queues.md:499 docs/master/queues.md:537
#: docs/master/queues.md:590 docs/master/queues.md:712
#: docs/master/queues.md:741 docs/master/queues.md:771
#: docs/master/queues.md:806 docs/master/queues.md:847
#: docs/master/queues.md:883 docs/master/queues.md:938
#: docs/master/queues.md:1017 docs/master/queues.md:1528
#: docs/master/queues.md:1635 docs/master/queues.md:1690
#: docs/master/redis.md:185 docs/master/redis.md:285 docs/master/releases.md:63
#: docs/master/requests.md:36 docs/master/requests.md:77
#: docs/master/requests.md:472 docs/master/responses.md:321
#: docs/master/scheduling.md:32 docs/master/scout.md:48 docs/master/scout.md:87
#: docs/master/scout.md:114 docs/master/scout.md:145 docs/master/seeding.md:28
#: docs/master/session.md:81 docs/master/session.md:269
#: docs/master/session.md:301 docs/master/testing.md:53
#: docs/master/testing.md:117 docs/master/upgrade.md:99 docs/master/urls.md:167
#: docs/master/valet.md:215 docs/master/validation.md:63
#: docs/master/validation.md:412 docs/master/validation.md:1379
#: docs/master/verification.md:27 docs/master/views.md:106
#: docs/master/views.md:144 docs/master/views.md:185
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:109 docs/8.x/redis.md:287 docs/master/artisan.md:109
#: docs/master/redis.md:287
#, no-wrap
msgid "    namespace App\\Console\\Commands;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:113 docs/master/artisan.md:113
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:122 docs/master/artisan.md:122
#, no-wrap
msgid "    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:129 docs/master/artisan.md:129
#, no-wrap
msgid "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:139 docs/master/artisan.md:139
#, no-wrap
msgid "        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:151 docs/master/artisan.md:151
#, no-wrap
msgid "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:153 docs/master/artisan.md:153
#, no-wrap
msgid "> {tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:155 docs/master/artisan.md:155
#, no-wrap
msgid "<a name=\"closure-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:155 docs/master/artisan.md:155
#, no-wrap
msgid "Closure Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:158 docs/master/artisan.md:158
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes. Within the `commands` method of your `app/Console/Kernel.php` file, Laravel loads the `routes/console.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:168 docs/master/artisan.md:168
#, no-wrap
msgid "    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:170 docs/master/artisan.md:170
msgid "Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:174 docs/master/artisan.md:174
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:176 docs/master/artisan.md:176
msgid "The closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:178 docs/master/artisan.md:178
#, no-wrap
msgid "<a name=\"type-hinting-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:178 docs/master/artisan.md:178
#, no-wrap
msgid "Type-Hinting Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:181 docs/master/artisan.md:181
msgid "In addition to receiving your command's arguments and options, command closures may also type-hint additional dependencies that you would like resolved out of the [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:184 docs/master/artisan.md:184
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:188 docs/master/artisan.md:188
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"        $drip->send(User::find($user));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:190 docs/master/artisan.md:190
#, no-wrap
msgid "<a name=\"closure-command-descriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:190 docs/master/artisan.md:190
#, no-wrap
msgid "Closure Command Descriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:193 docs/master/artisan.md:193
msgid "When defining a closure based command, you may use the `purpose` method to add a description to the command. This description will be displayed when you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:197 docs/master/artisan.md:197
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:199 docs/master/artisan.md:199
#, no-wrap
msgid "<a name=\"defining-input-expectations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:199 docs/master/artisan.md:199
#, no-wrap
msgid "Defining Input Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:202 docs/master/artisan.md:202
msgid "When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the `signature` property on your commands. The `signature` property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:204 docs/master/artisan.md:204
#, no-wrap
msgid "<a name=\"arguments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:204 docs/master/artisan.md:204
#, no-wrap
msgid "Arguments"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:207 docs/master/artisan.md:207
msgid "All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: `user`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:214 docs/master/artisan.md:214
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:216 docs/master/artisan.md:216
msgid "You may also make arguments optional or define default values for arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:219 docs/master/artisan.md:219
#, no-wrap
msgid "    // Optional argument...\n"
"    mail:send {user?}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:222 docs/master/artisan.md:222
#, no-wrap
msgid "    // Optional argument with default value...\n"
"    mail:send {user=foo}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:224 docs/master/artisan.md:224
#, no-wrap
msgid "<a name=\"options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:224 docs/master/artisan.md:224
#, no-wrap
msgid "Options"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:227 docs/master/artisan.md:227
msgid "Options, like arguments, are another form of user input. Options are prefixed by two hyphens (`--`) when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:234 docs/master/artisan.md:234
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:236 docs/master/artisan.md:236
msgid "In this example, the `--queue` switch may be specified when calling the Artisan command. If the `--queue` switch is passed, the value of the option will be `true`. Otherwise, the value will be `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:238 docs/master/artisan.md:238
#, no-wrap
msgid "    php artisan mail:send 1 --queue\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:240 docs/master/artisan.md:240
#, no-wrap
msgid "<a name=\"options-with-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:240 docs/master/artisan.md:240
#, no-wrap
msgid "Options With Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:243 docs/master/artisan.md:243
msgid "Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a `=` sign:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:250 docs/master/artisan.md:250
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:252 docs/master/artisan.md:252
msgid "In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:254 docs/master/artisan.md:254
#, no-wrap
msgid "    php artisan mail:send 1 --queue=default\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:256 docs/master/artisan.md:256
msgid "You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:258 docs/master/artisan.md:258
#, no-wrap
msgid "    mail:send {user} {--queue=default}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:260 docs/master/artisan.md:260
#, no-wrap
msgid "<a name=\"option-shortcuts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:260 docs/master/artisan.md:260
#, no-wrap
msgid "Option Shortcuts"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:263 docs/master/artisan.md:263
msgid "To assign a shortcut when defining an option, you may specify it before the option name and use the `|` character as a delimiter to separate the shortcut from the full option name:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:265 docs/master/artisan.md:265
#, no-wrap
msgid "    mail:send {user} {--Q|queue}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:267 docs/master/artisan.md:267
#, no-wrap
msgid "<a name=\"input-arrays\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:267 docs/master/artisan.md:267
#, no-wrap
msgid "Input Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:270 docs/master/artisan.md:270
msgid "If you would like to define arguments or options to expect multiple input values, you may use the `*` character. First, let's take a look at an example that specifies such an argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:272 docs/master/artisan.md:272
#, no-wrap
msgid "    mail:send {user*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:274 docs/master/artisan.md:274
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `foo` and `bar` as its values:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:276 docs/master/artisan.md:276
#, no-wrap
msgid "    php artisan mail:send foo bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:278
msgid "This `*` character can be combined with an optional argument definition to allow zero or more instances of an argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:280
#, no-wrap
msgid "    mail:send {user?*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:282 docs/master/artisan.md:278
#, no-wrap
msgid "<a name=\"option-arrays\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:282 docs/master/artisan.md:278
#, no-wrap
msgid "Option Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:285 docs/master/artisan.md:281
msgid "When defining an option that expects multiple input values, each option value passed to the command should be prefixed with the option name:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:287 docs/master/artisan.md:283
#, no-wrap
msgid "    mail:send {user} {--id=*}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:289 docs/master/artisan.md:285
#, no-wrap
msgid "    php artisan mail:send --id=1 --id=2\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:291 docs/master/artisan.md:287
#, no-wrap
msgid "<a name=\"input-descriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:291 docs/master/artisan.md:287
#, no-wrap
msgid "Input Descriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:294 docs/master/artisan.md:290
msgid "You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:303 docs/master/artisan.md:299
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue= : Whether the job should be queued}';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:305 docs/master/artisan.md:301
#, no-wrap
msgid "<a name=\"command-io\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:305 docs/master/artisan.md:301
#, no-wrap
msgid "Command I/O"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:308 docs/8.x/requests.md:220 docs/master/artisan.md:304
#: docs/master/requests.md:215
#, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:308 docs/8.x/requests.md:220 docs/master/artisan.md:304
#: docs/master/requests.md:215
#, no-wrap
msgid "Retrieving Input"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:311 docs/master/artisan.md:307
msgid "While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the `argument` and `option` methods. If an argument or option does not exist, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:320 docs/master/artisan.md:316
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:323 docs/8.x/artisan.md:583 docs/master/artisan.md:319
#: docs/master/artisan.md:579
#, no-wrap
msgid "        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:325 docs/master/artisan.md:321
msgid "If you need to retrieve all of the arguments as an `array`, call the `arguments` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:327 docs/master/artisan.md:323
#, no-wrap
msgid "    $arguments = $this->arguments();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:329 docs/master/artisan.md:325
msgid "Options may be retrieved just as easily as arguments using the `option` method. To retrieve all of the options as an array, call the `options` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:332 docs/master/artisan.md:328
#, no-wrap
msgid "    // Retrieve a specific option...\n"
"    $queueName = $this->option('queue');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:335 docs/master/artisan.md:331
#, no-wrap
msgid "    // Retrieve all options as an array...\n"
"    $options = $this->options();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:337 docs/master/artisan.md:333
#, no-wrap
msgid "<a name=\"prompting-for-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:337 docs/master/artisan.md:333
#, no-wrap
msgid "Prompting For Input"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:340 docs/master/artisan.md:336
msgid "In addition to displaying output, you may also ask the user to provide input during the execution of your command. The `ask` method will prompt the user with the given question, accept their input, and then return the user's input back to your command:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:350 docs/master/artisan.md:346
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:352 docs/master/artisan.md:348
msgid "The `secret` method is similar to `ask`, but the user's input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as passwords:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:354 docs/master/artisan.md:350
#, no-wrap
msgid "    $password = $this->secret('What is the password?');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:356 docs/master/artisan.md:352
#, no-wrap
msgid "<a name=\"asking-for-confirmation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:356 docs/master/artisan.md:352
#, no-wrap
msgid "Asking For Confirmation"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:359 docs/master/artisan.md:355
msgid "If you need to ask the user for a simple \"yes or no\" confirmation, you may use the `confirm` method. By default, this method will return `false`. However, if the user enters `y` or `yes` in response to the prompt, the method will return `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:363 docs/master/artisan.md:359
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:365 docs/master/artisan.md:361
msgid "If necessary, you may specify that the confirmation prompt should return `true` by default by passing `true` as the second argument to the `confirm` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:369 docs/master/artisan.md:365
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:371 docs/master/artisan.md:367
#, no-wrap
msgid "<a name=\"auto-completion\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:371 docs/master/artisan.md:367
#, no-wrap
msgid "Auto-Completion"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:374 docs/master/artisan.md:370
msgid "The `anticipate` method can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:376 docs/master/artisan.md:372
#, no-wrap
msgid "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:378 docs/master/artisan.md:374
msgid "Alternatively, you may pass a closure as the second argument to the `anticipate` method. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far, and return an array of options for auto-completion:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:382 docs/master/artisan.md:378
#, no-wrap
msgid "    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // Return auto-completion options...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:384 docs/master/artisan.md:380
#, no-wrap
msgid "<a name=\"multiple-choice-questions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:384 docs/master/artisan.md:380
#, no-wrap
msgid "Multiple Choice Questions"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:387 docs/master/artisan.md:383
msgid "If you need to give the user a predefined set of choices when asking a question, you may use the `choice` method. You may set the array index of the default value to be returned if no option is chosen by passing the index as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:393 docs/master/artisan.md:389
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:395 docs/master/artisan.md:391
msgid "In addition, the `choice` method accepts optional fourth and fifth arguments for determining the maximum number of attempts to select a valid response and whether multiple selections are permitted:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:403 docs/master/artisan.md:399
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:405 docs/master/artisan.md:401
#, no-wrap
msgid "<a name=\"writing-output\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:405 docs/master/artisan.md:401
#, no-wrap
msgid "Writing Output"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:408 docs/master/artisan.md:404
msgid "To send output to the console, you may use the `line`, `info`, `comment`, `question` and `error` methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the `info` method will display in the console as green colored text:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:417 docs/master/artisan.md:413
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:420 docs/master/artisan.md:416
#, no-wrap
msgid "        $this->info('The command was successful!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:422 docs/master/artisan.md:418
msgid "To display an error message, use the `error` method. Error message text is typically displayed in red:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:424 docs/master/artisan.md:420
#, no-wrap
msgid "    $this->error('Something went wrong!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:426 docs/master/artisan.md:422
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:428 docs/master/artisan.md:424
#, no-wrap
msgid "    $this->line('Display this on the screen');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:430 docs/master/artisan.md:426
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:433 docs/master/artisan.md:429
#, no-wrap
msgid "    // Write a single blank line...\n"
"    $this->newLine();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:436 docs/master/artisan.md:432
#, no-wrap
msgid "    // Write three blank lines...\n"
"    $this->newLine(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:438 docs/8.x/migrations.md:183
#: docs/master/artisan.md:434 docs/master/migrations.md:157
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/artisan.md:438 docs/8.x/migrations.md:183
#: docs/master/artisan.md:434 docs/master/migrations.md:157
#, no-wrap
msgid "Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:442 docs/master/artisan.md:438
msgid "The `table` method makes it easy to correctly format multiple rows / columns of data. All you need to do is provide the column names and the data for the table and Laravel will automatically calculate the appropriate width and height of the table for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:444 docs/8.x/artisan.md:456
#: docs/8.x/authorization.md:421 docs/8.x/billing.md:508
#: docs/8.x/billing.md:676 docs/8.x/billing.md:712 docs/8.x/billing.md:796
#: docs/8.x/billing.md:848 docs/8.x/billing.md:991 docs/8.x/billing.md:1108
#: docs/8.x/billing.md:1146 docs/8.x/billing.md:1262
#: docs/8.x/cashier-paddle.md:367 docs/8.x/cashier-paddle.md:666
#: docs/8.x/cashier-paddle.md:687 docs/8.x/cashier-paddle.md:869
#: docs/8.x/cashier-paddle.md:1070 docs/8.x/cashier-paddle.md:1093
#: docs/8.x/cashier-paddle.md:1118 docs/8.x/collections.md:2884
#: docs/8.x/collections.md:2925 docs/8.x/collections.md:2933
#: docs/8.x/database-testing.md:186 docs/8.x/database-testing.md:245
#: docs/8.x/database-testing.md:489 docs/8.x/database-testing.md:626
#: docs/8.x/dusk.md:360 docs/8.x/eloquent-collections.md:15
#: docs/8.x/eloquent-collections.md:87 docs/8.x/eloquent-collections.md:121
#: docs/8.x/eloquent-collections.md:178 docs/8.x/eloquent-mutators.md:56
#: docs/8.x/eloquent-mutators.md:105 docs/8.x/eloquent-mutators.md:195
#: docs/8.x/eloquent-mutators.md:435 docs/8.x/eloquent-relationships.md:453
#: docs/8.x/eloquent-relationships.md:502
#: docs/8.x/eloquent-relationships.md:982
#: docs/8.x/eloquent-relationships.md:1032
#: docs/8.x/eloquent-relationships.md:1417
#: docs/8.x/eloquent-relationships.md:1611
#: docs/8.x/eloquent-serialization.md:27 docs/8.x/eloquent-serialization.md:50
#: docs/8.x/eloquent.md:365 docs/8.x/eloquent.md:566 docs/8.x/eloquent.md:1023
#: docs/8.x/eloquent.md:1172 docs/8.x/eloquent.md:1241
#: docs/8.x/pagination.md:70 docs/8.x/pagination.md:98
#: docs/8.x/pagination.md:113 docs/8.x/pagination.md:163
#: docs/8.x/passport.md:854 docs/8.x/queries.md:623 docs/8.x/releases.md:99
#: docs/8.x/releases.md:121 docs/8.x/responses.md:57 docs/8.x/routing.md:370
#: docs/8.x/routing.md:467 docs/8.x/seeding.md:63 docs/master/artisan.md:440
#: docs/master/artisan.md:452 docs/master/authorization.md:421
#: docs/master/billing.md:478 docs/master/billing.md:637
#: docs/master/billing.md:673 docs/master/billing.md:757
#: docs/master/billing.md:809 docs/master/billing.md:872
#: docs/master/billing.md:981 docs/master/billing.md:1019
#: docs/master/billing.md:1135 docs/master/cashier-paddle.md:327
#: docs/master/cashier-paddle.md:626 docs/master/cashier-paddle.md:647
#: docs/master/cashier-paddle.md:829 docs/master/cashier-paddle.md:1030
#: docs/master/cashier-paddle.md:1053 docs/master/cashier-paddle.md:1078
#: docs/master/collections.md:2880 docs/master/collections.md:2921
#: docs/master/collections.md:2929 docs/master/database-testing.md:186
#: docs/master/database-testing.md:245 docs/master/database-testing.md:480
#: docs/master/database-testing.md:617 docs/master/dusk.md:360
#: docs/master/eloquent-collections.md:15
#: docs/master/eloquent-collections.md:87
#: docs/master/eloquent-collections.md:121
#: docs/master/eloquent-collections.md:178 docs/master/eloquent-mutators.md:56
#: docs/master/eloquent-mutators.md:105 docs/master/eloquent-mutators.md:195
#: docs/master/eloquent-mutators.md:400
#: docs/master/eloquent-relationships.md:453
#: docs/master/eloquent-relationships.md:502
#: docs/master/eloquent-relationships.md:982
#: docs/master/eloquent-relationships.md:1032
#: docs/master/eloquent-relationships.md:1417
#: docs/master/eloquent-relationships.md:1611
#: docs/master/eloquent-serialization.md:27
#: docs/master/eloquent-serialization.md:50 docs/master/eloquent.md:365
#: docs/master/eloquent.md:566 docs/master/eloquent.md:1019
#: docs/master/eloquent.md:1164 docs/master/eloquent.md:1233
#: docs/master/pagination.md:70 docs/master/pagination.md:98
#: docs/master/pagination.md:113 docs/master/pagination.md:163
#: docs/master/passport.md:852 docs/master/queries.md:623
#: docs/master/releases.md:99 docs/master/releases.md:121
#: docs/master/responses.md:57 docs/master/routing.md:370
#: docs/master/routing.md:466 docs/master/seeding.md:63
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:449 docs/master/artisan.md:445
#, no-wrap
msgid "    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:451 docs/master/artisan.md:447
#, no-wrap
msgid "<a name=\"progress-bars\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:451 docs/master/artisan.md:447
#, no-wrap
msgid "Progress Bars"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:454 docs/master/artisan.md:450
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `withProgressBar` method, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:460 docs/master/artisan.md:456
#, no-wrap
msgid "    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:462 docs/master/artisan.md:458
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar after processing each item:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:464 docs/master/artisan.md:460
#, no-wrap
msgid "    $users = App\\Models\\User::all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:466 docs/master/artisan.md:462
#, no-wrap
msgid "    $bar = $this->output->createProgressBar(count($users));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:468 docs/master/artisan.md:464
#, no-wrap
msgid "    $bar->start();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:471 docs/master/artisan.md:467
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:474 docs/master/artisan.md:470
#, no-wrap
msgid "        $bar->advance();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:476 docs/master/artisan.md:472
#, no-wrap
msgid "    $bar->finish();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:478 docs/master/artisan.md:474
#, no-wrap
msgid "> {tip} For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:480 docs/master/artisan.md:476
#, no-wrap
msgid "<a name=\"registering-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:480 docs/master/artisan.md:476
#, no-wrap
msgid "Registering Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:483 docs/master/artisan.md:479
msgid "All of your console commands are registered within your application's `App\\Console\\Kernel` class, which is your application's \"console kernel\". Within the `commands` method of this class, you will see a call to the kernel's `load` method. The `load` method will scan the `app/Console/Commands` directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the `load` method to scan other directories for Artisan commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:493 docs/master/artisan.md:489
#, no-wrap
msgid "    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:496 docs/8.x/controllers.md:328
#: docs/8.x/database-testing.md:176 docs/8.x/database-testing.md:578
#: docs/8.x/fortify.md:143 docs/8.x/notifications.md:143
#: docs/8.x/routing.md:463 docs/8.x/routing.md:497 docs/8.x/verification.md:40
#: docs/master/artisan.md:492 docs/master/controllers.md:315
#: docs/master/database-testing.md:176 docs/master/database-testing.md:569
#: docs/master/fortify.md:143 docs/master/notifications.md:142
#: docs/master/routing.md:462 docs/master/routing.md:496
#: docs/master/verification.md:40
#, no-wrap
msgid "        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:498 docs/master/artisan.md:494
msgid "If necessary, you may manually register commands by adding the command's class name to the `$commands` property of your `App\\Console\\Kernel` class. When Artisan boots, all the commands listed in this property will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:502 docs/master/artisan.md:498
#, no-wrap
msgid "    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:504 docs/master/artisan.md:500
#, no-wrap
msgid "<a name=\"programmatically-executing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:504 docs/master/artisan.md:500
#, no-wrap
msgid "Programmatically Executing Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:507 docs/master/artisan.md:503
msgid "Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to execute an Artisan command from a route or controller. You may use the `call` method on the `Artisan` facade to accomplish this. The `call` method accepts either the command's signature name or class name as its first argument, and an array of command parameters as the second argument. The exit code will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:509 docs/8.x/artisan.md:528 docs/8.x/artisan.md:550
#: docs/master/artisan.md:505 docs/master/artisan.md:524
#: docs/master/artisan.md:546
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:514 docs/master/artisan.md:510
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:517 docs/8.x/artisan.md:558 docs/8.x/container.md:450
#: docs/8.x/localization.md:54 docs/8.x/pagination.md:106
#: docs/8.x/pagination.md:121 docs/master/artisan.md:513
#: docs/master/artisan.md:554 docs/master/container.md:444
#: docs/master/localization.md:54 docs/master/pagination.md:106
#: docs/master/pagination.md:121
#, no-wrap
msgid "        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:519 docs/master/artisan.md:515
msgid "Alternatively, you may pass the entire Artisan command to the `call` method as a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:521 docs/master/artisan.md:517
#, no-wrap
msgid "    Artisan::call('mail:send 1 --queue=default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:523 docs/master/artisan.md:519
#, no-wrap
msgid "<a name=\"passing-array-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:523 docs/master/artisan.md:519
#, no-wrap
msgid "Passing Array Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:526 docs/master/artisan.md:522
msgid "If your command defines an option that accepts an array, you may pass an array of values to that option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:534 docs/master/artisan.md:530
#, no-wrap
msgid "    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:536 docs/master/artisan.md:532
#, no-wrap
msgid "<a name=\"passing-boolean-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:536 docs/master/artisan.md:532
#, no-wrap
msgid "Passing Boolean Values"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:539 docs/master/artisan.md:535
msgid "If you need to specify the value of an option that does not accept string values, such as the `--force` flag on the `migrate:refresh` command, you should pass `true` or `false` as the value of the option:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:543 docs/master/artisan.md:539
#, no-wrap
msgid "    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:545 docs/master/artisan.md:541
#, no-wrap
msgid "<a name=\"queueing-artisan-commands\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/artisan.md:545 docs/master/artisan.md:541
#, no-wrap
msgid "Queueing Artisan Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:548 docs/master/artisan.md:544
msgid "Using the `queue` method on the `Artisan` facade, you may even queue Artisan commands so they are processed in the background by your [queue workers](/docs/{{version}}/queues). Before using this method, make sure you have configured your queue and are running a queue listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:555 docs/master/artisan.md:551
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:560 docs/master/artisan.md:556
msgid "Using the `onConnection` and `onQueue` methods, you may specify the connection or queue the Artisan command should be dispatched to:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:564 docs/master/artisan.md:560
#, no-wrap
msgid "    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:566 docs/master/artisan.md:562
#, no-wrap
msgid "<a name=\"calling-commands-from-other-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/artisan.md:566 docs/master/artisan.md:562
#, no-wrap
msgid "Calling Commands From Other Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:569 docs/master/artisan.md:565
msgid "Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the `call` method. This `call` method accepts the command name and an array of command arguments / options:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:580 docs/master/artisan.md:576
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:585 docs/master/artisan.md:581
msgid "If you would like to call another console command and suppress all of its output, you may use the `callSilently` method. The `callSilently` method has the same signature as the `call` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:589 docs/master/artisan.md:585
#, no-wrap
msgid "    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:591 docs/master/artisan.md:587
#, no-wrap
msgid "<a name=\"stub-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/artisan.md:591 docs/master/artisan.md:587
#, no-wrap
msgid "Stub Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:594
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:596 docs/master/artisan.md:592
#, no-wrap
msgid "    php artisan stub:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:598 docs/master/artisan.md:594
msgid "The published stubs will be located within a `stubs` directory in the root of your application. Any changes you make to these stubs will be reflected when you generate their corresponding classes using Artisan's `make` commands."
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:600 docs/8.x/authentication.md:677 docs/8.x/cache.md:454
#: docs/8.x/eloquent.md:1086 docs/8.x/mail.md:770 docs/8.x/passport.md:1142
#: docs/8.x/upgrade.md:159 docs/8.x/verification.md:153
#: docs/master/artisan.md:596 docs/master/authentication.md:677
#: docs/master/cache.md:454 docs/master/eloquent.md:1078
#: docs/master/mail.md:770 docs/master/passport.md:1140
#: docs/master/upgrade.md:159 docs/master/verification.md:153
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  events.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  artisan.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  events.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/artisan.md:600 docs/8.x/authentication.md:677 docs/8.x/cache.md:454
#: docs/8.x/eloquent.md:1086 docs/8.x/events.md:1 docs/8.x/mail.md:770
#: docs/8.x/passport.md:1142 docs/8.x/upgrade.md:159
#: docs/8.x/verification.md:153 docs/master/artisan.md:596
#: docs/master/authentication.md:677 docs/master/cache.md:454
#: docs/master/eloquent.md:1078 docs/master/events.md:1 docs/master/mail.md:770
#: docs/master/passport.md:1140 docs/master/upgrade.md:159
#: docs/master/verification.md:153
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/artisan.md:602 docs/master/artisan.md:598
msgid "Artisan dispatches three events when running commands: `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event is dispatched immediately when Artisan starts running. Next, the `CommandStarting` event is dispatched immediately before a command runs. Finally, the `CommandFinished` event is dispatched once a command finishes executing."
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/authentication.md:1 docs/8.x/dusk.md:355 docs/8.x/fortify.md:124
#: docs/8.x/http-client.md:130 docs/8.x/socialite.md:46
#: docs/master/authentication.md:1 docs/master/dusk.md:355
#: docs/master/fortify.md:124 docs/master/http-client.md:122
#: docs/master/socialite.md:46
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Starter Kits](#starter-kits)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Database Considerations](#introduction-database-considerations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Ecosystem Overview](#ecosystem-overview)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Authentication Quickstart](#authentication-quickstart)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Install A Starter Kit](#install-a-starter-kit)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Retrieving The Authenticated User](#retrieving-the-authenticated-user)"
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/8.x/fortify.md:25 docs/8.x/passport.md:45
#: docs/8.x/sanctum.md:23 docs/8.x/verification.md:13
#: docs/master/authentication.md:30 docs/master/fortify.md:25
#: docs/master/passport.md:45 docs/master/sanctum.md:23
#: docs/master/verification.md:13
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Login Throttling](#login-throttling)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Manually Authenticating Users](#authenticating-users)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Remembering Users](#remembering-users)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Other Authentication Methods](#other-authentication-methods)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[HTTP Basic Authentication](#http-basic-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Stateless HTTP Basic Authentication](#stateless-http-basic-authentication)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Logging Out](#logging-out)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Invalidating Sessions On Other Devices](#invalidating-sessions-on-other-devices)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/8.x/fortify.md:25
#: docs/master/authentication.md:30 docs/master/fortify.md:25
msgid "[Password Confirmation](#password-confirmation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Configuration](#password-confirmation-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Routing](#password-confirmation-routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Protecting Routes](#password-confirmation-protecting-routes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Adding Custom Guards](#adding-custom-guards)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Closure Request Guards](#closure-request-guards)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Adding Custom User Providers](#adding-custom-user-providers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[The User Provider Contract](#the-user-provider-contract)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[The Authenticatable Contract](#the-authenticatable-contract)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authentication.md:30 docs/master/authentication.md:30
msgid "[Social Authentication](/docs/{{version}}/socialite)"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:35 docs/master/authentication.md:35
msgid "Many web applications provide a way for their users to authenticate with the application and \"login\". Implementing this feature in web applications can be a complex and potentially risky endeavor. For this reason, Laravel strives to give you the tools you need to implement authentication quickly, securely, and easily."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:37 docs/master/authentication.md:37
msgid "At its core, Laravel's authentication facilities are made up of \"guards\" and \"providers\". Guards define how users are authenticated for each request. For example, Laravel ships with a `session` guard which maintains state using session storage and cookies."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:39 docs/master/authentication.md:39
msgid "Providers define how users are retrieved from your persistent storage. Laravel ships with support for retrieving users using [Eloquent](/docs/{{version}}/eloquent) and the database query builder. However, you are free to define additional providers as needed for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:41 docs/master/authentication.md:41
msgid "Your application's authentication configuration file is located at `config/auth.php`. This file contains several well documented options for tweaking the behavior of Laravel's authentication services."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:43 docs/master/authentication.md:43
#, no-wrap
msgid "> {tip} Guards and providers should not be confused with \"roles\" and \"permissions\". To learn more about authorizing user actions via permissions, please refer to the [authorization](/docs/{{version}}/authorization) documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:45 docs/master/authentication.md:45
#, no-wrap
msgid "<a name=\"starter-kits\"></a>\n"
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/authentication.md:45 docs/8.x/starter-kits.md:1
#: docs/master/authentication.md:45 docs/master/starter-kits.md:1
#, no-wrap
msgid "Starter Kits"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:48 docs/master/authentication.md:48
msgid "Want to get started fast? Install a [Laravel application starter kit](/docs/{{version}}/starter-kits) in a fresh Laravel application. After migrating your database, navigate your browser to `/register` or any other URL that is assigned to your application. The starter kits will take care of scaffolding your entire authentication system!"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:50 docs/master/authentication.md:50
#, no-wrap
msgid "**Even if you choose to not use a starter kit in your final Laravel application, installing the [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze) starter kit can be a wonderful opportunity to learn how to implement all of Laravel's authentication functionality in an actual Laravel project.** Since Laravel Breeze creates authentication controllers, routes, and views for you, you can examine the code within these files to learn how Laravel's authentication features may be implemented.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:52 docs/master/authentication.md:52
#, no-wrap
msgid "<a name=\"introduction-database-considerations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:52 docs/master/authentication.md:52
#, no-wrap
msgid "Database Considerations"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:55 docs/master/authentication.md:55
msgid "By default, Laravel includes an `App\\Models\\User` [Eloquent model](/docs/{{version}}/eloquent) in your `app/Models` directory. This model may be used with the default Eloquent authentication driver. If your application is not using Eloquent, you may use the `database` authentication provider which uses the Laravel query builder."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:57 docs/master/authentication.md:57
msgid "When building the database schema for the `App\\Models\\User` model, make sure the password column is at least 60 characters in length. Of course, the `users` table migration that is included in new Laravel applications already creates a column that exceeds this length."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:59 docs/master/authentication.md:59
msgid "Also, you should verify that your `users` (or equivalent) table contains a nullable, string `remember_token` column of 100 characters. This column will be used to store a token for users that select the \"remember me\" option when logging into your application. Again, the default `users` table migration that is included in new Laravel applications already contains this column."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:61 docs/master/authentication.md:61
#, no-wrap
msgid "<a name=\"ecosystem-overview\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:61 docs/master/authentication.md:61
#, no-wrap
msgid "Ecosystem Overview"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:64 docs/master/authentication.md:64
msgid "Laravel offers several packages related to authentication. Before continuing, we'll review the general authentication ecosystem in Laravel and discuss each package's intended purpose."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:66 docs/master/authentication.md:66
msgid "First, consider how authentication works. When using a web browser, a user will provide their username and password via a login form. If these credentials are correct, the application will store information about the authenticated user in the user's [session](/docs/{{version}}/session). A cookie issued to the browser contains the session ID so that subsequent requests to the application can associate the user with the correct session. After the session cookie is received, the application will retrieve the session data based on the session ID, note that the authentication information has been stored in the session, and will consider the user as \"authenticated\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:68 docs/master/authentication.md:68
msgid "When a remote service needs to authenticate to access an API, cookies are not typically used for authentication because there is no web browser. Instead, the remote service sends an API token to the API on each request. The application may validate the incoming token against a table of valid API tokens and \"authenticate\" the request as being performed by the user associated with that API token."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:70 docs/master/authentication.md:70
#, no-wrap
msgid "<a name=\"laravels-built-in-browser-authentication-services\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:70 docs/master/authentication.md:70
#, no-wrap
msgid "Laravel's Built-in Browser Authentication Services"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:73 docs/master/authentication.md:73
msgid "Laravel includes built-in authentication and session services which are typically accessed via the `Auth` and `Session` facades. These features provide cookie based authentication for requests that are initiated from web browsers. They provide methods that allow you to verify a user's credentials and authenticate the user. In addition, these services will automatically store the proper authentication data in the user's session and issue the user's session cookie. A discussion of how to use these services is contained within this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:75 docs/master/authentication.md:75
#, no-wrap
msgid "**Application Starter Kits**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:77 docs/master/authentication.md:77
msgid "As discussed in this documentation, you can interact with these authentication services manually to build your application's own authentication layer. However, to help you get started more quickly, we have released [free packages](/docs/{{version}}/starter-kits) that provide robust, modern scaffolding of the entire authentication layer. These packages are [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze), [Laravel Jetstream](/docs/{{version}}/starter-kits#laravel-jetstream), and [Laravel Fortify](/docs/{{version}}/fortify)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:79 docs/master/authentication.md:79
msgid "_Laravel Breeze_ is a simple, minimal implementation of all of Laravel's authentication features, including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's view layer is comprised of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com). To get started, check out the documentation on Laravel's [application starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:81 docs/master/authentication.md:81
msgid "_Laravel Fortify_ is a headless authentication backend for Laravel that implements many of the features found in this documentation, including cookie-based authentication as well as other features such as two-factor authentication and email verification. Fortify provides the authentication backend for Laravel Jetstream or may be used independently in combination with [Laravel Sanctum](/docs/{{version}}/sanctum) to provide authentication for an SPA that needs to authenticate with Laravel."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:83 docs/master/authentication.md:83
msgid "_[Laravel Jetstream](https://jetstream.laravel.com)_ is a robust application starter kit that consumes and exposes Laravel Fortify's authentication services with a beautiful, modern UI powered by [Tailwind CSS](https://tailwindcss.com), [Livewire](https://laravel-livewire.com), and / or [Inertia.js](https://inertiajs.com). Laravel Jetstream includes optional support for two-factor authentication, team support, browser session management, profile management, and built-in integration with [Laravel Sanctum](/docs/{{version}}/sanctum) to offer API token authentication. Laravel's API authentication offerings are discussed below."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:85 docs/master/authentication.md:85
#, no-wrap
msgid "<a name=\"laravels-api-authentication-services\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:85 docs/master/authentication.md:85
#, no-wrap
msgid "Laravel's API Authentication Services"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:88 docs/master/authentication.md:88
msgid "Laravel provides two optional packages to assist you in managing API tokens and authenticating requests made with API tokens: [Passport](/docs/{{version}}/passport) and [Sanctum](/docs/{{version}}/sanctum). Please note that these libraries and Laravel's built-in cookie based authentication libraries are not mutually exclusive. These libraries primarily focus on API token authentication while the built-in authentication services focus on cookie based browser authentication. Many applications will use both Laravel's built-in cookie based authentication services and one of Laravel's API authentication packages."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:90 docs/master/authentication.md:90
#, no-wrap
msgid "**Passport**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:92 docs/master/authentication.md:92
msgid "Passport is an OAuth2 authentication provider, offering a variety of OAuth2 \"grant types\" which allow you to issue various types of tokens. In general, this is a robust and complex package for API authentication. However, most applications do not require the complex features offered by the OAuth2 spec, which can be confusing for both users and developers. In addition, developers have been historically confused about how to authenticate SPA applications or mobile applications using OAuth2 authentication providers like Passport."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:94 docs/master/authentication.md:94
#, no-wrap
msgid "**Sanctum**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:96 docs/master/authentication.md:96
msgid "In response to the complexity of OAuth2 and developer confusion, we set out to build a simpler, more streamlined authentication package that could handle both first-party web requests from a web browser and API requests via tokens. This goal was realized with the release of [Laravel Sanctum](/docs/{{version}}/sanctum), which should be considered the preferred and recommended authentication package for applications that will be offering a first-party web UI in addition to an API, or will be powered by a single-page application (SPA) that exists separately from the backend Laravel application, or applications that offer a mobile client."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:98 docs/master/authentication.md:98
msgid "Laravel Sanctum is a hybrid web / API authentication package that can manage your application's entire authentication process. This is possible because when Sanctum based applications receive a request, Sanctum will first determine if the request includes a session cookie that references an authenticated session. Sanctum accomplishes this by calling Laravel's built-in authentication services which we discussed earlier. If the request is not being authenticated via a session cookie, Sanctum will inspect the request for an API token. If an API token is present, Sanctum will authenticate the request using that token. To learn more about this process, please consult Sanctum's [\"how it works\"](/docs/{{version}}/sanctum#how-it-works) documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:100 docs/master/authentication.md:100
msgid "Laravel Sanctum is the API package we have chosen to include with the [Laravel Jetstream](https://jetstream.laravel.com) application starter kit because we believe it is the best fit for the majority of web application's authentication needs."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:102 docs/master/authentication.md:102
#, no-wrap
msgid "<a name=\"summary-choosing-your-stack\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:102 docs/master/authentication.md:102
#, no-wrap
msgid "Summary & Choosing Your Stack"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:105 docs/master/authentication.md:105
msgid "In summary, if your application will be accessed using a browser and you are building a monolithic Laravel application, your application will use Laravel's built-in authentication services."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:107 docs/master/authentication.md:107
msgid "Next, if your application offers an API that will be consumed by third parties, you will choose between [Passport](/docs/{{version}}/passport) or [Sanctum](/docs/{{version}}/sanctum) to provide API token authentication for your application. In general, Sanctum should be preferred when possible since it is a simple, complete solution for API authentication, SPA authentication, and mobile authentication, including support for \"scopes\" or \"abilities\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:109 docs/master/authentication.md:109
msgid "If you are building a single-page application (SPA) that will be powered by a Laravel backend, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). When using Sanctum, you will either need to [manually implement your own backend authentication routes](#authenticating-users) or utilize [Laravel Fortify](/docs/{{version}}/fortify) as a headless authentication backend service that provides routes and controllers for features such as registration, password reset, email verification, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:111 docs/master/authentication.md:111
msgid "Passport may be chosen when your application absolutely needs all of the features provided by the OAuth2 specification."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:113 docs/master/authentication.md:113
msgid "And, if you would like to get started quickly, we are pleased to recommend [Laravel Jetstream](https://jetstream.laravel.com) as a quick way to start a new Laravel application that already uses our preferred authentication stack of Laravel's built-in authentication services and Laravel Sanctum."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:115 docs/master/authentication.md:115
#, no-wrap
msgid "<a name=\"authentication-quickstart\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:115 docs/master/authentication.md:115
#, no-wrap
msgid "Authentication Quickstart"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:118 docs/master/authentication.md:118
#, no-wrap
msgid "> {note} This portion of the documentation discusses authenticating users via the [Laravel application starter kits](/docs/{{version}}/starter-kits), which includes UI scaffolding to help you get started quickly. If you would like to integrate with Laravel's authentication systems directly, check out the documentation on [manually authenticating users](#authenticating-users).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:120 docs/master/authentication.md:120
#, no-wrap
msgid "<a name=\"install-a-starter-kit\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:120 docs/master/authentication.md:120
#, no-wrap
msgid "Install A Starter Kit"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:123 docs/master/authentication.md:123
msgid "First, you should [install a Laravel application starter kit](/docs/{{version}}/starter-kits). Our current starter kits, Laravel Breeze and Laravel Jetstream, offer beautifully designed starting points for incorporating authentication into your fresh Laravel application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:125 docs/master/authentication.md:125
msgid "Laravel Breeze is a minimal, simple implementation of all of Laravel's authentication features, including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's view layer is made up of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:127 docs/master/authentication.md:127
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a more robust application starter kit that includes support for scaffolding your application with [Livewire](https://laravel-livewire.com) or [Inertia.js and Vue](https://inertiajs.com). In addition, Jetstream features optional support for two-factor authentication, teams, profile management, browser session management, API support via [Laravel Sanctum](/docs/{{version}}/sanctum), account deletion, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:129 docs/master/authentication.md:129
#, no-wrap
msgid "<a name=\"retrieving-the-authenticated-user\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:129 docs/master/authentication.md:129
#, no-wrap
msgid "Retrieving The Authenticated User"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:132 docs/master/authentication.md:132
msgid "After installing an authentication starter kit and allowing users to register and authenticate with your application, you will often need to interact with the currently authenticated user. While handling an incoming request, you may access the authenticated user via the `Auth` facade's `user` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:134 docs/8.x/authentication.md:169
#: docs/8.x/authentication.md:293 docs/8.x/authentication.md:307
#: docs/8.x/authentication.md:367 docs/8.x/authentication.md:433
#: docs/8.x/eloquent-resources.md:490 docs/master/authentication.md:134
#: docs/master/authentication.md:169 docs/master/authentication.md:293
#: docs/master/authentication.md:307 docs/master/authentication.md:367
#: docs/master/authentication.md:433 docs/master/eloquent-resources.md:490
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:137 docs/master/authentication.md:137
#, no-wrap
msgid "    // Retrieve the currently authenticated user...\n"
"    $user = Auth::user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:140 docs/master/authentication.md:140
#, no-wrap
msgid "    // Retrieve the currently authenticated user's ID...\n"
"    $id = Auth::id();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:142 docs/master/authentication.md:142
msgid "Alternatively, once a user is authenticated, you may access the authenticated user via an `Illuminate\\Http\\Request` instance. Remember, type-hinted classes will automatically be injected into your controller methods. By type-hinting the `Illuminate\\Http\\Request` object, you may gain convenient access to the authenticated user from any controller method in your application via the request's `user` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:146 docs/8.x/authentication.md:227
#: docs/8.x/authorization.md:89 docs/8.x/authorization.md:451
#: docs/8.x/authorization.md:485 docs/8.x/authorization.md:518
#: docs/8.x/authorization.md:575 docs/8.x/billing.md:1198 docs/8.x/cache.md:98
#: docs/8.x/cashier-paddle.md:946 docs/8.x/cashier-paddle.md:1140
#: docs/8.x/container.md:30 docs/8.x/container.md:385
#: docs/8.x/controllers.md:34 docs/8.x/controllers.md:72
#: docs/8.x/controllers.md:358 docs/8.x/controllers.md:388
#: docs/8.x/controllers.md:418 docs/8.x/database.md:118
#: docs/8.x/eloquent.md:495 docs/8.x/encryption.md:28 docs/8.x/events.md:518
#: docs/8.x/facades.md:135 docs/8.x/filesystem.md:310 docs/8.x/hashing.md:35
#: docs/8.x/logging.md:149 docs/8.x/mail.md:547 docs/8.x/mocking.md:82
#: docs/8.x/pagination.md:36 docs/8.x/queries.md:54 docs/8.x/queues.md:563
#: docs/8.x/queues.md:601 docs/8.x/queues.md:654 docs/8.x/queues.md:776
#: docs/8.x/queues.md:835 docs/8.x/redis.md:187 docs/8.x/requests.md:39
#: docs/8.x/requests.md:80 docs/8.x/session.md:83 docs/8.x/validation.md:65
#: docs/8.x/validation.md:427 docs/master/authentication.md:146
#: docs/master/authentication.md:227 docs/master/authorization.md:89
#: docs/master/authorization.md:451 docs/master/authorization.md:485
#: docs/master/authorization.md:518 docs/master/authorization.md:575
#: docs/master/billing.md:1071 docs/master/cache.md:98
#: docs/master/cashier-paddle.md:906 docs/master/cashier-paddle.md:1100
#: docs/master/container.md:30 docs/master/container.md:379
#: docs/master/controllers.md:34 docs/master/controllers.md:72
#: docs/master/controllers.md:345 docs/master/controllers.md:375
#: docs/master/controllers.md:405 docs/master/database.md:118
#: docs/master/eloquent.md:495 docs/master/encryption.md:28
#: docs/master/events.md:518 docs/master/facades.md:134
#: docs/master/filesystem.md:310 docs/master/hashing.md:35
#: docs/master/logging.md:149 docs/master/mail.md:547 docs/master/mocking.md:82
#: docs/master/pagination.md:36 docs/master/queries.md:54
#: docs/master/queues.md:501 docs/master/queues.md:539
#: docs/master/queues.md:592 docs/master/queues.md:714
#: docs/master/queues.md:773 docs/master/redis.md:187
#: docs/master/requests.md:38 docs/master/requests.md:79
#: docs/master/session.md:83 docs/master/validation.md:65
#: docs/master/validation.md:414
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:148 docs/8.x/billing.md:231
#: docs/8.x/billing.md:239 docs/8.x/billing.md:452 docs/8.x/billing.md:750
#: docs/8.x/billing.md:871 docs/8.x/billing.md:1006 docs/8.x/billing.md:1062
#: docs/8.x/billing.md:1244 docs/8.x/billing.md:1338
#: docs/8.x/cashier-paddle.md:460 docs/8.x/cashier-paddle.md:834
#: docs/8.x/cashier-paddle.md:887 docs/8.x/cashier-paddle.md:1003
#: docs/8.x/cashier-paddle.md:1043 docs/8.x/container.md:99
#: docs/8.x/controllers.md:390 docs/8.x/controllers.md:420 docs/8.x/csrf.md:41
#: docs/8.x/passport.md:767 docs/8.x/passport.md:1066 docs/8.x/requests.md:41
#: docs/8.x/requests.md:61 docs/8.x/requests.md:82 docs/8.x/routing.md:80
#: docs/8.x/routing.md:149 docs/8.x/sanctum.md:132 docs/8.x/sanctum.md:182
#: docs/8.x/sanctum.md:279 docs/8.x/urls.md:114 docs/8.x/verification.md:102
#: docs/master/authentication.md:148 docs/master/billing.md:201
#: docs/master/billing.md:209 docs/master/billing.md:422
#: docs/master/billing.md:711 docs/master/billing.md:887
#: docs/master/billing.md:939 docs/master/billing.md:1117
#: docs/master/billing.md:1211 docs/master/cashier-paddle.md:420
#: docs/master/cashier-paddle.md:794 docs/master/cashier-paddle.md:847
#: docs/master/cashier-paddle.md:963 docs/master/cashier-paddle.md:1003
#: docs/master/container.md:99 docs/master/controllers.md:377
#: docs/master/controllers.md:407 docs/master/csrf.md:41
#: docs/master/passport.md:765 docs/master/passport.md:1064
#: docs/master/requests.md:40 docs/master/requests.md:60
#: docs/master/requests.md:81 docs/master/routing.md:80
#: docs/master/routing.md:149 docs/master/sanctum.md:132
#: docs/master/sanctum.md:182 docs/master/sanctum.md:279
#: docs/master/urls.md:114 docs/master/verification.md:102
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:162 docs/master/authentication.md:162
#, no-wrap
msgid "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the flight information for an existing flight.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            // $request->user()\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:164 docs/master/authentication.md:164
#, no-wrap
msgid "<a name=\"determining-if-the-current-user-is-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:164 docs/master/authentication.md:164
#, no-wrap
msgid "Determining If The Current User Is Authenticated"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:167 docs/master/authentication.md:167
msgid "To determine if the user making the incoming HTTP request is authenticated, you may use the `check` method on the `Auth` facade. This method will return `true` if the user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:173 docs/master/authentication.md:173
#, no-wrap
msgid "    if (Auth::check()) {\n"
"        // The user is logged in...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:175 docs/master/authentication.md:175
#, no-wrap
msgid "> {tip} Even though it is possible to determine if a user is authenticated using the `check` method, you will typically use a middleware to verify that the user is authenticated before allowing the user access to certain routes / controllers. To learn more about this, check out the documentation on [protecting routes](/docs/{{version}}/authentication#protecting-routes).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:177 docs/8.x/fortify.md:465
#: docs/8.x/passport.md:916 docs/8.x/sanctum.md:175
#: docs/8.x/verification.md:110 docs/master/authentication.md:177
#: docs/master/fortify.md:465 docs/master/passport.md:914
#: docs/master/sanctum.md:175 docs/master/verification.md:110
#, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/authentication.md:177 docs/8.x/authentication.md:488
#: docs/8.x/fortify.md:465 docs/8.x/passport.md:916 docs/8.x/sanctum.md:175
#: docs/8.x/sanctum.md:274 docs/8.x/sanctum.md:356 docs/8.x/verification.md:110
#: docs/master/authentication.md:177 docs/master/authentication.md:488
#: docs/master/fortify.md:465 docs/master/passport.md:914
#: docs/master/sanctum.md:175 docs/master/sanctum.md:274
#: docs/master/sanctum.md:356 docs/master/verification.md:110
#, no-wrap
msgid "Protecting Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:180 docs/master/authentication.md:180
msgid "[Route middleware](/docs/{{version}}/middleware) can be used to only allow authenticated users to access a given route. Laravel ships with an `auth` middleware, which references the `Illuminate\\Auth\\Middleware\\Authenticate` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:184 docs/master/authentication.md:184
#, no-wrap
msgid "    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:186 docs/master/authentication.md:186
#, no-wrap
msgid "<a name=\"redirecting-unauthenticated-users\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:186 docs/master/authentication.md:186
#, no-wrap
msgid "Redirecting Unauthenticated Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:189 docs/master/authentication.md:189
msgid "When the `auth` middleware detects an unauthenticated user, it will redirect the user to the `login` [named route](/docs/{{version}}/routing#named-routes). You may modify this behavior by updating the `redirectTo` function in your application's `app/Http/Middleware/Authenticate.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:200 docs/master/authentication.md:200
#, no-wrap
msgid "    /**\n"
"     * Get the path the user should be redirected to.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return string\n"
"     */\n"
"    protected function redirectTo($request)\n"
"    {\n"
"        return route('login');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:202 docs/master/authentication.md:202
#, no-wrap
msgid "<a name=\"specifying-a-guard\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:202 docs/master/authentication.md:202
#, no-wrap
msgid "Specifying A Guard"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:205 docs/master/authentication.md:205
msgid "When attaching the `auth` middleware to a route, you may also specify which \"guard\" should be used to authenticate the user. The guard specified should correspond to one of the keys in the `guards` array of your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:209 docs/master/authentication.md:209
#, no-wrap
msgid "    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth:admin');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:211 docs/master/authentication.md:211
#, no-wrap
msgid "<a name=\"login-throttling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:211 docs/master/authentication.md:211
#, no-wrap
msgid "Login Throttling"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:214 docs/master/authentication.md:214
msgid "If you are using the Laravel Breeze or Laravel Jetstream [starter kits](/docs/{{version}}/starter-kits), rate limiting will automatically be applied to login attempts. By default, the user will not be able to login for one minute if they fail to provide the correct credentials after several attempts. The throttling is unique to the user's username / email address and their IP address."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:216 docs/master/authentication.md:216
#, no-wrap
msgid "> {tip} If you would like to rate limit other routes in your application, check out the [rate limiting documentation](/docs/{{version}}/routing#rate-limiting).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:218 docs/master/authentication.md:218
#, no-wrap
msgid "<a name=\"authenticating-users\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:218 docs/master/authentication.md:218
#, no-wrap
msgid "Manually Authenticating Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:221 docs/master/authentication.md:221
msgid "You are not required to use the authentication scaffolding included with Laravel's [application starter kits](/docs/{{version}}/starter-kits). If you choose to not use this scaffolding, you will need to manage user authentication using the Laravel authentication classes directly. Don't worry, it's a cinch!"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:223 docs/master/authentication.md:223
msgid "We will access Laravel's authentication services via the `Auth` [facade](/docs/{{version}}/facades), so we'll need to make sure to import the `Auth` facade at the top of the class. Next, let's check out the `attempt` method. The `attempt` method is normally used to handle authentication attempt's from your application's \"login\" form. If authentication is successful, you should regenerate the user's [session](/docs/{{version}}/session) to prevent [session fixation](https://en.wikipedia.org/wiki/Session_fixation):"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:230 docs/8.x/authentication.md:399
#: docs/master/authentication.md:230 docs/master/authentication.md:399
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:242 docs/master/authentication.md:242
#, no-wrap
msgid "    class LoginController extends Controller\n"
"    {\n"
"        /**\n"
"         * Handle an authentication attempt.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function authenticate(Request $request)\n"
"        {\n"
"            $credentials = $request->only('email', 'password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:245 docs/master/authentication.md:245
#, no-wrap
msgid "            if (Auth::attempt($credentials)) {\n"
"                $request->session()->regenerate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:248 docs/master/authentication.md:248
#, no-wrap
msgid "                return redirect()->intended('dashboard');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:254 docs/master/authentication.md:254
#, no-wrap
msgid "            return back()->withErrors([\n"
"                'email' => 'The provided credentials do not match our records.',\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:256
msgid "The `attempt` method accepts an array of key / value pairs as its first argument. The values in the array will be used to find the user in your database table. So, in the example above, the user will be retrieved by the value of the `email` column. If the user is found, the hashed password stored in the database will be compared with the `password` value passed to the method via the array. You should not hash the incoming request's `password` value, since the framework will automatically hash the value before comparing it to the hashed password in the database. An authenticated session will be started for the user if the two hashed passwords match."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:258 docs/master/authentication.md:258
msgid "Remember, Laravel's authentication services will retrieve users from your database based on your authentication guard's \"provider\" configuration. In the default `config/auth.php` configuration file, the Eloquent user provider is specified and it is instructed to use the `App\\Models\\User` model when retrieving users. You may change these values within your configuration file based on the needs of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:260 docs/master/authentication.md:260
msgid "The `attempt` method will return `true` if authentication was successful. Otherwise, `false` will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:262 docs/master/authentication.md:262
msgid "The `intended` method provided by Laravel's redirector will redirect the user to the URL they were attempting to access before being intercepted by the authentication middleware. A fallback URI may be given to this method in case the intended destination is not available."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:264 docs/master/authentication.md:264
#, no-wrap
msgid "<a name=\"specifying-additional-conditions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:264 docs/master/authentication.md:264
#, no-wrap
msgid "Specifying Additional Conditions"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:267 docs/master/authentication.md:267
msgid "If you wish, you may also add extra query conditions to the authentication query in addition to the user's email and password. To accomplish this, we may simply add the query conditions to the array passed to the `attempt` method. For example, we may verify that the user is marked as \"active\":"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:271 docs/master/authentication.md:271
#, no-wrap
msgid "    if (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {\n"
"        // Authentication was successful...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:273 docs/master/authentication.md:273
#, no-wrap
msgid "> {note} In these examples, `email` is not a required option, it is merely used as an example. You should use whatever column name corresponds to a \"username\" in your database table.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:275 docs/master/authentication.md:275
#, no-wrap
msgid "<a name=\"accessing-specific-guard-instances\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:275 docs/master/authentication.md:275
#, no-wrap
msgid "Accessing Specific Guard Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:278 docs/master/authentication.md:278
msgid "Via the `Auth` facade's `guard` method, you may specify which guard instance you would like to utilize when authenticating the user. This allows you to manage authentication for separate parts of your application using entirely separate authenticatable models or user tables."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:280 docs/master/authentication.md:280
msgid "The guard name passed to the `guard` method should correspond to one of the guards configured in your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:284 docs/master/authentication.md:284
#, no-wrap
msgid "    if (Auth::guard('admin')->attempt($credentials)) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:286 docs/master/authentication.md:286
#, no-wrap
msgid "<a name=\"remembering-users\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:286 docs/master/authentication.md:286
#, no-wrap
msgid "Remembering Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:289 docs/master/authentication.md:289
msgid "Many web applications provide a \"remember me\" checkbox on their login form. If you would like to provide \"remember me\" functionality in your application, you may pass a boolean value as the second argument to the `attempt` method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:291 docs/master/authentication.md:291
msgid "When this value is `true`, Laravel will keep the user authenticated indefinitely or until they manually logout. Your `users` table must include the string `remember_token` column, which will be used to store the \"remember me\" token. The `users` table migration included with new Laravel applications already includes this column:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:297 docs/master/authentication.md:297
#, no-wrap
msgid "    if (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {\n"
"        // The user is being remembered...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:299 docs/master/authentication.md:299
#, no-wrap
msgid "<a name=\"other-authentication-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:299 docs/master/authentication.md:299
#, no-wrap
msgid "Other Authentication Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:302 docs/master/authentication.md:302
#, no-wrap
msgid "<a name=\"authenticate-a-user-instance\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:302 docs/master/authentication.md:302
#, no-wrap
msgid "Authenticate A User Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:305 docs/master/authentication.md:305
msgid "If you need to set an existing user instance as the currently authenticated user, you may pass the user instance to the `Auth` facade's `login` method. The given user instance must be an implementation of the `Illuminate\\Contracts\\Auth\\Authenticatable` [contract](/docs/{{version}}/contracts). The `App\\Models\\User` model included with Laravel already implements this interface. This method of authentication is useful when you already have a valid user instance, such as directly after a user registers with your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:309 docs/master/authentication.md:309
#, no-wrap
msgid "    Auth::login($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:311 docs/master/authentication.md:311
msgid "You may pass a boolean value as the second argument to the `login` method. This value indicates if \"remember me\" functionality is desired for the authenticated session. Remember, this means that the session will be authenticated indefinitely or until the user manually logs out of the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:313 docs/master/authentication.md:313
#, no-wrap
msgid "    Auth::login($user, $remember = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:315 docs/master/authentication.md:315
msgid "If needed, you may specify an authentication guard before calling the `login` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:317 docs/master/authentication.md:317
#, no-wrap
msgid "    Auth::guard('admin')->login($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:319 docs/master/authentication.md:319
#, no-wrap
msgid "<a name=\"authenticate-a-user-by-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:319 docs/master/authentication.md:319
#, no-wrap
msgid "Authenticate A User By ID"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:322 docs/master/authentication.md:322
msgid "To authenticate a user using their database record's primary key, you may use the `loginUsingId` method. This method accepts the primary key of the user you wish to authenticate:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:324 docs/master/authentication.md:324
#, no-wrap
msgid "    Auth::loginUsingId(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:326 docs/master/authentication.md:326
msgid "You may pass a boolean value as the second argument to the `loginUsingId` method. This value indicates if \"remember me\" functionality is desired for the authenticated session. Remember, this means that the session will be authenticated indefinitely or until the user manually logs out of the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:328 docs/master/authentication.md:328
#, no-wrap
msgid "    Auth::loginUsingId(1, $remember = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:330 docs/master/authentication.md:330
#, no-wrap
msgid "<a name=\"authenticate-a-user-once\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:330 docs/master/authentication.md:330
#, no-wrap
msgid "Authenticate A User Once"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:333 docs/master/authentication.md:333
msgid "You may use the `once` method to authenticate a user with the application for a single request. No sessions or cookies will be utilized when calling this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:337 docs/master/authentication.md:337
#, no-wrap
msgid "    if (Auth::once($credentials)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:339 docs/master/authentication.md:339
#, no-wrap
msgid "<a name=\"http-basic-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:339 docs/master/authentication.md:339
#, no-wrap
msgid "HTTP Basic Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:342 docs/master/authentication.md:342
msgid "[HTTP Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) provides a quick way to authenticate users of your application without setting up a dedicated \"login\" page. To get started, attach the `auth.basic` [middleware](/docs/{{version}}/middleware) to a route. The `auth.basic` middleware is included with the Laravel framework, so you do not need to define it:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:346 docs/master/authentication.md:346
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:348 docs/master/authentication.md:348
msgid "Once the middleware has been attached to the route, you will automatically be prompted for credentials when accessing the route in your browser. By default, the `auth.basic` middleware will assume the `email` column on your `users` database table is the user's \"username\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:350 docs/master/authentication.md:350
#, no-wrap
msgid "<a name=\"a-note-on-fastcgi\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:350 docs/master/authentication.md:350
#, no-wrap
msgid "A Note On FastCGI"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:353 docs/master/authentication.md:353
msgid "If you are using PHP FastCGI and Apache to serve your Laravel application, HTTP Basic authentication may not work correctly. To correct these problems, the following lines may be added to your application's `.htaccess` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:356 docs/master/authentication.md:356
#, no-wrap
msgid "    RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:358 docs/master/authentication.md:358
#, no-wrap
msgid "<a name=\"stateless-http-basic-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:358 docs/master/authentication.md:358
#, no-wrap
msgid "Stateless HTTP Basic Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:361 docs/master/authentication.md:361
msgid "You may also use HTTP Basic Authentication without setting a user identifier cookie in the session. This is primarily helpful if you choose to use HTTP Authentication to authenticate requests to your application's API. To accomplish this, [define a middleware](/docs/{{version}}/middleware) that calls the `onceBasic` method. If no response is returned by the `onceBasic` method, the request may be passed further into the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:365 docs/8.x/billing.md:536
#: docs/8.x/cashier-paddle.md:528 docs/8.x/csrf.md:76 docs/8.x/middleware.md:32
#: docs/8.x/middleware.md:69 docs/8.x/middleware.md:87
#: docs/8.x/middleware.md:239 docs/8.x/requests.md:479 docs/8.x/urls.md:169
#: docs/master/authentication.md:365 docs/master/billing.md:497
#: docs/master/cashier-paddle.md:488 docs/master/csrf.md:76
#: docs/master/middleware.md:32 docs/master/middleware.md:69
#: docs/master/middleware.md:87 docs/master/middleware.md:239
#: docs/master/requests.md:474 docs/master/urls.md:169
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:381 docs/master/authentication.md:381
#, no-wrap
msgid "    class AuthenticateOnceWithBasicAuth\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, $next)\n"
"        {\n"
"            return Auth::onceBasic() ?: $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:383 docs/8.x/middleware.md:262
#: docs/master/authentication.md:383 docs/master/middleware.md:262
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:385 docs/master/authentication.md:385
msgid "Next, [register the route middleware](/docs/{{version}}/middleware#registering-middleware) and attach it to a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:389 docs/master/authentication.md:389
#, no-wrap
msgid "    Route::get('/api/user', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic.once');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:391 docs/master/authentication.md:391
#, no-wrap
msgid "<a name=\"logging-out\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:391 docs/master/authentication.md:391
#, no-wrap
msgid "Logging Out"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:394 docs/master/authentication.md:394
msgid "To manually log users out of your application, you may use the `logout` method provided by the `Auth` facade. This will remove the authentication information from the user's session so that subsequent requests are not authenticated."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:396 docs/master/authentication.md:396
msgid "In addition to calling the `logout` method, it is recommended that you invalidate the user's session and regenerate their [CSRF token](/docs/{{version}}/csrf). After logging the user out, you would typically redirect the user to the root of your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:409 docs/master/authentication.md:409
#, no-wrap
msgid "    /**\n"
"     * Log the user out of the application.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function logout(Request $request)\n"
"    {\n"
"        Auth::logout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:411 docs/master/authentication.md:411
#, no-wrap
msgid "        $request->session()->invalidate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:413 docs/master/authentication.md:413
#, no-wrap
msgid "        $request->session()->regenerateToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:416 docs/master/authentication.md:416
#, no-wrap
msgid "        return redirect('/');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:418 docs/master/authentication.md:418
#, no-wrap
msgid "<a name=\"invalidating-sessions-on-other-devices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:418 docs/master/authentication.md:418
#, no-wrap
msgid "Invalidating Sessions On Other Devices"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:421 docs/master/authentication.md:421
msgid "Laravel also provides a mechanism for invalidating and \"logging out\" a user's sessions that are active on other devices without invalidating the session on their current device. This feature is typically utilized when a user is changing or updating their password and you would like to invalidate sessions on other devices while keeping the current device authenticated."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:423 docs/master/authentication.md:423
msgid "Before getting started, you should make sure that the `Illuminate\\Session\\Middleware\\AuthenticateSession` middleware is present and un-commented in your `App\\Http\\Kernel` class' `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:429 docs/master/authentication.md:429
#, no-wrap
msgid "    'web' => [\n"
"        // ...\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        // ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:431 docs/master/authentication.md:431
msgid "Then, you may use the `logoutOtherDevices` method provided by the `Auth` facade. This method requires the user to confirm their current password, which your application should accept through an input form:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:435 docs/master/authentication.md:435
#, no-wrap
msgid "    Auth::logoutOtherDevices($currentPassword);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:437 docs/master/authentication.md:437
msgid "When the `logoutOtherDevices` method is invoked, the user's other sessions will be invalidated entirely, meaning they will be \"logged out\" of all guards they were previously authenticated by."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:439 docs/8.x/fortify.md:476
#: docs/master/authentication.md:439 docs/master/fortify.md:476
#, no-wrap
msgid "<a name=\"password-confirmation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:439 docs/8.x/fortify.md:476
#: docs/master/authentication.md:439 docs/master/fortify.md:476
#, no-wrap
msgid "Password Confirmation"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:442 docs/master/authentication.md:442
msgid "While building your application, you may occasionally have actions that should require the user to confirm their password before the action is performed or before the user is redirected to a sensitive area of the application. Laravel includes built-in middleware to make this process a breeze. Implementing this feature will require you to define two routes: one route to display a view asking the user to confirm their password and another route to confirm that the password is valid and redirect the user to their intended destination."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:444 docs/master/authentication.md:444
#, no-wrap
msgid "> {tip} The following documentation discusses how to integrate with Laravel's password confirmation features directly; however, if you would like to get started more quickly, the [Laravel application starter kits](/docs/{{version}}/starter-kits) include support for this feature!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:446 docs/master/authentication.md:446
#, no-wrap
msgid "<a name=\"password-confirmation-configuration\"></a>\n"
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  encryption.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  encryption.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/authentication.md:446 docs/8.x/billing.md:111
#: docs/8.x/broadcasting.md:61 docs/8.x/broadcasting.md:607
#: docs/8.x/cache.md:33 docs/8.x/cashier-paddle.md:100
#: docs/8.x/configuration.md:1 docs/8.x/database.md:25
#: docs/8.x/encryption.md:13 docs/8.x/errors.md:19 docs/8.x/filesystem.md:27
#: docs/8.x/hashing.md:18 docs/8.x/horizon.md:42 docs/8.x/logging.md:25
#: docs/8.x/mail.md:33 docs/8.x/packages.md:84 docs/8.x/passport.md:205
#: docs/8.x/redis.md:27 docs/8.x/sanctum.md:81 docs/8.x/sanctum.md:211
#: docs/8.x/scout.md:84 docs/8.x/session.md:25 docs/8.x/socialite.md:33
#: docs/8.x/telescope.md:96 docs/master/authentication.md:446
#: docs/master/billing.md:109 docs/master/broadcasting.md:61
#: docs/master/broadcasting.md:607 docs/master/cache.md:33
#: docs/master/cashier-paddle.md:91 docs/master/configuration.md:1
#: docs/master/database.md:25 docs/master/encryption.md:13
#: docs/master/errors.md:19 docs/master/filesystem.md:27
#: docs/master/hashing.md:18 docs/master/horizon.md:42
#: docs/master/logging.md:25 docs/master/mail.md:33 docs/master/packages.md:84
#: docs/master/passport.md:203 docs/master/redis.md:27
#: docs/master/sanctum.md:81 docs/master/sanctum.md:211 docs/master/scout.md:79
#: docs/master/session.md:25 docs/master/socialite.md:33
#: docs/master/telescope.md:96
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:449 docs/master/authentication.md:449
msgid "After confirming their password, a user will not be asked to confirm their password again for three hours. However, you may configure the length of time before the user is re-prompted for their password by changing the value of the `password_timeout` configuration value within your application's `config/auth.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:451 docs/master/authentication.md:451
#, no-wrap
msgid "<a name=\"password-confirmation-routing\"></a>\n"
msgstr ""

#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  authentication.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/authentication.md:451 docs/8.x/lifecycle.md:52
#: docs/8.x/passwords.md:43 docs/8.x/routing.md:1 docs/8.x/socialite.md:49
#: docs/8.x/upgrade.md:301 docs/8.x/verification.md:57
#: docs/master/authentication.md:451 docs/master/lifecycle.md:52
#: docs/master/passwords.md:33 docs/master/routing.md:1
#: docs/master/socialite.md:49 docs/master/upgrade.md:301
#: docs/master/verification.md:57
#, no-wrap
msgid "Routing"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:454 docs/master/authentication.md:454
#, no-wrap
msgid "<a name=\"the-password-confirmation-form\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:454 docs/master/authentication.md:454
#, no-wrap
msgid "The Password Confirmation Form"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:457 docs/master/authentication.md:457
msgid "First, we will define a route to display a view that requests that the user confirm their password:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:461 docs/master/authentication.md:461
#, no-wrap
msgid "    Route::get('/confirm-password', function () {\n"
"        return view('auth.confirm-password');\n"
"    })->middleware('auth')->name('password.confirm');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:463 docs/master/authentication.md:463
msgid "As you might expect, the view that is returned by this route should have a form containing a `password` field. In addition, feel free to include text within the view that explains that the user is entering a protected area of the application and must confirm their password."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:465 docs/master/authentication.md:465
#, no-wrap
msgid "<a name=\"confirming-the-password\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:465 docs/master/authentication.md:465
#, no-wrap
msgid "Confirming The Password"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:468 docs/master/authentication.md:468
msgid "Next, we will define a route that will handle the form request from the \"confirm password\" view. This route will be responsible for validating the password and redirecting the user to their intended destination:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:472 docs/master/authentication.md:472
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:479 docs/master/authentication.md:479
#, no-wrap
msgid "    Route::post('/confirm-password', function (Request $request) {\n"
"        if (! Hash::check($request->password, $request->user()->password)) {\n"
"            return back()->withErrors([\n"
"                'password' => ['The provided password does not match our records.']\n"
"            ]);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:481 docs/master/authentication.md:481
#, no-wrap
msgid "        $request->session()->passwordConfirmed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:484 docs/master/authentication.md:484
#, no-wrap
msgid "        return redirect()->intended();\n"
"    })->middleware(['auth', 'throttle:6,1'])->name('password.confirm');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:486 docs/master/authentication.md:486
msgid "Before moving on, let's examine this route in more detail. First, the request's `password` field is determined to actually match the authenticated user's password. If the password is valid, we need to inform Laravel's session that the user has confirmed their password. The `passwordConfirmed` method will set a timestamp in the user's session that Laravel can use to determine when the user last confirmed their password. Finally, we can redirect the user to their intended destination."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:488 docs/master/authentication.md:488
#, no-wrap
msgid "<a name=\"password-confirmation-protecting-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:491 docs/master/authentication.md:491
msgid "You should ensure that any route that performs an action which requires recent password confirmation is assigned the `password.confirm` middleware. This middleware is included with the default installation of Laravel and will automatically store the user's intended destination in the session so that the user may be redirected to that location after confirming their password. After storing the user's intended destination in the session, the middleware will redirect the user to the `password.confirm` [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:495 docs/master/authentication.md:495
#, no-wrap
msgid "    Route::get('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:499 docs/master/authentication.md:499
#, no-wrap
msgid "    Route::post('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:501 docs/master/authentication.md:501
#, no-wrap
msgid "<a name=\"adding-custom-guards\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:501 docs/master/authentication.md:501
#, no-wrap
msgid "Adding Custom Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:504 docs/master/authentication.md:504
msgid "You may define your own authentication guards using the `extend` method on the `Auth` facade. You should place your call to the `extend` method within a [service provider](/docs/{{version}}/providers). Since Laravel already ships with an `AuthServiceProvider`, we can place the code in that provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:508 docs/8.x/authentication.md:582
#: docs/8.x/authorization.md:248 docs/8.x/blade.md:97 docs/8.x/blade.md:1250
#: docs/8.x/cache.md:417 docs/8.x/database.md:232 docs/8.x/dusk.md:325
#: docs/8.x/eloquent-resources.md:349 docs/8.x/events.md:596
#: docs/8.x/filesystem.md:496 docs/8.x/pagination.md:213
#: docs/8.x/passport.md:98 docs/8.x/providers.md:42 docs/8.x/providers.md:71
#: docs/8.x/providers.md:109 docs/8.x/providers.md:173 docs/8.x/queues.md:1699
#: docs/8.x/queues.md:1754 docs/8.x/responses.md:323 docs/8.x/session.md:303
#: docs/8.x/testing.md:121 docs/8.x/views.md:108 docs/8.x/views.md:146
#: docs/master/authentication.md:508 docs/master/authentication.md:582
#: docs/master/authorization.md:248 docs/master/blade.md:96
#: docs/master/blade.md:1191 docs/master/cache.md:417
#: docs/master/database.md:232 docs/master/dusk.md:325
#: docs/master/eloquent-resources.md:349 docs/master/events.md:596
#: docs/master/filesystem.md:496 docs/master/pagination.md:213
#: docs/master/passport.md:98 docs/master/providers.md:42
#: docs/master/providers.md:71 docs/master/providers.md:109
#: docs/master/providers.md:173 docs/master/queues.md:1637
#: docs/master/queues.md:1692 docs/master/responses.md:323
#: docs/master/session.md:303 docs/master/testing.md:119
#: docs/master/views.md:108 docs/master/views.md:146
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:512 docs/master/authentication.md:512
#, no-wrap
msgid "    use App\\Services\\Auth\\JwtGuard;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:523 docs/8.x/authentication.md:597
#: docs/master/authentication.md:523 docs/master/authentication.md:597
#, no-wrap
msgid "    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:526 docs/master/authentication.md:526
#, no-wrap
msgid "            Auth::extend('jwt', function ($app, $name, array $config) {\n"
"                // Return an instance of Illuminate\\Contracts\\Auth\\Guard...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:531 docs/master/authentication.md:531
#, no-wrap
msgid "                return new JwtGuard(Auth::createUserProvider($config['provider']));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:533 docs/master/authentication.md:533
msgid "As you can see in the example above, the callback passed to the `extend` method should return an implementation of `Illuminate\\Contracts\\Auth\\Guard`. This interface contains a few methods you will need to implement to define a custom guard. Once your custom guard has been defined, you may reference the guard in the `guards` configuration of your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:540 docs/master/authentication.md:540
#, no-wrap
msgid "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'jwt',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:542 docs/master/authentication.md:542
#, no-wrap
msgid "<a name=\"closure-request-guards\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:542 docs/master/authentication.md:542
#, no-wrap
msgid "Closure Request Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:545 docs/master/authentication.md:545
msgid "The simplest way to implement a custom, HTTP request based authentication system is by using the `Auth::viaRequest` method. This method allows you to quickly define your authentication process using a single closure."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:547 docs/master/authentication.md:547
msgid "To get started, call the `Auth::viaRequest` method within the `boot` method of your `AuthServiceProvider`. The `viaRequest` method accepts an authentication driver name as its first argument. This name can be any string that describes your custom guard. The second argument passed to the method should be a closure that receives the incoming HTTP request and returns a user instance or, if authentication fails, `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:551 docs/master/authentication.md:551
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:560 docs/master/authentication.md:560
#, no-wrap
msgid "    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:565 docs/master/authentication.md:565
#, no-wrap
msgid "        Auth::viaRequest('custom-token', function (Request $request) {\n"
"            return User::where('token', $request->token)->first();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:567 docs/master/authentication.md:567
msgid "Once your custom authentication driver has been defined, you may configure it as a driver within the `guards` configuration of your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:573 docs/master/authentication.md:573
#, no-wrap
msgid "    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'custom-token',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:575 docs/master/authentication.md:575
#, no-wrap
msgid "<a name=\"adding-custom-user-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:575 docs/master/authentication.md:575
#, no-wrap
msgid "Adding Custom User Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:578 docs/master/authentication.md:578
msgid "If you are not using a traditional relational database to store your users, you will need to extend Laravel with your own authentication user provider. We will use the `provider` method on the `Auth` facade to define a custom user provider. The user provider resolver should return an implementation of `Illuminate\\Contracts\\Auth\\UserProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:586 docs/master/authentication.md:586
#, no-wrap
msgid "    use App\\Extensions\\MongoUserProvider;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:600 docs/master/authentication.md:600
#, no-wrap
msgid "            Auth::provider('mongo', function ($app, array $config) {\n"
"                // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:605 docs/master/authentication.md:605
#, no-wrap
msgid "                return new MongoUserProvider($app->make('mongo.connection'));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:607 docs/master/authentication.md:607
msgid "After you have registered the provider using the `provider` method, you may switch to the new user provider in your `auth.php` configuration file. First, define a `provider` that uses your new driver:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:613 docs/master/authentication.md:613
#, no-wrap
msgid "    'providers' => [\n"
"        'users' => [\n"
"            'driver' => 'mongo',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:615 docs/master/authentication.md:615
msgid "Finally, you may reference this provider in your `guards` configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:622 docs/master/authentication.md:622
#, no-wrap
msgid "    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:624 docs/master/authentication.md:624
#, no-wrap
msgid "<a name=\"the-user-provider-contract\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:624 docs/master/authentication.md:624
#, no-wrap
msgid "The User Provider Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:627 docs/master/authentication.md:627
msgid "`Illuminate\\Contracts\\Auth\\UserProvider` implementations are responsible for fetching an `Illuminate\\Contracts\\Auth\\Authenticatable` implementation out of a persistent storage system, such as MySQL, MongoDB, etc. These two interfaces allow the Laravel authentication mechanisms to continue functioning regardless of how the user data is stored or what type of class is used to represent the authenticated user:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:629 docs/master/authentication.md:629
msgid "Let's take a look at the `Illuminate\\Contracts\\Auth\\UserProvider` contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:633 docs/8.x/authentication.md:661
#: docs/master/authentication.md:633 docs/master/authentication.md:661
#, no-wrap
msgid "    namespace Illuminate\\Contracts\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:642 docs/master/authentication.md:642
#, no-wrap
msgid "    interface UserProvider\n"
"    {\n"
"        public function retrieveById($identifier);\n"
"        public function retrieveByToken($identifier, $token);\n"
"        public function updateRememberToken(Authenticatable $user, $token);\n"
"        public function retrieveByCredentials(array $credentials);\n"
"        public function validateCredentials(Authenticatable $user, array $credentials);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:644 docs/master/authentication.md:644
msgid "The `retrieveById` function typically receives a key representing the user, such as an auto-incrementing ID from a MySQL database. The `Authenticatable` implementation matching the ID should be retrieved and returned by the method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:646 docs/master/authentication.md:646
msgid "The `retrieveByToken` function retrieves a user by their unique `$identifier` and \"remember me\" `$token`, typically stored in a database column like `remember_token`. As with the previous method, the `Authenticatable` implementation with a matching token value should be returned by this method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:648 docs/master/authentication.md:648
msgid "The `updateRememberToken` method updates the `$user` instance's `remember_token` with the new `$token`. A fresh token is assigned to users on a successful \"remember me\" authentication attempt or when the user is logging out."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:650 docs/master/authentication.md:650
msgid "The `retrieveByCredentials` method receives the array of credentials passed to the `Auth::attempt` method when attempting to authenticate with an application. The method should then \"query\" the underlying persistent storage for the user matching those credentials. Typically, this method will run a query with a \"where\" condition that searches for a user record with a \"username\" matching the value of `$credentials['username']`. The method should return an implementation of `Authenticatable`. **This method should not attempt to do any password validation or authentication.**"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:652 docs/master/authentication.md:652
#, no-wrap
msgid "The `validateCredentials` method should compare the given `$user` with the `$credentials` to authenticate the user. For example, this method will typically use the `Hash::check` method to compare the value of `$user->getAuthPassword()` to the value of `$credentials['password']`. This method should return `true` or `false` indicating whether the password is valid.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:654 docs/master/authentication.md:654
#, no-wrap
msgid "<a name=\"the-authenticatable-contract\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:654 docs/master/authentication.md:654
#, no-wrap
msgid "The Authenticatable Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:657 docs/master/authentication.md:657
msgid "Now that we have explored each of the methods on the `UserProvider`, let's take a look at the `Authenticatable` contract. Remember, user providers should return implementations of this interface from the `retrieveById`, `retrieveByToken`, and `retrieveByCredentials` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:671 docs/master/authentication.md:671
#, no-wrap
msgid "    interface Authenticatable\n"
"    {\n"
"        public function getAuthIdentifierName();\n"
"        public function getAuthIdentifier();\n"
"        public function getAuthPassword();\n"
"        public function getRememberToken();\n"
"        public function setRememberToken($value);\n"
"        public function getRememberTokenName();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:673 docs/master/authentication.md:673
msgid "This interface is simple. The `getAuthIdentifierName` method should return the name of the \"primary key\" field of the user and the `getAuthIdentifier` method should return the \"primary key\" of the user. When using a MySQL back-end, this would likely be the auto-incrementing primary key assigned to the user record. The `getAuthPassword` method should return the user's hashed password."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:675 docs/master/authentication.md:675
msgid "This interface allows the authentication system to work with any \"user\" class, regardless of what ORM or storage abstraction layer you are using. By default, Laravel includes a `App\\Models\\User` class in the `app/Models` directory which implements this interface."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:680 docs/master/authentication.md:680
msgid "Laravel dispatches a variety of [events](/docs/{{version}}/events) during the authentication process. You may attach listeners to these events in your `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:690 docs/master/authentication.md:690
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Auth\\Events\\Registered' => [\n"
"            'App\\Listeners\\LogRegisteredUser',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:694 docs/master/authentication.md:694
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Attempting' => [\n"
"            'App\\Listeners\\LogAuthenticationAttempt',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:698 docs/master/authentication.md:698
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Authenticated' => [\n"
"            'App\\Listeners\\LogAuthenticated',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:702 docs/master/authentication.md:702
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Login' => [\n"
"            'App\\Listeners\\LogSuccessfulLogin',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:706 docs/master/authentication.md:706
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Failed' => [\n"
"            'App\\Listeners\\LogFailedLogin',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:710 docs/master/authentication.md:710
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Validated' => [\n"
"            'App\\Listeners\\LogValidated',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:714 docs/master/authentication.md:714
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Verified' => [\n"
"            'App\\Listeners\\LogVerified',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:718 docs/master/authentication.md:718
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Logout' => [\n"
"            'App\\Listeners\\LogSuccessfulLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:722 docs/master/authentication.md:722
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\CurrentDeviceLogout' => [\n"
"            'App\\Listeners\\LogCurrentDeviceLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:726 docs/master/authentication.md:726
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\OtherDeviceLogout' => [\n"
"            'App\\Listeners\\LogOtherDeviceLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:730 docs/master/authentication.md:730
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\Lockout' => [\n"
"            'App\\Listeners\\LogLockout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:734 docs/master/authentication.md:734
#, no-wrap
msgid "        'Illuminate\\Auth\\Events\\PasswordReset' => [\n"
"            'App\\Listeners\\LogPasswordReset',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Title #
#: docs/8.x/authorization.md:1 docs/master/authorization.md:1
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Gates](#gates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Writing Gates](#writing-gates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Authorizing Actions](#authorizing-actions-via-gates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Gate Responses](#gate-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Intercepting Gate Checks](#intercepting-gate-checks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Creating Policies](#creating-policies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Generating Policies](#generating-policies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Registering Policies](#registering-policies)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Writing Policies](#writing-policies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Policy Methods](#policy-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Policy Responses](#policy-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Methods Without Models](#methods-without-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Guest Users](#guest-users)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Policy Filters](#policy-filters)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Authorizing Actions Using Policies](#authorizing-actions-using-policies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Via The User Model](#via-the-user-model)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Via Controller Helpers](#via-controller-helpers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/8.x/passport.md:45
#: docs/master/authorization.md:24 docs/master/passport.md:45
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Via Blade Templates](#via-blade-templates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/authorization.md:24 docs/master/authorization.md:24
msgid "[Supplying Additional Context](#supplying-additional-context)"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:29 docs/master/authorization.md:29
msgid "In addition to providing built-in [authentication](/docs/{{version}}/authentication) services, Laravel also provides a simple way to authorize user actions against a given resource. For example, even though a user is authenticated, they may not be authorized to update or delete certain Eloquent models or database records managed by your application. Laravel's authorization features provide an easy, organized way of managing these types of authorization checks."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:31 docs/master/authorization.md:31
msgid "Laravel provides two primary ways of authorizing actions: [gates](#gates) and [policies](#creating-policies). Think of gates and policies like routes and controllers. Gates provide a simple, closure based approach to authorization while policies, like controllers, group logic around a particular model or resource. In this documentation, we'll explore gates first and then examine policies."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:33 docs/master/authorization.md:33
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:35 docs/master/authorization.md:35
#, no-wrap
msgid "<a name=\"gates\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authorization.md:35 docs/master/authorization.md:35
#, no-wrap
msgid "Gates"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:38 docs/master/authorization.md:38
#, no-wrap
msgid "<a name=\"writing-gates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:38 docs/master/authorization.md:38
#, no-wrap
msgid "Writing Gates"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:41 docs/master/authorization.md:41
#, no-wrap
msgid "> {note} Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:43 docs/master/authorization.md:43
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AuthServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:45
msgid "In this example, we'll define a gate to determine if a user can update a given `App\\Models\\Post` model. The gate will accomplish this by comparing the user's `id` against the `user_id` of the user that created the post:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:49 docs/master/authorization.md:49
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:58 docs/8.x/authorization.md:77
#: docs/8.x/passport.md:167 docs/8.x/passport.md:231 docs/8.x/passport.md:268
#: docs/8.x/passport.md:758 docs/8.x/passport.md:982 docs/8.x/passport.md:1128
#: docs/8.x/passwords.md:165 docs/master/authorization.md:58
#: docs/master/authorization.md:77 docs/master/passport.md:165
#: docs/master/passport.md:229 docs/master/passport.md:266
#: docs/master/passport.md:756 docs/master/passport.md:980
#: docs/master/passport.md:1126 docs/master/passwords.md:155
#, no-wrap
msgid "    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:63 docs/master/authorization.md:63
#, no-wrap
msgid "        Gate::define('update-post', function (User $user, Post $post) {\n"
"            return $user->id === $post->user_id;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:65 docs/master/authorization.md:65
msgid "Like controllers, gates may also be defined using a class callback array:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:68 docs/master/authorization.md:68
#, no-wrap
msgid "    use App\\Policies\\PostPolicy;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:80 docs/master/authorization.md:80
#, no-wrap
msgid "        Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:82 docs/master/authorization.md:82
#, no-wrap
msgid "<a name=\"authorizing-actions-via-gates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:82 docs/master/authorization.md:82
#, no-wrap
msgid "Authorizing Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:85 docs/master/authorization.md:85
msgid "To authorize an action using gates, you should use the `allows` or `denies` methods provided by the `Gate` facade. Note that you are not required to pass the currently authenticated user to these methods. Laravel will automatically take care of passing the user into the gate closure. It is typical to call the gate authorization methods within your application's controllers before performing an action that requires authorization:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:94 docs/master/authorization.md:94
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Post;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:109 docs/master/authorization.md:109
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the given post.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\App\\Models\\Post  $post\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, Post $post)\n"
"        {\n"
"            if (! Gate::allows('update-post', $post)) {\n"
"                abort(403);\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:113 docs/8.x/authorization.md:474
#: docs/master/authorization.md:113 docs/master/authorization.md:474
#, no-wrap
msgid "            // Update the post...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:115 docs/master/authorization.md:115
msgid "If you would like to determine if a user other than the currently authenticated user is authorized to perform an action, you may use the `forUser` method on the `Gate` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:119 docs/master/authorization.md:119
#, no-wrap
msgid "    if (Gate::forUser($user)->allows('update-post', $post)) {\n"
"        // The user can update the post...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:123 docs/master/authorization.md:123
#, no-wrap
msgid "    if (Gate::forUser($user)->denies('update-post', $post)) {\n"
"        // The user can't update the post...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:125 docs/master/authorization.md:125
msgid "You may authorize multiple actions at a time using the `any` or `none` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:129 docs/master/authorization.md:129
#, no-wrap
msgid "    if (Gate::any(['update-post', 'delete-post'], $post)) {\n"
"        // The user can update or delete the post...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:133 docs/master/authorization.md:133
#, no-wrap
msgid "    if (Gate::none(['update-post', 'delete-post'], $post)) {\n"
"        // The user can't update or delete the post...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:135 docs/master/authorization.md:135
#, no-wrap
msgid "<a name=\"authorizing-or-throwing-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authorization.md:135 docs/master/authorization.md:135
#, no-wrap
msgid "Authorizing Or Throwing Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:138 docs/master/authorization.md:138
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:140 docs/master/authorization.md:140
#, no-wrap
msgid "    Gate::authorize('update-post', $post);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:142 docs/8.x/authorization.md:196
#: docs/8.x/authorization.md:371 docs/master/authorization.md:142
#: docs/master/authorization.md:196 docs/master/authorization.md:371
#, no-wrap
msgid "    // The action is authorized...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:144 docs/master/authorization.md:144
#, no-wrap
msgid "<a name=\"gates-supplying-additional-context\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:144 docs/8.x/authorization.md:688
#: docs/master/authorization.md:144 docs/master/authorization.md:686
#, no-wrap
msgid "Supplying Additional Context"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:147 docs/master/authorization.md:147
msgid "The gate methods for authorizing abilities (`allows`, `denies`, `check`, `any`, `none`, `authorize`, `can`, `cannot`) and the authorization [Blade directives](#via-blade-templates) (`@can`, `@cannot`, `@canany`) can receive an array as their second argument. These array elements are passed as parameters to the gate closure, and can be used for additional context when making authorization decisions:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:151 docs/master/authorization.md:151
#, no-wrap
msgid "    use App\\Models\\Category;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:158 docs/master/authorization.md:158
#, no-wrap
msgid "    Gate::define('create-post', function (User $user, Category $category, $pinned) {\n"
"        if (! $user->canPublishToGroup($category->group)) {\n"
"            return false;\n"
"        } elseif ($pinned && ! $user->canPinPosts()) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:161 docs/master/authorization.md:161
#, no-wrap
msgid "        return true;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:165 docs/master/authorization.md:165
#, no-wrap
msgid "    if (Gate::check('create-post', [$category, $pinned])) {\n"
"        // The user can create the post...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:167 docs/master/authorization.md:167
#, no-wrap
msgid "<a name=\"gate-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:167 docs/master/authorization.md:167
#, no-wrap
msgid "Gate Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:170 docs/master/authorization.md:170
msgid "So far, we have only examined gates that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` from your gate:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:174 docs/master/authorization.md:174
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Auth\\Access\\Response;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:180 docs/master/authorization.md:180
#, no-wrap
msgid "    Gate::define('edit-settings', function (User $user) {\n"
"        return $user->isAdmin\n"
"                    ? Response::allow()\n"
"                    : Response::deny('You must be an administrator.');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:182 docs/master/authorization.md:182
msgid "Even when you return an authorization response from your gate, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:184 docs/master/authorization.md:184
#, no-wrap
msgid "    $response = Gate::inspect('edit-settings');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:190 docs/8.x/authorization.md:365
#: docs/master/authorization.md:190 docs/master/authorization.md:365
#, no-wrap
msgid "    if ($response->allowed()) {\n"
"        // The action is authorized...\n"
"    } else {\n"
"        echo $response->message();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:192 docs/8.x/authorization.md:367
#: docs/master/authorization.md:192 docs/master/authorization.md:367
msgid "When using the `Gate::authorize` method, which throws an `AuthorizationException` if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:194 docs/master/authorization.md:194
#, no-wrap
msgid "    Gate::authorize('edit-settings');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:198 docs/master/authorization.md:198
#, no-wrap
msgid "<a name=\"intercepting-gate-checks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:198 docs/master/authorization.md:198
#, no-wrap
msgid "Intercepting Gate Checks"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:201 docs/master/authorization.md:201
msgid "Sometimes, you may wish to grant all abilities to a specific user. You may use the `before` method to define a closure that is run before all other authorization checks:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:203 docs/8.x/authorization.md:286
#: docs/8.x/authorization.md:357 docs/master/authorization.md:203
#: docs/master/authorization.md:286 docs/master/authorization.md:357
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:209 docs/master/authorization.md:209
#, no-wrap
msgid "    Gate::before(function ($user, $ability) {\n"
"        if ($user->isAdministrator()) {\n"
"            return true;\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:211 docs/master/authorization.md:211
msgid "If the `before` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:213 docs/master/authorization.md:213
msgid "You may use the `after` method to define a closure to be executed after all other authorization checks:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:219 docs/master/authorization.md:219
#, no-wrap
msgid "    Gate::after(function ($user, $ability, $result, $arguments) {\n"
"        if ($user->isAdministrator()) {\n"
"            return true;\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:221 docs/master/authorization.md:221
msgid "Similar to the `before` method, if the `after` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:223 docs/master/authorization.md:223
#, no-wrap
msgid "<a name=\"creating-policies\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authorization.md:223 docs/master/authorization.md:223
#, no-wrap
msgid "Creating Policies"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:226 docs/master/authorization.md:226
#, no-wrap
msgid "<a name=\"generating-policies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:226 docs/master/authorization.md:226
#, no-wrap
msgid "Generating Policies"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:229 docs/master/authorization.md:229
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:231 docs/master/authorization.md:231
msgid "You may generate a policy using the `make:policy` Artisan command. The generated policy will be placed in the `app/Policies` directory. If this directory does not exist in your application, Laravel will create it for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:233 docs/master/authorization.md:233
#, no-wrap
msgid "    php artisan make:policy PostPolicy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:235 docs/master/authorization.md:235
msgid "The `make:policy` command will generate an empty policy class. If you would like to generate a class with example policy methods related to viewing, creating, updating, and deleting the resource, you may provide a `--model` option when executing the command:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:237 docs/master/authorization.md:237
#, no-wrap
msgid "    php artisan make:policy PostPolicy --model=Post\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:239 docs/master/authorization.md:239
#, no-wrap
msgid "<a name=\"registering-policies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:239 docs/master/authorization.md:239
#, no-wrap
msgid "Registering Policies"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:242 docs/master/authorization.md:242
msgid "Once the policy class has been created, it needs to be registered. Registering policies is how we can inform Laravel which policy to use when authorizing actions against a given model type."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:244 docs/master/authorization.md:244
msgid "The `App\\Providers\\AuthServiceProvider` included with fresh Laravel applications contains a `policies` property which maps your Eloquent models to their corresponding policies. Registering a policy will instruct Laravel which policy to utilize when authorizing actions against a given Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:253 docs/master/authorization.md:253
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Policies\\PostPolicy;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:264 docs/master/authorization.md:264
#, no-wrap
msgid "    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The policy mappings for the application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $policies = [\n"
"            Post::class => PostPolicy::class,\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:273 docs/master/authorization.md:273
#, no-wrap
msgid "        /**\n"
"         * Register any application authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:277 docs/8.x/cache.md:115
#: docs/8.x/controllers.md:406 docs/8.x/mocking.md:99 docs/8.x/requests.md:57
#: docs/8.x/session.md:103 docs/master/authorization.md:277
#: docs/master/cache.md:115 docs/master/controllers.md:393
#: docs/master/mocking.md:99 docs/master/requests.md:56
#: docs/master/session.md:103
#, no-wrap
msgid "            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:279 docs/master/authorization.md:279
#, no-wrap
msgid "<a name=\"policy-auto-discovery\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authorization.md:279 docs/master/authorization.md:279
#, no-wrap
msgid "Policy Auto-Discovery"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:282 docs/master/authorization.md:282
msgid "Instead of manually registering model policies, Laravel can automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:284 docs/master/authorization.md:284
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AuthServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:290 docs/master/authorization.md:290
#, no-wrap
msgid "    Gate::guessPolicyNamesUsing(function ($modelClass) {\n"
"        // Return the name of the policy class for the given model...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:292 docs/master/authorization.md:292
#, no-wrap
msgid "> {note} Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:294 docs/master/authorization.md:294
#, no-wrap
msgid "<a name=\"writing-policies\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authorization.md:294 docs/master/authorization.md:294
#, no-wrap
msgid "Writing Policies"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:297 docs/master/authorization.md:297
#, no-wrap
msgid "<a name=\"policy-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:297 docs/master/authorization.md:297
#, no-wrap
msgid "Policy Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:300 docs/master/authorization.md:300
msgid "Once the policy class has been registered, you may add methods for each action it authorizes. For example, let's define an `update` method on our `PostPolicy` which determines if a given `App\\Models\\User` can update a given `App\\Models\\Post` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:302 docs/master/authorization.md:302
msgid "The `update` method will receive a `User` and a `Post` instance as its arguments, and should return `true` or `false` indicating whether the user is authorized to update the given `Post`. So, in this example, we will verify that the user's `id` matches the `user_id` on the post:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:306 docs/8.x/authorization.md:396
#: docs/master/authorization.md:306 docs/master/authorization.md:396
#, no-wrap
msgid "    namespace App\\Policies;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:309 docs/8.x/authorization.md:399
#: docs/8.x/database-testing.md:300 docs/8.x/database-testing.md:355
#: docs/8.x/eloquent-mutators.md:294 docs/8.x/routing.md:422
#: docs/master/authorization.md:309 docs/master/authorization.md:399
#: docs/master/database-testing.md:291 docs/master/database-testing.md:346
#: docs/master/eloquent-mutators.md:259 docs/master/routing.md:422
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:324 docs/master/authorization.md:324
#, no-wrap
msgid "    class PostPolicy\n"
"    {\n"
"        /**\n"
"         * Determine if the given post can be updated by the user.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @param  \\App\\Models\\Post  $post\n"
"         * @return bool\n"
"         */\n"
"        public function update(User $user, Post $post)\n"
"        {\n"
"            return $user->id === $post->user_id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:326 docs/master/authorization.md:326
msgid "You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define `view` or `delete` methods to authorize various `Post` related actions, but remember you are free to give your policy methods any name you like."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:328 docs/master/authorization.md:328
msgid "If you used the `--model` option when generating your policy via the Artisan console, it will already contain methods for the `viewAny`, `view`, `create`, `update`, `delete`, `restore`, and `forceDelete` actions."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:330 docs/master/authorization.md:330
#, no-wrap
msgid "> {tip} All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:332 docs/master/authorization.md:332
#, no-wrap
msgid "<a name=\"policy-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:332 docs/master/authorization.md:332
#, no-wrap
msgid "Policy Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:335 docs/master/authorization.md:335
msgid "So far, we have only examined policy methods that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` instance from your policy method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:339 docs/master/authorization.md:339
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Auth\\Access\\Response;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:353 docs/master/authorization.md:353
#, no-wrap
msgid "    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Auth\\Access\\Response\n"
"     */\n"
"    public function update(User $user, Post $post)\n"
"    {\n"
"        return $user->id === $post->user_id\n"
"                    ? Response::allow()\n"
"                    : Response::deny('You do not own this post.');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:355 docs/master/authorization.md:355
msgid "When returning an authorization response from your policy, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:359 docs/master/authorization.md:359
#, no-wrap
msgid "    $response = Gate::inspect('update', $post);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:369 docs/master/authorization.md:369
#, no-wrap
msgid "    Gate::authorize('update', $post);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:373 docs/master/authorization.md:373
#, no-wrap
msgid "<a name=\"methods-without-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:373 docs/master/authorization.md:373
#, no-wrap
msgid "Methods Without Models"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:376 docs/master/authorization.md:376
msgid "Some policy methods only receive an instance of the currently authenticated user. This situation is most common when authorizing `create` actions. For example, if you are creating a blog, you may wish to determine if a user is authorized to create any posts at all. In these situations, your policy method should only expect to receive a user instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:387 docs/master/authorization.md:387
#, no-wrap
msgid "    /**\n"
"     * Determine if the given user can create posts.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @return bool\n"
"     */\n"
"    public function create(User $user)\n"
"    {\n"
"        return $user->role == 'writer';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:389 docs/master/authorization.md:389
#, no-wrap
msgid "<a name=\"guest-users\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:389 docs/master/authorization.md:389
#, no-wrap
msgid "Guest Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:392 docs/master/authorization.md:392
msgid "By default, all gates and policies automatically return `false` if the incoming HTTP request was not initiated by an authenticated user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an \"optional\" type-hint or supplying a `null` default value for the user argument definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:414 docs/master/authorization.md:414
#, no-wrap
msgid "    class PostPolicy\n"
"    {\n"
"        /**\n"
"         * Determine if the given post can be updated by the user.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @param  \\App\\Models\\Post  $post\n"
"         * @return bool\n"
"         */\n"
"        public function update(?User $user, Post $post)\n"
"        {\n"
"            return optional($user)->id === $post->user_id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:416 docs/master/authorization.md:416
#, no-wrap
msgid "<a name=\"policy-filters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:416 docs/master/authorization.md:416
#, no-wrap
msgid "Policy Filters"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:419 docs/master/authorization.md:419
msgid "For certain users, you may wish to authorize all actions within a given policy. To accomplish this, define a `before` method on the policy. The `before` method will be executed before any other methods on the policy, giving you an opportunity to authorize the action before the intended policy method is actually called. This feature is most commonly used for authorizing application administrators to perform any action:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:435 docs/master/authorization.md:435
#, no-wrap
msgid "    /**\n"
"     * Perform pre-authorization checks.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  string  $ability\n"
"     * @return void|bool\n"
"     */\n"
"    public function before(User $user, $ability)\n"
"    {\n"
"        if ($user->isAdministrator()) {\n"
"            return true;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:437 docs/master/authorization.md:437
msgid "If you would like to deny all authorization checks for a particular type of user then you may return `false` from the `before` method. If `null` is returned, the authorization check will fall through to the policy method."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:439 docs/master/authorization.md:439
#, no-wrap
msgid "> {note} The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:441 docs/master/authorization.md:441
#, no-wrap
msgid "<a name=\"authorizing-actions-using-policies\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authorization.md:441 docs/master/authorization.md:441
#, no-wrap
msgid "Authorizing Actions Using Policies"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:444 docs/master/authorization.md:444
#, no-wrap
msgid "<a name=\"via-the-user-model\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:444 docs/master/authorization.md:444
#, no-wrap
msgid "Via The User Model"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:447 docs/master/authorization.md:447
msgid "The `App\\Models\\User` model that is included with your Laravel application includes two helpful methods for authorizing actions: `can` and `cannot`. The `can` and `cannot` methods receive the name of the action you wish to authorize and the relevant model. For example, let's determine if a user is authorized to update a given `App\\Models\\Post` model. Typically, this will be done within a controller method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:455 docs/8.x/authorization.md:489
#: docs/8.x/authorization.md:522 docs/8.x/authorization.md:579
#: docs/master/authorization.md:455 docs/master/authorization.md:489
#: docs/master/authorization.md:522 docs/master/authorization.md:579
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Post;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:470 docs/master/authorization.md:470
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the given post.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\App\\Models\\Post  $post\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, Post $post)\n"
"        {\n"
"            if ($request->user()->cannot('update', $post)) {\n"
"                abort(403);\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:476 docs/master/authorization.md:476
msgid "If a [policy is registered](#registering-policies) for the given model, the `can` method will automatically call the appropriate policy and return the boolean result. If no policy is registered for the model, the `can` method will attempt to call the closure based Gate matching the given action name."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:478 docs/master/authorization.md:478
#, no-wrap
msgid "<a name=\"user-model-actions-that-dont-require-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authorization.md:478 docs/8.x/authorization.md:543
#: docs/8.x/authorization.md:621 docs/8.x/authorization.md:673
#: docs/master/authorization.md:478 docs/master/authorization.md:543
#: docs/master/authorization.md:621 docs/master/authorization.md:671
#, no-wrap
msgid "Actions That Don't Require Models"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:481 docs/master/authorization.md:481
msgid "Remember, some actions may correspond to policy methods like `create` that do not require a model instance. In these situations, you may pass a class name to the `can` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:503 docs/master/authorization.md:503
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Create a post.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            if ($request->user()->cannot('create', Post::class)) {\n"
"                abort(403);\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:507 docs/master/authorization.md:507
#, no-wrap
msgid "            // Create the post...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:509 docs/master/authorization.md:509
#, no-wrap
msgid "<a name=\"via-controller-helpers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:509 docs/master/authorization.md:509
#, no-wrap
msgid "Via Controller Helpers"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:512 docs/master/authorization.md:512
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, Laravel provides a helpful `authorize` method to any of your controllers which extend the `App\\Http\\Controllers\\Controller` base class."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:514 docs/master/authorization.md:514
msgid "Like the `can` method, this method accepts the name of the action you wish to authorize and the relevant model. If the action is not authorized, the `authorize` method will throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception which the Laravel exception handler will automatically convert to an HTTP response with a 403 status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:537 docs/master/authorization.md:537
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the given blog post.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\App\\Models\\Post  $post\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         *\n"
"         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"         */\n"
"        public function update(Request $request, Post $post)\n"
"        {\n"
"            $this->authorize('update', $post);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:541 docs/master/authorization.md:541
#, no-wrap
msgid "            // The current user can update the blog post...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:543 docs/master/authorization.md:543
#, no-wrap
msgid "<a name=\"controller-actions-that-dont-require-models\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:546 docs/master/authorization.md:546
msgid "As previously discussed, some policy methods like `create` do not require a model instance. In these situations, you should pass a class name to the `authorize` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:549 docs/master/authorization.md:549
#, no-wrap
msgid "    use App\\Models\\Post;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:561 docs/master/authorization.md:561
#, no-wrap
msgid "    /**\n"
"     * Create a new blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function create(Request $request)\n"
"    {\n"
"        $this->authorize('create', Post::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:564 docs/master/authorization.md:564
#, no-wrap
msgid "        // The current user can create blog posts...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:566 docs/master/authorization.md:566
#, no-wrap
msgid "<a name=\"authorizing-resource-controllers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authorization.md:566 docs/master/authorization.md:566
#, no-wrap
msgid "Authorizing Resource Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:569 docs/master/authorization.md:569
msgid "If you are utilizing [resource controllers](/docs/{{version}}/controllers#resource-controllers), you may make use of the `authorizeResource` method in your controller's constructor. This method will attach the appropriate `can` middleware definitions to the resource controller's methods."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:571 docs/master/authorization.md:571
msgid "The `authorizeResource` method accepts the model's class name as its first argument, and the name of the route / request parameter that will contain the model's ID as its second argument. You should ensure your [resource controller](/docs/{{version}}/controllers#resource-controllers) is created using the `--model` flag so that it has the required method signatures and type hints:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:592 docs/master/authorization.md:592
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Create the controller instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->authorizeResource(Post::class, 'post');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:594 docs/master/authorization.md:594
msgid "The following controller methods will be mapped to their corresponding policy method. When requests are routed to the given controller method, the corresponding policy method will automatically be invoked before the controller method is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:604 docs/master/authorization.md:604
msgid "| Controller Method | Policy Method | | --- | --- | | index | viewAny | | show | view | | create | create | | store | create | | edit | update | | update | update | | destroy | delete |"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:606 docs/master/authorization.md:606
#, no-wrap
msgid "> {tip} You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:608 docs/8.x/passport.md:919
#: docs/master/authorization.md:608 docs/master/passport.md:917
#, no-wrap
msgid "<a name=\"via-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:608 docs/8.x/passport.md:919
#: docs/master/authorization.md:608 docs/master/passport.md:917
#, no-wrap
msgid "Via Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:611 docs/master/authorization.md:611
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware is assigned the `can` key in your `App\\Http\\Kernel` class. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:613 docs/8.x/database-testing.md:450
#: docs/8.x/eloquent-relationships.md:169
#: docs/8.x/eloquent-relationships.md:684
#: docs/8.x/eloquent-relationships.md:786
#: docs/8.x/eloquent-relationships.md:892
#: docs/8.x/eloquent-relationships.md:1047
#: docs/8.x/eloquent-relationships.md:1083
#: docs/8.x/eloquent-relationships.md:1164
#: docs/8.x/eloquent-relationships.md:1226
#: docs/8.x/eloquent-relationships.md:1563 docs/8.x/routing.md:398
#: docs/master/authorization.md:613 docs/master/database-testing.md:441
#: docs/master/eloquent-relationships.md:169
#: docs/master/eloquent-relationships.md:684
#: docs/master/eloquent-relationships.md:786
#: docs/master/eloquent-relationships.md:892
#: docs/master/eloquent-relationships.md:1047
#: docs/master/eloquent-relationships.md:1083
#: docs/master/eloquent-relationships.md:1164
#: docs/master/eloquent-relationships.md:1226
#: docs/master/eloquent-relationships.md:1563 docs/master/routing.md:398
#, no-wrap
msgid "    use App\\Models\\Post;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:617 docs/master/authorization.md:617
#, no-wrap
msgid "    Route::put('/post/{post}', function (Post $post) {\n"
"        // The current user may update the post...\n"
"    })->middleware('can:update,post');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:619 docs/master/authorization.md:619
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), a `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:621 docs/master/authorization.md:621
#, no-wrap
msgid "<a name=\"middleware-actions-that-dont-require-models\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:624 docs/master/authorization.md:624
msgid "Again, some policy methods like `create` do not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:628 docs/master/authorization.md:628
#, no-wrap
msgid "    Route::post('/post', function () {\n"
"        // The current user may create posts...\n"
"    })->middleware('can:create,App\\Models\\Post');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:630 docs/master/authorization.md:630
#, no-wrap
msgid "<a name=\"via-blade-templates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authorization.md:630 docs/master/authorization.md:630
#, no-wrap
msgid "Via Blade Templates"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:633 docs/master/authorization.md:633
msgid "When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the `@can` and `@cannot` directives:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/authorization.md:634
#, no-wrap
msgid "@can('update', $post)\n"
"    <!-- The current user can update the post... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create new posts... -->\n"
"@else\n"
"    <!-- ... -->\n"
"@endcan\n\n"
"@cannot('update', $post)\n"
"    <!-- The current user cannot update the post... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can now create new posts... -->\n"
"@endcannot\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:651 docs/master/authorization.md:649
msgid "These directives are convenient shortcuts for writing `@if` and `@unless` statements. The `@can` and `@cannot` statements above are equivalent to the following statements:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/authorization.md:652 docs/master/authorization.md:650
#, no-wrap
msgid "@if (Auth::user()->can('update', $post))\n"
"    <!-- The current user can update the post... -->\n"
"@endif\n\n"
"@unless (Auth::user()->can('update', $post))\n"
"    <!-- The current user cannot update the post... -->\n"
"@endunless\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:663 docs/master/authorization.md:661
msgid "You may also determine if a user is authorized to perform any action from a given array of actions. To accomplish this, use the `@canany` directive:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/authorization.md:664 docs/master/authorization.md:662
#, no-wrap
msgid "@canany(['update', 'view', 'delete'], $post)\n"
"    <!-- The current user can update, view, or delete the post... -->\n"
"@elsecanany(['create'], \\App\\Models\\Post::class)\n"
"    <!-- The current user can create a post... -->\n"
"@endcanany\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:673 docs/master/authorization.md:671
#, no-wrap
msgid "<a name=\"blade-actions-that-dont-require-models\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:676 docs/master/authorization.md:674
msgid "Like most of the other authorization methods, you may pass a class name to the `@can` and `@cannot` directives if the action does not require a model instance:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/authorization.md:677 docs/master/authorization.md:675
#, no-wrap
msgid "@can('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create posts... -->\n"
"@endcan\n\n"
"@cannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can't create posts... -->\n"
"@endcannot\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:688 docs/master/authorization.md:686
#, no-wrap
msgid "<a name=\"supplying-additional-context\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:691 docs/master/authorization.md:689
msgid "When authorizing actions using policies, you may pass an array as the second argument to the various authorization functions and helpers. The first element in the array will be used to determine which policy should be invoked, while the rest of the array elements are passed as parameters to the policy method and can be used for additional context when making authorization decisions. For example, consider the following `PostPolicy` method definition which contains an additional `$category` parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:705 docs/master/authorization.md:703
#, no-wrap
msgid "    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\  $post\n"
"     * @param  int  $category\n"
"     * @return bool\n"
"     */\n"
"    public function update(User $user, Post $post, int $category)\n"
"    {\n"
"        return $user->id === $post->user_id &&\n"
"               $user->canUpdateCategory($category);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:707 docs/master/authorization.md:705
msgid "When attempting to determine if the authenticated user can update a given post, we can invoke this policy method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:720 docs/master/authorization.md:718
#, no-wrap
msgid "    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        $this->authorize('update', [$post, $request->category]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authorization.md:722 docs/master/authorization.md:720
#, no-wrap
msgid "        // The current user can update the blog post...\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/billing.md:1 docs/master/billing.md:1
#, no-wrap
msgid "Laravel Cashier (Stripe)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45 docs/8.x/dusk.md:50
#: docs/8.x/envoy.md:18 docs/8.x/fortify.md:25 docs/8.x/horizon.md:16
#: docs/8.x/passport.md:45 docs/8.x/sanctum.md:23 docs/8.x/scout.md:26
#: docs/8.x/socialite.md:12 docs/8.x/telescope.md:33 docs/8.x/valet.md:20
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
#: docs/master/dusk.md:50 docs/master/envoy.md:17 docs/master/fortify.md:25
#: docs/master/horizon.md:16 docs/master/passport.md:45
#: docs/master/sanctum.md:23 docs/master/scout.md:26
#: docs/master/socialite.md:12 docs/master/telescope.md:33
#: docs/master/valet.md:20
msgid "[Installation](#installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Database Migrations](#database-migrations)"
msgstr ""

#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  database.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  filesystem.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  hashing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/broadcasting.md:36 docs/8.x/cache.md:24
#: docs/8.x/cashier-paddle.md:45 docs/8.x/database.md:11 docs/8.x/errors.md:12
#: docs/8.x/filesystem.md:20 docs/8.x/hashing.md:9 docs/8.x/horizon.md:16
#: docs/8.x/logging.md:14 docs/8.x/mail.md:26 docs/8.x/packages.md:17
#: docs/8.x/passport.md:45 docs/8.x/redis.md:12 docs/8.x/sanctum.md:23
#: docs/8.x/scout.md:26 docs/8.x/session.md:16 docs/8.x/socialite.md:12
#: docs/8.x/telescope.md:33 docs/master/billing.md:59
#: docs/master/broadcasting.md:36 docs/master/cache.md:24
#: docs/master/cashier-paddle.md:43 docs/master/database.md:11
#: docs/master/errors.md:12 docs/master/filesystem.md:20
#: docs/master/hashing.md:9 docs/master/horizon.md:16 docs/master/logging.md:14
#: docs/master/mail.md:26 docs/master/packages.md:17 docs/master/passport.md:45
#: docs/master/redis.md:12 docs/master/sanctum.md:23 docs/master/scout.md:26
#: docs/master/session.md:16 docs/master/socialite.md:12
#: docs/master/telescope.md:33
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Billable Model](#billable-model)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[API Keys](#api-keys)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Currency Configuration](#currency-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Logging](#logging)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61
msgid "[Using Custom Models](#using-custom-models)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Customers](#customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Retrieving Customers](#retrieving-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Creating Customers](#creating-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Updating Customers](#updating-customers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Billing Portal](#billing-portal)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Payment Methods](#payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Storing Payment Methods](#storing-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Retrieving Payment Methods](#retrieving-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Determining If A User Has A Payment Method](#check-for-a-payment-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Updating The Default Payment Method](#updating-the-default-payment-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Adding Payment Methods](#adding-payment-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Deleting Payment Methods](#deleting-payment-methods)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Subscriptions](#subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Creating Subscriptions](#creating-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Checking Subscription Status](#checking-subscription-status)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Changing Plans](#changing-plans)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Subscription Quantity](#subscription-quantity)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Multiplan Subscriptions](#multiplan-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61
msgid "[Metered Billing](#metered-billing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Subscription Taxes](#subscription-taxes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Subscription Anchor Date](#subscription-anchor-date)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Cancelling Subscriptions](#cancelling-subscriptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Resuming Subscriptions](#resuming-subscriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Subscription Trials](#subscription-trials)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[With Payment Method Up Front](#with-payment-method-up-front)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Without Payment Method Up Front](#without-payment-method-up-front)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Extending Trials](#extending-trials)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Handling Stripe Webhooks](#handling-stripe-webhooks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Defining Webhook Event Handlers](#defining-webhook-event-handlers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Verifying Webhook Signatures](#verifying-webhook-signatures)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Single Charges](#single-charges)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Simple Charge](#simple-charge)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Charge With Invoice](#charge-with-invoice)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Refunding Charges](#refunding-charges)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Checkout](#checkout)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Product Checkouts](#product-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Single Charge Checkouts](#single-charge-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Subscription Checkouts](#subscription-checkouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Styling The Checkout Button](#styling-the-checkout-button)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Invoices](#invoices)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Retrieving Invoices](#retrieving-invoices)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Generating Invoice PDFs](#generating-invoice-pdfs)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
msgid "[Handling Failed Payments](#handling-failed-payments)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Strong Customer Authentication (SCA)](#strong-customer-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Payments Requiring Additional Confirmation](#payments-requiring-additional-confirmation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Off-session Payment Notifications](#off-session-payment-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/master/billing.md:59
msgid "[Stripe SDK](#stripe-sdk)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/billing.md:61 docs/8.x/cashier-paddle.md:45
#: docs/8.x/http-client.md:15 docs/8.x/passport.md:45 docs/8.x/sanctum.md:23
#: docs/master/billing.md:59 docs/master/cashier-paddle.md:43
#: docs/master/http-client.md:15 docs/master/passport.md:45
#: docs/master/sanctum.md:23
msgid "[Testing](#testing)"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:66 docs/master/billing.md:64
msgid "Laravel Cashier provides an expressive, fluent interface to [Stripe's](https://stripe.com) subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading writing. In addition to basic subscription management, Cashier can handle coupons, swapping subscription, subscription \"quantities\", cancellation grace periods, and even generate invoice PDFs."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:68 docs/8.x/cashier-paddle.md:54
#: docs/master/billing.md:66 docs/master/cashier-paddle.md:52
#, no-wrap
msgid "<a name=\"upgrading-cashier\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:68 docs/8.x/cashier-paddle.md:54
#: docs/master/billing.md:66 docs/master/cashier-paddle.md:52
#, no-wrap
msgid "Upgrading Cashier"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:71 docs/master/billing.md:69
msgid "When upgrading to a new version of Cashier, it's important that you carefully review [the upgrade guide](https://github.com/laravel/cashier-stripe/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:73 docs/master/billing.md:71
#, no-wrap
msgid "> {note} To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 12 utilizes Stripe API version `2020-03-02`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:78 docs/master/billing.md:76
msgid "First, install the Cashier package for Stripe using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:80 docs/master/billing.md:78
#, no-wrap
msgid "    composer require laravel/cashier\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:82 docs/master/billing.md:80
#, no-wrap
msgid "> {note} To ensure Cashier properly handles all Stripe events, remember to [set up Cashier's webhook handling](#handling-stripe-webhooks).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:84 docs/8.x/cashier-paddle.md:75
#: docs/master/billing.md:82 docs/master/cashier-paddle.md:66
#, no-wrap
msgid "<a name=\"database-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:84 docs/8.x/cashier-paddle.md:75 docs/8.x/dusk.md:135
#: docs/master/billing.md:82 docs/master/cashier-paddle.md:66
#: docs/master/dusk.md:135
#, no-wrap
msgid "Database Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:87 docs/master/billing.md:85
msgid "Cashier's service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will add several columns to your `users` table as well as create a new `subscriptions` table to hold all of your customer's subscriptions:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:89 docs/8.x/cashier-paddle.md:80
#: docs/8.x/migrations.md:130 docs/8.x/notifications.md:661
#: docs/8.x/passport.md:70 docs/8.x/passwords.md:32 docs/8.x/queues.md:86
#: docs/8.x/queues.md:1072 docs/8.x/queues.md:1542 docs/8.x/sanctum.md:66
#: docs/8.x/session.md:64 docs/8.x/telescope.md:53 docs/8.x/telescope.md:69
#: docs/8.x/verification.md:55 docs/master/billing.md:87
#: docs/master/cashier-paddle.md:71 docs/master/migrations.md:108
#: docs/master/notifications.md:633 docs/master/passport.md:70
#: docs/master/passwords.md:31 docs/master/queues.md:85
#: docs/master/queues.md:1010 docs/master/queues.md:1480
#: docs/master/sanctum.md:66 docs/master/session.md:64
#: docs/master/telescope.md:53 docs/master/telescope.md:69
#: docs/master/verification.md:55
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:91 docs/master/billing.md:89
msgid "If you need to overwrite the migrations that ship with Cashier, you can publish them using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:93 docs/8.x/cashier-paddle.md:84
#: docs/master/billing.md:91 docs/master/cashier-paddle.md:75
#, no-wrap
msgid "    php artisan vendor:publish --tag=\"cashier-migrations\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:95 docs/master/billing.md:93
msgid "If you would like to prevent Cashier's migrations from running entirely, you may use the `ignoreMigrations` method provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:97 docs/8.x/billing.md:196 docs/8.x/billing.md:632
#: docs/master/billing.md:95 docs/master/billing.md:166
#: docs/master/billing.md:593
#, no-wrap
msgid "    use Laravel\\Cashier\\Cashier;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:107 docs/8.x/cashier-paddle.md:98
#: docs/master/billing.md:105 docs/master/cashier-paddle.md:89
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::ignoreMigrations();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:109 docs/master/billing.md:107
#, no-wrap
msgid "> {note} Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the `stripe_id` column is set to `utf8_bin` when using MySQL. More information regarding this can be found in the [Stripe documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:111 docs/8.x/broadcasting.md:61 docs/8.x/cache.md:33
#: docs/8.x/cashier-paddle.md:100 docs/8.x/database.md:25
#: docs/8.x/encryption.md:13 docs/8.x/errors.md:19 docs/8.x/filesystem.md:27
#: docs/8.x/hashing.md:18 docs/8.x/horizon.md:42 docs/8.x/logging.md:25
#: docs/8.x/mail.md:33 docs/8.x/packages.md:84 docs/8.x/passport.md:205
#: docs/8.x/redis.md:27 docs/8.x/sanctum.md:81 docs/8.x/scout.md:84
#: docs/8.x/session.md:25 docs/8.x/socialite.md:33 docs/8.x/telescope.md:96
#: docs/master/billing.md:109 docs/master/broadcasting.md:61
#: docs/master/cache.md:33 docs/master/cashier-paddle.md:91
#: docs/master/database.md:25 docs/master/encryption.md:13
#: docs/master/errors.md:19 docs/master/filesystem.md:27
#: docs/master/hashing.md:18 docs/master/horizon.md:42
#: docs/master/logging.md:25 docs/master/mail.md:33 docs/master/packages.md:84
#: docs/master/passport.md:203 docs/master/redis.md:27
#: docs/master/sanctum.md:81 docs/master/scout.md:79 docs/master/session.md:25
#: docs/master/socialite.md:33 docs/master/telescope.md:96
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:114 docs/8.x/cashier-paddle.md:103
#: docs/master/billing.md:112 docs/master/cashier-paddle.md:94
#, no-wrap
msgid "<a name=\"billable-model\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:114 docs/8.x/cashier-paddle.md:103
#: docs/master/billing.md:112 docs/master/cashier-paddle.md:94
#, no-wrap
msgid "Billable Model"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:117 docs/master/billing.md:115
msgid "Before using Cashier, add the `Billable` trait to your billable model definition. Typically, this will be the `App\\Models\\User` model. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons, and updating payment method information:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:119 docs/master/billing.md:117
#, no-wrap
msgid "    use Laravel\\Cashier\\Billable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:124 docs/8.x/cashier-paddle.md:113
#: docs/master/billing.md:122 docs/master/cashier-paddle.md:104
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use Billable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:126 docs/master/billing.md:124
msgid "Cashier assumes your billable model will be the `App\\Models\\User` class that ships with Laravel. If you wish to change this you can specify a different model in your `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:128 docs/master/billing.md:126
#, no-wrap
msgid "    CASHIER_MODEL=App\\Models\\User\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:130 docs/master/billing.md:128
#, no-wrap
msgid "> {note} If you're using a model other than Laravel's supplied `App\\Models\\User` model, you'll need to publish and alter the [Cashier migrations](#installation) provided to match your alternative model's table name.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:132 docs/8.x/cashier-paddle.md:125
#: docs/master/billing.md:130 docs/master/cashier-paddle.md:116
#, no-wrap
msgid "<a name=\"api-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:132 docs/8.x/cashier-paddle.md:125
#: docs/master/billing.md:130 docs/master/cashier-paddle.md:116
#, no-wrap
msgid "API Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:135 docs/master/billing.md:133
msgid "Next, you should configure your Stripe API keys in your application's `.env` file. You can retrieve your Stripe API keys from the Stripe control panel:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:138 docs/master/billing.md:136
#, no-wrap
msgid "    STRIPE_KEY=your-stripe-key\n"
"    STRIPE_SECRET=your-stripe-secret\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:140 docs/8.x/cashier-paddle.md:148
#: docs/master/billing.md:138 docs/master/cashier-paddle.md:136
#, no-wrap
msgid "<a name=\"currency-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:140 docs/8.x/cashier-paddle.md:148
#: docs/master/billing.md:138 docs/master/cashier-paddle.md:136
#, no-wrap
msgid "Currency Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:143 docs/master/billing.md:141
msgid "The default Cashier currency is United States Dollars (USD). You can change the default currency by setting the `CASHIER_CURRENCY` environment variable within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:145 docs/master/billing.md:143
#, no-wrap
msgid "    CASHIER_CURRENCY=eur\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:147 docs/8.x/cashier-paddle.md:155
#: docs/master/billing.md:145 docs/master/cashier-paddle.md:143
msgid "In addition to configuring Cashier's currency, you may also specify a locale to be used when formatting money values for display on invoices. Internally, Cashier utilizes [PHP's `NumberFormatter` class](https://www.php.net/manual/en/class.numberformatter.php) to set the currency locale:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:149 docs/8.x/cashier-paddle.md:157
#: docs/master/billing.md:147 docs/master/cashier-paddle.md:145
#, no-wrap
msgid "    CASHIER_CURRENCY_LOCALE=nl_BE\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:151 docs/8.x/cashier-paddle.md:159
#: docs/master/billing.md:149 docs/master/cashier-paddle.md:147
#, no-wrap
msgid "> {note} In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:153 docs/master/billing.md:151
#, no-wrap
msgid "<a name=\"logging\"></a>\n"
msgstr ""

#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  logging.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/billing.md:153 docs/8.x/logging.md:1 docs/master/billing.md:151
#: docs/master/logging.md:1
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:156 docs/master/billing.md:154
msgid "Cashier allows you to specify the log channel to be used when logging all Stripe related exceptions. You may specify the log channel by defining the `CASHIER_LOGGER` environment variable within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:158 docs/master/billing.md:156
#, no-wrap
msgid "    CASHIER_LOGGER=stack\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:160
#, no-wrap
msgid "<a name=\"using-custom-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:160
#, no-wrap
msgid "Using Custom Models"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:163 docs/8.x/cashier-paddle.md:164
msgid "You are free to extend the models used internally by Cashier by defining your own model and extending the corresponding Cashier model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:165
#, no-wrap
msgid "    use Laravel\\Cashier\\Subscription as CashierSubscription;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:170 docs/8.x/cashier-paddle.md:171
#, no-wrap
msgid "    class Subscription extends CashierSubscription\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:172
msgid "After defining your model, you may instruct Cashier to use your custom model via the `Laravel\\Cashier\\Cashier` class. Typically, you should inform Cashier about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:175
#, no-wrap
msgid "    use App\\Models\\Cashier\\Subscription;\n"
"    use App\\Models\\Cashier\\SubscriptionItem;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:186
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Cashier::useSubscriptionModel(Subscription::class);\n"
"        Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:188 docs/8.x/cashier-paddle.md:406
#: docs/master/billing.md:158 docs/master/cashier-paddle.md:366
#, no-wrap
msgid "<a name=\"customers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:188 docs/8.x/cashier-paddle.md:362
#: docs/8.x/cashier-paddle.md:406 docs/master/billing.md:158
#: docs/master/cashier-paddle.md:322 docs/master/cashier-paddle.md:366
#, no-wrap
msgid "Customers"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:191 docs/master/billing.md:161
#, no-wrap
msgid "<a name=\"retrieving-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:191 docs/master/billing.md:161
#, no-wrap
msgid "Retrieving Customers"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:194 docs/master/billing.md:164
msgid "You can retrieve a customer by their Stripe ID using the `Cashier::findBillable` method. This method will return an instance of the billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:198 docs/master/billing.md:168
#, no-wrap
msgid "    $user = Cashier::findBillable($stripeId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:200 docs/master/billing.md:170
#, no-wrap
msgid "<a name=\"creating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:200 docs/master/billing.md:170
#, no-wrap
msgid "Creating Customers"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:203 docs/master/billing.md:173
msgid "Occasionally, you may wish to create a Stripe customer without beginning a subscription. You may accomplish this using the `createAsStripeCustomer` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:205 docs/master/billing.md:175
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:207 docs/master/billing.md:177
msgid "Once the customer has been created in Stripe, you may begin a subscription at a later date. You may provide an optional `$options` array to pass in any additional [customer creation parameters that are supported by the Stripe API](https://stripe.com/docs/api/customers/create):"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:209 docs/master/billing.md:179
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:211 docs/master/billing.md:181
msgid "You may use the `asStripeCustomer` method if you want to return the Stripe customer object for a billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:213 docs/master/billing.md:183
#, no-wrap
msgid "    $stripeCustomer = $user->asStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:215 docs/master/billing.md:185
msgid "The `createOrGetStripeCustomer` method may be used if you would like to retrieve the Stripe customer object for a given billable model but are not sure whether the billable model is already a customer within Stripe. This method will create a new customer in Stripe if one does not already exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:217 docs/master/billing.md:187
#, no-wrap
msgid "    $stripeCustomer = $user->createOrGetStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:219 docs/master/billing.md:189
#, no-wrap
msgid "<a name=\"updating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:219 docs/master/billing.md:189
#, no-wrap
msgid "Updating Customers"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:222 docs/master/billing.md:192
msgid "Occasionally, you may wish to update the Stripe customer directly with additional information. You may accomplish this using the `updateStripeCustomer` method. This method accepts an array of [customer update options supported by the Stripe API](https://stripe.com/docs/api/customers/update):"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:224 docs/master/billing.md:194
#, no-wrap
msgid "    $stripeCustomer = $user->updateStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:226 docs/master/billing.md:196
#, no-wrap
msgid "<a name=\"billing-portal\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:226 docs/master/billing.md:196
#, no-wrap
msgid "Billing Portal"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:229 docs/master/billing.md:199
msgid "Stripe offers [an easy way to set up a billing portal](https://stripe.com/docs/billing/subscriptions/customer-portal) so that your customer can manage their subscription, payment methods, and view their billing history. You can redirect your users to the billing portal by invoking the `redirectToBillingPortal` method on the billable model from a controller or route:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:235 docs/master/billing.md:205
#, no-wrap
msgid "    Route::get('/billing-portal', function (Request $request) {\n"
"        return $request->user()->redirectToBillingPortal();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:237 docs/master/billing.md:207
msgid "By default, when the user is finished managing their subscription, they will be able to return to the `home` route of your application via a link within the Stripe billing portal. You may provide a custom URL that the user should return to by passing the URL as an argument to the `redirectToBillingPortal` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:243 docs/master/billing.md:213
#, no-wrap
msgid "    Route::get('/billing-portal', function (Request $request) {\n"
"        return $request->user()->redirectToBillingPortal(route('billing'));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:245 docs/master/billing.md:215
msgid "If you would like to generate the URL to the billing portal without generating an HTTP redirect response, you may invoke the `billingPortalUrl` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:247 docs/master/billing.md:217
#, no-wrap
msgid "    $url = $request->user()->billingPortalUrl(route('billing'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:249 docs/master/billing.md:219
#, no-wrap
msgid "<a name=\"payment-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:249 docs/master/billing.md:219
#, no-wrap
msgid "Payment Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:252 docs/master/billing.md:222
#, no-wrap
msgid "<a name=\"storing-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:252 docs/master/billing.md:222
#, no-wrap
msgid "Storing Payment Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:255 docs/master/billing.md:225
msgid "In order to create subscriptions or perform \"one off\" charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish this differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:257 docs/master/billing.md:227
#, no-wrap
msgid "<a name=\"payment-methods-for-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:257 docs/master/billing.md:227
#, no-wrap
msgid "Payment Methods For Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:260 docs/master/billing.md:230
msgid "When storing a customer's credit card information for future use by a subscription, the Stripe \"Setup Intents\" API must be used to securely gather the customer's payment method details. A \"Setup Intent\" indicates to Stripe the intention to charge a customer's payment method. Cashier's `Billable` trait includes the `createSetupIntent` method to easily create a new Setup Intent. You should invoke this method from the route or controller that will render the form which gathers your customer's payment method details:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:264 docs/master/billing.md:234
#, no-wrap
msgid "    return view('update-payment-method', [\n"
"        'intent' => $user->createSetupIntent()\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:266 docs/master/billing.md:236
msgid "After you have created the Setup Intent and passed it to the view, you should attach its secret to the element that will gather the payment method. For example, consider this \"update payment method\" form:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/billing.md:267 docs/master/billing.md:237
#, no-wrap
msgid "<input id=\"card-holder-name\" type=\"text\">\n\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n\n"
"<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n"
"    Update Payment Method\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:279 docs/master/billing.md:249
msgid "Next, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/billing.md:280 docs/8.x/billing.md:340 docs/master/billing.md:250
#: docs/master/billing.md:310
#, no-wrap
msgid "<script src=\"https://js.stripe.com/v3/\"></script>\n\n"
"<script>\n"
"    const stripe = Stripe('stripe-public-key');\n\n"
"    const elements = stripe.elements();\n"
"    const cardElement = elements.create('card');\n\n"
"    cardElement.mount('#card-element');\n"
"</script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:294 docs/master/billing.md:264
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `confirmCardSetup` method](https://stripe.com/docs/js/setup_intents/confirm_card_setup):"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/billing.md:295 docs/master/billing.md:265
#, no-wrap
msgid "const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"const clientSecret = cardButton.dataset.secret;\n\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { setupIntent, error } = await stripe.confirmCardSetup(\n"
"        clientSecret, {\n"
"            payment_method: {\n"
"                card: cardElement,\n"
"                billing_details: { name: cardHolderName.value }\n"
"            }\n"
"        }\n"
"    );\n\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:319 docs/master/billing.md:289
msgid "After the card has been verified by Stripe, you may pass the resulting `setupIntent.payment_method` identifier to your Laravel application, where it can be attached to the customer. The payment method can either be [added as a new payment method](#adding-payment-methods) or [used to update the default payment method](#updating-the-default-payment-method). You can also immediately use the payment method identifier to [create a new subscription](#creating-subscriptions)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:321 docs/master/billing.md:291
#, no-wrap
msgid "> {tip} If you would like more information about Setup Intents and gathering customer payment details please [review this overview provided by Stripe](https://stripe.com/docs/payments/save-and-reuse#php).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:323 docs/master/billing.md:293
#, no-wrap
msgid "<a name=\"payment-methods-for-single-charges\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:323 docs/master/billing.md:293
#, no-wrap
msgid "Payment Methods For Single Charges"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:326 docs/master/billing.md:296
msgid "Of course, when making a single charge against a customer's payment method, we will only need to use a payment method identifier once. Due to Stripe limitations, you may not use the stored default payment method of a customer for single charges. You must allow the customer to enter their payment method details using the Stripe.js library. For example, consider the following form:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/billing.md:327 docs/master/billing.md:297
#, no-wrap
msgid "<input id=\"card-holder-name\" type=\"text\">\n\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n\n"
"<button id=\"card-button\">\n"
"    Process Payment\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:339 docs/master/billing.md:309
msgid "After defining such a form, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:354 docs/master/billing.md:324
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `createPaymentMethod` method](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method):"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/billing.md:355 docs/master/billing.md:325
#, no-wrap
msgid "const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { paymentMethod, error } = await stripe.createPaymentMethod(\n"
"        'card', cardElement, {\n"
"            billing_details: { name: cardHolderName.value }\n"
"        }\n"
"    );\n\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:375 docs/master/billing.md:345
msgid "If the card is verified successfully, you may pass the `paymentMethod.id` to your Laravel application and process a [single charge](#simple-charge)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:377 docs/master/billing.md:347
#, no-wrap
msgid "<a name=\"retrieving-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:377 docs/master/billing.md:347
#, no-wrap
msgid "Retrieving Payment Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:380 docs/master/billing.md:350
msgid "The `paymentMethods` method on the billable model instance returns a collection of `Laravel\\Cashier\\PaymentMethod` instances:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:382 docs/master/billing.md:352
#, no-wrap
msgid "    $paymentMethods = $user->paymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:384 docs/master/billing.md:354
msgid "To retrieve the customer's default payment method, the `defaultPaymentMethod` method may be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:386 docs/master/billing.md:356
#, no-wrap
msgid "    $paymentMethod = $user->defaultPaymentMethod();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:388 docs/master/billing.md:358
msgid "You can retrieve a specific payment method that is attached to the billable model using the `findPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:390 docs/master/billing.md:360
#, no-wrap
msgid "    $paymentMethod = $user->findPaymentMethod($paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:392 docs/master/billing.md:362
#, no-wrap
msgid "<a name=\"check-for-a-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:392 docs/master/billing.md:362
#, no-wrap
msgid "Determining If A User Has A Payment Method"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:395 docs/master/billing.md:365
msgid "To determine if a billable model has a default payment method attached to their account, invoke the `hasDefaultPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:399 docs/master/billing.md:369
#, no-wrap
msgid "    if ($user->hasDefaultPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:401 docs/master/billing.md:371
msgid "You may use the `hasPaymentMethod` method to determine if a billable model has at least one payment method attached to their account:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:405 docs/master/billing.md:375
#, no-wrap
msgid "    if ($user->hasPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:407 docs/master/billing.md:377
#, no-wrap
msgid "<a name=\"updating-the-default-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:407 docs/master/billing.md:377
#, no-wrap
msgid "Updating The Default Payment Method"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:410 docs/master/billing.md:380
msgid "The `updateDefaultPaymentMethod` method may be used to update a customer's default payment method information. This method accepts a Stripe payment method identifier and will assign the new payment method as the default billing payment method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:412 docs/master/billing.md:382
#, no-wrap
msgid "    $user->updateDefaultPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:414 docs/master/billing.md:384
msgid "To sync your default payment method information with the customer's default payment method information in Stripe, you may use the `updateDefaultPaymentMethodFromStripe` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:416 docs/master/billing.md:386
#, no-wrap
msgid "    $user->updateDefaultPaymentMethodFromStripe();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:418 docs/master/billing.md:388
#, no-wrap
msgid "> {note} The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations imposed by Stripe, it may not be used for single charges.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:420 docs/master/billing.md:390
#, no-wrap
msgid "<a name=\"adding-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:420 docs/master/billing.md:390
#, no-wrap
msgid "Adding Payment Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:423 docs/master/billing.md:393
msgid "To add a new payment method, you may call the `addPaymentMethod` method on the billable model, passing the payment method identifier:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:425 docs/master/billing.md:395
#, no-wrap
msgid "    $user->addPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:427 docs/master/billing.md:397
#, no-wrap
msgid "> {tip} To learn how to retrieve payment method identifiers please review the [payment method storage documentation](#storing-payment-methods).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:429 docs/master/billing.md:399
#, no-wrap
msgid "<a name=\"deleting-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:429 docs/master/billing.md:399
#, no-wrap
msgid "Deleting Payment Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:432 docs/master/billing.md:402
msgid "To delete a payment method, you may call the `delete` method on the `Laravel\\Cashier\\PaymentMethod` instance you wish to delete:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:434 docs/master/billing.md:404
#, no-wrap
msgid "    $paymentMethod->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:436 docs/master/billing.md:406
msgid "The `deletePaymentMethods` method will delete all of the payment method information for the billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:438 docs/master/billing.md:408
#, no-wrap
msgid "    $user->deletePaymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:440 docs/master/billing.md:410
#, no-wrap
msgid "> {note} If a user has an active subscription, your application should not allow them to delete their default payment method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:442 docs/8.x/cashier-paddle.md:452
#: docs/master/billing.md:412 docs/master/cashier-paddle.md:412
#, no-wrap
msgid "<a name=\"subscriptions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:442 docs/8.x/cashier-paddle.md:452
#: docs/master/billing.md:412 docs/master/cashier-paddle.md:412
#, no-wrap
msgid "Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:445 docs/master/billing.md:415
msgid "Subscriptions provide a way to set up recurring payments for your customers. Stripe subscriptions managed by Cashier provide support for multiple subscription plans, subscription quantities, trials, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:447 docs/8.x/cashier-paddle.md:455
#: docs/master/billing.md:417 docs/master/cashier-paddle.md:415
#, no-wrap
msgid "<a name=\"creating-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:447 docs/8.x/cashier-paddle.md:455
#: docs/master/billing.md:417 docs/master/cashier-paddle.md:415
#, no-wrap
msgid "Creating Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:450 docs/master/billing.md:420
msgid "To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:457 docs/master/billing.md:427
#, no-wrap
msgid "    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription(\n"
"            'default', 'price_premium'\n"
"        )->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:460 docs/8.x/billing.md:759 docs/8.x/billing.md:879
#: docs/8.x/billing.md:1016 docs/8.x/billing.md:1070 docs/8.x/billing.md:1252
#: docs/8.x/csrf.md:49 docs/8.x/migrations.md:231 docs/8.x/migrations.md:240
#: docs/8.x/migrations.md:248 docs/master/billing.md:430
#: docs/master/billing.md:720 docs/master/billing.md:897
#: docs/master/billing.md:947 docs/master/billing.md:1125
#: docs/master/csrf.md:49 docs/master/migrations.md:205
#: docs/master/migrations.md:214 docs/master/migrations.md:222
#, no-wrap
msgid "        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:462 docs/master/billing.md:432
msgid "The first argument passed to the `newSubscription` method should be the name of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. The second argument is the specific plan the user is subscribing to. This value should correspond to the plan's price identifier in Stripe."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:464 docs/master/billing.md:434
msgid "The `create` method, which accepts [a Stripe payment method identifier](#storing-payment-methods) or Stripe `PaymentMethod` object, will begin the subscription as well as update your database with the billable model's Stripe customer ID and other relevant billing information."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:466 docs/master/billing.md:436
#, no-wrap
msgid "> {note} Passing a payment method identifier directly to the `create` subscription method will also automatically add it to the user's stored payment methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:468 docs/master/billing.md:438
#, no-wrap
msgid "<a name=\"subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:468 docs/8.x/billing.md:828 docs/master/billing.md:438
#: docs/master/billing.md:789
#, no-wrap
msgid "Quantities"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:471 docs/master/billing.md:441
msgid "If you would like to set a specific [quantity](https://stripe.com/docs/billing/subscriptions/quantities) for the plan when creating the subscription, you should invoke the `quantity` method on the subscription builder before creating the subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:475 docs/master/billing.md:445
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')\n"
"         ->quantity(5)\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:477 docs/8.x/cashier-paddle.md:482
#: docs/master/billing.md:447 docs/master/cashier-paddle.md:442
#, no-wrap
msgid "<a name=\"additional-details\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:477 docs/8.x/cashier-paddle.md:482
#: docs/master/billing.md:447 docs/master/cashier-paddle.md:442
#, no-wrap
msgid "Additional Details"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:480 docs/master/billing.md:450
msgid "If you would like to specify additional [customer](https://stripe.com/docs/api/customers/create) or [subscription](https://stripe.com/docs/api/subscriptions/create) options supported by Stripe, you may do so by passing them as the second and third arguments to the `create` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:486 docs/master/billing.md:456
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')->create($paymentMethod, [\n"
"        'email' => $email,\n"
"    ], [\n"
"        'metadata' => ['note' => 'Some extra information.'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:488 docs/master/billing.md:458
#, no-wrap
msgid "<a name=\"coupons\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:488 docs/8.x/cashier-paddle.md:373
#: docs/8.x/cashier-paddle.md:493 docs/master/billing.md:458
#: docs/master/cashier-paddle.md:333 docs/master/cashier-paddle.md:453
#, no-wrap
msgid "Coupons"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:491 docs/8.x/cashier-paddle.md:496
#: docs/master/billing.md:461 docs/master/cashier-paddle.md:456
msgid "If you would like to apply a coupon when creating the subscription, you may use the `withCoupon` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:495 docs/master/billing.md:465
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')\n"
"         ->withCoupon('code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:497 docs/master/billing.md:467
msgid "Or, if you would like to apply a [Stripe promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you may use the `withPromotionCode` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:501 docs/master/billing.md:471
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')\n"
"         ->withPromotionCode('promo_code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:503 docs/master/billing.md:473
#, no-wrap
msgid "<a name=\"adding-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:503 docs/master/billing.md:473
#, no-wrap
msgid "Adding Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:506 docs/master/billing.md:476
msgid "If you would like to add a subscription to a customer who already has a default payment method you may invoke the `add` method on the subscription builder:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:510 docs/8.x/billing.md:692 docs/8.x/billing.md:714
#: docs/8.x/billing.md:763 docs/8.x/billing.md:771 docs/8.x/billing.md:781
#: docs/8.x/billing.md:798 docs/8.x/billing.md:806 docs/8.x/billing.md:815
#: docs/8.x/billing.md:833 docs/8.x/billing.md:850 docs/8.x/billing.md:860
#: docs/8.x/billing.md:897 docs/8.x/billing.md:903 docs/8.x/billing.md:909
#: docs/8.x/billing.md:915 docs/8.x/billing.md:924 docs/8.x/billing.md:930
#: docs/8.x/billing.md:993 docs/8.x/billing.md:1125
#: docs/8.x/cashier-paddle.md:668 docs/8.x/cashier-paddle.md:689
#: docs/8.x/cashier-paddle.md:703 docs/8.x/cashier-paddle.md:719
#: docs/8.x/cashier-paddle.md:1072 docs/8.x/cashier-paddle.md:1095
#: docs/8.x/cashier-paddle.md:1120 docs/8.x/database-testing.md:628
#: docs/8.x/eloquent-mutators.md:58 docs/8.x/eloquent-mutators.md:107
#: docs/8.x/eloquent-mutators.md:197 docs/8.x/eloquent-mutators.md:209
#: docs/8.x/eloquent-mutators.md:218 docs/8.x/eloquent-mutators.md:437
#: docs/8.x/eloquent-relationships.md:455
#: docs/8.x/eloquent-relationships.md:504
#: docs/8.x/eloquent-relationships.md:984
#: docs/8.x/eloquent-relationships.md:1034
#: docs/8.x/eloquent-relationships.md:1613
#: docs/8.x/eloquent-relationships.md:1631
#: docs/8.x/eloquent-relationships.md:1667
#: docs/8.x/eloquent-serialization.md:52 docs/8.x/eloquent.md:607
#: docs/8.x/passport.md:856 docs/master/billing.md:480
#: docs/master/billing.md:653 docs/master/billing.md:675
#: docs/master/billing.md:724 docs/master/billing.md:732
#: docs/master/billing.md:742 docs/master/billing.md:759
#: docs/master/billing.md:767 docs/master/billing.md:776
#: docs/master/billing.md:794 docs/master/billing.md:811
#: docs/master/billing.md:821 docs/master/billing.md:874
#: docs/master/billing.md:998 docs/master/cashier-paddle.md:628
#: docs/master/cashier-paddle.md:649 docs/master/cashier-paddle.md:663
#: docs/master/cashier-paddle.md:679 docs/master/cashier-paddle.md:1032
#: docs/master/cashier-paddle.md:1055 docs/master/cashier-paddle.md:1080
#: docs/master/database-testing.md:619 docs/master/eloquent-mutators.md:58
#: docs/master/eloquent-mutators.md:107 docs/master/eloquent-mutators.md:197
#: docs/master/eloquent-mutators.md:209 docs/master/eloquent-mutators.md:402
#: docs/master/eloquent-relationships.md:455
#: docs/master/eloquent-relationships.md:504
#: docs/master/eloquent-relationships.md:984
#: docs/master/eloquent-relationships.md:1034
#: docs/master/eloquent-relationships.md:1613
#: docs/master/eloquent-relationships.md:1631
#: docs/master/eloquent-relationships.md:1667
#: docs/master/eloquent-serialization.md:52 docs/master/eloquent.md:607
#: docs/master/passport.md:854
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:512 docs/master/billing.md:482
#, no-wrap
msgid "    $user->newSubscription('default', 'price_premium')->add();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:514
#, no-wrap
msgid "<a name=\"creating-subscriptions-from-the-stripe-dashboard\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:514
#, no-wrap
msgid "Creating Subscriptions From The Stripe Dashboard"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:517
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a name of `default`. To customize the subscription name that is assigned to dashboard created subscriptions, [extend the `WebhookController`](/docs/{{version}}/billing#defining-webhook-event-handlers) and overwrite the `newSubscriptionName` method."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:519
msgid "In addition, you may only create one type of subscription via the Stripe dashboard. If your application offers multiple subscriptions that use different names, only one type of subscription may be added through the Stripe dashboard."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:521
msgid "Finally, you should always make sure to only add one active subscription per type of subscription offered by your application. If customer has two `default` subscriptions, only the most recently added subscription will be used by Cashier even though both would be synced with your application's database."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:523 docs/8.x/cashier-paddle.md:515
#: docs/master/billing.md:484 docs/master/cashier-paddle.md:475
#, no-wrap
msgid "<a name=\"checking-subscription-status\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:523 docs/8.x/cashier-paddle.md:515
#: docs/master/billing.md:484 docs/master/cashier-paddle.md:475
#, no-wrap
msgid "Checking Subscription Status"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:526 docs/master/billing.md:487
msgid "Once a customer is subscribed to your application, you may easily check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the customer has an active subscription, even if the subscription is currently within its trial period. The `subscribed` method accepts the name of the subscription as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:530 docs/8.x/cashier-paddle.md:522
#: docs/master/billing.md:491 docs/master/cashier-paddle.md:482
#, no-wrap
msgid "    if ($user->subscribed('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:532 docs/8.x/cashier-paddle.md:524
#: docs/master/billing.md:493 docs/master/cashier-paddle.md:484
msgid "The `subscribed` method also makes a great candidate for a [route middleware](/docs/{{version}}/middleware), allowing you to filter access to routes and controllers based on the user's subscription status:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:538 docs/8.x/cashier-paddle.md:530
#: docs/8.x/middleware.md:34 docs/8.x/middleware.md:71
#: docs/8.x/middleware.md:89 docs/8.x/middleware.md:241
#: docs/8.x/middleware.md:279 docs/master/billing.md:499
#: docs/master/cashier-paddle.md:490 docs/master/middleware.md:34
#: docs/master/middleware.md:71 docs/master/middleware.md:89
#: docs/master/middleware.md:241 docs/master/middleware.md:279
#, no-wrap
msgid "    use Closure;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:554 docs/8.x/cashier-paddle.md:546
#: docs/master/billing.md:515 docs/master/cashier-paddle.md:506
#, no-wrap
msgid "    class EnsureUserIsSubscribed\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"                // This user is not a paying customer...\n"
"                return redirect('billing');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:558 docs/8.x/cashier-paddle.md:550
#: docs/8.x/middleware.md:53 docs/8.x/middleware.md:81 docs/8.x/urls.md:189
#: docs/master/billing.md:519 docs/master/cashier-paddle.md:510
#: docs/master/middleware.md:53 docs/master/middleware.md:81
#: docs/master/urls.md:189
#, no-wrap
msgid "            return $next($request);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:560 docs/8.x/cashier-paddle.md:552
#: docs/master/billing.md:521 docs/master/cashier-paddle.md:512
msgid "If you would like to determine if a user is still within their trial period, you may use the `onTrial` method. This method can be useful for determining if you should display a warning to the user that they are still on their trial period:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:564 docs/8.x/billing.md:1092
#: docs/8.x/cashier-paddle.md:556 docs/8.x/cashier-paddle.md:857
#: docs/master/billing.md:525 docs/master/billing.md:969
#: docs/master/cashier-paddle.md:516 docs/master/cashier-paddle.md:817
#, no-wrap
msgid "    if ($user->subscription('default')->onTrial()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:566 docs/master/billing.md:527
msgid "The `subscribedToPlan` method may be used to determine if the user is subscribed to a given plan based on a given Stripe plan's price identifier. In this example, we will determine if the user's `default` subscription is actively subscribed to the application's \"monthly\" plan. The given Stripe plan price identifier should correspond to one of your plan's price identifiers in the Stripe dashboard:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:570 docs/master/billing.md:531
#, no-wrap
msgid "    if ($user->subscribedToPlan('price_monthly', 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:572 docs/master/billing.md:533
msgid "By passing an array to the `subscribedToPlan` method, you may determine if the user's `default` subscription is actively subscribed to the application's \"monthly\" or \"yearly\" plan:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:576 docs/master/billing.md:537
#, no-wrap
msgid "    if ($user->subscribedToPlan(['price_monthly', 'price_yearly'], 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:578 docs/8.x/cashier-paddle.md:570
#: docs/master/billing.md:539 docs/master/cashier-paddle.md:530
msgid "The `recurring` method may be used to determine if the user is currently subscribed and is no longer within their trial period:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:582 docs/8.x/cashier-paddle.md:574
#: docs/master/billing.md:543 docs/master/cashier-paddle.md:534
#, no-wrap
msgid "    if ($user->subscription('default')->recurring()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:584 docs/master/billing.md:545
#, no-wrap
msgid "> {note} If a user has two subscriptions with the same name, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records named `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:586 docs/8.x/cashier-paddle.md:576
#: docs/master/billing.md:547 docs/master/cashier-paddle.md:536
#, no-wrap
msgid "<a name=\"cancelled-subscription-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:586 docs/8.x/cashier-paddle.md:576
#: docs/master/billing.md:547 docs/master/cashier-paddle.md:536
#, no-wrap
msgid "Cancelled Subscription Status"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:589 docs/8.x/cashier-paddle.md:579
#: docs/master/billing.md:550 docs/master/cashier-paddle.md:539
msgid "To determine if the user was once an active subscriber but has cancelled their subscription, you may use the `cancelled` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:593 docs/8.x/cashier-paddle.md:583
#: docs/master/billing.md:554 docs/master/cashier-paddle.md:543
#, no-wrap
msgid "    if ($user->subscription('default')->cancelled()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:595 docs/master/billing.md:556
msgid "You may also determine if a user has cancelled their subscription but are still on their \"grace period\" until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their \"grace period\" until March 10th. Note that the `subscribed` method still returns `true` during this time:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:599 docs/8.x/billing.md:1035
#: docs/8.x/cashier-paddle.md:589 docs/8.x/cashier-paddle.md:816
#: docs/master/billing.md:560 docs/master/billing.md:916
#: docs/master/cashier-paddle.md:549 docs/master/cashier-paddle.md:776
#, no-wrap
msgid "    if ($user->subscription('default')->onGracePeriod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:601 docs/8.x/cashier-paddle.md:591
#: docs/master/billing.md:562 docs/master/cashier-paddle.md:551
msgid "To determine if the user has cancelled their subscription and is no longer within their \"grace period\", you may use the `ended` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:605 docs/8.x/cashier-paddle.md:595
#: docs/master/billing.md:566 docs/master/cashier-paddle.md:555
#, no-wrap
msgid "    if ($user->subscription('default')->ended()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:607 docs/master/billing.md:568
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:607 docs/master/billing.md:568
#, no-wrap
msgid "Incomplete and Past Due Status"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:610 docs/master/billing.md:571
msgid "If a subscription requires a secondary payment action after creation the subscription will be marked as `incomplete`. Subscription statuses are stored in the `stripe_status` column of Cashier's `subscriptions` database table."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:612 docs/master/billing.md:573
msgid "Similarly, if a secondary payment action is required when swapping plans the subscription will be marked as `past_due`. When your subscription is in either of these states it will not be active until the customer has confirmed their payment. Determining if a subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:616 docs/8.x/billing.md:1501 docs/master/billing.md:577
#: docs/master/billing.md:1374
#, no-wrap
msgid "    if ($user->hasIncompletePayment('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:620 docs/8.x/billing.md:1505 docs/master/billing.md:581
#: docs/master/billing.md:1378
#, no-wrap
msgid "    if ($user->subscription('default')->hasIncompletePayment()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:622 docs/master/billing.md:583
msgid "When a subscription has an incomplete payment, you should direct the user to Cashier's payment confirmation page, passing the `latestPayment` identifier. You may use the `latestPayment` method available on subscription instance to retrieve this identifier:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/billing.md:623 docs/master/billing.md:584
#, no-wrap
msgid "<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) }}\">\n"
"    Please confirm your payment.\n"
"</a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:630 docs/master/billing.md:591
msgid "If you would like the subscription to still be considered active when it's in a `past_due` state, you may use the `keepPastDueSubscriptionsActive` method provided by Cashier. Typically, this method should be called in the `register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:642 docs/8.x/cashier-paddle.md:620
#: docs/master/billing.md:603 docs/master/cashier-paddle.md:580
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::keepPastDueSubscriptionsActive();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:644 docs/master/billing.md:605
#, no-wrap
msgid "> {note} When a subscription is in an `incomplete` state it cannot be changed until the payment is confirmed. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in an `incomplete` state.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:646 docs/8.x/cashier-paddle.md:624
#: docs/master/billing.md:607 docs/master/cashier-paddle.md:584
#, no-wrap
msgid "<a name=\"subscription-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:646 docs/8.x/cashier-paddle.md:624
#: docs/master/billing.md:607 docs/master/cashier-paddle.md:584
#, no-wrap
msgid "Subscription Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:649 docs/8.x/cashier-paddle.md:627
#: docs/master/billing.md:610 docs/master/cashier-paddle.md:587
msgid "Most subscription states are also available as query scopes so that you may easily query your database for subscriptions that are in a given state:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:652 docs/8.x/cashier-paddle.md:630
#: docs/master/billing.md:613 docs/master/cashier-paddle.md:590
#, no-wrap
msgid "    // Get all active subscriptions...\n"
"    $subscriptions = Subscription::query()->active()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:655 docs/8.x/cashier-paddle.md:633
#: docs/master/billing.md:616 docs/master/cashier-paddle.md:593
#, no-wrap
msgid "    // Get all of the cancelled subscriptions for a user...\n"
"    $subscriptions = $user->subscriptions()->cancelled()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:657 docs/8.x/cashier-paddle.md:635
#: docs/master/billing.md:618 docs/master/cashier-paddle.md:595
msgid "A complete list of available scopes is available below:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:669 docs/master/billing.md:630
#, no-wrap
msgid "    Subscription::query()->active();\n"
"    Subscription::query()->cancelled();\n"
"    Subscription::query()->ended();\n"
"    Subscription::query()->incomplete();\n"
"    Subscription::query()->notCancelled();\n"
"    Subscription::query()->notOnGracePeriod();\n"
"    Subscription::query()->notOnTrial();\n"
"    Subscription::query()->onGracePeriod();\n"
"    Subscription::query()->onTrial();\n"
"    Subscription::query()->pastDue();\n"
"    Subscription::query()->recurring();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:671 docs/8.x/cashier-paddle.md:682
#: docs/master/billing.md:632 docs/master/cashier-paddle.md:642
#, no-wrap
msgid "<a name=\"changing-plans\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:671 docs/8.x/cashier-paddle.md:682
#: docs/master/billing.md:632 docs/master/cashier-paddle.md:642
#, no-wrap
msgid "Changing Plans"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:674 docs/master/billing.md:635
msgid "After a customer is subscribed to your application, they may occasionally want to change to a new subscription plan. To swap a customer to a new plan, pass the Stripe plan's price identifier to the `swap` method. The given price identifier should correspond to a Stripe plan price identifier available in the Stripe dashboard:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:678 docs/8.x/eloquent-mutators.md:162
#: docs/8.x/notifications.md:692 docs/8.x/notifications.md:700
#: docs/8.x/notifications.md:713 docs/8.x/notifications.md:725
#: docs/master/billing.md:639 docs/master/eloquent-mutators.md:162
#: docs/master/notifications.md:664 docs/master/notifications.md:672
#: docs/master/notifications.md:685 docs/master/notifications.md:697
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:680 docs/master/billing.md:641
#, no-wrap
msgid "    $user->subscription('default')->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:682 docs/master/billing.md:643
msgid "If the customer is on trial, the trial period will be maintained. Additionally, if a \"quantity\" exists for the subscription, that quantity will also be maintained."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:684 docs/master/billing.md:645
msgid "If you would like to swap plans and cancel any trial period the customer is currently on, you may invoke the `skipTrial` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:688 docs/master/billing.md:649
#, no-wrap
msgid "    $user->subscription('default')\n"
"            ->skipTrial()\n"
"            ->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:690 docs/master/billing.md:651
msgid "If you would like to swap plans and immediately invoice the customer instead of waiting for their next billing cycle, you may use the `swapAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:694 docs/master/billing.md:655
#, no-wrap
msgid "    $user->subscription('default')->swapAndInvoice('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:696 docs/8.x/cashier-paddle.md:707
#: docs/master/billing.md:657 docs/master/cashier-paddle.md:667
#, no-wrap
msgid "<a name=\"prorations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:696 docs/8.x/cashier-paddle.md:707
#: docs/master/billing.md:657 docs/master/cashier-paddle.md:667
#, no-wrap
msgid "Prorations"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:699 docs/master/billing.md:660
msgid "By default, Stripe prorates charges when swapping between plans. The `noProrate` method may be used to update the subscription's plan without prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:701 docs/master/billing.md:662
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->swap('price_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:703 docs/master/billing.md:664
msgid "For more information on subscription proration, consult the [Stripe documentation](https://stripe.com/docs/billing/subscriptions/prorations)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:705 docs/master/billing.md:666
#, no-wrap
msgid "> {note} Executing the `noProrate` method before the `swapAndInvoice` method will have no effect on proration. An invoice will always be issued.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:707 docs/8.x/cashier-paddle.md:714
#: docs/master/billing.md:668 docs/master/cashier-paddle.md:674
#, no-wrap
msgid "<a name=\"subscription-quantity\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:707 docs/8.x/cashier-paddle.md:714
#: docs/master/billing.md:668 docs/master/cashier-paddle.md:674
#, no-wrap
msgid "Subscription Quantity"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:710 docs/master/billing.md:671
msgid "Sometimes subscriptions are affected by \"quantity\". For example, a project management application might charge $10 per month per project. You may use the `incrementQuantity` and `decrementQuantity` methods to easily increment or decrement your subscription quantity:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:716 docs/8.x/cashier-paddle.md:721
#: docs/master/billing.md:677 docs/master/cashier-paddle.md:681
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:719 docs/8.x/cashier-paddle.md:724
#: docs/master/billing.md:680 docs/master/cashier-paddle.md:684
#, no-wrap
msgid "    // Add five to the subscription's current quantity...\n"
"    $user->subscription('default')->incrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:721 docs/8.x/cashier-paddle.md:726
#: docs/master/billing.md:682 docs/master/cashier-paddle.md:686
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:724 docs/8.x/cashier-paddle.md:729
#: docs/master/billing.md:685 docs/master/cashier-paddle.md:689
#, no-wrap
msgid "    // Subtract five from the subscription's current quantity...\n"
"    $user->subscription('default')->decrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:726 docs/8.x/cashier-paddle.md:731
#: docs/master/billing.md:687 docs/master/cashier-paddle.md:691
msgid "Alternatively, you may set a specific quantity using the `updateQuantity` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:728 docs/8.x/cashier-paddle.md:733
#: docs/master/billing.md:689 docs/master/cashier-paddle.md:693
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:730 docs/8.x/cashier-paddle.md:735
#: docs/master/billing.md:691 docs/master/cashier-paddle.md:695
msgid "The `noProrate` method may be used to update the subscription's quantity without prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:732 docs/8.x/cashier-paddle.md:737
#: docs/master/billing.md:693 docs/master/cashier-paddle.md:697
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:734 docs/master/billing.md:695
msgid "For more information on subscription quantities, consult the [Stripe documentation](https://stripe.com/docs/subscriptions/quantities)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:736 docs/master/billing.md:697
#, no-wrap
msgid "<a name=\"multiplan-subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:736 docs/master/billing.md:697
#, no-wrap
msgid "Multiplan Subscription Quantities"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:739 docs/master/billing.md:700
msgid "If your subscription is a [multiplan subscription](#multiplan-subscriptions), you should pass the name of the plan whose quantity you wish to increment or decrement as the second argument to the increment / decrement methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:741 docs/master/billing.md:702
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(1, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:743 docs/master/billing.md:704
#, no-wrap
msgid "<a name=\"multiplan-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:743 docs/master/billing.md:704
#, no-wrap
msgid "Multiplan Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:746 docs/master/billing.md:707
msgid "[Multiplan subscriptions](https://stripe.com/docs/billing/subscriptions/multiplan) allow you to assign multiple billing plans to a single subscription. For example, imagine you are building a customer service \"helpdesk\" application that has a base subscription plan of $10 per month but offers a live chat add-on plan for an additional $15 per month. Multiplan subscription information is stored in Cashier's `subscription_items` database table."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:748 docs/master/billing.md:709
msgid "You may specify multiple plans for a given subscription by passing an array of plans as the second argument to the `newSubscription` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:756 docs/master/billing.md:717
#, no-wrap
msgid "    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', [\n"
"            'price_monthly',\n"
"            'chat-plan',\n"
"        ])->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:761 docs/master/billing.md:722
msgid "In the example above, the customer will have two plans attached to their `default` subscription. Both plans will be charged on their respective billing intervals. If necessary, you may use the `quantity` method to indicate a specific quantity for each plan:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:767 docs/master/billing.md:728
#, no-wrap
msgid "    $user->newSubscription('default', ['price_monthly', 'chat-plan'])\n"
"        ->quantity(5, 'chat-plan')\n"
"        ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:769 docs/master/billing.md:730
msgid "If you would like to add another plan to an existing subscription, you may invoke the subscription's `addPlan` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:773 docs/master/billing.md:734
#, no-wrap
msgid "    $user->subscription('default')->addPlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:775 docs/master/billing.md:736
msgid "The example above will add the new plan and the customer will be billed for it on their next billing cycle. If you would like to bill the customer immediately you may use the `addPlanAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:777 docs/master/billing.md:738
#, no-wrap
msgid "    $user->subscription('default')->addPlanAndInvoice('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:779 docs/master/billing.md:740
msgid "If you would like to add a plan with a specific quantity, you can pass the quantity as the second argument of the `addPlan` or `addPlanAndInvoice` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:783 docs/master/billing.md:744
#, no-wrap
msgid "    $user->subscription('default')->addPlan('chat-plan', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:785 docs/master/billing.md:746
msgid "You may remove plans from subscriptions using the `removePlan` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:787 docs/master/billing.md:748
#, no-wrap
msgid "    $user->subscription('default')->removePlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:789 docs/master/billing.md:750
#, no-wrap
msgid "> {note} You may not remove the last plan on a subscription. Instead, you should simply cancel the subscription.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:791 docs/master/billing.md:752
#, no-wrap
msgid "<a name=\"swapping-multiplan-plans\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:791 docs/master/billing.md:752
#, no-wrap
msgid "Swapping Plans"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:794 docs/master/billing.md:755
msgid "You may also change the plans attached to a multiplan subscription. For example, imagine a customer has a `basic-plan` subscription with a `chat-plan` add-on plan and you want to upgrade the customer from the `basic-plan` to the `pro-plan` plan:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:800 docs/master/billing.md:761
#, no-wrap
msgid "    $user->subscription('default')->swap(['pro-plan', 'chat-plan']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:802 docs/master/billing.md:763
msgid "When executing the example above, the underlying subscription item with the `basic-plan` is deleted and the one with the `chat-plan` is preserved. Additionally, a new subscription item for the `pro-plan` is created."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:804 docs/master/billing.md:765
msgid "You can also specify subscription item options by passing an array of key / value pairs to the `swap` method. For example, you may need to specify the subscription plan quantities:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:811 docs/master/billing.md:772
#, no-wrap
msgid "    $user->subscription('default')->swap([\n"
"        'pro-plan' => ['quantity' => 5],\n"
"        'chat-plan'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:813 docs/master/billing.md:774
msgid "If you want to swap a single plan on a subscription, you may do so using the `swap` method on the subscription item itself. This approach is particularly useful if you would like to preserve all of the existing metadata on the subscription's other plans:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:819 docs/master/billing.md:780
#, no-wrap
msgid "    $user->subscription('default')\n"
"            ->findItemOrFail('basic-plan')\n"
"            ->swap('pro-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:821 docs/master/billing.md:782
#, no-wrap
msgid "<a name=\"proration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:821 docs/master/billing.md:782
#, no-wrap
msgid "Proration"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:824 docs/master/billing.md:785
msgid "By default, Stripe will prorate charges when adding or removing plans from a multiplan subscription. If you would like to make a plan adjustment without proration, you should chain the `noProrate` method onto your plan operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:826 docs/master/billing.md:787
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->removePlan('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:828 docs/master/billing.md:789
#, no-wrap
msgid "<a name=\"swapping-quantities\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:831 docs/master/billing.md:792
msgid "If you would like to update quantities on individual subscription plans, you may do so using the [existing quantity methods](#subscription-quantity) by passing the name of the plan as an additional argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:835 docs/master/billing.md:796
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(5, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:837 docs/master/billing.md:798
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity(3, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:839 docs/master/billing.md:800
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10, 'chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:841 docs/master/billing.md:802
#, no-wrap
msgid "> {note} When a subscription has multiple plans the `stripe_plan` and `quantity` attributes on the `Subscription` model will be `null`. To access the individual plan attributes, you should use the `items` relationship available on the `Subscription` model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:843 docs/master/billing.md:804
#, no-wrap
msgid "<a name=\"subscription-items\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:843 docs/master/billing.md:804
#, no-wrap
msgid "Subscription Items"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:846 docs/master/billing.md:807
msgid "When a subscription has multiple plans, it will have multiple subscription \"items\" stored in your database's `subscription_items` table. You may access these via the `items` relationship on the subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:852 docs/master/billing.md:813
#, no-wrap
msgid "    $subscriptionItem = $user->subscription('default')->items->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:856 docs/master/billing.md:817
#, no-wrap
msgid "    // Retrieve the Stripe plan and quantity for a specific item...\n"
"    $stripePlan = $subscriptionItem->stripe_plan;\n"
"    $quantity = $subscriptionItem->quantity;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:858 docs/master/billing.md:819
msgid "You can also retrieve a specific plan using the `findItemOrFail` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:862 docs/master/billing.md:823
#, no-wrap
msgid "    $subscriptionItem = $user->subscription('default')->findItemOrFail('chat-plan');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:864
#, no-wrap
msgid "<a name=\"metered-billing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:864
#, no-wrap
msgid "Metered Billing"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:867
msgid "[Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) allows you to charge customers based on their product usage during a billing cycle. For example, you may charge customers based on the number of text messages or emails they send per month."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:869
msgid "To start using metered billing, you will first need to create a new product in your Stripe dashboard with a metered price. Then, use the `meteredPlan` to add the metered price ID to a customer subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:876
#, no-wrap
msgid "    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', [])\n"
"            ->meteredPlan('price_metered')\n"
"            ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:881
msgid "You may also start a metered subscription via [Stripe Checkout](#checkout):"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:886
#, no-wrap
msgid "    $checkout = Auth::user()\n"
"            ->newSubscription('default', [])\n"
"            ->meteredPlan('price_metered')\n"
"            ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:890 docs/8.x/billing.md:1370 docs/8.x/billing.md:1403
#: docs/8.x/billing.md:1426 docs/master/billing.md:1243
#: docs/master/billing.md:1276 docs/master/billing.md:1299
#, no-wrap
msgid "    return view('your-checkout-view', [\n"
"        'checkout' => $checkout,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:892
#, no-wrap
msgid "<a name=\"reporting-usage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:892
#, no-wrap
msgid "Reporting Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:895
msgid "As your customer uses your application, you will report their usage to Stripe so that they can be billed accurately. To increment the usage of a metered subscription, you may use the `reportUsage` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:899
#, no-wrap
msgid "    $user->subscription('default')->reportUsage();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:901
msgid "By default, a \"usage quantity\" of 1 is added to the billing period. Alternatively, you may pass a specific amount of \"usage\" to add to the customer's usage for the billing period:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:905
#, no-wrap
msgid "    $user->subscription('default')->reportUsage(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:907
msgid "If your application offers multiple plans on a single subscription, you will need to use the `reportUsageFor` method to specify the metered plan / price you want to report usage for:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:911
#, no-wrap
msgid "    $user->subscription('default')->reportUsageFor('price_metered', 15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:913
msgid "Sometimes, you may need to update usage which you have previously reported. To accomplish this, you may pass a timestamp or a `DateTimeInterface` instance as the second parameter to `reportUsage`. When doing so, Stripe will update the usage that was reported at that given time. You can continue to update previous usage records as the given date and time is still within the current billing period:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:917
#, no-wrap
msgid "    $user->subscription('default')->reportUsage(5, $timestamp);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:919
#, no-wrap
msgid "<a name=\"retrieving-usage-records\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:919
#, no-wrap
msgid "Retrieving Usage Records"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:922
msgid "To retrieve a customer's past usage, you may use a subscription instance's `usageRecords` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:926
#, no-wrap
msgid "    $usageRecords = $user->subscription('default')->usageRecords();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:928
msgid "If your application offers multiple plans on a single subscription, you may use the `usageRecordsFor` method to specify the metered plan / price that you wish to retrieve usage records for:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:932
#, no-wrap
msgid "    $usageRecords = $user->subscription('default')->usageRecordsFor('price_metered');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:934
msgid "The `usageRecords` and `usageRecordsFor` methods return a Collection instance containing an associative array of usage records. You may iterate over this array to display a customer's total usage:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:940
#, no-wrap
msgid "    @foreach ($usageRecords as $usageRecord)\n"
"        - Period Starting: {{ $usageRecord['period']['start'] }}\n"
"        - Period Ending: {{ $usageRecord['period']['end'] }}\n"
"        - Total Usage: {{ $usageRecord['total_usage'] }}\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:942
msgid "For a full reference of all usage data returned and how to use Stripe's cursor based pagination, please consult [the official Stripe API documentation](https://stripe.com/docs/api/usage_records/subscription_item_summary_list)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:944 docs/master/billing.md:825
#, no-wrap
msgid "<a name=\"subscription-taxes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:944 docs/master/billing.md:825
#, no-wrap
msgid "Subscription Taxes"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:947 docs/master/billing.md:828
msgid "To specify the tax rates a user pays on a subscription, you should implement the `taxRates` method on your billable model and return an array containing the Stripe tax rate IDs. You can define these tax rates in [your Stripe dashboard](https://dashboard.stripe.com/test/tax-rates):"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:957 docs/master/billing.md:838
#, no-wrap
msgid "    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function taxRates()\n"
"    {\n"
"        return ['tax-rate-id'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:959 docs/master/billing.md:840
msgid "The `taxRates` method enables you to apply a tax rate on a customer-by-customer basis, which may be helpful for a user base that spans multiple countries and tax rates."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:961 docs/master/billing.md:842
msgid "If you're offering multiplan subscriptions, you may define different tax rates for each plan by implementing a `planTaxRates` method on your billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:973 docs/master/billing.md:854
#, no-wrap
msgid "    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function planTaxRates()\n"
"    {\n"
"        return [\n"
"            'plan-id' => ['tax-rate-id'],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:975 docs/master/billing.md:856
#, no-wrap
msgid "> {note} The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one off\" charges, you will need to manually specify the tax rate at that time.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:977 docs/master/billing.md:858
#, no-wrap
msgid "<a name=\"syncing-tax-rates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:977 docs/master/billing.md:858
#, no-wrap
msgid "Syncing Tax Rates"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:980 docs/master/billing.md:861
msgid "When changing the hard-coded tax rate IDs returned by the `taxRates` method, the tax settings on any existing subscriptions for the user will remain the same. If you wish to update the tax value for existing subscriptions with the new `taxRates` values, you should call the `syncTaxRates` method on the user's subscription instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:982 docs/master/billing.md:863
#, no-wrap
msgid "    $user->subscription('default')->syncTaxRates();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:984 docs/master/billing.md:865
msgid "This will also sync any multiplan subscription item tax rates. If your application is offering multiplan subscriptions, you should ensure that your billable model implements the `planTaxRates` method [discussed above](#subscription-taxes)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:986 docs/master/billing.md:867
#, no-wrap
msgid "<a name=\"tax-exemption\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:986 docs/master/billing.md:867
#, no-wrap
msgid "Tax Exemption"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:989 docs/master/billing.md:870
msgid "Cashier also offers the `isNotTaxExempt`, `isTaxExempt`, and `reverseChargeApplies` methods to determine if the customer is tax exempt. These methods will call the Stripe API to determine a customer's tax exemption status:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:997 docs/master/billing.md:878
#, no-wrap
msgid "    $user->isTaxExempt();\n"
"    $user->isNotTaxExempt();\n"
"    $user->reverseChargeApplies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:999 docs/master/billing.md:880
#, no-wrap
msgid "> {note} These methods are also available on any `Laravel\\Cashier\\Invoice` object. However, when invoked on an `Invoice` object, the methods will determine the exemption status at the time the invoice was created.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1001 docs/master/billing.md:882
#, no-wrap
msgid "<a name=\"subscription-anchor-date\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1001 docs/master/billing.md:882
#, no-wrap
msgid "Subscription Anchor Date"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1004 docs/master/billing.md:885
msgid "By default, the billing cycle anchor is the date the subscription was created or, if a trial period is used, the date that the trial ends. If you would like to modify the billing anchor date, you may use the `anchorBillingCycleOn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1009 docs/master/billing.md:890
#, no-wrap
msgid "    Route::post('/user/subscribe', function (Request $request) {\n"
"        $anchor = Carbon::parse('first day of next month');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1013 docs/master/billing.md:894
#, no-wrap
msgid "        $request->user()->newSubscription('default', 'price_premium')\n"
"                    ->anchorBillingCycleOn($anchor->startOfDay())\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1018 docs/master/billing.md:899
msgid "For more information on managing subscription billing cycles, consult the [Stripe billing cycle documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1020 docs/8.x/cashier-paddle.md:803
#: docs/master/billing.md:901 docs/master/cashier-paddle.md:763
#, no-wrap
msgid "<a name=\"cancelling-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1020 docs/8.x/cashier-paddle.md:803
#: docs/master/billing.md:901 docs/master/cashier-paddle.md:763
#, no-wrap
msgid "Cancelling Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1023 docs/8.x/cashier-paddle.md:806
#: docs/master/billing.md:904 docs/master/cashier-paddle.md:766
msgid "To cancel a subscription, call the `cancel` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1025 docs/8.x/cashier-paddle.md:808
#: docs/master/billing.md:906 docs/master/cashier-paddle.md:768
#, no-wrap
msgid "    $user->subscription('default')->cancel();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1027 docs/master/billing.md:908
msgid "When a subscription is cancelled, Cashier will automatically set the `ends_at` column in your `subscriptions` database table. This column is used to know when the `subscribed` method should begin returning `false`."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1029 docs/master/billing.md:910
msgid "For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the `subscribed` method will continue to return `true` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1031 docs/8.x/cashier-paddle.md:812
#: docs/master/billing.md:912 docs/master/cashier-paddle.md:772
msgid "You may determine if a user has cancelled their subscription but are still on their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1037 docs/master/billing.md:918
msgid "If you wish to cancel a subscription immediately, call the `cancelNow` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1039 docs/8.x/cashier-paddle.md:820
#: docs/master/billing.md:920 docs/master/cashier-paddle.md:780
#, no-wrap
msgid "    $user->subscription('default')->cancelNow();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1041
msgid "If you wish to cancel a subscription immediately and invoice any remaining un-invoiced metered usage or new / pending proration invoice items, call the `cancelNowAndInvoice` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1043
#, no-wrap
msgid "    $user->subscription('default')->cancelNowAndInvoice();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1045 docs/master/billing.md:922
#, no-wrap
msgid "<a name=\"resuming-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1045 docs/master/billing.md:922
#, no-wrap
msgid "Resuming Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1048 docs/master/billing.md:925
msgid "If a customer has cancelled their subscription and you wish to resume it, you may invoke the `resume` method on the subscription. The customer must still be within their \"grace period\" in order to resume a subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1050 docs/master/billing.md:927
#, no-wrap
msgid "    $user->subscription('default')->resume();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1052 docs/master/billing.md:929
msgid "If the customer cancels a subscription and then resumes that subscription before the subscription has fully expired the customer will not be billed immediately. Instead, their subscription will be re-activated and they will be billed on the original billing cycle."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1054 docs/8.x/cashier-paddle.md:824
#: docs/master/billing.md:931 docs/master/cashier-paddle.md:784
#, no-wrap
msgid "<a name=\"subscription-trials\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1054 docs/8.x/cashier-paddle.md:824
#: docs/master/billing.md:931 docs/master/cashier-paddle.md:784
#, no-wrap
msgid "Subscription Trials"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1057 docs/8.x/cashier-paddle.md:827
#: docs/master/billing.md:934 docs/master/cashier-paddle.md:787
#, no-wrap
msgid "<a name=\"with-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1057 docs/8.x/cashier-paddle.md:827
#: docs/master/billing.md:934 docs/master/cashier-paddle.md:787
#, no-wrap
msgid "With Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1060 docs/master/billing.md:937
msgid "If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the `trialDays` method when creating your subscriptions:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1067 docs/master/billing.md:944
#, no-wrap
msgid "    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', 'price_monthly')\n"
"                    ->trialDays(10)\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1072 docs/master/billing.md:949
msgid "This method will set the trial period ending date on the subscription record within the database and instruct Stripe to not begin billing the customer until after this date. When using the `trialDays` method, Cashier will overwrite any default trial period configured for the plan in Stripe."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1074 docs/8.x/cashier-paddle.md:847
#: docs/master/billing.md:951 docs/master/cashier-paddle.md:807
#, no-wrap
msgid "> {note} If the customer's subscription is not cancelled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1076 docs/master/billing.md:953
msgid "The `trialUntil` method allows you to provide a `DateTime` instance that specifies when the trial period should end:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1078 docs/master/billing.md:955
#, no-wrap
msgid "    use Carbon\\Carbon;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1082 docs/master/billing.md:959
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')\n"
"                ->trialUntil(Carbon::now()->addDays(10))\n"
"                ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1084 docs/master/billing.md:961
msgid "You may determine if a user is within their trial period using either the `onTrial` method of the user instance or the `onTrial` method of the subscription instance. The two examples below are equivalent:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1088 docs/8.x/cashier-paddle.md:853
#: docs/master/billing.md:965 docs/master/cashier-paddle.md:813
#, no-wrap
msgid "    if ($user->onTrial('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1094
msgid "You may use the `endTrial` method to immediately end a subscription trial:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1096
#, no-wrap
msgid "    $user->subscription('default')->endTrial();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1098 docs/master/billing.md:971
#, no-wrap
msgid "<a name=\"defining-trial-days-in-stripe-cashier\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1098 docs/master/billing.md:971
#, no-wrap
msgid "Defining Trial Days In Stripe / Cashier"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1101 docs/master/billing.md:974
msgid "You may choose to define how many trial days your plan's receive in the Stripe dashboard or always pass them explicitly using Cashier. If you choose to define your plan's trial days in Stripe you should be aware that new subscriptions, including new subscriptions for a customer that had a subscription in the past, will always receive a trial period unless you explicitly call the `trialDays(0)` method."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1103 docs/8.x/cashier-paddle.md:864
#: docs/master/billing.md:976 docs/master/cashier-paddle.md:824
#, no-wrap
msgid "<a name=\"without-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1103 docs/8.x/cashier-paddle.md:864
#: docs/master/billing.md:976 docs/master/cashier-paddle.md:824
#, no-wrap
msgid "Without Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1106 docs/master/billing.md:979
msgid "If you would like to offer trial periods without collecting the user's payment method information up front, you may set the `trial_ends_at` column on the user record to your desired trial ending date. This is typically done during user registration:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1113 docs/master/billing.md:986
#, no-wrap
msgid "    $user = User::create([\n"
"        // ...\n"
"        'trial_ends_at' => now()->addDays(10),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1115 docs/master/billing.md:988
#, no-wrap
msgid "> {note} Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators##date-casting) for the `trial_ends_at` attribute within your billable model's class definition.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1117 docs/master/billing.md:990
msgid "Cashier refers to this type of trial as a \"generic trial\", since it is not attached to any existing subscription. The `onTrial` method on the billable model instance will return `true` if the current date is not past the value of `trial_ends_at`:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1121 docs/8.x/cashier-paddle.md:883
#: docs/master/billing.md:994 docs/master/cashier-paddle.md:843
#, no-wrap
msgid "    if ($user->onTrial()) {\n"
"        // User is within their trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1123 docs/8.x/cashier-paddle.md:885
#: docs/master/billing.md:996 docs/master/cashier-paddle.md:845
msgid "Once you are ready to create an actual subscription for the user, you may use the `newSubscription` method as usual:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1127 docs/master/billing.md:1000
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1129 docs/8.x/cashier-paddle.md:897
#: docs/master/billing.md:1002 docs/master/cashier-paddle.md:857
msgid "To retrieve the user's trial ending date, you may use the `trialEndsAt` method. This method will return a Carbon date instance if a user is on a trial or `null` if they aren't. You may also pass an optional subscription name parameter if you would like to get the trial ending date for a specific subscription other than the default one:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1133 docs/8.x/cashier-paddle.md:901
#: docs/master/billing.md:1006 docs/master/cashier-paddle.md:861
#, no-wrap
msgid "    if ($user->onTrial()) {\n"
"        $trialEndsAt = $user->trialEndsAt('main');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1135 docs/master/billing.md:1008
msgid "You may also use the `onGenericTrial` method if you wish to know specifically that the user is within their \"generic\" trial period and has not yet created an actual subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1139 docs/8.x/cashier-paddle.md:907
#: docs/master/billing.md:1012 docs/master/cashier-paddle.md:867
#, no-wrap
msgid "    if ($user->onGenericTrial()) {\n"
"        // User is within their \"generic\" trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1141 docs/master/billing.md:1014
#, no-wrap
msgid "<a name=\"extending-trials\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1141 docs/master/billing.md:1014
#, no-wrap
msgid "Extending Trials"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1144 docs/master/billing.md:1017
msgid "The `extendTrial` method allows you to extend the trial period of a subscription after the subscription has been created. If the trial has already expired and the customer is already being billed for the subscription, you can still offer them an extended trial. The time spent within the trial period will be deducted from the customer's next invoice:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1148 docs/master/billing.md:1021
#, no-wrap
msgid "    $subscription = User::find(1)->subscription('default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1153 docs/master/billing.md:1026
#, no-wrap
msgid "    // End the trial 7 days from now...\n"
"    $subscription->extendTrial(\n"
"        now()->addDays(7)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1158 docs/master/billing.md:1031
#, no-wrap
msgid "    // Add an additional 5 days to the trial...\n"
"    $subscription->extendTrial(\n"
"        $subscription->trial_ends_at->addDays(5)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1160 docs/master/billing.md:1033
#, no-wrap
msgid "<a name=\"handling-stripe-webhooks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1160 docs/master/billing.md:1033
#, no-wrap
msgid "Handling Stripe Webhooks"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1163 docs/master/billing.md:1036
#, no-wrap
msgid "> {tip} You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to help test webhooks during local development.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1165 docs/master/billing.md:1038
msgid "Stripe can notify your application of a variety of events via webhooks. By default, a route that points to Cashier's webhook controller is automatically registered by the Cashier service provider. This controller will handle all incoming webhook requests."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1167 docs/master/billing.md:1040
msgid "By default, the Cashier webhook controller will automatically handle cancelling subscriptions that have too many failed charges (as defined by your Stripe settings), customer updates, customer deletions, subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Stripe webhook event you like."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1169 docs/master/billing.md:1042
msgid "To ensure your application can handle Stripe webhooks, be sure to configure the webhook URL in the Stripe control panel. By default, Cashier's webhook controller responds to the `/stripe/webhook` URL path. The full list of all webhooks you should enable in the Stripe control panel are:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1176 docs/master/billing.md:1049
msgid "- `customer.subscription.created` - `customer.subscription.updated` - `customer.subscription.deleted` - `customer.updated` - `customer.deleted` - `invoice.payment_action_required`"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1178 docs/master/billing.md:1051
#, no-wrap
msgid "> {note} Make sure you protect incoming Stripe webhook requests with Cashier's included [webhook signature verification](/docs/{{version}}/billing#verifying-webhook-signatures) middleware.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1180 docs/8.x/cashier-paddle.md:928
#: docs/master/billing.md:1053 docs/master/cashier-paddle.md:888
#, no-wrap
msgid "<a name=\"webhooks-csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1180 docs/8.x/cashier-paddle.md:928
#: docs/master/billing.md:1053 docs/master/cashier-paddle.md:888
#, no-wrap
msgid "Webhooks & CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1183 docs/master/billing.md:1056
msgid "Since Stripe webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), be sure to list the URI as an exception in your application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1187 docs/master/billing.md:1060
#, no-wrap
msgid "    protected $except = [\n"
"        'stripe/*',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1189 docs/8.x/cashier-paddle.md:937
#: docs/master/billing.md:1062 docs/master/cashier-paddle.md:897
#, no-wrap
msgid "<a name=\"defining-webhook-event-handlers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1189 docs/8.x/cashier-paddle.md:937
#: docs/master/billing.md:1062 docs/master/cashier-paddle.md:897
#, no-wrap
msgid "Defining Webhook Event Handlers"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1192 docs/master/billing.md:1065
msgid "Cashier automatically handles subscription cancellations for failed charges and other common Stripe webhook events. However, if you have additional webhook events you would like to handle, you may do so by extending the Cashier webhook controller."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1194 docs/master/billing.md:1067
msgid "Your controller's method names should correspond to Cashier's controller conventions. Specifically, methods should be prefixed with `handle` and the \"camel case\" name of the webhook you wish to handle. For example, if you wish to handle the `invoice.payment_succeeded` webhook, you should add a `handleInvoicePaymentSucceeded` method to the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1200 docs/master/billing.md:1073
#, no-wrap
msgid "    use Laravel\\Cashier\\Http\\Controllers\\WebhookController as CashierController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1214 docs/master/billing.md:1087
#, no-wrap
msgid "    class WebhookController extends CashierController\n"
"    {\n"
"        /**\n"
"         * Handle invoice payment succeeded.\n"
"         *\n"
"         * @param  array  $payload\n"
"         * @return \\Symfony\\Component\\HttpFoundation\\Response\n"
"         */\n"
"        public function handleInvoicePaymentSucceeded($payload)\n"
"        {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1216 docs/8.x/cashier-paddle.md:964
#: docs/master/billing.md:1089 docs/master/cashier-paddle.md:924
msgid "Next, define a route to your Cashier webhook controller within your application's `routes/web.php` file. This will overwrite the default route registered by Cashier's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1218 docs/8.x/cashier-paddle.md:966
#: docs/master/billing.md:1091 docs/master/cashier-paddle.md:926
#, no-wrap
msgid "    use App\\Http\\Controllers\\WebhookController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1223 docs/master/billing.md:1096
#, no-wrap
msgid "    Route::post(\n"
"        '/stripe/webhook',\n"
"        [WebhookController::class, 'handleWebhook']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1225 docs/master/billing.md:1098
#, no-wrap
msgid "> {tip} Cashier emits a `Laravel\\Cashier\\Events\\WebhookReceived` event when a webhook is received and a `Laravel\\Cashier\\Events\\WebhookHandled` event when a webhook was handled by Cashier. Both events contain the full payload of the Stripe webhook.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1227 docs/8.x/cashier-paddle.md:988
#: docs/master/billing.md:1100 docs/master/cashier-paddle.md:948
#, no-wrap
msgid "<a name=\"verifying-webhook-signatures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1227 docs/8.x/cashier-paddle.md:988
#: docs/master/billing.md:1100 docs/master/cashier-paddle.md:948
#, no-wrap
msgid "Verifying Webhook Signatures"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1230 docs/master/billing.md:1103
msgid "To secure your webhooks, you may use [Stripe's webhook signatures](https://stripe.com/docs/webhooks/signatures). For convenience, Cashier automatically includes a middleware which validates that the incoming Stripe webhook request is valid."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1232 docs/master/billing.md:1105
msgid "To enable webhook verification, ensure that the `STRIPE_WEBHOOK_SECRET` environment variable is set in your application's `.env` file. The webhook `secret` may be retrieved from your Stripe account dashboard."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1234 docs/8.x/cashier-paddle.md:995
#: docs/master/billing.md:1107 docs/master/cashier-paddle.md:955
#, no-wrap
msgid "<a name=\"single-charges\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1234 docs/8.x/cashier-paddle.md:995
#: docs/master/billing.md:1107 docs/master/cashier-paddle.md:955
#, no-wrap
msgid "Single Charges"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1237 docs/8.x/cashier-paddle.md:998
#: docs/master/billing.md:1110 docs/master/cashier-paddle.md:958
#, no-wrap
msgid "<a name=\"simple-charge\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1237 docs/8.x/cashier-paddle.md:998
#: docs/master/billing.md:1110 docs/master/cashier-paddle.md:958
#, no-wrap
msgid "Simple Charge"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1240 docs/master/billing.md:1113
#, no-wrap
msgid "> {note} The `charge` method accepts the amount you would like to charge in the lowest denominator of the currency used by your application. For example, when using United States Dollars, amounts should be specified in pennies.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1242 docs/master/billing.md:1115
msgid "If you would like to make a one-time charge against a customer, you may use the `charge` method on a billable model instance. You will need to [provide a payment method identifier](#payment-methods-for-single-charges) as the second argument to the `charge` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1249 docs/master/billing.md:1122
#, no-wrap
msgid "    Route::post('/purchase', function (Request $request) {\n"
"        $stripeCharge = $request->user()->charge(\n"
"            100, $request->paymentMethodId\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1254 docs/master/billing.md:1127
msgid "The `charge` method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Stripe charge creation. More information regarding the options available to you when creating charges may be found in the [Stripe documentation](https://stripe.com/docs/api/charges/create):"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1258 docs/master/billing.md:1131
#, no-wrap
msgid "    $user->charge(100, $paymentMethod, [\n"
"        'custom_option' => $value,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1260 docs/master/billing.md:1133
msgid "You may also use the `charge` method without an underlying customer or user. To accomplish this, invoke the `charge` method on a new instance of your application's billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1264 docs/master/billing.md:1137
#, no-wrap
msgid "    $stripeCharge = (new User)->charge(100, $paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1266 docs/master/billing.md:1139
msgid "The `charge` method will throw an exception if the charge fails. If the charge is successful, an instance of `Laravel\\Cashier\\Payment` will be returned from the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1272 docs/master/billing.md:1145
#, no-wrap
msgid "    try {\n"
"        $payment = $user->charge(100, $paymentMethod);\n"
"    } catch (Exception $e) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1274 docs/master/billing.md:1147
#, no-wrap
msgid "<a name=\"charge-with-invoice\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1274 docs/master/billing.md:1147
#, no-wrap
msgid "Charge With Invoice"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1277 docs/master/billing.md:1150
msgid "Sometimes you may need to make a one-time charge and offer a PDF receipt to your customer. The `invoiceFor` method lets you do just that. For example, let's invoice a customer $5.00 for a \"Maintenance Fee\":"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1279 docs/master/billing.md:1152
#, no-wrap
msgid "    $user->invoiceFor('One Time Fee', 500);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1281 docs/master/billing.md:1154
msgid "The invoice will be charged immediately against the user's default payment method. The `invoiceFor` method also accepts an array as its third argument. This array contains the billing options for the invoice item. The fourth argument accepted by the method is also an array which should contain the billing options for the invoice itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1287 docs/master/billing.md:1160
#, no-wrap
msgid "    $user->invoiceFor('Stickers', 500, [\n"
"        'quantity' => 50,\n"
"    ], [\n"
"        'default_tax_rates' => ['tax-rate-id'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1289 docs/master/billing.md:1162
#, no-wrap
msgid "> {note} The `invoiceFor` method will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1291 docs/master/billing.md:1164
#, no-wrap
msgid "<a name=\"refunding-charges\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1291 docs/master/billing.md:1164
#, no-wrap
msgid "Refunding Charges"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1294 docs/master/billing.md:1167
msgid "If you need to refund a Stripe charge, you may use the `refund` method. This method accepts the Stripe [payment intent ID](#payment-methods-for-single-charges) as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1296 docs/master/billing.md:1169
#, no-wrap
msgid "    $payment = $user->charge(100, $paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1298 docs/master/billing.md:1171
#, no-wrap
msgid "    $user->refund($payment->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1300 docs/master/billing.md:1173
#, no-wrap
msgid "<a name=\"invoices\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1300 docs/master/billing.md:1173
#, no-wrap
msgid "Invoices"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1303 docs/master/billing.md:1176
#, no-wrap
msgid "<a name=\"retrieving-invoices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1303 docs/master/billing.md:1176
#, no-wrap
msgid "Retrieving Invoices"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1306 docs/master/billing.md:1179
msgid "You may easily retrieve an array of a billable model's invoices using the `invoices` method. The `invoices` method returns a collection of `Laravel\\Cashier\\Invoice` instances:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1308 docs/master/billing.md:1181
#, no-wrap
msgid "    $invoices = $user->invoices();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1310 docs/master/billing.md:1183
msgid "If you would like to include pending invoices in the results, you may use the `invoicesIncludingPending` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1312 docs/master/billing.md:1185
#, no-wrap
msgid "    $invoices = $user->invoicesIncludingPending();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1314 docs/master/billing.md:1187
msgid "You may use the `findInvoice` method to retrieve a specific invoice by its ID:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1316 docs/master/billing.md:1189
#, no-wrap
msgid "    $invoice = $user->findInvoice($invoiceId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1318 docs/master/billing.md:1191
#, no-wrap
msgid "<a name=\"displaying-invoice-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1318 docs/master/billing.md:1191
#, no-wrap
msgid "Displaying Invoice Information"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1321 docs/master/billing.md:1194
msgid "When listing the invoices for the customer, you may use the invoice's methods to display the relevant invoice information. For example, you may wish to list every invoice in a table, allowing the user to easily download any of them:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1331 docs/master/billing.md:1204
#, no-wrap
msgid "    <table>\n"
"        @foreach ($invoices as $invoice)\n"
"            <tr>\n"
"                <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n"
"                <td>{{ $invoice->total() }}</td>\n"
"                <td><a href=\"/user/invoice/{{ $invoice->id }}\">Download</a></td>\n"
"            </tr>\n"
"        @endforeach\n"
"    </table>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1333 docs/master/billing.md:1206
#, no-wrap
msgid "<a name=\"generating-invoice-pdfs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1333 docs/master/billing.md:1206
#, no-wrap
msgid "Generating Invoice PDFs"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1336 docs/master/billing.md:1209
msgid "From within a route or controller, you may use the `downloadInvoice` method to generate a PDF download of a given invoice. This method will automatically generate the proper HTTP response needed to download the invoice:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1345 docs/master/billing.md:1218
#, no-wrap
msgid "    Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"        return $request->user()->downloadInvoice($invoiceId, [\n"
"            'vendor' => 'Your Company',\n"
"            'product' => 'Your Product',\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1347 docs/master/billing.md:1220
msgid "The `downloadInvoice` method also allows for a custom filename via its third argument. This filename will automatically be suffixed with `.pdf` for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1352 docs/master/billing.md:1225
#, no-wrap
msgid "    return $request->user()->downloadInvoice($invoiceId, [\n"
"        'vendor' => 'Your Company',\n"
"        'product' => 'Your Product',\n"
"    ], 'my-invoice');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1354 docs/master/billing.md:1227
#, no-wrap
msgid "<a name=\"checkout\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1354 docs/master/billing.md:1227
#, no-wrap
msgid "Checkout"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1357 docs/master/billing.md:1230
msgid "Cashier Stripe also provides support for [Stripe Checkout](https://stripe.com/en-be/payments/checkout). Stripe Checkout takes the pain out of implementing custom pages to accept payments by providing a pre-built, hosted payment page."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1359 docs/master/billing.md:1232
msgid "The following documentation contains information on how to get started using Stripe Checkout with Cashier. To learn more about Stripe Checkout, you should also consider reviewing [Stripe's own documentation on Checkout](https://stripe.com/docs/payments/checkout)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1361 docs/master/billing.md:1234
#, no-wrap
msgid "<a name=\"product-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1361 docs/master/billing.md:1234
#, no-wrap
msgid "Product Checkouts"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1364 docs/master/billing.md:1237
msgid "You may perform a checkout for an existing product that has been created within your Stripe dashboard using the `checkout` method on a billable model. The `checkout` method will initiate a new Stripe Checkout session. By default, you're required to pass a Stripe Price ID:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1366 docs/master/billing.md:1239
#, no-wrap
msgid "    $checkout = $user->checkout('price_12345');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1372 docs/master/billing.md:1245
msgid "If needed, you may also specify a product quantity:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1374 docs/master/billing.md:1247
#, no-wrap
msgid "    $checkout = $user->checkout('price_12345', 15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1376 docs/8.x/billing.md:1405 docs/8.x/billing.md:1441
#: docs/master/billing.md:1249 docs/master/billing.md:1278
#: docs/master/billing.md:1314
msgid "Once you have passed the Checkout session instance to your view, a button that directs the user to Stripe Checkout may be rendered using the `button` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1378 docs/8.x/billing.md:1407
#: docs/master/billing.md:1251 docs/master/billing.md:1280
#, no-wrap
msgid "    {{ $checkout->button('Buy') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1380 docs/master/billing.md:1253
msgid "When a customer clicks this button they will be redirected to Stripe's Checkout page. By default, when a user successfully completes a purchase or cancels a purchase they will be redirected to your `home` route location, but you may specify custom callback URLs using the `success_url` and `cancel_url` options:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1385 docs/master/billing.md:1258
#, no-wrap
msgid "    $checkout = $user->checkout('price_12345', 1, [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1387 docs/master/billing.md:1260
#, no-wrap
msgid "<a name=\"checkout-promotion-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1387 docs/master/billing.md:1260
#, no-wrap
msgid "Promotion Codes"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1390 docs/master/billing.md:1263
msgid "By default, Stripe Checkout does not allow [user redeemable promotion codes](https://stripe.com/docs/billing/subscriptions/discounts/codes). Luckily, there's an easy way to enable these for your Checkout page. To do so, you may invoke the `allowPromotionCodes` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1392 docs/master/billing.md:1265
#, no-wrap
msgid "    $checkout = $user->allowPromotionCodes()->checkout('price_12345');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1394 docs/master/billing.md:1267
#, no-wrap
msgid "<a name=\"single-charge-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1394 docs/master/billing.md:1267
#, no-wrap
msgid "Single Charge Checkouts"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1397 docs/master/billing.md:1270
msgid "You can also perform a simple charge for an ad-hoc product that has not been created in your Stripe dashboard. To do so you may use the `checkoutCharge` method on a billable model and pass it a chargeable amount, a product name, and an optional quantity:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1399 docs/master/billing.md:1272
#, no-wrap
msgid "    $checkout = $user->checkoutCharge(1200, 'T-Shirt', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1409 docs/8.x/billing.md:1445
#: docs/master/billing.md:1282 docs/master/billing.md:1318
msgid "When a customer clicks this button they will be redirected to Stripe's Checkout page."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1411 docs/master/billing.md:1284
#, no-wrap
msgid "> {note} When using the `checkoutCharge` method, Stripe will always create a new product and price in your Stripe dashboard. Therefore, we recommend that you create the products up front in your Stripe dashboard and use of the `checkout` method instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1413 docs/master/billing.md:1286
#, no-wrap
msgid "<a name=\"subscription-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1413 docs/master/billing.md:1286
#, no-wrap
msgid "Subscription Checkouts"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1416 docs/master/billing.md:1289
#, no-wrap
msgid "> {note} Using Stripe Checkout for subscriptions requires you to enable the `customer.subscription.created` webhook in your Stripe dashboard. This webhook will create the subscription record in your database and store all of the relevant subscription items.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1418 docs/master/billing.md:1291
msgid "You may also use Stripe Checkout to initiate subscriptions. After defining your subscription with Cashier's subscription builder methods, you may call the `checkout `method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1422 docs/master/billing.md:1295
#, no-wrap
msgid "    $checkout = Auth::user()\n"
"            ->newSubscription('default', 'price_xxx')\n"
"            ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1428 docs/master/billing.md:1301
msgid "Just as with product checkouts, you may customize the success and cancellation URLs:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1433 docs/master/billing.md:1306
#, no-wrap
msgid "    $checkout = Auth::user()->newSubscription('default', 'price_xxx')->checkout([\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1435 docs/master/billing.md:1308
msgid "Of course, you can also enable promotion codes for subscription checkouts:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1439 docs/master/billing.md:1312
#, no-wrap
msgid "    $checkout = Auth::user()->newSubscription('default', 'price_xxx')\n"
"        ->allowPromotionCodes()\n"
"        ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1443 docs/master/billing.md:1316
#, no-wrap
msgid "    {{ $checkout->button('Subscribe') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1447 docs/master/billing.md:1320
#, no-wrap
msgid "> {note} Unfortunately Stripe Checkout does not support all subscription billing options when starting subscriptions. Using the `anchorBillingCycleOn` method on the subscription builder, setting proration behavior, or setting payment behavior will not have any effect during Stripe Checkout sessions. Please consult [the Stripe Checkout Session API documentation](https://stripe.com/docs/api/checkout/sessions/create) to review which parameters are available.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1449 docs/master/billing.md:1322
#, no-wrap
msgid "<a name=\"stripe-checkout-trial-periods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1449 docs/master/billing.md:1322
#, no-wrap
msgid "Stripe Checkout & Trial Periods"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1452 docs/master/billing.md:1325
msgid "Of course, you can define a trial period when building a subscription that will be completed using Stripe Checkout:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1456 docs/master/billing.md:1329
#, no-wrap
msgid "    $checkout = Auth::user()->newSubscription('default', 'price_xxx')\n"
"        ->trialDays(3)\n"
"        ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1458 docs/master/billing.md:1331
msgid "However, the trial period must be at least 48 hours, which is the minimum amount of trial time supported by Stripe Checkout."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1460 docs/master/billing.md:1333
#, no-wrap
msgid "<a name=\"stripe-checkout-subscriptions-and-webhooks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1460 docs/master/billing.md:1333
#, no-wrap
msgid "Subscriptions & Webhooks"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1463 docs/master/billing.md:1336
msgid "Remember, Stripe and Cashier update subscription statuses via webhooks, so there's a possibility a subscription might not yet be active when the customer returns to the application after entering their payment information. To handle this scenario, you may wish to display a message informing the user that their payment or subscription is pending."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1465 docs/master/billing.md:1338
#, no-wrap
msgid "<a name=\"styling-the-checkout-button\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1465 docs/master/billing.md:1338
#, no-wrap
msgid "Styling The Checkout Button"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1468 docs/master/billing.md:1341
msgid "When rendering the checkout button, you may customize the button's styling using the `class` and `style` options. These options should be passed within an associative array as the second argument to the `button` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1470 docs/master/billing.md:1343
#, no-wrap
msgid "    {{ $checkout->button('Buy', ['class' => 'p-4 bg-blue-500 text-white']) }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1472 docs/8.x/cashier-paddle.md:1131
#: docs/master/billing.md:1345 docs/master/cashier-paddle.md:1091
#, no-wrap
msgid "<a name=\"handling-failed-payments\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1472 docs/8.x/cashier-paddle.md:1131
#: docs/master/billing.md:1345 docs/master/cashier-paddle.md:1091
#, no-wrap
msgid "Handling Failed Payments"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1475 docs/master/billing.md:1348
msgid "Sometimes, payments for subscriptions or single charges can fail. When this happens, Cashier will throw an `Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you that this happened. After catching this exception, you have two options on how to proceed."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1477 docs/master/billing.md:1350
msgid "First, you could redirect your customer to the dedicated payment confirmation page which is included with Cashier. This page already has an associated named route that is registered via Cashier's service provider. So, you may catch the `IncompletePayment` exception and redirect the user to the payment confirmation page:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1479 docs/master/billing.md:1352
#, no-wrap
msgid "    use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1489 docs/master/billing.md:1362
#, no-wrap
msgid "    try {\n"
"        $subscription = $user->newSubscription('default', $planId)\n"
"                                ->create($paymentMethod);\n"
"    } catch (IncompletePayment $exception) {\n"
"        return redirect()->route(\n"
"            'cashier.payment',\n"
"            [$exception->payment->id, 'redirect' => route('home')]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1491 docs/master/billing.md:1364
msgid "On the payment confirmation page, the customer will be prompted to enter their credit card information again and perform any additional actions required by Stripe, such as \"3D Secure\" confirmation. After confirming their payment, the user will be redirected to the URL provided by the `redirect` parameter specified above. Upon redirection, `message` (string) and `success` (integer) query string variables will be added to the URL."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1493 docs/master/billing.md:1366
msgid "Alternatively, you could allow Stripe to handle the payment confirmation for you. In this case, instead of redirecting to the payment confirmation page, you may [setup Stripe's automatic billing emails](https://dashboard.stripe.com/account/billing/automatic) in your Stripe dashboard. However, if an `IncompletePayment` exception is caught, you should still inform the user they will receive an email with further payment confirmation instructions."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1495 docs/master/billing.md:1368
msgid "Payment exceptions may be thrown for the following methods: `charge`, `invoiceFor`, and `invoice` on models using the `Billable` trait. When interacting with subscriptions, the `create` method on the `SubscriptionBuilder`, and the `incrementAndInvoice` and `swapAndInvoice` methods on the `Subscription` model may throw incomplete payment exceptions."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1497 docs/master/billing.md:1370
msgid "Determining if an existing subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1507 docs/master/billing.md:1380
msgid "There are currently two types of payment exceptions which extend `IncompletePayment`. You can catch these separately if needed so that you can customize the user experience:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1512 docs/master/billing.md:1385
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `Laravel\\Cashier\\Exceptions\\PaymentActionRequired`: this exception indicates that Stripe requires extra verification in order to confirm and process a payment.\n"
"- `Laravel\\Cashier\\Exceptions\\PaymentFailure`: this exception indicates that a payment failed for various other reasons, such as being out of available funds.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1514 docs/master/billing.md:1387
#, no-wrap
msgid "<a name=\"strong-customer-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1514 docs/master/billing.md:1387
#, no-wrap
msgid "Strong Customer Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1517 docs/master/billing.md:1390
msgid "If your business is based in Europe you will need to abide by the EU's Strong Customer Authentication (SCA) regulations. These regulations were imposedÂ in September 2019 by the European Union to prevent payment fraud. Luckily, Stripe and Cashier are prepared for building SCA compliant applications."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1519 docs/master/billing.md:1392
#, no-wrap
msgid "> {note} Before getting started, review [Stripe's guide on PSD2 and SCA](https://stripe.com/guides/strong-customer-authentication) as well as their [documentation on the new SCA APIs](https://stripe.com/docs/strong-customer-authentication).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1521 docs/master/billing.md:1394
#, no-wrap
msgid "<a name=\"payments-requiring-additional-confirmation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1521 docs/master/billing.md:1394
#, no-wrap
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1524 docs/master/billing.md:1397
msgid "SCA regulations often require extra verification in order to confirm and process a payment. When this happens, Cashier will throw a `Laravel\\Cashier\\Exceptions\\PaymentActionRequired` exception that informs you that extra verification is needed. More information on how to handle these exceptions be found can be found in the documentation on [handling failed payments](#handling-failed-payments)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1526 docs/master/billing.md:1399
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-state\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/billing.md:1526 docs/master/billing.md:1399
#, no-wrap
msgid "Incomplete and Past Due State"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1529 docs/master/billing.md:1402
msgid "When a payment needs additional confirmation, the subscription will remain in an `incomplete` or `past_due` state as indicated by its `stripe_status` database column. Cashier will automatically activate the customer's subscription as soon as payment confirmation is complete and your application is notified by Stripe via webhook of its completion."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1531 docs/master/billing.md:1404
msgid "For more information on `incomplete` and `past_due` states, please refer to [our additional documentation on these states](#incomplete-and-past-due-status)."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1533 docs/master/billing.md:1406
#, no-wrap
msgid "<a name=\"off-session-payment-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/billing.md:1533 docs/master/billing.md:1406
#, no-wrap
msgid "Off-Session Payment Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1536 docs/master/billing.md:1409
msgid "Since SCA regulations require customers to occasionally verify their payment details even while their subscription is active, Cashier can send a notification to the customer when off-session payment confirmation is required. For example, this may occur when a subscription is renewing. Cashier's payment notification can be enabled by setting the `CASHIER_PAYMENT_NOTIFICATION` environment variable to a notification class. By default, this notification is disabled. Of course, Cashier includes a notification class you may use for this purpose, but you are free to provide your own notification class if desired:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1538 docs/master/billing.md:1411
#, no-wrap
msgid "    CASHIER_PAYMENT_NOTIFICATION=Laravel\\Cashier\\Notifications\\ConfirmPayment\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1540 docs/master/billing.md:1413
msgid "To ensure that off-session payment confirmation notifications are delivered, verify that [Stripe webhooks are configured](#handling-stripe-webhooks) for your application and the `invoice.payment_action_required` webhook is enabled in your Stripe dashboard. In addition, your `Billable` model should also use Laravel's `Illuminate\\Notifications\\Notifiable` trait."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1542 docs/master/billing.md:1415
#, no-wrap
msgid "> {note} Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or \"off-session\". But, a customer will simply see a \"Payment Successful\" message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1544 docs/master/billing.md:1417
#, no-wrap
msgid "<a name=\"stripe-sdk\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/billing.md:1544 docs/master/billing.md:1417
#, no-wrap
msgid "Stripe SDK"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1547 docs/master/billing.md:1420
msgid "Many of Cashier's objects are wrappers around Stripe SDK objects. If you would like to interact with the Stripe objects directly, you may conveniently retrieve them using the `asStripe` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1549 docs/master/billing.md:1422
#, no-wrap
msgid "    $stripeSubscription = $subscription->asStripeSubscription();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1551 docs/master/billing.md:1424
#, no-wrap
msgid "    $stripeSubscription->application_fee_percent = 5;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1553 docs/master/billing.md:1426
#, no-wrap
msgid "    $stripeSubscription->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1555 docs/master/billing.md:1428
msgid "You may also use the `updateStripeSubscription` method to update a Stripe subscription directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1557 docs/master/billing.md:1430
#, no-wrap
msgid "    $subscription->updateStripeSubscription(['application_fee_percent' => 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1559 docs/8.x/cashier-paddle.md:1158
#: docs/8.x/http-client.md:216 docs/8.x/passport.md:1162
#: docs/8.x/sanctum.md:376 docs/8.x/upgrade.md:408 docs/master/billing.md:1432
#: docs/master/cashier-paddle.md:1118 docs/master/http-client.md:208
#: docs/master/passport.md:1160 docs/master/sanctum.md:376
#: docs/master/upgrade.md:408
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  billing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  cashier-paddle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/billing.md:1559 docs/8.x/cashier-paddle.md:1158
#: docs/8.x/http-client.md:216 docs/8.x/passport.md:1162
#: docs/8.x/sanctum.md:376 docs/8.x/upgrade.md:408 docs/master/billing.md:1432
#: docs/master/cashier-paddle.md:1118 docs/master/http-client.md:208
#: docs/master/passport.md:1160 docs/master/sanctum.md:376
#: docs/master/upgrade.md:408
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1562 docs/master/billing.md:1435
msgid "When testing an application that uses Cashier, you may mock the actual HTTP requests to the Stripe API; however, this requires you to partially re-implement Cashier's own behavior. Therefore, we recommend allowing your tests to hit the actual Stripe API. While this is slower, it provides more confidence that your application is working as expected and any slow tests may be placed within their own PHPUnit testing group."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1564 docs/master/billing.md:1437
msgid "When testing, remember that Cashier itself already has a great test suite, so you should only focus on testing the subscription and payment flow of your own application and not every underlying Cashier behavior."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1566 docs/master/billing.md:1439
msgid "To get started, add the **testing** version of your Stripe secret to your `phpunit.xml` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1568 docs/master/billing.md:1441
#, no-wrap
msgid "    <env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1570 docs/master/billing.md:1443
msgid "Now, whenever you interact with Cashier while testing, it will send actual API requests to your Stripe testing environment. For convenience, you should pre-fill your Stripe testing account with subscriptions / plans that you may use during testing."
msgstr ""

#. type: Plain text
#: docs/8.x/billing.md:1571 docs/master/billing.md:1444
#, no-wrap
msgid "> {tip} In order to test a variety of billing scenarios, such as credit card denials and failures, you may use the vast range of [testing card numbers and tokens](https://stripe.com/docs/testing) provided by Stripe.\n"
msgstr ""

#. type: Title #
#: docs/8.x/blade.md:1 docs/master/blade.md:1
#, no-wrap
msgid "Blade Templates"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Displaying Data](#displaying-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[HTML Entity Encoding](#html-entity-encoding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Blade & JavaScript Frameworks](#blade-and-javascript-frameworks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Blade Directives](#blade-directives)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[If Statements](#if-statements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Switch Statements](#switch-statements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Loops](#loops)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[The Loop Variable](#the-loop-variable)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Comments](#comments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Including Subviews](#including-subviews)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[The `@once` Directive](#the-once-directive)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Raw PHP](#raw-php)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/8.x/dusk.md:50 docs/master/blade.md:36
#: docs/master/dusk.md:50
msgid "[Components](#components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Rendering Components](#rendering-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Passing Data To Components](#passing-data-to-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Component Attributes](#component-attributes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37
msgid "[Reserved Keywords](#reserved-keywords)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Slots](#slots)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Inline Component Views](#inline-component-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Anonymous Components](#anonymous-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Dynamic Components](#dynamic-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Manually Registering Components](#manually-registering-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Building Layouts](#building-layouts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Layouts Using Components](#layouts-using-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Layouts Using Template Inheritance](#layouts-using-template-inheritance)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Forms](#forms)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[CSRF Field](#csrf-field)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Method Field](#method-field)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Validation Errors](#validation-errors)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Stacks](#stacks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Service Injection](#service-injection)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Extending Blade](#extending-blade)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/blade.md:37 docs/master/blade.md:36
msgid "[Custom If Statements](#custom-if-statements)"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:42 docs/master/blade.md:41
msgid "Blade is the simple, yet powerful templating engine that is included with Laravel. Unlike some PHP templating engines, Blade does not restrict you from using plain PHP code in your templates. In fact, all Blade templates are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade template files use the `.blade.php` file extension and are typically stored in the `resources/views` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:44 docs/master/blade.md:43
msgid "Blade views may be returned from routes or controller using the global `view` helper. Of course, as mentioned in the documentation on [views](/docs/{{version}}/views), data may be passed to the Blade view using the `view` helper's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:48 docs/master/blade.md:47
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'Finn']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:50 docs/master/blade.md:49
#, no-wrap
msgid "> {tip} Before digging deeper into Blade, make sure to read the Laravel [view documentation](/docs/{{version}}/views).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:52 docs/master/blade.md:51
#, no-wrap
msgid "<a name=\"displaying-data\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:52 docs/master/blade.md:51
#, no-wrap
msgid "Displaying Data"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:55 docs/master/blade.md:54
msgid "You may display data that is passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:59 docs/master/blade.md:58
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return view('welcome', ['name' => 'Samantha']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:61 docs/master/blade.md:60
msgid "You may display the contents of the `name` variable like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:63 docs/master/blade.md:62
#, no-wrap
msgid "    Hello, {{ $name }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:65 docs/master/blade.md:64
#, no-wrap
msgid "> {tip} Blade's `{{ }}` echo statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:67 docs/master/blade.md:66
msgid "You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function. In fact, you can put any PHP code you wish inside of a Blade echo statement:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:69 docs/master/blade.md:68
#, no-wrap
msgid "    The current UNIX timestamp is {{ time() }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:71 docs/master/blade.md:70
#, no-wrap
msgid "<a name=\"rendering-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:71 docs/master/blade.md:70
#, no-wrap
msgid "Rendering JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:74 docs/master/blade.md:73
msgid "Sometimes you may pass an array to your view with the intention of rendering it as JSON in order to initialize a JavaScript variable. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:78 docs/master/blade.md:77
#, no-wrap
msgid "    <script>\n"
"        var app = <?php echo json_encode($array); ?>;\n"
"    </script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:80 docs/master/blade.md:79
msgid "However, instead of manually calling `json_encode`, you may use the `@json` Blade directive. The `@json` directive accepts the same arguments as PHP's `json_encode` function. By default, the `@json` directive calls the `json_encode` function with the `JSON_HEX_TAG`, `JSON_HEX_APOS`, `JSON_HEX_AMP`, and `JSON_HEX_QUOT` flags:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:83 docs/master/blade.md:82
#, no-wrap
msgid "    <script>\n"
"        var app = @json($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:86 docs/master/blade.md:85
#, no-wrap
msgid "        var app = @json($array, JSON_PRETTY_PRINT);\n"
"    </script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:88 docs/master/blade.md:87
#, no-wrap
msgid "> {note} You should only use the `@json` directive to render existing variables as JSON. The Blade templating is based on regular expressions and attempts to pass a complex expression to the directive may cause unexpected failures.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:90 docs/master/blade.md:89
#, no-wrap
msgid "<a name=\"html-entity-encoding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:90 docs/master/blade.md:89
#, no-wrap
msgid "HTML Entity Encoding"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:93 docs/master/blade.md:92
msgid "By default, Blade (and the Laravel `e` helper) will double encode HTML entities. If you would like to disable double encoding, call the `Blade::withoutDoubleEncoding` method from the `boot` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:100 docs/8.x/blade.md:1253 docs/master/blade.md:99
#: docs/master/blade.md:1194
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Blade;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:113 docs/master/blade.md:112
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Blade::withoutDoubleEncoding();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:115 docs/master/blade.md:114
#, no-wrap
msgid "<a name=\"displaying-unescaped-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:115 docs/master/blade.md:114
#, no-wrap
msgid "Displaying Unescaped Data"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:118 docs/master/blade.md:117
msgid "By default, Blade `{{ }}` statements are automatically sent through PHP's `htmlspecialchars` function to prevent XSS attacks. If you do not want your data to be escaped, you may use the following syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:120 docs/master/blade.md:119
#, no-wrap
msgid "    Hello, {!! $name !!}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:122 docs/master/blade.md:121
#, no-wrap
msgid "> {note} Be very careful when echoing content that is supplied by users of your application. You should typically use the escaped, double curly brace syntax to prevent XSS attacks when displaying user supplied data.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:124 docs/master/blade.md:123
#, no-wrap
msgid "<a name=\"blade-and-javascript-frameworks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:124 docs/master/blade.md:123
#, no-wrap
msgid "Blade & JavaScript Frameworks"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:127 docs/master/blade.md:126
msgid "Since many JavaScript frameworks also use \"curly\" braces to indicate a given expression should be displayed in the browser, you may use the `@` symbol to inform the Blade rendering engine an expression should remain untouched. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:129 docs/master/blade.md:128
#, no-wrap
msgid "    <h1>Laravel</h1>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:131 docs/master/blade.md:130
#, no-wrap
msgid "    Hello, @{{ name }}.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:133 docs/master/blade.md:132
msgid "In this example, the `@` symbol will be removed by Blade; however, `{{ name }}` expression will remain untouched by the Blade engine, allowing it to be rendered by your JavaScript framework."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:135 docs/master/blade.md:134
msgid "The `@` symbol may also be used to escape Blade directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:138 docs/master/blade.md:137
#, no-wrap
msgid "    {{-- Blade template --}}\n"
"    @@json()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:141 docs/master/blade.md:140
#, no-wrap
msgid "    <!-- HTML output -->\n"
"    @json()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:143 docs/master/blade.md:142
#, no-wrap
msgid "<a name=\"the-at-verbatim-directive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:143 docs/master/blade.md:142
#, no-wrap
msgid "The `@verbatim` Directive"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:146 docs/master/blade.md:145
msgid "If you are displaying JavaScript variables in a large portion of your template, you may wrap the HTML in the `@verbatim` directive so that you do not have to prefix each Blade echo statement with an `@` symbol:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:152 docs/master/blade.md:151
#, no-wrap
msgid "    @verbatim\n"
"        <div class=\"container\">\n"
"            Hello, {{ name }}.\n"
"        </div>\n"
"    @endverbatim\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:154 docs/master/blade.md:153
#, no-wrap
msgid "<a name=\"blade-directives\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:154 docs/master/blade.md:153
#, no-wrap
msgid "Blade Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:157 docs/master/blade.md:156
msgid "In addition to template inheritance and displaying data, Blade also provides convenient shortcuts for common PHP control structures, such as conditional statements and loops. These shortcuts provide a very clean, terse way of working with PHP control structures while also remaining familiar to their PHP counterparts."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:159 docs/master/blade.md:158
#, no-wrap
msgid "<a name=\"if-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:159 docs/master/blade.md:158
#, no-wrap
msgid "If Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:162 docs/master/blade.md:161
msgid "You may construct `if` statements using the `@if`, `@elseif`, `@else`, and `@endif` directives. These directives function identically to their PHP counterparts:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:170 docs/master/blade.md:169
#, no-wrap
msgid "    @if (count($records) === 1)\n"
"        I have one record!\n"
"    @elseif (count($records) > 1)\n"
"        I have multiple records!\n"
"    @else\n"
"        I don't have any records!\n"
"    @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:172 docs/master/blade.md:171
msgid "For convenience, Blade also provides an `@unless` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:176 docs/master/blade.md:175
#, no-wrap
msgid "    @unless (Auth::check())\n"
"        You are not signed in.\n"
"    @endunless\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:178 docs/master/blade.md:177
msgid "In addition to the conditional directives already discussed, the `@isset` and `@empty` directives may be used as convenient shortcuts for their respective PHP functions:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:182 docs/master/blade.md:181
#, no-wrap
msgid "    @isset($records)\n"
"        // $records is defined and is not null...\n"
"    @endisset\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:186 docs/master/blade.md:185
#, no-wrap
msgid "    @empty($records)\n"
"        // $records is \"empty\"...\n"
"    @endempty\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:188 docs/master/blade.md:187
#, no-wrap
msgid "<a name=\"authentication-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:188 docs/master/blade.md:187
#, no-wrap
msgid "Authentication Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:191 docs/master/blade.md:190
msgid "The `@auth` and `@guest` directives may be used to quickly determine if the current user is [authenticated](/docs/{{version}}/authentication) or is a guest:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:195 docs/master/blade.md:194
#, no-wrap
msgid "    @auth\n"
"        // The user is authenticated...\n"
"    @endauth\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:199 docs/master/blade.md:198
#, no-wrap
msgid "    @guest\n"
"        // The user is not authenticated...\n"
"    @endguest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:201 docs/master/blade.md:200
msgid "If needed, you may specify the authentication guard that should be checked when using the `@auth` and `@guest` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:205 docs/master/blade.md:204
#, no-wrap
msgid "    @auth('admin')\n"
"        // The user is authenticated...\n"
"    @endauth\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:209 docs/master/blade.md:208
#, no-wrap
msgid "    @guest('admin')\n"
"        // The user is not authenticated...\n"
"    @endguest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:211 docs/master/blade.md:210
#, no-wrap
msgid "<a name=\"environment-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:211 docs/master/blade.md:210
#, no-wrap
msgid "Environment Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:214 docs/master/blade.md:213
msgid "You may check if the application is running in the production environment using the `@production` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:218 docs/master/blade.md:217
#, no-wrap
msgid "    @production\n"
"        // Production specific content...\n"
"    @endproduction\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:220 docs/master/blade.md:219
msgid "Or, you may determine if the application is running in a specific environment using the `@env` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:224 docs/master/blade.md:223
#, no-wrap
msgid "    @env('staging')\n"
"        // The application is running in \"staging\"...\n"
"    @endenv\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:228 docs/master/blade.md:227
#, no-wrap
msgid "    @env(['staging', 'production'])\n"
"        // The application is running in \"staging\" or \"production\"...\n"
"    @endenv\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:230 docs/master/blade.md:229
#, no-wrap
msgid "<a name=\"section-directives\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:230 docs/master/blade.md:229
#, no-wrap
msgid "Section Directives"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:233 docs/master/blade.md:232
msgid "You may determine if a template inheritance section has content using the `@hasSection` directive:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:234 docs/master/blade.md:233
#, no-wrap
msgid "@hasSection('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @yield('navigation')\n"
"    </div>\n\n"
"    <div class=\"clearfix\"></div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:245 docs/master/blade.md:244
msgid "You may use the `sectionMissing` directive to determine if a section does not have content:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:246 docs/master/blade.md:245
#, no-wrap
msgid "@sectionMissing('navigation')\n"
"    <div class=\"pull-right\">\n"
"        @include('default-navigation')\n"
"    </div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:255 docs/master/blade.md:254
#, no-wrap
msgid "<a name=\"switch-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:255 docs/master/blade.md:254
#, no-wrap
msgid "Switch Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:258 docs/master/blade.md:257
msgid "Switch statements can be constructed using the `@switch`, `@case`, `@break`, `@default` and `@endswitch` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:263 docs/master/blade.md:262
#, no-wrap
msgid "    @switch($i)\n"
"        @case(1)\n"
"            First case...\n"
"            @break\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:267 docs/master/blade.md:266
#, no-wrap
msgid "        @case(2)\n"
"            Second case...\n"
"            @break\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:271 docs/master/blade.md:270
#, no-wrap
msgid "        @default\n"
"            Default case...\n"
"    @endswitch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:273 docs/master/blade.md:272
#, no-wrap
msgid "<a name=\"loops\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:273 docs/master/blade.md:272
#, no-wrap
msgid "Loops"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:276 docs/master/blade.md:275
msgid "In addition to conditional statements, Blade provides simple directives for working with PHP's loop structures. Again, each of these directives functions identically to their PHP counterparts:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:280 docs/master/blade.md:279
#, no-wrap
msgid "    @for ($i = 0; $i < 10; $i++)\n"
"        The current value is {{ $i }}\n"
"    @endfor\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:284 docs/master/blade.md:283
#, no-wrap
msgid "    @foreach ($users as $user)\n"
"        <p>This is user {{ $user->id }}</p>\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:290 docs/master/blade.md:289
#, no-wrap
msgid "    @forelse ($users as $user)\n"
"        <li>{{ $user->name }}</li>\n"
"    @empty\n"
"        <p>No users</p>\n"
"    @endforelse\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:294 docs/master/blade.md:293
#, no-wrap
msgid "    @while (true)\n"
"        <p>I'm looping forever.</p>\n"
"    @endwhile\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:296 docs/master/blade.md:295
#, no-wrap
msgid "> {tip} When looping, you may use the [loop variable](#the-loop-variable) to gain valuable information about the loop, such as whether you are in the first or last iteration through the loop.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:298 docs/master/blade.md:297
msgid "When using loops you may also end the loop or skip the current iteration using the `@continue` and `@break` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:303 docs/master/blade.md:302
#, no-wrap
msgid "    @foreach ($users as $user)\n"
"        @if ($user->type == 1)\n"
"            @continue\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:305 docs/8.x/blade.md:317 docs/master/blade.md:304
#: docs/master/blade.md:316
#, no-wrap
msgid "        <li>{{ $user->name }}</li>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:310 docs/master/blade.md:309
#, no-wrap
msgid "        @if ($user->number == 5)\n"
"            @break\n"
"        @endif\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:312 docs/master/blade.md:311
msgid "You may also include the continuation or break condition within the directive declaration:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:315 docs/master/blade.md:314
#, no-wrap
msgid "    @foreach ($users as $user)\n"
"        @continue($user->type == 1)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:320 docs/master/blade.md:319
#, no-wrap
msgid "        @break($user->number == 5)\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:322 docs/master/blade.md:321
#, no-wrap
msgid "<a name=\"the-loop-variable\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:322 docs/master/blade.md:321
#, no-wrap
msgid "The Loop Variable"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:325 docs/master/blade.md:324
msgid "When looping, a `$loop` variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:330 docs/master/blade.md:329
#, no-wrap
msgid "    @foreach ($users as $user)\n"
"        @if ($loop->first)\n"
"            This is the first iteration.\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:334 docs/master/blade.md:333
#, no-wrap
msgid "        @if ($loop->last)\n"
"            This is the last iteration.\n"
"        @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:337 docs/master/blade.md:336
#, no-wrap
msgid "        <p>This is user {{ $user->id }}</p>\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:339 docs/master/blade.md:338
msgid "If you are in a nested loop, you may access the parent loop's `$loop` variable via the `parent` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:347 docs/master/blade.md:346
#, no-wrap
msgid "    @foreach ($users as $user)\n"
"        @foreach ($user->posts as $post)\n"
"            @if ($loop->parent->first)\n"
"                This is the first iteration of the parent loop.\n"
"            @endif\n"
"        @endforeach\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:349 docs/master/blade.md:348
msgid "The `$loop` variable also contains a variety of other useful properties:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:362 docs/master/blade.md:361
#, no-wrap
msgid "Property  | Description\n"
"------------- | -------------\n"
"`$loop->index`  |  The index of the current loop iteration (starts at 0).\n"
"`$loop->iteration`  |  The current loop iteration (starts at 1).\n"
"`$loop->remaining`  |  The iterations remaining in the loop.\n"
"`$loop->count`  |  The total number of items in the array being iterated.\n"
"`$loop->first`  |  Whether this is the first iteration through the loop.\n"
"`$loop->last`  |  Whether this is the last iteration through the loop.\n"
"`$loop->even`  |  Whether this is an even iteration through the loop.\n"
"`$loop->odd`  |  Whether this is an odd iteration through the loop.\n"
"`$loop->depth`  |  The nesting level of the current loop.\n"
"`$loop->parent`  |  When in a nested loop, the parent's loop variable.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:364 docs/master/blade.md:363
#, no-wrap
msgid "<a name=\"comments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:364 docs/master/blade.md:363
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:367 docs/master/blade.md:366
msgid "Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:369 docs/master/blade.md:368
#, no-wrap
msgid "    {{-- This comment will not be present in the rendered HTML --}}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:371 docs/master/blade.md:370
#, no-wrap
msgid "<a name=\"including-subviews\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:371 docs/master/blade.md:370
#, no-wrap
msgid "Including Subviews"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:374 docs/master/blade.md:373
#, no-wrap
msgid "> {tip} While you're free to use the `@include` directive, Blade [components](#components) provide similar functionality and offer several benefits over the `@include` directive such as data and attribute binding.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:376 docs/master/blade.md:375
msgid "Blade's `@include` directive allows you to include a Blade view from within another view. All variables that are available to the parent view will be made available to the included view:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:377 docs/master/blade.md:376
#, no-wrap
msgid "<div>\n"
"    @include('shared.errors')\n\n"
"    <form>\n"
"        <!-- Form Contents -->\n"
"    </form>\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:388 docs/master/blade.md:387
msgid "Even though the included view will inherit all data available in the parent view, you may also pass an array of additional data that should be made available to the included view:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:390 docs/master/blade.md:389
#, no-wrap
msgid "    @include('view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:392 docs/master/blade.md:391
msgid "If you attempt to `@include` a view which does not exist, Laravel will throw an error. If you would like to include a view that may or may not be present, you should use the `@includeIf` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:394 docs/master/blade.md:393
#, no-wrap
msgid "    @includeIf('view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:396 docs/master/blade.md:395
msgid "If you would like to `@include` a view if a given boolean expression evaluates to `true` or `false`, you may use the `@includeWhen` and `@includeUnless` directives:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:398 docs/master/blade.md:397
#, no-wrap
msgid "    @includeWhen($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:400 docs/master/blade.md:399
#, no-wrap
msgid "    @includeUnless($boolean, 'view.name', ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:402 docs/master/blade.md:401
msgid "To include the first view that exists from a given array of views, you may use the `includeFirst` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:404 docs/master/blade.md:403
#, no-wrap
msgid "    @includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:406 docs/master/blade.md:405
#, no-wrap
msgid "> {note} You should avoid using the `__DIR__` and `__FILE__` constants in your Blade views, since they will refer to the location of the cached, compiled view.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:408 docs/master/blade.md:407
#, no-wrap
msgid "<a name=\"rendering-views-for-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:408 docs/master/blade.md:407
#, no-wrap
msgid "Rendering Views For Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:411 docs/master/blade.md:410
msgid "You may combine loops and includes into one line with Blade's `@each` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:413 docs/master/blade.md:412
#, no-wrap
msgid "    @each('view.name', $jobs, 'job')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:415 docs/master/blade.md:414
msgid "The `@each` directive's first argument is the view to render for each element in the array or collection. The second argument is the array or collection you wish to iterate over, while the third argument is the variable name that will be assigned to the current iteration within the view. So, for example, if you are iterating over an array of `jobs`, typically you will want to access each job as a `job` variable within the view. The array key for the current iteration will be available as the `key` variable within the view."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:417 docs/master/blade.md:416
msgid "You may also pass a fourth argument to the `@each` directive. This argument determines the view that will be rendered if the given array is empty."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:419 docs/master/blade.md:418
#, no-wrap
msgid "    @each('view.name', $jobs, 'job', 'view.empty')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:421 docs/master/blade.md:420
#, no-wrap
msgid "> {note} Views rendered via `@each` do not inherit the variables from the parent view. If the child view requires these variables, you should use the `@foreach` and `@include` directives instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:423 docs/master/blade.md:422
#, no-wrap
msgid "<a name=\"the-once-directive\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:423 docs/master/blade.md:422
#, no-wrap
msgid "The `@once` Directive"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:426 docs/master/blade.md:425
msgid "The `@once` directive allows you to define a portion of the template that will only be evaluated once per rendering cycle. This may be useful for pushing a given piece of JavaScript into the page's header using [stacks](#stacks). For example, if you are rendering a given [component](#components) within a loop, you may wish to only push the JavaScript to the header the first time the component is rendered:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:434 docs/master/blade.md:433
#, no-wrap
msgid "    @once\n"
"        @push('scripts')\n"
"            <script>\n"
"                // Your custom JavaScript...\n"
"            </script>\n"
"        @endpush\n"
"    @endonce\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:436 docs/master/blade.md:626
#, no-wrap
msgid "<a name=\"raw-php\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:436 docs/master/blade.md:626
#, no-wrap
msgid "Raw PHP"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:439 docs/master/blade.md:629
msgid "In some situations, it's useful to embed PHP code into your views. You can use the Blade `@php` directive to execute a block of plain PHP within your template:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:443 docs/master/blade.md:633
#, no-wrap
msgid "    @php\n"
"        $counter = 1;\n"
"    @endphp\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:445 docs/8.x/dusk.md:1594 docs/master/blade.md:635
#: docs/master/dusk.md:1586
#, no-wrap
msgid "<a name=\"components\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:445 docs/8.x/dusk.md:1594 docs/master/blade.md:635
#: docs/master/dusk.md:1586
#, no-wrap
msgid "Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:448 docs/master/blade.md:638
msgid "Components and slots provide similar benefits to sections, layouts, and includes; however, some may find the mental model of components and slots easier to understand. There are two approaches to writing components: class based components and anonymous components."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:450 docs/master/blade.md:640
msgid "To create a class based component, you may use the `make:component` Artisan command. To illustrate how to use components, we will create a simple `Alert` component. The `make:component` command will place the component in the `App\\View\\Components` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:452 docs/master/blade.md:642
#, no-wrap
msgid "    php artisan make:component Alert\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:454 docs/master/blade.md:644
msgid "The `make:component` command will also create a view template for the component. The view will be placed in the `resources/views/components` directory. When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory, so no further component registration is typically required."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:456 docs/master/blade.md:646
msgid "You may also create components within subdirectories:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:458 docs/master/blade.md:648
#, no-wrap
msgid "    php artisan make:component Forms/Input\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:460 docs/master/blade.md:650
msgid "The command above will create an `Input` component in the `App\\View\\Components\\Forms` directory and the view will be placed in the `resources/views/components/forms` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:462 docs/master/blade.md:652
#, no-wrap
msgid "<a name=\"manually-registering-package-components\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:462 docs/master/blade.md:652
#, no-wrap
msgid "Manually Registering Package Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:465 docs/8.x/blade.md:958 docs/master/blade.md:655
#: docs/master/blade.md:1090
msgid "When writing components for your own application, components are automatically discovered within the `app/View/Components` directory and `resources/views/components` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:467 docs/master/blade.md:657
msgid "However, if you are building a package that utilizes Blade components, you will need to manually register your component class and its HTML tag alias. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:469 docs/8.x/blade.md:485 docs/8.x/blade.md:983
#: docs/8.x/blade.md:1291 docs/master/blade.md:659 docs/master/blade.md:675
#: docs/master/blade.md:1115 docs/master/blade.md:1232
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Blade;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:477 docs/master/blade.md:667
#, no-wrap
msgid "    /**\n"
"     * Bootstrap your package's services.\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::component('package-alert', Alert::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:479 docs/8.x/blade.md:975 docs/master/blade.md:669
#: docs/master/blade.md:1107
msgid "Once your component has been registered, it may be rendered using its tag alias:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:481 docs/8.x/blade.md:977 docs/master/blade.md:671
#: docs/master/blade.md:1109
#, no-wrap
msgid "    <x-package-alert/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:483 docs/8.x/blade.md:981 docs/master/blade.md:673
#: docs/master/blade.md:1113
msgid "Alternatively, you may use the `componentNamespace` method to autoload component classes by convention. For example, a `Nightshade` package might have `Calendar` and `ColorPicker` components that reside within the `Package\\Views\\Components` namespace:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:495 docs/8.x/blade.md:993 docs/master/blade.md:685
#: docs/master/blade.md:1125
#, no-wrap
msgid "    /**\n"
"     * Bootstrap your package's services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::componentNamespace('Nightshade\\\\Views\\\\Components', 'nightshade');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:497 docs/8.x/blade.md:995 docs/master/blade.md:687
#: docs/master/blade.md:1127
msgid "This will allow the usage of package components by their vendor namespace using the `package-name::` syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:500 docs/8.x/blade.md:998 docs/master/blade.md:690
#: docs/master/blade.md:1130
#, no-wrap
msgid "    <x-nightshade::calendar />\n"
"    <x-nightshade::color-picker />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:502 docs/8.x/blade.md:1000 docs/master/blade.md:692
#: docs/master/blade.md:1132
msgid "Blade will automatically detect the class that's linked to this component by pascal-casing the component name. Subdirectories are also supported using \"dot\" notation."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:504 docs/master/blade.md:694
#, no-wrap
msgid "<a name=\"rendering-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:504 docs/master/blade.md:694
#, no-wrap
msgid "Rendering Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:507 docs/master/blade.md:697
msgid "To display a component, you may use a Blade component tag within one of your Blade templates. Blade component tags start with the string `x-` followed by the kebab case name of the component class:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:509 docs/8.x/blade.md:921 docs/master/blade.md:699
#: docs/master/blade.md:1053
#, no-wrap
msgid "    <x-alert/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:511 docs/master/blade.md:701
#, no-wrap
msgid "    <x-user-profile/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:513 docs/master/blade.md:703
msgid "If the component class is nested deeper within the `App\\View\\Components` directory, you may use the `.` character to indicate directory nesting. For example, if we assume a component is located at `App\\View\\Components\\Inputs\\Button.php`, we may render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:515 docs/8.x/blade.md:925 docs/master/blade.md:705
#: docs/master/blade.md:1057
#, no-wrap
msgid "    <x-inputs.button/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:517 docs/master/blade.md:707
#, no-wrap
msgid "<a name=\"passing-data-to-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:517 docs/master/blade.md:707
#, no-wrap
msgid "Passing Data To Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:520 docs/master/blade.md:710
msgid "You may pass data to Blade components using HTML attributes. Hard-coded, primitive values may be passed to the component using simple HTML attribute strings. PHP expressions and variables should be passed to the component via attributes that use the `:` character as a prefix:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:522 docs/master/blade.md:712
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:524 docs/master/blade.md:714
msgid "You should define the component's required data in its class constructor. All public properties on a component will automatically be made available to the component's view. It is not necessary to pass the data to the view from the component's `render` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:528 docs/8.x/blade.md:691 docs/master/blade.md:718
#, no-wrap
msgid "    namespace App\\View\\Components;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:530 docs/8.x/blade.md:693 docs/master/blade.md:720
#, no-wrap
msgid "    use Illuminate\\View\\Component;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:539 docs/8.x/blade.md:702 docs/master/blade.md:729
#, no-wrap
msgid "    class Alert extends Component\n"
"    {\n"
"        /**\n"
"         * The alert type.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $type;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:546 docs/master/blade.md:736
#, no-wrap
msgid "        /**\n"
"         * The alert message.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $message;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:559 docs/master/blade.md:749
#, no-wrap
msgid "        /**\n"
"         * Create the component instance.\n"
"         *\n"
"         * @param  string  $type\n"
"         * @param  string  $message\n"
"         * @return void\n"
"         */\n"
"        public function __construct($type, $message)\n"
"        {\n"
"            $this->type = $type;\n"
"            $this->message = $message;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:570 docs/master/blade.md:760
#, no-wrap
msgid "        /**\n"
"         * Get the view / contents that represent the component.\n"
"         *\n"
"         * @return \\Illuminate\\View\\View|\\Closure|string\n"
"         */\n"
"        public function render()\n"
"        {\n"
"            return view('components.alert');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:572 docs/master/blade.md:762
msgid "When your component is rendered, you may display the contents of your component's public variables by echoing the variables by name:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:573 docs/master/blade.md:763
#, no-wrap
msgid "<div class=\"alert alert-{{ $type }}\">\n"
"    {{ $message }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:580 docs/master/blade.md:770
#, no-wrap
msgid "<a name=\"casing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:580 docs/master/blade.md:770
#, no-wrap
msgid "Casing"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:583 docs/master/blade.md:773
msgid "Component constructor arguments should be specified using `camelCase`, while `kebab-case` should be used when referencing the argument names in your HTML attributes. For example, given the following component constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:594 docs/master/blade.md:784
#, no-wrap
msgid "    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  string  $alertType\n"
"     * @return void\n"
"     */\n"
"    public function __construct($alertType)\n"
"    {\n"
"        $this->alertType = $alertType;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:596 docs/master/blade.md:786
msgid "The `$alertType` argument may be provided to the component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:598 docs/master/blade.md:788
#, no-wrap
msgid "    <x-alert alert-type=\"danger\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:600 docs/master/blade.md:790
#, no-wrap
msgid "<a name=\"escaping-attribute-rendering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:600 docs/master/blade.md:790
#, no-wrap
msgid "Escaping Attribute Rendering"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:603 docs/master/blade.md:793
msgid "Since some JavaScript frameworks such as Alpine.js also use colon-prefixed attributes, you may use a double colon (`::`) prefix to inform Blade that the attribute is not a PHP expression. For example, given the following component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:607 docs/master/blade.md:797
#, no-wrap
msgid "    <x-button ::class=\"{ danger: isDeleting }\">\n"
"        Submit\n"
"    </x-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:609 docs/master/blade.md:799
msgid "The following HTML will be rendered by Blade:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:613 docs/master/blade.md:803
#, no-wrap
msgid "    <button :class=\"{ danger: isDeleting }\">\n"
"        Submit\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:615 docs/master/blade.md:805
#, no-wrap
msgid "<a name=\"component-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:615 docs/master/blade.md:805
#, no-wrap
msgid "Component Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:618 docs/master/blade.md:808
msgid "In addition to public variables being available to your component template, any public methods on the component may be invoked. For example, imagine a component that has an `isSelected` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:629 docs/master/blade.md:819
#, no-wrap
msgid "    /**\n"
"     * Determine if the given option is the currently selected option.\n"
"     *\n"
"     * @param  string  $option\n"
"     * @return bool\n"
"     */\n"
"    public function isSelected($option)\n"
"    {\n"
"        return $option === $this->selected;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:631 docs/master/blade.md:821
msgid "You may execute this method from your component template by invoking the variable matching the name of the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:635 docs/master/blade.md:825
#, no-wrap
msgid "    <option {{ $isSelected($value) ? 'selected=\"selected\"' : '' }} value=\"{{ $value }}\">\n"
"        {{ $label }}\n"
"    </option>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:637 docs/master/blade.md:827
#, no-wrap
msgid "<a name=\"using-attributes-slots-within-component-class\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:637 docs/master/blade.md:827
#, no-wrap
msgid "Accessing Attributes & Slots Within Component Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:640 docs/master/blade.md:830
msgid "Blade components also allow you to access the component name, attributes, and slot inside the class's render method. However, in order to access this data, you should return a closure from your component's `render` method. The closure will receive a `$data` array as its only argument. This array will contain several elements that provide information about the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:652 docs/master/blade.md:842
#, no-wrap
msgid "    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return function (array $data) {\n"
"            // $data['componentName'];\n"
"            // $data['attributes'];\n"
"            // $data['slot'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:656 docs/master/blade.md:846
#, no-wrap
msgid "            return '<div>Components content</div>';\n"
"        };\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:658 docs/master/blade.md:848
#, no-wrap
msgid "The `componentName` is equal to the name used in the HTML tag after the `x-` prefix. So `<x-alert />`'s `componentName` will be `alert`. The `attributes` element will contain all of the attributes that were present on the HTML tag. The `slot` element is an `Illuminate\\Support\\HtmlString` instance with the contents of the component's slot.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:660 docs/master/blade.md:850
msgid "The closure should return a string. If the returned string corresponds to an existing view, that view will be rendered; otherwise, the returned string will be evaluated as an inline Blade view."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:662 docs/master/blade.md:852
#, no-wrap
msgid "<a name=\"additional-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:662 docs/master/blade.md:852
#, no-wrap
msgid "Additional Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:665 docs/master/blade.md:855
msgid "If your component requires dependencies from Laravel's [service container](/docs/{{version}}/container), you may list them before any of the component's data attributes and they will automatically be injected by the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:667 docs/master/blade.md:857
#, no-wrap
msgid "    use App\\Services\\AlertCreator\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:682 docs/master/blade.md:872
#, no-wrap
msgid "    /**\n"
"     * Create the component instance.\n"
"     *\n"
"     * @param  \\App\\Services\\AlertCreator  $creator\n"
"     * @param  string  $type\n"
"     * @param  string  $message\n"
"     * @return void\n"
"     */\n"
"    public function __construct(AlertCreator $creator, $type, $message)\n"
"    {\n"
"        $this->creator = $creator;\n"
"        $this->type = $type;\n"
"        $this->message = $message;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:684
#, no-wrap
msgid "<a name=\"hiding-attributes-and-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:684
#, no-wrap
msgid "Hiding Attributes / Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:687
msgid "If you would like to prevent some public methods or properties from being exposed as variables to your component template, you may add them to an `$except` array property on your component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:710
#, no-wrap
msgid "        /**\n"
"         * The properties / methods that should not be exposed to the component template.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $except = ['type'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:712 docs/master/blade.md:874
#, no-wrap
msgid "<a name=\"component-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:712 docs/master/blade.md:874
#, no-wrap
msgid "Component Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:715 docs/master/blade.md:877
msgid "We've already examined how to pass data attributes to a component; however, sometimes you may need to specify additional HTML attributes, such as `class`, that are not part of the data required for a component to function. Typically, you want to pass these additional attributes down to the root element of the component template. For example, imagine we want to render an `alert` component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:717 docs/master/blade.md:879
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\" class=\"mt-4\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:719 docs/master/blade.md:881
msgid "All of the attributes that are not part of the component's constructor will automatically be added to the component's \"attribute bag\". This attribute bag is automatically made available to the component via the `$attributes` variable. All of the attributes may be rendered within the component by echoing this variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:723 docs/master/blade.md:885
#, no-wrap
msgid "    <div {{ $attributes }}>\n"
"        <!-- Component content -->\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:725 docs/master/blade.md:887
#, no-wrap
msgid "> {note} Using directives such as `@env` within component tags is not supported at this time. For example, `<x-alert :live=\"@env('production')\"/>` will not be compiled.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:727 docs/master/blade.md:889
#, no-wrap
msgid "<a name=\"default-merged-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:727 docs/master/blade.md:889
#, no-wrap
msgid "Default / Merged Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:730 docs/master/blade.md:892
msgid "Sometimes you may need to specify default values for attributes or merge additional values into some of the component's attributes. To accomplish this, you may use the attribute bag's `merge` method. This method is particularly useful for defining a set of default CSS classes that should always be applied to a component:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:734 docs/8.x/blade.md:940 docs/master/blade.md:896
#: docs/master/blade.md:1072
#, no-wrap
msgid "    <div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n"
"        {{ $message }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:736 docs/master/blade.md:898
msgid "If we assume this component is utilized like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:738 docs/8.x/blade.md:944 docs/master/blade.md:900
#: docs/master/blade.md:1076
#, no-wrap
msgid "    <x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:740 docs/master/blade.md:902
msgid "The final, rendered HTML of the component will appear like the following:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:741 docs/master/blade.md:903
#, no-wrap
msgid "<div class=\"alert alert-error mb-4\">\n"
"    <!-- Contents of the $message variable -->\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:748
#, no-wrap
msgid "<a name=\"conditionally-merge-classes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:748
#, no-wrap
msgid "Conditionally Merge Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:751
msgid "Sometimes you may wish to merge classes if a given condition is `true`. You can accomplish this via the `class` method, which accepts an array of classes where the array key contains the class or classes you wish to add, while the value is a boolean expression. If the array element has a numeric key, it will always be included in the rendered class list:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:755
#, no-wrap
msgid "    <div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n"
"        {{ $message }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:757
msgid "If you need to merge other attributes onto your component, you can chain the `merge` method onto the `class` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:761
#, no-wrap
msgid "    <button {{ $attributes->class(['p-4'])->merge(['type' => 'button']) }}>\n"
"        {{ $slot }}\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:763 docs/master/blade.md:910
#, no-wrap
msgid "<a name=\"non-class-attribute-merging\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:763 docs/master/blade.md:910
#, no-wrap
msgid "Non-Class Attribute Merging"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:766 docs/master/blade.md:913
msgid "When merging attributes that are not `class` attributes, the values provided to the `merge` method will be considered the \"default\" values of the attribute. However, unlike the `class` attribute, these attributes will not be merged with injected attribute values. Instead, they will be overwritten. For example, a `button` component's implementation may look like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:770 docs/master/blade.md:917
#, no-wrap
msgid "    <button {{ $attributes->merge(['type' => 'button']) }}>\n"
"        {{ $slot }}\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:772 docs/master/blade.md:919
msgid "To render the button component with a custom `type`, it may be specified when consuming the component. If no type is specified, the `button` type will be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:776 docs/master/blade.md:923
#, no-wrap
msgid "    <x-button type=\"submit\">\n"
"        Submit\n"
"    </x-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:778 docs/master/blade.md:925
msgid "The rendered HTML of the `button` component in this example would be:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:782 docs/master/blade.md:929
#, no-wrap
msgid "    <button type=\"submit\">\n"
"        Submit\n"
"    </button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:784 docs/master/blade.md:931
msgid "If you would like an attribute other than `class` to have its default value and injected values joined together, you may use the `prepends` method. In this example, the `data-controller` attribute will always begin with `profile-controller` and any additional injected `data-controller` values will be placed after this default value:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:788 docs/master/blade.md:935
#, no-wrap
msgid "    <div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>\n"
"        {{ $slot }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:790 docs/master/blade.md:937
#, no-wrap
msgid "<a name=\"filtering-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:790 docs/master/blade.md:937
#, no-wrap
msgid "Retrieving & Filtering Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:793 docs/master/blade.md:940
msgid "You may filter attributes using the `filter` method. This method accepts a closure which should return `true` if you wish to retain the attribute in the attribute bag:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:795 docs/master/blade.md:942
#, no-wrap
msgid "    {{ $attributes->filter(fn ($value, $key) => $key == 'foo') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:797 docs/master/blade.md:944
msgid "For convenience, you may use the `whereStartsWith` method to retrieve all attributes whose keys begin with a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:799 docs/master/blade.md:946
#, no-wrap
msgid "    {{ $attributes->whereStartsWith('wire:model') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:801 docs/master/blade.md:948
msgid "Using the `first` method, you may render the first attribute in a given attribute bag:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:803 docs/master/blade.md:950
#, no-wrap
msgid "    {{ $attributes->whereStartsWith('wire:model')->first() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:805 docs/master/blade.md:952
msgid "If you would like to check if an attribute is present on the component, you may use the `has` method. This method accepts the attribute name as its only argument and returns a boolean indicating whether or not the attribute is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:809 docs/master/blade.md:956
#, no-wrap
msgid "    @if ($attributes->has('class'))\n"
"        <div>Class attribute is present</div>\n"
"    @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:811 docs/master/blade.md:958
msgid "You may retrieve a specific attribute's value using the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:813 docs/master/blade.md:960
#, no-wrap
msgid "    {{ $attributes->get('class') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:815
#, no-wrap
msgid "<a name=\"reserved-keywords\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:815
#, no-wrap
msgid "Reserved Keywords"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:818
msgid "By default, some keywords are reserved for Blade's internal use in order to render components. The following keywords cannot be defined as public properties or method names within your components:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:828
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `data`\n"
"- `render`\n"
"- `resolveView`\n"
"- `shouldRender`\n"
"- `view`\n"
"- `withAttributes`\n"
"- `withName`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:830 docs/master/blade.md:962
#, no-wrap
msgid "<a name=\"slots\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:830 docs/master/blade.md:962
#, no-wrap
msgid "Slots"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:833 docs/master/blade.md:965
msgid "You will often need to pass additional content to your component via \"slots\". Component slots are rendered by echoing the `$slot` variable. To explore this concept, let's imagine that an `alert` component has the following markup:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:834 docs/master/blade.md:966
#, no-wrap
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:843 docs/master/blade.md:975
msgid "We may pass content to the `slot` by injecting content into the component:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:844 docs/master/blade.md:976
#, no-wrap
msgid "<x-alert>\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:851 docs/master/blade.md:983
msgid "Sometimes a component may need to render multiple different slots in different locations within the component. Let's modify our alert component to allow for the injection of a \"title\" slot:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:852 docs/master/blade.md:984
#, no-wrap
msgid "<!-- /resources/views/components/alert.blade.php -->\n\n"
"<span class=\"alert-title\">{{ $title }}</span>\n\n"
"<div class=\"alert alert-danger\">\n"
"    {{ $slot }}\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:863 docs/master/blade.md:995
msgid "You may define the content of the named slot using the `x-slot` tag. Any content not within an explicit `x-slot` tag will be passed to the component in the `$slot` variable:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:864 docs/master/blade.md:996
#, no-wrap
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:875 docs/master/blade.md:1007
#, no-wrap
msgid "<a name=\"scoped-slots\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:875 docs/master/blade.md:1007
#, no-wrap
msgid "Scoped Slots"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:878 docs/master/blade.md:1010
msgid "If you have used a JavaScript framework such as Vue, you may be familiar with \"scoped slots\", which allow you to access data or methods from the component within your slot. You may achieve similar behavior in Laravel by defining public methods or properties on your component and accessing the component within your slot via the `$component` variable. In this example, we will assume that the `x-alert` component has a public `formatAlert` method defined on its component class:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:879 docs/master/blade.md:1011
#, no-wrap
msgid "<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        {{ $component->formatAlert('Server Error') }}\n"
"    </x-slot>\n\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:890 docs/master/blade.md:1022
#, no-wrap
msgid "<a name=\"inline-component-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:890 docs/master/blade.md:1022
#, no-wrap
msgid "Inline Component Views"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:893 docs/master/blade.md:1025
msgid "For very small components, it may feel cumbersome to manage both the component class and the component's view template. For this reason, you may return the component's markup directly from the `render` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:907 docs/master/blade.md:1039
#, no-wrap
msgid "    /**\n"
"     * Get the view / contents that represent the component.\n"
"     *\n"
"     * @return \\Illuminate\\View\\View|\\Closure|string\n"
"     */\n"
"    public function render()\n"
"    {\n"
"        return <<<'blade'\n"
"            <div class=\"alert alert-danger\">\n"
"                {{ $slot }}\n"
"            </div>\n"
"        blade;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:909 docs/master/blade.md:1041
#, no-wrap
msgid "<a name=\"generating-inline-view-components\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:909 docs/master/blade.md:1041
#, no-wrap
msgid "Generating Inline View Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:912 docs/master/blade.md:1044
msgid "To create a component that renders an inline view, you may use the `inline` option when executing the `make:component` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:914 docs/master/blade.md:1046
#, no-wrap
msgid "    php artisan make:component Alert --inline\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:916 docs/8.x/packages.md:274 docs/master/blade.md:1048
#: docs/master/packages.md:274
#, no-wrap
msgid "<a name=\"anonymous-components\"></a>\n"
msgstr ""

#. #-#-#-#-#  blade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  blade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/blade.md:916 docs/8.x/packages.md:274 docs/master/blade.md:1048
#: docs/master/packages.md:274
#, no-wrap
msgid "Anonymous Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:919 docs/master/blade.md:1051
msgid "Similar to inline components, anonymous components provide a mechanism for managing a component via a single file. However, anonymous components utilize a single view file and have no associated class. To define an anonymous component, you only need to place a Blade template within your `resources/views/components` directory. For example, assuming you have defined a component at `resources/views/components/alert.blade.php`, you may simply render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:923 docs/master/blade.md:1055
msgid "You may use the `.` character to indicate if a component is nested deeper inside the `components` directory. For example, assuming the component is defined at `resources/views/components/inputs/button.blade.php`, you may render it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:927 docs/master/blade.md:1059
#, no-wrap
msgid "<a name=\"data-properties-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:927 docs/master/blade.md:1059
#, no-wrap
msgid "Data Properties / Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:930 docs/master/blade.md:1062
msgid "Since anonymous components do not have any associated class, you may wonder how you may differentiate which data should be passed to the component as variables and which attributes should be placed in the component's [attribute bag](#component-attributes)."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:932 docs/master/blade.md:1064
msgid "You may specify which attributes should be considered data variables using the `@props` directive at the top of your component's Blade template. All other attributes on the component will be available via the component's attribute bag. If you wish to give a data variable a default value, you may specify the variable's name as the array key and the default value as the array value:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:934 docs/master/blade.md:1066
#, no-wrap
msgid "    <!-- /resources/views/components/alert.blade.php -->\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:936 docs/master/blade.md:1068
#, no-wrap
msgid "    @props(['type' => 'info', 'message'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:942 docs/master/blade.md:1074
msgid "Given the component definition above, we may render the component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:946 docs/master/blade.md:1078
#, no-wrap
msgid "<a name=\"dynamic-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:946 docs/master/blade.md:1078
#, no-wrap
msgid "Dynamic Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:949 docs/master/blade.md:1081
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:951 docs/8.x/releases.md:278 docs/master/blade.md:1083
#: docs/master/releases.md:278
#, no-wrap
msgid "    <x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:953 docs/master/blade.md:1085
#, no-wrap
msgid "<a name=\"manually-registering-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:953 docs/master/blade.md:1085
#, no-wrap
msgid "Manually Registering Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:956 docs/master/blade.md:1088
#, no-wrap
msgid "> {note} The following documentation on manually registering components is primarily applicable to those who are writing Laravel packages that include view components. If you are not writing a package, this portion of the component documentation may not be relevant to you.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:960 docs/master/blade.md:1092
msgid "However, if you are building a package that utilizes Blade components or placing components in non-conventional directories, you will need to manually register your component class and its HTML tag alias so that Laravel knows where to find the component. You should typically register your components in the `boot` method of your package's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:963 docs/master/blade.md:1095
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Blade;\n"
"    use VendorPackage\\View\\Components\\AlertComponent;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:973 docs/master/blade.md:1105
#, no-wrap
msgid "    /**\n"
"     * Bootstrap your package's services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::component('package-alert', AlertComponent::class);\n"
"    }\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:978 docs/master/blade.md:1110
#, no-wrap
msgid "Autoloading Package Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1002 docs/master/blade.md:435
#, no-wrap
msgid "<a name=\"building-layouts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1002 docs/master/blade.md:435
#, no-wrap
msgid "Building Layouts"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1005 docs/master/blade.md:438
#, no-wrap
msgid "<a name=\"layouts-using-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1005 docs/master/blade.md:438
#, no-wrap
msgid "Layouts Using Components"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1008 docs/master/blade.md:441
msgid "Most web applications maintain the same general layout across various pages. It would be incredibly cumbersome and hard to maintain our application if we had to repeat the entire layout HTML in every view we create. Thankfully, it's convenient to define this layout as a single [Blade component](#components) and then use it throughout our application."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1010 docs/master/blade.md:443
#, no-wrap
msgid "<a name=\"defining-the-layout-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1010 docs/master/blade.md:443
#, no-wrap
msgid "Defining The Layout Component"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1013 docs/master/blade.md:446
msgid "For example, imagine we are building a \"todo\" list application. We might define a `layout` component that looks like the following:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1014 docs/master/blade.md:447
#, no-wrap
msgid "<!-- resources/views/components/layout.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>{{ $title ?? 'Todo Manager' }}</title>\n"
"    </head>\n"
"    <body>\n"
"        <h1>Todos</h1>\n"
"        <hr/>\n"
"        {{ $slot }}\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1030 docs/master/blade.md:463
#, no-wrap
msgid "<a name=\"applying-the-layout-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1030 docs/master/blade.md:463
#, no-wrap
msgid "Applying The Layout Component"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1033 docs/master/blade.md:466
msgid "Once the `layout` component has been defined, we may create a Blade view that utilizes the component. In this example, we will define a simple view that displays our task list:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1034 docs/master/blade.md:467
#, no-wrap
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1045 docs/master/blade.md:478
msgid "Remember, content that is injected into a component will be supplied to the default `$slot` variable within our `layout` component. As you may have noticed, our `layout` also respects a `$title` slot if one is provided; otherwise, a default title is shown. We may inject a custom title from our task list view using the standard slot syntax discussed in the [component documentation](#components):"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1046 docs/master/blade.md:479
#, no-wrap
msgid "<!-- resources/views/tasks.blade.php -->\n\n"
"<x-layout>\n"
"    <x-slot name=\"title\">\n"
"        Custom Title\n"
"    </x-slot>\n\n"
"    @foreach ($tasks as $task)\n"
"        {{ $task }}\n"
"    @endforeach\n"
"</x-layout>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1061 docs/master/blade.md:494
msgid "Now that we have defined our layout and task list views, we just need to return the `task` view from a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1063 docs/master/blade.md:496
#, no-wrap
msgid "    use App\\Models\\Task;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1067 docs/master/blade.md:500
#, no-wrap
msgid "    Route::get('/tasks', function () {\n"
"        return view('tasks', ['tasks' => Task::all()]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1069 docs/master/blade.md:502
#, no-wrap
msgid "<a name=\"layouts-using-template-inheritance\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1069 docs/master/blade.md:502
#, no-wrap
msgid "Layouts Using Template Inheritance"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1072 docs/master/blade.md:505
#, no-wrap
msgid "<a name=\"defining-a-layout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1072 docs/master/blade.md:505
#, no-wrap
msgid "Defining A Layout"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1075 docs/master/blade.md:508
msgid "Layouts may also be created via \"template inheritance\". This was the primary way of building applications prior to the introduction of [components](#components)."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1077 docs/master/blade.md:510
msgid "To get started, let's take a look at a simple example. First, we will examine a page layout. Since most web applications maintain the same general layout across various pages, it's convenient to define this layout as a single Blade view:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1078 docs/master/blade.md:511
#, no-wrap
msgid "<!-- resources/views/layouts/app.blade.php -->\n\n"
"<html>\n"
"    <head>\n"
"        <title>App Name - @yield('title')</title>\n"
"    </head>\n"
"    <body>\n"
"        @section('sidebar')\n"
"            This is the master sidebar.\n"
"        @show\n\n"
"        <div class=\"container\">\n"
"            @yield('content')\n"
"        </div>\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1098 docs/master/blade.md:531
msgid "As you can see, this file contains typical HTML mark-up. However, take note of the `@section` and `@yield` directives. The `@section` directive, as the name implies, defines a section of content, while the `@yield` directive is used to display the contents of a given section."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1100 docs/master/blade.md:533
msgid "Now that we have defined a layout for our application, let's define a child page that inherits the layout."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1102 docs/master/blade.md:535
#, no-wrap
msgid "<a name=\"extending-a-layout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/blade.md:1102 docs/master/blade.md:535
#, no-wrap
msgid "Extending A Layout"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1105 docs/master/blade.md:538
msgid "When defining a child view, use the `@extends` Blade directive to specify which layout the child view should \"inherit\". Views which extend a Blade layout may inject content into the layout's sections using `@section` directives. Remember, as seen in the example above, the contents of these sections will be displayed in the layout using `@yield`:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1106 docs/master/blade.md:539
#, no-wrap
msgid "<!-- resources/views/child.blade.php -->\n\n"
"@extends('layouts.app')\n\n"
"@section('title', 'Page Title')\n\n"
"@section('sidebar')\n"
"    @@parent\n\n"
"    <p>This is appended to the master sidebar.</p>\n"
"@endsection\n\n"
"@section('content')\n"
"    <p>This is my body content.</p>\n"
"@endsection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1125 docs/master/blade.md:558
msgid "In this example, the `sidebar` section is utilizing the `@@parent` directive to append (rather than overwriting) content to the layout's sidebar. The `@@parent` directive will be replaced by the content of the layout when the view is rendered."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1127 docs/master/blade.md:560
#, no-wrap
msgid "> {tip} Contrary to the previous example, this `sidebar` section ends with `@endsection` instead of `@show`. The `@endsection` directive will only define a section while `@show` will define and **immediately yield** the section.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1129 docs/master/blade.md:562
msgid "The `@yield` directive also accepts a default value as its second parameter. This value will be rendered if the section being yielded is undefined:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1131 docs/master/blade.md:564
#, no-wrap
msgid "    @yield('content', 'Default content')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1133 docs/master/blade.md:566
#, no-wrap
msgid "<a name=\"forms\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1133 docs/master/blade.md:566
#, no-wrap
msgid "Forms"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1136 docs/master/blade.md:569
#, no-wrap
msgid "<a name=\"csrf-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1136 docs/master/blade.md:569
#, no-wrap
msgid "CSRF Field"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1139 docs/master/blade.md:572
msgid "Anytime you define an HTML form in your application, you should include a hidden CSRF token field in the form so that [the CSRF protection](https://laravel.com/docs/{{version}}/csrf) middleware can validate the request. You may use the `@csrf` Blade directive to generate the token field:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1140 docs/master/blade.md:573
#, no-wrap
msgid "<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n\n"
"    ...\n"
"</form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1149 docs/master/blade.md:582
#, no-wrap
msgid "<a name=\"method-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1149 docs/master/blade.md:582
#, no-wrap
msgid "Method Field"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1152 docs/master/blade.md:585
msgid "Since HTML forms can't make `PUT`, `PATCH`, or `DELETE` requests, you will need to add a hidden `_method` field to spoof these HTTP verbs. The `@method` Blade directive can create this field for you:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1153 docs/master/blade.md:586
#, no-wrap
msgid "<form action=\"/foo/bar\" method=\"POST\">\n"
"    @method('PUT')\n\n"
"    ...\n"
"</form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1162 docs/master/blade.md:595
#, no-wrap
msgid "<a name=\"validation-errors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1162 docs/master/blade.md:595
#, no-wrap
msgid "Validation Errors"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1165 docs/master/blade.md:598
msgid "The `@error` directive may be used to quickly check if [validation error messages](/docs/{{version}}/validation#quick-displaying-the-validation-errors) exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1166 docs/8.x/validation.md:208 docs/master/blade.md:599
#: docs/master/validation.md:208
#, no-wrap
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<label for=\"title\">Post Title</label>\n\n"
"<input id=\"title\" type=\"text\" class=\"@error('title') is-invalid @enderror\">\n\n"
"@error('title')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1179 docs/master/blade.md:612
msgid "You may pass [the name of a specific error bag](/docs/{{version}}/validation#named-error-bags) as the second parameter to the `@error` directive to retrieve validation error messages on pages containing multiple forms:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1180 docs/master/blade.md:613
#, no-wrap
msgid "<!-- /resources/views/auth.blade.php -->\n\n"
"<label for=\"email\">Email address</label>\n\n"
"<input id=\"email\" type=\"email\" class=\"@error('email', 'login') is-invalid @enderror\">\n\n"
"@error('email', 'login')\n"
"    <div class=\"alert alert-danger\">{{ $message }}</div>\n"
"@enderror\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1193 docs/master/blade.md:1134
#, no-wrap
msgid "<a name=\"stacks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1193 docs/master/blade.md:1134
#, no-wrap
msgid "Stacks"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1196 docs/master/blade.md:1137
msgid "Blade allows you to push to named stacks which can be rendered somewhere else in another view or layout. This can be particularly useful for specifying any JavaScript libraries required by your child views:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1197 docs/master/blade.md:1138
#, no-wrap
msgid "@push('scripts')\n"
"    <script src=\"/example.js\"></script>\n"
"@endpush\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1204 docs/master/blade.md:1145
msgid "You may push to a stack as many times as needed. To render the complete stack contents, pass the name of the stack to the `@stack` directive:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1205 docs/master/blade.md:1146
#, no-wrap
msgid "<head>\n"
"    <!-- Head Contents -->\n\n"
"    @stack('scripts')\n"
"</head>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1214 docs/master/blade.md:1155
msgid "If you would like to prepend content onto the beginning of a stack, you should use the `@prepend` directive:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1215 docs/master/blade.md:1156
#, no-wrap
msgid "@push('scripts')\n"
"    This will be second...\n"
"@endpush\n\n"
"// Later...\n\n"
"@prepend('scripts')\n"
"    This will be first...\n"
"@endprepend\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1228 docs/master/blade.md:1169
#, no-wrap
msgid "<a name=\"service-injection\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1228 docs/master/blade.md:1169
#, no-wrap
msgid "Service Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1231 docs/master/blade.md:1172
msgid "The `@inject` directive may be used to retrieve a service from the Laravel [service container](/docs/{{version}}/container). The first argument passed to `@inject` is the name of the variable the service will be placed into, while the second argument is the class or interface name of the service you wish to resolve:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1232 docs/master/blade.md:1173
#, no-wrap
msgid "@inject('metrics', 'App\\Services\\MetricsService')\n\n"
"<div>\n"
"    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1241 docs/master/blade.md:1182
#, no-wrap
msgid "<a name=\"extending-blade\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/blade.md:1241 docs/master/blade.md:1182
#, no-wrap
msgid "Extending Blade"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1244 docs/master/blade.md:1185
msgid "Blade allows you to define your own custom directives using the `directive` method. When the Blade compiler encounters the custom directive, it will call the provided callback with the expression that the directive contains."
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1246 docs/master/blade.md:1187
msgid "The following example creates a `@datetime($var)` directive which formats a given `$var`, which should be an instance of `DateTime`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1265 docs/8.x/database.md:247
#: docs/8.x/eloquent-resources.md:364 docs/8.x/filesystem.md:514
#: docs/8.x/queues.md:1715 docs/8.x/queues.md:1771 docs/8.x/views.md:122
#: docs/master/blade.md:1206 docs/master/database.md:247
#: docs/master/eloquent-resources.md:364 docs/master/filesystem.md:514
#: docs/master/queues.md:1653 docs/master/queues.md:1709
#: docs/master/views.md:122
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1278 docs/master/blade.md:1219
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Blade::directive('datetime', function ($expression) {\n"
"                return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1280 docs/master/blade.md:1221
msgid "As you can see, we will chain the `format` method onto whatever expression is passed into the directive. So, in this example, the final PHP generated by this directive will be:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1282 docs/master/blade.md:1223
#, no-wrap
msgid "    <?php echo ($var)->format('m/d/Y H:i'); ?>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1284 docs/master/blade.md:1225
#, no-wrap
msgid "> {note} After updating the logic of a Blade directive, you will need to delete all of the cached Blade views. The cached Blade views may be removed using the `view:clear` Artisan command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1286 docs/master/blade.md:1227
#, no-wrap
msgid "<a name=\"custom-if-statements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/blade.md:1286 docs/master/blade.md:1227
#, no-wrap
msgid "Custom If Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1289 docs/master/blade.md:1230
msgid "Programming a custom directive is sometimes more complex than necessary when defining simple, custom conditional statements. For that reason, Blade provides a `Blade::if` method which allows you to quickly define custom conditional directives using closures. For example, let's define a custom conditional that checks the configured default \"disk\" for the application. We may do this in the `boot` method of our `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1303 docs/master/blade.md:1244
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Blade::if('disk', function ($value) {\n"
"            return config('filesystems.default') === $value;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/blade.md:1305 docs/master/blade.md:1246
msgid "Once the custom conditional has been defined, you can use it within your templates:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/blade.md:1306 docs/master/blade.md:1247
#, no-wrap
msgid "@disk('local')\n"
"    <!-- The application is using the local disk... -->\n"
"@elsedisk('s3')\n"
"    <!-- The application is using the s3 disk... -->\n"
"@else\n"
"    <!-- The application is using some other disk... -->\n"
"@enddisk\n\n"
"@unlessdisk('local')\n"
"    <!-- The application is not using the local disk... -->\n"
"@enddisk\n"
msgstr ""

#. type: Title #
#: docs/8.x/broadcasting.md:1 docs/master/broadcasting.md:1
#, no-wrap
msgid "Broadcasting"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Server Side Installation](#server-side-installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Pusher Channels](#pusher-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Ably](#ably)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Open Source Alternatives](#open-source-alternatives)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Client Side Installation](#client-side-installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Pusher Channels](#client-pusher-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Ably](#client-ably)"
msgstr ""

#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/8.x/database-testing.md:22
#: docs/8.x/eloquent-resources.md:14 docs/master/broadcasting.md:36
#: docs/master/database-testing.md:22 docs/master/eloquent-resources.md:14
msgid "[Concept Overview](#concept-overview)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Using An Example Application](#using-example-application)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Defining Broadcast Events](#defining-broadcast-events)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcast Name](#broadcast-name)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcast Data](#broadcast-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcast Queue](#broadcast-queue)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcast Conditions](#broadcast-conditions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcasting & Database Transactions](#broadcasting-and-database-transactions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Authorizing Channels](#authorizing-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Defining Authorization Routes](#defining-authorization-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Defining Authorization Callbacks](#defining-authorization-callbacks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Defining Channel Classes](#defining-channel-classes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcasting Events](#broadcasting-events)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Only To Others](#only-to-others)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Receiving Broadcasts](#receiving-broadcasts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Listening For Events](#listening-for-events)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Leaving A Channel](#leaving-a-channel)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Namespaces](#namespaces)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Presence Channels](#presence-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Authorizing Presence Channels](#authorizing-presence-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Joining Presence Channels](#joining-presence-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Broadcasting To Presence Channels](#broadcasting-to-presence-channels)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/master/broadcasting.md:36
msgid "[Client Events](#client-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/broadcasting.md:36 docs/8.x/envoy.md:18 docs/8.x/horizon.md:16
#: docs/8.x/mix.md:21 docs/master/broadcasting.md:36 docs/master/envoy.md:17
#: docs/master/horizon.md:16 docs/master/mix.md:21
msgid "[Notifications](#notifications)"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:41 docs/master/broadcasting.md:41
msgid "In many modern web applications, WebSockets are used to implement realtime, live-updating user interfaces. When some data is updated on the server, a message is typically sent over a WebSocket connection to be handled by the client. WebSockets provide a more efficient alternative to continually polling your application's server for data changes that should be reflected in your UI."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:43 docs/master/broadcasting.md:43
msgid "For example, imagine your application is able to export a user's data to a CSV file and email it to them. However, creating this CSV file takes several minutes so you choose to create and mail the CSV within a [queued job](/docs/{{version}}/queues). When the CSV has been created and mailed to the user, we can use event broadcasting to dispatch a `App\\Events\\UserDataExported` event that is received by our application's JavaScript. Once the event is received, we can display a message to the user that their CSV has been emailed to them without them ever needing to refresh the page."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:45 docs/master/broadcasting.md:45
msgid "To assist you in building these types of features, Laravel makes it easy to \"broadcast\" your server-side Laravel [events](/docs/{{version}}/events) over a WebSocket connection. Broadcasting your Laravel events allows you to share the same event names and data between your server-side Laravel application and your client-side JavaScript application."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:47 docs/master/broadcasting.md:47
#, no-wrap
msgid "<a name=\"supported-drivers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:47 docs/master/broadcasting.md:47
#, no-wrap
msgid "Supported Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:50 docs/master/broadcasting.md:50
msgid "By default, Laravel includes two server-side broadcasting drivers for you to choose from: [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io). However, community driven packages such as [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) provide additional broadcasting drivers that do not require commercial broadcasting providers."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:52 docs/master/broadcasting.md:52
#, no-wrap
msgid "> {tip} Before diving into event broadcasting, make sure you have read Laravel's documentation on [events and listeners](/docs/{{version}}/events).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:54 docs/master/broadcasting.md:54
#, no-wrap
msgid "<a name=\"server-side-installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:54 docs/master/broadcasting.md:54
#, no-wrap
msgid "Server Side Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:57 docs/master/broadcasting.md:57
msgid "To get started using Laravel's event broadcasting, we need to do some configuration within the Laravel application as well as install a few packages."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:59 docs/master/broadcasting.md:59
msgid "Event broadcasting is accomplished by a server-side broadcasting driver that broadcasts your Laravel events so that Laravel Echo (a JavaScript library) can receive them within the browser client. Don't worry - we'll walk through each part of the installation process step-by-step."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:64 docs/master/broadcasting.md:64
msgid "All of your application's event broadcasting configuration is stored in the `config/broadcasting.php` configuration file. Laravel supports several broadcast drivers out of the box: [Pusher Channels](https://pusher.com/channels), [Redis](/docs/{{version}}/redis), and a `log` driver for local development and debugging. Additionally, a `null` driver is included which allows you to totally disable broadcasting during testing. A configuration example is included for each of these drivers in the `config/broadcasting.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:66 docs/master/broadcasting.md:66
#, no-wrap
msgid "<a name=\"broadcast-service-provider\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:66 docs/master/broadcasting.md:66
#, no-wrap
msgid "Broadcast Service Provider"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:69 docs/master/broadcasting.md:69
msgid "Before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In new Laravel applications, you only need to uncomment this provider in the `providers` array of your `config/app.php` configuration file. This `BroadcastServiceProvider` contains the code necessary to register the broadcast authorization routes and callbacks."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:71 docs/master/broadcasting.md:71
#, no-wrap
msgid "<a name=\"queue-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:71 docs/master/broadcasting.md:71
#, no-wrap
msgid "Queue Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:74 docs/master/broadcasting.md:74
msgid "You will also need to configure and run a [queue worker](/docs/{{version}}/queues). All event broadcasting is done via queued jobs so that the response time of your application is not seriously affected by events being broadcast."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:76 docs/master/broadcasting.md:76
#, no-wrap
msgid "<a name=\"pusher-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:76 docs/8.x/broadcasting.md:128
#: docs/master/broadcasting.md:76 docs/master/broadcasting.md:128
#, no-wrap
msgid "Pusher Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:79 docs/master/broadcasting.md:79
msgid "If you plan to broadcast your events using [Pusher Channels](https://pusher.com/channels), you should install the Pusher Channels PHP SDK using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:81
#, no-wrap
msgid "    composer require pusher/pusher-php-server \"^5.0\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:83 docs/master/broadcasting.md:83
msgid "Next, you should configure your Pusher Channels credentials in the `config/broadcasting.php` configuration file. An example Pusher Channels configuration is already included in this file, allowing you to quickly specify your key, secret, and application ID. Typically, these values should be set via the `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_ID` [environment variables](/docs/{{version}}/configuration#environment-configuration):"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:88 docs/master/broadcasting.md:88
#, no-wrap
msgid "    PUSHER_APP_ID=your-pusher-app-id\n"
"    PUSHER_APP_KEY=your-pusher-key\n"
"    PUSHER_APP_SECRET=your-pusher-secret\n"
"    PUSHER_APP_CLUSTER=mt1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:90 docs/master/broadcasting.md:90
msgid "The `config/broadcasting.php` file's `pusher` configuration also allows you to specify additional `options` that are supported by Channels, such as the cluster."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:92 docs/master/broadcasting.md:92
msgid "Next, you will need to change your broadcast driver to `pusher` in your `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:94 docs/master/broadcasting.md:94
#, no-wrap
msgid "    BROADCAST_DRIVER=pusher\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:96 docs/8.x/broadcasting.md:118
#: docs/master/broadcasting.md:96 docs/master/broadcasting.md:118
msgid "Finally, you are ready to install and configure [Laravel Echo](#client-side-installation), which will receive the broadcast events on the client-side."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:98 docs/master/broadcasting.md:98
#, no-wrap
msgid "<a name=\"pusher-compatible-laravel-websockets\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:98 docs/master/broadcasting.md:98
#, no-wrap
msgid "Pusher Compatible Laravel Websockets"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:101 docs/8.x/broadcasting.md:123
#: docs/master/broadcasting.md:101 docs/master/broadcasting.md:123
msgid "The [laravel-websockets](https://github.com/beyondcode/laravel-websockets) package is a pure PHP, Pusher compatible WebSocket package for Laravel. This package allows you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using this package, please consult its [official documentation](https://beyondco.de/docs/laravel-websockets)."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:103 docs/master/broadcasting.md:103
#, no-wrap
msgid "<a name=\"ably\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:103 docs/8.x/broadcasting.md:175
#: docs/master/broadcasting.md:103 docs/master/broadcasting.md:175
#, no-wrap
msgid "Ably"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:106 docs/master/broadcasting.md:106
msgid "If you plan to broadcast your events using [Ably](https://ably.io), you should install the Ably PHP SDK using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:108 docs/master/broadcasting.md:108
#, no-wrap
msgid "    composer require ably/ably-php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:110 docs/master/broadcasting.md:110
msgid "Next, you should configure your Ably credentials in the `config/broadcasting.php` configuration file. An example Ably configuration is already included in this file, allowing you to quickly specify your key. Typically, this value should be set via the `ABLY_KEY` [environment variable](/docs/{{version}}/configuration#environment-configuration):"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:112 docs/master/broadcasting.md:112
#, no-wrap
msgid "    ABLY_KEY=your-ably-key\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:114 docs/master/broadcasting.md:114
msgid "Next, you will need to change your broadcast driver to `ably` in your `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:116 docs/master/broadcasting.md:116
#, no-wrap
msgid "    BROADCAST_DRIVER=ably\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:120 docs/master/broadcasting.md:120
#, no-wrap
msgid "<a name=\"open-source-alternatives\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:120 docs/master/broadcasting.md:120
#, no-wrap
msgid "Open Source Alternatives"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:125 docs/master/broadcasting.md:125
#, no-wrap
msgid "<a name=\"client-side-installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:125 docs/master/broadcasting.md:125
#, no-wrap
msgid "Client Side Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:128 docs/master/broadcasting.md:128
#, no-wrap
msgid "<a name=\"client-pusher-channels\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:131 docs/master/broadcasting.md:131
msgid "Laravel Echo is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package since we will be using the Pusher Channels broadcaster:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/broadcasting.md:132 docs/8.x/broadcasting.md:181
#: docs/master/broadcasting.md:132 docs/master/broadcasting.md:181
#, no-wrap
msgid "npm install --save-dev laravel-echo pusher-js\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:137 docs/master/broadcasting.md:137
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file - you simply need to uncomment it:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:138 docs/master/broadcasting.md:138
#, no-wrap
msgid "import Echo from 'laravel-echo';\n\n"
"window.Pusher = require('pusher-js');\n\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_PUSHER_APP_KEY,\n"
"    cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n"
"    forceTLS: true\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:152 docs/8.x/broadcasting.md:207
#: docs/master/broadcasting.md:152 docs/master/broadcasting.md:207
msgid "Once you have uncommented and adjusted the Echo configuration according to your needs, you may compile your application's assets:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:154 docs/8.x/broadcasting.md:209
#: docs/master/broadcasting.md:154 docs/master/broadcasting.md:209
#, no-wrap
msgid "    npm run dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:156 docs/8.x/broadcasting.md:211
#: docs/master/broadcasting.md:156 docs/master/broadcasting.md:211
#, no-wrap
msgid "> {tip} To learn more about compiling your application's JavaScript assets, please consult the documentation on [Laravel Mix](/docs/{{version}}/mix).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:158 docs/master/broadcasting.md:158
#, no-wrap
msgid "<a name=\"using-an-existing-client-instance\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:158 docs/master/broadcasting.md:158
#, no-wrap
msgid "Using An Existing Client Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:161 docs/master/broadcasting.md:161
msgid "If you already have a pre-configured Pusher Channels client instance that you would like Echo to utilize, you may pass it to Echo via the `client` configuration option:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:162 docs/master/broadcasting.md:162
#, no-wrap
msgid "import Echo from 'laravel-echo';\n\n"
"const client = require('pusher-js');\n\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: 'your-pusher-channels-key',\n"
"    client: client\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:175 docs/master/broadcasting.md:175
#, no-wrap
msgid "<a name=\"client-ably\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:178 docs/master/broadcasting.md:178
msgid "Laravel Echo is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:180 docs/master/broadcasting.md:180
msgid "You may wonder why we would install the `pusher-js` JavaScript library even though we are using Ably to broadcast our events. Thankfully, Ably includes a Pusher compatibility mode which lets us use the Pusher protocol when listening for events in our client-side application:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:186 docs/master/broadcasting.md:186
#, no-wrap
msgid "**Before continuing, you should enable Pusher protocol support in your Ably application settings. You may enable this feature within the \"Protocol Adapter Settings\" portion of your Ably application's settings dashboard.**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:188 docs/master/broadcasting.md:188
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file; however, the default configuration in the `bootstrap.js` file is intended for Pusher. You may copy the configuration below to transition your configuration to Ably:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:189 docs/master/broadcasting.md:189
#, no-wrap
msgid "import Echo from 'laravel-echo';\n\n"
"window.Pusher = require('pusher-js');\n\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_ABLY_PUBLIC_KEY,\n"
"    wsHost: 'realtime-pusher.ably.io',\n"
"    wsPort: 443,\n"
"    disableStats: true,\n"
"    encrypted: true,\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:205 docs/master/broadcasting.md:205
msgid "Note that our Ably Echo configuration references a `MIX_ABLY_PUBLIC_KEY` environment variable. This variable's value should be your Ably public key. Your public key is the portion of your Ably key that occurs before the `:` character."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:213 docs/8.x/database-testing.md:62
#: docs/8.x/eloquent-resources.md:41 docs/master/broadcasting.md:213
#: docs/master/database-testing.md:62 docs/master/eloquent-resources.md:41
#, no-wrap
msgid "<a name=\"concept-overview\"></a>\n"
msgstr ""

#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  eloquent-resources.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/broadcasting.md:213 docs/8.x/database-testing.md:62
#: docs/8.x/eloquent-resources.md:41 docs/master/broadcasting.md:213
#: docs/master/database-testing.md:62 docs/master/eloquent-resources.md:41
#, no-wrap
msgid "Concept Overview"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:216 docs/master/broadcasting.md:216
msgid "Laravel's event broadcasting allows you to broadcast your server-side Laravel events to your client-side JavaScript application using a driver-based approach to WebSockets. Currently, Laravel ships with [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io) drivers. The events may be easily consumed on the client-side using the [Laravel Echo](#client-side-installation) JavaScript package."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:218 docs/master/broadcasting.md:218
msgid "Events are broadcast over \"channels\", which may be specified as public or private. Any visitor to your application may subscribe to a public channel without any authentication or authorization; however, in order to subscribe to a private channel, a user must be authenticated and authorized to listen on that channel."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:220 docs/master/broadcasting.md:220
#, no-wrap
msgid "> {tip} If you would like to use an open source, PHP driven alternative to Pusher, check out the [laravel-websockets](https://github.com/beyondcode/laravel-websockets) package.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:222 docs/master/broadcasting.md:222
#, no-wrap
msgid "<a name=\"using-example-application\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:222 docs/master/broadcasting.md:222
#, no-wrap
msgid "Using An Example Application"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:225 docs/master/broadcasting.md:225
msgid "Before diving into each component of event broadcasting, let's take a high level overview using an e-commerce store as an example."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:227 docs/master/broadcasting.md:227
msgid "In our application, let's assume we have a page that allows users to view the shipping status for their orders. Let's also assume that a `OrderShipmentStatusUpdated` event is fired when a shipping status update is processed by the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:229 docs/8.x/broadcasting.md:583
#: docs/8.x/broadcasting.md:592 docs/master/broadcasting.md:229
#: docs/master/broadcasting.md:583 docs/master/broadcasting.md:592
#, no-wrap
msgid "    use App\\Events\\OrderShipmentStatusUpdated;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:231 docs/8.x/broadcasting.md:585
#: docs/master/broadcasting.md:231
#, no-wrap
msgid "    OrderShipmentStatusUpdated::dispatch($order);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:233 docs/master/broadcasting.md:233
#, no-wrap
msgid "<a name=\"the-shouldbroadcast-interface\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:233 docs/master/broadcasting.md:233
#, no-wrap
msgid "The `ShouldBroadcast` Interface"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:236 docs/master/broadcasting.md:236
msgid "When a user is viewing one of their orders, we don't want them to have to refresh the page to view status updates. Instead, we want to broadcast the updates to the application as they are created. So, we need to mark the `OrderShipmentStatusUpdated` event with the `ShouldBroadcast` interface. This will instruct Laravel to broadcast the event when it is fired:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:240 docs/8.x/broadcasting.md:308
#: docs/8.x/broadcasting.md:453 docs/8.x/events.md:197
#: docs/master/broadcasting.md:240 docs/master/broadcasting.md:308
#: docs/master/broadcasting.md:453 docs/master/events.md:197
#, no-wrap
msgid "    namespace App\\Events;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:248 docs/master/broadcasting.md:248
#, no-wrap
msgid "    use App\\Order;\n"
"    use Illuminate\\Broadcasting\\Channel;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Broadcasting\\PresenceChannel;\n"
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:258 docs/master/broadcasting.md:258
#, no-wrap
msgid "    class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"    {\n"
"        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Order\n"
"         */\n"
"        public $order;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:260 docs/master/broadcasting.md:260
msgid "The `ShouldBroadcast` interface requires our event to define a `broadcastOn` method. This method is responsible for returning the channels that the event should broadcast on. An empty stub of this method is already defined on generated event classes, so we only need to fill in its details. We only want the creator of the order to be able to view status updates, so we will broadcast the event on a private channel that is tied to the order:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:270 docs/master/broadcasting.md:270
#, no-wrap
msgid "    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return \\Illuminate\\Broadcasting\\PrivateChannel\n"
"     */\n"
"    public function broadcastOn()\n"
"    {\n"
"        return new PrivateChannel('orders.'.$this->order->id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:272 docs/master/broadcasting.md:272
#, no-wrap
msgid "<a name=\"example-application-authorizing-channels\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:272 docs/8.x/broadcasting.md:467
#: docs/master/broadcasting.md:272 docs/master/broadcasting.md:467
#, no-wrap
msgid "Authorizing Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:275 docs/master/broadcasting.md:275
msgid "Remember, users must be authorized to listen on private channels. We may define our channel authorization rules in our application's `routes/channels.php` file. In this example, we need to verify that any user attempting to listen on the private `order.1` channel is actually the creator of the order:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:277 docs/8.x/broadcasting.md:512
#: docs/8.x/scout.md:226 docs/8.x/scout.md:239 docs/8.x/scout.md:258
#: docs/8.x/scout.md:283 docs/8.x/scout.md:306 docs/8.x/scout.md:334
#: docs/8.x/scout.md:365 docs/8.x/scout.md:374 docs/8.x/scout.md:412
#: docs/8.x/scout.md:512 docs/master/broadcasting.md:277
#: docs/master/broadcasting.md:512 docs/master/scout.md:221
#: docs/master/scout.md:234 docs/master/scout.md:253 docs/master/scout.md:278
#: docs/master/scout.md:301 docs/master/scout.md:329 docs/master/scout.md:360
#: docs/master/scout.md:369 docs/master/scout.md:407 docs/master/scout.md:507
#, no-wrap
msgid "    use App\\Models\\Order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:281 docs/8.x/broadcasting.md:501
#: docs/master/broadcasting.md:281 docs/master/broadcasting.md:501
#, no-wrap
msgid "    Broadcast::channel('orders.{orderId}', function ($user, $orderId) {\n"
"        return $user->id === Order::findOrNew($orderId)->user_id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:283 docs/8.x/broadcasting.md:503
#: docs/master/broadcasting.md:283 docs/master/broadcasting.md:503
msgid "The `channel` method accepts two arguments: the name of the channel and a callback which returns `true` or `false` indicating whether the user is authorized to listen on the channel."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:285 docs/8.x/broadcasting.md:505
#: docs/master/broadcasting.md:285 docs/master/broadcasting.md:505
msgid "All authorization callbacks receive the currently authenticated user as their first argument and any additional wildcard parameters as their subsequent arguments. In this example, we are using the `{orderId}` placeholder to indicate that the \"ID\" portion of the channel name is a wildcard."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:287 docs/master/broadcasting.md:287
#, no-wrap
msgid "<a name=\"listening-for-event-broadcasts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:287 docs/master/broadcasting.md:287
#, no-wrap
msgid "Listening For Event Broadcasts"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:290 docs/master/broadcasting.md:290
msgid "Next, all that remains is to listen for the event in our JavaScript application. We can do this using Laravel Echo. First, we'll use the `private` method to subscribe to the private channel. Then, we may use the `listen` method to listen for the `OrderShipmentStatusUpdated` event. By default, all of the event's public properties will be included on the broadcast event:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:291 docs/master/broadcasting.md:291
#, no-wrap
msgid "Echo.private(`orders.${orderId}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:299 docs/master/broadcasting.md:299
#, no-wrap
msgid "<a name=\"defining-broadcast-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:299 docs/master/broadcasting.md:299
#, no-wrap
msgid "Defining Broadcast Events"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:302 docs/master/broadcasting.md:302
msgid "To inform Laravel that a given event should be broadcast, you must implement the `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class. This interface is already imported into all event classes generated by the framework so you may easily add it to any of your events."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:304 docs/master/broadcasting.md:304
msgid "The `ShouldBroadcast` interface requires you to implement a single method: `broadcastOn`. The `broadcastOn` method should return a channel or array of channels that the event should broadcast on. The channels should be instances of `Channel`, `PrivateChannel`, or `PresenceChannel`. Instances of `Channel` represent public channels that any user may subscribe to, while `PrivateChannels` and `PresenceChannels` represent private channels that require [channel authorization](#authorizing-channels):"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:316 docs/master/broadcasting.md:316
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Broadcasting\\Channel;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Broadcasting\\PresenceChannel;\n"
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:320 docs/8.x/broadcasting.md:460
#: docs/master/broadcasting.md:320 docs/master/broadcasting.md:460
#, no-wrap
msgid "    class ServerCreated implements ShouldBroadcast\n"
"    {\n"
"        use SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:327 docs/master/broadcasting.md:327
#, no-wrap
msgid "        /**\n"
"         * The user that created the server.\n"
"         *\n"
"         * @var \\App\\Models\\User\n"
"         */\n"
"        public $user;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:338 docs/master/broadcasting.md:338
#, no-wrap
msgid "        /**\n"
"         * Create a new event instance.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function __construct(User $user)\n"
"        {\n"
"            $this->user = $user;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:349 docs/master/broadcasting.md:349
#, no-wrap
msgid "        /**\n"
"         * Get the channels the event should broadcast on.\n"
"         *\n"
"         * @return Channel|array\n"
"         */\n"
"        public function broadcastOn()\n"
"        {\n"
"            return new PrivateChannel('user.'.$this->user->id);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:351 docs/master/broadcasting.md:351
msgid "After implementing the `ShouldBroadcast` interface, you only need to [fire the event](/docs/{{version}}/events) as you normally would. Once the event has been fired, a [queued job](/docs/{{version}}/queues) will automatically broadcast the event using your specified broadcast driver."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:353 docs/master/broadcasting.md:353
#, no-wrap
msgid "<a name=\"broadcast-name\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:353 docs/master/broadcasting.md:353
#, no-wrap
msgid "Broadcast Name"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:356 docs/master/broadcasting.md:356
msgid "By default, Laravel will broadcast the event using the event's class name. However, you may customize the broadcast name by defining a `broadcastAs` method on the event:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:366 docs/master/broadcasting.md:366
#, no-wrap
msgid "    /**\n"
"     * The event's broadcast name.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function broadcastAs()\n"
"    {\n"
"        return 'server.created';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:368 docs/master/broadcasting.md:368
msgid "If you customize the broadcast name using the `broadcastAs` method, you should make sure to register your listener with a leading `.` character. This will instruct Echo to not prepend the application's namespace to the event:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:372 docs/master/broadcasting.md:372
#, no-wrap
msgid "    .listen('.server.created', function (e) {\n"
"        ....\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:374 docs/master/broadcasting.md:374
#, no-wrap
msgid "<a name=\"broadcast-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:374 docs/master/broadcasting.md:374
#, no-wrap
msgid "Broadcast Data"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:377 docs/master/broadcasting.md:377
msgid "When an event is broadcast, all of its `public` properties are automatically serialized and broadcast as the event's payload, allowing you to access any of its public data from your JavaScript application. So, for example, if your event has a single public `$user` property that contains an Eloquent model, the event's broadcast payload would be:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:385 docs/master/broadcasting.md:385
#, no-wrap
msgid "    {\n"
"        \"user\": {\n"
"            \"id\": 1,\n"
"            \"name\": \"Patrick Stewart\"\n"
"            ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:387 docs/master/broadcasting.md:387
msgid "However, if you wish to have more fine-grained control over your broadcast payload, you may add a `broadcastWith` method to your event. This method should return the array of data that you wish to broadcast as the event payload:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:397 docs/master/broadcasting.md:397
#, no-wrap
msgid "    /**\n"
"     * Get the data to broadcast.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function broadcastWith()\n"
"    {\n"
"        return ['id' => $this->user->id];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:399 docs/master/broadcasting.md:399
#, no-wrap
msgid "<a name=\"broadcast-queue\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:399 docs/master/broadcasting.md:399
#, no-wrap
msgid "Broadcast Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:402 docs/master/broadcasting.md:402
msgid "By default, each broadcast event is placed on the default queue for the default queue connection specified in your `queue.php` configuration file. You may customize the queue connection and name used by the broadcaster by defining `connection` and `queue` properties on your event class:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:409 docs/master/broadcasting.md:409
#, no-wrap
msgid "    /**\n"
"     * The name of the queue connection to use when broadcasting the event.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $connection = 'redis';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:416 docs/master/broadcasting.md:416
#, no-wrap
msgid "    /**\n"
"     * The name of the queue on which to place the broadcasting job.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $queue = 'default';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:418 docs/master/broadcasting.md:418
msgid "If you want to broadcast your event using the `sync` queue instead of the default queue driver, you can implement the `ShouldBroadcastNow` interface instead of `ShouldBroadcast`:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:422 docs/master/broadcasting.md:422
#, no-wrap
msgid "    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:427 docs/master/broadcasting.md:427
#, no-wrap
msgid "    class OrderShipmentStatusUpdated implements ShouldBroadcastNow\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:429 docs/master/broadcasting.md:429
#, no-wrap
msgid "<a name=\"broadcast-conditions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:429 docs/master/broadcasting.md:429
#, no-wrap
msgid "Broadcast Conditions"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:432 docs/master/broadcasting.md:432
msgid "Sometimes you want to broadcast your event only if a given condition is true. You may define these conditions by adding a `broadcastWhen` method to your event class:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:442 docs/master/broadcasting.md:442
#, no-wrap
msgid "    /**\n"
"     * Determine if this event should broadcast.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function broadcastWhen()\n"
"    {\n"
"        return $this->order->value > 100;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:444 docs/master/broadcasting.md:444
#, no-wrap
msgid "<a name=\"broadcasting-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:444 docs/master/broadcasting.md:444
#, no-wrap
msgid "Broadcasting & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:447 docs/master/broadcasting.md:447
msgid "When broadcast events are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your event depends on these models, unexpected errors can occur when the job that broadcasts the event is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:449 docs/master/broadcasting.md:449
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular broadcast event should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the event class:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:456 docs/master/broadcasting.md:456
#, no-wrap
msgid "    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:463 docs/8.x/events.md:427
#: docs/8.x/notifications.md:214 docs/master/broadcasting.md:463
#: docs/master/events.md:427 docs/master/notifications.md:213
#, no-wrap
msgid "        public $afterCommit = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:465 docs/8.x/events.md:429 docs/8.x/mail.md:663
#: docs/8.x/notifications.md:216 docs/master/broadcasting.md:465
#: docs/master/events.md:429 docs/master/mail.md:663
#: docs/master/notifications.md:215
#, no-wrap
msgid "> {tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:467 docs/master/broadcasting.md:467
#, no-wrap
msgid "<a name=\"authorizing-channels\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:470 docs/master/broadcasting.md:470
msgid "Private channels require you to authorize that the currently authenticated user can actually listen on the channel. This is accomplished by making an HTTP request to your Laravel application with the channel name and allowing your application to determine if the user can listen on that channel. When using [Laravel Echo](#client-side-installation), the HTTP request to authorize subscriptions to private channels will be made automatically; however, you do need to define the proper routes to respond to these requests."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:472 docs/master/broadcasting.md:472
#, no-wrap
msgid "<a name=\"defining-authorization-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:472 docs/master/broadcasting.md:472
#, no-wrap
msgid "Defining Authorization Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:475 docs/master/broadcasting.md:475
msgid "Thankfully, Laravel makes it easy to define the routes to respond to channel authorization requests. In the `App\\Providers\\BroadcastServiceProvider` included with your Laravel application, you will see a call to the `Broadcast::routes` method. This method will register the `/broadcasting/auth` route to handle authorization requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:477 docs/master/broadcasting.md:477
#, no-wrap
msgid "    Broadcast::routes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:479 docs/master/broadcasting.md:479
msgid "The `Broadcast::routes` method will automatically place its routes within the `web` middleware group; however, you may pass an array of route attributes to the method if you would like to customize the assigned attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:481 docs/master/broadcasting.md:481
#, no-wrap
msgid "    Broadcast::routes($attributes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:483 docs/master/broadcasting.md:483
#, no-wrap
msgid "<a name=\"customizing-the-authorization-endpoint\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:483 docs/master/broadcasting.md:483
#, no-wrap
msgid "Customizing The Authorization Endpoint"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:486 docs/master/broadcasting.md:486
msgid "By default, Echo will use the `/broadcasting/auth` endpoint to authorize channel access. However, you may specify your own authorization endpoint by passing the `authEndpoint` configuration option to your Echo instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:492 docs/master/broadcasting.md:492
#, no-wrap
msgid "    window.Echo = new Echo({\n"
"        broadcaster: 'pusher',\n"
"        // ...\n"
"        authEndpoint: '/custom/endpoint/auth'\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:494 docs/master/broadcasting.md:494
#, no-wrap
msgid "<a name=\"defining-authorization-callbacks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:494 docs/master/broadcasting.md:494
#, no-wrap
msgid "Defining Authorization Callbacks"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:497 docs/master/broadcasting.md:497
msgid "Next, we need to define the logic that will actually determine if the currently authenticated user can listen to a given channel. This is done in the `routes/channels.php` file that is included with your application. In this file, you may use the `Broadcast::channel` method to register channel authorization callbacks:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:507 docs/master/broadcasting.md:507
#, no-wrap
msgid "<a name=\"authorization-callback-model-binding\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:507 docs/master/broadcasting.md:507
#, no-wrap
msgid "Authorization Callback Model Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:510 docs/master/broadcasting.md:510
msgid "Just like HTTP routes, channel routes may also take advantage of implicit and explicit [route model binding](/docs/{{version}}/routing#route-model-binding). For example, instead of receiving a string or numeric order ID, you may request an actual `Order` model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:516 docs/master/broadcasting.md:516
#, no-wrap
msgid "    Broadcast::channel('orders.{order}', function ($user, Order $order) {\n"
"        return $user->id === $order->user_id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:518 docs/master/broadcasting.md:518
#, no-wrap
msgid "> {note} Unlike HTTP route model binding, channel model binding does not support automatic [implicit model binding scoping](/docs/{{version}}/routing#implicit-model-binding-scoping). However, this is rarely a problem because most channels can be scoped based on a single model's unique, primary key.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:520 docs/master/broadcasting.md:520
#, no-wrap
msgid "<a name=\"authorization-callback-authentication\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/broadcasting.md:520 docs/master/broadcasting.md:520
#, no-wrap
msgid "Authorization Callback Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:523 docs/master/broadcasting.md:523
msgid "Private and presence broadcast channels authenticate the current user via your application's default authentication guard. If the user is not authenticated, channel authorization is automatically denied and the authorization callback is never executed. However, you may assign multiple, custom guards that should authenticate the incoming request if necessary:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:527 docs/master/broadcasting.md:527
#, no-wrap
msgid "    Broadcast::channel('channel', function () {\n"
"        // ...\n"
"    }, ['guards' => ['web', 'admin']]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:529 docs/master/broadcasting.md:529
#, no-wrap
msgid "<a name=\"defining-channel-classes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:529 docs/master/broadcasting.md:529
#, no-wrap
msgid "Defining Channel Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:532 docs/master/broadcasting.md:532
msgid "If your application is consuming many different channels, your `routes/channels.php` file could become bulky. So, instead of using closures to authorize channels, you may use channel classes. To generate a channel class, use the `make:channel` Artisan command. This command will place a new channel class in the `App/Broadcasting` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:534 docs/master/broadcasting.md:534
#, no-wrap
msgid "    php artisan make:channel OrderChannel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:536 docs/master/broadcasting.md:536
msgid "Next, register your channel in your `routes/channels.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:538 docs/master/broadcasting.md:538
#, no-wrap
msgid "    use App\\Broadcasting\\OrderChannel;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:540 docs/master/broadcasting.md:540
#, no-wrap
msgid "    Broadcast::channel('orders.{order}', OrderChannel::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:542 docs/master/broadcasting.md:542
msgid "Finally, you may place the authorization logic for your channel in the channel class' `join` method. This `join` method will house the same logic you would have typically placed in your channel authorization closure. You may also take advantage of channel model binding:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:546 docs/master/broadcasting.md:546
#, no-wrap
msgid "    namespace App\\Broadcasting;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:549 docs/master/broadcasting.md:549
#, no-wrap
msgid "    use App\\Models\\Order;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:561 docs/master/broadcasting.md:561
#, no-wrap
msgid "    class OrderChannel\n"
"    {\n"
"        /**\n"
"         * Create a new channel instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:574 docs/master/broadcasting.md:574
#, no-wrap
msgid "        /**\n"
"         * Authenticate the user's access to the channel.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @param  \\App\\Models\\Order  $order\n"
"         * @return array|bool\n"
"         */\n"
"        public function join(User $user, Order $order)\n"
"        {\n"
"            return $user->id === $order->user_id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:576 docs/master/broadcasting.md:576
#, no-wrap
msgid "> {tip} Like many other classes in Laravel, channel classes will automatically be resolved by the [service container](/docs/{{version}}/container). So, you may type-hint any dependencies required by your channel in its constructor.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:578 docs/master/broadcasting.md:578
#, no-wrap
msgid "<a name=\"broadcasting-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:578 docs/master/broadcasting.md:578
#, no-wrap
msgid "Broadcasting Events"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:581 docs/master/broadcasting.md:581
msgid "Once you have defined an event and marked it with the `ShouldBroadcast` interface, you only need to fire the event using the event's dispatch method. The event dispatcher will notice that the event is marked with the `ShouldBroadcast` interface and will queue the event for broadcasting:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:587 docs/master/broadcasting.md:587
#, no-wrap
msgid "<a name=\"only-to-others\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:587 docs/master/broadcasting.md:587
#, no-wrap
msgid "Only To Others"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:590 docs/master/broadcasting.md:590
msgid "When building an application that utilizes event broadcasting, you may occasionally need to broadcast an event to all subscribers to a given channel except for the current user. You may accomplish this using the `broadcast` helper and the `toOthers` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:594 docs/master/broadcasting.md:594
#, no-wrap
msgid "    broadcast(new OrderShipmentStatusUpdated($update))->toOthers();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:596 docs/master/broadcasting.md:596
msgid "To better understand when you may want to use the `toOthers` method, let's imagine a task list application where a user may create a new task by entering a task name. To create a task, your application might make a request to a `/task` URL which broadcasts the task's creation and returns a JSON representation of the new task. When your JavaScript application receives the response from the end-point, it might directly insert the new task into its task list like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:601 docs/master/broadcasting.md:601
#, no-wrap
msgid "    axios.post('/task', task)\n"
"        .then((response) => {\n"
"            this.tasks.push(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:603 docs/master/broadcasting.md:603
msgid "However, remember that we also broadcast the task's creation. If your JavaScript application is also listening for this event in order to add tasks to the task list, you will have duplicate tasks in your list: one from the end-point and one from the broadcast. You may solve this by using the `toOthers` method to instruct the broadcaster to not broadcast the event to the current user."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:605 docs/master/broadcasting.md:605
#, no-wrap
msgid "> {note} Your event must use the `Illuminate\\Broadcasting\\InteractsWithSockets` trait in order to call the `toOthers` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:607 docs/master/broadcasting.md:607
#, no-wrap
msgid "<a name=\"only-to-others-configuration\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:610 docs/master/broadcasting.md:610
msgid "When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using a global [Axios](https://github.com/mzabriskie/axios) instance to make HTTP requests from your JavaScript application, the socket ID will automatically be attached to every outgoing request as a `X-Socket-ID` header. Then, when you call the `toOthers` method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:612 docs/master/broadcasting.md:612
msgid "If you are not using a global Axios instance, you will need to manually configure your JavaScript application to send the `X-Socket-ID` header with all outgoing requests. You may retrieve the socket ID using the `Echo.socketId` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:614 docs/master/broadcasting.md:614
#, no-wrap
msgid "    var socketId = Echo.socketId();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:616 docs/master/broadcasting.md:616
#, no-wrap
msgid "<a name=\"receiving-broadcasts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:616 docs/master/broadcasting.md:616
#, no-wrap
msgid "Receiving Broadcasts"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:619 docs/master/broadcasting.md:619
#, no-wrap
msgid "<a name=\"listening-for-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:619 docs/master/broadcasting.md:619
#, no-wrap
msgid "Listening For Events"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:622 docs/master/broadcasting.md:622
msgid "Once you have [installed and instantiated Laravel Echo](#client-side-installation), you are ready to start listening for events that are broadcast from your Laravel application. First, use the `channel` method to retrieve an instance of a channel, then call the `listen` method to listen for a specified event:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:623 docs/master/broadcasting.md:623
#, no-wrap
msgid "Echo.channel(`orders.${this.order.id}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order.name);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:631 docs/master/broadcasting.md:631
msgid "If you would like to listen for events on a private channel, use the `private` method instead. You may continue to chain calls to the `listen` method to listen for multiple events on a single channel:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:632 docs/master/broadcasting.md:632
#, no-wrap
msgid "Echo.private(`orders.${this.order.id}`)\n"
"    .listen(...)\n"
"    .listen(...)\n"
"    .listen(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:640 docs/master/broadcasting.md:640
#, no-wrap
msgid "<a name=\"leaving-a-channel\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:640 docs/master/broadcasting.md:640
#, no-wrap
msgid "Leaving A Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:643 docs/master/broadcasting.md:643
msgid "To leave a channel, you may call the `leaveChannel` method on your Echo instance:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:644 docs/master/broadcasting.md:644
#, no-wrap
msgid "Echo.leaveChannel(`orders.${this.order.id}`);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:649 docs/master/broadcasting.md:649
msgid "If you would like to leave a channel and also its associated private and presence channels, you may call the `leave` method:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:650 docs/master/broadcasting.md:650
#, no-wrap
msgid "Echo.leave(`orders.${this.order.id}`);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:654 docs/master/broadcasting.md:654
#, no-wrap
msgid "<a name=\"namespaces\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:654 docs/master/broadcasting.md:654
#, no-wrap
msgid "Namespaces"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:657 docs/master/broadcasting.md:657
msgid "You may have noticed in the examples above that we did not specify the full `App\\Events` namespace for the event classes. This is because Echo will automatically assume the events are located in the `App\\Events` namespace. However, you may configure the root namespace when you instantiate Echo by passing a `namespace` configuration option:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:658 docs/master/broadcasting.md:658
#, no-wrap
msgid "window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    // ...\n"
"    namespace: 'App.Other.Namespace'\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:667 docs/master/broadcasting.md:667
msgid "Alternatively, you may prefix event classes with a `.` when subscribing to them using Echo. This will allow you to always specify the fully-qualified class name:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/broadcasting.md:668 docs/master/broadcasting.md:668
#, no-wrap
msgid "Echo.channel('orders')\n"
"    .listen('.Namespace\\\\Event\\\\Class', (e) => {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:676 docs/master/broadcasting.md:676
#, no-wrap
msgid "<a name=\"presence-channels\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:676 docs/master/broadcasting.md:676
#, no-wrap
msgid "Presence Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:679 docs/master/broadcasting.md:679
msgid "Presence channels build on the security of private channels while exposing the additional feature of awareness of who is subscribed to the channel. This makes it easy to build powerful, collaborative application features such as notifying users when another user is viewing the same page or listing the inhabitants of a chat room."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:681 docs/master/broadcasting.md:681
#, no-wrap
msgid "<a name=\"authorizing-presence-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:681 docs/master/broadcasting.md:681
#, no-wrap
msgid "Authorizing Presence Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:684 docs/master/broadcasting.md:684
msgid "All presence channels are also private channels; therefore, users must be [authorized to access them](#authorizing-channels). However, when defining authorization callbacks for presence channels, you will not return `true` if the user is authorized to join the channel. Instead, you should return an array of data about the user."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:686 docs/master/broadcasting.md:686
msgid "The data returned by the authorization callback will be made available to the presence channel event listeners in your JavaScript application. If the user is not authorized to join the presence channel, you should return `false` or `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:692 docs/master/broadcasting.md:692
#, no-wrap
msgid "    Broadcast::channel('chat.{roomId}', function ($user, $roomId) {\n"
"        if ($user->canJoinRoom($roomId)) {\n"
"            return ['id' => $user->id, 'name' => $user->name];\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:694 docs/master/broadcasting.md:694
#, no-wrap
msgid "<a name=\"joining-presence-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:694 docs/master/broadcasting.md:694
#, no-wrap
msgid "Joining Presence Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:697 docs/master/broadcasting.md:697
msgid "To join a presence channel, you may use Echo's `join` method. The `join` method will return a `PresenceChannel` implementation which, along with exposing the `listen` method, allows you to subscribe to the `here`, `joining`, and `leaving` events."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:708 docs/master/broadcasting.md:708
#, no-wrap
msgid "    Echo.join(`chat.${roomId}`)\n"
"        .here((users) => {\n"
"            //\n"
"        })\n"
"        .joining((user) => {\n"
"            console.log(user.name);\n"
"        })\n"
"        .leaving((user) => {\n"
"            console.log(user.name);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:710 docs/master/broadcasting.md:710
msgid "The `here` callback will be executed immediately once the channel is joined successfully, and will receive an array containing the user information for all of the other users currently subscribed to the channel. The `joining` method will be executed when a new user joins a channel, while the `leaving` method will be executed when a user leaves the channel."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:712 docs/master/broadcasting.md:712
#, no-wrap
msgid "<a name=\"broadcasting-to-presence-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/broadcasting.md:712 docs/master/broadcasting.md:712
#, no-wrap
msgid "Broadcasting To Presence Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:715 docs/master/broadcasting.md:715
msgid "Presence channels may receive events just like public or private channels. Using the example of a chatroom, we may want to broadcast `NewMessage` events to the room's presence channel. To do so, we'll return an instance of `PresenceChannel` from the event's `broadcastOn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:725 docs/master/broadcasting.md:725
#, no-wrap
msgid "    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return Channel|array\n"
"     */\n"
"    public function broadcastOn()\n"
"    {\n"
"        return new PresenceChannel('room.'.$this->message->room_id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:727 docs/master/broadcasting.md:727
msgid "As with other events, you may use the `broadcast` helper and the `toOthers` method to exclude the current user from receiving the broadcast:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:729 docs/master/broadcasting.md:729
#, no-wrap
msgid "    broadcast(new NewMessage($message));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:731 docs/master/broadcasting.md:731
#, no-wrap
msgid "    broadcast(new NewMessage($message))->toOthers();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:733 docs/master/broadcasting.md:733
msgid "As typical of other types of events, you may listen for events sent to presence channels using Echo's `listen` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:741 docs/master/broadcasting.md:741
#, no-wrap
msgid "    Echo.join(`chat.${roomId}`)\n"
"        .here(...)\n"
"        .joining(...)\n"
"        .leaving(...)\n"
"        .listen('NewMessage', (e) => {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:743 docs/master/broadcasting.md:743
#, no-wrap
msgid "<a name=\"client-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/broadcasting.md:743 docs/master/broadcasting.md:743
#, no-wrap
msgid "Client Events"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:746 docs/master/broadcasting.md:746
#, no-wrap
msgid "> {tip} When using [Pusher Channels](https://pusher.com/channels), you must enable the \"Client Events\" option in the \"App Settings\" section of your [application dashboard](https://dashboard.pusher.com/) in order to send client events.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:748 docs/master/broadcasting.md:748
msgid "Sometimes you may wish to broadcast an event to other connected clients without hitting your Laravel application at all. This can be particularly useful for things like \"typing\" notifications, where you want to alert users of your application that another user is typing a message on a given screen."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:750 docs/master/broadcasting.md:750
msgid "To broadcast client events, you may use Echo's `whisper` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:755 docs/master/broadcasting.md:755
#, no-wrap
msgid "    Echo.private(`chat.${roomId}`)\n"
"        .whisper('typing', {\n"
"            name: this.user.name\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:757 docs/master/broadcasting.md:757
msgid "To listen for client events, you may use the `listenForWhisper` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:762 docs/master/broadcasting.md:762
#, no-wrap
msgid "    Echo.private(`chat.${roomId}`)\n"
"        .listenForWhisper('typing', (e) => {\n"
"            console.log(e.name);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:764 docs/8.x/envoy.md:254 docs/8.x/horizon.md:308
#: docs/8.x/mix.md:365 docs/master/broadcasting.md:764 docs/master/envoy.md:196
#: docs/master/horizon.md:308 docs/master/mix.md:365
#, no-wrap
msgid "<a name=\"notifications\"></a>\n"
msgstr ""

#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  broadcasting.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  envoy.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/broadcasting.md:764 docs/8.x/envoy.md:254 docs/8.x/horizon.md:308
#: docs/8.x/mix.md:365 docs/8.x/notifications.md:1
#: docs/master/broadcasting.md:764 docs/master/envoy.md:196
#: docs/master/horizon.md:308 docs/master/mix.md:365
#: docs/master/notifications.md:1
#, no-wrap
msgid "Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:767 docs/master/broadcasting.md:767
msgid "By pairing event broadcasting with [notifications](/docs/{{version}}/notifications), your JavaScript application may receive new notifications as they occur without needing to refresh the page. Before getting started, be sure to read over the documentation on using [the broadcast notification channel](/docs/{{version}}/notifications#broadcast-notifications)."
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:769 docs/master/broadcasting.md:769
msgid "Once you have configured a notification to use the broadcast channel, you may listen for the broadcast events using Echo's `notification` method. Remember, the channel name should match the class name of the entity receiving the notifications:"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:774 docs/master/broadcasting.md:774
#, no-wrap
msgid "    Echo.private(`App.Models.User.${userId}`)\n"
"        .notification((notification) => {\n"
"            console.log(notification.type);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/broadcasting.md:775 docs/master/broadcasting.md:775
msgid "In this example, all notifications sent to `App\\Models\\User` instances via the `broadcast` channel would be received by the callback. A channel authorization callback for the `App.Models.User.{id}` channel is included in the default `BroadcastServiceProvider` that ships with the Laravel framework."
msgstr ""

#. type: Title #
#: docs/8.x/cache.md:1 docs/master/cache.md:1
#, no-wrap
msgid "Cache"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/8.x/filesystem.md:20 docs/8.x/mail.md:26
#: docs/8.x/scout.md:26 docs/8.x/session.md:16 docs/master/cache.md:24
#: docs/master/filesystem.md:20 docs/master/mail.md:26 docs/master/scout.md:26
#: docs/master/session.md:16
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Cache Usage](#cache-usage)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Obtaining A Cache Instance](#obtaining-a-cache-instance)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Retrieving Items From The Cache](#retrieving-items-from-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Storing Items In The Cache](#storing-items-in-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Removing Items From The Cache](#removing-items-from-the-cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[The Cache Helper](#the-cache-helper)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Cache Tags](#cache-tags)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Storing Tagged Cache Items](#storing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Accessing Tagged Cache Items](#accessing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Removing Tagged Cache Items](#removing-tagged-cache-items)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Atomic Locks](#atomic-locks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Driver Prerequisites](#lock-driver-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Managing Locks](#managing-locks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Managing Locks Across Processes](#managing-locks-across-processes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Adding Custom Cache Drivers](#adding-custom-cache-drivers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/master/cache.md:24
msgid "[Writing The Driver](#writing-the-driver)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cache.md:24 docs/8.x/session.md:16 docs/master/cache.md:24
#: docs/master/session.md:16
msgid "[Registering The Driver](#registering-the-driver)"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:29 docs/master/cache.md:29
msgid "Some of the data retrieval or processing tasks performed by your application could be CPU intensive or take several seconds to complete. When this is the case, it is common to cache the retrieved data for a time so it can be retrieved quickly on subsequent requests for the same data. The cached data is usually stored in a very fast data store such as [Memcached](https://memcached.org) or [Redis](https://redis.io)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:31 docs/master/cache.md:31
msgid "Thankfully, Laravel provides an expressive, unified API for various cache backends, allowing you to take advantage of their blazing fast data retrieval and speed up your web application."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:36 docs/master/cache.md:36
msgid "Your application's cache configuration file is located at `config/cache.php`. In this file, you may specify which cache driver you would like to be used by default throughout your application. Laravel supports popular caching backends like [Memcached](https://memcached.org), [Redis](https://redis.io), [DynamoDB](https://aws.amazon.com/dynamodb), and relational databases out of the box. In addition, a file based cache driver is available, while `array` and \"null\" cache drivers provide convenient cache backends for your automated tests."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:38 docs/master/cache.md:38
msgid "The cache configuration file also contains various other options, which are documented within the file, so make sure to read over these options. By default, Laravel is configured to use the `file` cache driver, which stores the serialized, cached objects on the server's filesystem. For larger applications, it is recommended that you use a more robust driver such as Memcached or Redis. You may even configure multiple cache configurations for the same driver."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:40 docs/8.x/filesystem.md:67 docs/8.x/mail.md:40
#: docs/8.x/queues.md:76 docs/8.x/scout.md:60 docs/8.x/session.md:43
#: docs/master/cache.md:40 docs/master/filesystem.md:67 docs/master/mail.md:40
#: docs/master/queues.md:75 docs/master/scout.md:60 docs/master/session.md:43
#, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:40 docs/8.x/cache.md:294 docs/8.x/filesystem.md:67
#: docs/8.x/scout.md:60 docs/8.x/session.md:43 docs/master/cache.md:40
#: docs/master/cache.md:294 docs/master/filesystem.md:67
#: docs/master/scout.md:60 docs/master/session.md:43
#, no-wrap
msgid "Driver Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:43 docs/master/cache.md:43
#, no-wrap
msgid "<a name=\"prerequisites-database\"></a>\n"
msgstr ""

#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/cache.md:43 docs/8.x/cache.md:297 docs/8.x/queues.md:79
#: docs/8.x/session.md:46 docs/8.x/upgrade.md:89 docs/8.x/valet.md:101
#: docs/master/cache.md:43 docs/master/cache.md:297 docs/master/queues.md:78
#: docs/master/session.md:46 docs/master/upgrade.md:89 docs/master/valet.md:101
#, no-wrap
msgid "Database"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:46 docs/master/cache.md:46
msgid "When using the `database` cache driver, you will need to setup a table to contain the cache items. You'll find an example `Schema` declaration for the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:52 docs/master/cache.md:52
#, no-wrap
msgid "    Schema::create('cache', function ($table) {\n"
"        $table->string('key')->unique();\n"
"        $table->text('value');\n"
"        $table->integer('expiration');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:54 docs/master/cache.md:54
#, no-wrap
msgid "> {tip} You may also use the `php artisan cache:table` Artisan command to generate a migration with the proper schema.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:56 docs/master/cache.md:56
#, no-wrap
msgid "<a name=\"memcached\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:56 docs/master/cache.md:56
#, no-wrap
msgid "Memcached"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:59 docs/master/cache.md:59
msgid "Using the Memcached driver requires the [Memcached PECL package](https://pecl.php.net/package/memcached) to be installed. You may list all of your Memcached servers in the `config/cache.php` configuration file. This file already contains a `memcached.servers` entry to get you started:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:69 docs/master/cache.md:69
#, no-wrap
msgid "    'memcached' => [\n"
"        'servers' => [\n"
"            [\n"
"                'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n"
"                'port' => env('MEMCACHED_PORT', 11211),\n"
"                'weight' => 100,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:71 docs/master/cache.md:71
msgid "If needed, you may set the `host` option to a UNIX socket path. If you do this, the `port` option should be set to `0`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:79 docs/master/cache.md:79
#, no-wrap
msgid "    'memcached' => [\n"
"        [\n"
"            'host' => '/var/run/memcached/memcached.sock',\n"
"            'port' => 0,\n"
"            'weight' => 100\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:81 docs/8.x/queues.md:88 docs/8.x/sail.md:183
#: docs/8.x/session.md:66 docs/master/cache.md:81 docs/master/queues.md:87
#: docs/master/sail.md:182 docs/master/session.md:66
#, no-wrap
msgid "<a name=\"redis\"></a>\n"
msgstr ""

#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  redis.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/cache.md:81 docs/8.x/queues.md:88 docs/8.x/redis.md:1
#: docs/8.x/sail.md:183 docs/8.x/session.md:66 docs/master/cache.md:81
#: docs/master/queues.md:87 docs/master/redis.md:1 docs/master/sail.md:182
#: docs/master/session.md:66
#, no-wrap
msgid "Redis"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:84 docs/master/cache.md:84
msgid "Before using a Redis cache with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the `predis/predis` package (~1.0) via Composer. [Laravel Sail](/docs/{{version}}/sail) already includes this extension. In addition, official Laravel deployment platforms such as [Laravel Forge](https://forge.laravel.com) and [Laravel Vapor](https://vapor.laravel.com) have the PhpRedis extension installed by default."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:86 docs/master/cache.md:86
msgid "For more information on configuring Redis, consult its [Laravel documentation page](/docs/{{version}}/redis#configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:88 docs/master/cache.md:88
#, no-wrap
msgid "<a name=\"cache-usage\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:88 docs/master/cache.md:88
#, no-wrap
msgid "Cache Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:91 docs/master/cache.md:91
#, no-wrap
msgid "<a name=\"obtaining-a-cache-instance\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:91 docs/master/cache.md:91
#, no-wrap
msgid "Obtaining A Cache Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:94 docs/master/cache.md:94
msgid "To obtain a cache store instance, you may use the `Cache` facade, which is what we will use throughout this documentation. The `Cache` facade provides convenient, terse access to the underlying implementations of the Laravel cache contracts:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:100 docs/8.x/cache.md:313 docs/8.x/facades.md:65
#: docs/8.x/facades.md:73 docs/8.x/facades.md:108 docs/8.x/mocking.md:84
#: docs/8.x/mocking.md:134 docs/8.x/queues.md:309 docs/master/cache.md:100
#: docs/master/cache.md:313 docs/master/facades.md:21 docs/master/facades.md:64
#: docs/master/facades.md:72 docs/master/facades.md:107
#: docs/master/mocking.md:84 docs/master/mocking.md:134
#: docs/master/queues.md:308
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cache;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:111 docs/master/cache.md:111
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all users of the application.\n"
"         *\n"
"         * @return Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:117 docs/master/cache.md:117
#, no-wrap
msgid "<a name=\"accessing-multiple-cache-stores\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:117 docs/master/cache.md:117
#, no-wrap
msgid "Accessing Multiple Cache Stores"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:120 docs/master/cache.md:120
msgid "Using the `Cache` facade, you may access various cache stores via the `store` method. The key passed to the `store` method should correspond to one of the stores listed in the `stores` configuration array in your `cache` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:122 docs/master/cache.md:122
#, no-wrap
msgid "    $value = Cache::store('file')->get('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:124 docs/master/cache.md:124
#, no-wrap
msgid "    Cache::store('redis')->put('bar', 'baz', 600); // 10 Minutes\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:126 docs/master/cache.md:126
#, no-wrap
msgid "<a name=\"retrieving-items-from-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:126 docs/master/cache.md:126
#, no-wrap
msgid "Retrieving Items From The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:129 docs/master/cache.md:129
msgid "The `Cache` facade's `get` method is used to retrieve items from the cache. If the item does not exist in the cache, `null` will be returned. If you wish, you may pass a second argument to the `get` method specifying the default value you wish to be returned if the item doesn't exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:131 docs/master/cache.md:131
#, no-wrap
msgid "    $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:133 docs/master/cache.md:133
#, no-wrap
msgid "    $value = Cache::get('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:135 docs/master/cache.md:135
msgid "You may even pass a closure as the default value. The result of the closure will be returned if the specified item does not exist in the cache. Passing a closure allows you to defer the retrieval of default values from a database or other external service:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:139 docs/master/cache.md:139
#, no-wrap
msgid "    $value = Cache::get('key', function () {\n"
"        return DB::table(...)->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:141 docs/master/cache.md:141
#, no-wrap
msgid "<a name=\"checking-for-item-existence\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:141 docs/master/cache.md:141
#, no-wrap
msgid "Checking For Item Existence"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:144 docs/master/cache.md:144
msgid "The `has` method may be used to determine if an item exists in the cache. This method will also return `false` if the item exists but its value is `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:148 docs/master/cache.md:148
#, no-wrap
msgid "    if (Cache::has('key')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:150 docs/master/cache.md:150
#, no-wrap
msgid "<a name=\"incrementing-decrementing-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:150 docs/master/cache.md:150
#, no-wrap
msgid "Incrementing / Decrementing Values"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:153 docs/master/cache.md:153
msgid "The `increment` and `decrement` methods may be used to adjust the value of integer items in the cache. Both of these methods accept an optional second argument indicating the amount by which to increment or decrement the item's value:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:158 docs/master/cache.md:158
#, no-wrap
msgid "    Cache::increment('key');\n"
"    Cache::increment('key', $amount);\n"
"    Cache::decrement('key');\n"
"    Cache::decrement('key', $amount);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:160 docs/master/cache.md:160
#, no-wrap
msgid "<a name=\"retrieve-store\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:160 docs/master/cache.md:160
#, no-wrap
msgid "Retrieve & Store"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:163 docs/master/cache.md:163
msgid "Sometimes you may wish to retrieve an item from the cache, but also store a default value if the requested item doesn't exist. For example, you may wish to retrieve all users from the cache or, if they don't exist, retrieve them from the database and add them to the cache. You may do this using the `Cache::remember` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:167 docs/master/cache.md:167
#, no-wrap
msgid "    $value = Cache::remember('users', $seconds, function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:169 docs/master/cache.md:169
msgid "If the item does not exist in the cache, the closure passed to the `remember` method will be executed and its result will be placed in the cache."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:171 docs/master/cache.md:171
msgid "You may use the `rememberForever` method to retrieve an item from the cache or store it forever if it does not exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:175 docs/master/cache.md:175
#, no-wrap
msgid "    $value = Cache::rememberForever('users', function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:177 docs/master/cache.md:177
#, no-wrap
msgid "<a name=\"retrieve-delete\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:177 docs/master/cache.md:177
#, no-wrap
msgid "Retrieve & Delete"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:180 docs/master/cache.md:180
msgid "If you need to retrieve an item from the cache and then delete the item, you may use the `pull` method. Like the `get` method, `null` will be returned if the item does not exist in the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:182 docs/master/cache.md:182
#, no-wrap
msgid "    $value = Cache::pull('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:184 docs/master/cache.md:184
#, no-wrap
msgid "<a name=\"storing-items-in-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:184 docs/master/cache.md:184
#, no-wrap
msgid "Storing Items In The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:187 docs/master/cache.md:187
msgid "You may use the `put` method on the `Cache` facade to store items in the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:189 docs/master/cache.md:189
#, no-wrap
msgid "    Cache::put('key', 'value', $seconds = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:191 docs/master/cache.md:191
msgid "If the storage time is not passed to the `put` method, the item will be stored indefinitely:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:193 docs/master/cache.md:193
#, no-wrap
msgid "    Cache::put('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:195 docs/master/cache.md:195
msgid "Instead of passing the number of seconds as an integer, you may also pass a `DateTime` instance representing the desired expiration time of the cached item:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:197 docs/master/cache.md:197
#, no-wrap
msgid "    Cache::put('key', 'value', now()->addMinutes(10));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:199 docs/master/cache.md:199
#, no-wrap
msgid "<a name=\"store-if-not-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:199 docs/master/cache.md:199
#, no-wrap
msgid "Store If Not Present"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:202 docs/master/cache.md:202
msgid "The `add` method will only add the item to the cache if it does not already exist in the cache store. The method will return `true` if the item is actually added to the cache. Otherwise, the method will return `false`. The `add` method is an atomic operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:204 docs/master/cache.md:204
#, no-wrap
msgid "    Cache::add('key', 'value', $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:206 docs/master/cache.md:206
#, no-wrap
msgid "<a name=\"storing-items-forever\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cache.md:206 docs/master/cache.md:206
#, no-wrap
msgid "Storing Items Forever"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:209 docs/master/cache.md:209
msgid "The `forever` method may be used to store an item in the cache permanently. Since these items will not expire, they must be manually removed from the cache using the `forget` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:211 docs/master/cache.md:211
#, no-wrap
msgid "    Cache::forever('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:213 docs/master/cache.md:213
#, no-wrap
msgid "> {tip} If you are using the Memcached driver, items that are stored \"forever\" may be removed when the cache reaches its size limit.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:215 docs/master/cache.md:215
#, no-wrap
msgid "<a name=\"removing-items-from-the-cache\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:215 docs/master/cache.md:215
#, no-wrap
msgid "Removing Items From The Cache"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:218 docs/master/cache.md:218
msgid "You may remove items from the cache using the `forget` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:220 docs/master/cache.md:220
#, no-wrap
msgid "    Cache::forget('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:222 docs/master/cache.md:222
msgid "You may also remove items by providing a zero or negative number of expiration seconds:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:224 docs/master/cache.md:224
#, no-wrap
msgid "    Cache::put('key', 'value', 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:226 docs/master/cache.md:226
#, no-wrap
msgid "    Cache::put('key', 'value', -5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:228 docs/master/cache.md:228
msgid "You may clear the entire cache using the `flush` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:230 docs/master/cache.md:230
#, no-wrap
msgid "    Cache::flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:232 docs/master/cache.md:232
#, no-wrap
msgid "> {note} Flushing the cache does not respect your configured cache \"prefix\" and will remove all entries from the cache. Consider this carefully when clearing a cache which is shared by other applications.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:234 docs/master/cache.md:234
#, no-wrap
msgid "<a name=\"the-cache-helper\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:234 docs/master/cache.md:234
#, no-wrap
msgid "The Cache Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:237 docs/master/cache.md:237
msgid "In addition to using the `Cache` facade, you may also use the global `cache` function to retrieve and store data via the cache. When the `cache` function is called with a single, string argument, it will return the value of the given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:239 docs/8.x/helpers.md:2597 docs/master/cache.md:239
#: docs/master/helpers.md:2585
#, no-wrap
msgid "    $value = cache('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:241 docs/master/cache.md:241
msgid "If you provide an array of key / value pairs and an expiration time to the function, it will store values in the cache for the specified duration:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:243 docs/master/cache.md:243
#, no-wrap
msgid "    cache(['key' => 'value'], $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:245 docs/master/cache.md:245
#, no-wrap
msgid "    cache(['key' => 'value'], now()->addMinutes(10));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:247 docs/master/cache.md:247
msgid "When the `cache` function is called without any arguments, it returns an instance of the `Illuminate\\Contracts\\Cache\\Factory` implementation, allowing you to call other caching methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:251 docs/master/cache.md:251
#, no-wrap
msgid "    cache()->remember('users', $seconds, function () {\n"
"        return DB::table('users')->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:253 docs/master/cache.md:253
#, no-wrap
msgid "> {tip} When testing call to the global `cache` function, you may use the `Cache::shouldReceive` method just as if you were [testing the facade](/docs/{{version}}/mocking#mocking-facades).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:255 docs/master/cache.md:255
#, no-wrap
msgid "<a name=\"cache-tags\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:255 docs/master/cache.md:255
#, no-wrap
msgid "Cache Tags"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:258 docs/master/cache.md:258
#, no-wrap
msgid "> {note} Cache tags are not supported when using the `file`, `dynamodb`, or `database` cache drivers. Furthermore, when using multiple tags with caches that are stored \"forever\", performance will be best with a driver such as `memcached`, which automatically purges stale records.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:260 docs/master/cache.md:260
#, no-wrap
msgid "<a name=\"storing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:260 docs/master/cache.md:260
#, no-wrap
msgid "Storing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:263 docs/master/cache.md:263
msgid "Cache tags allow you to tag related items in the cache and then flush all cached values that have been assigned a given tag. You may access a tagged cache by passing in an ordered array of tag names. For example, let's access a tagged cache and `put` a value into the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:265 docs/master/cache.md:265
#, no-wrap
msgid "    Cache::tags(['people', 'artists'])->put('John', $john, $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:267 docs/master/cache.md:267
#, no-wrap
msgid "    Cache::tags(['people', 'authors'])->put('Anne', $anne, $seconds);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:269 docs/master/cache.md:269
#, no-wrap
msgid "<a name=\"accessing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:269 docs/master/cache.md:269
#, no-wrap
msgid "Accessing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:272 docs/master/cache.md:272
msgid "To retrieve a tagged cache item, pass the same ordered list of tags to the `tags` method and then call the `get` method with the key you wish to retrieve:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:274 docs/master/cache.md:274
#, no-wrap
msgid "    $john = Cache::tags(['people', 'artists'])->get('John');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:276 docs/master/cache.md:276
#, no-wrap
msgid "    $anne = Cache::tags(['people', 'authors'])->get('Anne');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:278 docs/master/cache.md:278
#, no-wrap
msgid "<a name=\"removing-tagged-cache-items\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:278 docs/master/cache.md:278
#, no-wrap
msgid "Removing Tagged Cache Items"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:281 docs/master/cache.md:281
msgid "You may flush all items that are assigned a tag or list of tags. For example, this statement would remove all caches tagged with either `people`, `authors`, or both. So, both `Anne` and `John` would be removed from the cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:283 docs/master/cache.md:283
#, no-wrap
msgid "    Cache::tags(['people', 'authors'])->flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:285 docs/master/cache.md:285
msgid "In contrast, this statement would remove only cached values tagged with `authors`, so `Anne` would be removed, but not `John`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:287 docs/master/cache.md:287
#, no-wrap
msgid "    Cache::tags('authors')->flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:289 docs/master/cache.md:289
#, no-wrap
msgid "<a name=\"atomic-locks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:289 docs/master/cache.md:289
#, no-wrap
msgid "Atomic Locks"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:292 docs/master/cache.md:292
#, no-wrap
msgid "> {note} To utilize this feature, your application must be using the `memcached`, `redis`, `dynamodb`, `database`, `file`, or `array` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:294 docs/master/cache.md:294
#, no-wrap
msgid "<a name=\"lock-driver-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:297 docs/master/cache.md:297
#, no-wrap
msgid "<a name=\"atomic-locks-prerequisites-database\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:300 docs/master/cache.md:300
msgid "When using the `database` cache driver, you will need to setup a table to contain your application's cache locks. You'll find an example `Schema` declaration for the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:306 docs/master/cache.md:306
#, no-wrap
msgid "    Schema::create('cache_locks', function ($table) {\n"
"        $table->string('key')->primary();\n"
"        $table->string('owner');\n"
"        $table->integer('expiration');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:308 docs/master/cache.md:308
#, no-wrap
msgid "<a name=\"managing-locks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:308 docs/master/cache.md:308
#, no-wrap
msgid "Managing Locks"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:311 docs/master/cache.md:311
msgid "Atomic locks allow for the manipulation of distributed locks without worrying about race conditions. For example, [Laravel Forge](https://forge.laravel.com) uses atomic locks to ensure that only one remote task is being executed on a server at a time. You may create and manage locks using the `Cache::lock` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:315 docs/8.x/cache.md:333 docs/master/cache.md:315
#: docs/master/cache.md:333
#, no-wrap
msgid "    $lock = Cache::lock('foo', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:318 docs/master/cache.md:318
#, no-wrap
msgid "    if ($lock->get()) {\n"
"        // Lock acquired for 10 seconds...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:321 docs/master/cache.md:321
#, no-wrap
msgid "        $lock->release();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:323 docs/master/cache.md:323
msgid "The `get` method also accepts a closure. After the closure is executed, Laravel will automatically release the lock:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:327 docs/master/cache.md:327
#, no-wrap
msgid "    Cache::lock('foo')->get(function () {\n"
"        // Lock acquired indefinitely and automatically released...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:329 docs/master/cache.md:329
msgid "If the lock is not available at the moment you request it, you may instruct Laravel to wait for a specified number of seconds. If the lock can not be acquired within the specified time limit, an `Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:331 docs/master/cache.md:331
#, no-wrap
msgid "    use Illuminate\\Contracts\\Cache\\LockTimeoutException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:336 docs/master/cache.md:336
#, no-wrap
msgid "    try {\n"
"        $lock->block(5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:343 docs/master/cache.md:343
#, no-wrap
msgid "        // Lock acquired after waiting a maximum of 5 seconds...\n"
"    } catch (LockTimeoutException $e) {\n"
"        // Unable to acquire lock...\n"
"    } finally {\n"
"        optional($lock)->release();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:345 docs/master/cache.md:345
msgid "The example above may be simplified by passing a closure to the `block` method. When a closure is passed to this method, Laravel will attempt to acquire the lock for the specified number of seconds and will automatically release the lock once the closure has been executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:349 docs/master/cache.md:349
#, no-wrap
msgid "    Cache::lock('foo', 10)->block(5, function () {\n"
"        // Lock acquired after waiting a maximum of 5 seconds...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:351 docs/master/cache.md:351
#, no-wrap
msgid "<a name=\"managing-locks-across-processes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:351 docs/master/cache.md:351
#, no-wrap
msgid "Managing Locks Across Processes"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:354 docs/master/cache.md:354
msgid "Sometimes, you may wish to acquire a lock in one process and release it in another process. For example, you may acquire a lock during a web request and wish to release the lock at the end of a queued job that is triggered by that request. In this scenario, you should pass the lock's scoped \"owner token\" to the queued job so that the job can re-instantiate the lock using the given token."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:356 docs/master/cache.md:356
msgid "In the example below, we will dispatch a queued job if a lock is successfully acquired. In addition, we will pass the lock's owner token to the queued job via the lock's `owner` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:358 docs/master/cache.md:358
#, no-wrap
msgid "    $podcast = Podcast::find($id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:360 docs/master/cache.md:360
#, no-wrap
msgid "    $lock = Cache::lock('processing', 120);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:364 docs/master/cache.md:364
#, no-wrap
msgid "    if ($result = $lock->get()) {\n"
"        ProcessPodcast::dispatch($podcast, $lock->owner());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:366 docs/master/cache.md:366
msgid "Within our application's `ProcessPodcast` job, we can restore and release the lock using the owner token:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:368 docs/master/cache.md:368
#, no-wrap
msgid "    Cache::restoreLock('processing', $this->owner)->release();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:370 docs/master/cache.md:370
msgid "If you would like to release a lock without respecting its current owner, you may use the `forceRelease` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:372 docs/master/cache.md:372
#, no-wrap
msgid "    Cache::lock('processing')->forceRelease();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:374 docs/master/cache.md:374
#, no-wrap
msgid "<a name=\"adding-custom-cache-drivers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cache.md:374 docs/master/cache.md:374
#, no-wrap
msgid "Adding Custom Cache Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:377 docs/master/cache.md:377
#, no-wrap
msgid "<a name=\"writing-the-driver\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cache.md:377 docs/master/cache.md:377
#, no-wrap
msgid "Writing The Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:380 docs/master/cache.md:380
msgid "To create our custom cache driver, we first need to implement the `Illuminate\\Contracts\\Cache\\Store` [contract](/docs/{{version}}/contracts). So, a MongoDB cache implementation might look something like this:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:384 docs/8.x/session.md:271 docs/master/cache.md:384
#: docs/master/session.md:271
#, no-wrap
msgid "    namespace App\\Extensions;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:386 docs/master/cache.md:386
#, no-wrap
msgid "    use Illuminate\\Contracts\\Cache\\Store;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:400 docs/master/cache.md:400
#, no-wrap
msgid "    class MongoStore implements Store\n"
"    {\n"
"        public function get($key) {}\n"
"        public function many(array $keys) {}\n"
"        public function put($key, $value, $seconds) {}\n"
"        public function putMany(array $values, $seconds) {}\n"
"        public function increment($key, $value = 1) {}\n"
"        public function decrement($key, $value = 1) {}\n"
"        public function forever($key, $value) {}\n"
"        public function forget($key) {}\n"
"        public function flush() {}\n"
"        public function getPrefix() {}\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:402 docs/master/cache.md:402
msgid "We just need to implement each of these methods using a MongoDB connection. For an example of how to implement each of these methods, take a look at the `Illuminate\\Cache\\MemcachedStore` in the [Laravel framework source code](https://github.com/laravel/framework). Once our implementation is complete, we can finish our custom driver registration by calling the `Cache` facade's `extend` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:406 docs/master/cache.md:406
#, no-wrap
msgid "    Cache::extend('mongo', function ($app) {\n"
"        return Cache::repository(new MongoStore);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:408 docs/master/cache.md:408
#, no-wrap
msgid "> {tip} If you're wondering where to put your custom cache driver code, you could create an `Extensions` namespace within your `app` directory. However, keep in mind that Laravel does not have a rigid application structure and you are free to organize your application according to your preferences.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:410 docs/8.x/session.md:296 docs/master/cache.md:410
#: docs/master/session.md:296
#, no-wrap
msgid "<a name=\"registering-the-driver\"></a>\n"
msgstr ""

#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  cache.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  session.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/cache.md:410 docs/8.x/session.md:296 docs/master/cache.md:410
#: docs/master/session.md:296
#, no-wrap
msgid "Registering The Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:413 docs/master/cache.md:413
msgid "To register the custom cache driver with Laravel, we will use the `extend` method on the `Cache` facade. Since other service providers may attempt to read cached values within their `boot` method, we will register our custom driver within a `booting` callback. By using the `booting` callback, we can ensure that the custom driver is registered just before the `boot` method is called on our application's service providers but after the `register` method is called on all of the service providers. We will register our `booting` callback within the `register` method of our application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:421 docs/master/cache.md:421
#, no-wrap
msgid "    use App\\Extensions\\MongoStore;\n"
"    use Illuminate\\Support\\Facades\\Cache;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:437 docs/master/cache.md:437
#, no-wrap
msgid "    class CacheServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            $this->app->booting(function () {\n"
"                 Cache::extend('mongo', function ($app) {\n"
"                     return Cache::repository(new MongoStore);\n"
"                 });\n"
"             });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:448 docs/master/cache.md:448
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:450 docs/master/cache.md:450
msgid "The first argument passed to the `extend` method is the name of the driver. This will correspond to your `driver` option in the `config/cache.php` configuration file. The second argument is a closure that should return an `Illuminate\\Cache\\Repository` instance. The closure will be passed an `$app` instance, which is an instance of the [service container](/docs/{{version}}/container)."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:452 docs/master/cache.md:452
msgid "Once your extension is registered, update your `config/cache.php` configuration file's `driver` option to the name of your extension."
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:457 docs/master/cache.md:457
msgid "To execute code on every cache operation, you may listen for the [events](/docs/{{version}}/events) fired by the cache. Typically, you should place these event listeners within your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:467 docs/master/cache.md:467
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Cache\\Events\\CacheHit' => [\n"
"            'App\\Listeners\\LogCacheHit',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:471 docs/master/cache.md:471
#, no-wrap
msgid "        'Illuminate\\Cache\\Events\\CacheMissed' => [\n"
"            'App\\Listeners\\LogCacheMissed',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:475 docs/master/cache.md:475
#, no-wrap
msgid "        'Illuminate\\Cache\\Events\\KeyForgotten' => [\n"
"            'App\\Listeners\\LogKeyForgotten',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cache.md:479 docs/master/cache.md:479
#, no-wrap
msgid "        'Illuminate\\Cache\\Events\\KeyWritten' => [\n"
"            'App\\Listeners\\LogKeyWritten',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Title #
#: docs/8.x/cashier-paddle.md:1 docs/master/cashier-paddle.md:1
#, no-wrap
msgid "Laravel Cashier (Paddle)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45
msgid "[Paddle Sandbox](#paddle-sandbox)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Paddle JS](#paddle-js)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/8.x/passport.md:45 docs/8.x/sanctum.md:23
#: docs/master/passport.md:45 docs/master/sanctum.md:23
msgid "[Overriding Default Models](#overriding-default-models)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Core Concepts](#core-concepts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Pay Links](#pay-links)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Inline Checkout](#inline-checkout)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[User Identification](#user-identification)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Prices](#prices)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Customer Defaults](#customer-defaults)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Subscription Single Charges](#subscription-single-charges)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Updating Payment Information](#updating-payment-information)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Subscription Modifiers](#subscription-modifiers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Pausing Subscriptions](#pausing-subscriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Handling Paddle Webhooks](#handling-paddle-webhooks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Charging Products](#charging-products)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Refunding Orders](#refunding-orders)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Receipts](#receipts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/cashier-paddle.md:45 docs/master/cashier-paddle.md:43
msgid "[Past & Upcoming Payments](#past-and-upcoming-payments)"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:50 docs/master/cashier-paddle.md:48
msgid "Laravel Cashier Paddle provides an expressive, fluent interface to [Paddle's](https://paddle.com) subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading. In addition to basic subscription management, Cashier can handle: coupons, swapping subscription, subscription \"quantities\", cancellation grace periods, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:52 docs/master/cashier-paddle.md:50
msgid "While working with Cashier we recommend you also review Paddle's [user guides](https://developer.paddle.com/guides) and [API documentation](https://developer.paddle.com/api-reference/intro)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:57 docs/master/cashier-paddle.md:55
msgid "When upgrading to a new version of Cashier, it's important that you carefully review [the upgrade guide](https://github.com/laravel/cashier-paddle/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:62 docs/master/cashier-paddle.md:60
msgid "First, install the Cashier package for Paddle using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:64 docs/master/cashier-paddle.md:62
#, no-wrap
msgid "    composer require laravel/cashier-paddle\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:66 docs/master/cashier-paddle.md:64
#, no-wrap
msgid "> {note} To ensure Cashier properly handles all Paddle events, remember to [set up Cashier's webhook handling](#handling-paddle-webhooks).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:68
#, no-wrap
msgid "<a name=\"paddle-sandbox\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:68
#, no-wrap
msgid "Paddle Sandbox"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:71
msgid "During local and staging development, you should [register a Paddle Sandbox account](https://developer.paddle.com/getting-started/sandbox). This account will give you a sandboxed environment to test and develop your applications without making actual payments. You may use Paddle's [test card numbers](https://developer.paddle.com/getting-started/sandbox#test-cards) to simulate various payment scenarios."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:73
msgid "After you have finished developing your application you may [apply for a Paddle vendor account](https://paddle.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:78 docs/master/cashier-paddle.md:69
msgid "The Cashier service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will create a new `customers` table. In addition, a new `subscriptions` table will be created to store all of your customer's subscriptions. Finally, a new `receipts` table will be created to store all of your application's receipt information:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:82 docs/master/cashier-paddle.md:73
msgid "If you need to overwrite the migrations that are included with Cashier, you can publish them using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:86 docs/master/cashier-paddle.md:77
msgid "If you would like to prevent Cashier's migrations from running entirely, you may use the `ignoreMigrations` provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:88 docs/8.x/cashier-paddle.md:320
#: docs/8.x/cashier-paddle.md:326 docs/8.x/cashier-paddle.md:378
#: docs/8.x/cashier-paddle.md:610 docs/master/cashier-paddle.md:79
#: docs/master/cashier-paddle.md:280 docs/master/cashier-paddle.md:286
#: docs/master/cashier-paddle.md:338 docs/master/cashier-paddle.md:570
#, no-wrap
msgid "    use Laravel\\Paddle\\Cashier;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:106 docs/master/cashier-paddle.md:97
msgid "Before using Cashier, you must add the `Billable` trait to your user model definition. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons and updating payment method information:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:108 docs/master/cashier-paddle.md:99
#, no-wrap
msgid "    use Laravel\\Paddle\\Billable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:115 docs/master/cashier-paddle.md:106
msgid "If you have billable entities that are not users, you may also add the trait to those classes:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:118 docs/master/cashier-paddle.md:109
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Laravel\\Paddle\\Billable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:123 docs/master/cashier-paddle.md:114
#, no-wrap
msgid "    class Team extends Model\n"
"    {\n"
"        use Billable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:128 docs/master/cashier-paddle.md:119
msgid "Next, you should configure your Paddle keys in your application's `.env` file. You can retrieve your Paddle API keys from the Paddle control panel:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:133
#, no-wrap
msgid "    PADDLE_VENDOR_ID=your-paddle-vendor-id\n"
"    PADDLE_VENDOR_AUTH_CODE=your-paddle-vendor-auth-code\n"
"    PADDLE_PUBLIC_KEY=\"your-paddle-public-key\"\n"
"    PADDLE_SANDBOX=true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:135
msgid "The `PADDLE_SANDBOX` environment variable should be set to `true` when you are using [Paddle's Sandbox environment](#paddle-sandbox). The `PADDLE_SANDBOX` variable should be set to `false` if you are deploying your application to production and are using Paddle's live vendor environment."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:137 docs/master/cashier-paddle.md:125
#, no-wrap
msgid "<a name=\"paddle-js\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:137 docs/master/cashier-paddle.md:125
#, no-wrap
msgid "Paddle JS"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:140 docs/master/cashier-paddle.md:128
#, no-wrap
msgid "Paddle relies on its own JavaScript library to initiate the Paddle checkout widget. You can load the JavaScript library by placing the `@paddleJS` Blade directive right before your application layout's closing `</head>` tag:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:143 docs/master/cashier-paddle.md:131
#, no-wrap
msgid "    <head>\n"
"        ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:146 docs/master/cashier-paddle.md:134
#, no-wrap
msgid "        @paddleJS\n"
"    </head>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:151 docs/master/cashier-paddle.md:139
msgid "The default Cashier currency is United States Dollars (USD). You can change the default currency by defining a `CASHIER_CURRENCY` environment variable within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:153 docs/master/cashier-paddle.md:141
#, no-wrap
msgid "    CASHIER_CURRENCY=EUR\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:161 docs/8.x/passport.md:242
#: docs/8.x/sanctum.md:84 docs/master/passport.md:240 docs/master/sanctum.md:84
#, no-wrap
msgid "<a name=\"overriding-default-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:161 docs/8.x/passport.md:242
#: docs/8.x/sanctum.md:84 docs/master/passport.md:240 docs/master/sanctum.md:84
#, no-wrap
msgid "Overriding Default Models"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:166
#, no-wrap
msgid "    use Laravel\\Paddle\\Subscription as CashierSubscription;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:173
msgid "After defining your model, you may instruct Cashier to use your custom model via the `Laravel\\Paddle\\Cashier` class. Typically, you should inform Cashier about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:176
#, no-wrap
msgid "    use App\\Models\\Cashier\\Receipt;\n"
"    use App\\Models\\Cashier\\Subscription;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:187
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Cashier::useReceiptModel(Receipt::class);\n"
"        Cashier::useSubscriptionModel(Subscription::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:189 docs/master/cashier-paddle.md:149
#, no-wrap
msgid "<a name=\"core-concepts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cashier-paddle.md:189 docs/master/cashier-paddle.md:149
#, no-wrap
msgid "Core Concepts"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:192 docs/master/cashier-paddle.md:152
#, no-wrap
msgid "<a name=\"pay-links\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:192 docs/master/cashier-paddle.md:152
#, no-wrap
msgid "Pay Links"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:195 docs/master/cashier-paddle.md:155
msgid "Paddle lacks an extensive CRUD API to perform subscription state changes. Therefore, most interactions with Paddle are done through its [checkout widget](https://developer.paddle.com/guides/how-tos/checkout/paddle-checkout). Before we can display the checkout widget, we must generate a \"pay link\" using Cashier. A \"pay link\" will inform the checkout widget of the billing operation we wish to perform:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:198 docs/master/cashier-paddle.md:158
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:203 docs/master/cashier-paddle.md:163
#, no-wrap
msgid "    Route::get('/user/subscribe', function (Request $request) {\n"
"        $payLink = $request->user()->newSubscription('default', $premium = 34567)\n"
"            ->returnTo(route('home'))\n"
"            ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:206 docs/8.x/cashier-paddle.md:468
#: docs/8.x/cashier-paddle.md:843 docs/8.x/cashier-paddle.md:895
#: docs/master/cashier-paddle.md:166 docs/master/cashier-paddle.md:428
#: docs/master/cashier-paddle.md:803 docs/master/cashier-paddle.md:855
#, no-wrap
msgid "        return view('billing', ['payLink' => $payLink]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:208 docs/master/cashier-paddle.md:168
msgid "Cashier includes a `paddle-button` [Blade component](/docs/{{version}}/blade#components). We may pass the pay link URL to this component as a \"prop\". When this button is clicked, Paddle's checkout widget will be displayed:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:209 docs/8.x/cashier-paddle.md:473
#: docs/master/cashier-paddle.md:169 docs/master/cashier-paddle.md:433
#, no-wrap
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\">\n"
"    Subscribe\n"
"</x-paddle-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:216 docs/master/cashier-paddle.md:176
msgid "By default, this will display a button with the standard Paddle styling. You can remove all Paddle styling by adding the `data-theme=\"none\"` attribute to the component:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:217 docs/master/cashier-paddle.md:177
#, no-wrap
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\" data-theme=\"none\">\n"
"    Subscribe\n"
"</x-paddle-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:224 docs/master/cashier-paddle.md:184
msgid "The Paddle checkout widget is asynchronous. Once the user creates or updates a subscription within the widget, Paddle will send your application webhooks so that you may properly update the subscription state in our own database. Therefore, it's important that you properly [set up webhooks](#handling-paddle-webhooks) to accommodate for state changes from Paddle."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:226 docs/master/cashier-paddle.md:186
msgid "For more information on pay links, you may review [the Paddle API documentation on pay link generation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:228 docs/master/cashier-paddle.md:188
#, no-wrap
msgid "> {note} After a subscription state change, the delay for receiving the corresponding webhook is typically minimal but you should account for this in your application by considering that your user's subscription might not be immediately available after completing the checkout.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:230 docs/master/cashier-paddle.md:190
#, no-wrap
msgid "<a name=\"manually-rendering-pay-links\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:230 docs/master/cashier-paddle.md:190
#, no-wrap
msgid "Manually Rendering Pay Links"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:233 docs/master/cashier-paddle.md:193
msgid "You may also manually render a pay link without using Laravel's built-in Blade components. To get started, generate the pay link URL as demonstrated in previous examples:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:237 docs/master/cashier-paddle.md:197
#, no-wrap
msgid "    $payLink = $request->user()->newSubscription('default', $premium = 34567)\n"
"        ->returnTo(route('home'))\n"
"        ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:239 docs/master/cashier-paddle.md:199
msgid "Next, simply attach the pay link URL to an `a` element in your HTML:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:243 docs/master/cashier-paddle.md:203
#, no-wrap
msgid "    <a href=\"#!\" class=\"ml-4 paddle_button\" data-override=\"{{ $payLink }}\">\n"
"        Paddle Checkout\n"
"    </a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:245 docs/master/cashier-paddle.md:205
#, no-wrap
msgid "<a name=\"inline-checkout\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:245 docs/master/cashier-paddle.md:205
#, no-wrap
msgid "Inline Checkout"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:248 docs/master/cashier-paddle.md:208
msgid "If you don't want to make use of Paddle's \"overlay\" style checkout widget, Paddle also provides the option to display the widget inline. While this approach does not allow you to adjust any of the checkout's HTML fields, it allows you to embed the widget within your application."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:250 docs/master/cashier-paddle.md:210
msgid "To make it easy for you to get started with inline checkout, Cashier includes a `paddle-checkout` Blade component. To get started, you should [generate a pay link](#pay-links) and pass the pay link to the component's `override` attribute:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:251 docs/master/cashier-paddle.md:211
#, no-wrap
msgid "<x-paddle-checkout :override=\"$payLink\" class=\"w-full\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:256 docs/master/cashier-paddle.md:216
msgid "To adjust the height of the inline checkout component, you may pass the `height` attribute to the Blade component:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:258 docs/master/cashier-paddle.md:218
#, no-wrap
msgid "    <x-paddle-checkout :override=\"$payLink\" class=\"w-full\" height=\"500\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:260 docs/master/cashier-paddle.md:220
#, no-wrap
msgid "<a name=\"inline-checkout-without-pay-links\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:260 docs/master/cashier-paddle.md:220
#, no-wrap
msgid "Inline Checkout Without Pay Links"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:263 docs/master/cashier-paddle.md:223
msgid "Alternatively, you may customize the widget with custom options instead of using a pay link:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:268 docs/master/cashier-paddle.md:228
#, no-wrap
msgid "    $options = [\n"
"        'product' => $productId,\n"
"        'title' => 'Product Title',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:270 docs/master/cashier-paddle.md:230
#, no-wrap
msgid "    <x-paddle-checkout :options=\"$options\" class=\"w-full\" />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:272 docs/master/cashier-paddle.md:232
msgid "Please consult Paddle's [guide on Inline Checkout](https://developer.paddle.com/guides/how-tos/checkout/inline-checkout) as well as their [parameter reference](https://developer.paddle.com/reference/paddle-js/parameters) for further details on the inline checkout's available options."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:274 docs/master/cashier-paddle.md:234
#, no-wrap
msgid "> {note} If you would like to also use the `passthrough` option when specifying custom options, you should provide a key / value array as its value. Cashier will automatically handle converting the array to a JSON string. In addition, the `customer_id` passthrough option is reserved for internal Cashier usage.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:276 docs/master/cashier-paddle.md:236
#, no-wrap
msgid "<a name=\"manually-rendering-an-inline-checkout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:276 docs/master/cashier-paddle.md:236
#, no-wrap
msgid "Manually Rendering An Inline Checkout"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:279 docs/master/cashier-paddle.md:239
msgid "You may also manually render an inline checkout without using Laravel's built-in Blade components. To get started, generate the pay link URL [as demonstrated in previous examples](#pay-links)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:281 docs/master/cashier-paddle.md:241
msgid "Next, you may use Paddle.js to initialize the checkout. To keep this example simple, we will demonstrate this using [Alpine.js](https://github.com/alpinejs/alpine); however, you are free to translate this example to your own frontend stack:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:282 docs/master/cashier-paddle.md:242
#, no-wrap
msgid "<div class=\"paddle-checkout\" x-data=\"{}\" x-init=\"\n"
"    Paddle.Checkout.open({\n"
"        override: {{ $payLink }},\n"
"        method: 'inline',\n"
"        frameTarget: 'paddle-checkout',\n"
"        frameInitialHeight: 366,\n"
"        frameStyle: 'width: 100%; background-color: transparent; border: none;'\n"
"    });\n"
"\">\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:296 docs/master/cashier-paddle.md:256
#, no-wrap
msgid "<a name=\"user-identification\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:296 docs/master/cashier-paddle.md:256
#, no-wrap
msgid "User Identification"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:299 docs/master/cashier-paddle.md:259
msgid "In contrast to Stripe, Paddle users are unique across all of Paddle, not unique per Paddle account. Because of this, Paddle's API's do not currently provide a method to update a user's details such as their email address. When generating pay links, Paddle identifies users using the `customer_email` parameter. When creating a subscription, Paddle will try to match the user provided email to an existing Paddle user."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:301 docs/master/cashier-paddle.md:261
msgid "In light of this behavior, there are some important things to keep in mind when using Cashier and Paddle. First, you should be aware that even though subscriptions in Cashier are tied to the same application user, **they could be tied to different users within Paddle's internal systems**. Secondly, each subscription has its own connected payment method information and could also have different email addresses within Paddle's internal systems (depending on which email was assigned to the user when the subscription was created)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:303 docs/master/cashier-paddle.md:263
msgid "Therefore, when displaying subscriptions you should always inform the user which email address or payment method information is connected to the subscription on a per-subscription basis. Retrieving this information can be done with the following methods provided by the `Laravel\\Paddle\\Subscription` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:305 docs/8.x/cashier-paddle.md:1122
#: docs/master/cashier-paddle.md:265 docs/master/cashier-paddle.md:1082
#, no-wrap
msgid "    $subscription = $user->subscription('default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:311 docs/master/cashier-paddle.md:271
#, no-wrap
msgid "    $subscription->paddleEmail();\n"
"    $subscription->paymentMethod();\n"
"    $subscription->cardBrand();\n"
"    $subscription->cardLastFour();\n"
"    $subscription->cardExpirationDate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:313 docs/master/cashier-paddle.md:273
msgid "There is currently no way to modify a user's email address through the Paddle API. When a user wants to update their email address within Paddle, the only way for them to do so is to contact Paddle customer support. When communicating with Paddle, they need to provide the `paddleEmail` value of the subscription to assist Paddle in updating the correct user."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:315 docs/master/cashier-paddle.md:275
#, no-wrap
msgid "<a name=\"prices\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cashier-paddle.md:315 docs/master/cashier-paddle.md:275
#, no-wrap
msgid "Prices"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:318 docs/master/cashier-paddle.md:278
msgid "Paddle allows you to customize prices per currency, essentially allowing you to configure different prices for different countries. Cashier Paddle allows you to retrieve all of the prices for a given product using the `productPrices` method. This method accepts the product IDs of the products you wish to retrieve prices for:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:322 docs/master/cashier-paddle.md:282
#, no-wrap
msgid "    $prices = Cashier::productPrices([123, 456]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:324 docs/master/cashier-paddle.md:284
msgid "The currency will be determined based on the IP address of the request; however, you may optionally provide a specific country to retrieve prices for:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:328 docs/master/cashier-paddle.md:288
#, no-wrap
msgid "    $prices = Cashier::productPrices([123, 456], ['customer_country' => 'BE']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:330 docs/master/cashier-paddle.md:290
msgid "After retrieving the prices you may display them however you wish:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:331 docs/8.x/cashier-paddle.md:385
#: docs/master/cashier-paddle.md:291 docs/master/cashier-paddle.md:345
#, no-wrap
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->price()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:340 docs/master/cashier-paddle.md:300
msgid "You may also display the net price (excludes tax) and display the tax amount separately:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:341 docs/master/cashier-paddle.md:301
#, no-wrap
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->price()->net() }} (+ {{ $price->price()->tax() }} tax)</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:350 docs/master/cashier-paddle.md:310
msgid "If you retrieved prices for subscription plans you can display their initial and recurring price separately:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:351 docs/master/cashier-paddle.md:311
#, no-wrap
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - Initial: {{ $price->initialPrice()->gross() }} - Recurring: {{ $price->recurringPrice()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:360 docs/master/cashier-paddle.md:320
msgid "For more information, [check Paddle's API documentation on prices](https://developer.paddle.com/api-reference/checkout-api/prices/getprices)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:362 docs/master/cashier-paddle.md:322
#, no-wrap
msgid "<a name=\"prices-customers\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:365 docs/master/cashier-paddle.md:325
msgid "If a user is already a customer and you would like to display the prices that apply to that customer, you may do so by retrieving the prices directly from the customer instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:369 docs/master/cashier-paddle.md:329
#, no-wrap
msgid "    $prices = User::find(1)->productPrices([123, 456]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:371 docs/master/cashier-paddle.md:331
msgid "Internally, Cashier will use the user's [`paddleCountry` method](#customer-defaults) to retrieve the prices in their currency. So, for example, a user living in the United States will see prices in USD while a user in Belgium will see prices in EUR. If no matching currency can be found the default currency of the product will be used. You can customize all prices of a product or subscription plan in the Paddle control panel."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:373 docs/master/cashier-paddle.md:333
#, no-wrap
msgid "<a name=\"prices-coupons\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:376 docs/master/cashier-paddle.md:336
msgid "You may also choose to display prices after a coupon reduction. When calling the `productPrices` method, coupons may be passed as a comma delimited string:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:382 docs/master/cashier-paddle.md:342
#, no-wrap
msgid "    $prices = Cashier::productPrices([123, 456], [\n"
"        'coupons' => 'SUMMERSALE,20PERCENTOFF'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:384 docs/master/cashier-paddle.md:344
msgid "Then, display the calculated prices using the `price` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:394 docs/master/cashier-paddle.md:354
msgid "You may display the original listed prices (without coupon discounts) using the `listPrice` method:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:395 docs/master/cashier-paddle.md:355
#, no-wrap
msgid "<ul>\n"
"    @foreach ($prices as $price)\n"
"        <li>{{ $price->product_title }} - {{ $price->listPrice()->gross() }}</li>\n"
"    @endforeach\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:404 docs/master/cashier-paddle.md:364
#, no-wrap
msgid "> {note} When using the prices API, Paddle only allows applying coupons to one-time purchase products and not to subscription plans.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:409 docs/master/cashier-paddle.md:369
#, no-wrap
msgid "<a name=\"customer-defaults\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:409 docs/master/cashier-paddle.md:369
#, no-wrap
msgid "Customer Defaults"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:412 docs/master/cashier-paddle.md:372
msgid "Cashier allows you to define some useful defaults for your customers when creating pay links. Setting these defaults allow you to pre-fill a customer's email address, country, and postal code so that they can immediately move on to the payment portion of the checkout widget. You can set these defaults by overriding the following methods on your billable model:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:422 docs/master/cashier-paddle.md:382
#, no-wrap
msgid "    /**\n"
"     * Get the customer's email address to associate with Paddle.\n"
"     *\n"
"     * @return string|null\n"
"     */\n"
"    public function paddleEmail()\n"
"    {\n"
"        return $this->email;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:435 docs/master/cashier-paddle.md:395
#, no-wrap
msgid "    /**\n"
"     * Get the customer's country to associate with Paddle.\n"
"     *\n"
"     * This needs to be a 2 letter code. See the link below for supported countries.\n"
"     *\n"
"     * @return string|null\n"
"     * @link https://developer.paddle.com/reference/platform-parameters/supported-countries\n"
"     */\n"
"    public function paddleCountry()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:448 docs/master/cashier-paddle.md:408
#, no-wrap
msgid "    /**\n"
"     * Get the customer's postal code to associate with Paddle.\n"
"     *\n"
"     * See the link below for countries which require this.\n"
"     *\n"
"     * @return string|null\n"
"     * @link https://developer.paddle.com/reference/platform-parameters/supported-countries#countries-requiring-postcode\n"
"     */\n"
"    public function paddlePostcode()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:450 docs/master/cashier-paddle.md:410
msgid "These defaults will be used for every action in Cashier that generates a [pay link](#pay-links)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:458 docs/master/cashier-paddle.md:418
msgid "To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription pay link:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:465 docs/master/cashier-paddle.md:425
#, no-wrap
msgid "    Route::get('/user/subscribe', function (Request $request) {\n"
"        $payLink = $user->newSubscription('default', $premium = 12345)\n"
"            ->returnTo(route('home'))\n"
"            ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:470 docs/master/cashier-paddle.md:430
msgid "The first argument passed to the `newSubscription` method should be the name of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. The second argument is the specific plan the user is subscribing to. This value should correspond to the plan's identifier in Paddle. The `returnTo` method accepts a URL that your user will be redirected to after they successfully complete the checkout."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:472 docs/master/cashier-paddle.md:432
msgid "The `create` method will create a pay link which you can use to generate a payment button. The payment button can be generated using the `paddle-button` [Blade component](/docs/{{version}}/blade#components) that is included with Cashier Paddle:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:480 docs/master/cashier-paddle.md:440
msgid "After the user has finished their checkout, a `subscription_created` webhook will be dispatched from Paddle. Cashier will receive this webhook and setup the subscription for your customer. In order to make sure all webhooks are properly received and handled by your application, ensure you have properly [setup webhook handling](#handling-paddle-webhooks)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:485 docs/master/cashier-paddle.md:445
msgid "If you would like to specify additional customer or subscription details, you may do so by passing them as an array of key / value pairs to the `create` method. To learn more about the additional fields supported by Paddle, check out Paddle's documentation on [generating pay links](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink):"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:491 docs/master/cashier-paddle.md:451
#, no-wrap
msgid "    $payLink = $user->newSubscription('default', $monthly = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->create([\n"
"            'vat_number' => $vatNumber,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:493 docs/master/cashier-paddle.md:453
#, no-wrap
msgid "<a name=\"subscriptions-coupons\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:501 docs/master/cashier-paddle.md:461
#, no-wrap
msgid "    $payLink = $user->newSubscription('default', $monthly = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->withCoupon('code')\n"
"        ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:503 docs/master/cashier-paddle.md:463
#, no-wrap
msgid "<a name=\"metadata\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:503 docs/master/cashier-paddle.md:463
#, no-wrap
msgid "Metadata"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:506 docs/master/cashier-paddle.md:466
msgid "You can also pass an array of metadata using the `withMetadata` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:511 docs/master/cashier-paddle.md:471
#, no-wrap
msgid "    $payLink = $user->newSubscription('default', $monthly = 12345)\n"
"        ->returnTo(route('home'))\n"
"        ->withMetadata(['key' => 'value'])\n"
"        ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:513 docs/master/cashier-paddle.md:473
#, no-wrap
msgid "> {note} When providing metadata, please avoid using `subscription_name` as a metadata key. This key is reserved for internal use by Cashier.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:518 docs/master/cashier-paddle.md:478
msgid "Once a user is subscribed to your application, you may check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the user has an active subscription, even if the subscription is currently within its trial period:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:558 docs/master/cashier-paddle.md:518
msgid "The `subscribedToPlan` method may be used to determine if the user is subscribed to a given plan based on a given Paddle plan ID. In this example, we will determine if the user's `default` subscription is actively subscribed to the monthly plan:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:562 docs/master/cashier-paddle.md:522
#, no-wrap
msgid "    if ($user->subscribedToPlan($monthly = 12345, 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:564 docs/master/cashier-paddle.md:524
msgid "By passing an array to the `subscribedToPlan` method, you may determine if the user's `default` subscription is actively subscribed to the monthly or the yearly plan:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:568 docs/master/cashier-paddle.md:528
#, no-wrap
msgid "    if ($user->subscribedToPlan([$monthly = 12345, $yearly = 54321], 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:585 docs/master/cashier-paddle.md:545
msgid "You may also determine if a user has cancelled their subscription, but are still on their \"grace period\" until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their \"grace period\" until March 10th. Note that the `subscribed` method still returns `true` during this time:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:597 docs/master/cashier-paddle.md:557
#, no-wrap
msgid "<a name=\"past-due-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:597 docs/master/cashier-paddle.md:557
#, no-wrap
msgid "Past Due Status"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:600 docs/master/cashier-paddle.md:560
msgid "If a payment fails for a subscription, it will be marked as `past_due`. When your subscription is in this state it will not be active until the customer has updated their payment information. You may determine if a subscription is past due using the `pastDue` method on the subscription instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:604 docs/master/cashier-paddle.md:564
#, no-wrap
msgid "    if ($user->subscription('default')->pastDue()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:606 docs/master/cashier-paddle.md:566
msgid "When a subscription is past due, you should instruct the user to [update their payment information](#updating-payment-information). You may configure how past due subscriptions are handled in your [Paddle subscription settings](https://vendors.paddle.com/subscription-settings)."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:608 docs/master/cashier-paddle.md:568
msgid "If you would like subscriptions to still be considered active when they are `past_due`, you may use the `keepPastDueSubscriptionsActive` method provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:622 docs/master/cashier-paddle.md:582
#, no-wrap
msgid "> {note} When a subscription is in a `past_due` state it cannot be changed until payment information has been updated. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in a `past_due` state.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:650 docs/master/cashier-paddle.md:610
#, no-wrap
msgid "    Subscription::query()->active();\n"
"    Subscription::query()->onTrial();\n"
"    Subscription::query()->notOnTrial();\n"
"    Subscription::query()->pastDue();\n"
"    Subscription::query()->recurring();\n"
"    Subscription::query()->ended();\n"
"    Subscription::query()->paused();\n"
"    Subscription::query()->notPaused();\n"
"    Subscription::query()->onPausedGracePeriod();\n"
"    Subscription::query()->notOnPausedGracePeriod();\n"
"    Subscription::query()->cancelled();\n"
"    Subscription::query()->notCancelled();\n"
"    Subscription::query()->onGracePeriod();\n"
"    Subscription::query()->notOnGracePeriod();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:652 docs/master/cashier-paddle.md:612
#, no-wrap
msgid "<a name=\"subscription-single-charges\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:652 docs/master/cashier-paddle.md:612
#, no-wrap
msgid "Subscription Single Charges"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:655 docs/master/cashier-paddle.md:615
msgid "Subscription single charges allow you to charge subscribers with a one-time charge on top of their subscriptions:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:657 docs/master/cashier-paddle.md:617
#, no-wrap
msgid "    $response = $user->subscription('default')->charge(12.99, 'Support Add-on');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:659 docs/master/cashier-paddle.md:619
msgid "In contrast to [single charges](#single-charges), this method will immediately charge the customer's stored payment method for the subscription. The charge amount should always be defined in the currency of the subscription."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:661 docs/master/cashier-paddle.md:621
#, no-wrap
msgid "<a name=\"updating-payment-information\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:661 docs/master/cashier-paddle.md:621
#, no-wrap
msgid "Updating Payment Information"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:664 docs/master/cashier-paddle.md:624
msgid "Paddle always saves a payment method per subscription. If you want to update the default payment method for a subscription, you should first generate a subscription \"update URL\" using the `updateUrl` method on the subscription model:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:670 docs/master/cashier-paddle.md:630
#, no-wrap
msgid "    $updateUrl = $user->subscription('default')->updateUrl();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:672 docs/master/cashier-paddle.md:632
msgid "Then, you may use the generated URL in combination with Cashier's provided `paddle-button` Blade component to allow the user to initiate the Paddle widget and update their payment information:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:673 docs/master/cashier-paddle.md:633
#, no-wrap
msgid "<x-paddle-button :url=\"$updateUrl\" class=\"px-8 py-4\">\n"
"    Update Card\n"
"</x-paddle-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:680 docs/master/cashier-paddle.md:640
msgid "When a user has finished updating their information, a `subscription_updated` webhook will be dispatched by Paddle and the subscription details will be updated in your application's database."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:685 docs/master/cashier-paddle.md:645
msgid "After a user has subscribed to your application, they may occasionally want to change to a new subscription plan. To update the subscription plan for a user, you should pass the Paddle plan's identifier to the subscription's `swap` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:691 docs/master/cashier-paddle.md:651
#, no-wrap
msgid "    $user->subscription('default')->swap($premium = 34567);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:693 docs/master/cashier-paddle.md:653
msgid "If the user is on a trial, the trial period will be maintained. Additionally, if a \"quantity\" exists for the subscription, that quantity will also be maintained."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:695 docs/master/cashier-paddle.md:655
msgid "If you would like to swap plans and cancel any trial period the user is currently on, you may use the `skipTrial` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:699 docs/master/cashier-paddle.md:659
#, no-wrap
msgid "    $user->subscription('default')\n"
"            ->skipTrial()\n"
"            ->swap($premium = 34567);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:701 docs/master/cashier-paddle.md:661
msgid "If you would like to swap plans and immediately invoice the user instead of waiting for their next billing cycle, you may use the `swapAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:705 docs/master/cashier-paddle.md:665
#, no-wrap
msgid "    $user->subscription('default')->swapAndInvoice($premium = 34567);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:710 docs/master/cashier-paddle.md:670
msgid "By default, Paddle prorates charges when swapping between plans. The `noProrate` method may be used to update the subscription's without prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:712 docs/master/cashier-paddle.md:672
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->swap($premium = 34567);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:717 docs/master/cashier-paddle.md:677
msgid "Sometimes subscriptions are affected by \"quantity\". For example, a project management application might charge $10 per month per project. To easily increment or decrement your subscription's quantity, use the `incrementQuantity` and `decrementQuantity` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:739 docs/master/cashier-paddle.md:699
#, no-wrap
msgid "<a name=\"subscription-modifiers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:739 docs/master/cashier-paddle.md:699
#, no-wrap
msgid "Subscription Modifiers"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:742 docs/master/cashier-paddle.md:702
msgid "Subscription modifiers allow you to implement [metered billing](https://developer.paddle.com/guides/how-tos/subscriptions/metered-billing#using-subscription-price-modifiers) or extend subscriptions with add-ons."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:744 docs/master/cashier-paddle.md:704
msgid "For example, you might want to offer a \"Premium Support\" add-on with your standard subscription. You can create this modifier like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:746 docs/master/cashier-paddle.md:706
#, no-wrap
msgid "    $modifier = $user->subscription('default')->newModifier(12.99)->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:748 docs/master/cashier-paddle.md:708
msgid "The example above will add a $12.99 add-on to the subscription. By default, this charge will recur on every interval you have configured for the subscription. If you would like, you can add a readable description to the modifier using the modifier's `description` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:752 docs/master/cashier-paddle.md:712
#, no-wrap
msgid "    $modifier = $user->subscription('default')->newModifier(12.99)\n"
"        ->description('Premium Support')\n"
"        ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:754 docs/master/cashier-paddle.md:714
msgid "To illustrate how to implement metered billing using modifiers, imagine your application charges per SMS message sent by the user. First, you should create a $0 plan in your Paddle dashboard. Once the user has been subscribed to this plan, you can add modifiers representing each individual charge to the subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:759 docs/master/cashier-paddle.md:719
#, no-wrap
msgid "    $modifier = $user->subscription('default')->newModifier(0.99)\n"
"        ->description('New text message')\n"
"        ->oneTime()\n"
"        ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:761 docs/master/cashier-paddle.md:721
msgid "As you can see, we invoked the `oneTime` method when creating this modifier. This method will ensure the modifier is only charged once and does not recur every billing interval."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:763 docs/master/cashier-paddle.md:723
#, no-wrap
msgid "<a name=\"retrieving-modifiers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:763 docs/master/cashier-paddle.md:723
#, no-wrap
msgid "Retrieving Modifiers"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:766 docs/master/cashier-paddle.md:726
msgid "You may retrieve a list of all modifiers for a subscription via the `modifiers` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:768 docs/master/cashier-paddle.md:728
#, no-wrap
msgid "    $modifiers = $user->subscription('default')->modifiers();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:773 docs/master/cashier-paddle.md:733
#, no-wrap
msgid "    foreach ($modifiers as $modifier) {\n"
"        $modifier->amount(); // $0.99\n"
"        $modifier->description; // New text message.\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:775 docs/master/cashier-paddle.md:735
#, no-wrap
msgid "<a name=\"deleting-modifiers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:775 docs/master/cashier-paddle.md:735
#, no-wrap
msgid "Deleting Modifiers"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:778 docs/master/cashier-paddle.md:738
msgid "Modifiers may be deleted by invoking the `delete` method on a `Laravel\\Paddle\\Modifier` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:780 docs/master/cashier-paddle.md:740
#, no-wrap
msgid "    $modifier->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:782 docs/master/cashier-paddle.md:742
#, no-wrap
msgid "<a name=\"pausing-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:782 docs/master/cashier-paddle.md:742
#, no-wrap
msgid "Pausing Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:785 docs/master/cashier-paddle.md:745
msgid "To pause a subscription, call the `pause` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:787 docs/master/cashier-paddle.md:747
#, no-wrap
msgid "    $user->subscription('default')->pause();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:789 docs/master/cashier-paddle.md:749
msgid "When a subscription is paused, Cashier will automatically set the `paused_from` column in your database. This column is used to know when the `paused` method should begin returning `true`. For example, if a customer pauses a subscription on March 1st, but the subscription was not scheduled to recur until March 5th, the `paused` method will continue to return `false` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:791 docs/master/cashier-paddle.md:751
msgid "You may determine if a user has paused their subscription but are still on their \"grace period\" using the `onPausedGracePeriod` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:795 docs/master/cashier-paddle.md:755
#, no-wrap
msgid "    if ($user->subscription('default')->onPausedGracePeriod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:797 docs/master/cashier-paddle.md:757
msgid "To resume a paused a subscription, you may call the `unpause` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:799 docs/master/cashier-paddle.md:759
#, no-wrap
msgid "    $user->subscription('default')->unpause();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:801 docs/master/cashier-paddle.md:761
#, no-wrap
msgid "> {note} A subscription cannot be modified while it is paused. If you want to swap to a different plan or update quantities you must resume the subscription first.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:810 docs/master/cashier-paddle.md:770
msgid "When a subscription is cancelled, Cashier will automatically set the `ends_at` column in your database. This column is used to know when the `subscribed` method should begin returning `false`. For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the `subscribed` method will continue to return `true` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:818 docs/master/cashier-paddle.md:778
msgid "If you wish to cancel a subscription immediately, you may call the `cancelNow` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:822 docs/master/cashier-paddle.md:782
#, no-wrap
msgid "> {note} Paddle's subscriptions cannot be resumed after cancellation. If your customer wishes to resume their subscription, they will have to subscribe to a new subscription.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:830 docs/master/cashier-paddle.md:790
#, no-wrap
msgid "> {note} While trialing and collecting payment method details up front, Paddle prevents any subscription changes such as swapping plans or updating quantities. If you want to allow a customer to swap plans during a trial the subscription must be cancelled and recreated.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:832 docs/master/cashier-paddle.md:792
msgid "If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the `trialDays` method when creating your subscription pay links:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:840 docs/master/cashier-paddle.md:800
#, no-wrap
msgid "    Route::get('/user/subscribe', function (Request $request) {\n"
"        $payLink = $request->user()->newSubscription('default', $monthly = 12345)\n"
"                    ->returnTo(route('home'))\n"
"                    ->trialDays(10)\n"
"                    ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:845 docs/master/cashier-paddle.md:805
msgid "This method will set the trial period ending date on the subscription record within your application's database, as well as instruct Paddle to not begin billing the customer until after this date."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:849 docs/master/cashier-paddle.md:809
msgid "You may determine if the user is within their trial period using either the `onTrial` method of the user instance or the `onTrial` method of the subscription instance. The two examples below are equivalent:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:859 docs/master/cashier-paddle.md:819
#, no-wrap
msgid "<a name=\"defining-trial-days-in-paddle-cashier\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/cashier-paddle.md:859 docs/master/cashier-paddle.md:819
#, no-wrap
msgid "Defining Trial Days In Paddle / Cashier"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:862 docs/master/cashier-paddle.md:822
msgid "You may choose to define how many trial days your plan's receive in the Paddle dashboard or always pass them explicitly using Cashier. If you choose to define your plan's trial days in Paddle you should be aware that new subscriptions, including new subscriptions for a customer that had a subscription in the past, will always receive a trial period unless you explicitly call the `trialDays(0)` method."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:867 docs/master/cashier-paddle.md:827
msgid "If you would like to offer trial periods without collecting the user's payment method information up front, you may set the `trial_ends_at` column on the customer record attached to your user to your desired trial ending date. This is typically done during user registration:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:873 docs/master/cashier-paddle.md:833
#, no-wrap
msgid "    $user = User::create([\n"
"        // ...\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:877 docs/master/cashier-paddle.md:837
#, no-wrap
msgid "    $user->createAsCustomer([\n"
"        'trial_ends_at' => now()->addDays(10)\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:879 docs/master/cashier-paddle.md:839
msgid "Cashier refers to this type of trial as a \"generic trial\", since it is not attached to any existing subscription. The `onTrial` method on the `User` instance will return `true` if the current date is not past the value of `trial_ends_at`:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:892 docs/master/cashier-paddle.md:852
#, no-wrap
msgid "    Route::get('/user/subscribe', function (Request $request) {\n"
"        $payLink = $user->newSubscription('default', $monthly = 12345)\n"
"            ->returnTo(route('home'))\n"
"            ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:903 docs/master/cashier-paddle.md:863
msgid "You may use the `onGenericTrial` method if you wish to know specifically that the user is within their \"generic\" trial period and has not created an actual subscription yet:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:909 docs/master/cashier-paddle.md:869
#, no-wrap
msgid "> {note} There is no way to extend or modify a trial period on a Paddle subscription after it has been created.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:911 docs/master/cashier-paddle.md:871
#, no-wrap
msgid "<a name=\"handling-paddle-webhooks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cashier-paddle.md:911 docs/master/cashier-paddle.md:871
#, no-wrap
msgid "Handling Paddle Webhooks"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:914 docs/master/cashier-paddle.md:874
msgid "Paddle can notify your application of a variety of events via webhooks. By default, a route that points to Cashier's webhook controller is registered by the Cashier service provider. This controller will handle all incoming webhook requests."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:916 docs/master/cashier-paddle.md:876
msgid "By default, this controller will automatically handle cancelling subscriptions that have too many failed charges ([as defined by your Paddle subscription settings](https://vendors.paddle.com/subscription-settings)), subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Paddle webhook event you like."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:918 docs/master/cashier-paddle.md:878
msgid "To ensure your application can handle Paddle webhooks, be sure to [configure the webhook URL in the Paddle control panel](https://vendors.paddle.com/alerts-webhooks). By default, Cashier's webhook controller responds to the `/paddle/webhook` URL path. The full list of all webhooks you should enable in the Paddle control panel are:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:924 docs/master/cashier-paddle.md:884
msgid "- Subscription Created - Subscription Updated - Subscription Cancelled - Payment Succeeded - Subscription Payment Succeeded"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:926 docs/master/cashier-paddle.md:886
#, no-wrap
msgid "> {note} Make sure you protect incoming requests with Cashier's included [webhook signature verification](/docs/{{version}}/cashier-paddle#verifying-webhook-signatures) middleware.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:931 docs/master/cashier-paddle.md:891
msgid "Since Paddle webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), be sure to list the URI as an exception in your `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:935 docs/master/cashier-paddle.md:895
#, no-wrap
msgid "    protected $except = [\n"
"        'paddle/*',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:940 docs/master/cashier-paddle.md:900
msgid "Cashier automatically handles subscription cancellation on failed charges and other common Paddle webhooks, but if you have additional webhook events you would like to handle, you should extend Cashier's `WebhookController`."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:942 docs/master/cashier-paddle.md:902
msgid "Your controller's method names should correspond to Cashier's controller method conventions. Specifically, methods should be prefixed with `handle` and the \"camel case\" name of the webhook you wish to handle. For example, if you wish to handle the `payment_succeeded` webhook, you should add a `handlePaymentSucceeded` method to the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:948 docs/8.x/cashier-paddle.md:1142
#: docs/master/cashier-paddle.md:908 docs/master/cashier-paddle.md:1102
#, no-wrap
msgid "    use Laravel\\Paddle\\Http\\Controllers\\WebhookController as CashierController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:962
#, no-wrap
msgid "    class WebhookController extends CashierController\n"
"    {\n"
"        /**\n"
"         * Handle the payment succeeded webhook.\n"
"         *\n"
"         * @param  array  $payload\n"
"         * @return void\n"
"         */\n"
"        public function handlePaymentSucceeded($payload)\n"
"        {\n"
"            // Handle the event...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:968 docs/master/cashier-paddle.md:928
#, no-wrap
msgid "    Route::post('/paddle/webhook', WebhookController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:970 docs/master/cashier-paddle.md:930
msgid "Cashier emits a `Laravel\\Paddle\\Events\\WebhookReceived` event when a webhook is received and a `Laravel\\Paddle\\Events\\WebhookHandled` event when a webhook was handled. Both events contain the full payload of the Paddle webhook."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:972 docs/master/cashier-paddle.md:932
msgid "Cashier also emit events dedicated to the type of the received webhook. In addition to the full payload from Paddle, they also contain the relevant models that were used to process the webhook such as the billable model, the subscription, or the receipt:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:980 docs/master/cashier-paddle.md:940
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `Laravel\\Paddle\\Events\\PaymentSucceeded`\n"
"- `Laravel\\Paddle\\Events\\SubscriptionPaymentSucceeded`\n"
"- `Laravel\\Paddle\\Events\\SubscriptionCreated`\n"
"- `Laravel\\Paddle\\Events\\SubscriptionUpdated`\n"
"- `Laravel\\Paddle\\Events\\SubscriptionCancelled`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:982 docs/master/cashier-paddle.md:942
msgid "You can also override the default, built-in webhook route by defining the `CASHIER_WEBHOOK` environment variable in your application's `.env` file. This value should be the full URL to your webhook route and needs to match the URL set in your Paddle control panel:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/cashier-paddle.md:983 docs/master/cashier-paddle.md:943
#, no-wrap
msgid "CASHIER_WEBHOOK=https://example.com/my-paddle-webhook-url\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:991 docs/master/cashier-paddle.md:951
msgid "To secure your webhooks, you may use [Paddle's webhook signatures](https://developer.paddle.com/webhook-reference/verifying-webhooks). For convenience, Cashier automatically includes a middleware which validates that the incoming Paddle webhook request is valid."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:993 docs/master/cashier-paddle.md:953
msgid "To enable webhook verification, ensure that the `PADDLE_PUBLIC_KEY` environment variable is defined in your application's `.env` file. The public key may be retrieved from your Paddle account dashboard."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1001 docs/master/cashier-paddle.md:961
msgid "If you would like to make a one-time charge against a customer, you may use the `charge` method on a billable model instance to generate a pay link for the charge. The `charge` method accepts the charge amount (float) as its first argument and a charge description as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1009 docs/master/cashier-paddle.md:969
#, no-wrap
msgid "    Route::get('/store', function (Request $request) {\n"
"        return view('store', [\n"
"            'payLink' => $user->charge(12.99, 'Action Figure')\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1011 docs/master/cashier-paddle.md:971
msgid "After generating the pay link, you may use Cashier's provided `paddle-button` Blade component to allow the user to initiate the Paddle widget and complete the charge:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:1012 docs/8.x/cashier-paddle.md:1052
#: docs/master/cashier-paddle.md:972 docs/master/cashier-paddle.md:1012
#, no-wrap
msgid "<x-paddle-button :url=\"$payLink\" class=\"px-8 py-4\">\n"
"    Buy\n"
"</x-paddle-button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1019 docs/master/cashier-paddle.md:979
msgid "The `charge` method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Paddle pay link creation. Please consult [the Paddle documentation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink) to learn more about the options available to you when creating charges:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1023 docs/master/cashier-paddle.md:983
#, no-wrap
msgid "    $payLink = $user->charge(12.99, 'Action Figure', [\n"
"        'custom_option' => $value,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1025 docs/master/cashier-paddle.md:985
msgid "Charges happen in the currency specified in the `cashier.currency` configuration option. By default, this is set to USD. You may override the default currency by defining the `CASHIER_CURRENCY` environment variable in your application's `.env` file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/cashier-paddle.md:1026 docs/master/cashier-paddle.md:986
#, no-wrap
msgid "CASHIER_CURRENCY=EUR\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1031 docs/master/cashier-paddle.md:991
msgid "You can also [override prices per currency](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink#price-overrides) using Paddle's dynamic pricing matching system. To do so, pass an array of prices instead of a fixed amount:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1036 docs/master/cashier-paddle.md:996
#, no-wrap
msgid "    $payLink = $user->charge([\n"
"        'USD:19.99',\n"
"        'EUR:15.99',\n"
"    ], 'Action Figure');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1038 docs/master/cashier-paddle.md:998
#, no-wrap
msgid "<a name=\"charging-products\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:1038 docs/master/cashier-paddle.md:998
#, no-wrap
msgid "Charging Products"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1041 docs/master/cashier-paddle.md:1001
msgid "If you would like to make a one-time charge against a specific product configured within Paddle, you may use the `chargeProduct` method on a billable model instance to generate a pay link:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1049 docs/master/cashier-paddle.md:1009
#, no-wrap
msgid "    Route::get('/store', function (Request $request) {\n"
"        return view('store', [\n"
"            'payLink' => $request->user()->chargeProduct($productId = 123)\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1051 docs/master/cashier-paddle.md:1011
msgid "Then, you may provide the pay link to the `paddle-button` component to allow the user to initialize the Paddle widget:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1059 docs/master/cashier-paddle.md:1019
msgid "The `chargeProduct` method accepts an array as its second argument, allowing you to pass any options you wish to the underlying Paddle pay link creation. Please consult [the Paddle documentation](https://developer.paddle.com/api-reference/product-api/pay-links/createpaylink) regarding the options that are available to you when creating charges:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1063 docs/master/cashier-paddle.md:1023
#, no-wrap
msgid "    $payLink = $user->chargeProduct($productId, [\n"
"        'custom_option' => $value,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1065 docs/master/cashier-paddle.md:1025
#, no-wrap
msgid "<a name=\"refunding-orders\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:1065 docs/master/cashier-paddle.md:1025
#, no-wrap
msgid "Refunding Orders"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1068 docs/master/cashier-paddle.md:1028
msgid "If you need to refund a Paddle order, you may use the `refund` method. This method accepts the Paddle order ID as its first argument. You may retrieve the receipts for a given billable model using the `receipts` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1074 docs/8.x/cashier-paddle.md:1080
#: docs/master/cashier-paddle.md:1034 docs/master/cashier-paddle.md:1040
#, no-wrap
msgid "    $receipt = $user->receipts()->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1076 docs/master/cashier-paddle.md:1036
#, no-wrap
msgid "    $refundRequestId = $user->refund($receipt->order_id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1078 docs/master/cashier-paddle.md:1038
msgid "You may optionally specify a specific amount to refund as well as a reason for the refund:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1084 docs/master/cashier-paddle.md:1044
#, no-wrap
msgid "    $refundRequestId = $user->refund(\n"
"        $receipt->order_id, 5.00, 'Unused product time'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1086 docs/master/cashier-paddle.md:1046
#, no-wrap
msgid "> {tip} You can use the `$refundRequestId` as a reference for the refund when contacting Paddle support.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1088 docs/master/cashier-paddle.md:1048
#, no-wrap
msgid "<a name=\"receipts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/cashier-paddle.md:1088 docs/master/cashier-paddle.md:1048
#, no-wrap
msgid "Receipts"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1091
msgid "You may easily retrieve an array of a billable model's receipts via the `receipts` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1097
#, no-wrap
msgid "    $receipts = $user->receipts;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1099 docs/master/cashier-paddle.md:1059
msgid "When listing the receipts for the customer, you may use the receipt instance's methods to display the relevant receipt information. For example, you may wish to list every receipt in a table, allowing the user to easily download any of the receipts:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/cashier-paddle.md:1100 docs/master/cashier-paddle.md:1060
#, no-wrap
msgid "<table>\n"
"    @foreach ($receipts as $receipt)\n"
"        <tr>\n"
"            <td>{{ $receipt->paid_at->toFormattedDateString() }}</td>\n"
"            <td>{{ $receipt->amount() }}</td>\n"
"            <td><a href=\"{{ $receipt->receipt_url }}\" target=\"_blank\">Download</a></td>\n"
"        </tr>\n"
"    @endforeach\n"
"</table>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1113 docs/master/cashier-paddle.md:1073
#, no-wrap
msgid "<a name=\"past-and-upcoming-payments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/cashier-paddle.md:1113 docs/master/cashier-paddle.md:1073
#, no-wrap
msgid "Past & Upcoming Payments"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1116 docs/master/cashier-paddle.md:1076
msgid "You may use the `lastPayment` and `nextPayment` methods to retrieve and display a customer's past or upcoming payments for recurring subscriptions:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1125 docs/master/cashier-paddle.md:1085
#, no-wrap
msgid "    $lastPayment = $subscription->lastPayment();\n"
"    $nextPayment = $subscription->nextPayment();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1127 docs/master/cashier-paddle.md:1087
msgid "Both of these methods will return an instance of `Laravel\\Paddle\\Payment`; however, `nextPayment` will return `null` when the billing cycle has ended (such as when a subscription has been cancelled):"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1129 docs/master/cashier-paddle.md:1089
#, no-wrap
msgid "    Next payment: {{ $nextPayment->amount() }} due on {{ $nextPayment->date()->format('d/m/Y') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1134 docs/master/cashier-paddle.md:1094
msgid "Subscription payments fail for various reasons, such as expired cards or a card having insufficient funds. When this happens, we recommend that you let Paddle handle payment failures for you. Specifically, you may [setup Paddle's automatic billing emails](https://vendors.paddle.com/subscription-settings) in your Paddle dashboard."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1136 docs/master/cashier-paddle.md:1096
msgid "Alternatively, you can perform more precise customization by catching the [`subscription_payment_failed`](https://developer.paddle.com/webhook-reference/subscription-alerts/subscription-payment-failed) webhook and enabling the \"Subscription Payment Failed\" option in the Webhook settings of your Paddle dashboard:"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1156 docs/master/cashier-paddle.md:1116
#, no-wrap
msgid "    class WebhookController extends CashierController\n"
"    {\n"
"        /**\n"
"         * Handle subscription payment failed.\n"
"         *\n"
"         * @param  array  $payload\n"
"         * @return void\n"
"         */\n"
"        public function handleSubscriptionPaymentFailed($payload)\n"
"        {\n"
"            // Handle the failed subscription payment...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1161
msgid "While testing, you should manually test your billing flow to make sure your integration works as expected."
msgstr ""

#. type: Plain text
#: docs/8.x/cashier-paddle.md:1162
msgid "For automated tests, including those executed within a CI environment, you may use [Laravel's HTTP Client](/docs//{{version}}/http-client#testing) to fake HTTP calls made to Paddle. Although this does not test the actual responses from Paddle, it does provide a way to test your application without actually calling Paddle's API."
msgstr ""

#. #-#-#-#-#  collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  collections.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  eloquent.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/collections.md:1 docs/8.x/eloquent.md:303 docs/8.x/upgrade.md:71
#: docs/master/collections.md:1 docs/master/eloquent.md:303
#: docs/master/upgrade.md:71
#, no-wrap
msgid "Collections"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Creating Collections](#creating-collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Extending Collections](#extending-collections)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Available Methods](#available-methods)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Higher Order Messages](#higher-order-messages)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Lazy Collections](#lazy-collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Introduction](#lazy-collection-introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Creating Lazy Collections](#creating-lazy-collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[The Enumerable Contract](#the-enumerable-contract)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/collections.md:13 docs/master/collections.md:13
msgid "[Lazy Collection Methods](#lazy-collection-methods)"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:18 docs/master/collections.md:18
msgid "The `Illuminate\\Support\\Collection` class provides a fluent, convenient wrapper for working with arrays of data. For example, check out the following code. We'll use the `collect` helper to create a new collection instance from the array, run the `strtoupper` function on each element, and then remove all empty elements:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:24 docs/master/collections.md:24
#, no-wrap
msgid "    $collection = collect(['taylor', 'abigail', null])->map(function ($name) {\n"
"        return strtoupper($name);\n"
"    })->reject(function ($name) {\n"
"        return empty($name);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:26 docs/master/collections.md:26
msgid "As you can see, the `Collection` class allows you to chain its methods to perform fluent mapping and reducing of the underlying array. In general, collections are immutable, meaning every `Collection` method returns an entirely new `Collection` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:28 docs/master/collections.md:28
#, no-wrap
msgid "<a name=\"creating-collections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/collections.md:28 docs/master/collections.md:28
#, no-wrap
msgid "Creating Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:31 docs/master/collections.md:31
msgid "As mentioned above, the `collect` helper returns a new `Illuminate\\Support\\Collection` instance for the given array. So, creating a collection is as simple as:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:33 docs/8.x/collections.md:1496
#: docs/8.x/collections.md:1528 docs/8.x/collections.md:1697
#: docs/8.x/collections.md:2448 docs/8.x/collections.md:2517
#: docs/master/collections.md:33 docs/master/collections.md:1492
#: docs/master/collections.md:1524 docs/master/collections.md:1693
#: docs/master/collections.md:2444 docs/master/collections.md:2513
#, no-wrap
msgid "    $collection = collect([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:35 docs/master/collections.md:35
#, no-wrap
msgid "> {tip} The results of [Eloquent](/docs/{{version}}/eloquent) queries are always returned as `Collection` instances.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:37 docs/master/collections.md:37
#, no-wrap
msgid "<a name=\"extending-collections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/collections.md:37 docs/master/collections.md:37
#, no-wrap
msgid "Extending Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:40 docs/master/collections.md:40
msgid "Collections are \"macroable\", which allows you to add additional methods to the `Collection` class at run time. The `Illuminate\\Support\\Collection` class' `macro` method accepts a closure that will be executed when your macro is called. The macro closure may access the collection's other methods via `$this`, just as if it were a real method of the collection class. For example, the following code adds a `toUpper` method to the `Collection` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:43 docs/master/collections.md:43
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:49 docs/master/collections.md:49
#, no-wrap
msgid "    Collection::macro('toUpper', function () {\n"
"        return $this->map(function ($value) {\n"
"            return Str::upper($value);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:51 docs/8.x/collections.md:74
#: docs/master/collections.md:51 docs/master/collections.md:74
#, no-wrap
msgid "    $collection = collect(['first', 'second']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:53 docs/master/collections.md:53
#, no-wrap
msgid "    $upper = $collection->toUpper();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:55 docs/master/collections.md:55
#, no-wrap
msgid "    // ['FIRST', 'SECOND']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:57 docs/master/collections.md:57
msgid "Typically, you should declare collection macros in the `boot` method of a [service provider](/docs/{{version}}/providers)."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:59 docs/master/collections.md:59
#, no-wrap
msgid "<a name=\"macro-arguments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:59 docs/master/collections.md:59
#, no-wrap
msgid "Macro Arguments"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:62 docs/master/collections.md:62
msgid "If necessary, you may define macros that accept additional arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:66 docs/master/collections.md:66
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
"    use Illuminate\\Support\\Facades\\Lang;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:72 docs/master/collections.md:72
#, no-wrap
msgid "    Collection::macro('toLocale', function ($locale) {\n"
"        return $this->map(function ($value) use ($locale) {\n"
"            return Lang::get($value, [], $locale);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:76 docs/master/collections.md:76
#, no-wrap
msgid "    $translated = $collection->toLocale('es');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:78 docs/8.x/eloquent-collections.md:36
#: docs/8.x/helpers.md:12 docs/master/collections.md:78
#: docs/master/eloquent-collections.md:36 docs/master/helpers.md:12
#, no-wrap
msgid "<a name=\"available-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/collections.md:78 docs/8.x/eloquent-collections.md:36
#: docs/8.x/helpers.md:12 docs/master/collections.md:78
#: docs/master/eloquent-collections.md:36 docs/master/helpers.md:12
#, no-wrap
msgid "Available Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:81 docs/master/collections.md:81
msgid "For the majority of the remaining collection documentation, we'll discuss each method available on the `Collection` class. Remember, all of these methods may be chained to fluently manipulate the underlying array. Furthermore, almost every method returns a new `Collection` instance, allowing you to preserve the original copy of the collection when necessary:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:87 docs/8.x/migrations.md:306
#: docs/master/collections.md:87 docs/master/migrations.md:280
#, no-wrap
msgid "<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:92 docs/8.x/eloquent-collections.md:52
#: docs/8.x/migrations.md:311 docs/master/collections.md:92
#: docs/master/eloquent-collections.md:52 docs/master/migrations.md:285
#, no-wrap
msgid "    #collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:94 docs/8.x/collections.md:2963
#: docs/8.x/eloquent-collections.md:54 docs/master/collections.md:94
#: docs/master/collections.md:2959 docs/master/eloquent-collections.md:54
#, no-wrap
msgid "<div id=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:221 docs/master/collections.md:221
msgid "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forget](#method-forget)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pipeInto](#method-pipeinto)  [pluck](#method-pluck)  [pop](#method-pop)  [prepend](#method-prepend)  [pull](#method-pull)  [push](#method-push)  [put](#method-put)  [random](#method-random)  [reduce](#method-reduce)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shift](#method-shift)  [shuffle](#method-shuffle)  [skip](#method-skip)  [skipUntil](#method-skipuntil)  [skipWhile](#method-skipwhile)  [slice](#method-slice)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortDesc](#method-sortdesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [splice](#method-splice)  [split](#method-split)  [splitIn](#method-splitin)  [sum](#method-sum)  [take](#method-take)  [takeUntil](#method-takeuntil)  [takeWhile](#method-takewhile)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [transform](#method-transform)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [whereNotNull](#method-wherenotnull)  [whereNull](#method-wherenull)  [wrap](#method-wrap)  [zip](#method-zip)"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:223 docs/8.x/collections.md:3074
#: docs/8.x/eloquent-collections.md:71 docs/8.x/helpers.md:80
#: docs/8.x/helpers.md:136 docs/8.x/helpers.md:200 docs/8.x/helpers.md:214
#: docs/8.x/helpers.md:270 docs/8.x/http-tests.md:575
#: docs/8.x/validation.md:741 docs/8.x/validation.md:1164
#: docs/master/collections.md:223 docs/master/collections.md:3070
#: docs/master/eloquent-collections.md:71 docs/master/helpers.md:80
#: docs/master/helpers.md:136 docs/master/helpers.md:199
#: docs/master/helpers.md:213 docs/master/helpers.md:269
#: docs/master/http-tests.md:481 docs/master/validation.md:718
#: docs/master/validation.md:1125
#, no-wrap
msgid "</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:225 docs/8.x/helpers.md:272
#: docs/master/collections.md:225 docs/master/helpers.md:271
#, no-wrap
msgid "<a name=\"method-listing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/collections.md:225 docs/8.x/helpers.md:272
#: docs/master/collections.md:225 docs/master/helpers.md:271
#, no-wrap
msgid "Method Listing"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:231 docs/8.x/helpers.md:278
#: docs/master/collections.md:231 docs/master/helpers.md:277
#, no-wrap
msgid "<style>\n"
"    #collection-method code {\n"
"        font-size: 14px;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:236 docs/8.x/helpers.md:283
#: docs/master/collections.md:236 docs/master/helpers.md:282
#, no-wrap
msgid "    #collection-method:not(.first-collection-method) {\n"
"        margin-top: 50px;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:238 docs/master/collections.md:238
#, no-wrap
msgid "<a name=\"method-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:238 docs/master/collections.md:238
#, no-wrap
msgid "`all()` {#collection-method .first-collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:241 docs/master/collections.md:241
msgid "The `all` method returns the underlying array represented by the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:243 docs/master/collections.md:243
#, no-wrap
msgid "    collect([1, 2, 3])->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:245 docs/8.x/collections.md:349
#: docs/8.x/collections.md:367 docs/8.x/collections.md:726
#: docs/8.x/collections.md:1534 docs/master/collections.md:245
#: docs/master/collections.md:349 docs/master/collections.md:367
#: docs/master/collections.md:726 docs/master/collections.md:1530
#, no-wrap
msgid "    // [1, 2, 3]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:247 docs/master/collections.md:247
#, no-wrap
msgid "<a name=\"method-average\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:247 docs/master/collections.md:247
#, no-wrap
msgid "`average()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:250 docs/master/collections.md:250
msgid "Alias for the [`avg`](#method-avg) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:252 docs/master/collections.md:252
#, no-wrap
msgid "<a name=\"method-avg\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:252 docs/master/collections.md:252
#, no-wrap
msgid "`avg()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:255 docs/master/collections.md:255
msgid "The `avg` method returns the [average value](https://en.wikipedia.org/wiki/Average) of a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:262 docs/master/collections.md:262
#, no-wrap
msgid "    $average = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->avg('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:264 docs/8.x/collections.md:1313
#: docs/master/collections.md:264 docs/master/collections.md:1313
#, no-wrap
msgid "    // 20\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:266 docs/master/collections.md:266
#, no-wrap
msgid "    $average = collect([1, 1, 2, 4])->avg();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:268 docs/8.x/collections.md:1156
#: docs/8.x/collections.md:1831 docs/8.x/helpers.md:1555
#: docs/master/collections.md:268 docs/master/collections.md:1156
#: docs/master/collections.md:1827 docs/master/helpers.md:1554
#, no-wrap
msgid "    // 2\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:270 docs/master/collections.md:270
#, no-wrap
msgid "<a name=\"method-chunk\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:270 docs/master/collections.md:270
#, no-wrap
msgid "`chunk()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:273 docs/master/collections.md:273
msgid "The `chunk` method breaks the collection into multiple, smaller collections of a given size:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:275 docs/master/collections.md:275
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:277 docs/master/collections.md:277
#, no-wrap
msgid "    $chunks = $collection->chunk(4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:279 docs/8.x/collections.md:304
#: docs/master/collections.md:279 docs/master/collections.md:304
#, no-wrap
msgid "    $chunks->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:281 docs/master/collections.md:281
#, no-wrap
msgid "    // [[1, 2, 3, 4], [5, 6, 7]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:283 docs/master/collections.md:283
msgid "This method is especially useful in [views](/docs/{{version}}/views) when working with a grid system such as [Bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/). For example, imagine you have a collection of [Eloquent](/docs/{{version}}/eloquent) models you want to display in a grid:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:291 docs/master/collections.md:291
#, no-wrap
msgid "    @foreach ($products->chunk(3) as $chunk)\n"
"        <div class=\"row\">\n"
"            @foreach ($chunk as $product)\n"
"                <div class=\"col-xs-4\">{{ $product->name }}</div>\n"
"            @endforeach\n"
"        </div>\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:293 docs/master/collections.md:293
#, no-wrap
msgid "<a name=\"method-chunkwhile\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:293 docs/master/collections.md:293
#, no-wrap
msgid "`chunkWhile()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:296 docs/master/collections.md:296
msgid "The `chunkWhile` method breaks the collection into multiple, smaller collections based on the evaluation of the given callback. The `$chunk` variable passed to the closure may be used to inspect the previous element:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:298 docs/master/collections.md:298
#, no-wrap
msgid "    $collection = collect(str_split('AABBCCCD'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:302 docs/master/collections.md:302
#, no-wrap
msgid "    $chunks = $collection->chunkWhile(function ($value, $key, $chunk) {\n"
"        return $value === $chunk->last();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:306 docs/master/collections.md:306
#, no-wrap
msgid "    // [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:308 docs/master/collections.md:308
#, no-wrap
msgid "<a name=\"method-collapse\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:308 docs/master/collections.md:308
#, no-wrap
msgid "`collapse()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:311 docs/master/collections.md:311
msgid "The `collapse` method collapses a collection of arrays into a single, flat collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:317 docs/master/collections.md:317
#, no-wrap
msgid "    $collection = collect([\n"
"        [1, 2, 3],\n"
"        [4, 5, 6],\n"
"        [7, 8, 9],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:319 docs/master/collections.md:319
#, no-wrap
msgid "    $collapsed = $collection->collapse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:321 docs/master/collections.md:321
#, no-wrap
msgid "    $collapsed->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:323 docs/8.x/helpers.md:337
#: docs/master/collections.md:323 docs/master/helpers.md:336
#, no-wrap
msgid "    // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:325 docs/master/collections.md:325
#, no-wrap
msgid "<a name=\"method-combine\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:325 docs/master/collections.md:325
#, no-wrap
msgid "`combine()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:328 docs/master/collections.md:328
msgid "The `combine` method combines the values of the collection, as keys, with the values of another array or collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:330 docs/master/collections.md:330
#, no-wrap
msgid "    $collection = collect(['name', 'age']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:332 docs/master/collections.md:332
#, no-wrap
msgid "    $combined = $collection->combine(['George', 29]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:334 docs/master/collections.md:334
#, no-wrap
msgid "    $combined->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:336 docs/master/collections.md:336
#, no-wrap
msgid "    // ['name' => 'George', 'age' => 29]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:338 docs/8.x/helpers.md:2614
#: docs/master/collections.md:338 docs/master/helpers.md:2602
#, no-wrap
msgid "<a name=\"method-collect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:338 docs/8.x/helpers.md:2614
#: docs/master/collections.md:338 docs/master/helpers.md:2602
#, no-wrap
msgid "`collect()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:341 docs/master/collections.md:341
msgid "The `collect` method returns a new `Collection` instance with the items currently in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:343 docs/master/collections.md:343
#, no-wrap
msgid "    $collectionA = collect([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:345 docs/master/collections.md:345
#, no-wrap
msgid "    $collectionB = $collectionA->collect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:347 docs/master/collections.md:347
#, no-wrap
msgid "    $collectionB->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:351 docs/master/collections.md:351
msgid "The `collect` method is primarily useful for converting [lazy collections](#lazy-collections) into standard `Collection` instances:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:357 docs/master/collections.md:357
#, no-wrap
msgid "    $lazyCollection = LazyCollection::make(function () {\n"
"        yield 1;\n"
"        yield 2;\n"
"        yield 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:359 docs/master/collections.md:359
#, no-wrap
msgid "    $collection = $lazyCollection->collect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:361 docs/master/collections.md:361
#, no-wrap
msgid "    get_class($collection);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:363 docs/master/collections.md:363
#, no-wrap
msgid "    // 'Illuminate\\Support\\Collection'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:365 docs/8.x/collections.md:864
#: docs/8.x/collections.md:1603 docs/8.x/collections.md:1616
#: docs/8.x/collections.md:1626 docs/8.x/collections.md:1641
#: docs/8.x/collections.md:1654 docs/8.x/collections.md:1667
#: docs/8.x/collections.md:1844 docs/8.x/collections.md:1870
#: docs/8.x/collections.md:2139 docs/8.x/collections.md:2153
#: docs/8.x/collections.md:2167 docs/8.x/collections.md:2321
#: docs/8.x/collections.md:2364 docs/8.x/collections.md:2458
#: docs/8.x/collections.md:2527 docs/8.x/collections.md:2544
#: docs/8.x/collections.md:2555 docs/8.x/collections.md:2569
#: docs/8.x/collections.md:2586 docs/8.x/collections.md:2597
#: docs/8.x/collections.md:2611 docs/8.x/collections.md:2848
#: docs/8.x/collections.md:2854 docs/8.x/collections.md:2860
#: docs/master/collections.md:365 docs/master/collections.md:864
#: docs/master/collections.md:1599 docs/master/collections.md:1612
#: docs/master/collections.md:1622 docs/master/collections.md:1637
#: docs/master/collections.md:1650 docs/master/collections.md:1663
#: docs/master/collections.md:1840 docs/master/collections.md:1866
#: docs/master/collections.md:2135 docs/master/collections.md:2149
#: docs/master/collections.md:2163 docs/master/collections.md:2317
#: docs/master/collections.md:2360 docs/master/collections.md:2454
#: docs/master/collections.md:2523 docs/master/collections.md:2540
#: docs/master/collections.md:2551 docs/master/collections.md:2565
#: docs/master/collections.md:2582 docs/master/collections.md:2593
#: docs/master/collections.md:2607 docs/master/collections.md:2844
#: docs/master/collections.md:2850 docs/master/collections.md:2856
#, no-wrap
msgid "    $collection->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:369 docs/master/collections.md:369
#, no-wrap
msgid "> {tip} The `collect` method is especially useful when you have an instance of `Enumerable` and need a non-lazy collection instance. Since `collect()` is part of the `Enumerable` contract, you can safely use it to get a `Collection` instance.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:371 docs/master/collections.md:371
#, no-wrap
msgid "<a name=\"method-concat\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:371 docs/master/collections.md:371
#, no-wrap
msgid "`concat()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:374 docs/master/collections.md:374
msgid "The `concat` method appends the given `array` or collection's values onto the end of another collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:376 docs/master/collections.md:376
#, no-wrap
msgid "    $collection = collect(['John Doe']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:378 docs/master/collections.md:378
#, no-wrap
msgid "    $concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:380 docs/master/collections.md:380
#, no-wrap
msgid "    $concatenated->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:382 docs/master/collections.md:382
#, no-wrap
msgid "    // ['John Doe', 'Jane Doe', 'Johnny Doe']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:384 docs/8.x/eloquent-collections.md:73
#: docs/master/collections.md:384 docs/master/eloquent-collections.md:73
#, no-wrap
msgid "<a name=\"method-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:384 docs/master/collections.md:384
#, no-wrap
msgid "`contains()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:387 docs/master/collections.md:387
msgid "You may also pass a closure to the `contains` to determine if an element exists in the collection matching a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:389 docs/8.x/collections.md:529
#: docs/8.x/collections.md:1179 docs/8.x/collections.md:1597
#: docs/8.x/collections.md:1612 docs/8.x/collections.md:1676
#: docs/8.x/collections.md:1838 docs/8.x/collections.md:1853
#: docs/8.x/collections.md:2131 docs/8.x/collections.md:2145
#: docs/8.x/collections.md:2159 docs/8.x/collections.md:2176
#: docs/8.x/collections.md:2358 docs/master/collections.md:389
#: docs/master/collections.md:529 docs/master/collections.md:1179
#: docs/master/collections.md:1593 docs/master/collections.md:1608
#: docs/master/collections.md:1672 docs/master/collections.md:1834
#: docs/master/collections.md:1849 docs/master/collections.md:2127
#: docs/master/collections.md:2141 docs/master/collections.md:2155
#: docs/master/collections.md:2172 docs/master/collections.md:2354
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:393 docs/master/collections.md:393
#, no-wrap
msgid "    $collection->contains(function ($value, $key) {\n"
"        return $value > 5;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:395 docs/8.x/collections.md:407
#: docs/8.x/collections.md:418 docs/8.x/collections.md:676
#: docs/8.x/collections.md:1012 docs/8.x/collections.md:1082
#: docs/8.x/collections.md:1823 docs/8.x/helpers.md:306 docs/8.x/helpers.md:310
#: docs/8.x/helpers.md:426 docs/8.x/helpers.md:511 docs/8.x/helpers.md:532
#: docs/8.x/helpers.md:547 docs/8.x/helpers.md:1178 docs/8.x/helpers.md:1208
#: docs/8.x/helpers.md:1223 docs/8.x/helpers.md:1238 docs/8.x/helpers.md:1799
#: docs/8.x/helpers.md:1851 docs/8.x/helpers.md:1866 docs/8.x/helpers.md:1881
#: docs/8.x/helpers.md:1893 docs/8.x/helpers.md:2579 docs/8.x/helpers.md:2725
#: docs/8.x/helpers.md:2999 docs/master/collections.md:395
#: docs/master/collections.md:407 docs/master/collections.md:418
#: docs/master/collections.md:676 docs/master/collections.md:1012
#: docs/master/collections.md:1082 docs/master/collections.md:1819
#: docs/master/helpers.md:305 docs/master/helpers.md:309
#: docs/master/helpers.md:425 docs/master/helpers.md:510
#: docs/master/helpers.md:531 docs/master/helpers.md:546
#: docs/master/helpers.md:1177 docs/master/helpers.md:1207
#: docs/master/helpers.md:1222 docs/master/helpers.md:1237
#: docs/master/helpers.md:1798 docs/master/helpers.md:1850
#: docs/master/helpers.md:1865 docs/master/helpers.md:1880
#: docs/master/helpers.md:1892 docs/master/helpers.md:2567
#: docs/master/helpers.md:2713 docs/master/helpers.md:2987
#, no-wrap
msgid "    // false\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:397 docs/master/collections.md:397
msgid "Alternatively, you may pass a string to the `contains` method to determine whether the collection contains a given item value:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:399 docs/master/collections.md:399
#, no-wrap
msgid "    $collection = collect(['name' => 'Desk', 'price' => 100]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:401 docs/master/collections.md:401
#, no-wrap
msgid "    $collection->contains('Desk');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:403 docs/8.x/collections.md:686
#: docs/8.x/collections.md:1004 docs/8.x/collections.md:1008
#: docs/8.x/collections.md:1073 docs/8.x/helpers.md:298 docs/8.x/helpers.md:302
#: docs/8.x/helpers.md:422 docs/8.x/helpers.md:507 docs/8.x/helpers.md:524
#: docs/8.x/helpers.md:528 docs/8.x/helpers.md:543 docs/8.x/helpers.md:1135
#: docs/8.x/helpers.md:1143 docs/8.x/helpers.md:1154 docs/8.x/helpers.md:1165
#: docs/8.x/helpers.md:1174 docs/8.x/helpers.md:1204 docs/8.x/helpers.md:1219
#: docs/8.x/helpers.md:1234 docs/8.x/helpers.md:1522 docs/8.x/helpers.md:1738
#: docs/8.x/helpers.md:1746 docs/8.x/helpers.md:1757 docs/8.x/helpers.md:1787
#: docs/8.x/helpers.md:1795 docs/8.x/helpers.md:1810 docs/8.x/helpers.md:1847
#: docs/8.x/helpers.md:1862 docs/8.x/helpers.md:1877 docs/8.x/helpers.md:1897
#: docs/8.x/helpers.md:2273 docs/8.x/helpers.md:2326 docs/8.x/helpers.md:2573
#: docs/8.x/helpers.md:2718 docs/8.x/helpers.md:2993
#: docs/master/collections.md:403 docs/master/collections.md:686
#: docs/master/collections.md:1004 docs/master/collections.md:1008
#: docs/master/collections.md:1073 docs/master/helpers.md:297
#: docs/master/helpers.md:301 docs/master/helpers.md:421
#: docs/master/helpers.md:506 docs/master/helpers.md:523
#: docs/master/helpers.md:527 docs/master/helpers.md:542
#: docs/master/helpers.md:1134 docs/master/helpers.md:1142
#: docs/master/helpers.md:1153 docs/master/helpers.md:1164
#: docs/master/helpers.md:1173 docs/master/helpers.md:1203
#: docs/master/helpers.md:1218 docs/master/helpers.md:1233
#: docs/master/helpers.md:1521 docs/master/helpers.md:1737
#: docs/master/helpers.md:1745 docs/master/helpers.md:1756
#: docs/master/helpers.md:1786 docs/master/helpers.md:1794
#: docs/master/helpers.md:1809 docs/master/helpers.md:1846
#: docs/master/helpers.md:1861 docs/master/helpers.md:1876
#: docs/master/helpers.md:1896 docs/master/helpers.md:2272
#: docs/master/helpers.md:2561 docs/master/helpers.md:2706
#: docs/master/helpers.md:2981
#, no-wrap
msgid "    // true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:405 docs/master/collections.md:405
#, no-wrap
msgid "    $collection->contains('New York');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:409 docs/master/collections.md:409
msgid "You may also pass a key / value pair to the `contains` method, which will determine if the given pair exists in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:414 docs/master/collections.md:414
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:416 docs/master/collections.md:416
#, no-wrap
msgid "    $collection->contains('product', 'Bookcase');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:420 docs/master/collections.md:420
msgid "The `contains` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`containsStrict`](#method-containsstrict) method to filter using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:422 docs/master/collections.md:422
#, no-wrap
msgid "<a name=\"method-containsstrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:422 docs/master/collections.md:422
#, no-wrap
msgid "`containsStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:425 docs/master/collections.md:425
msgid "This method has the same signature as the [`contains`](#method-contains) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:427 docs/master/collections.md:427
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-contains).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:429 docs/master/collections.md:429
#, no-wrap
msgid "<a name=\"method-count\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:429 docs/master/collections.md:429
#, no-wrap
msgid "`count()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:432 docs/master/collections.md:432
msgid "The `count` method returns the total number of items in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:434 docs/8.x/collections.md:710
#: docs/8.x/collections.md:1650 docs/8.x/collections.md:1738
#: docs/8.x/collections.md:1879 docs/8.x/collections.md:1891
#: docs/8.x/collections.md:1906 docs/8.x/collections.md:2259
#: docs/8.x/collections.md:2271 docs/8.x/collections.md:2286
#: docs/master/collections.md:434 docs/master/collections.md:710
#: docs/master/collections.md:1646 docs/master/collections.md:1734
#: docs/master/collections.md:1875 docs/master/collections.md:1887
#: docs/master/collections.md:1902 docs/master/collections.md:2255
#: docs/master/collections.md:2267 docs/master/collections.md:2282
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:436 docs/master/collections.md:436
#, no-wrap
msgid "    $collection->count();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:438 docs/8.x/collections.md:1162
#: docs/master/collections.md:438 docs/master/collections.md:1162
#, no-wrap
msgid "    // 4\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:440 docs/master/collections.md:440
#, no-wrap
msgid "<a name=\"method-countBy\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:440 docs/master/collections.md:440
#, no-wrap
msgid "`countBy()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:443 docs/master/collections.md:443
msgid "The `countBy` method counts the occurrences of values in the collection. By default, the method counts the occurrences of every element, allowing you to count certain \"types\" of elements in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:445 docs/master/collections.md:445
#, no-wrap
msgid "    $collection = collect([1, 2, 2, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:447 docs/master/collections.md:447
#, no-wrap
msgid "    $counted = $collection->countBy();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:449 docs/8.x/collections.md:461
#: docs/master/collections.md:449 docs/master/collections.md:461
#, no-wrap
msgid "    $counted->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:451 docs/master/collections.md:451
#, no-wrap
msgid "    // [1 => 1, 2 => 3, 3 => 1]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:453 docs/master/collections.md:453
msgid "You pass a closure to the `countBy` method to count all items by a custom value:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:455 docs/master/collections.md:455
#, no-wrap
msgid "    $collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:459 docs/master/collections.md:459
#, no-wrap
msgid "    $counted = $collection->countBy(function ($email) {\n"
"        return substr(strrchr($email, \"@\"), 1);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:463 docs/master/collections.md:463
#, no-wrap
msgid "    // ['gmail.com' => 2, 'yahoo.com' => 1]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:465 docs/master/collections.md:465
#, no-wrap
msgid "<a name=\"method-crossjoin\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:465 docs/master/collections.md:465
#, no-wrap
msgid "`crossJoin()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:468 docs/master/collections.md:468
msgid "The `crossJoin` method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:470 docs/8.x/collections.md:485
#: docs/master/collections.md:470 docs/master/collections.md:485
#, no-wrap
msgid "    $collection = collect([1, 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:472 docs/master/collections.md:472
#, no-wrap
msgid "    $matrix = $collection->crossJoin(['a', 'b']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:474 docs/8.x/collections.md:489
#: docs/master/collections.md:474 docs/master/collections.md:489
#, no-wrap
msgid "    $matrix->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:483 docs/8.x/helpers.md:355
#: docs/master/collections.md:483 docs/master/helpers.md:354
#, no-wrap
msgid "    /*\n"
"        [\n"
"            [1, 'a'],\n"
"            [1, 'b'],\n"
"            [2, 'a'],\n"
"            [2, 'b'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:487 docs/master/collections.md:487
#, no-wrap
msgid "    $matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:502 docs/8.x/helpers.md:370
#: docs/master/collections.md:502 docs/master/helpers.md:369
#, no-wrap
msgid "    /*\n"
"        [\n"
"            [1, 'a', 'I'],\n"
"            [1, 'a', 'II'],\n"
"            [1, 'b', 'I'],\n"
"            [1, 'b', 'II'],\n"
"            [2, 'a', 'I'],\n"
"            [2, 'a', 'II'],\n"
"            [2, 'b', 'I'],\n"
"            [2, 'b', 'II'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:504 docs/8.x/helpers.md:2655
#: docs/master/collections.md:504 docs/master/helpers.md:2643
#, no-wrap
msgid "<a name=\"method-dd\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:504 docs/8.x/helpers.md:2655
#: docs/master/collections.md:504 docs/master/helpers.md:2643
#, no-wrap
msgid "`dd()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:507 docs/master/collections.md:507
msgid "The `dd` method dumps the collection's items and ends execution of the script:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:509 docs/8.x/collections.md:590
#: docs/master/collections.md:509 docs/master/collections.md:590
#, no-wrap
msgid "    $collection = collect(['John Doe', 'Jane Doe']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:511 docs/master/collections.md:511
#, no-wrap
msgid "    $collection->dd();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:520 docs/8.x/collections.md:601
#: docs/master/collections.md:520 docs/master/collections.md:601
#, no-wrap
msgid "    /*\n"
"        Collection {\n"
"            #items: array:2 [\n"
"                0 => \"John Doe\"\n"
"                1 => \"Jane Doe\"\n"
"            ]\n"
"        }\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:522 docs/master/collections.md:522
msgid "If you do not want to stop executing the script, use the [`dump`](#method-dump) method instead."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:524 docs/8.x/eloquent-collections.md:82
#: docs/master/collections.md:524 docs/master/eloquent-collections.md:82
#, no-wrap
msgid "<a name=\"method-diff\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:524 docs/master/collections.md:524
#, no-wrap
msgid "`diff()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:527 docs/master/collections.md:527
msgid "The `diff` method compares the collection against another collection or a plain PHP `array` based on its values. This method will return the values in the original collection that are not present in the given collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:531 docs/master/collections.md:531
#, no-wrap
msgid "    $diff = $collection->diff([2, 4, 6, 8]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:533 docs/8.x/collections.md:557
#: docs/8.x/collections.md:581 docs/master/collections.md:533
#: docs/master/collections.md:557 docs/master/collections.md:581
#, no-wrap
msgid "    $diff->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:535 docs/master/collections.md:535
#, no-wrap
msgid "    // [1, 3, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:537 docs/master/collections.md:537
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-diff).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:539 docs/master/collections.md:539
#, no-wrap
msgid "<a name=\"method-diffassoc\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:539 docs/master/collections.md:539
#, no-wrap
msgid "`diffAssoc()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:542 docs/master/collections.md:542
msgid "The `diffAssoc` method compares the collection against another collection or a plain PHP `array` based on its keys and values. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:548 docs/master/collections.md:548
#, no-wrap
msgid "    $collection = collect([\n"
"        'color' => 'orange',\n"
"        'type' => 'fruit',\n"
"        'remain' => 6,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:555 docs/master/collections.md:555
#, no-wrap
msgid "    $diff = $collection->diffAssoc([\n"
"        'color' => 'yellow',\n"
"        'type' => 'fruit',\n"
"        'remain' => 3,\n"
"        'used' => 6,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:559 docs/master/collections.md:559
#, no-wrap
msgid "    // ['color' => 'orange', 'remain' => 6]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:561 docs/master/collections.md:561
#, no-wrap
msgid "<a name=\"method-diffkeys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:561 docs/master/collections.md:561
#, no-wrap
msgid "`diffKeys()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:564 docs/master/collections.md:564
msgid "The `diffKeys` method compares the collection against another collection or a plain PHP `array` based on its keys. This method will return the key / value pairs in the original collection that are not present in the given collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:572 docs/master/collections.md:572
#, no-wrap
msgid "    $collection = collect([\n"
"        'one' => 10,\n"
"        'two' => 20,\n"
"        'three' => 30,\n"
"        'four' => 40,\n"
"        'five' => 50,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:579 docs/master/collections.md:579
#, no-wrap
msgid "    $diff = $collection->diffKeys([\n"
"        'two' => 2,\n"
"        'four' => 4,\n"
"        'six' => 6,\n"
"        'eight' => 8,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:583 docs/master/collections.md:583
#, no-wrap
msgid "    // ['one' => 10, 'three' => 30, 'five' => 50]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:585 docs/8.x/helpers.md:2680
#: docs/master/collections.md:585 docs/master/helpers.md:2668
#, no-wrap
msgid "<a name=\"method-dump\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:585 docs/8.x/helpers.md:2680
#: docs/master/collections.md:585 docs/master/helpers.md:2668
#, no-wrap
msgid "`dump()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:588 docs/master/collections.md:588
msgid "The `dump` method dumps the collection's items:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:592 docs/master/collections.md:592
#, no-wrap
msgid "    $collection->dump();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:603 docs/master/collections.md:603
msgid "If you want to stop executing the script after dumping the collection, use the [`dd`](#method-dd) method instead."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:605 docs/master/collections.md:605
#, no-wrap
msgid "<a name=\"method-duplicates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:605 docs/master/collections.md:605
#, no-wrap
msgid "`duplicates()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:608 docs/master/collections.md:608
msgid "The `duplicates` method retrieves and returns duplicate values from the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:610 docs/master/collections.md:610
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'a', 'c', 'b']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:612 docs/master/collections.md:612
#, no-wrap
msgid "    $collection->duplicates();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:614 docs/master/collections.md:614
#, no-wrap
msgid "    // [2 => 'a', 4 => 'b']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:616 docs/master/collections.md:616
msgid "If the collection contains arrays or objects, you can pass the key of the attributes that you wish to check for duplicate values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:622 docs/master/collections.md:622
#, no-wrap
msgid "    $employees = collect([\n"
"        ['email' => 'abigail@example.com', 'position' => 'Developer'],\n"
"        ['email' => 'james@example.com', 'position' => 'Designer'],\n"
"        ['email' => 'victoria@example.com', 'position' => 'Developer'],\n"
"    ])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:624 docs/master/collections.md:624
#, no-wrap
msgid "    $employees->duplicates('position');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:626 docs/master/collections.md:626
#, no-wrap
msgid "    // [2 => 'Developer']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:628 docs/master/collections.md:628
#, no-wrap
msgid "<a name=\"method-duplicatesstrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:628 docs/master/collections.md:628
#, no-wrap
msgid "`duplicatesStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:631 docs/master/collections.md:631
msgid "This method has the same signature as the [`duplicates`](#method-duplicates) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:633 docs/master/collections.md:633
#, no-wrap
msgid "<a name=\"method-each\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:633 docs/master/collections.md:633
#, no-wrap
msgid "`each()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:636 docs/master/collections.md:636
msgid "The `each` method iterates over the items in the collection and passes each item to a closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:640 docs/master/collections.md:640
#, no-wrap
msgid "    $collection->each(function ($item, $key) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:642 docs/master/collections.md:642
msgid "If you would like to stop iterating through the items, you may return `false` from your closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:648 docs/master/collections.md:648
#, no-wrap
msgid "    $collection->each(function ($item, $key) {\n"
"        if (/* condition */) {\n"
"            return false;\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:650 docs/master/collections.md:650
#, no-wrap
msgid "<a name=\"method-eachspread\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:650 docs/master/collections.md:650
#, no-wrap
msgid "`eachSpread()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:653 docs/master/collections.md:653
msgid "The `eachSpread` method iterates over the collection's items, passing each nested item value into the given callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:655 docs/master/collections.md:655
#, no-wrap
msgid "    $collection = collect([['John Doe', 35], ['Jane Doe', 33]]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:659 docs/master/collections.md:659
#, no-wrap
msgid "    $collection->eachSpread(function ($name, $age) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:661 docs/master/collections.md:661
msgid "You may stop iterating through the items by returning `false` from the callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:665 docs/master/collections.md:665
#, no-wrap
msgid "    $collection->eachSpread(function ($name, $age) {\n"
"        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:667 docs/master/collections.md:667
#, no-wrap
msgid "<a name=\"method-every\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:667 docs/master/collections.md:667
#, no-wrap
msgid "`every()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:670 docs/master/collections.md:670
msgid "The `every` method may be used to verify that all elements of a collection pass a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:674 docs/master/collections.md:674
#, no-wrap
msgid "    collect([1, 2, 3, 4])->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:678 docs/master/collections.md:678
msgid "If the collection is empty, the `every` method will return true:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:680 docs/master/collections.md:680
#, no-wrap
msgid "    $collection = collect([]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:684 docs/master/collections.md:684
#, no-wrap
msgid "    $collection->every(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:688 docs/8.x/eloquent-collections.md:91
#: docs/master/collections.md:688 docs/master/eloquent-collections.md:91
#, no-wrap
msgid "<a name=\"method-except\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:688 docs/master/collections.md:688
#, no-wrap
msgid "`except()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:691 docs/master/collections.md:691
msgid "The `except` method returns all items in the collection except for those with the specified keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:693 docs/master/collections.md:693
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:695 docs/master/collections.md:695
#, no-wrap
msgid "    $filtered = $collection->except(['price', 'discount']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:697 docs/8.x/collections.md:716
#: docs/8.x/collections.md:1443 docs/8.x/collections.md:1462
#: docs/8.x/collections.md:1468 docs/8.x/collections.md:1744
#: docs/8.x/collections.md:2631 docs/8.x/collections.md:2652
#: docs/8.x/collections.md:2681 docs/8.x/collections.md:2705
#: docs/8.x/collections.md:2737 docs/8.x/collections.md:2756
#: docs/8.x/collections.md:2779 docs/8.x/collections.md:2808
#: docs/8.x/collections.md:2830 docs/master/collections.md:697
#: docs/master/collections.md:716 docs/master/collections.md:1439
#: docs/master/collections.md:1458 docs/master/collections.md:1464
#: docs/master/collections.md:1740 docs/master/collections.md:2627
#: docs/master/collections.md:2648 docs/master/collections.md:2677
#: docs/master/collections.md:2701 docs/master/collections.md:2733
#: docs/master/collections.md:2752 docs/master/collections.md:2775
#: docs/master/collections.md:2804 docs/master/collections.md:2826
#, no-wrap
msgid "    $filtered->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:699 docs/master/collections.md:699
#, no-wrap
msgid "    // ['product_id' => 1]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:701 docs/master/collections.md:701
msgid "For the inverse of `except`, see the [only](#method-only) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:703 docs/master/collections.md:703
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-except).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:705 docs/master/collections.md:705
#, no-wrap
msgid "<a name=\"method-filter\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:705 docs/master/collections.md:705
#, no-wrap
msgid "`filter()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:708 docs/master/collections.md:708
msgid "The `filter` method filters the collection using the given callback, keeping only those items that pass a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:714 docs/master/collections.md:714
#, no-wrap
msgid "    $filtered = $collection->filter(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:718 docs/8.x/collections.md:1887
#: docs/8.x/collections.md:1897 docs/master/collections.md:718
#: docs/master/collections.md:1883 docs/master/collections.md:1893
#, no-wrap
msgid "    // [3, 4]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:720 docs/master/collections.md:720
msgid "If no callback is supplied, all entries of the collection that are equivalent to `false` will be removed:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:722 docs/master/collections.md:722
#, no-wrap
msgid "    $collection = collect([1, 2, 3, null, false, '', 0, []]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:724 docs/master/collections.md:724
#, no-wrap
msgid "    $collection->filter()->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:728 docs/master/collections.md:728
msgid "For the inverse of `filter`, see the [reject](#method-reject) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:730 docs/master/collections.md:730
#, no-wrap
msgid "<a name=\"method-first\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:730 docs/master/collections.md:730
#, no-wrap
msgid "`first()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:733 docs/master/collections.md:733
msgid "The `first` method returns the first element in the collection that passes a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:737 docs/master/collections.md:737
#, no-wrap
msgid "    collect([1, 2, 3, 4])->first(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:739 docs/master/collections.md:739
#, no-wrap
msgid "    // 3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:741 docs/master/collections.md:741
msgid "You may also call the `first` method with no arguments to get the first element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:743 docs/master/collections.md:743
#, no-wrap
msgid "    collect([1, 2, 3, 4])->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:745 docs/8.x/collections.md:1388
#: docs/8.x/collections.md:1817 docs/8.x/collections.md:1842
#: docs/8.x/collections.md:2310 docs/master/collections.md:745
#: docs/master/collections.md:1388 docs/master/collections.md:1813
#: docs/master/collections.md:1838 docs/master/collections.md:2306
#, no-wrap
msgid "    // 1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:747 docs/master/collections.md:747
#, no-wrap
msgid "<a name=\"method-first-where\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:747 docs/master/collections.md:747
#, no-wrap
msgid "`firstWhere()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:750 docs/master/collections.md:750
msgid "The `firstWhere` method returns the first element in the collection with the given key / value pair:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:757 docs/master/collections.md:757
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Regena', 'age' => null],\n"
"        ['name' => 'Linda', 'age' => 14],\n"
"        ['name' => 'Diego', 'age' => 23],\n"
"        ['name' => 'Linda', 'age' => 84],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:759 docs/master/collections.md:759
#, no-wrap
msgid "    $collection->firstWhere('name', 'Linda');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:761 docs/8.x/collections.md:773
#: docs/master/collections.md:761 docs/master/collections.md:773
#, no-wrap
msgid "    // ['name' => 'Linda', 'age' => 14]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:763 docs/master/collections.md:763
msgid "You may also call the `firstWhere` method with a comparison operator:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:765 docs/master/collections.md:765
#, no-wrap
msgid "    $collection->firstWhere('age', '>=', 18);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:767 docs/master/collections.md:767
#, no-wrap
msgid "    // ['name' => 'Diego', 'age' => 23]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:769 docs/master/collections.md:769
msgid "Like the [where](#method-where) method, you may pass one argument to the `firstWhere` method. In this scenario, the `firstWhere` method will return the first item where the given item key's value is \"truthy\":"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:771 docs/master/collections.md:771
#, no-wrap
msgid "    $collection->firstWhere('age');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:775 docs/master/collections.md:775
#, no-wrap
msgid "<a name=\"method-flatmap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:775 docs/master/collections.md:775
#, no-wrap
msgid "`flatMap()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:778 docs/master/collections.md:778
msgid "The `flatMap` method iterates through the collection and passes each value to the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items. Then, the array is flattened by one level:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:784 docs/master/collections.md:784
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Sally'],\n"
"        ['school' => 'Arkansas'],\n"
"        ['age' => 28]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:788 docs/master/collections.md:788
#, no-wrap
msgid "    $flattened = $collection->flatMap(function ($values) {\n"
"        return array_map('strtoupper', $values);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:790 docs/8.x/collections.md:808
#: docs/master/collections.md:790 docs/master/collections.md:808
#, no-wrap
msgid "    $flattened->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:792 docs/master/collections.md:792
#, no-wrap
msgid "    // ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:794 docs/master/collections.md:794
#, no-wrap
msgid "<a name=\"method-flatten\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:794 docs/master/collections.md:794
#, no-wrap
msgid "`flatten()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:797 docs/master/collections.md:797
msgid "The `flatten` method flattens a multi-dimensional collection into a single dimension:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:804 docs/master/collections.md:804
#, no-wrap
msgid "    $collection = collect([\n"
"        'name' => 'taylor',\n"
"        'languages' => [\n"
"            'php', 'javascript'\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:806 docs/master/collections.md:806
#, no-wrap
msgid "    $flattened = $collection->flatten();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:810 docs/master/collections.md:810
#, no-wrap
msgid "    // ['taylor', 'php', 'javascript'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:812 docs/master/collections.md:812
msgid "If necessary, you may pass the `flatten` method a \"depth\" argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:827 docs/master/collections.md:827
#, no-wrap
msgid "    $collection = collect([\n"
"        'Apple' => [\n"
"            [\n"
"                'name' => 'iPhone 6S',\n"
"                'brand' => 'Apple'\n"
"            ],\n"
"        ],\n"
"        'Samsung' => [\n"
"            [\n"
"                'name' => 'Galaxy S7',\n"
"                'brand' => 'Samsung'\n"
"            ],\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:829 docs/master/collections.md:829
#, no-wrap
msgid "    $products = $collection->flatten(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:831 docs/master/collections.md:831
#, no-wrap
msgid "    $products->values()->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:838 docs/master/collections.md:838
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6S', 'brand' => 'Apple'],\n"
"            ['name' => 'Galaxy S7', 'brand' => 'Samsung'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:840 docs/master/collections.md:840
msgid "In this example, calling `flatten` without providing the depth would have also flattened the nested arrays, resulting in `['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']`. Providing a depth allows you to specify the number of levels nested arrays will be flattened."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:842 docs/master/collections.md:842
#, no-wrap
msgid "<a name=\"method-flip\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:842 docs/master/collections.md:842
#, no-wrap
msgid "`flip()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:845 docs/master/collections.md:845
msgid "The `flip` method swaps the collection's keys with their corresponding values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:847 docs/8.x/collections.md:860
#: docs/8.x/collections.md:888 docs/8.x/collections.md:896
#: docs/master/collections.md:847 docs/master/collections.md:860
#: docs/master/collections.md:888 docs/master/collections.md:896
#, no-wrap
msgid "    $collection = collect(['name' => 'taylor', 'framework' => 'laravel']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:849 docs/master/collections.md:849
#, no-wrap
msgid "    $flipped = $collection->flip();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:851 docs/master/collections.md:851
#, no-wrap
msgid "    $flipped->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:853 docs/master/collections.md:853
#, no-wrap
msgid "    // ['taylor' => 'name', 'laravel' => 'framework']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:855 docs/master/collections.md:855
#, no-wrap
msgid "<a name=\"method-forget\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:855 docs/master/collections.md:855
#, no-wrap
msgid "`forget()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:858 docs/master/collections.md:858
msgid "The `forget` method removes an item from the collection by its key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:862 docs/master/collections.md:862
#, no-wrap
msgid "    $collection->forget('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:866 docs/master/collections.md:866
#, no-wrap
msgid "    // ['framework' => 'laravel']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:868 docs/master/collections.md:868
#, no-wrap
msgid "> {note} Unlike most other collection methods, `forget` does not return a new modified collection; it modifies the collection it is called on.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:870 docs/master/collections.md:870
#, no-wrap
msgid "<a name=\"method-forpage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:870 docs/master/collections.md:870
#, no-wrap
msgid "`forPage()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:873 docs/master/collections.md:873
msgid "The `forPage` method returns a new collection containing the items that would be present on a given page number. The method accepts the page number as its first argument and the number of items to show per page as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:875 docs/master/collections.md:875
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:877 docs/master/collections.md:877
#, no-wrap
msgid "    $chunk = $collection->forPage(2, 3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:879 docs/8.x/collections.md:2135
#: docs/8.x/collections.md:2149 docs/8.x/collections.md:2163
#: docs/8.x/collections.md:2240 docs/8.x/collections.md:2250
#: docs/master/collections.md:879 docs/master/collections.md:2131
#: docs/master/collections.md:2145 docs/master/collections.md:2159
#: docs/master/collections.md:2236 docs/master/collections.md:2246
#, no-wrap
msgid "    $chunk->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:881 docs/master/collections.md:881
#, no-wrap
msgid "    // [4, 5, 6]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:883 docs/master/collections.md:883
#, no-wrap
msgid "<a name=\"method-get\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:883 docs/master/collections.md:883
#, no-wrap
msgid "`get()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:886 docs/master/collections.md:886
msgid "The `get` method returns the item at a given key. If the key does not exist, `null` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:890 docs/master/collections.md:890
#, no-wrap
msgid "    $value = $collection->get('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:892 docs/master/collections.md:892
#, no-wrap
msgid "    // taylor\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:894 docs/master/collections.md:894
msgid "You may optionally pass a default value as the second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:898 docs/master/collections.md:898
#, no-wrap
msgid "    $value = $collection->get('age', 34);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:900 docs/master/collections.md:900
#, no-wrap
msgid "    // 34\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:902 docs/master/collections.md:902
msgid "You may even pass a callback as the method's default value. The result of the callback will be returned if the specified key does not exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:906 docs/master/collections.md:906
#, no-wrap
msgid "    $collection->get('email', function () {\n"
"        return 'taylor@example.com';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:908 docs/master/collections.md:908
#, no-wrap
msgid "    // taylor@example.com\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:910 docs/master/collections.md:910
#, no-wrap
msgid "<a name=\"method-groupby\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:910 docs/master/collections.md:910
#, no-wrap
msgid "`groupBy()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:913 docs/master/collections.md:913
msgid "The `groupBy` method groups the collection's items by a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:919 docs/master/collections.md:919
#, no-wrap
msgid "    $collection = collect([\n"
"        ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"        ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"        ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:921 docs/master/collections.md:921
#, no-wrap
msgid "    $grouped = $collection->groupBy('account_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:923 docs/8.x/collections.md:943
#: docs/8.x/collections.md:1259 docs/master/collections.md:923
#: docs/master/collections.md:943 docs/master/collections.md:1259
#, no-wrap
msgid "    $grouped->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:935 docs/master/collections.md:935
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'account-x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'account-x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:937 docs/master/collections.md:937
msgid "Instead of passing a string `key`, you may pass a callback. The callback should return the value you wish to key the group by:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:941 docs/master/collections.md:941
#, no-wrap
msgid "    $grouped = $collection->groupBy(function ($item, $key) {\n"
"        return substr($item['account_id'], -3);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:955 docs/master/collections.md:955
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'x10' => [\n"
"                ['account_id' => 'account-x10', 'product' => 'Chair'],\n"
"                ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n"
"            ],\n"
"            'x11' => [\n"
"                ['account_id' => 'account-x11', 'product' => 'Desk'],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:957 docs/master/collections.md:957
msgid "Multiple grouping criteria may be passed as an array. Each array element will be applied to the corresponding level within a multi-dimensional array:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:964 docs/master/collections.md:964
#, no-wrap
msgid "    $data = new Collection([\n"
"        10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"        20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"        30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"        40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:968 docs/master/collections.md:968
#, no-wrap
msgid "    $result = $data->groupBy(['skill', function ($item) {\n"
"        return $item['roles'];\n"
"    }], $preserveKeys = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:993 docs/master/collections.md:993
#, no-wrap
msgid "    /*\n"
"    [\n"
"        1 => [\n"
"            'Role_1' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                20 => ['user' => 2, 'skill' => 1, 'roles' => ['Role_1', 'Role_2']],\n"
"            ],\n"
"            'Role_3' => [\n"
"                10 => ['user' => 1, 'skill' => 1, 'roles' => ['Role_1', 'Role_3']],\n"
"            ],\n"
"        ],\n"
"        2 => [\n"
"            'Role_1' => [\n"
"                30 => ['user' => 3, 'skill' => 2, 'roles' => ['Role_1']],\n"
"            ],\n"
"            'Role_2' => [\n"
"                40 => ['user' => 4, 'skill' => 2, 'roles' => ['Role_2']],\n"
"            ],\n"
"        ],\n"
"    ];\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:995 docs/master/collections.md:995
#, no-wrap
msgid "<a name=\"method-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:995 docs/master/collections.md:995
#, no-wrap
msgid "`has()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:998 docs/master/collections.md:998
msgid "The `has` method determines if a given key exists in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1000 docs/master/collections.md:1000
#, no-wrap
msgid "    $collection = collect(['account_id' => 1, 'product' => 'Desk', 'amount' => 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1002 docs/master/collections.md:1002
#, no-wrap
msgid "    $collection->has('product');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1006 docs/master/collections.md:1006
#, no-wrap
msgid "    $collection->has(['product', 'amount']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1010 docs/master/collections.md:1010
#, no-wrap
msgid "    $collection->has(['amount', 'price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1014 docs/master/collections.md:1014
#, no-wrap
msgid "<a name=\"method-implode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1014 docs/master/collections.md:1014
#, no-wrap
msgid "`implode()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1017 docs/master/collections.md:1017
msgid "The `implode` method joins items in a collection. Its arguments depend on the type of items in the collection. If the collection contains arrays or objects, you should pass the key of the attributes you wish to join, and the \"glue\" string you wish to place between the values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1022 docs/master/collections.md:1022
#, no-wrap
msgid "    $collection = collect([\n"
"        ['account_id' => 1, 'product' => 'Desk'],\n"
"        ['account_id' => 2, 'product' => 'Chair'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1024 docs/master/collections.md:1024
#, no-wrap
msgid "    $collection->implode('product', ', ');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1026 docs/master/collections.md:1026
#, no-wrap
msgid "    // Desk, Chair\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1028 docs/master/collections.md:1028
msgid "If the collection contains simple strings or numeric values, you should pass the \"glue\" as the only argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1030 docs/master/collections.md:1030
#, no-wrap
msgid "    collect([1, 2, 3, 4, 5])->implode('-');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1032 docs/master/collections.md:1032
#, no-wrap
msgid "    // '1-2-3-4-5'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1034 docs/8.x/eloquent-collections.md:116
#: docs/master/collections.md:1034 docs/master/eloquent-collections.md:116
#, no-wrap
msgid "<a name=\"method-intersect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1034 docs/master/collections.md:1034
#, no-wrap
msgid "`intersect()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1037 docs/master/collections.md:1037
msgid "The `intersect` method removes any values from the original collection that are not present in the given `array` or collection. The resulting collection will preserve the original collection's keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1039 docs/master/collections.md:1039
#, no-wrap
msgid "    $collection = collect(['Desk', 'Sofa', 'Chair']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1041 docs/master/collections.md:1041
#, no-wrap
msgid "    $intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1043 docs/8.x/collections.md:1062
#: docs/master/collections.md:1043 docs/master/collections.md:1062
#, no-wrap
msgid "    $intersect->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1045 docs/master/collections.md:1045
#, no-wrap
msgid "    // [0 => 'Desk', 2 => 'Chair']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1047 docs/master/collections.md:1047
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-intersect).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1049 docs/master/collections.md:1049
#, no-wrap
msgid "<a name=\"method-intersectbykeys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1049 docs/master/collections.md:1049
#, no-wrap
msgid "`intersectByKeys()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1052 docs/master/collections.md:1052
msgid "The `intersectByKeys` method removes any keys and their corresponding values from the original collection that are not present in the given `array` or collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1056 docs/master/collections.md:1056
#, no-wrap
msgid "    $collection = collect([\n"
"        'serial' => 'UX301', 'type' => 'screen', 'year' => 2009,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1060 docs/master/collections.md:1060
#, no-wrap
msgid "    $intersect = $collection->intersectByKeys([\n"
"        'reference' => 'UX404', 'type' => 'tab', 'year' => 2011,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1064 docs/master/collections.md:1064
#, no-wrap
msgid "    // ['type' => 'screen', 'year' => 2009]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1066 docs/master/collections.md:1066
#, no-wrap
msgid "<a name=\"method-isempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1066 docs/master/collections.md:1066
#, no-wrap
msgid "`isEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1069 docs/master/collections.md:1069
msgid "The `isEmpty` method returns `true` if the collection is empty; otherwise, `false` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1071 docs/master/collections.md:1071
#, no-wrap
msgid "    collect([])->isEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1075 docs/master/collections.md:1075
#, no-wrap
msgid "<a name=\"method-isnotempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1075 docs/master/collections.md:1075
#, no-wrap
msgid "`isNotEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1078 docs/master/collections.md:1078
msgid "The `isNotEmpty` method returns `true` if the collection is not empty; otherwise, `false` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1080 docs/master/collections.md:1080
#, no-wrap
msgid "    collect([])->isNotEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1084 docs/master/collections.md:1084
#, no-wrap
msgid "<a name=\"method-join\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1084 docs/master/collections.md:1084
#, no-wrap
msgid "`join()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1087 docs/master/collections.md:1087
msgid "The `join` method joins the collection's values with a string. Using this method's second argument, you may also specify how the final element should be appended to the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1093 docs/master/collections.md:1093
#, no-wrap
msgid "    collect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\n"
"    collect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\n"
"    collect(['a', 'b'])->join(', ', ' and '); // 'a and b'\n"
"    collect(['a'])->join(', ', ' and '); // 'a'\n"
"    collect([])->join(', ', ' and '); // ''\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1095 docs/master/collections.md:1095
#, no-wrap
msgid "<a name=\"method-keyby\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1095 docs/master/collections.md:1095
#, no-wrap
msgid "`keyBy()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1098 docs/master/collections.md:1098
msgid "The `keyBy` method keys the collection by the given key. If multiple items have the same key, only the last one will appear in the new collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1103 docs/8.x/collections.md:1544
#: docs/master/collections.md:1103 docs/master/collections.md:1540
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1105 docs/master/collections.md:1105
#, no-wrap
msgid "    $keyed = $collection->keyBy('product_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1107 docs/8.x/collections.md:1122
#: docs/8.x/collections.md:1294 docs/master/collections.md:1107
#: docs/master/collections.md:1122 docs/master/collections.md:1294
#, no-wrap
msgid "    $keyed->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1114 docs/master/collections.md:1114
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1116 docs/master/collections.md:1116
msgid "You may also pass a callback to the method. The callback should return the value to key the collection by:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1120 docs/master/collections.md:1120
#, no-wrap
msgid "    $keyed = $collection->keyBy(function ($item) {\n"
"        return strtoupper($item['product_id']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1129 docs/master/collections.md:1129
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"            'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1131 docs/master/collections.md:1131
#, no-wrap
msgid "<a name=\"method-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1131 docs/master/collections.md:1131
#, no-wrap
msgid "`keys()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1134 docs/master/collections.md:1134
msgid "The `keys` method returns all of the collection's keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1139 docs/master/collections.md:1139
#, no-wrap
msgid "    $collection = collect([\n"
"        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],\n"
"        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1141 docs/master/collections.md:1141
#, no-wrap
msgid "    $keys = $collection->keys();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1143 docs/master/collections.md:1143
#, no-wrap
msgid "    $keys->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1145 docs/master/collections.md:1145
#, no-wrap
msgid "    // ['prod-100', 'prod-200']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1147 docs/8.x/helpers.md:922
#: docs/master/collections.md:1147 docs/master/helpers.md:921
#, no-wrap
msgid "<a name=\"method-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1147 docs/8.x/helpers.md:922
#: docs/master/collections.md:1147 docs/master/helpers.md:921
#, no-wrap
msgid "`last()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1150 docs/master/collections.md:1150
msgid "The `last` method returns the last element in the collection that passes a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1154 docs/master/collections.md:1154
#, no-wrap
msgid "    collect([1, 2, 3, 4])->last(function ($value, $key) {\n"
"        return $value < 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1158 docs/master/collections.md:1158
msgid "You may also call the `last` method with no arguments to get the last element in the collection. If the collection is empty, `null` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1160 docs/master/collections.md:1160
#, no-wrap
msgid "    collect([1, 2, 3, 4])->last();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1164 docs/master/collections.md:1164
#, no-wrap
msgid "<a name=\"method-macro\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1164 docs/master/collections.md:1164
#, no-wrap
msgid "`macro()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1167 docs/master/collections.md:1167
msgid "The static `macro` method allows you to add methods to the `Collection` class at run time. Refer to the documentation on [extending collections](#extending-collections) for more information."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1169 docs/master/collections.md:1169
#, no-wrap
msgid "<a name=\"method-make\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1169 docs/master/collections.md:1169
#, no-wrap
msgid "`make()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1172 docs/master/collections.md:1172
msgid "The static `make` method creates a new collection instance. See the [Creating Collections](#creating-collections) section."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1174 docs/master/collections.md:1174
#, no-wrap
msgid "<a name=\"method-map\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1174 docs/master/collections.md:1174
#, no-wrap
msgid "`map()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1177 docs/master/collections.md:1177
msgid "The `map` method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1183 docs/master/collections.md:1183
#, no-wrap
msgid "    $multiplied = $collection->map(function ($item, $key) {\n"
"        return $item * 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1185 docs/master/collections.md:1185
#, no-wrap
msgid "    $multiplied->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1187 docs/8.x/collections.md:2366
#: docs/master/collections.md:1187 docs/master/collections.md:2362
#, no-wrap
msgid "    // [2, 4, 6, 8, 10]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1189 docs/master/collections.md:1189
#, no-wrap
msgid "> {note} Like most other collection methods, `map` returns a new collection instance; it does not modify the collection it is called on. If you want to transform the original collection, use the [`transform`](#method-transform) method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1191 docs/master/collections.md:1191
#, no-wrap
msgid "<a name=\"method-mapinto\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1191 docs/master/collections.md:1191
#, no-wrap
msgid "`mapInto()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1194 docs/master/collections.md:1194
msgid "The `mapInto()` method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1208 docs/master/collections.md:1208
#, no-wrap
msgid "    class Currency\n"
"    {\n"
"        /**\n"
"         * Create a new currency instance.\n"
"         *\n"
"         * @param  string  $code\n"
"         * @return void\n"
"         */\n"
"        function __construct(string $code)\n"
"        {\n"
"            $this->code = $code;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1210 docs/master/collections.md:1210
#, no-wrap
msgid "    $collection = collect(['USD', 'EUR', 'GBP']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1212 docs/master/collections.md:1212
#, no-wrap
msgid "    $currencies = $collection->mapInto(Currency::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1214 docs/master/collections.md:1214
#, no-wrap
msgid "    $currencies->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1216 docs/master/collections.md:1216
#, no-wrap
msgid "    // [Currency('USD'), Currency('EUR'), Currency('GBP')]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1218 docs/master/collections.md:1218
#, no-wrap
msgid "<a name=\"method-mapspread\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1218 docs/master/collections.md:1218
#, no-wrap
msgid "`mapSpread()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1221 docs/master/collections.md:1221
msgid "The `mapSpread` method iterates over the collection's items, passing each nested item value into the given closure. The closure is free to modify the item and return it, thus forming a new collection of modified items:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1223 docs/master/collections.md:1223
#, no-wrap
msgid "    $collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1225 docs/master/collections.md:1225
#, no-wrap
msgid "    $chunks = $collection->chunk(2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1229 docs/master/collections.md:1229
#, no-wrap
msgid "    $sequence = $chunks->mapSpread(function ($even, $odd) {\n"
"        return $even + $odd;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1231 docs/master/collections.md:1231
#, no-wrap
msgid "    $sequence->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1233 docs/master/collections.md:1233
#, no-wrap
msgid "    // [1, 5, 9, 13, 17]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1235 docs/master/collections.md:1235
#, no-wrap
msgid "<a name=\"method-maptogroups\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1235 docs/master/collections.md:1235
#, no-wrap
msgid "`mapToGroups()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1238 docs/master/collections.md:1238
msgid "The `mapToGroups` method groups the collection's items by the given closure. The closure should return an associative array containing a single key / value pair, thus forming a new collection of grouped values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1253 docs/master/collections.md:1253
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'name' => 'John Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane Doe',\n"
"            'department' => 'Sales',\n"
"        ],\n"
"        [\n"
"            'name' => 'Johnny Doe',\n"
"            'department' => 'Marketing',\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1257 docs/master/collections.md:1257
#, no-wrap
msgid "    $grouped = $collection->mapToGroups(function ($item, $key) {\n"
"        return [$item['department'] => $item['name']];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1266 docs/master/collections.md:1266
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'Sales' => ['John Doe', 'Jane Doe'],\n"
"            'Marketing' => ['Johnny Doe'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1268 docs/master/collections.md:1268
#, no-wrap
msgid "    $grouped->get('Sales')->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1270 docs/master/collections.md:1270
#, no-wrap
msgid "    // ['John Doe', 'Jane Doe']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1272 docs/master/collections.md:1272
#, no-wrap
msgid "<a name=\"method-mapwithkeys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1272 docs/master/collections.md:1272
#, no-wrap
msgid "`mapWithKeys()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1275 docs/master/collections.md:1275
msgid "The `mapWithKeys` method iterates through the collection and passes each value to the given callback. The callback should return an associative array containing a single key / value pair:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1288 docs/master/collections.md:1288
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'name' => 'John',\n"
"            'department' => 'Sales',\n"
"            'email' => 'john@example.com',\n"
"        ],\n"
"        [\n"
"            'name' => 'Jane',\n"
"            'department' => 'Marketing',\n"
"            'email' => 'jane@example.com',\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1292 docs/master/collections.md:1292
#, no-wrap
msgid "    $keyed = $collection->mapWithKeys(function ($item) {\n"
"        return [$item['email'] => $item['name']];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1301 docs/master/collections.md:1301
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'john@example.com' => 'John',\n"
"            'jane@example.com' => 'Jane',\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1303 docs/master/collections.md:1303
#, no-wrap
msgid "<a name=\"method-max\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1303 docs/master/collections.md:1303
#, no-wrap
msgid "`max()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1306 docs/master/collections.md:1306
msgid "The `max` method returns the maximum value of a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1311 docs/master/collections.md:1311
#, no-wrap
msgid "    $max = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 20]\n"
"    ])->max('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1315 docs/master/collections.md:1315
#, no-wrap
msgid "    $max = collect([1, 2, 3, 4, 5])->max();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1317 docs/8.x/collections.md:1601
#: docs/8.x/helpers.md:3026 docs/master/collections.md:1317
#: docs/master/collections.md:1597 docs/master/helpers.md:3014
#, no-wrap
msgid "    // 5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1319 docs/master/collections.md:1319
#, no-wrap
msgid "<a name=\"method-median\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1319 docs/master/collections.md:1319
#, no-wrap
msgid "`median()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1322 docs/master/collections.md:1322
msgid "The `median` method returns the [median value](https://en.wikipedia.org/wiki/Median) of a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1329 docs/master/collections.md:1329
#, no-wrap
msgid "    $median = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->median('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1331 docs/8.x/collections.md:2204
#: docs/master/collections.md:1331 docs/master/collections.md:2200
#, no-wrap
msgid "    // 15\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1333 docs/master/collections.md:1333
#, no-wrap
msgid "    $median = collect([1, 1, 2, 4])->median();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1335 docs/master/collections.md:1335
#, no-wrap
msgid "    // 1.5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1337 docs/master/collections.md:1337
#, no-wrap
msgid "<a name=\"method-merge\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1337 docs/master/collections.md:1337
#, no-wrap
msgid "`merge()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1340 docs/master/collections.md:1340
msgid "The `merge` method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given items's value will overwrite the value in the original collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1342 docs/8.x/collections.md:1365
#: docs/master/collections.md:1342 docs/master/collections.md:1365
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'price' => 100]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1344 docs/master/collections.md:1344
#, no-wrap
msgid "    $merged = $collection->merge(['price' => 200, 'discount' => false]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1346 docs/8.x/collections.md:1356
#: docs/8.x/collections.md:1373 docs/master/collections.md:1346
#: docs/master/collections.md:1356 docs/master/collections.md:1373
#, no-wrap
msgid "    $merged->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1348 docs/master/collections.md:1348
#, no-wrap
msgid "    // ['product_id' => 1, 'price' => 200, 'discount' => false]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1350 docs/master/collections.md:1350
msgid "If the given items's keys are numeric, the values will be appended to the end of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1352 docs/master/collections.md:1352
#, no-wrap
msgid "    $collection = collect(['Desk', 'Chair']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1354 docs/master/collections.md:1354
#, no-wrap
msgid "    $merged = $collection->merge(['Bookcase', 'Door']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1358 docs/master/collections.md:1358
#, no-wrap
msgid "    // ['Desk', 'Chair', 'Bookcase', 'Door']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1360 docs/master/collections.md:1360
#, no-wrap
msgid "<a name=\"method-mergerecursive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1360 docs/master/collections.md:1360
#, no-wrap
msgid "`mergeRecursive()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1363 docs/master/collections.md:1363
msgid "The `mergeRecursive` method merges the given array or collection recursively with the original collection. If a string key in the given items matches a string key in the original collection, then the values for these keys are merged together into an array, and this is done recursively:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1371 docs/master/collections.md:1371
#, no-wrap
msgid "    $merged = $collection->mergeRecursive([\n"
"        'product_id' => 2,\n"
"        'price' => 200,\n"
"        'discount' => false\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1375 docs/master/collections.md:1375
#, no-wrap
msgid "    // ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1377 docs/master/collections.md:1377
#, no-wrap
msgid "<a name=\"method-min\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1377 docs/master/collections.md:1377
#, no-wrap
msgid "`min()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1380 docs/master/collections.md:1380
msgid "The `min` method returns the minimum value of a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1382 docs/master/collections.md:1382
#, no-wrap
msgid "    $min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1384 docs/8.x/collections.md:1711
#: docs/8.x/helpers.md:2971 docs/8.x/helpers.md:3019
#: docs/master/collections.md:1384 docs/master/collections.md:1707
#: docs/master/helpers.md:2959 docs/master/helpers.md:3007
#, no-wrap
msgid "    // 10\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1386 docs/master/collections.md:1386
#, no-wrap
msgid "    $min = collect([1, 2, 3, 4, 5])->min();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1390 docs/master/collections.md:1390
#, no-wrap
msgid "<a name=\"method-mode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1390 docs/master/collections.md:1390
#, no-wrap
msgid "`mode()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1393 docs/master/collections.md:1393
msgid "The `mode` method returns the [mode value](https://en.wikipedia.org/wiki/Mode_(statistics)) of a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1400 docs/master/collections.md:1400
#, no-wrap
msgid "    $mode = collect([\n"
"        ['foo' => 10],\n"
"        ['foo' => 10],\n"
"        ['foo' => 20],\n"
"        ['foo' => 40]\n"
"    ])->mode('foo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1402 docs/master/collections.md:1402
#, no-wrap
msgid "    // [10]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1404 docs/master/collections.md:1404
#, no-wrap
msgid "    $mode = collect([1, 1, 2, 4])->mode();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1406 docs/master/collections.md:1406
#, no-wrap
msgid "    // [1]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1408
#, no-wrap
msgid "    $mode = collect([1, 1, 2, 2])->mode();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1410 docs/8.x/collections.md:1485
#: docs/8.x/collections.md:1746 docs/8.x/collections.md:2141
#: docs/8.x/collections.md:2267 docs/8.x/collections.md:2277
#: docs/8.x/collections.md:2294 docs/master/collections.md:1481
#: docs/master/collections.md:1742 docs/master/collections.md:2137
#: docs/master/collections.md:2263 docs/master/collections.md:2273
#: docs/master/collections.md:2290
#, no-wrap
msgid "    // [1, 2]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1412 docs/master/collections.md:1408
#, no-wrap
msgid "<a name=\"method-nth\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1412 docs/master/collections.md:1408
#, no-wrap
msgid "`nth()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1415 docs/master/collections.md:1411
msgid "The `nth` method creates a new collection consisting of every n-th element:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1417 docs/master/collections.md:1413
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1419 docs/master/collections.md:1415
#, no-wrap
msgid "    $collection->nth(4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1421 docs/master/collections.md:1417
#, no-wrap
msgid "    // ['a', 'e']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1423 docs/master/collections.md:1419
msgid "You may optionally pass a starting offset as the second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1425 docs/master/collections.md:1421
#, no-wrap
msgid "    $collection->nth(4, 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1427 docs/master/collections.md:1423
#, no-wrap
msgid "    // ['b', 'f']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1429 docs/8.x/eloquent-collections.md:166
#: docs/master/collections.md:1425 docs/master/eloquent-collections.md:166
#, no-wrap
msgid "<a name=\"method-only\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1429 docs/master/collections.md:1425
#, no-wrap
msgid "`only()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1432 docs/master/collections.md:1428
msgid "The `only` method returns the items in the collection with the specified keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1439 docs/master/collections.md:1435
#, no-wrap
msgid "    $collection = collect([\n"
"        'product_id' => 1,\n"
"        'name' => 'Desk',\n"
"        'price' => 100,\n"
"        'discount' => false\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1441 docs/master/collections.md:1437
#, no-wrap
msgid "    $filtered = $collection->only(['product_id', 'name']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1445 docs/master/collections.md:1441
#, no-wrap
msgid "    // ['product_id' => 1, 'name' => 'Desk']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1447 docs/master/collections.md:1443
msgid "For the inverse of `only`, see the [except](#method-except) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1449 docs/master/collections.md:1445
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-only).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1451 docs/master/collections.md:1447
#, no-wrap
msgid "<a name=\"method-pad\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1451 docs/master/collections.md:1447
#, no-wrap
msgid "`pad()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1454 docs/master/collections.md:1450
msgid "The `pad` method will fill the array with the given value until the array reaches the specified size. This method behaves like the [array_pad](https://secure.php.net/manual/en/function.array-pad.php) PHP function."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1456 docs/master/collections.md:1452
msgid "To pad to the left, you should specify a negative size. No padding will take place if the absolute value of the given size is less than or equal to the length of the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1458 docs/master/collections.md:1454
#, no-wrap
msgid "    $collection = collect(['A', 'B', 'C']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1460 docs/master/collections.md:1456
#, no-wrap
msgid "    $filtered = $collection->pad(5, 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1464 docs/master/collections.md:1460
#, no-wrap
msgid "    // ['A', 'B', 'C', 0, 0]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1466 docs/master/collections.md:1462
#, no-wrap
msgid "    $filtered = $collection->pad(-5, 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1470 docs/master/collections.md:1466
#, no-wrap
msgid "    // [0, 0, 'A', 'B', 'C']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1472 docs/master/collections.md:1468
#, no-wrap
msgid "<a name=\"method-partition\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1472 docs/master/collections.md:1468
#, no-wrap
msgid "`partition()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1475 docs/master/collections.md:1471
msgid "The `partition` method may be combined with the `list` PHP function to separate elements that pass a given truth test from those that do not:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1477 docs/master/collections.md:1473
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1481 docs/master/collections.md:1477
#, no-wrap
msgid "    list($underThree, $equalOrAboveThree) = $collection->partition(function ($i) {\n"
"        return $i < 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1483 docs/master/collections.md:1479
#, no-wrap
msgid "    $underThree->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1487 docs/master/collections.md:1483
#, no-wrap
msgid "    $equalOrAboveThree->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1489 docs/master/collections.md:1485
#, no-wrap
msgid "    // [3, 4, 5, 6]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1491 docs/master/collections.md:1487
#, no-wrap
msgid "<a name=\"method-pipe\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1491 docs/master/collections.md:1487
#, no-wrap
msgid "`pipe()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1494 docs/master/collections.md:1490
msgid "The `pipe` method passes the collection to the given closure and returns the result of the executed closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1500 docs/master/collections.md:1496
#, no-wrap
msgid "    $piped = $collection->pipe(function ($collection) {\n"
"        return $collection->sum();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1502 docs/8.x/collections.md:1703
#: docs/8.x/collections.md:2229 docs/master/collections.md:1498
#: docs/master/collections.md:1699 docs/master/collections.md:2225
#, no-wrap
msgid "    // 6\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1504 docs/master/collections.md:1500
#, no-wrap
msgid "<a name=\"method-pipeinto\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1504 docs/master/collections.md:1500
#, no-wrap
msgid "`pipeInto()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1507 docs/master/collections.md:1503
msgid "The `pipeInto` method creates a new instance of the given class and passes the collection into the constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1514 docs/master/collections.md:1510
#, no-wrap
msgid "    class ResourceCollection\n"
"    {\n"
"        /**\n"
"         * The Collection instance.\n"
"         */\n"
"        public $collection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1526
#, no-wrap
msgid "        /**\n"
"         * Create a new ResourceCollection instance.\n"
"         *\n"
"         * @param  Collection  $collection\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Collection $collection)\n"
"        {\n"
"            $this->collection = $collection;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1530 docs/master/collections.md:1526
#, no-wrap
msgid "    $resource = $collection->pipeInto(ResourceCollection::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1532 docs/master/collections.md:1528
#, no-wrap
msgid "    $resource->collection->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1536 docs/master/collections.md:1532
#, no-wrap
msgid "<a name=\"method-pluck\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1536 docs/master/collections.md:1532
#, no-wrap
msgid "`pluck()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1539 docs/master/collections.md:1535
msgid "The `pluck` method retrieves all of the values for a given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1546 docs/master/collections.md:1542
#, no-wrap
msgid "    $plucked = $collection->pluck('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1548 docs/8.x/collections.md:1556
#: docs/8.x/collections.md:1573 docs/8.x/collections.md:1588
#: docs/master/collections.md:1544 docs/master/collections.md:1552
#: docs/master/collections.md:1569 docs/master/collections.md:1584
#, no-wrap
msgid "    $plucked->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1550 docs/master/collections.md:1546
#, no-wrap
msgid "    // ['Desk', 'Chair']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1552 docs/master/collections.md:1548
msgid "You may also specify how you wish the resulting collection to be keyed:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1554 docs/master/collections.md:1550
#, no-wrap
msgid "    $plucked = $collection->pluck('name', 'product_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1558 docs/master/collections.md:1554
#, no-wrap
msgid "    // ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1560 docs/master/collections.md:1556
msgid "The `pluck` method also supports retrieving nested values using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1569 docs/master/collections.md:1565
#, no-wrap
msgid "    $collection = collect([\n"
"        [\n"
"            'speakers' => [\n"
"                'first_day' => ['Rosa', 'Judith'],\n"
"                'second_day' => ['Angela', 'Kathleen'],\n"
"            ],\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1571 docs/master/collections.md:1567
#, no-wrap
msgid "    $plucked = $collection->pluck('speakers.first_day');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1575 docs/master/collections.md:1571
#, no-wrap
msgid "    // ['Rosa', 'Judith']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1577 docs/master/collections.md:1573
msgid "If duplicate keys exist, the last matching element will be inserted into the plucked collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1584 docs/master/collections.md:1580
#, no-wrap
msgid "    $collection = collect([\n"
"        ['brand' => 'Tesla',  'color' => 'red'],\n"
"        ['brand' => 'Pagani', 'color' => 'white'],\n"
"        ['brand' => 'Tesla',  'color' => 'black'],\n"
"        ['brand' => 'Pagani', 'color' => 'orange'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1586 docs/master/collections.md:1582
#, no-wrap
msgid "    $plucked = $collection->pluck('color', 'brand');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1590 docs/master/collections.md:1586
#, no-wrap
msgid "    // ['Tesla' => 'black', 'Pagani' => 'orange']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1592 docs/master/collections.md:1588
#, no-wrap
msgid "<a name=\"method-pop\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1592 docs/master/collections.md:1588
#, no-wrap
msgid "`pop()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1595 docs/master/collections.md:1591
msgid "The `pop` method removes and returns the last item from the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1599 docs/master/collections.md:1595
#, no-wrap
msgid "    $collection->pop();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1605 docs/8.x/collections.md:2394
#: docs/8.x/collections.md:2529 docs/master/collections.md:1601
#: docs/master/collections.md:2390 docs/master/collections.md:2525
#, no-wrap
msgid "    // [1, 2, 3, 4]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1607 docs/master/collections.md:1603
#, no-wrap
msgid "<a name=\"method-prepend\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1607 docs/master/collections.md:1603
#, no-wrap
msgid "`prepend()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1610 docs/master/collections.md:1606
msgid "The `prepend` method adds an item to the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1614 docs/master/collections.md:1610
#, no-wrap
msgid "    $collection->prepend(0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1618 docs/master/collections.md:1614
#, no-wrap
msgid "    // [0, 1, 2, 3, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1620 docs/master/collections.md:1616
msgid "You may also pass a second argument to specify the key of the prepended item:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1622 docs/master/collections.md:1618
#, no-wrap
msgid "    $collection = collect(['one' => 1, 'two' => 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1624 docs/master/collections.md:1620
#, no-wrap
msgid "    $collection->prepend(0, 'zero');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1628 docs/master/collections.md:1624
#, no-wrap
msgid "    // ['zero' => 0, 'one' => 1, 'two' => 2]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1630 docs/master/collections.md:1626
#, no-wrap
msgid "<a name=\"method-pull\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1630 docs/master/collections.md:1626
#, no-wrap
msgid "`pull()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1633 docs/master/collections.md:1629
msgid "The `pull` method removes and returns an item from the collection by its key:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1635 docs/master/collections.md:1631
#, no-wrap
msgid "    $collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1637 docs/master/collections.md:1633
#, no-wrap
msgid "    $collection->pull('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1639 docs/master/collections.md:1635
#, no-wrap
msgid "    // 'Desk'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1643 docs/master/collections.md:1639
#, no-wrap
msgid "    // ['product_id' => 'prod-100']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1645 docs/master/collections.md:1641
#, no-wrap
msgid "<a name=\"method-push\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1645 docs/master/collections.md:1641
#, no-wrap
msgid "`push()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1648 docs/master/collections.md:1644
msgid "The `push` method appends an item to the end of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1652 docs/master/collections.md:1648
#, no-wrap
msgid "    $collection->push(5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1656 docs/8.x/collections.md:1957
#: docs/8.x/eloquent-collections.md:150 docs/master/collections.md:1652
#: docs/master/collections.md:1953 docs/master/eloquent-collections.md:150
#, no-wrap
msgid "    // [1, 2, 3, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1658 docs/master/collections.md:1654
#, no-wrap
msgid "<a name=\"method-put\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1658 docs/master/collections.md:1654
#, no-wrap
msgid "`put()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1661 docs/master/collections.md:1657
msgid "The `put` method sets the given key and value in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1663 docs/master/collections.md:1659
#, no-wrap
msgid "    $collection = collect(['product_id' => 1, 'name' => 'Desk']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1665 docs/master/collections.md:1661
#, no-wrap
msgid "    $collection->put('price', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1669 docs/master/collections.md:1665
#, no-wrap
msgid "    // ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1671 docs/master/collections.md:1667
#, no-wrap
msgid "<a name=\"method-random\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1671 docs/master/collections.md:1667
#, no-wrap
msgid "`random()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1674 docs/master/collections.md:1670
msgid "The `random` method returns a random item from the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1678 docs/master/collections.md:1674
#, no-wrap
msgid "    $collection->random();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1680 docs/8.x/helpers.md:681
#: docs/master/collections.md:1676 docs/master/helpers.md:680
#, no-wrap
msgid "    // 4 - (retrieved randomly)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1682 docs/master/collections.md:1678
msgid "You may pass an integer to `random` to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1684 docs/master/collections.md:1680
#, no-wrap
msgid "    $random = $collection->random(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1686 docs/master/collections.md:1682
#, no-wrap
msgid "    $random->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1688 docs/master/collections.md:1684
#, no-wrap
msgid "    // [2, 4, 5] - (retrieved randomly)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1690 docs/master/collections.md:1686
msgid "If the collection instance has fewer items than requested, the `random` method will throw an `InvalidArgumentException`."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1692 docs/master/collections.md:1688
#, no-wrap
msgid "<a name=\"method-reduce\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1692 docs/master/collections.md:1688
#, no-wrap
msgid "`reduce()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1695 docs/master/collections.md:1691
msgid "The `reduce` method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1701 docs/master/collections.md:1697
#, no-wrap
msgid "    $total = $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1705 docs/master/collections.md:1701
msgid "The value for `$carry` on the first iteration is `null`; however, you may specify its initial value by passing a second argument to `reduce`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1709 docs/master/collections.md:1705
#, no-wrap
msgid "    $collection->reduce(function ($carry, $item) {\n"
"        return $carry + $item;\n"
"    }, 4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1713 docs/master/collections.md:1709
msgid "The `reduce` method also passes array keys in associative collections to the given callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1719 docs/master/collections.md:1715
#, no-wrap
msgid "    $collection = collect([\n"
"        'usd' => 1400,\n"
"        'gbp' => 1200,\n"
"        'eur' => 1000,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1725 docs/master/collections.md:1721
#, no-wrap
msgid "    $ratio = [\n"
"        'usd' => 1,\n"
"        'gbp' => 1.37,\n"
"        'eur' => 1.22,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1729 docs/master/collections.md:1725
#, no-wrap
msgid "    $collection->reduceWithKeys(function ($carry, $value, $key) use ($ratio) {\n"
"        return $carry + ($value * $ratio[$key]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1731 docs/master/collections.md:1727
#, no-wrap
msgid "    // 4264\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1733 docs/master/collections.md:1729
#, no-wrap
msgid "<a name=\"method-reject\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1733 docs/master/collections.md:1729
#, no-wrap
msgid "`reject()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1736 docs/master/collections.md:1732
msgid "The `reject` method filters the collection using the given closure. The closure should return `true` if the item should be removed from the resulting collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1742 docs/master/collections.md:1738
#, no-wrap
msgid "    $filtered = $collection->reject(function ($value, $key) {\n"
"        return $value > 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1748 docs/master/collections.md:1744
msgid "For the inverse of the `reject` method, see the [`filter`](#method-filter) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1750 docs/master/collections.md:1746
#, no-wrap
msgid "<a name=\"method-replace\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1750 docs/master/collections.md:1746
#, no-wrap
msgid "`replace()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1753 docs/master/collections.md:1749
msgid "The `replace` method behaves similarly to `merge`; however, in addition to overwriting matching items that have string keys, the `replace` method will also overwrite items in the collection that have matching numeric keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1755 docs/master/collections.md:1751
#, no-wrap
msgid "    $collection = collect(['Taylor', 'Abigail', 'James']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1757 docs/master/collections.md:1753
#, no-wrap
msgid "    $replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1759 docs/8.x/collections.md:1783
#: docs/master/collections.md:1755 docs/master/collections.md:1779
#, no-wrap
msgid "    $replaced->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1761 docs/master/collections.md:1757
#, no-wrap
msgid "    // ['Taylor', 'Victoria', 'James', 'Finn']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1763 docs/master/collections.md:1759
#, no-wrap
msgid "<a name=\"method-replacerecursive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1763 docs/master/collections.md:1759
#, no-wrap
msgid "`replaceRecursive()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1766 docs/master/collections.md:1762
msgid "This method works like `replace`, but it will recur into arrays and apply the same replacement process to the inner values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1776 docs/master/collections.md:1772
#, no-wrap
msgid "    $collection = collect([\n"
"        'Taylor',\n"
"        'Abigail',\n"
"        [\n"
"            'James',\n"
"            'Victoria',\n"
"            'Finn'\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1781 docs/master/collections.md:1777
#, no-wrap
msgid "    $replaced = $collection->replaceRecursive([\n"
"        'Charlie',\n"
"        2 => [1 => 'King']\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1785 docs/master/collections.md:1781
#, no-wrap
msgid "    // ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1787 docs/master/collections.md:1783
#, no-wrap
msgid "<a name=\"method-reverse\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1787 docs/master/collections.md:1783
#, no-wrap
msgid "`reverse()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1790 docs/master/collections.md:1786
msgid "The `reverse` method reverses the order of the collection's items, preserving the original keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1792 docs/master/collections.md:1788
#, no-wrap
msgid "    $collection = collect(['a', 'b', 'c', 'd', 'e']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1794 docs/master/collections.md:1790
#, no-wrap
msgid "    $reversed = $collection->reverse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1796 docs/master/collections.md:1792
#, no-wrap
msgid "    $reversed->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1806 docs/master/collections.md:1802
#, no-wrap
msgid "    /*\n"
"        [\n"
"            4 => 'e',\n"
"            3 => 'd',\n"
"            2 => 'c',\n"
"            1 => 'b',\n"
"            0 => 'a',\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1808 docs/master/collections.md:1804
#, no-wrap
msgid "<a name=\"method-search\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1808 docs/master/collections.md:1804
#, no-wrap
msgid "`search()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1811 docs/master/collections.md:1807
msgid "The `search` method searches the collection for the given value and returns its key if found. If the item is not found, `false` is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1813 docs/master/collections.md:1809
#, no-wrap
msgid "    $collection = collect([2, 4, 6, 8]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1815 docs/master/collections.md:1811
#, no-wrap
msgid "    $collection->search(4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1819 docs/master/collections.md:1815
msgid "The search is done using a \"loose\" comparison, meaning a string with an integer value will be considered equal to an integer of the same value. To use \"strict\" comparison, pass `true` as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1821 docs/master/collections.md:1817
#, no-wrap
msgid "    collect([2, 4, 6, 8])->search('4', $strict = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1825 docs/master/collections.md:1821
msgid "Alternatively, you may provide your own closure to search for the first item that passes a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1829 docs/master/collections.md:1825
#, no-wrap
msgid "    collect([2, 4, 6, 8])->search(function ($item, $key) {\n"
"        return $item > 5;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1833 docs/master/collections.md:1829
#, no-wrap
msgid "<a name=\"method-shift\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1833 docs/master/collections.md:1829
#, no-wrap
msgid "`shift()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1836 docs/master/collections.md:1832
msgid "The `shift` method removes and returns the first item from the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1840 docs/master/collections.md:1836
#, no-wrap
msgid "    $collection->shift();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1846 docs/master/collections.md:1842
#, no-wrap
msgid "    // [2, 3, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1848 docs/master/collections.md:1844
#, no-wrap
msgid "<a name=\"method-shuffle\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1848 docs/master/collections.md:1844
#, no-wrap
msgid "`shuffle()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1851 docs/master/collections.md:1847
msgid "The `shuffle` method randomly shuffles the items in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1855 docs/master/collections.md:1851
#, no-wrap
msgid "    $shuffled = $collection->shuffle();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1857 docs/master/collections.md:1853
#, no-wrap
msgid "    $shuffled->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1859 docs/8.x/helpers.md:713
#: docs/master/collections.md:1855 docs/master/helpers.md:712
#, no-wrap
msgid "    // [3, 2, 5, 1, 4] - (generated randomly)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1861 docs/master/collections.md:1857
#, no-wrap
msgid "<a name=\"method-skip\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1861 docs/master/collections.md:1857
#, no-wrap
msgid "`skip()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1864 docs/master/collections.md:1860
msgid "The `skip` method returns a new collection, with the given number of elements removed from the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1866 docs/8.x/collections.md:1923
#: docs/8.x/collections.md:2189 docs/master/collections.md:1862
#: docs/master/collections.md:1919 docs/master/collections.md:2185
#, no-wrap
msgid "    $collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1868 docs/master/collections.md:1864
#, no-wrap
msgid "    $collection = $collection->skip(4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1872 docs/8.x/collections.md:1929
#: docs/master/collections.md:1868 docs/master/collections.md:1925
#, no-wrap
msgid "    // [5, 6, 7, 8, 9, 10]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1874 docs/master/collections.md:1870
#, no-wrap
msgid "<a name=\"method-skipuntil\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1874 docs/master/collections.md:1870
#, no-wrap
msgid "`skipUntil()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1877 docs/master/collections.md:1873
msgid "The `skipUntil` method skips over items from the collection until the given callback returns `true` and then returns the remaining items in the collection as a new collection instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1883 docs/master/collections.md:1879
#, no-wrap
msgid "    $subset = $collection->skipUntil(function ($item) {\n"
"        return $item >= 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1885 docs/8.x/collections.md:1895
#: docs/8.x/collections.md:1912 docs/8.x/collections.md:2265
#: docs/8.x/collections.md:2275 docs/8.x/collections.md:2292
#: docs/master/collections.md:1881 docs/master/collections.md:1891
#: docs/master/collections.md:1908 docs/master/collections.md:2261
#: docs/master/collections.md:2271 docs/master/collections.md:2288
#, no-wrap
msgid "    $subset->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1889 docs/master/collections.md:1885
msgid "You may also pass a simple value to the `skipUntil` method to skip all items until the given value is found:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1893 docs/master/collections.md:1889
#, no-wrap
msgid "    $subset = $collection->skipUntil(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1899 docs/master/collections.md:1895
#, no-wrap
msgid "> {note} If the given value is not found or the callback never returns `true`, the `skipUntil` method will return an empty collection.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1901 docs/master/collections.md:1897
#, no-wrap
msgid "<a name=\"method-skipwhile\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1901 docs/master/collections.md:1897
#, no-wrap
msgid "`skipWhile()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1904 docs/master/collections.md:1900
msgid "The `skipWhile` method skips over items from the collection while the given callback returns `true` and then returns the remaining items in the collection as a new collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1910 docs/master/collections.md:1906
#, no-wrap
msgid "    $subset = $collection->skipWhile(function ($item) {\n"
"        return $item <= 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1914 docs/master/collections.md:1910
#, no-wrap
msgid "    // [4]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1916 docs/master/collections.md:1912
#, no-wrap
msgid "> {note} If the callback never returns `true`, the `skipWhile` method will return an empty collection.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1918 docs/master/collections.md:1914
#, no-wrap
msgid "<a name=\"method-slice\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1918 docs/master/collections.md:1914
#, no-wrap
msgid "`slice()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1921 docs/master/collections.md:1917
msgid "The `slice` method returns a slice of the collection starting at the given index:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1925 docs/master/collections.md:1921
#, no-wrap
msgid "    $slice = $collection->slice(4);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1927 docs/8.x/collections.md:1935
#: docs/master/collections.md:1923 docs/master/collections.md:1931
#, no-wrap
msgid "    $slice->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1931 docs/master/collections.md:1927
msgid "If you would like to limit the size of the returned slice, pass the desired size as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1933 docs/master/collections.md:1929
#, no-wrap
msgid "    $slice = $collection->slice(4, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1937 docs/master/collections.md:1933
#, no-wrap
msgid "    // [5, 6]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1939 docs/master/collections.md:1935
msgid "The returned slice will preserve keys by default. If you do not wish to preserve the original keys, you can use the [`values`](#method-values) method to reindex them."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1941 docs/master/collections.md:1937
#, no-wrap
msgid "<a name=\"method-some\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1941 docs/master/collections.md:1937
#, no-wrap
msgid "`some()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1944 docs/master/collections.md:1940
msgid "Alias for the [`contains`](#method-contains) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1946 docs/master/collections.md:1942
#, no-wrap
msgid "<a name=\"method-sort\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1946 docs/master/collections.md:1942
#, no-wrap
msgid "`sort()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1949 docs/master/collections.md:1945
msgid "The `sort` method sorts the collection. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1951 docs/8.x/collections.md:2088
#: docs/master/collections.md:1947 docs/master/collections.md:2084
#, no-wrap
msgid "    $collection = collect([5, 3, 1, 2, 4]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1953 docs/master/collections.md:1949
#, no-wrap
msgid "    $sorted = $collection->sort();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1955 docs/8.x/collections.md:1976
#: docs/8.x/collections.md:1996 docs/8.x/collections.md:2018
#: docs/8.x/collections.md:2042 docs/8.x/collections.md:2067
#: docs/8.x/collections.md:2092 docs/master/collections.md:1951
#: docs/master/collections.md:1972 docs/master/collections.md:1992
#: docs/master/collections.md:2014 docs/master/collections.md:2038
#: docs/master/collections.md:2063 docs/master/collections.md:2088
#, no-wrap
msgid "    $sorted->values()->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1959 docs/master/collections.md:1955
msgid "If your sorting needs are more advanced, you may pass a callback to `sort` with your own algorithm. Refer to the PHP documentation on [`uasort`](https://secure.php.net/manual/en/function.uasort.php#refsect1-function.uasort-parameters), which is what the collection's `sort` method calls utilizes internally."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1961 docs/master/collections.md:1957
#, no-wrap
msgid "> {tip} If you need to sort a collection of nested arrays or objects, see the [`sortBy`](#method-sortby) and [`sortByDesc`](#method-sortbydesc) methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1963 docs/master/collections.md:1959
#, no-wrap
msgid "<a name=\"method-sortby\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:1963 docs/master/collections.md:1959
#, no-wrap
msgid "`sortBy()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1966 docs/master/collections.md:1962
msgid "The `sortBy` method sorts the collection by the given key. The sorted collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1972 docs/master/collections.md:1968
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk', 'price' => 200],\n"
"        ['name' => 'Chair', 'price' => 100],\n"
"        ['name' => 'Bookcase', 'price' => 150],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1974 docs/master/collections.md:1970
#, no-wrap
msgid "    $sorted = $collection->sortBy('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1984 docs/master/collections.md:1980
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Chair', 'price' => 100],\n"
"            ['name' => 'Bookcase', 'price' => 150],\n"
"            ['name' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1986 docs/master/collections.md:1982
msgid "The `sort` method accepts [sort flags](https://www.php.net/manual/en/function.sort.php) as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1992 docs/master/collections.md:1988
#, no-wrap
msgid "    $collection = collect([\n"
"        ['title' => 'Item 1'],\n"
"        ['title' => 'Item 12'],\n"
"        ['title' => 'Item 3'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:1994 docs/master/collections.md:1990
#, no-wrap
msgid "    $sorted = $collection->sortBy('title', SORT_NATURAL);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2004 docs/master/collections.md:2000
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['title' => 'Item 1'],\n"
"            ['title' => 'Item 3'],\n"
"            ['title' => 'Item 12'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2006 docs/master/collections.md:2002
msgid "Alternatively, you may pass your own closure to determine how to sort the collection's values:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2012 docs/master/collections.md:2008
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2016 docs/master/collections.md:2012
#, no-wrap
msgid "    $sorted = $collection->sortBy(function ($product, $key) {\n"
"        return count($product['colors']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2026 docs/master/collections.md:2022
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Chair', 'colors' => ['Black']],\n"
"            ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"            ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2028 docs/master/collections.md:2024
msgid "If you would like to sort your collection by multiple attributes, you may pass an array of sort operations to the `sortBy` method. Each sort operation should be an array consisting of the attribute that you wish to sort by and the direction of the desired sort:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2035 docs/8.x/collections.md:2060
#: docs/master/collections.md:2031 docs/master/collections.md:2056
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Taylor Otwell', 'age' => 34],\n"
"        ['name' => 'Abigail Otwell', 'age' => 30],\n"
"        ['name' => 'Taylor Otwell', 'age' => 36],\n"
"        ['name' => 'Abigail Otwell', 'age' => 32],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2040 docs/master/collections.md:2036
#, no-wrap
msgid "    $sorted = $collection->sortBy([\n"
"        ['name', 'asc'],\n"
"        ['age', 'desc'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2051 docs/8.x/collections.md:2076
#: docs/master/collections.md:2047 docs/master/collections.md:2072
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Abigail Otwell', 'age' => 32],\n"
"            ['name' => 'Abigail Otwell', 'age' => 30],\n"
"            ['name' => 'Taylor Otwell', 'age' => 36],\n"
"            ['name' => 'Taylor Otwell', 'age' => 34],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2053 docs/master/collections.md:2049
msgid "When sorting a collection by multiple attributes, you may also provide closures that define each sort operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2065 docs/master/collections.md:2061
#, no-wrap
msgid "    $sorted = $collection->sortBy([\n"
"        fn ($a, $b) => $a['name'] <=> $b['name'],\n"
"        fn ($a, $b) => $b['age'] <=> $a['age'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2078 docs/master/collections.md:2074
#, no-wrap
msgid "<a name=\"method-sortbydesc\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2078 docs/master/collections.md:2074
#, no-wrap
msgid "`sortByDesc()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2081 docs/master/collections.md:2077
msgid "This method has the same signature as the [`sortBy`](#method-sortby) method, but will sort the collection in the opposite order."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2083 docs/master/collections.md:2079
#, no-wrap
msgid "<a name=\"method-sortdesc\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2083 docs/master/collections.md:2079
#, no-wrap
msgid "`sortDesc()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2086 docs/master/collections.md:2082
msgid "This method will sort the collection in the opposite order as the [`sort`](#method-sort) method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2090 docs/master/collections.md:2086
#, no-wrap
msgid "    $sorted = $collection->sortDesc();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2094 docs/master/collections.md:2090
#, no-wrap
msgid "    // [5, 4, 3, 2, 1]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2096 docs/master/collections.md:2092
msgid "Unlike `sort`, you may not pass a closure to `sortDesc`. Instead, you should use the [`sort`](#method-sort) method and invert your comparison."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2098 docs/master/collections.md:2094
#, no-wrap
msgid "<a name=\"method-sortkeys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2098 docs/master/collections.md:2094
#, no-wrap
msgid "`sortKeys()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2101 docs/master/collections.md:2097
msgid "The `sortKeys` method sorts the collection by the keys of the underlying associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2107 docs/master/collections.md:2103
#, no-wrap
msgid "    $collection = collect([\n"
"        'id' => 22345,\n"
"        'first' => 'John',\n"
"        'last' => 'Doe',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2109 docs/master/collections.md:2105
#, no-wrap
msgid "    $sorted = $collection->sortKeys();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2111 docs/master/collections.md:2107
#, no-wrap
msgid "    $sorted->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2119 docs/master/collections.md:2115
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'first' => 'John',\n"
"            'id' => 22345,\n"
"            'last' => 'Doe',\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2121 docs/master/collections.md:2117
#, no-wrap
msgid "<a name=\"method-sortkeysdesc\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2121 docs/master/collections.md:2117
#, no-wrap
msgid "`sortKeysDesc()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2124 docs/master/collections.md:2120
msgid "This method has the same signature as the [`sortKeys`](#method-sortkeys) method, but will sort the collection in the opposite order."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2126 docs/master/collections.md:2122
#, no-wrap
msgid "<a name=\"method-splice\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2126 docs/master/collections.md:2122
#, no-wrap
msgid "`splice()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2129 docs/master/collections.md:2125
msgid "The `splice` method removes and returns a slice of items starting at the specified index:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2133 docs/master/collections.md:2129
#, no-wrap
msgid "    $chunk = $collection->splice(2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2137 docs/master/collections.md:2133
#, no-wrap
msgid "    // [3, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2143 docs/master/collections.md:2139
msgid "You may pass a second argument to limit the size of the resulting collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2147 docs/master/collections.md:2143
#, no-wrap
msgid "    $chunk = $collection->splice(2, 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2151 docs/8.x/collections.md:2165
#: docs/master/collections.md:2147 docs/master/collections.md:2161
#, no-wrap
msgid "    // [3]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2155 docs/master/collections.md:2151
#, no-wrap
msgid "    // [1, 2, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2157 docs/master/collections.md:2153
msgid "In addition, you may pass a third argument containing the new items to replace the items removed from the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2161 docs/master/collections.md:2157
#, no-wrap
msgid "    $chunk = $collection->splice(2, 1, [10, 11]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2169 docs/master/collections.md:2165
#, no-wrap
msgid "    // [1, 2, 10, 11, 4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2171 docs/master/collections.md:2167
#, no-wrap
msgid "<a name=\"method-split\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2171 docs/master/collections.md:2167
#, no-wrap
msgid "`split()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2174 docs/master/collections.md:2170
msgid "The `split` method breaks a collection into the given number of groups:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2178 docs/master/collections.md:2174
#, no-wrap
msgid "    $groups = $collection->split(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2180 docs/8.x/collections.md:2193
#: docs/master/collections.md:2176 docs/master/collections.md:2189
#, no-wrap
msgid "    $groups->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2182 docs/master/collections.md:2178
#, no-wrap
msgid "    // [[1, 2], [3, 4], [5]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2184 docs/master/collections.md:2180
#, no-wrap
msgid "<a name=\"method-splitin\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2184 docs/master/collections.md:2180
#, no-wrap
msgid "`splitIn()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2187 docs/master/collections.md:2183
msgid "The `splitIn` method breaks a collection into the given number of groups, filling non-terminal groups completely before allocating the remainder to the final group:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2191 docs/master/collections.md:2187
#, no-wrap
msgid "    $groups = $collection->splitIn(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2195 docs/master/collections.md:2191
#, no-wrap
msgid "    // [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2197 docs/master/collections.md:2193
#, no-wrap
msgid "<a name=\"method-sum\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2197 docs/master/collections.md:2193
#, no-wrap
msgid "`sum()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2200 docs/master/collections.md:2196
msgid "The `sum` method returns the sum of all items in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2202 docs/master/collections.md:2198
#, no-wrap
msgid "    collect([1, 2, 3, 4, 5])->sum();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2206 docs/master/collections.md:2202
msgid "If the collection contains nested arrays or objects, you should pass a key that will be used to determine which values to sum:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2211 docs/master/collections.md:2207
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n"
"        ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2213 docs/master/collections.md:2209
#, no-wrap
msgid "    $collection->sum('pages');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2215 docs/master/collections.md:2211
#, no-wrap
msgid "    // 1272\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2217 docs/master/collections.md:2213
msgid "In addition, you may pass your own closure to determine which values of the collection to sum:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2223 docs/master/collections.md:2219
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Chair', 'colors' => ['Black']],\n"
"        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n"
"        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2227 docs/master/collections.md:2223
#, no-wrap
msgid "    $collection->sum(function ($product) {\n"
"        return count($product['colors']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2231 docs/master/collections.md:2227
#, no-wrap
msgid "<a name=\"method-take\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2231 docs/master/collections.md:2227
#, no-wrap
msgid "`take()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2234 docs/master/collections.md:2230
msgid "The `take` method returns a new collection with the specified number of items:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2236 docs/8.x/collections.md:2246
#: docs/master/collections.md:2232 docs/master/collections.md:2242
#, no-wrap
msgid "    $collection = collect([0, 1, 2, 3, 4, 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2238 docs/master/collections.md:2234
#, no-wrap
msgid "    $chunk = $collection->take(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2242 docs/master/collections.md:2238
#, no-wrap
msgid "    // [0, 1, 2]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2244 docs/master/collections.md:2240
msgid "You may also pass a negative integer to take the specified number of items from the end of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2248 docs/master/collections.md:2244
#, no-wrap
msgid "    $chunk = $collection->take(-2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2252 docs/master/collections.md:2248
#, no-wrap
msgid "    // [4, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2254 docs/master/collections.md:2250
#, no-wrap
msgid "<a name=\"method-takeuntil\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2254 docs/master/collections.md:2250
#, no-wrap
msgid "`takeUntil()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2257 docs/master/collections.md:2253
msgid "The `takeUntil` method returns items in the collection until the given callback returns `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2263 docs/master/collections.md:2259
#, no-wrap
msgid "    $subset = $collection->takeUntil(function ($item) {\n"
"        return $item >= 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2269 docs/master/collections.md:2265
msgid "You may also pass a simple value to the `takeUntil` method to get the items until the given value is found:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2273 docs/master/collections.md:2269
#, no-wrap
msgid "    $subset = $collection->takeUntil(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2279 docs/master/collections.md:2275
#, no-wrap
msgid "> {note} If the given value is not found or the callback never returns `true`, the `takeUntil` method will return all items in the collection.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2281 docs/master/collections.md:2277
#, no-wrap
msgid "<a name=\"method-takewhile\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2281 docs/master/collections.md:2277
#, no-wrap
msgid "`takeWhile()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2284 docs/master/collections.md:2280
msgid "The `takeWhile` method returns items in the collection until the given callback returns `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2290 docs/master/collections.md:2286
#, no-wrap
msgid "    $subset = $collection->takeWhile(function ($item) {\n"
"        return $item < 3;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2296 docs/master/collections.md:2292
#, no-wrap
msgid "> {note} If the callback never returns `false`, the `takeWhile` method will return all items in the collection.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2298 docs/8.x/helpers.md:2896
#: docs/master/collections.md:2294 docs/master/helpers.md:2884
#, no-wrap
msgid "<a name=\"method-tap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2298 docs/8.x/helpers.md:2896
#: docs/master/collections.md:2294 docs/master/helpers.md:2884
#, no-wrap
msgid "`tap()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2301 docs/master/collections.md:2297
msgid "The `tap` method passes the collection to the given callback, allowing you to \"tap\" into the collection at a specific point and do something with the items while not affecting the collection itself. The collection is then returned by the `tap` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2308 docs/master/collections.md:2304
#, no-wrap
msgid "    collect([2, 4, 3, 1, 5])\n"
"        ->sort()\n"
"        ->tap(function ($collection) {\n"
"            Log::debug('Values after sorting', $collection->values()->all());\n"
"        })\n"
"        ->shift();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2312 docs/master/collections.md:2308
#, no-wrap
msgid "<a name=\"method-times\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2312 docs/master/collections.md:2308
#, no-wrap
msgid "`times()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2315 docs/master/collections.md:2311
msgid "The static `times` method creates a new collection by invoking the given closure a specified number of times:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2319 docs/master/collections.md:2315
#, no-wrap
msgid "    $collection = Collection::times(10, function ($number) {\n"
"        return $number * 9;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2323 docs/master/collections.md:2319
#, no-wrap
msgid "    // [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2325 docs/master/collections.md:2321
#, no-wrap
msgid "<a name=\"method-toarray\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2325 docs/master/collections.md:2321
#, no-wrap
msgid "`toArray()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2328 docs/master/collections.md:2324
msgid "The `toArray` method converts the collection into a plain PHP `array`. If the collection's values are [Eloquent](/docs/{{version}}/eloquent) models, the models will also be converted to arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2330 docs/8.x/collections.md:2347
#: docs/master/collections.md:2326 docs/master/collections.md:2343
#, no-wrap
msgid "    $collection = collect(['name' => 'Desk', 'price' => 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2332 docs/master/collections.md:2328
#, no-wrap
msgid "    $collection->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2338 docs/master/collections.md:2334
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2340 docs/master/collections.md:2336
#, no-wrap
msgid "> {note} `toArray` also converts all of the collection's nested objects that are an instance of `Arrayable` to an array. If you want to get the raw array underlying the collection, use the [`all`](#method-all) method instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2342 docs/master/collections.md:2338
#, no-wrap
msgid "<a name=\"method-tojson\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2342 docs/master/collections.md:2338
#, no-wrap
msgid "`toJson()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2345 docs/master/collections.md:2341
msgid "The `toJson` method converts the collection into a JSON serialized string:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2349 docs/master/collections.md:2345
#, no-wrap
msgid "    $collection->toJson();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2351 docs/master/collections.md:2347
#, no-wrap
msgid "    // '{\"name\":\"Desk\", \"price\":200}'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2353 docs/8.x/helpers.md:2960
#: docs/master/collections.md:2349 docs/master/helpers.md:2948
#, no-wrap
msgid "<a name=\"method-transform\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2353 docs/8.x/helpers.md:2960
#: docs/master/collections.md:2349 docs/master/helpers.md:2948
#, no-wrap
msgid "`transform()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2356 docs/master/collections.md:2352
msgid "The `transform` method iterates over the collection and calls the given callback with each item in the collection. The items in the collection will be replaced by the values returned by the callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2362 docs/master/collections.md:2358
#, no-wrap
msgid "    $collection->transform(function ($item, $key) {\n"
"        return $item * 2;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2368 docs/master/collections.md:2364
#, no-wrap
msgid "> {note} Unlike most other collection methods, `transform` modifies the collection itself. If you wish to create a new collection instead, use the [`map`](#method-map) method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2370 docs/master/collections.md:2366
#, no-wrap
msgid "<a name=\"method-union\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2370 docs/master/collections.md:2366
#, no-wrap
msgid "`union()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2373 docs/master/collections.md:2369
msgid "The `union` method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preferred:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2375 docs/master/collections.md:2371
#, no-wrap
msgid "    $collection = collect([1 => ['a'], 2 => ['b']]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2377 docs/master/collections.md:2373
#, no-wrap
msgid "    $union = $collection->union([3 => ['c'], 1 => ['b']]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2379 docs/master/collections.md:2375
#, no-wrap
msgid "    $union->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2381 docs/master/collections.md:2377
#, no-wrap
msgid "    // [1 => ['a'], 2 => ['b'], 3 => ['c']]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2383 docs/8.x/eloquent-collections.md:186
#: docs/master/collections.md:2379 docs/master/eloquent-collections.md:186
#, no-wrap
msgid "<a name=\"method-unique\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2383 docs/master/collections.md:2379
#, no-wrap
msgid "`unique()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2386 docs/master/collections.md:2382
msgid "The `unique` method returns all of the unique items in the collection. The returned collection keeps the original array keys, so in the following example we will use the [`values`](#method-values) method to reset the keys to consecutively numbered indexes:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2388 docs/master/collections.md:2384
#, no-wrap
msgid "    $collection = collect([1, 1, 2, 2, 3, 4, 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2390 docs/master/collections.md:2386
#, no-wrap
msgid "    $unique = $collection->unique();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2392 docs/8.x/collections.md:2408
#: docs/8.x/collections.md:2423 docs/master/collections.md:2388
#: docs/master/collections.md:2404 docs/master/collections.md:2419
#, no-wrap
msgid "    $unique->values()->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2396 docs/master/collections.md:2392
msgid "When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2404 docs/master/collections.md:2400
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n"
"        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2406 docs/master/collections.md:2402
#, no-wrap
msgid "    $unique = $collection->unique('brand');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2415 docs/master/collections.md:2411
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"            ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2417 docs/master/collections.md:2413
msgid "Finally, you may also pass your own closure to the `unique` method to specify which value should determine an item's uniqueness:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2421 docs/master/collections.md:2417
#, no-wrap
msgid "    $unique = $collection->unique(function ($item) {\n"
"        return $item['brand'].$item['type'];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2432 docs/master/collections.md:2428
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n"
"            ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n"
"            ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n"
"            ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2434 docs/master/collections.md:2430
msgid "The `unique` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`uniqueStrict`](#method-uniquestrict) method to filter using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2436 docs/master/collections.md:2432
#, no-wrap
msgid "> {tip} This method's behavior is modified when using [Eloquent Collections](/docs/{{version}}/eloquent-collections#method-unique).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2438 docs/master/collections.md:2434
#, no-wrap
msgid "<a name=\"method-uniquestrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2438 docs/master/collections.md:2434
#, no-wrap
msgid "`uniqueStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2441 docs/master/collections.md:2437
msgid "This method has the same signature as the [`unique`](#method-unique) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2443 docs/master/collections.md:2439
#, no-wrap
msgid "<a name=\"method-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2443 docs/master/collections.md:2439
#, no-wrap
msgid "`unless()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2446 docs/master/collections.md:2442
msgid "The `unless` method will execute the given callback unless the first argument given to the method evaluates to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2452 docs/master/collections.md:2448
#, no-wrap
msgid "    $collection->unless(true, function ($collection) {\n"
"        return $collection->push(4);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2456 docs/master/collections.md:2452
#, no-wrap
msgid "    $collection->unless(false, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2460 docs/master/collections.md:2456
#, no-wrap
msgid "    // [1, 2, 3, 5]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2462 docs/master/collections.md:2458
msgid "For the inverse of `unless`, see the [`when`](#method-when) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2464 docs/master/collections.md:2460
#, no-wrap
msgid "<a name=\"method-unlessempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2464 docs/master/collections.md:2460
#, no-wrap
msgid "`unlessEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2467 docs/master/collections.md:2463
msgid "Alias for the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2469 docs/master/collections.md:2465
#, no-wrap
msgid "<a name=\"method-unlessnotempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2469 docs/master/collections.md:2465
#, no-wrap
msgid "`unlessNotEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2472 docs/master/collections.md:2468
msgid "Alias for the [`whenEmpty`](#method-whenempty) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2474 docs/master/collections.md:2470
#, no-wrap
msgid "<a name=\"method-unwrap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2474 docs/master/collections.md:2470
#, no-wrap
msgid "`unwrap()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2477 docs/master/collections.md:2473
msgid "The static `unwrap` method returns the collection's underlying items from the given value when applicable:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2479 docs/master/collections.md:2475
#, no-wrap
msgid "    Collection::unwrap(collect('John Doe'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2481 docs/8.x/collections.md:2485
#: docs/8.x/collections.md:2850 docs/8.x/collections.md:2856
#: docs/8.x/collections.md:2862 docs/master/collections.md:2477
#: docs/master/collections.md:2481 docs/master/collections.md:2846
#: docs/master/collections.md:2852 docs/master/collections.md:2858
#, no-wrap
msgid "    // ['John Doe']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2483 docs/master/collections.md:2479
#, no-wrap
msgid "    Collection::unwrap(['John Doe']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2487 docs/master/collections.md:2483
#, no-wrap
msgid "    Collection::unwrap('John Doe');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2489 docs/master/collections.md:2485
#, no-wrap
msgid "    // 'John Doe'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2491 docs/master/collections.md:2487
#, no-wrap
msgid "<a name=\"method-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2491 docs/master/collections.md:2487
#, no-wrap
msgid "`values()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2494 docs/master/collections.md:2490
msgid "The `values` method returns a new collection with the keys reset to consecutive integers:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2499 docs/master/collections.md:2495
#, no-wrap
msgid "    $collection = collect([\n"
"        10 => ['product' => 'Desk', 'price' => 200],\n"
"        11 => ['product' => 'Desk', 'price' => 200],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2501 docs/master/collections.md:2497
#, no-wrap
msgid "    $values = $collection->values();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2503 docs/master/collections.md:2499
#, no-wrap
msgid "    $values->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2510 docs/master/collections.md:2506
#, no-wrap
msgid "    /*\n"
"        [\n"
"            0 => ['product' => 'Desk', 'price' => 200],\n"
"            1 => ['product' => 'Desk', 'price' => 200],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2512 docs/master/collections.md:2508
#, no-wrap
msgid "<a name=\"method-when\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2512 docs/master/collections.md:2508
#, no-wrap
msgid "`when()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2515 docs/master/collections.md:2511
msgid "The `when` method will execute the given callback when the first argument given to the method evaluates to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2521 docs/master/collections.md:2517
#, no-wrap
msgid "    $collection->when(true, function ($collection) {\n"
"        return $collection->push(4);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2525 docs/master/collections.md:2521
#, no-wrap
msgid "    $collection->when(false, function ($collection) {\n"
"        return $collection->push(5);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2531 docs/master/collections.md:2527
msgid "For the inverse of `when`, see the [`unless`](#method-unless) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2533 docs/master/collections.md:2529
#, no-wrap
msgid "<a name=\"method-whenempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2533 docs/master/collections.md:2529
#, no-wrap
msgid "`whenEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2536 docs/master/collections.md:2532
msgid "The `whenEmpty` method will execute the given callback when the collection is empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2538 docs/8.x/collections.md:2561
#: docs/master/collections.md:2534 docs/master/collections.md:2557
#, no-wrap
msgid "    $collection = collect(['Michael', 'Tom']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2542 docs/8.x/collections.md:2553
#: docs/master/collections.md:2538 docs/master/collections.md:2549
#, no-wrap
msgid "    $collection->whenEmpty(function ($collection) {\n"
"        return $collection->push('Adam');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2546 docs/master/collections.md:2542
#, no-wrap
msgid "    // ['Michael', 'Tom']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2549 docs/8.x/collections.md:2591
#: docs/8.x/collections.md:2603 docs/master/collections.md:2545
#: docs/master/collections.md:2587 docs/master/collections.md:2599
#, no-wrap
msgid "    $collection = collect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2557 docs/master/collections.md:2553
#, no-wrap
msgid "    // ['Adam']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2559 docs/master/collections.md:2555
msgid "A second closure may be passed to the `whenEmpty` method that will be executed when the collection is not empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2567 docs/master/collections.md:2563
#, no-wrap
msgid "    $collection->whenEmpty(function ($collection) {\n"
"        return $collection->push('Adam');\n"
"    }, function ($collection) {\n"
"        return $collection->push('Taylor');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2571 docs/master/collections.md:2567
#, no-wrap
msgid "    // ['Michael', 'Tom', 'Taylor']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2573 docs/master/collections.md:2569
msgid "For the inverse of `whenEmpty`, see the [`whenNotEmpty`](#method-whennotempty) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2575 docs/master/collections.md:2571
#, no-wrap
msgid "<a name=\"method-whennotempty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2575 docs/master/collections.md:2571
#, no-wrap
msgid "`whenNotEmpty()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2578 docs/master/collections.md:2574
msgid "The `whenNotEmpty` method will execute the given callback when the collection is not empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2580 docs/master/collections.md:2576
#, no-wrap
msgid "    $collection = collect(['michael', 'tom']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2584 docs/8.x/collections.md:2595
#: docs/master/collections.md:2580 docs/master/collections.md:2591
#, no-wrap
msgid "    $collection->whenNotEmpty(function ($collection) {\n"
"        return $collection->push('adam');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2588 docs/master/collections.md:2584
#, no-wrap
msgid "    // ['michael', 'tom', 'adam']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2599 docs/8.x/helpers.md:807
#: docs/master/collections.md:2595 docs/master/helpers.md:806
#, no-wrap
msgid "    // []\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2601 docs/master/collections.md:2597
msgid "A second closure may be passed to the `whenNotEmpty` method that will be executed when the collection is empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2609 docs/master/collections.md:2605
#, no-wrap
msgid "    $collection->whenNotEmpty(function ($collection) {\n"
"        return $collection->push('adam');\n"
"    }, function ($collection) {\n"
"        return $collection->push('taylor');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2613 docs/master/collections.md:2609
#, no-wrap
msgid "    // ['taylor']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2615 docs/master/collections.md:2611
msgid "For the inverse of `whenNotEmpty`, see the [`whenEmpty`](#method-whenempty) method."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2617 docs/master/collections.md:2613
#, no-wrap
msgid "<a name=\"method-where\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2617 docs/master/collections.md:2613
#, no-wrap
msgid "`where()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2620 docs/master/collections.md:2616
msgid "The `where` method filters the collection by a given key / value pair:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2627 docs/8.x/collections.md:2701
#: docs/8.x/collections.md:2775 docs/master/collections.md:2623
#: docs/master/collections.md:2697 docs/master/collections.md:2771
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 100],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2629 docs/master/collections.md:2625
#, no-wrap
msgid "    $filtered = $collection->where('price', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2638 docs/8.x/collections.md:2786
#: docs/master/collections.md:2634 docs/master/collections.md:2782
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Chair', 'price' => 100],\n"
"            ['product' => 'Door', 'price' => 100],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2640 docs/master/collections.md:2636
msgid "The `where` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereStrict`](#method-wherestrict) method to filter using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2642 docs/master/collections.md:2638
msgid "Optionally, you may pass a comparison operator as the second parameter."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2648 docs/master/collections.md:2644
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"        ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"        ['name' => 'Sue', 'deleted_at' => null],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2650 docs/master/collections.md:2646
#, no-wrap
msgid "    $filtered = $collection->where('deleted_at', '!=', null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2659 docs/master/collections.md:2655
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n"
"            ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2661 docs/master/collections.md:2657
#, no-wrap
msgid "<a name=\"method-wherestrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2661 docs/master/collections.md:2657
#, no-wrap
msgid "`whereStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2664 docs/master/collections.md:2660
msgid "This method has the same signature as the [`where`](#method-where) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2666 docs/master/collections.md:2662
#, no-wrap
msgid "<a name=\"method-wherebetween\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2666 docs/master/collections.md:2662
#, no-wrap
msgid "`whereBetween()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2669 docs/master/collections.md:2665
msgid "The `whereBetween` method filters the collection by determining if a specified item value is within a given range:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2677 docs/8.x/collections.md:2752
#: docs/master/collections.md:2673 docs/master/collections.md:2748
#, no-wrap
msgid "    $collection = collect([\n"
"        ['product' => 'Desk', 'price' => 200],\n"
"        ['product' => 'Chair', 'price' => 80],\n"
"        ['product' => 'Bookcase', 'price' => 150],\n"
"        ['product' => 'Pencil', 'price' => 30],\n"
"        ['product' => 'Door', 'price' => 100],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2679 docs/master/collections.md:2675
#, no-wrap
msgid "    $filtered = $collection->whereBetween('price', [100, 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2689 docs/master/collections.md:2685
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Desk', 'price' => 200],\n"
"            ['product' => 'Bookcase', 'price' => 150],\n"
"            ['product' => 'Door', 'price' => 100],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2691 docs/master/collections.md:2687
#, no-wrap
msgid "<a name=\"method-wherein\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2691 docs/master/collections.md:2687
#, no-wrap
msgid "`whereIn()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2694 docs/master/collections.md:2690
msgid "The `whereIn` method removes elements from the collection that do not have a specified item value that is contained within the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2703 docs/master/collections.md:2699
#, no-wrap
msgid "    $filtered = $collection->whereIn('price', [150, 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2712 docs/master/collections.md:2708
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Desk', 'price' => 200],\n"
"            ['product' => 'Bookcase', 'price' => 150],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2714 docs/master/collections.md:2710
msgid "The `whereIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereInStrict`](#method-whereinstrict) method to filter using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2716 docs/master/collections.md:2712
#, no-wrap
msgid "<a name=\"method-whereinstrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2716 docs/master/collections.md:2712
#, no-wrap
msgid "`whereInStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2719 docs/master/collections.md:2715
msgid "This method has the same signature as the [`whereIn`](#method-wherein) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2721 docs/master/collections.md:2717
#, no-wrap
msgid "<a name=\"method-whereinstanceof\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2721 docs/master/collections.md:2717
#, no-wrap
msgid "`whereInstanceOf()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2724 docs/master/collections.md:2720
msgid "The `whereInstanceOf` method filters the collection by a given class type:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2727 docs/master/collections.md:2723
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Models\\Post;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2733 docs/master/collections.md:2729
#, no-wrap
msgid "    $collection = collect([\n"
"        new User,\n"
"        new User,\n"
"        new Post,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2735 docs/master/collections.md:2731
#, no-wrap
msgid "    $filtered = $collection->whereInstanceOf(User::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2739 docs/master/collections.md:2735
#, no-wrap
msgid "    // [App\\Models\\User, App\\Models\\User]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2741 docs/master/collections.md:2737
#, no-wrap
msgid "<a name=\"method-wherenotbetween\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2741 docs/master/collections.md:2737
#, no-wrap
msgid "`whereNotBetween()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2744 docs/master/collections.md:2740
msgid "The `whereNotBetween` method filters the collection by determining if a specified item value is outside of a given range:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2754 docs/master/collections.md:2750
#, no-wrap
msgid "    $filtered = $collection->whereNotBetween('price', [100, 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2763 docs/master/collections.md:2759
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['product' => 'Chair', 'price' => 80],\n"
"            ['product' => 'Pencil', 'price' => 30],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2765 docs/master/collections.md:2761
#, no-wrap
msgid "<a name=\"method-wherenotin\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2765 docs/master/collections.md:2761
#, no-wrap
msgid "`whereNotIn()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2768 docs/master/collections.md:2764
msgid "The `whereNotIn` method removes elements from the collection that have a specified item value that is not contained within the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2777 docs/master/collections.md:2773
#, no-wrap
msgid "    $filtered = $collection->whereNotIn('price', [150, 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2788 docs/master/collections.md:2784
msgid "The `whereNotIn` method uses \"loose\" comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the [`whereNotInStrict`](#method-wherenotinstrict) method to filter using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2790 docs/master/collections.md:2786
#, no-wrap
msgid "<a name=\"method-wherenotinstrict\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2790 docs/master/collections.md:2786
#, no-wrap
msgid "`whereNotInStrict()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2793 docs/master/collections.md:2789
msgid "This method has the same signature as the [`whereNotIn`](#method-wherenotin) method; however, all values are compared using \"strict\" comparisons."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2795 docs/master/collections.md:2791
#, no-wrap
msgid "<a name=\"method-wherenotnull\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2795 docs/master/collections.md:2791
#, no-wrap
msgid "`whereNotNull()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2798 docs/master/collections.md:2794
msgid "The `whereNotNull` method returns items from the collection where the given key is not `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2804 docs/8.x/collections.md:2826
#: docs/master/collections.md:2800 docs/master/collections.md:2822
#, no-wrap
msgid "    $collection = collect([\n"
"        ['name' => 'Desk'],\n"
"        ['name' => null],\n"
"        ['name' => 'Bookcase'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2806 docs/master/collections.md:2802
#, no-wrap
msgid "    $filtered = $collection->whereNotNull('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2815 docs/master/collections.md:2811
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Desk'],\n"
"            ['name' => 'Bookcase'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2817 docs/master/collections.md:2813
#, no-wrap
msgid "<a name=\"method-wherenull\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2817 docs/master/collections.md:2813
#, no-wrap
msgid "`whereNull()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2820 docs/master/collections.md:2816
msgid "The `whereNull` method returns items from the collection where the given key is `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2828 docs/master/collections.md:2824
#, no-wrap
msgid "    $filtered = $collection->whereNull('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2836 docs/master/collections.md:2832
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => null],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2839 docs/master/collections.md:2835
#, no-wrap
msgid "<a name=\"method-wrap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2839 docs/master/collections.md:2835
#, no-wrap
msgid "`wrap()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2842 docs/master/collections.md:2838
msgid "The static `wrap` method wraps the given value in a collection when applicable:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2844 docs/master/collections.md:2840
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2846 docs/master/collections.md:2842
#, no-wrap
msgid "    $collection = Collection::wrap('John Doe');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2852 docs/master/collections.md:2848
#, no-wrap
msgid "    $collection = Collection::wrap(['John Doe']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2858 docs/master/collections.md:2854
#, no-wrap
msgid "    $collection = Collection::wrap(collect('John Doe'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2864 docs/master/collections.md:2860
#, no-wrap
msgid "<a name=\"method-zip\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:2864 docs/master/collections.md:2860
#, no-wrap
msgid "`zip()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2867 docs/master/collections.md:2863
msgid "The `zip` method merges together the values of the given array with the values of the original collection at their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2869 docs/master/collections.md:2865
#, no-wrap
msgid "    $collection = collect(['Chair', 'Desk']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2871 docs/master/collections.md:2867
#, no-wrap
msgid "    $zipped = $collection->zip([100, 200]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2873 docs/master/collections.md:2869
#, no-wrap
msgid "    $zipped->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2875 docs/master/collections.md:2871
#, no-wrap
msgid "    // [['Chair', 100], ['Desk', 200]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2877 docs/master/collections.md:2873
#, no-wrap
msgid "<a name=\"higher-order-messages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/collections.md:2877 docs/master/collections.md:2873
#, no-wrap
msgid "Higher Order Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2880 docs/master/collections.md:2876
msgid "Collections also provide support for \"higher order messages\", which are short-cuts for performing common actions on collections. The collection methods that provide higher order messages are: [`average`](#method-average), [`avg`](#method-avg), [`contains`](#method-contains), [`each`](#method-each), [`every`](#method-every), [`filter`](#method-filter), [`first`](#method-first), [`flatMap`](#method-flatmap), [`groupBy`](#method-groupby), [`keyBy`](#method-keyby), [`map`](#method-map), [`max`](#method-max), [`min`](#method-min), [`partition`](#method-partition), [`reject`](#method-reject), [`skipUntil`](#method-skipuntil), [`skipWhile`](#method-skipwhile), [`some`](#method-some), [`sortBy`](#method-sortby), [`sortByDesc`](#method-sortbydesc), [`sum`](#method-sum), [`takeUntil`](#method-takeuntil), [`takeWhile`](#method-takewhile), and [`unique`](#method-unique)."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2882 docs/master/collections.md:2878
msgid "Each higher order message can be accessed as a dynamic property on a collection instance. For instance, let's use the `each` higher order message to call a method on each object within a collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2886 docs/master/collections.md:2882
#, no-wrap
msgid "    $users = User::where('votes', '>', 500)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2888 docs/master/collections.md:2884
#, no-wrap
msgid "    $users->each->markAsVip();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2890 docs/master/collections.md:2886
msgid "Likewise, we can use the `sum` higher order message to gather the total number of \"votes\" for a collection of users:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2892 docs/master/collections.md:2888
#, no-wrap
msgid "    $users = User::where('group', 'Development')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2894 docs/master/collections.md:2890
#, no-wrap
msgid "    return $users->sum->votes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2896 docs/master/collections.md:2892
#, no-wrap
msgid "<a name=\"lazy-collections\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/collections.md:2896 docs/master/collections.md:2892
#, no-wrap
msgid "Lazy Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2899 docs/master/collections.md:2895
#, no-wrap
msgid "<a name=\"lazy-collection-introduction\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2902 docs/master/collections.md:2898
#, no-wrap
msgid "> {note} Before learning more about Laravel's lazy collections, take some time to familiarize yourself with [PHP generators](https://www.php.net/manual/en/language.generators.overview.php).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2904 docs/master/collections.md:2900
msgid "To supplement the already powerful `Collection` class, the `LazyCollection` class leverages PHP's [generators](https://www.php.net/manual/en/language.generators.overview.php) to allow you to work with very large datasets while keeping memory usage low."
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2906 docs/master/collections.md:2902
msgid "For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel's collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2909 docs/master/collections.md:2905
#, no-wrap
msgid "    use App\\Models\\LogEntry;\n"
"    use Illuminate\\Support\\LazyCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2912 docs/8.x/collections.md:2951
#: docs/master/collections.md:2908 docs/master/collections.md:2947
#, no-wrap
msgid "    LazyCollection::make(function () {\n"
"        $handle = fopen('log.txt', 'r');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2921 docs/master/collections.md:2917
#, no-wrap
msgid "        while (($line = fgets($handle)) !== false) {\n"
"            yield $line;\n"
"        }\n"
"    })->chunk(4)->map(function ($lines) {\n"
"        return LogEntry::fromLines($lines);\n"
"    })->each(function (LogEntry $logEntry) {\n"
"        // Process the log entry...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2923 docs/master/collections.md:2919
msgid "Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2929 docs/master/collections.md:2925
#, no-wrap
msgid "    $users = User::all()->filter(function ($user) {\n"
"        return $user->id > 500;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2931 docs/master/collections.md:2927
msgid "However, the query builder's `cursor` method returns a `LazyCollection` instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the `filter` callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2937 docs/8.x/eloquent.md:369
#: docs/master/collections.md:2933 docs/master/eloquent.md:369
#, no-wrap
msgid "    $users = User::cursor()->filter(function ($user) {\n"
"        return $user->id > 500;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2941 docs/8.x/eloquent.md:373
#: docs/master/collections.md:2937 docs/master/eloquent.md:373
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        echo $user->id;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2943 docs/master/collections.md:2939
#, no-wrap
msgid "<a name=\"creating-lazy-collections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/collections.md:2943 docs/master/collections.md:2939
#, no-wrap
msgid "Creating Lazy Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2946 docs/master/collections.md:2942
msgid "To create a lazy collection instance, you should pass a PHP generator function to the collection's `make` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2948 docs/master/collections.md:2944
#, no-wrap
msgid "    use Illuminate\\Support\\LazyCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2956 docs/master/collections.md:2952
#, no-wrap
msgid "        while (($line = fgets($handle)) !== false) {\n"
"            yield $line;\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2958 docs/master/collections.md:2954
#, no-wrap
msgid "<a name=\"the-enumerable-contract\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/collections.md:2958 docs/master/collections.md:2954
#, no-wrap
msgid "The Enumerable Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:2961 docs/master/collections.md:2957
msgid "Almost all methods available on the `Collection` class are also available on the `LazyCollection` class. Both of these classes implement the `Illuminate\\Support\\Enumerable` contract, which defines the following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3072 docs/master/collections.md:3068
msgid "[all](#method-all)  [average](#method-average)  [avg](#method-avg)  [chunk](#method-chunk)  [chunkWhile](#method-chunkwhile)  [collapse](#method-collapse)  [collect](#method-collect)  [combine](#method-combine)  [concat](#method-concat)  [contains](#method-contains)  [containsStrict](#method-containsstrict)  [count](#method-count)  [countBy](#method-countBy)  [crossJoin](#method-crossjoin)  [dd](#method-dd)  [diff](#method-diff)  [diffAssoc](#method-diffassoc)  [diffKeys](#method-diffkeys)  [dump](#method-dump)  [duplicates](#method-duplicates)  [duplicatesStrict](#method-duplicatesstrict)  [each](#method-each)  [eachSpread](#method-eachspread)  [every](#method-every)  [except](#method-except)  [filter](#method-filter)  [first](#method-first)  [firstWhere](#method-first-where)  [flatMap](#method-flatmap)  [flatten](#method-flatten)  [flip](#method-flip)  [forPage](#method-forpage)  [get](#method-get)  [groupBy](#method-groupby)  [has](#method-has)  [implode](#method-implode)  [intersect](#method-intersect)  [intersectByKeys](#method-intersectbykeys)  [isEmpty](#method-isempty)  [isNotEmpty](#method-isnotempty)  [join](#method-join)  [keyBy](#method-keyby)  [keys](#method-keys)  [last](#method-last)  [macro](#method-macro)  [make](#method-make)  [map](#method-map)  [mapInto](#method-mapinto)  [mapSpread](#method-mapspread)  [mapToGroups](#method-maptogroups)  [mapWithKeys](#method-mapwithkeys)  [max](#method-max)  [median](#method-median)  [merge](#method-merge)  [mergeRecursive](#method-mergerecursive)  [min](#method-min)  [mode](#method-mode)  [nth](#method-nth)  [only](#method-only)  [pad](#method-pad)  [partition](#method-partition)  [pipe](#method-pipe)  [pluck](#method-pluck)  [random](#method-random)  [reduce](#method-reduce)  [reject](#method-reject)  [replace](#method-replace)  [replaceRecursive](#method-replacerecursive)  [reverse](#method-reverse)  [search](#method-search)  [shuffle](#method-shuffle)  [skip](#method-skip)  [slice](#method-slice)  [some](#method-some)  [sort](#method-sort)  [sortBy](#method-sortby)  [sortByDesc](#method-sortbydesc)  [sortKeys](#method-sortkeys)  [sortKeysDesc](#method-sortkeysdesc)  [split](#method-split)  [sum](#method-sum)  [take](#method-take)  [tap](#method-tap)  [times](#method-times)  [toArray](#method-toarray)  [toJson](#method-tojson)  [union](#method-union)  [unique](#method-unique)  [uniqueStrict](#method-uniquestrict)  [unless](#method-unless)  [unlessEmpty](#method-unlessempty)  [unlessNotEmpty](#method-unlessnotempty)  [unwrap](#method-unwrap)  [values](#method-values)  [when](#method-when)  [whenEmpty](#method-whenempty)  [whenNotEmpty](#method-whennotempty)  [where](#method-where)  [whereStrict](#method-wherestrict)  [whereBetween](#method-wherebetween)  [whereIn](#method-wherein)  [whereInStrict](#method-whereinstrict)  [whereInstanceOf](#method-whereinstanceof)  [whereNotBetween](#method-wherenotbetween)  [whereNotIn](#method-wherenotin)  [whereNotInStrict](#method-wherenotinstrict)  [wrap](#method-wrap)  [zip](#method-zip)"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3076 docs/master/collections.md:3072
#, no-wrap
msgid "> {note} Methods that mutate the collection (such as `shift`, `pop`, `prepend` etc.) are **not** available on the `LazyCollection` class.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3078 docs/master/collections.md:3074
#, no-wrap
msgid "<a name=\"lazy-collection-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/collections.md:3078 docs/master/collections.md:3074
#, no-wrap
msgid "Lazy Collection Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3081 docs/master/collections.md:3077
msgid "In addition to the methods defined in the `Enumerable` contract, the `LazyCollection` class contains the following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3083 docs/master/collections.md:3079
#, no-wrap
msgid "<a name=\"method-takeUntilTimeout\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:3083 docs/master/collections.md:3079
#, no-wrap
msgid "`takeUntilTimeout()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3086 docs/master/collections.md:3082
msgid "The `takeUntilTimeout` method returns a new lazy collection that will enumerate values until the specified time. After that time, the collection will then stop enumerating:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3089 docs/master/collections.md:3085
#, no-wrap
msgid "    $lazyCollection = LazyCollection::times(INF)\n"
"        ->takeUntilTimeout(now()->addMinute());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3092 docs/master/collections.md:3088
#, no-wrap
msgid "    $lazyCollection->each(function ($number) {\n"
"        dump($number);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3095 docs/master/collections.md:3091
#, no-wrap
msgid "        sleep(1);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3101 docs/master/collections.md:3097
#, no-wrap
msgid "    // 1\n"
"    // 2\n"
"    // ...\n"
"    // 58\n"
"    // 59\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3103 docs/master/collections.md:3099
msgid "To illustrate the usage of this method, imagine an application that submits invoices from the database using a cursor. You could define a [scheduled task](/docs/{{version}}/scheduling) that runs every 15 minutes and only processes invoices for a maximum of 14 minutes:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3106 docs/master/collections.md:3102
#, no-wrap
msgid "    use App\\Models\\Invoice;\n"
"    use Illuminate\\Support\\Carbon;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3112 docs/master/collections.md:3108
#, no-wrap
msgid "    Invoice::pending()->cursor()\n"
"        ->takeUntilTimeout(\n"
"            Carbon::createFromTimestamp(LARAVEL_START)->add(14, 'minutes')\n"
"        )\n"
"        ->each(fn ($invoice) => $invoice->submit());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3114 docs/master/collections.md:3110
#, no-wrap
msgid "<a name=\"method-tapEach\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:3114 docs/master/collections.md:3110
#, no-wrap
msgid "`tapEach()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3117 docs/master/collections.md:3113
msgid "While the `each` method calls the given callback for each item in the collection right away, the `tapEach` method only calls the given callback as the items are being pulled out of the list one by one:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3122 docs/master/collections.md:3118
#, no-wrap
msgid "    // Nothing has been dumped so far...\n"
"    $lazyCollection = LazyCollection::times(INF)->tapEach(function ($value) {\n"
"        dump($value);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3125 docs/master/collections.md:3121
#, no-wrap
msgid "    // Three items are dumped...\n"
"    $array = $lazyCollection->take(3)->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3129 docs/master/collections.md:3125
#, no-wrap
msgid "    // 1\n"
"    // 2\n"
"    // 3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3131 docs/master/collections.md:3127
#, no-wrap
msgid "<a name=\"method-remember\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/collections.md:3131 docs/master/collections.md:3127
#, no-wrap
msgid "`remember()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3134 docs/master/collections.md:3130
msgid "The `remember` method returns a new lazy collection that will remember any values that have already been enumerated and will not retrieve them again on subsequent collection enumerations:"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3137 docs/master/collections.md:3133
#, no-wrap
msgid "    // No query has been executed yet...\n"
"    $users = User::cursor()->remember();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3141 docs/master/collections.md:3137
#, no-wrap
msgid "    // The query is executed...\n"
"    // The first 5 users are hydrated from the database...\n"
"    $users->take(5)->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/collections.md:3145 docs/master/collections.md:3141
#, no-wrap
msgid "    // First 5 users come from the collection's cache...\n"
"    // The rest are hydrated from the database...\n"
"    $users->take(20)->all();\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Environment Configuration](#environment-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Environment Variable Types](#environment-variable-types)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Retrieving Environment Configuration](#retrieving-environment-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Determining The Current Environment](#determining-the-current-environment)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Accessing Configuration Values](#accessing-configuration-values)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/configuration.md:12 docs/master/configuration.md:12
msgid "[Configuration Caching](#configuration-caching)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/configuration.md:12 docs/8.x/deployment.md:14
#: docs/master/configuration.md:12 docs/master/deployment.md:14
msgid "[Debug Mode](#debug-mode)"
msgstr ""

#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#: docs/8.x/configuration.md:12 docs/8.x/scheduling.md:18
#: docs/master/configuration.md:12 docs/master/scheduling.md:18
msgid "[Maintenance Mode](#maintenance-mode)"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:17 docs/8.x/installation.md:221
#: docs/master/configuration.md:17 docs/master/installation.md:179
msgid "All of the configuration files for the Laravel framework are stored in the `config` directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:19 docs/master/configuration.md:19
msgid "These configuration files allow you to configure things like your database connection information, your mail server information, as well as various other core configuration values such as your application timezone and encryption key."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:21 docs/master/configuration.md:21
#: docs/master/installation.md:183
#, no-wrap
msgid "<a name=\"environment-configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/configuration.md:21 docs/master/configuration.md:21
#, no-wrap
msgid "Environment Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:24 docs/master/configuration.md:24
msgid "It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different cache driver locally than you do on your production server."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:26 docs/master/configuration.md:26
msgid "To make this a cinch, Laravel utilizes the [DotEnv](https://github.com/vlucas/phpdotenv) PHP library. In a fresh Laravel installation, the root directory of your application will contain a `.env.example` file that defines many common environment variables. During the Laravel installation process, this file will automatically be copied to `.env`."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:28 docs/master/configuration.md:28
msgid "Laravel's default `.env` file contains some common configuration values that may differ based on whether your application is running locally or on a production web server. These values are then retrieved from various Laravel configuration files within the `config` directory using Laravel's `env` function."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:30 docs/master/configuration.md:30
msgid "If you are developing with a team, you may wish to continue including a `.env.example` file with your application. By putting placeholder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:32 docs/master/configuration.md:32
#, no-wrap
msgid "> {tip} Any variable in your `.env` file can be overridden by external environment variables such as server-level or system-level environment variables.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:34 docs/master/configuration.md:34
#, no-wrap
msgid "<a name=\"environment-file-security\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:34 docs/master/configuration.md:34
#, no-wrap
msgid "Environment File Security"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:37 docs/8.x/installation.md:230
#: docs/master/configuration.md:37 docs/master/installation.md:188
msgid "Your `.env` file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:39 docs/master/configuration.md:39
#, no-wrap
msgid "<a name=\"environment-variable-types\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/configuration.md:39 docs/master/configuration.md:39
#, no-wrap
msgid "Environment Variable Types"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:42 docs/master/configuration.md:42
msgid "All variables in your `.env` files are typically parsed as strings, so some reserved values have been created to allow you to return a wider range of types from the `env()` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:53 docs/master/configuration.md:53
msgid "`.env` Value | `env()` Value ------------- | ------------- true | (bool) true (true) | (bool) true false | (bool) false (false) | (bool) false empty | (string) '' (empty) | (string) '' null | (null) null (null) | (null) null"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:55 docs/master/configuration.md:55
msgid "If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:57 docs/master/configuration.md:57
#, no-wrap
msgid "    APP_NAME=\"My Application\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:59 docs/master/configuration.md:59
#, no-wrap
msgid "<a name=\"retrieving-environment-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/configuration.md:59 docs/master/configuration.md:59
#, no-wrap
msgid "Retrieving Environment Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:62 docs/master/configuration.md:62
msgid "All of the variables listed in this file will be loaded into the `$_ENV` PHP super-global when your application receives a request. However, you may use the `env` helper to retrieve values from these variables in your configuration files. In fact, if you review the Laravel configuration files, you will notice many of the options are already using this helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:64 docs/master/configuration.md:64
#, no-wrap
msgid "    'debug' => env('APP_DEBUG', false),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:66 docs/master/configuration.md:66
msgid "The second value passed to the `env` function is the \"default value\". This value will be returned if no environment variable exists for the given key."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:68 docs/master/configuration.md:68
#, no-wrap
msgid "<a name=\"determining-the-current-environment\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/configuration.md:68 docs/master/configuration.md:68
#, no-wrap
msgid "Determining The Current Environment"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:71 docs/master/configuration.md:71
msgid "The current application environment is determined via the `APP_ENV` variable from your `.env` file. You may access this value via the `environment` method on the `App` [facade](/docs/{{version}}/facades):"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:73 docs/8.x/localization.md:44
#: docs/8.x/localization.md:65 docs/master/configuration.md:73
#: docs/master/localization.md:44 docs/master/localization.md:65
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\App;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:75 docs/master/configuration.md:75
#, no-wrap
msgid "    $environment = App::environment();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:77 docs/master/configuration.md:77
msgid "You may also pass arguments to the `environment` method to determine if the environment matches a given value. The method will return `true` if the environment matches any of the given values:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:81 docs/master/configuration.md:81
#, no-wrap
msgid "    if (App::environment('local')) {\n"
"        // The environment is local\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:85 docs/master/configuration.md:85
#, no-wrap
msgid "    if (App::environment(['local', 'staging'])) {\n"
"        // The environment is either local OR staging...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:87 docs/master/configuration.md:87
#, no-wrap
msgid "> {tip} The current application environment detection can be overridden by defining a server-level `APP_ENV` environment variable.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:89 docs/master/configuration.md:89
#, no-wrap
msgid "<a name=\"accessing-configuration-values\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/configuration.md:89 docs/master/configuration.md:89
#, no-wrap
msgid "Accessing Configuration Values"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:92 docs/master/configuration.md:92
msgid "You may easily access your configuration values using the global `config` helper function from anywhere in your application. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:94 docs/8.x/helpers.md:2626
#: docs/master/configuration.md:94 docs/master/helpers.md:2614
#, no-wrap
msgid "    $value = config('app.timezone');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:97 docs/master/configuration.md:97
#, no-wrap
msgid "    // Retrieve a default value if the configuration value does not exist...\n"
"    $value = config('app.timezone', 'Asia/Seoul');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:99 docs/master/configuration.md:99
msgid "To set configuration values at runtime, pass an array to the `config` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:101 docs/master/configuration.md:101
#, no-wrap
msgid "    config(['app.timezone' => 'America/Chicago']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:103 docs/master/configuration.md:103
#, no-wrap
msgid "<a name=\"configuration-caching\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/configuration.md:103 docs/master/configuration.md:103
#, no-wrap
msgid "Configuration Caching"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:106 docs/master/configuration.md:106
msgid "To give your application a speed boost, you should cache all of your configuration files into a single file using the `config:cache` Artisan command. This will combine all of the configuration options for your application into a single file which can be quickly loaded by the framework."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:108 docs/master/configuration.md:108
msgid "You should typically run the `php artisan config:cache` command as part of your production deployment process. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application's development."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:110
#, no-wrap
msgid "> {note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded; therefore, the `env` function will only return external, system level environment variables.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:112 docs/8.x/deployment.md:122
#: docs/master/configuration.md:112 docs/master/deployment.md:123
#, no-wrap
msgid "<a name=\"debug-mode\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/configuration.md:112 docs/8.x/deployment.md:122
#: docs/master/configuration.md:112 docs/master/deployment.md:123
#, no-wrap
msgid "Debug Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:115 docs/8.x/errors.md:22
#: docs/master/configuration.md:115 docs/master/errors.md:22
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:117 docs/master/configuration.md:117
msgid "For local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the variable is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:119 docs/8.x/scheduling.md:299
#: docs/master/configuration.md:119 docs/master/scheduling.md:299
#, no-wrap
msgid "<a name=\"maintenance-mode\"></a>\n"
msgstr ""

#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  configuration.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  scheduling.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/configuration.md:119 docs/8.x/scheduling.md:299
#: docs/master/configuration.md:119 docs/master/scheduling.md:299
#, no-wrap
msgid "Maintenance Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:122 docs/master/configuration.md:122
msgid "When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a `MaintenanceModeException` will be thrown with a status code of 503."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:124 docs/master/configuration.md:124
msgid "To enable maintenance mode, execute the `down` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:126 docs/master/configuration.md:126
#, no-wrap
msgid "    php artisan down\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:128 docs/master/configuration.md:128
msgid "You may also provide a `retry` option to the `down` command, which will be set as the `Retry-After` HTTP header's value:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:130 docs/master/configuration.md:130
#, no-wrap
msgid "    php artisan down --retry=60\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:132 docs/master/configuration.md:132
#, no-wrap
msgid "<a name=\"bypassing-maintenance-mode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:132 docs/master/configuration.md:132
#, no-wrap
msgid "Bypassing Maintenance Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:135 docs/master/configuration.md:135
msgid "Even while in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:137 docs/8.x/releases.md:239
#: docs/master/configuration.md:137 docs/master/releases.md:239
#, no-wrap
msgid "    php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:139 docs/8.x/releases.md:241
#: docs/master/configuration.md:139 docs/master/releases.md:241
msgid "After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:141 docs/8.x/releases.md:243
#: docs/master/configuration.md:141 docs/master/releases.md:243
#, no-wrap
msgid "    https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:143 docs/8.x/releases.md:245
#: docs/master/configuration.md:143 docs/master/releases.md:245
msgid "When accessing this hidden route, you will then be redirected to the `/` route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:145 docs/8.x/releases.md:247
#: docs/master/configuration.md:145 docs/master/releases.md:247
#, no-wrap
msgid "<a name=\"pre-rendering-the-maintenance-mode-view\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:145 docs/8.x/releases.md:247
#: docs/master/configuration.md:145 docs/master/releases.md:247
#, no-wrap
msgid "Pre-Rendering The Maintenance Mode View"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:148 docs/8.x/releases.md:250
#: docs/master/configuration.md:148 docs/master/releases.md:250
msgid "If you utilize the `php artisan down` command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:150 docs/master/configuration.md:150
msgid "For this reason, Laravel allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:152 docs/8.x/releases.md:254
#: docs/master/configuration.md:152 docs/master/releases.md:254
#, no-wrap
msgid "    php artisan down --render=\"errors::503\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:154 docs/master/configuration.md:154
#, no-wrap
msgid "<a name=\"redirecting-maintenance-mode-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:154 docs/master/configuration.md:154
#, no-wrap
msgid "Redirecting Maintenance Mode Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:157 docs/master/configuration.md:157
msgid "While in maintenance mode, Laravel will display the maintenance mode view for all application URLs the user attempts to access. If you wish, you may instruct Laravel to redirect all requests to a specific URL. This may be accomplished using the `redirect` option. For example, you may wish to redirect all requests to the `/` URI:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:159 docs/master/configuration.md:159
#, no-wrap
msgid "    php artisan down --redirect=/\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:161 docs/master/configuration.md:161
#, no-wrap
msgid "<a name=\"disabling-maintenance-mode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:161 docs/master/configuration.md:161
#, no-wrap
msgid "Disabling Maintenance Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:164 docs/master/configuration.md:164
msgid "To disable maintenance mode, use the `up` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:166 docs/master/configuration.md:166
#, no-wrap
msgid "    php artisan up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:168 docs/master/configuration.md:168
#, no-wrap
msgid "> {tip} You may customize the default maintenance mode template by defining your own template at `resources/views/errors/503.blade.php`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:170 docs/master/configuration.md:170
#, no-wrap
msgid "<a name=\"maintenance-mode-queues\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:170 docs/master/configuration.md:170
#, no-wrap
msgid "Maintenance Mode & Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:173 docs/master/configuration.md:173
msgid "While your application is in maintenance mode, no [queued jobs](/docs/{{version}}/queues) will be handled. The jobs will continue to be handled as normal once the application is out of maintenance mode."
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:175 docs/master/configuration.md:175
#, no-wrap
msgid "<a name=\"alternatives-to-maintenance-mode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/configuration.md:175 docs/master/configuration.md:175
#, no-wrap
msgid "Alternatives To Maintenance Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/configuration.md:177 docs/master/configuration.md:177
msgid "Since maintenance mode requires your application to have several seconds of downtime, consider alternatives like [Laravel Vapor](https://vapor.laravel.com) and [Envoyer](https://envoyer.io) to accomplish zero-downtime deployment with Laravel."
msgstr ""

#. type: Title #
#: docs/8.x/console-tests.md:1 docs/master/console-tests.md:1
#, no-wrap
msgid "Console Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:5 docs/master/console-tests.md:5
msgid "- [Introduction](#introduction)  - [Input / Output Expectations](#input-output-expectations)"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:10 docs/master/console-tests.md:10
msgid "In addition to simplifying HTTP testing, Laravel provides a simple API for testing your application's [custom console commands](/docs/{{version}}/artisan)."
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:12 docs/master/console-tests.md:12
#, no-wrap
msgid "<a name=\"input-output-expectations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/console-tests.md:12 docs/master/console-tests.md:12
#, no-wrap
msgid "Input / Output Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:15 docs/master/console-tests.md:15
msgid "Laravel allows you to easily \"mock\" user input for your console commands using the `expectsQuestion` method. In addition, you may specify the exit code and text that you expect to be output by the console command using the `assertExitCode` and `expectsOutput` methods. For example, consider the following console command:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:18 docs/master/console-tests.md:18
#, no-wrap
msgid "    Artisan::command('question', function () {\n"
"        $name = $this->ask('What is your name?');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:24 docs/master/console-tests.md:24
#, no-wrap
msgid "        $language = $this->choice('Which language do you prefer?', [\n"
"            'PHP',\n"
"            'Ruby',\n"
"            'Python',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:27 docs/master/console-tests.md:27
#, no-wrap
msgid "        $this->line('Your name is '.$name.' and you prefer '.$language.'.');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:29 docs/master/console-tests.md:29
msgid "You may test this command with the following test which utilizes the `expectsQuestion`, `expectsOutput`, `doesntExpectOutput`, and `assertExitCode` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:44 docs/master/console-tests.md:44
#, no-wrap
msgid "    /**\n"
"     * Test a console command.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_console_command()\n"
"    {\n"
"        $this->artisan('question')\n"
"             ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"             ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"             ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"             ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"             ->assertExitCode(0);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:46 docs/master/console-tests.md:46
#, no-wrap
msgid "<a name=\"confirmation-expectations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/console-tests.md:46 docs/master/console-tests.md:46
#, no-wrap
msgid "Confirmation Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:49 docs/master/console-tests.md:49
msgid "When writing a command which expects confirmation in the form of a \"yes\" or \"no\" answer, you may utilize the `expectsConfirmation` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:53 docs/master/console-tests.md:53
#, no-wrap
msgid "    $this->artisan('module:import')\n"
"        ->expectsConfirmation('Do you really wish to run this command?', 'no')\n"
"        ->assertExitCode(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:55 docs/master/console-tests.md:55
#, no-wrap
msgid "<a name=\"table-expectations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/console-tests.md:55 docs/master/console-tests.md:55
#, no-wrap
msgid "Table Expectations"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:58 docs/master/console-tests.md:58
msgid "If your command displays a table of information using Artisan's `table` method, it can be cumbersome to write output expectations for the entire table. Instead, you may use the `expectsTable` method. This method accepts the table's headers as its first argument and the table's data as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/console-tests.md:66 docs/master/console-tests.md:66
#, no-wrap
msgid "    $this->artisan('users:all')\n"
"        ->expectsTable([\n"
"            'ID',\n"
"            'Email',\n"
"        ], [\n"
"            [1, 'taylor@example.com'],\n"
"            [2, 'abigail@example.com'],\n"
"        ]);\n"
msgstr ""

#. type: Title #
#: docs/8.x/container.md:1 docs/master/container.md:1
#, no-wrap
msgid "Service Container"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Zero Configuration Resolution](#zero-configuration-resolution)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[When To Use The Container](#when-to-use-the-container)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Binding](#binding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Binding Basics](#binding-basics)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Binding Interfaces To Implementations](#binding-interfaces-to-implementations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Contextual Binding](#contextual-binding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Binding Primitives](#binding-primitives)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Binding Typed Variadics](#binding-typed-variadics)"
msgstr ""

#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/container.md:19 docs/8.x/telescope.md:33
#: docs/master/container.md:19 docs/master/telescope.md:33
msgid "[Tagging](#tagging)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Extending Bindings](#extending-bindings)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Resolving](#resolving)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[The Make Method](#the-make-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Automatic Injection](#automatic-injection)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[Container Events](#container-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/container.md:19 docs/master/container.md:19
msgid "[PSR-11](#psr-11)"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:24 docs/master/container.md:24
msgid "The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are \"injected\" into the class via the constructor or, in some cases, \"setter\" methods."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:26 docs/master/container.md:26
msgid "Let's look at a simple example:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:34 docs/master/container.md:34
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Repositories\\UserRepository;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:43 docs/master/container.md:43
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:54 docs/master/container.md:54
#, no-wrap
msgid "        /**\n"
"         * Create a new controller instance.\n"
"         *\n"
"         * @param  UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:64 docs/master/container.md:64
#, no-wrap
msgid "        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            $user = $this->users->find($id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:68 docs/master/container.md:68
#, no-wrap
msgid "            return view('user.profile', ['user' => $user]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:70 docs/master/container.md:70
msgid "In this example, the `UserController` needs to retrieve users from a data source. So, we will **inject** a service that is able to retrieve users. In this context, our `UserRepository` most likely uses [Eloquent](/docs/{{version}}/eloquent) to retrieve user information from the database. However, since the repository is injected, we are able to easily swap it out with another implementation. We are also able to easily \"mock\", or create a dummy implementation of the `UserRepository` when testing our application."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:72 docs/master/container.md:72
msgid "A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:74 docs/master/container.md:74
#, no-wrap
msgid "<a name=\"zero-configuration-resolution\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:74 docs/master/container.md:74
#, no-wrap
msgid "Zero Configuration Resolution"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:77 docs/master/container.md:77
msgid "If a class has no dependencies or only depends on other concrete classes (not interfaces), the container does not need to be instructed on how to resolve that class. For example, you may place the following code in your `routes/web.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:84 docs/master/container.md:84
#, no-wrap
msgid "    class Service\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:88 docs/master/container.md:88
#, no-wrap
msgid "    Route::get('/', function (Service $service) {\n"
"        die(get_class($service));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:90 docs/master/container.md:90
msgid "In this example, hitting your application's `/` route will automatically resolve the `Service` class and inject it into your route's handler. This is game changing. It means you can develop your application and take advantage of dependency injection without worrying about bloated configuration files."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:92 docs/master/container.md:92
msgid "Thankfully, many of the classes you will be writing when building a Laravel application automatically receive their dependencies via the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). Once you taste the power of automatic and zero configuration dependency injection it feels impossible to develop without it."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:94 docs/master/container.md:94
#, no-wrap
msgid "<a name=\"when-to-use-the-container\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:94 docs/master/container.md:94
#, no-wrap
msgid "When To Use The Container"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:97 docs/master/container.md:97
msgid "Thanks to zero configuration resolution, you will often type-hint dependencies on routes, controllers, event listeners, and elsewhere without ever manually interacting with the container. For example, you might type-hint the `Illuminate\\Http\\Request` object on your route definition so that you can easily access the current request. Even though we never have to interact with the container to write this code, it is managing the injection of these dependencies behind the scenes:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:103 docs/master/container.md:103
#, no-wrap
msgid "    Route::get('/', function (Request $request) {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:105 docs/master/container.md:105
msgid "In many cases, thanks to automatic dependency injection and [facades](/docs/{{version}}/facades), you can build Laravel applications without **ever** manually binding or resolving anything from the container. **So, when would you ever manually interact with the container?** Let's examine two situations."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:107 docs/master/container.md:107
msgid "First, if you write a class that implements an interface and you wish to type-hint that interface on a route or class constructor, you must [tell the container how to resolve that interface](#binding-interfaces-to-implementations). Secondly, if you are [writing a Laravel package](/docs/{{version}}/packages) that you plan to share with other Laravel developers, you may need to bind your package's services into the container."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:109 docs/master/container.md:109
#, no-wrap
msgid "<a name=\"binding\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/container.md:109 docs/master/container.md:109
#, no-wrap
msgid "Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:112 docs/master/container.md:112
#, no-wrap
msgid "<a name=\"binding-basics\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:112 docs/master/container.md:112
#, no-wrap
msgid "Binding Basics"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:115 docs/master/container.md:115
#, no-wrap
msgid "<a name=\"simple-bindings\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/container.md:115 docs/master/container.md:115
#, no-wrap
msgid "Simple Bindings"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:118 docs/master/container.md:118
msgid "Almost all of your service container bindings will be registered within [service providers](/docs/{{version}}/providers), so most of these examples will demonstrate using the container in that context."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:120 docs/master/container.md:120
#, no-wrap
msgid "Within a service provider, you always have access to the container via the `$this->app` property. We can register a binding using the `bind` method, passing the class or interface name that we wish to register along with a closure that returns an instance of the class:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:123 docs/8.x/container.md:148
#: docs/8.x/container.md:160 docs/master/container.md:123
#: docs/master/container.md:148 docs/master/container.md:160
#, no-wrap
msgid "    use App\\Services\\Transistor;\n"
"    use App\\Services\\PodcastParser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:127 docs/master/container.md:127
#, no-wrap
msgid "    $this->app->bind(Transistor::class, function ($app) {\n"
"        return new Transistor($app->make(PodcastParser::class));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:129 docs/master/container.md:129
msgid "Note that we receive the container itself as an argument to the resolver. We can then use the container to resolve sub-dependencies of the object we are building."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:131 docs/master/container.md:131
msgid "As mentioned, you will typically be interacting with the container within service providers; however, if you would like to interact with the container outside of a service provider, you may do so via the `App` [facade](/docs/{{version}}/facades):"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:134 docs/8.x/container.md:357
#: docs/master/container.md:134 docs/master/container.md:351
#, no-wrap
msgid "    use App\\Services\\Transistor;\n"
"    use Illuminate\\Support\\Facades\\App;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:138 docs/master/container.md:138
#, no-wrap
msgid "    App::bind(Transistor::class, function ($app) {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:140 docs/master/container.md:140
#, no-wrap
msgid "> {tip} There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:142 docs/master/container.md:142
#, no-wrap
msgid "<a name=\"binding-a-singleton\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/container.md:142 docs/master/container.md:142
#, no-wrap
msgid "Binding A Singleton"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:145 docs/master/container.md:145
msgid "The `singleton` method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:152 docs/master/container.md:152
#, no-wrap
msgid "    $this->app->singleton(Transistor::class, function ($app) {\n"
"        return new Transistor($app->make(PodcastParser::class));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:154 docs/master/container.md:154
#, no-wrap
msgid "<a name=\"binding-instances\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/container.md:154 docs/master/container.md:154
#, no-wrap
msgid "Binding Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:157 docs/master/container.md:157
msgid "You may also bind an existing object instance into the container using the `instance` method. The given instance will always be returned on subsequent calls into the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:162 docs/master/container.md:162
#, no-wrap
msgid "    $service = new Transistor(new PodcastParser);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:164 docs/master/container.md:164
#, no-wrap
msgid "    $this->app->instance(Transistor::class, $service);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:166 docs/master/container.md:166
#, no-wrap
msgid "<a name=\"binding-interfaces-to-implementations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:166 docs/master/container.md:166
#, no-wrap
msgid "Binding Interfaces To Implementations"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:169 docs/master/container.md:169
msgid "A very powerful feature of the service container is its ability to bind an interface to a given implementation. For example, let's assume we have an `EventPusher` interface and a `RedisEventPusher` implementation. Once we have coded our `RedisEventPusher` implementation of this interface, we can register it with the service container like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:172 docs/master/container.md:172
#, no-wrap
msgid "    use App\\Contracts\\EventPusher;\n"
"    use App\\Services\\RedisEventPusher;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:174 docs/master/container.md:174
#, no-wrap
msgid "    $this->app->bind(EventPusher::class, RedisEventPusher::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:176 docs/master/container.md:176
msgid "This statement tells the container that it should inject the `RedisEventPusher` when a class needs an implementation of `EventPusher`. Now we can type-hint the `EventPusher` interface in the constructor of a class that is resolved by the container. Remember, controllers, event listeners, middleware, and various other types of classes within Laravel applications are always resolved using the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:178 docs/master/container.md:178
#, no-wrap
msgid "    use App\\Contracts\\EventPusher;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:189 docs/master/container.md:189
#, no-wrap
msgid "    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\App\\Contracts\\EventPusher  $pusher\n"
"     * @return void\n"
"     */\n"
"    public function __construct(EventPusher $pusher)\n"
"    {\n"
"        $this->pusher = $pusher;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:191 docs/master/container.md:191
#, no-wrap
msgid "<a name=\"contextual-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:191 docs/master/container.md:191
#, no-wrap
msgid "Contextual Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:194 docs/master/container.md:194
msgid "Sometimes you may have two classes that utilize the same interface, but you wish to inject different implementations into each class. For example, two controllers may depend on different implementations of the `Illuminate\\Contracts\\Filesystem\\Filesystem` [contract](/docs/{{version}}/contracts). Laravel provides a simple, fluent interface for defining this behavior:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:200 docs/master/container.md:200
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoController;\n"
"    use App\\Http\\Controllers\\UploadController;\n"
"    use App\\Http\\Controllers\\VideoController;\n"
"    use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:206 docs/master/container.md:206
#, no-wrap
msgid "    $this->app->when(PhotoController::class)\n"
"              ->needs(Filesystem::class)\n"
"              ->give(function () {\n"
"                  return Storage::disk('local');\n"
"              });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:212 docs/master/container.md:212
#, no-wrap
msgid "    $this->app->when([VideoController::class, UploadController::class])\n"
"              ->needs(Filesystem::class)\n"
"              ->give(function () {\n"
"                  return Storage::disk('s3');\n"
"              });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:214 docs/master/container.md:214
#, no-wrap
msgid "<a name=\"binding-primitives\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:214 docs/master/container.md:214
#, no-wrap
msgid "Binding Primitives"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:217 docs/master/container.md:217
msgid "Sometimes you may have a class that receives some injected classes, but also needs an injected primitive value such as an integer. You may easily use contextual binding to inject any value your class may need:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:221 docs/master/container.md:221
#, no-wrap
msgid "    $this->app->when('App\\Http\\Controllers\\UserController')\n"
"              ->needs('$variableName')\n"
"              ->give($value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:223 docs/master/container.md:223
msgid "Sometimes a class may depend on an array of [tagged](#tagging) instances. Using the `giveTagged` method, you may easily inject all of the container bindings with that tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:227 docs/master/container.md:227
#, no-wrap
msgid "    $this->app->when(ReportAggregator::class)\n"
"        ->needs('$reports')\n"
"        ->giveTagged('reports');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:229
msgid "If you need to inject a value from one of your application's configuration files, you may use the `giveConfig` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:233
#, no-wrap
msgid "    $this->app->when(ReportAggregator::class)\n"
"        ->needs('$timezone')\n"
"        ->giveConfig('app.timezone');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:235 docs/master/container.md:229
#, no-wrap
msgid "<a name=\"binding-typed-variadics\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:235 docs/master/container.md:229
#, no-wrap
msgid "Binding Typed Variadics"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:238
msgid "Occasionally, you may have a class that receives an array of typed objects using a variadic constructor argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:243 docs/master/container.md:237
#, no-wrap
msgid "    use App\\Models\\Filter;\n"
"    use App\\Services\\Logger;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:252 docs/master/container.md:246
#, no-wrap
msgid "    class Firewall\n"
"    {\n"
"        /**\n"
"         * The logger instance.\n"
"         *\n"
"         * @var \\App\\Services\\Logger\n"
"         */\n"
"        protected $logger;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:259 docs/master/container.md:253
#, no-wrap
msgid "        /**\n"
"         * The filter instances.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $filters;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:273 docs/master/container.md:267
#, no-wrap
msgid "        /**\n"
"         * Create a new class instance.\n"
"         *\n"
"         * @param  \\App\\Services\\Logger  $logger\n"
"         * @param  array  $filters\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Logger $logger, Filter ...$filters)\n"
"        {\n"
"            $this->logger = $logger;\n"
"            $this->filters = $filters;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:275 docs/master/container.md:269
msgid "Using contextual binding, you may resolve this dependency by providing the `give` method with a closure that returns an array of resolved `Filter` instances:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:285 docs/master/container.md:279
#, no-wrap
msgid "    $this->app->when(Firewall::class)\n"
"              ->needs(Filter::class)\n"
"              ->give(function ($app) {\n"
"                    return [\n"
"                        $app->make(NullFilter::class),\n"
"                        $app->make(ProfanityFilter::class),\n"
"                        $app->make(TooLongFilter::class),\n"
"                    ];\n"
"              });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:287 docs/master/container.md:281
msgid "For convenience, you may also just provide an array of class names to be resolved by the container whenever `Firewall` needs `Filter` instances:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:295 docs/master/container.md:289
#, no-wrap
msgid "    $this->app->when(Firewall::class)\n"
"              ->needs(Filter::class)\n"
"              ->give([\n"
"                  NullFilter::class,\n"
"                  ProfanityFilter::class,\n"
"                  TooLongFilter::class,\n"
"              ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:297 docs/master/container.md:291
#, no-wrap
msgid "<a name=\"variadic-tag-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/container.md:297 docs/master/container.md:291
#, no-wrap
msgid "Variadic Tag Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:300 docs/master/container.md:294
msgid "Sometimes a class may have a variadic dependency that is type-hinted as a given class (`Report ...$reports`). Using the `needs` and `giveTagged` methods, you may easily inject all of the container bindings with that [tag](#tagging) for the given dependency:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:304 docs/master/container.md:298
#, no-wrap
msgid "    $this->app->when(ReportAggregator::class)\n"
"        ->needs(Report::class)\n"
"        ->giveTagged('reports');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:306 docs/8.x/telescope.md:221
#: docs/master/container.md:300 docs/master/telescope.md:221
#, no-wrap
msgid "<a name=\"tagging\"></a>\n"
msgstr ""

#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  container.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/container.md:306 docs/8.x/telescope.md:221
#: docs/master/container.md:300 docs/master/telescope.md:221
#, no-wrap
msgid "Tagging"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:309 docs/master/container.md:303
msgid "Occasionally, you may need to resolve all of a certain \"category\" of binding. For example, perhaps you are building a report analyzer that receives an array of many different `Report` interface implementations. After registering the `Report` implementations, you can assign them a tag using the `tag` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:313 docs/master/container.md:307
#, no-wrap
msgid "    $this->app->bind(CpuReport::class, function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:317 docs/master/container.md:311
#, no-wrap
msgid "    $this->app->bind(MemoryReport::class, function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:319 docs/master/container.md:313
#, no-wrap
msgid "    $this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:321 docs/master/container.md:315
msgid "Once the services have been tagged, you may easily resolve them all via the container's `tagged` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:325 docs/master/container.md:319
#, no-wrap
msgid "    $this->app->bind(ReportAnalyzer::class, function ($app) {\n"
"        return new ReportAnalyzer($app->tagged('reports'));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:327 docs/master/container.md:321
#, no-wrap
msgid "<a name=\"extending-bindings\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:327 docs/master/container.md:321
#, no-wrap
msgid "Extending Bindings"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:330 docs/master/container.md:324
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts a closure, which should return the modified service, as its only argument. The closure receives the service being resolved and the container instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:334 docs/master/container.md:328
#, no-wrap
msgid "    $this->app->extend(Service::class, function ($service, $app) {\n"
"        return new DecoratedService($service);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:336 docs/master/container.md:330
#, no-wrap
msgid "<a name=\"resolving\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/container.md:336 docs/master/container.md:330
#, no-wrap
msgid "Resolving"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:339 docs/master/container.md:333
#, no-wrap
msgid "<a name=\"the-make-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:339 docs/master/container.md:333
#, no-wrap
msgid "The `make` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:342 docs/master/container.md:336
msgid "You may use the `make` method to resolve a class instance from the container. The `make` method accepts the name of the class or interface you wish to resolve:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:344 docs/8.x/container.md:350
#: docs/8.x/container.md:426 docs/master/container.md:338
#: docs/master/container.md:344 docs/master/container.md:420
#, no-wrap
msgid "    use App\\Services\\Transistor;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:346 docs/master/container.md:340
#, no-wrap
msgid "    $transistor = $this->app->make(Transistor::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:348 docs/master/container.md:342
msgid "If some of your class' dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the `makeWith` method. For example, we may manually pass the `$id` constructor argument required by the `Transistor` service:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:352 docs/master/container.md:346
#, no-wrap
msgid "    $transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:354 docs/master/container.md:348
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) to resolve a class instance from the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:359 docs/master/container.md:353
#, no-wrap
msgid "    $transistor = App::make(Transistor::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:361 docs/master/container.md:355
msgid "If you would like to have the Laravel container instance itself injected into a class that is being resolved by the container, you may type-hint the `Illuminate\\Container\\Container` class on your class' constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:363 docs/master/container.md:357
#, no-wrap
msgid "    use Illuminate\\Container\\Container;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:374
#, no-wrap
msgid "    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\Illuminate\\Container\\Container  $container\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Container $container)\n"
"    {\n"
"        $this->container = $container;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:376 docs/master/container.md:370
#, no-wrap
msgid "<a name=\"automatic-injection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/container.md:376 docs/master/container.md:370
#, no-wrap
msgid "Automatic Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:379 docs/master/container.md:373
msgid "Alternatively, and importantly, you may type-hint the dependency in the constructor of a class that is resolved by the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). In practice, this is how most of your objects should be resolved by the container."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:381 docs/master/container.md:375
msgid "For example, you may type-hint a repository defined by your application in a controller's constructor. The repository will automatically be resolved and injected into the class:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:387 docs/8.x/controllers.md:360
#: docs/master/container.md:381 docs/master/controllers.md:347
#, no-wrap
msgid "    use App\\Repositories\\UserRepository;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:396 docs/master/container.md:390
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * The user repository instance.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:407 docs/master/container.md:401
#, no-wrap
msgid "        /**\n"
"         * Create a new controller instance.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:419 docs/master/container.md:413
#, no-wrap
msgid "        /**\n"
"         * Show the user with the given ID.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:421 docs/master/container.md:415
#, no-wrap
msgid "<a name=\"container-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/container.md:421 docs/master/container.md:415
#, no-wrap
msgid "Container Events"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:424 docs/master/container.md:418
msgid "The service container fires an event each time it resolves an object. You may listen to this event using the `resolving` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:430 docs/master/container.md:424
#, no-wrap
msgid "    $this->app->resolving(Transistor::class, function ($transistor, $app) {\n"
"        // Called when container resolves objects of type \"Transistor\"...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:434 docs/master/container.md:428
#, no-wrap
msgid "    $this->app->resolving(function ($object, $app) {\n"
"        // Called when container resolves object of any type...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:436 docs/master/container.md:430
msgid "As you can see, the object being resolved will be passed to the callback, allowing you to set any additional properties on the object before it is given to its consumer."
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:438 docs/master/container.md:432
#, no-wrap
msgid "<a name=\"psr-11\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/container.md:438 docs/master/container.md:432
#, no-wrap
msgid "PSR-11"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:441 docs/master/container.md:435
msgid "Laravel's service container implements the [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md) interface. Therefore, you may type-hint the PSR-11 container interface to obtain an instance of the Laravel container:"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:444 docs/master/container.md:438
#, no-wrap
msgid "    use App\\Services\\Transistor;\n"
"    use Psr\\Container\\ContainerInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:447 docs/master/container.md:441
#, no-wrap
msgid "    Route::get('/', function (ContainerInterface $container) {\n"
"        $service = $container->get(Transistor::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/container.md:451 docs/master/container.md:445
msgid "An exception is thrown if the given identifier can't be resolved. The exception will be an instance of `Psr\\Container\\NotFoundExceptionInterface` if the identifier was never bound. If the identifier was bound but was unable to be resolved, an instance of `Psr\\Container\\ContainerExceptionInterface` will be thrown."
msgstr ""

#. type: Title #
#: docs/8.x/contracts.md:1 docs/master/contracts.md:1
#, no-wrap
msgid "Contracts"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/contracts.md:8 docs/master/contracts.md:8
msgid "[Contracts Vs. Facades](#contracts-vs-facades)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contracts.md:8 docs/master/contracts.md:8
msgid "[When To Use Contracts](#when-to-use-contracts)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contracts.md:8 docs/master/contracts.md:8
msgid "[How To Use Contracts](#how-to-use-contracts)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contracts.md:8 docs/master/contracts.md:8
msgid "[Contract Reference](#contract-reference)"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:13 docs/master/contracts.md:13
msgid "Laravel's \"contracts\" are a set of interfaces that define the core services provided by the framework. For example, an `Illuminate\\Contracts\\Queue\\Queue` contract defines the methods needed for queueing jobs, while the `Illuminate\\Contracts\\Mail\\Mailer` contract defines the methods needed for sending e-mail."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:15 docs/master/contracts.md:15
msgid "Each contract has a corresponding implementation provided by the framework. For example, Laravel provides a queue implementation with a variety of drivers, and a mailer implementation that is powered by [SwiftMailer](https://swiftmailer.symfony.com/)."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:17 docs/master/contracts.md:17
msgid "All of the Laravel contracts live in [their own GitHub repository](https://github.com/illuminate/contracts). This provides a quick reference point for all available contracts, as well as a single, decoupled package that may be utilized when building packages that interact with Laravel services."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:19 docs/master/contracts.md:19
#, no-wrap
msgid "<a name=\"contracts-vs-facades\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/contracts.md:19 docs/master/contracts.md:19
#, no-wrap
msgid "Contracts Vs. Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:22 docs/master/contracts.md:22
msgid "Laravel's [facades](/docs/{{version}}/facades) and helper functions provide a simple way of utilizing Laravel's services without needing to type-hint and resolve contracts out of the service container. In most cases, each facade has an equivalent contract."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:24 docs/master/contracts.md:24
msgid "Unlike facades, which do not require you to require them in your class' constructor, contracts allow you to define explicit dependencies for your classes. Some developers prefer to explicitly define their dependencies in this way and therefore prefer to use contracts, while other developers enjoy the convenience of facades. **In general, most applications can use facades without issue during development.**"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:26 docs/master/contracts.md:26
#, no-wrap
msgid "<a name=\"when-to-use-contracts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contracts.md:26 docs/master/contracts.md:26
#, no-wrap
msgid "When To Use Contracts"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:29 docs/master/contracts.md:29
msgid "The decision to use contracts or facades will come down to personal taste and the tastes of your development team. Both contracts and facades can be used to create robust, well-tested Laravel applications. Contracts and facades are not mutually exclusive. Some parts of your applications may use facades while others depend on contracts. As long as you are keeping your class' responsibilities focused, you will notice very few practical differences between using contracts and facades."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:31 docs/master/contracts.md:31
msgid "In general, most applications can use facades without issue during development. If you are building a package that integrates with multiple PHP frameworks you may wish to use the `illuminate/contracts` package to define your integration with Laravel's services without the need to require Laravel's concrete implementations in your package's `composer.json` file."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:33 docs/master/contracts.md:33
#, no-wrap
msgid "<a name=\"how-to-use-contracts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contracts.md:33 docs/master/contracts.md:33
#, no-wrap
msgid "How To Use Contracts"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:36 docs/master/contracts.md:36
msgid "So, how do you get an implementation of a contract? It's actually quite simple."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:38 docs/master/contracts.md:38
msgid "Many types of classes in Laravel are resolved through the [service container](/docs/{{version}}/container), including controllers, event listeners, middleware, queued jobs, and even route closures. So, to get an implementation of a contract, you can just \"type-hint\" the interface in the constructor of the class being resolved."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:40 docs/master/contracts.md:40
msgid "For example, take a look at this event listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:44 docs/8.x/events.md:236 docs/8.x/events.md:280
#: docs/8.x/events.md:299 docs/8.x/events.md:347 docs/8.x/events.md:384
#: docs/8.x/events.md:417 docs/8.x/events.md:438 docs/8.x/events.md:481
#: docs/8.x/events.md:555 docs/master/contracts.md:44 docs/master/events.md:236
#: docs/master/events.md:280 docs/master/events.md:299
#: docs/master/events.md:347 docs/master/events.md:384
#: docs/master/events.md:417 docs/master/events.md:438
#: docs/master/events.md:481 docs/master/events.md:555
#, no-wrap
msgid "    namespace App\\Listeners;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:48 docs/master/contracts.md:48
#, no-wrap
msgid "    use App\\Events\\OrderWasPlaced;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Contracts\\Redis\\Factory;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:57 docs/master/contracts.md:57
#, no-wrap
msgid "    class CacheOrderInformation\n"
"    {\n"
"        /**\n"
"         * The Redis factory implementation.\n"
"         *\n"
"         * @var \\Illuminate\\Contracts\\Redis\\Factory\n"
"         */\n"
"        protected $redis;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:68 docs/master/contracts.md:68
#, no-wrap
msgid "        /**\n"
"         * Create a new event handler instance.\n"
"         *\n"
"         * @param  \\Illuminate\\Contracts\\Redis\\Factory  $redis\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Factory $redis)\n"
"        {\n"
"            $this->redis = $redis;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:80 docs/master/contracts.md:80
#, no-wrap
msgid "        /**\n"
"         * Handle the event.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderWasPlaced  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(OrderWasPlaced $event)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:82 docs/master/contracts.md:82
msgid "When the event listener is resolved, the service container will read the type-hints on the constructor of the class, and inject the appropriate value. To learn more about registering things in the service container, check out [its documentation](/docs/{{version}}/container)."
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:84 docs/master/contracts.md:84
#, no-wrap
msgid "<a name=\"contract-reference\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contracts.md:84 docs/master/contracts.md:84
#, no-wrap
msgid "Contract Reference"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:87 docs/master/contracts.md:87
msgid "This table provides a quick reference to all of the Laravel contracts and their equivalent facades:"
msgstr ""

#. type: Plain text
#: docs/8.x/contracts.md:168 docs/master/contracts.md:168
msgid "Contract | References Facade ------------- | ------------- [Illuminate\\Contracts\\Auth\\Access\\Authorizable](https://github.com/illuminate/contracts/blob/{{version}}/Auth/Access/Authorizable.php) |Â &nbsp; [Illuminate\\Contracts\\Auth\\Access\\Gate](https://github.com/illuminate/contracts/blob/{{version}}/Auth/Access/Gate.php) | `Gate` [Illuminate\\Contracts\\Auth\\Authenticatable](https://github.com/illuminate/contracts/blob/{{version}}/Auth/Authenticatable.php) |Â &nbsp; [Illuminate\\Contracts\\Auth\\CanResetPassword](https://github.com/illuminate/contracts/blob/{{version}}/Auth/CanResetPassword.php) | &nbsp; [Illuminate\\Contracts\\Auth\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Auth/Factory.php) | `Auth` [Illuminate\\Contracts\\Auth\\Guard](https://github.com/illuminate/contracts/blob/{{version}}/Auth/Guard.php) | `Auth::guard()` [Illuminate\\Contracts\\Auth\\PasswordBroker](https://github.com/illuminate/contracts/blob/{{version}}/Auth/PasswordBroker.php) | `Password::broker()` [Illuminate\\Contracts\\Auth\\PasswordBrokerFactory](https://github.com/illuminate/contracts/blob/{{version}}/Auth/PasswordBrokerFactory.php) | `Password` [Illuminate\\Contracts\\Auth\\StatefulGuard](https://github.com/illuminate/contracts/blob/{{version}}/Auth/StatefulGuard.php) | &nbsp; [Illuminate\\Contracts\\Auth\\SupportsBasicAuth](https://github.com/illuminate/contracts/blob/{{version}}/Auth/SupportsBasicAuth.php) | &nbsp; [Illuminate\\Contracts\\Auth\\UserProvider](https://github.com/illuminate/contracts/blob/{{version}}/Auth/UserProvider.php) | &nbsp; [Illuminate\\Contracts\\Bus\\Dispatcher](https://github.com/illuminate/contracts/blob/{{version}}/Bus/Dispatcher.php) | `Bus` [Illuminate\\Contracts\\Bus\\QueueingDispatcher](https://github.com/illuminate/contracts/blob/{{version}}/Bus/QueueingDispatcher.php) | `Bus::dispatchToQueue()` [Illuminate\\Contracts\\Broadcasting\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/Factory.php) | `Broadcast` [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/Broadcaster.php)  | `Broadcast::connection()` [Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast](https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/ShouldBroadcast.php) | &nbsp; [Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow](https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/ShouldBroadcastNow.php) | &nbsp; [Illuminate\\Contracts\\Cache\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Cache/Factory.php) | `Cache` [Illuminate\\Contracts\\Cache\\Lock](https://github.com/illuminate/contracts/blob/{{version}}/Cache/Lock.php) | &nbsp; [Illuminate\\Contracts\\Cache\\LockProvider](https://github.com/illuminate/contracts/blob/{{version}}/Cache/LockProvider.php) | &nbsp; [Illuminate\\Contracts\\Cache\\Repository](https://github.com/illuminate/contracts/blob/{{version}}/Cache/Repository.php) | `Cache::driver()` [Illuminate\\Contracts\\Cache\\Store](https://github.com/illuminate/contracts/blob/{{version}}/Cache/Store.php) | &nbsp; [Illuminate\\Contracts\\Config\\Repository](https://github.com/illuminate/contracts/blob/{{version}}/Config/Repository.php) | `Config` [Illuminate\\Contracts\\Console\\Application](https://github.com/illuminate/contracts/blob/{{version}}/Console/Application.php) | &nbsp; [Illuminate\\Contracts\\Console\\Kernel](https://github.com/illuminate/contracts/blob/{{version}}/Console/Kernel.php) | `Artisan` [Illuminate\\Contracts\\Container\\Container](https://github.com/illuminate/contracts/blob/{{version}}/Container/Container.php) | `App` [Illuminate\\Contracts\\Cookie\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Cookie/Factory.php) | `Cookie` [Illuminate\\Contracts\\Cookie\\QueueingFactory](https://github.com/illuminate/contracts/blob/{{version}}/Cookie/QueueingFactory.php) | `Cookie::queue()` [Illuminate\\Contracts\\Database\\ModelIdentifier](https://github.com/illuminate/contracts/blob/{{version}}/Database/ModelIdentifier.php) | &nbsp; [Illuminate\\Contracts\\Debug\\ExceptionHandler](https://github.com/illuminate/contracts/blob/{{version}}/Debug/ExceptionHandler.php) | &nbsp; [Illuminate\\Contracts\\Encryption\\Encrypter](https://github.com/illuminate/contracts/blob/{{version}}/Encryption/Encrypter.php) | `Crypt` [Illuminate\\Contracts\\Events\\Dispatcher](https://github.com/illuminate/contracts/blob/{{version}}/Events/Dispatcher.php) | `Event` [Illuminate\\Contracts\\Filesystem\\Cloud](https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Cloud.php) | `Storage::cloud()` [Illuminate\\Contracts\\Filesystem\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Factory.php) | `Storage` [Illuminate\\Contracts\\Filesystem\\Filesystem](https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Filesystem.php) | `Storage::disk()` [Illuminate\\Contracts\\Foundation\\Application](https://github.com/illuminate/contracts/blob/{{version}}/Foundation/Application.php) | `App` [Illuminate\\Contracts\\Hashing\\Hasher](https://github.com/illuminate/contracts/blob/{{version}}/Hashing/Hasher.php) | `Hash` [Illuminate\\Contracts\\Http\\Kernel](https://github.com/illuminate/contracts/blob/{{version}}/Http/Kernel.php) | &nbsp; [Illuminate\\Contracts\\Mail\\MailQueue](https://github.com/illuminate/contracts/blob/{{version}}/Mail/MailQueue.php) | `Mail::queue()` [Illuminate\\Contracts\\Mail\\Mailable](https://github.com/illuminate/contracts/blob/{{version}}/Mail/Mailable.php) | &nbsp; [Illuminate\\Contracts\\Mail\\Mailer](https://github.com/illuminate/contracts/blob/{{version}}/Mail/Mailer.php) | `Mail` [Illuminate\\Contracts\\Notifications\\Dispatcher](https://github.com/illuminate/contracts/blob/{{version}}/Notifications/Dispatcher.php) | `Notification` [Illuminate\\Contracts\\Notifications\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Notifications/Factory.php) | `Notification` [Illuminate\\Contracts\\Pagination\\LengthAwarePaginator](https://github.com/illuminate/contracts/blob/{{version}}/Pagination/LengthAwarePaginator.php) | &nbsp; [Illuminate\\Contracts\\Pagination\\Paginator](https://github.com/illuminate/contracts/blob/{{version}}/Pagination/Paginator.php) | &nbsp; [Illuminate\\Contracts\\Pipeline\\Hub](https://github.com/illuminate/contracts/blob/{{version}}/Pipeline/Hub.php) | &nbsp; [Illuminate\\Contracts\\Pipeline\\Pipeline](https://github.com/illuminate/contracts/blob/{{version}}/Pipeline/Pipeline.php) | &nbsp; [Illuminate\\Contracts\\Queue\\EntityResolver](https://github.com/illuminate/contracts/blob/{{version}}/Queue/EntityResolver.php) | &nbsp; [Illuminate\\Contracts\\Queue\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Queue/Factory.php) | `Queue` [Illuminate\\Contracts\\Queue\\Job](https://github.com/illuminate/contracts/blob/{{version}}/Queue/Job.php) | &nbsp; [Illuminate\\Contracts\\Queue\\Monitor](https://github.com/illuminate/contracts/blob/{{version}}/Queue/Monitor.php) | `Queue` [Illuminate\\Contracts\\Queue\\Queue](https://github.com/illuminate/contracts/blob/{{version}}/Queue/Queue.php) | `Queue::connection()` [Illuminate\\Contracts\\Queue\\QueueableCollection](https://github.com/illuminate/contracts/blob/{{version}}/Queue/QueueableCollection.php) | &nbsp; [Illuminate\\Contracts\\Queue\\QueueableEntity](https://github.com/illuminate/contracts/blob/{{version}}/Queue/QueueableEntity.php) | &nbsp; [Illuminate\\Contracts\\Queue\\ShouldQueue](https://github.com/illuminate/contracts/blob/{{version}}/Queue/ShouldQueue.php) | &nbsp; [Illuminate\\Contracts\\Redis\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Redis/Factory.php) | `Redis` [Illuminate\\Contracts\\Routing\\BindingRegistrar](https://github.com/illuminate/contracts/blob/{{version}}/Routing/BindingRegistrar.php) | `Route` [Illuminate\\Contracts\\Routing\\Registrar](https://github.com/illuminate/contracts/blob/{{version}}/Routing/Registrar.php) | `Route` [Illuminate\\Contracts\\Routing\\ResponseFactory](https://github.com/illuminate/contracts/blob/{{version}}/Routing/ResponseFactory.php) | `Response` [Illuminate\\Contracts\\Routing\\UrlGenerator](https://github.com/illuminate/contracts/blob/{{version}}/Routing/UrlGenerator.php) | `URL` [Illuminate\\Contracts\\Routing\\UrlRoutable](https://github.com/illuminate/contracts/blob/{{version}}/Routing/UrlRoutable.php) | &nbsp; [Illuminate\\Contracts\\Session\\Session](https://github.com/illuminate/contracts/blob/{{version}}/Session/Session.php) | `Session::driver()` [Illuminate\\Contracts\\Support\\Arrayable](https://github.com/illuminate/contracts/blob/{{version}}/Support/Arrayable.php) | &nbsp; [Illuminate\\Contracts\\Support\\Htmlable](https://github.com/illuminate/contracts/blob/{{version}}/Support/Htmlable.php) | &nbsp; [Illuminate\\Contracts\\Support\\Jsonable](https://github.com/illuminate/contracts/blob/{{version}}/Support/Jsonable.php) | &nbsp; [Illuminate\\Contracts\\Support\\MessageBag](https://github.com/illuminate/contracts/blob/{{version}}/Support/MessageBag.php) | &nbsp; [Illuminate\\Contracts\\Support\\MessageProvider](https://github.com/illuminate/contracts/blob/{{version}}/Support/MessageProvider.php) | &nbsp; [Illuminate\\Contracts\\Support\\Renderable](https://github.com/illuminate/contracts/blob/{{version}}/Support/Renderable.php) | &nbsp; [Illuminate\\Contracts\\Support\\Responsable](https://github.com/illuminate/contracts/blob/{{version}}/Support/Responsable.php) | &nbsp; [Illuminate\\Contracts\\Translation\\Loader](https://github.com/illuminate/contracts/blob/{{version}}/Translation/Loader.php) | &nbsp; [Illuminate\\Contracts\\Translation\\Translator](https://github.com/illuminate/contracts/blob/{{version}}/Translation/Translator.php) | `Lang` [Illuminate\\Contracts\\Validation\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/Validation/Factory.php) | `Validator` [Illuminate\\Contracts\\Validation\\ImplicitRule](https://github.com/illuminate/contracts/blob/{{version}}/Validation/ImplicitRule.php) | &nbsp; [Illuminate\\Contracts\\Validation\\Rule](https://github.com/illuminate/contracts/blob/{{version}}/Validation/Rule.php) | &nbsp; [Illuminate\\Contracts\\Validation\\ValidatesWhenResolved](https://github.com/illuminate/contracts/blob/{{version}}/Validation/ValidatesWhenResolved.php) | &nbsp; [Illuminate\\Contracts\\Validation\\Validator](https://github.com/illuminate/contracts/blob/{{version}}/Validation/Validator.php) | `Validator::make()` [Illuminate\\Contracts\\View\\Engine](https://github.com/illuminate/contracts/blob/{{version}}/View/Engine.php) | &nbsp; [Illuminate\\Contracts\\View\\Factory](https://github.com/illuminate/contracts/blob/{{version}}/View/Factory.php) | `View` [Illuminate\\Contracts\\View\\View](https://github.com/illuminate/contracts/blob/{{version}}/View/View.php) | `View::make()`"
msgstr ""

#. type: Title #
#: docs/8.x/contributions.md:1 docs/master/contributions.md:1
#, no-wrap
msgid "Contribution Guide"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Bug Reports](#bug-reports)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Support Questions](#support-questions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Core Development Discussion](#core-development-discussion)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Which Branch?](#which-branch)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Compiled Assets](#compiled-assets)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Security Vulnerabilities](#security-vulnerabilities)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Coding Style](#coding-style)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[PHPDoc](#phpdoc)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[StyleCI](#styleci)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/contributions.md:13 docs/master/contributions.md:13
msgid "[Code of Conduct](#code-of-conduct)"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:15 docs/master/contributions.md:15
#, no-wrap
msgid "<a name=\"bug-reports\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:15 docs/master/contributions.md:15
#, no-wrap
msgid "Bug Reports"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:18 docs/master/contributions.md:18
msgid "To encourage active collaboration, Laravel strongly encourages pull requests, not just bug reports. \"Bug reports\" may also be sent in the form of a pull request containing a failing test."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:20 docs/master/contributions.md:20
msgid "However, if you file a bug report, your issue should contain a title and a clear description of the issue. You should also include as much relevant information as possible and a code sample that demonstrates the issue. The goal of a bug report is to make it easy for yourself - and others - to replicate the bug and develop a fix."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:22 docs/master/contributions.md:22
msgid "Remember, bug reports are created in the hope that others with the same problem will be able to collaborate with you on solving it. Do not expect that the bug report will automatically see any activity or that others will jump to fix it. Creating a bug report serves to help yourself and others start on the path of fixing the problem. If you want to chip in, you can help out by fixing [any bugs listed in our issue trackers](https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3Abug+user%3Alaravel). You must be authenticated with GitHub to view all of Laravel's issues."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:24 docs/master/contributions.md:24
msgid "The Laravel source code is managed on GitHub, and there are repositories for each of the Laravel projects:"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:47
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [Laravel Application](https://github.com/laravel/laravel)\n"
"- [Laravel Art](https://github.com/laravel/art)\n"
"- [Laravel Documentation](https://github.com/laravel/docs)\n"
"- [Laravel Dusk](https://github.com/laravel/dusk)\n"
"- [Laravel Cashier Stripe](https://github.com/laravel/cashier)\n"
"- [Laravel Cashier Paddle](https://github.com/laravel/cashier-paddle)\n"
"- [Laravel Echo](https://github.com/laravel/echo)\n"
"- [Laravel Envoy](https://github.com/laravel/envoy)\n"
"- [Laravel Framework](https://github.com/laravel/framework)\n"
"- [Laravel Homestead](https://github.com/laravel/homestead)\n"
"- [Laravel Homestead Build Scripts](https://github.com/laravel/settler)\n"
"- [Laravel Horizon](https://github.com/laravel/horizon)\n"
"- [Laravel Jetstream](https://github.com/laravel/jetstream)\n"
"- [Laravel Passport](https://github.com/laravel/passport)\n"
"- [Laravel Sail](https://github.com/laravel/sail)\n"
"- [Laravel Sanctum](https://github.com/laravel/sanctum)\n"
"- [Laravel Scout](https://github.com/laravel/scout)\n"
"- [Laravel Socialite](https://github.com/laravel/socialite)\n"
"- [Laravel Telescope](https://github.com/laravel/telescope)\n"
"- [Laravel Website](https://github.com/laravel/laravel.com-next)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:49 docs/master/contributions.md:48
#, no-wrap
msgid "<a name=\"support-questions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:49 docs/master/contributions.md:48
#, no-wrap
msgid "Support Questions"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:52 docs/master/contributions.md:51
msgid "Laravel's GitHub issue trackers are not intended to provide Laravel help or support. Instead, use one of the following channels:"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:62 docs/master/contributions.md:61
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [GitHub Discussions](https://github.com/laravel/framework/discussions)\n"
"- [Laracasts Forums](https://laracasts.com/discuss)\n"
"- [Laravel.io Forums](https://laravel.io/forum)\n"
"- [StackOverflow](https://stackoverflow.com/questions/tagged/laravel)\n"
"- [Discord](https://discordapp.com/invite/KxwQuKb)\n"
"- [Larachat](https://larachat.co)\n"
"- [IRC](https://webchat.freenode.net/?nick=artisan&channels=%23laravel&prompt=1)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:64 docs/master/contributions.md:63
#, no-wrap
msgid "<a name=\"core-development-discussion\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:64 docs/master/contributions.md:63
#, no-wrap
msgid "Core Development Discussion"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:67 docs/master/contributions.md:66
msgid "You may propose new features or improvements of existing Laravel behavior in the Laravel Ideas [issue board](https://github.com/laravel/ideas/issues). If you propose a new feature, please be willing to implement at least some of the code that would be needed to complete the feature."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:69 docs/master/contributions.md:68
msgid "Informal discussion regarding bugs, new features, and implementation of existing features takes place in the `#internals` channel of the [Laravel Discord server](https://discordapp.com/invite/mPZNm7A). Taylor Otwell, the maintainer of Laravel, is typically present in the channel on weekdays from 8am-5pm (UTC-06:00 or America/Chicago), and sporadically present in the channel at other times."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:71 docs/master/contributions.md:70
#, no-wrap
msgid "<a name=\"which-branch\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:71 docs/master/contributions.md:70
#, no-wrap
msgid "Which Branch?"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:74 docs/master/contributions.md:73
#, no-wrap
msgid "**All** bug fixes should be sent to the latest stable branch or to the [current LTS branch](/docs/{{version}}/releases#support-policy). Bug fixes should **never** be sent to the `master` branch unless they fix features that exist only in the upcoming release.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:76 docs/master/contributions.md:75
#, no-wrap
msgid "**Minor** features that are **fully backward compatible** with the current release may be sent to the latest stable branch.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:78 docs/master/contributions.md:77
#, no-wrap
msgid "**Major** new features should always be sent to the `master` branch, which contains the upcoming release.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:80 docs/master/contributions.md:79
msgid "If you are unsure if your feature qualifies as a major or minor, please ask Taylor Otwell in the `#internals` channel of the [Laravel Discord server](https://discordapp.com/invite/mPZNm7A)."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:82 docs/master/contributions.md:81
#, no-wrap
msgid "<a name=\"compiled-assets\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:82 docs/master/contributions.md:81
#, no-wrap
msgid "Compiled Assets"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:85 docs/master/contributions.md:84
msgid "If you are submitting a change that will affect a compiled file, such as most of the files in `resources/css` or `resources/js` of the `laravel/laravel` repository, do not commit the compiled files. Due to their large size, they cannot realistically be reviewed by a maintainer. This could be exploited as a way to inject malicious code into Laravel. In order to defensively prevent this, all compiled files will be generated and committed by Laravel maintainers."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:87 docs/master/contributions.md:86
#, no-wrap
msgid "<a name=\"security-vulnerabilities\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:87 docs/master/contributions.md:86
#, no-wrap
msgid "Security Vulnerabilities"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:90 docs/master/contributions.md:89
#, no-wrap
msgid "If you discover a security vulnerability within Laravel, please send an email to Taylor Otwell at <a href=\"mailto:taylor@laravel.com\">taylor@laravel.com</a>. All security vulnerabilities will be promptly addressed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:92 docs/master/contributions.md:91
#, no-wrap
msgid "<a name=\"coding-style\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:92 docs/master/contributions.md:91
#, no-wrap
msgid "Coding Style"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:95 docs/master/contributions.md:94
msgid "Laravel follows the [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) coding standard and the [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) autoloading standard."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:97 docs/master/contributions.md:96
#, no-wrap
msgid "<a name=\"phpdoc\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/contributions.md:97 docs/master/contributions.md:96
#, no-wrap
msgid "PHPDoc"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:100 docs/master/contributions.md:99
msgid "Below is an example of a valid Laravel documentation block. Note that the `@param` attribute is followed by two spaces, the argument type, two more spaces, and finally the variable name:"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:115 docs/master/contributions.md:114
#, no-wrap
msgid "    /**\n"
"     * Register a binding with the container.\n"
"     *\n"
"     * @param  string|array  $abstract\n"
"     * @param  \\Closure|string|null  $concrete\n"
"     * @param  bool  $shared\n"
"     * @return void\n"
"     *\n"
"     * @throws \\Exception\n"
"     */\n"
"    public function bind($abstract, $concrete = null, $shared = false)\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:117 docs/master/contributions.md:116
#, no-wrap
msgid "<a name=\"styleci\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/contributions.md:117 docs/master/contributions.md:116
#, no-wrap
msgid "StyleCI"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:120 docs/master/contributions.md:119
msgid "Don't worry if your code styling isn't perfect! [StyleCI](https://styleci.io/) will automatically merge any style fixes into the Laravel repository after pull requests are merged. This allows us to focus on the content of the contribution and not the code style."
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:122 docs/master/contributions.md:121
#, no-wrap
msgid "<a name=\"code-of-conduct\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/contributions.md:122 docs/master/contributions.md:121
#, no-wrap
msgid "Code of Conduct"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:125 docs/master/contributions.md:124
msgid "The Laravel code of conduct is derived from the Ruby code of conduct. Any violations of the code of conduct may be reported to Taylor Otwell (taylor@laravel.com):"
msgstr ""

#. type: Plain text
#: docs/8.x/contributions.md:131 docs/master/contributions.md:130
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- Participants will be tolerant of opposing views.\n"
"- Participants must ensure that their language and actions are free of personal attacks and disparaging personal remarks.\n"
"- When interpreting the words and actions of others, participants should always assume good intentions.\n"
"- Behavior that can be reasonably considered harassment will not be tolerated.\n"
"</div>\n"
msgstr ""

#. type: Title #
#: docs/8.x/controllers.md:1 docs/master/controllers.md:1
#, no-wrap
msgid "Controllers"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Writing Controllers](#writing-controllers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Basic Controllers](#basic-controllers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Single Action Controllers](#single-action-controllers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Controller Middleware](#controller-middleware)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Resource Controllers](#resource-controllers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Partial Resource Routes](#restful-partial-resource-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Nested Resources](#restful-nested-resources)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Naming Resource Routes](#restful-naming-resource-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Naming Resource Route Parameters](#restful-naming-resource-route-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Scoping Resource Routes](#restful-scoping-resource-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Localizing Resource URIs](#restful-localizing-resource-uris)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Supplementing Resource Controllers](#restful-supplementing-resource-controllers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/controllers.md:17 docs/master/controllers.md:17
msgid "[Dependency Injection & Controllers](#dependency-injection-and-controllers)"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:22 docs/master/controllers.md:22
msgid "Instead of defining all of your request handling logic as closures in your route files, you may wish to organize this behavior using \"controller\" classes. Controllers can group related request handling logic into a single class. For example, a `UserController` class might handle all incoming requests related to users, including showing, creating, updating, and deleting users. By default, controllers are stored in the `app/Http/Controllers` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:24 docs/master/controllers.md:24
#, no-wrap
msgid "<a name=\"writing-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:24 docs/master/controllers.md:24
#, no-wrap
msgid "Writing Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:27 docs/master/controllers.md:27
#, no-wrap
msgid "<a name=\"basic-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:27 docs/master/controllers.md:27
#, no-wrap
msgid "Basic Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:30 docs/master/controllers.md:30
msgid "Let's take a look at an example of a basic controller. Note that the controller extends the base controller class included with Laravel: `App\\Http\\Controllers\\Controller`:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:37 docs/8.x/controllers.md:75
#: docs/master/controllers.md:37 docs/master/controllers.md:75
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:53 docs/master/controllers.md:53
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for a given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\View\\View\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            return view('user.profile', [\n"
"                'user' => User::findOrFail($id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:55 docs/master/controllers.md:55
msgid "You can define a route to this controller method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:57 docs/8.x/controllers.md:410
#: docs/8.x/releases.md:370 docs/8.x/requests.md:72 docs/8.x/responses.md:208
#: docs/8.x/routing.md:47 docs/8.x/upgrade.md:313 docs/master/controllers.md:57
#: docs/master/controllers.md:397 docs/master/releases.md:370
#: docs/master/requests.md:71 docs/master/responses.md:208
#: docs/master/routing.md:47 docs/master/upgrade.md:313
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:59 docs/master/controllers.md:59
#, no-wrap
msgid "    Route::get('/user/{id}', [UserController::class, 'show']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:61 docs/master/controllers.md:61
msgid "When an incoming request matches the specified route URI, the `show` method on the `App\\Http\\Controllers\\UserController` class will be invoked and the route parameters will be passed to the method."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:63 docs/master/controllers.md:63
#, no-wrap
msgid "> {tip} Controllers are not **required** to extend a base class. However, you will not have access to convenient features such as the `middleware` and `authorize` methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:65 docs/master/controllers.md:65
#, no-wrap
msgid "<a name=\"single-action-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:65 docs/master/controllers.md:65
#, no-wrap
msgid "Single Action Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:68 docs/master/controllers.md:68
msgid "If a controller action is particularly complex, you might find it convenient to dedicate an entire controller class to that single action. To accomplish this, you may define a single `__invoke` method within the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:88
#, no-wrap
msgid "    class ProvisionServer extends Controller\n"
"    {\n"
"        /**\n"
"         * Provision a new web server.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function __invoke()\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:90 docs/master/controllers.md:91
msgid "When registering routes for single action controllers, you do not need to specify a controller method. Instead, you may simply pass the name of the controller to the router:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:92 docs/master/controllers.md:93
#, no-wrap
msgid "    use App\\Http\\Controllers\\ProvisionServer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:94 docs/master/controllers.md:95
#, no-wrap
msgid "    Route::post('/server', ProvisionServer::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:96 docs/master/controllers.md:97
msgid "You may generate an invokable controller by using the `--invokable` option of the `make:controller` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:98 docs/master/controllers.md:99
#, no-wrap
msgid "    php artisan make:controller ProvisionServer --invokable\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:100
#, no-wrap
msgid "> {tip} Controller stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:102 docs/master/controllers.md:103
#, no-wrap
msgid "<a name=\"controller-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:102 docs/master/controllers.md:103
#, no-wrap
msgid "Controller Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:105 docs/master/controllers.md:106
msgid "[Middleware](/docs/{{version}}/middleware) may be assigned to the controller's routes in your route files:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:107 docs/master/controllers.md:108
#, no-wrap
msgid "    Route::get('profile', [UserController::class, 'show'])->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:109 docs/master/controllers.md:110
msgid "Or, you may find it convenient to specify middleware within your controller's constructor. Using the `middleware` method within your controller's constructor, you can assign middleware to the controller's actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:124 docs/master/controllers.md:125
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Instantiate a new controller instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->middleware('auth');\n"
"            $this->middleware('log')->only('index');\n"
"            $this->middleware('subscribed')->except('store');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:126 docs/master/controllers.md:127
msgid "Controllers also allow you to register middleware using a closure. This provides a convenient way to define an inline middleware for a single controller without defining an entire middleware class:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:130 docs/master/controllers.md:131
#, no-wrap
msgid "    $this->middleware(function ($request, $next) {\n"
"        return $next($request);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:132 docs/master/controllers.md:133
#, no-wrap
msgid "<a name=\"resource-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:132 docs/master/controllers.md:133
#, no-wrap
msgid "Resource Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:135 docs/master/controllers.md:136
msgid "If you think of each Eloquent model in your application as a \"resource\", it is typical to perform the same sets of actions against each resource in your application. For example, imagine your application contains a `Photo` model and a `Movie` model. It is likely that users can create, read, update, or delete these resources."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:137 docs/master/controllers.md:138
msgid "Because of this common use case, Laravel resource routing assigns the typical create, read, update, and delete (\"CRUD\") routes to a controller with a single line of code. To get started, we can use the `make:controller` Artisan command's `--resource` option to quickly create a controller to handle these actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:139 docs/master/controllers.md:140
#, no-wrap
msgid "    php artisan make:controller PhotoController --resource\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:141 docs/master/controllers.md:142
msgid "This command will generate a controller at `app/Http/Controllers/PhotoController.php`. The controller will contain a method for each of the available resource operations. Next, you may register a resource route that points to the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:143 docs/8.x/controllers.md:195
#: docs/8.x/controllers.md:210 docs/8.x/controllers.md:272
#: docs/master/controllers.md:144 docs/master/controllers.md:182
#: docs/master/controllers.md:197 docs/master/controllers.md:259
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:145 docs/master/controllers.md:146
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:147
msgid "This single route declaration creates multiple routes to handle a variety of actions on the resource. The generated controller will already have methods stubbed for each of these actions. Remember, you can always get a quick overview of your application's routes by running the `route:list` Artisan command."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:149 docs/master/controllers.md:150
msgid "You may even register many resource controllers at once by passing an array to the `resources` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:154 docs/master/controllers.md:155
#, no-wrap
msgid "    Route::resources([\n"
"        'photos' => PhotoController::class,\n"
"        'posts' => PostController::class,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:156 docs/master/controllers.md:157
#, no-wrap
msgid "<a name=\"actions-handled-by-resource-controller\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:156 docs/master/controllers.md:157
#, no-wrap
msgid "Actions Handled By Resource Controller"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:167 docs/master/controllers.md:168
#, no-wrap
msgid "Verb      | URI                    | Action       | Route Name\n"
"----------|------------------------|--------------|---------------------\n"
"GET       | `/photos`              | index        | photos.index\n"
"GET       | `/photos/create`       | create       | photos.create\n"
"POST      | `/photos`              | store        | photos.store\n"
"GET       | `/photos/{photo}`      | show         | photos.show\n"
"GET       | `/photos/{photo}/edit` | edit         | photos.edit\n"
"PUT/PATCH | `/photos/{photo}`      | update       | photos.update\n"
"DELETE    | `/photos/{photo}`      | destroy      | photos.destroy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:169 docs/8.x/routing.md:430
#: docs/master/routing.md:430
#, no-wrap
msgid "<a name=\"customizing-missing-model-behavior\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:169 docs/8.x/routing.md:430
#: docs/master/routing.md:430
#, no-wrap
msgid "Customizing Missing Model Behavior"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:172
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound resource model is not found. However, you may customize this behavior by calling the `missing` method when defining your resource route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found for any of the resource's routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:176
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoController;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:181
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class)\n"
"            ->missing(function (Request $request) {\n"
"                return Redirect::route('photos.index');\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:183 docs/master/controllers.md:170
#, no-wrap
msgid "<a name=\"specifying-the-resource-model\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:183 docs/master/controllers.md:170
#, no-wrap
msgid "Specifying The Resource Model"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:186 docs/master/controllers.md:173
msgid "If you are using [route model binding](/docs/{{version}}/routing#route-model-binding) and would like the resource controller's methods to type-hint a model instance, you may use the `--model` option when generating the controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:188 docs/master/controllers.md:175
#, no-wrap
msgid "    php artisan make:controller PhotoController --resource --model=Photo\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:190 docs/master/controllers.md:177
#, no-wrap
msgid "<a name=\"restful-partial-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:190 docs/master/controllers.md:177
#, no-wrap
msgid "Partial Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:193 docs/master/controllers.md:180
msgid "When declaring a resource route, you may specify a subset of actions the controller should handle instead of the full set of default actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:199 docs/master/controllers.md:186
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class)->only([\n"
"        'index', 'show'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:203 docs/master/controllers.md:190
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class)->except([\n"
"        'create', 'store', 'update', 'destroy'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:205 docs/master/controllers.md:192
#, no-wrap
msgid "<a name=\"api-resource-routes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:205 docs/master/controllers.md:192
#, no-wrap
msgid "API Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:208 docs/master/controllers.md:195
msgid "When declaring resource routes that will be consumed by APIs, you will commonly want to exclude routes that present HTML templates such as `create` and `edit`. For convenience, you may use the `apiResource` method to automatically exclude these two routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:212 docs/master/controllers.md:199
#, no-wrap
msgid "    Route::apiResource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:214 docs/master/controllers.md:201
msgid "You may register many API resource controllers at once by passing an array to the `apiResources` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:217 docs/master/controllers.md:204
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoController;\n"
"    use App\\Http\\Controllers\\PostController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:222 docs/master/controllers.md:209
#, no-wrap
msgid "    Route::apiResources([\n"
"        'photos' => PhotoController::class,\n"
"        'posts' => PostController::class,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:224 docs/master/controllers.md:211
msgid "To quickly generate an API resource controller that does not include the `create` or `edit` methods, use the `--api` switch when executing the `make:controller` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:226 docs/master/controllers.md:213
#, no-wrap
msgid "    php artisan make:controller PhotoController --api\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:228 docs/master/controllers.md:215
#, no-wrap
msgid "<a name=\"restful-nested-resources\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:228 docs/master/controllers.md:215
#, no-wrap
msgid "Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:231 docs/master/controllers.md:218
msgid "Sometimes you may need to define routes to a nested resource. For example, a photo resource may have multiple comments that may be attached to the photo. To nest the resource controllers, you may use \"dot\" notation in your route declaration:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:233 docs/8.x/controllers.md:298
#: docs/master/controllers.md:220 docs/master/controllers.md:285
#, no-wrap
msgid "    use App\\Http\\Controllers\\PhotoCommentController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:235 docs/master/controllers.md:222
#, no-wrap
msgid "    Route::resource('photos.comments', PhotoCommentController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:237 docs/master/controllers.md:224
msgid "This route will register a nested resource that may be accessed with URIs like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:239 docs/master/controllers.md:226
#, no-wrap
msgid "    /photos/{photo}/comments/{comment}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:241 docs/master/controllers.md:228
#, no-wrap
msgid "<a name=\"scoping-nested-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:241 docs/master/controllers.md:228
#, no-wrap
msgid "Scoping Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:244 docs/master/controllers.md:231
msgid "Laravel's [implicit model binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature can automatically scope nested bindings such that the resolved child model is confirmed to belong to the parent model. By using the `scoped` method when defining your nested resource, you may enable automatic scoping as well as instruct Laravel which field the child resource should be retrieved by. For more information on how to accomplish this, please see the documentation on [scoping resource routes](#restful-scoping-resource-routes)."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:246 docs/master/controllers.md:233
#, no-wrap
msgid "<a name=\"shallow-nesting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:246 docs/master/controllers.md:233
#, no-wrap
msgid "Shallow Nesting"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:249 docs/master/controllers.md:236
msgid "Often, it is not entirely necessary to have both the parent and the child IDs within a URI since the child ID is already a unique identifier. When using unique identifiers such as auto-incrementing primary keys to identify your models in URI segments, you may choose to use \"shallow nesting\":"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:251 docs/master/controllers.md:238
#, no-wrap
msgid "    use App\\Http\\Controllers\\CommentController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:253 docs/master/controllers.md:240
#, no-wrap
msgid "    Route::resource('photos.comments', CommentController::class)->shallow();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:255 docs/master/controllers.md:242
msgid "This route definition will define the following routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:265 docs/master/controllers.md:252
#, no-wrap
msgid "Verb      | URI                               | Action       | Route Name\n"
"----------|-----------------------------------|--------------|---------------------\n"
"GET       | `/photos/{photo}/comments`        | index        | photos.comments.index\n"
"GET       | `/photos/{photo}/comments/create` | create       | photos.comments.create\n"
"POST      | `/photos/{photo}/comments`        | store        | photos.comments.store\n"
"GET       | `/comments/{comment}`             | show         | comments.show\n"
"GET       | `/comments/{comment}/edit`        | edit         | comments.edit\n"
"PUT/PATCH | `/comments/{comment}`             | update       | comments.update\n"
"DELETE    | `/comments/{comment}`             | destroy      | comments.destroy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:267 docs/master/controllers.md:254
#, no-wrap
msgid "<a name=\"restful-naming-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:267 docs/master/controllers.md:254
#, no-wrap
msgid "Naming Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:270 docs/master/controllers.md:257
msgid "By default, all resource controller actions have a route name; however, you can override these names by passing a `names` array with your desired route names:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:276 docs/master/controllers.md:263
#, no-wrap
msgid "    Route::resource('photos', PhotoController::class)->names([\n"
"        'create' => 'photos.build'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:278 docs/master/controllers.md:265
#, no-wrap
msgid "<a name=\"restful-naming-resource-route-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:278 docs/master/controllers.md:265
#, no-wrap
msgid "Naming Resource Route Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:281 docs/master/controllers.md:268
msgid "By default, `Route::resource` will create the route parameters for your resource routes based on the \"singularized\" version of the resource name. You can easily override this on a per resource basis using the `parameters` method. The array passed into the `parameters` method should be an associative array of resource names and parameter names:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:283 docs/master/controllers.md:270
#, no-wrap
msgid "    use App\\Http\\Controllers\\AdminUserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:287 docs/master/controllers.md:274
#, no-wrap
msgid "    Route::resource('users', AdminUserController::class)->parameters([\n"
"        'users' => 'admin_user'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:289 docs/master/controllers.md:276
#, no-wrap
msgid " The example above generates the following URI for the resource's `show` route:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:291 docs/master/controllers.md:278
#, no-wrap
msgid "    /users/{admin_user}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:293 docs/master/controllers.md:280
#, no-wrap
msgid "<a name=\"restful-scoping-resource-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:293 docs/master/controllers.md:280
#, no-wrap
msgid "Scoping Resource Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:296 docs/master/controllers.md:283
msgid "Laravel's [scoped implicit model binding](/docs/{{version}}/routing#implicit-model-binding-scoping) feature can automatically scope nested bindings such that the resolved child model is confirmed to belong to the parent model. By using the `scoped` method when defining your nested resource, you may enable automatic scoping as well as instruct Laravel which field the child resource should be retrieved by:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:302 docs/master/controllers.md:289
#, no-wrap
msgid "    Route::resource('photos.comments', PhotoCommentController::class)->scoped([\n"
"        'comment' => 'slug',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:304 docs/master/controllers.md:291
msgid "This route will register a scoped nested resource that may be accessed with URIs like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:306 docs/master/controllers.md:293
#, no-wrap
msgid "    /photos/{photo}/comments/{comment:slug}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:308 docs/master/controllers.md:295
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `Photo` model has a relationship named `comments` (the plural of the route parameter name) which can be used to retrieve the `Comment` model."
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:310 docs/master/controllers.md:297
#, no-wrap
msgid "<a name=\"restful-localizing-resource-uris\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:310 docs/master/controllers.md:297
#, no-wrap
msgid "Localizing Resource URIs"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:313 docs/master/controllers.md:300
msgid "By default, `Route::resource` will create resource URIs using English verbs. If you need to localize the `create` and `edit` action verbs, you may use the `Route::resourceVerbs` method. This may be done at the beginning of the `boot` method within your application's `App\\Providers\\RouteServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:325 docs/master/controllers.md:312
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::resourceVerbs([\n"
"            'create' => 'crear',\n"
"            'edit' => 'editar',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:330 docs/master/controllers.md:317
msgid "Once the verbs have been customized, a resource route registration such as `Route::resource('fotos', PhotoController::class)` will produce the following URIs:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:332 docs/master/controllers.md:319
#, no-wrap
msgid "    /fotos/crear\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:334 docs/master/controllers.md:321
#, no-wrap
msgid "    /fotos/{foto}/editar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:336 docs/master/controllers.md:323
#, no-wrap
msgid "<a name=\"restful-supplementing-resource-controllers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/controllers.md:336 docs/master/controllers.md:323
#, no-wrap
msgid "Supplementing Resource Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:339 docs/master/controllers.md:326
msgid "If you need to add additional routes to a resource controller beyond the default set of resource routes, you should define those routes before your call to the `Route::resource` method; otherwise, the routes defined by the `resource` method may unintentionally take precedence over your supplemental routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:341 docs/master/controllers.md:328
#, no-wrap
msgid "    use App\\Http\\Controller\\PhotoController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:344 docs/master/controllers.md:331
#, no-wrap
msgid "    Route::get('/photos/popular', [PhotoController::class, 'popular']);\n"
"    Route::resource('photos', PhotoController::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:346 docs/master/controllers.md:333
#, no-wrap
msgid "> {tip} Remember to keep your controllers focused. If you find yourself routinely needing methods outside of the typical set of resource actions, consider splitting your controller into two, smaller controllers.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:348 docs/master/controllers.md:335
#, no-wrap
msgid "<a name=\"dependency-injection-and-controllers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/controllers.md:348 docs/master/controllers.md:335
#, no-wrap
msgid "Dependency Injection & Controllers"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:351 docs/master/controllers.md:338
#, no-wrap
msgid "<a name=\"constructor-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:351 docs/master/controllers.md:338
#, no-wrap
msgid "Constructor Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:354 docs/master/controllers.md:341
msgid "The Laravel [service container](/docs/{{version}}/container) is used to resolve all Laravel controllers. As a result, you are able to type-hint any dependencies your controller may need in its constructor. The declared dependencies will automatically be resolved and injected into the controller instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:367 docs/master/controllers.md:354
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * The user repository instance.\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:379 docs/master/controllers.md:366
#, no-wrap
msgid "        /**\n"
"         * Create a new controller instance.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            $this->users = $users;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:381 docs/master/controllers.md:368
#, no-wrap
msgid "<a name=\"method-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/controllers.md:381 docs/master/controllers.md:368
#, no-wrap
msgid "Method Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:384 docs/master/controllers.md:371
msgid "In addition to constructor injection, you may also type-hint dependencies on your controller's methods. A common use-case for method injection is injecting the `Illuminate\\Http\\Request` instance into your controller methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:402
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:408 docs/master/controllers.md:395
msgid "If your controller method is also expecting input from a route parameter, list your route arguments after your other dependencies. For example, if your route is defined like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:412 docs/8.x/requests.md:74
#: docs/master/controllers.md:399 docs/master/requests.md:73
#, no-wrap
msgid "    Route::put('/user/{id}', [UserController::class, 'update']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:414 docs/master/controllers.md:401
msgid "You may still type-hint the `Illuminate\\Http\\Request` and access your `id` parameter by defining your controller method as follows:"
msgstr ""

#. type: Plain text
#: docs/8.x/controllers.md:434 docs/master/controllers.md:421
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the given user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  string  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, $id)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. #-#-#-#-#  csrf.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  csrf.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/csrf.md:1 docs/8.x/passport.md:1135 docs/8.x/routing.md:86
#: docs/8.x/sanctum.md:252 docs/master/csrf.md:1 docs/master/passport.md:1133
#: docs/master/routing.md:86 docs/master/sanctum.md:252
#, no-wrap
msgid "CSRF Protection"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/csrf.md:8 docs/master/csrf.md:8
msgid "[Introduction](#csrf-introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/csrf.md:8 docs/master/csrf.md:8
msgid "[Preventing CSRF Requests](#preventing-csrf-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/csrf.md:8 docs/master/csrf.md:8
msgid "[Excluding URIs](#csrf-excluding-uris)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/csrf.md:8 docs/master/csrf.md:8
msgid "[X-CSRF-Token](#csrf-x-csrf-token)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/csrf.md:8 docs/master/csrf.md:8
msgid "[X-XSRF-Token](#csrf-x-xsrf-token)"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:10 docs/master/csrf.md:10
#, no-wrap
msgid "<a name=\"csrf-introduction\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:13 docs/master/csrf.md:13
msgid "Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user. Thankfully, Laravel makes it easy to protect your application from [cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) attacks."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:15 docs/master/csrf.md:15
#, no-wrap
msgid "<a name=\"csrf-explanation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/csrf.md:15 docs/master/csrf.md:15
#, no-wrap
msgid "An Explanation Of The Vulnerability"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:18 docs/master/csrf.md:18
msgid "In case you're not familiar with cross-site request forgeries, let's discuss an example of how this vulnerability can be exploited. Imagine your application has a `/user/email` route that accepts a `POST` request to change the authenticated user's email address. Most likely, this route expects an `email` input field to contain the email address the user would like to begin using."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:20 docs/master/csrf.md:20
msgid "Without CSRF protection, a malicious website could create an HTML form that points to your application's `/user/email` route and submits the malicious user's own email address:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:24 docs/master/csrf.md:24
#, no-wrap
msgid "    <form action=\"https://your-application.com/user/email\" method=\"POST\">\n"
"        <input type=\"email\" value=\"malicious-email@example.com\">\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:28 docs/master/csrf.md:28
#, no-wrap
msgid "    <script>\n"
"        document.forms[0].submit();\n"
"    </script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:30 docs/master/csrf.md:30
#, no-wrap
msgid " If the malicious website automatically submits the form when the page is loaded, the malicious user only needs to lure an unsuspecting user of your application to visit their website and their email address will be changed in your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:32 docs/master/csrf.md:32
#, no-wrap
msgid " To prevent this vulnerability, we need to inspect every incoming `POST`, `PUT`, `PATCH`, or `DELETE` request for a secret session value that the malicious application is unable to access.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:34 docs/master/csrf.md:34
#, no-wrap
msgid "<a name=\"preventing-csrf-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/csrf.md:34 docs/master/csrf.md:34
#, no-wrap
msgid "Preventing CSRF Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:37 docs/master/csrf.md:37
msgid "Laravel automatically generates a CSRF \"token\" for each active [user session](/docs/{{version}}/session) managed by the application. This token is used to verify that the authenticated user is the person actually making the requests to the application. Since this token is stored in the user's session and changes each time the session is regenerated, a malicious application is unable to access it."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:39 docs/master/csrf.md:39
msgid "The current session's CSRF token can be accessed via the request's session or via the `csrf_token` helper function:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:44 docs/master/csrf.md:44
#, no-wrap
msgid "    Route::get('/token', function (Request $request) {\n"
"        $token = $request->session()->token();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:46 docs/master/csrf.md:46
#, no-wrap
msgid "        $token = csrf_token();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:51 docs/master/csrf.md:51
msgid "Anytime you define an HTML form in your application, you should include a hidden CSRF `_token` field in the form so that the CSRF protection middleware can validate the request. For convenience, you may use the `@csrf` Blade directive to generate the hidden token input field:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:54 docs/master/csrf.md:54
#, no-wrap
msgid "    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:58 docs/master/csrf.md:58
#, no-wrap
msgid "        <!-- Equivalent to... -->\n"
"        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:60 docs/master/csrf.md:60
msgid "The `App\\Http\\Middleware\\VerifyCsrfToken` [middleware](/docs/{{version}}/middleware), which is included in the `web` middleware group by default, will automatically verify that the token in the request input matches the token stored in the session. When these two tokens match, we know that the authenticated user is the one initiating the request."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:62 docs/master/csrf.md:62
#, no-wrap
msgid "<a name=\"csrf-tokens-and-spas\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/csrf.md:62 docs/master/csrf.md:62
#, no-wrap
msgid "CSRF Tokens & SPAs"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:65 docs/master/csrf.md:65
msgid "If you are building an SPA that is utilizing Laravel as an API backend, you should consult the [Laravel Sanctum documentation](/docs/{{version}}/sanctum) for information on authenticating with your API and protecting against CSRF vulnerabilities."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:67 docs/master/csrf.md:67
#, no-wrap
msgid "<a name=\"csrf-excluding-uris\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/csrf.md:67 docs/master/csrf.md:67
#, no-wrap
msgid "Excluding URIs From CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:70 docs/master/csrf.md:70
msgid "Sometimes you may wish to exclude a set of URIs from CSRF protection. For example, if you are using [Stripe](https://stripe.com) to process payments and are utilizing their webhook system, you will need to exclude your Stripe webhook handler route from CSRF protection since Stripe will not know what CSRF token to send to your routes."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:72 docs/master/csrf.md:72
msgid "Typically, you should place these kinds of routes outside of the `web` middleware group that the `App\\Providers\\RouteServiceProvider` applies to all routes in the `routes/web.php` file. However, you may also exclude the routes by adding their URIs to the `$except` property of the `VerifyCsrfToken` middleware:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:78 docs/master/csrf.md:78
#, no-wrap
msgid "    use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:92 docs/master/csrf.md:92
#, no-wrap
msgid "    class VerifyCsrfToken extends Middleware\n"
"    {\n"
"        /**\n"
"         * The URIs that should be excluded from CSRF verification.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $except = [\n"
"            'stripe/*',\n"
"            'http://example.com/foo/bar',\n"
"            'http://example.com/foo/*',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:94 docs/master/csrf.md:94
#, no-wrap
msgid "> {tip} For convenience, the CSRF middleware is automatically disabled for all routes when [running tests](/docs/{{version}}/testing).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:96 docs/master/csrf.md:96
#, no-wrap
msgid "<a name=\"csrf-x-csrf-token\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/csrf.md:96 docs/master/csrf.md:96
#, no-wrap
msgid "X-CSRF-TOKEN"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:99 docs/master/csrf.md:99
msgid "In addition to checking for the CSRF token as a POST parameter, the `App\\Http\\Middleware\\VerifyCsrfToken` middleware will also check for the `X-CSRF-TOKEN` request header. You could, for example, store the token in an HTML `meta` tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:101 docs/master/csrf.md:101
#, no-wrap
msgid "    <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:103 docs/master/csrf.md:103
msgid "Then, you can instruct a library like jQuery to automatically add the token to all request headers. This provides simple, convenient CSRF protection for your AJAX based applications using legacy JavaScript technology:"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:109 docs/master/csrf.md:109
#, no-wrap
msgid "    $.ajaxSetup({\n"
"        headers: {\n"
"            'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:111 docs/master/csrf.md:111
#, no-wrap
msgid "<a name=\"csrf-x-xsrf-token\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/csrf.md:111 docs/master/csrf.md:111
#, no-wrap
msgid "X-XSRF-TOKEN"
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:114 docs/master/csrf.md:114
msgid "Laravel stores the current CSRF token in an encrypted `XSRF-TOKEN` cookie that is included with each response generated by the framework. You can use the cookie value to set the `X-XSRF-TOKEN` request header."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:116 docs/master/csrf.md:116
msgid "This cookie is primarily sent as a developer convenience since some JavaScript frameworks and libraries, like Angular and Axios, automatically place its value in the `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""

#. type: Plain text
#: docs/8.x/csrf.md:117 docs/master/csrf.md:117
#, no-wrap
msgid "> {tip} By default, the `resources/js/bootstrap.js` file includes the Axios HTTP library which will automatically send the `X-XSRF-TOKEN` header for you.\n"
msgstr ""

#. type: Title #
#: docs/8.x/database-testing.md:1 docs/master/database-testing.md:1
#, no-wrap
msgid "Database Testing"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Resetting The Database After Each Test](#resetting-the-database-after-each-test)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Defining Model Factories](#defining-model-factories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Generating Factories](#generating-factories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Factory States](#factory-states)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Factory Callbacks](#factory-callbacks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Creating Models Using Factories](#creating-models-using-factories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Instantiating Models](#instantiating-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Persisting Models](#persisting-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Sequences](#sequences)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Factory Relationships](#factory-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Has Many Relationships](#has-many-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Belongs To Relationships](#belongs-to-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Many To Many Relationships](#many-to-many-relationships)"
msgstr ""

#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/8.x/eloquent-relationships.md:38
#: docs/master/database-testing.md:22 docs/master/eloquent-relationships.md:38
msgid "[Polymorphic Relationships](#polymorphic-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database-testing.md:22 docs/master/database-testing.md:22
msgid "[Defining Relationships Within Factories](#defining-relationships-within-factories)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/8.x/seeding.md:8
#: docs/master/database-testing.md:22 docs/master/seeding.md:8
msgid "[Running Seeders](#running-seeders)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database-testing.md:22 docs/8.x/dusk.md:50
#: docs/8.x/http-tests.md:17 docs/master/database-testing.md:22
#: docs/master/dusk.md:50 docs/master/http-tests.md:16
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:27 docs/master/database-testing.md:27
msgid "Laravel provides a variety of helpful tools and assertions to make it easier to test your database driven applications. In addition, Laravel model factories and seeders make it painless to create test database records using your application's Eloquent models and relationships. We'll discuss all of these powerful features in the following documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:29 docs/master/database-testing.md:29
#, no-wrap
msgid "<a name=\"resetting-the-database-after-each-test\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:29 docs/master/database-testing.md:29
#, no-wrap
msgid "Resetting The Database After Each Test"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:32 docs/master/database-testing.md:32
msgid "Before proceeding much further, let's discuss how to reset your database after each of your tests so that data from a previous test does not interfere with subsequent tests. Laravel's included `Illuminate\\Foundation\\Testing\\RefreshDatabase` trait will take care of this for you. Simply use the trait on your test class:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:36 docs/8.x/database-testing.md:531
#: docs/8.x/database-testing.md:563 docs/8.x/facades.md:228
#: docs/8.x/http-tests.md:26 docs/8.x/http-tests.md:58
#: docs/8.x/http-tests.md:88 docs/8.x/http-tests.md:116
#: docs/8.x/http-tests.md:140 docs/8.x/http-tests.md:156
#: docs/8.x/http-tests.md:184 docs/8.x/http-tests.md:216
#: docs/8.x/http-tests.md:252 docs/8.x/http-tests.md:282
#: docs/8.x/http-tests.md:403 docs/8.x/http-tests.md:459
#: docs/8.x/mocking.md:105 docs/8.x/mocking.md:156 docs/8.x/mocking.md:230
#: docs/8.x/mocking.md:301 docs/8.x/mocking.md:344 docs/8.x/mocking.md:405
#: docs/8.x/mocking.md:475 docs/8.x/mocking.md:546
#: docs/master/database-testing.md:36 docs/master/database-testing.md:522
#: docs/master/database-testing.md:554 docs/master/facades.md:227
#: docs/master/http-tests.md:25 docs/master/http-tests.md:57
#: docs/master/http-tests.md:87 docs/master/http-tests.md:115
#: docs/master/http-tests.md:139 docs/master/http-tests.md:155
#: docs/master/http-tests.md:183 docs/master/http-tests.md:215
#: docs/master/http-tests.md:251 docs/master/http-tests.md:281
#: docs/master/http-tests.md:309 docs/master/http-tests.md:365
#: docs/master/mocking.md:105 docs/master/mocking.md:156
#: docs/master/mocking.md:230 docs/master/mocking.md:301
#: docs/master/mocking.md:344 docs/master/mocking.md:405
#: docs/master/mocking.md:475 docs/master/mocking.md:546
#, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:40 docs/8.x/http-tests.md:30
#: docs/8.x/http-tests.md:62 docs/8.x/http-tests.md:188
#: docs/master/database-testing.md:40 docs/master/http-tests.md:29
#: docs/master/http-tests.md:61 docs/master/http-tests.md:187
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:44 docs/8.x/database-testing.md:540
#: docs/master/database-testing.md:44 docs/master/database-testing.md:531
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        use RefreshDatabase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:53 docs/master/database-testing.md:53
#, no-wrap
msgid "        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_example()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:57 docs/8.x/database-testing.md:557
#: docs/8.x/mocking.md:125 docs/master/database-testing.md:57
#: docs/master/database-testing.md:548 docs/master/mocking.md:125
#, no-wrap
msgid "            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:59 docs/master/database-testing.md:59
#, no-wrap
msgid "<a name=\"defining-model-factories\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database-testing.md:59 docs/master/database-testing.md:59
#, no-wrap
msgid "Defining Model Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:65 docs/master/database-testing.md:65
msgid "First, let's talk about Eloquent model factories. When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a set of default attributes for each of your [Eloquent models](/docs/{{version}}/eloquent) using model factories."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:67 docs/master/database-testing.md:67
msgid "To see an example of how to write a factory, take a look at the `database/factories/UserFactory.php` file in your application. This factory is included with all new Laravel applications and contains the following factory definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:69 docs/8.x/database-testing.md:146
#: docs/8.x/releases.md:65 docs/master/database-testing.md:69
#: docs/master/database-testing.md:146 docs/master/releases.md:65
#, no-wrap
msgid "    namespace Database\\Factories;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:73 docs/8.x/database-testing.md:150
#: docs/8.x/releases.md:69 docs/master/database-testing.md:73
#: docs/master/database-testing.md:150 docs/master/releases.md:69
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:82 docs/8.x/database-testing.md:159
#: docs/8.x/releases.md:78 docs/master/database-testing.md:82
#: docs/master/database-testing.md:159 docs/master/releases.md:78
#, no-wrap
msgid "    class UserFactory extends Factory\n"
"    {\n"
"        /**\n"
"         * The name of the factory's corresponding model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $model = User::class;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:99 docs/8.x/releases.md:95
#: docs/master/database-testing.md:99 docs/master/releases.md:95
#, no-wrap
msgid "        /**\n"
"         * Define the model's default state.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function definition()\n"
"        {\n"
"            return [\n"
"                'name' => $this->faker->name,\n"
"                'email' => $this->faker->unique()->safeEmail,\n"
"                'email_verified_at' => now(),\n"
"                'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"                'remember_token' => Str::random(10),\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:101 docs/master/database-testing.md:101
msgid "As you can see, in their most basic form, factories are classes that extend Laravel's base factory class and define a `model` property and `definition` method. The `definition` method returns the default set of attribute values that should be applied when creating a model using the factory."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:103 docs/master/database-testing.md:103
msgid "Via the `faker` property, factories have access to the [Faker](https://github.com/FakerPHP/Faker) PHP library, which allows you to conveniently generate various kinds of random data for testing."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:105 docs/master/database-testing.md:105
#, no-wrap
msgid "> {tip} You can set your application's Faker locale by adding a `faker_locale` option to your `config/app.php` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:107 docs/master/database-testing.md:107
#, no-wrap
msgid "<a name=\"generating-factories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:107 docs/master/database-testing.md:107
#, no-wrap
msgid "Generating Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:110 docs/master/database-testing.md:110
msgid "To create a factory, execute the `make:factory` [Artisan command](/docs/{{version}}/artisan):"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:112 docs/master/database-testing.md:112
#, no-wrap
msgid "    php artisan make:factory PostFactory\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:114 docs/master/database-testing.md:114
msgid "The new factory class will be placed in your `database/factories` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:116 docs/master/database-testing.md:116
msgid "The `--model` option may be used to indicate the name of the model created by the factory. This option will pre-fill the generated factory file with the given model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:118 docs/master/database-testing.md:118
#, no-wrap
msgid "    php artisan make:factory PostFactory --model=Post\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:120 docs/master/database-testing.md:120
#, no-wrap
msgid "<a name=\"factory-states\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:120 docs/master/database-testing.md:120
#, no-wrap
msgid "Factory States"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:123 docs/master/database-testing.md:123
msgid "State manipulation methods allow you to define discrete modifications that can be applied to your model factories in any combination. For example, your `Database\\Factories\\UserFactory` factory might contain a `suspended` state method that modifies one of its default attribute values."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:125 docs/master/database-testing.md:125
msgid "State transformation methods typically call the `state` method provided by Laravel's base factory class. The `state` method accepts a closure which will receive the array of raw attributes defined for the factory and should return an array of attributes to modify:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:139 docs/master/database-testing.md:139
#, no-wrap
msgid "    /**\n"
"     * Indicate that the user is suspended.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    public function suspended()\n"
"    {\n"
"        return $this->state(function (array $attributes) {\n"
"            return [\n"
"                'account_status' => 'suspended',\n"
"            ];\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:141 docs/master/database-testing.md:141
#, no-wrap
msgid "<a name=\"factory-callbacks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:141 docs/master/database-testing.md:141
#, no-wrap
msgid "Factory Callbacks"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:144 docs/master/database-testing.md:144
msgid "Factory callbacks are registered using the `afterMaking` and `afterCreating` methods and allow you to perform additional tasks after making or creating a model. You should register these callbacks by defining a `configure` method on your factory class. This method will be automatically called by Laravel when the factory is instantiated:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:173 docs/master/database-testing.md:173
#, no-wrap
msgid "        /**\n"
"         * Configure the model factory.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function configure()\n"
"        {\n"
"            return $this->afterMaking(function (User $user) {\n"
"                //\n"
"            })->afterCreating(function (User $user) {\n"
"                //\n"
"            });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:178 docs/master/database-testing.md:178
#, no-wrap
msgid "<a name=\"creating-models-using-factories\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database-testing.md:178 docs/master/database-testing.md:178
#, no-wrap
msgid "Creating Models Using Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:181 docs/master/database-testing.md:181
#, no-wrap
msgid "<a name=\"instantiating-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:181 docs/master/database-testing.md:181
#, no-wrap
msgid "Instantiating Models"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:184 docs/master/database-testing.md:184
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model. Let's take a look at a few examples of creating models. First, we'll use the `make` method to create models without persisting them to the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:190 docs/master/database-testing.md:190
#, no-wrap
msgid "    public function test_models_can_be_instantiated()\n"
"    {\n"
"        $user = User::factory()->make();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:193 docs/8.x/database-testing.md:256
#: docs/master/database-testing.md:193 docs/master/database-testing.md:256
#, no-wrap
msgid "        // Use model in tests...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:195 docs/master/database-testing.md:195
msgid "You may create a collection of many models using the `count` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:197 docs/master/database-testing.md:197
#, no-wrap
msgid "    $users = User::factory()->count(3)->make();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:199 docs/master/database-testing.md:199
#, no-wrap
msgid "<a name=\"applying-states\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:199 docs/master/database-testing.md:199
#, no-wrap
msgid "Applying States"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:202 docs/master/database-testing.md:202
msgid "You may also apply any of your [states](#factory-states) to the models. If you would like to apply multiple state transformations to the models, you may simply call the state transformation methods directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:204 docs/master/database-testing.md:204
#, no-wrap
msgid "    $users = User::factory()->count(5)->suspended()->make();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:206 docs/master/database-testing.md:206
#, no-wrap
msgid "<a name=\"overriding-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:206 docs/master/database-testing.md:206
#, no-wrap
msgid "Overriding Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:209 docs/master/database-testing.md:209
msgid "If you would like to override some of the default values of your models, you may pass an array of values to the `make` method. Only the specified attributes will be replaced while the rest of the attributes remain set to their default values as specified by the factory:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:213 docs/master/database-testing.md:213
#, no-wrap
msgid "    $user = User::factory()->make([\n"
"        'name' => 'Abigail Otwell',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:215 docs/master/database-testing.md:215
msgid "Alternatively, the `state` method may be called directly on the factory instance to perform an inline state transformation:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:219 docs/master/database-testing.md:219
#, no-wrap
msgid "    $user = User::factory()->state([\n"
"        'name' => 'Abigail Otwell',\n"
"    ])->make();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:221 docs/master/database-testing.md:221
#, no-wrap
msgid "> {tip} [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled when creating models using factories.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:223 docs/master/database-testing.md:223
#, no-wrap
msgid "<a name=\"connecting-factories-and-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:223 docs/master/database-testing.md:223
#, no-wrap
msgid "Connecting Factories & Models"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:226 docs/master/database-testing.md:226
msgid "The `HasFactory` trait's `factory` method will use conventions to determine the proper factory for the model. Specifically, the method will look for a factory in the `Database\\Factories` namespace that has a class name matching the model name and is suffixed with `Factory`. If these conventions do not apply to your particular application or factory, you may overwrite the `newFactory` method on your model to return an instance of the model's corresponding factory directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:228 docs/master/database-testing.md:228
#, no-wrap
msgid "    use Database\\Factories\\Administration\\FlightFactory;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:238 docs/master/database-testing.md:238
#, no-wrap
msgid "    /**\n"
"     * Create a new factory instance for the model.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    protected static function newFactory()\n"
"    {\n"
"        return FlightFactory::new();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:240 docs/master/database-testing.md:240
#, no-wrap
msgid "<a name=\"persisting-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:240 docs/master/database-testing.md:240
#, no-wrap
msgid "Persisting Models"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:243 docs/master/database-testing.md:243
msgid "The `create` method instantiates model instances and persists them to the database using Eloquent's `save` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:250 docs/master/database-testing.md:250
#, no-wrap
msgid "    public function test_models_can_be_persisted()\n"
"    {\n"
"        // Create a single App\\Models\\User instance...\n"
"        $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:253 docs/master/database-testing.md:253
#, no-wrap
msgid "        // Create three App\\Models\\User instances...\n"
"        $users = User::factory()->count(3)->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:258 docs/master/database-testing.md:258
msgid "You may override the factory's default model attributes by passing an array of attributes to the `create` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:262 docs/master/database-testing.md:262
#, no-wrap
msgid "    $user = User::factory()->create([\n"
"        'name' => 'Abigail',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:264 docs/master/database-testing.md:264
#, no-wrap
msgid "<a name=\"sequences\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:264 docs/master/database-testing.md:264
#, no-wrap
msgid "Sequences"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:267 docs/master/database-testing.md:267
msgid "Sometimes you may wish to alternate the value of a given model attribute for each created model. You may accomplish this by defining a state transformation as a sequence. For example, you may wish to alternate the value of an `admin` column between `Y` and `N` for each created user:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:270 docs/master/database-testing.md:270
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:278 docs/master/database-testing.md:278
#, no-wrap
msgid "    $users = User::factory()\n"
"                    ->count(10)\n"
"                    ->state(new Sequence(\n"
"                        ['admin' => 'Y'],\n"
"                        ['admin' => 'N'],\n"
"                    ))\n"
"                    ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:280 docs/master/database-testing.md:280
msgid "In this example, five users will be created with an `admin` value of `Y` and five users will be created with an `admin` value of `N`."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:282
msgid "If necessary, you may include a closure as a sequence value. The closure will be invoked each time the sequence needs a new value:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:289
#, no-wrap
msgid "    $users = User::factory()\n"
"                    ->count(10)\n"
"                    ->state(new Sequence(\n"
"                        fn () => ['role' => UserRoles::all()->random()],\n"
"                    ))\n"
"                    ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:291 docs/master/database-testing.md:282
#, no-wrap
msgid "<a name=\"factory-relationships\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database-testing.md:291 docs/master/database-testing.md:282
#, no-wrap
msgid "Factory Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:294 docs/master/database-testing.md:285
#, no-wrap
msgid "<a name=\"has-many-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:294 docs/master/database-testing.md:285
#, no-wrap
msgid "Has Many Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:297 docs/master/database-testing.md:288
msgid "Next, let's explore building Eloquent model relationships using Laravel's fluent factory methods. First, let's assume our application has an `App\\Models\\User` model and an `App\\Models\\Post` model. Also, let's assume that the `User` model defines a `hasMany` relationship with `Post`. We can create a user that has three posts using the `has` method provided by the Laravel's factories. The `has` method accepts a factory instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:304 docs/master/database-testing.md:295
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->has(Post::factory()->count(3))\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:306 docs/master/database-testing.md:297
msgid "By convention, when passing a `Post` model to the `has` method, Laravel will assume that the `User` model must have a `posts` method that defines the relationship. If necessary, you may explicitly specify the name of the relationship that you would like to manipulate:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:310 docs/master/database-testing.md:301
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->has(Post::factory()->count(3), 'posts')\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:312 docs/master/database-testing.md:303
msgid "Of course, you may perform state manipulations on the related models. In addition, you may pass a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:322 docs/master/database-testing.md:313
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->has(\n"
"                    Post::factory()\n"
"                            ->count(3)\n"
"                            ->state(function (array $attributes, User $user) {\n"
"                                return ['user_type' => $user->type];\n"
"                            })\n"
"                )\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:324 docs/master/database-testing.md:315
#, no-wrap
msgid "<a name=\"has-many-relationships-using-magic-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:324 docs/8.x/database-testing.md:373
#: docs/8.x/database-testing.md:434 docs/master/database-testing.md:315
#: docs/master/database-testing.md:364 docs/master/database-testing.md:425
#, no-wrap
msgid "Using Magic Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:327 docs/master/database-testing.md:318
msgid "For convenience, you may use Laravel's magic factory relationship methods to build relationships. For example, the following example will use convention to determine that the related models should be created via a `posts` relationship method on the `User` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:331 docs/master/database-testing.md:322
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasPosts(3)\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:333 docs/master/database-testing.md:324
msgid "When using magic methods to create factory relationships, you may pass an array of attributes to override on the related models:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:339 docs/master/database-testing.md:330
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasPosts(3, [\n"
"                    'published' => false,\n"
"                ])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:341 docs/master/database-testing.md:332
msgid "You may provide a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:347 docs/master/database-testing.md:338
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasPosts(3, function (array $attributes, User $user) {\n"
"                    return ['user_type' => $user->type];\n"
"                })\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:349 docs/master/database-testing.md:340
#, no-wrap
msgid "<a name=\"belongs-to-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:349 docs/8.x/eloquent-relationships.md:1584
#: docs/master/database-testing.md:340
#: docs/master/eloquent-relationships.md:1584
#, no-wrap
msgid "Belongs To Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:352 docs/master/database-testing.md:343
msgid "Now that we have explored how to build \"has many\" relationships using factories, let's explore the inverse of the relationship. The `for` method may be used to define the parent model that factory created models belong to. For example, we can create three `App\\Models\\Post` model instances that belong to a single user:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:362 docs/master/database-testing.md:353
#, no-wrap
msgid "    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->for(User::factory()->state([\n"
"                    'name' => 'Jessica Archer',\n"
"                ]))\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:364 docs/master/database-testing.md:355
msgid "If you already have a parent model instance that should be associated with the models you are creating, you may pass the model instance to the `for` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:366 docs/master/database-testing.md:357
#, no-wrap
msgid "    $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:371 docs/master/database-testing.md:362
#, no-wrap
msgid "    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->for($user)\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:373 docs/master/database-testing.md:364
#, no-wrap
msgid "<a name=\"belongs-to-relationships-using-magic-methods\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:376 docs/master/database-testing.md:367
msgid "For convenience, you may use Laravel's magic factory relationship methods to define \"belongs to\" relationships. For example, the following example will use convention to determine that the three posts should belong to the `user` relationship on the `Post` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:383 docs/master/database-testing.md:374
#, no-wrap
msgid "    $posts = Post::factory()\n"
"                ->count(3)\n"
"                ->forUser([\n"
"                    'name' => 'Jessica Archer',\n"
"                ])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:385 docs/master/database-testing.md:376
#, no-wrap
msgid "<a name=\"many-to-many-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:385 docs/8.x/eloquent-relationships.md:405
#: docs/8.x/eloquent-relationships.md:1603 docs/master/database-testing.md:376
#: docs/master/eloquent-relationships.md:405
#: docs/master/eloquent-relationships.md:1603
#, no-wrap
msgid "Many To Many Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:388 docs/master/database-testing.md:379
msgid "Like [has many relationships](#has-many-relationships), \"many to many\" relationships may be created using the `has` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:391 docs/8.x/database-testing.md:403
#: docs/master/database-testing.md:382 docs/master/database-testing.md:394
#, no-wrap
msgid "    use App\\Models\\Role;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:395 docs/master/database-testing.md:386
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->has(Role::factory()->count(3))\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:397 docs/master/database-testing.md:388
#, no-wrap
msgid "<a name=\"pivot-table-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:397 docs/master/database-testing.md:388
#, no-wrap
msgid "Pivot Table Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:400 docs/master/database-testing.md:391
msgid "If you need to define attributes that should be set on the pivot / intermediate table linking the models, you may use the `hasAttached` method. This method accepts an array of pivot table attribute names and values as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:410 docs/master/database-testing.md:401
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasAttached(\n"
"                    Role::factory()->count(3),\n"
"                    ['active' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:412 docs/master/database-testing.md:403
msgid "You may provide a closure based state transformation if your state change requires access to the related model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:423 docs/master/database-testing.md:414
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasAttached(\n"
"                    Role::factory()\n"
"                        ->count(3)\n"
"                        ->state(function (array $attributes, User $user) {\n"
"                            return ['name' => $user->name.' Role'];\n"
"                        }),\n"
"                    ['active' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:425 docs/master/database-testing.md:416
msgid "If you already have model instances that you would like to be attached to the models you are creating, you may pass the model instances to the `hasAttached` method. In this example, the same three roles will be attached to all three users:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:427 docs/master/database-testing.md:418
#, no-wrap
msgid "    $roles = Role::factory()->count(3)->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:432 docs/master/database-testing.md:423
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->count(3)\n"
"                ->hasAttached($roles, ['active' => true])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:434 docs/master/database-testing.md:425
#, no-wrap
msgid "<a name=\"many-to-many-relationships-using-magic-methods\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:437 docs/master/database-testing.md:428
msgid "For convenience, you may use Laravel's magic factory relationship methods to define many to many relationships. For example, the following example will use convention to determine that the related models should be created via a `roles` relationship method on the `User` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:443 docs/master/database-testing.md:434
#, no-wrap
msgid "    $user = User::factory()\n"
"                ->hasRoles(1, [\n"
"                    'name' => 'Editor'\n"
"                ])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:445 docs/8.x/eloquent-relationships.md:606
#: docs/master/database-testing.md:436
#: docs/master/eloquent-relationships.md:606
#, no-wrap
msgid "<a name=\"polymorphic-relationships\"></a>\n"
msgstr ""

#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  database-testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  eloquent-relationships.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/database-testing.md:445 docs/8.x/eloquent-relationships.md:606
#: docs/master/database-testing.md:436
#: docs/master/eloquent-relationships.md:606
#, no-wrap
msgid "Polymorphic Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:448 docs/master/database-testing.md:439
msgid "[Polymorphic relationships](/docs/{{version}}/eloquent-relationships#polymorphic-relationships) may also be created using factories. Polymorphic \"morph many\" relationships are created in the same way as typical \"has many\" relationships. For example, if a `App\\Models\\Post` model has a `morphMany` relationship with a `App\\Models\\Comment` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:452 docs/master/database-testing.md:443
#, no-wrap
msgid "    $post = Post::factory()->hasComments(3)->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:454 docs/master/database-testing.md:445
#, no-wrap
msgid "<a name=\"morph-to-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:454 docs/master/database-testing.md:445
#, no-wrap
msgid "Morph To Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:457 docs/master/database-testing.md:448
msgid "Magic methods may not be used to create `morphTo` relationships. Instead, the `for` method must be used directly and the name of the relationship must be explicitly provided. For example, imagine that the `Comment` model has a `commentable` method that defines a `morphTo` relationship. In this situation, we may create three comments that belong to a single post by using the `for` method directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:461 docs/master/database-testing.md:452
#, no-wrap
msgid "    $comments = Comment::factory()->count(3)->for(\n"
"        Post::factory(), 'commentable'\n"
"    )->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:463 docs/master/database-testing.md:454
#, no-wrap
msgid "<a name=\"polymorphic-many-to-many-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:463 docs/master/database-testing.md:454
#, no-wrap
msgid "Polymorphic Many To Many Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:466 docs/master/database-testing.md:457
msgid "Polymorphic \"many to many\" (`morphToMany` / `morphedByMany`) relationships may be created just like non-polymorphic \"many to many\" relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:469 docs/master/database-testing.md:460
#, no-wrap
msgid "    use App\\Models\\Tag;\n"
"    use App\\Models\\Video;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:476 docs/master/database-testing.md:467
#, no-wrap
msgid "    $videos = Video::factory()\n"
"                ->hasAttached(\n"
"                    Tag::factory()->count(3),\n"
"                    ['public' => true]\n"
"                )\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:478 docs/master/database-testing.md:469
msgid "Of course, the magic `has` method may also be used to create polymorphic \"many to many\" relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:482 docs/master/database-testing.md:473
#, no-wrap
msgid "    $videos = Video::factory()\n"
"                ->hasTags(3, ['public' => true])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:484 docs/master/database-testing.md:475
#, no-wrap
msgid "<a name=\"defining-relationships-within-factories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database-testing.md:484 docs/master/database-testing.md:475
#, no-wrap
msgid "Defining Relationships Within Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:487 docs/master/database-testing.md:478
msgid "To define a relationship within your model factory, you will typically assign a new factory instance to the foreign key of the relationship. This is normally done for the \"inverse\" relationships such as `belongsTo` and `morphTo` relationships. For example, if you would like to create a new user when creating a post, you may do the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:503 docs/master/database-testing.md:494
#, no-wrap
msgid "    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'user_id' => User::factory(),\n"
"            'title' => $this->faker->title,\n"
"            'content' => $this->faker->paragraph,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:505 docs/master/database-testing.md:496
msgid "If the relationship's columns depend on the factory that defines it you may assign a closure to an attribute. The closure will receive the factory's evaluated attribute array:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:522 docs/master/database-testing.md:513
#, no-wrap
msgid "    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'user_id' => User::factory(),\n"
"            'user_type' => function (array $attributes) {\n"
"                return User::find($attributes['user_id'])->type;\n"
"            },\n"
"            'title' => $this->faker->title,\n"
"            'content' => $this->faker->paragraph,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:524 docs/8.x/seeding.md:97
#: docs/master/database-testing.md:515 docs/master/seeding.md:97
#, no-wrap
msgid "<a name=\"running-seeders\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database-testing.md:524 docs/8.x/seeding.md:97
#: docs/master/database-testing.md:515 docs/master/seeding.md:97
#, no-wrap
msgid "Running Seeders"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:527 docs/master/database-testing.md:518
msgid "If you would like to use [database seeders](/docs/{{version}}/seeding) to populate your database during a feature test, you may invoke the `seed` method. By default, the `seed` method will execute the `DatabaseSeeder`, which should execute all of your other seeders. Alternatively, you pass a specific seeder class name to the `seed` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:536 docs/master/database-testing.md:527
#, no-wrap
msgid "    use Database\\Seeders\\OrderStatusSeeder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:550 docs/master/database-testing.md:541
#, no-wrap
msgid "        /**\n"
"         * Test creating a new order.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_orders_can_be_created()\n"
"        {\n"
"            // Run the DatabaseSeeder...\n"
"            $this->seed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:553 docs/master/database-testing.md:544
#, no-wrap
msgid "            // Run a specific seeder...\n"
"            $this->seed(OrderStatusSeeder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:559 docs/master/database-testing.md:550
msgid "Alternatively, you may instruct the `RefreshDatabase` trait to automatically seed the database before each test. You may accomplish this by defining a `$seed` property on your test class:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:566 docs/master/database-testing.md:557
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:575 docs/master/database-testing.md:566
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * Indicates whether the default seeder should run before each test.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        protected $seed = true;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:580 docs/master/database-testing.md:571
msgid "When the `$seed` property is `true`, the test will run the `Database\\Seeders\\DatabaseSeeder` class before each test. However, you may specify a specific seeder that should be executed by defining a `$seeder` property on your test class:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:582 docs/master/database-testing.md:573
#, no-wrap
msgid "    use Database\\Seeders\\OrderStatusSeeder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:589 docs/master/database-testing.md:580
#, no-wrap
msgid "    /**\n"
"     * Run a specific seeder before each test.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $seeder = OrderStatusSeeder::class;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:591 docs/8.x/dusk.md:838
#: docs/8.x/http-tests.md:508 docs/master/database-testing.md:582
#: docs/master/dusk.md:838 docs/master/http-tests.md:414
#, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database-testing.md:591 docs/8.x/dusk.md:838
#: docs/8.x/http-tests.md:508 docs/master/database-testing.md:582
#: docs/master/dusk.md:838 docs/master/http-tests.md:414
#, no-wrap
msgid "Available Assertions"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:594 docs/master/database-testing.md:585
msgid "Laravel provides several database assertions for your [PHPUnit](https://phpunit.de/) feature tests. We'll discuss each of these assertions below."
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:596 docs/master/database-testing.md:587
#, no-wrap
msgid "<a name=\"assert-database-count\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:596 docs/master/database-testing.md:587
#, no-wrap
msgid "assertDatabaseCount"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:599 docs/master/database-testing.md:590
msgid "Assert that a table in the database contains the given number of records:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:601 docs/master/database-testing.md:592
#, no-wrap
msgid "    $this->assertDatabaseCount('users', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:603 docs/master/database-testing.md:594
#, no-wrap
msgid "<a name=\"assert-database-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:603 docs/master/database-testing.md:594
#, no-wrap
msgid "assertDatabaseHas"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:606 docs/master/database-testing.md:597
msgid "Assert that a table in the database contains records matching the given key / value query constraints:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:610 docs/master/database-testing.md:601
#, no-wrap
msgid "    $this->assertDatabaseHas('users', [\n"
"        'email' => 'sally@example.com',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:612 docs/master/database-testing.md:603
#, no-wrap
msgid "<a name=\"assert-database-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:612 docs/master/database-testing.md:603
#, no-wrap
msgid "assertDatabaseMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:615 docs/master/database-testing.md:606
msgid "Assert that a table in the database does not contain records matching the given key / value query constraints:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:619 docs/master/database-testing.md:610
#, no-wrap
msgid "    $this->assertDatabaseMissing('users', [\n"
"        'email' => 'sally@example.com',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:621 docs/master/database-testing.md:612
#, no-wrap
msgid "<a name=\"assert-deleted\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database-testing.md:621 docs/master/database-testing.md:612
#, no-wrap
msgid "assertDeleted"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:624 docs/master/database-testing.md:615
msgid "The `assertDeleted` asserts that a given Eloquent model has been deleted from the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:630 docs/master/database-testing.md:621
#, no-wrap
msgid "    $user->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:632 docs/master/database-testing.md:623
#, no-wrap
msgid "    $this->assertDeleted($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:634 docs/master/database-testing.md:625
msgid "The `assertSoftDeleted` method may be used to assert a given Eloquent model has been \"soft deleted\":"
msgstr ""

#. type: Plain text
#: docs/8.x/database-testing.md:635 docs/master/database-testing.md:626
#, no-wrap
msgid "    $this->assertSoftDeleted($user);\n"
msgstr ""

#. type: Title #
#: docs/8.x/database.md:1 docs/master/database.md:1
#, no-wrap
msgid "Database: Getting Started"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Read & Write Connections](#read-and-write-connections)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Running SQL Queries](#running-queries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Using Multiple Database Connections](#using-multiple-database-connections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Listening For Query Events](#listening-for-query-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Database Transactions](#database-transactions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/database.md:11 docs/master/database.md:11
msgid "[Connecting To The Database CLI](#connecting-to-the-database-cli)"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:16 docs/master/database.md:16
msgid "Almost every modern web application interacts with a database. Laravel makes interacting with databases extremely simple across a variety of supported databases using raw SQL, a [fluent query builder](/docs/{{version}}/queries), and the [Eloquent ORM](/docs/{{version}}/eloquent). Currently, Laravel provides first-party support for four databases:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:23
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- MySQL 5.7+ ([Version Policy](https://en.wikipedia.org/wiki/MySQL#Release_history))\n"
"- PostgreSQL 9.6+ ([Version Policy](https://www.postgresql.org/support/versioning/))\n"
"- SQLite 3.8.8+\n"
"- SQL Server 2017+ ([Version Policy](https://support.microsoft.com/en-us/lifecycle/search))\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:28 docs/master/database.md:28
msgid "The configuration for Laravel's database services is located in your application's `config/database.php` configuration file. In this file, you may define all of your database connections, as well as specify which connection should be used by default. Most of the configuration options within this file are driven by the values of your application's environment variables. Examples for most of Laravel's supported database systems are provided in this file."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:30 docs/master/database.md:30
msgid "By default, Laravel's sample [environment configuration](/docs/{{version}}/configuration#environment-configuration) is ready to use with [Laravel Sail](/docs/{{version}}/sail), which is a Docker configuration for developing Laravel applications on your local machine. However, you are free to modify your database configuration as needed for your local database."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:32 docs/master/database.md:32
#, no-wrap
msgid "<a name=\"sqlite-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:32 docs/master/database.md:32
#, no-wrap
msgid "SQLite Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:35 docs/master/database.md:35
msgid "SQLite databases are contained within a single file on your filesystem. You can create a new SQLite database using the `touch` command in your terminal: `touch database/database.sqlite`. After the database has been created, you may easily configure your environment variables to point to this database by placing the absolute path to the database in the `DB_DATABASE` environment variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:38 docs/master/database.md:38
#, no-wrap
msgid "    DB_CONNECTION=sqlite\n"
"    DB_DATABASE=/absolute/path/to/database.sqlite\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:40 docs/master/database.md:40
msgid "To enable foreign key constraints for SQLite connections, you should set the `DB_FOREIGN_KEYS` environment variable to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:42 docs/master/database.md:42
#, no-wrap
msgid "    DB_FOREIGN_KEYS=true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:44 docs/master/database.md:44
#, no-wrap
msgid "<a name=\"mssql-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:44 docs/master/database.md:44
#, no-wrap
msgid "Microsoft SQL Server Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:47 docs/master/database.md:47
msgid "To use a Microsoft SQL Server database, you should ensure that you have the `sqlsrv` and `pdo_sqlsrv` PHP extensions installed as well as any dependencies they may require such as the Microsoft SQL ODBC driver."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:49 docs/master/database.md:49
#, no-wrap
msgid "<a name=\"configuration-using-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:49 docs/master/database.md:49
#, no-wrap
msgid "Configuration Using URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:52 docs/master/database.md:52
msgid "Typically, database connections are configured using multiple configuration values such as `host`, `database`, `username`, `password`, etc. Each of these configuration values has its own corresponding environment variable. This means that when configuring your database connection information on a production server, you need to manage several environment variables."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:54 docs/master/database.md:54
msgid "Some managed database providers such as AWS and Heroku provide a single database \"URL\" that contains all of the connection information for the database in a single string. An example database URL may look something like the following:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/database.md:55 docs/master/database.md:55
#, no-wrap
msgid "mysql://root:password@127.0.0.1/forge?charset=UTF-8\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:60 docs/master/database.md:60
msgid "These URLs typically follow a standard schema convention:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/database.md:61 docs/master/database.md:61
#, no-wrap
msgid "driver://username:password@host:port/database?options\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:66 docs/master/database.md:66
msgid "For convenience, Laravel supports these URLs as an alternative to configuring your database with multiple configuration options. If the `url` (or corresponding `DATABASE_URL` environment variable) configuration option is present, it will be used to extract the database connection and credential information."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:68 docs/master/database.md:68
#, no-wrap
msgid "<a name=\"read-and-write-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:68 docs/master/database.md:68
#, no-wrap
msgid "Read & Write Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:71 docs/master/database.md:71
msgid "Sometimes you may wish to use one database connection for SELECT statements, and another for INSERT, UPDATE, and DELETE statements. Laravel makes this a breeze, and the proper connections will always be used whether you are using raw queries, the query builder, or the Eloquent ORM."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:73 docs/master/database.md:73
msgid "To see how read / write connections should be configured, let's look at this example:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:95 docs/master/database.md:95
#, no-wrap
msgid "    'mysql' => [\n"
"        'read' => [\n"
"            'host' => [\n"
"                '192.168.1.1',\n"
"                '196.168.1.2',\n"
"            ],\n"
"        ],\n"
"        'write' => [\n"
"            'host' => [\n"
"                '196.168.1.3',\n"
"            ],\n"
"        ],\n"
"        'sticky' => true,\n"
"        'driver' => 'mysql',\n"
"        'database' => 'database',\n"
"        'username' => 'root',\n"
"        'password' => '',\n"
"        'charset' => 'utf8mb4',\n"
"        'collation' => 'utf8mb4_unicode_ci',\n"
"        'prefix' => '',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:97 docs/master/database.md:97
msgid "Note that three keys have been added to the configuration array: `read`, `write` and `sticky`. The `read` and `write` keys have array values containing a single key: `host`. The rest of the database options for the `read` and `write` connections will be merged from the main `mysql` configuration array."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:99 docs/master/database.md:99
msgid "You only need to place items in the `read` and `write` arrays if you wish to override the values from the main `mysql` array. So, in this case, `192.168.1.1` will be used as the host for the \"read\" connection, while `192.168.1.3` will be used for the \"write\" connection. The database credentials, prefix, character set, and all other options in the main `mysql` array will be shared across both connections. When multiple values exist in the `host` configuration array, a database host will be randomly chosen for each request."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:101 docs/master/database.md:101
#, no-wrap
msgid "<a name=\"the-sticky-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:101 docs/master/database.md:101
#, no-wrap
msgid "The `sticky` Option"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:104 docs/master/database.md:104
msgid "The `sticky` option is an *optional* value that can be used to allow the immediate reading of records that have been written to the database during the current request cycle. If the `sticky` option is enabled and a \"write\" operation has been performed against the database during the current request cycle, any further \"read\" operations will use the \"write\" connection. This ensures that any data written during the request cycle can be immediately read back from the database during that same request. It is up to you to decide if this is the desired behavior for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:106 docs/master/database.md:106
#, no-wrap
msgid "<a name=\"running-queries\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:106 docs/master/database.md:106
#, no-wrap
msgid "Running SQL Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:109 docs/master/database.md:109
msgid "Once you have configured your database connection, you may run queries using the `DB` facade. The `DB` facade provides methods for each type of query: `select`, `update`, `insert`, `delete`, and `statement`."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:111 docs/master/database.md:111
#, no-wrap
msgid "<a name=\"running-a-select-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:111 docs/master/database.md:111
#, no-wrap
msgid "Running A Select Query"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:114 docs/master/database.md:114
msgid "To run a basic SELECT query, you may use the `select` method on the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:121 docs/8.x/pagination.md:39 docs/8.x/queries.md:57
#: docs/master/database.md:121 docs/master/pagination.md:39
#: docs/master/queries.md:57
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:132 docs/master/database.md:132
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all of the application's users.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $users = DB::select('select * from users where active = ?', [1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:136 docs/8.x/queries.md:72 docs/master/database.md:136
#: docs/master/queries.md:72
#, no-wrap
msgid "            return view('user.index', ['users' => $users]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:138 docs/master/database.md:138
msgid "The first argument passed to the `select` method is the SQL query, while the second argument is any parameter bindings that need to be bound to the query. Typically, these are the values of the `where` clause constraints. Parameter binding provides protection against SQL injection."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:140 docs/master/database.md:140
msgid "The `select` method will always return an `array` of results. Each result within the array will be a PHP `stdClass` object representing a record from the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:142 docs/8.x/database.md:162 docs/8.x/database.md:171
#: docs/8.x/database.md:183 docs/8.x/database.md:217 docs/8.x/database.md:269
#: docs/8.x/database.md:282 docs/8.x/database.md:295 docs/8.x/queries.md:76
#: docs/8.x/queries.md:108 docs/8.x/queries.md:129 docs/8.x/queries.md:163
#: docs/8.x/queries.md:196 docs/8.x/queries.md:286 docs/8.x/queries.md:356
#: docs/master/database.md:142 docs/master/database.md:162
#: docs/master/database.md:171 docs/master/database.md:183
#: docs/master/database.md:217 docs/master/database.md:269
#: docs/master/database.md:282 docs/master/database.md:295
#: docs/master/queries.md:76 docs/master/queries.md:108
#: docs/master/queries.md:129 docs/master/queries.md:163
#: docs/master/queries.md:196 docs/master/queries.md:286
#: docs/master/queries.md:356
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:144 docs/master/database.md:144
#, no-wrap
msgid "    $users = DB::select('select * from users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:148 docs/8.x/eloquent-collections.md:21
#: docs/8.x/queries.md:82 docs/master/database.md:148
#: docs/master/eloquent-collections.md:21 docs/master/queries.md:82
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        echo $user->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:150 docs/master/database.md:150
#, no-wrap
msgid "<a name=\"using-named-bindings\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:150 docs/master/database.md:150
#, no-wrap
msgid "Using Named Bindings"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:153 docs/master/database.md:153
msgid "Instead of using `?` to represent your parameter bindings, you may execute a query using named bindings:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:155 docs/master/database.md:155
#, no-wrap
msgid "    $results = DB::select('select * from users where id = :id', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:157 docs/master/database.md:157
#, no-wrap
msgid "<a name=\"running-an-insert-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:157 docs/master/database.md:157
#, no-wrap
msgid "Running An Insert Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:160 docs/master/database.md:160
msgid "To execute an `insert` statement, you may use the `insert` method on the `DB` facade. Like `select`, this method accepts the SQL query as its first argument and bindings as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:164 docs/master/database.md:164
#, no-wrap
msgid "    DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:166 docs/master/database.md:166
#, no-wrap
msgid "<a name=\"running-an-update-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:166 docs/master/database.md:166
#, no-wrap
msgid "Running An Update Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:169 docs/master/database.md:169
msgid "The `update` method should be used to update existing records in the database. The number of rows affected by the statement is returned by the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:176 docs/master/database.md:176
#, no-wrap
msgid "    $affected = DB::update(\n"
"        'update users set votes = 100 where name = ?',\n"
"        ['Anita']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:178 docs/master/database.md:178
#, no-wrap
msgid "<a name=\"running-a-delete-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:178 docs/master/database.md:178
#, no-wrap
msgid "Running A Delete Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:181 docs/master/database.md:181
msgid "The `delete` method should be used to delete records from the database. Like `update`, the number of rows affected will be returned by the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:185 docs/master/database.md:185
#, no-wrap
msgid "    $deleted = DB::delete('delete from users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:187 docs/master/database.md:187
#, no-wrap
msgid "<a name=\"running-a-general-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:187 docs/master/database.md:187
#, no-wrap
msgid "Running A General Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:190 docs/master/database.md:190
msgid "Some database statements do not return any value. For these types of operations, you may use the `statement` method on the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:192 docs/master/database.md:192
#, no-wrap
msgid "    DB::statement('drop table users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:194 docs/master/database.md:194
#, no-wrap
msgid "<a name=\"running-an-unprepared-statement\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:194 docs/master/database.md:194
#, no-wrap
msgid "Running An Unprepared Statement"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:197 docs/master/database.md:197
msgid "Sometimes you may want to execute an SQL statement without binding any values. You may use the `DB` facade's `unprepared` method to accomplish this:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:199 docs/master/database.md:199
#, no-wrap
msgid "    DB::unprepared('update users set votes = 100 where name = \"Dries\"');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:201 docs/master/database.md:201
#, no-wrap
msgid "> {note} Since unprepared statements do not bind parameters, they may be vulnerable to SQL injection. You should never allow user controlled values within an unprepared statement.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:203 docs/master/database.md:203
#, no-wrap
msgid "<a name=\"implicit-commits-in-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:203 docs/master/database.md:203
#, no-wrap
msgid "Implicit Commits"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:206 docs/master/database.md:206
msgid "When using the `DB` facade's `statement` and `unprepared` methods within transactions you must be careful to avoid statements that cause [implicit commits](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html). These statements will cause the database engine to indirectly commit the entire transaction, leaving Laravel unaware of the database's transaction level. An example of such a statement is creating a database table:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:208 docs/master/database.md:208
#, no-wrap
msgid "    DB::unprepared('create table a (col varchar(1) null)');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:210 docs/master/database.md:210
msgid "Please refer to the MySQL manual for [a list of all statements](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html) that trigger implicit commits."
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:212 docs/master/database.md:212
#, no-wrap
msgid "<a name=\"using-multiple-database-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:212 docs/master/database.md:212
#, no-wrap
msgid "Using Multiple Database Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:215 docs/master/database.md:215
msgid "If your application defines multiple connections in your `config/database.php` configuration file, you may access each connection via the `connection` method provided by the `DB` facade. The connection name passed to the `connection` method should correspond to one of the connections listed in your `config/database.php` configuration file or configured at runtime using the `config` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:219 docs/master/database.md:219
#, no-wrap
msgid "    $users = DB::connection('sqlite')->select(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:221 docs/master/database.md:221
msgid "You may access the raw, underlying PDO instance of a connection using the `getPdo` method on a connection instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:223 docs/master/database.md:223
#, no-wrap
msgid "    $pdo = DB::connection()->getPdo();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:225 docs/master/database.md:225
#, no-wrap
msgid "<a name=\"listening-for-query-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/database.md:225 docs/master/database.md:225
#, no-wrap
msgid "Listening For Query Events"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:228 docs/master/database.md:228
msgid "If you would like to specify a closure that is invoked for each SQL query executed by your application, you may use the `DB` facade's `listen` method. This method can be useful for logging queries or debugging. You may register your query listener closure in the `boot` method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:235 docs/master/database.md:235
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:262
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            DB::listen(function ($query) {\n"
"                // $query->sql;\n"
"                // $query->bindings;\n"
"                // $query->time;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:264 docs/master/database.md:264
#, no-wrap
msgid "<a name=\"database-transactions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:264 docs/master/database.md:264
#, no-wrap
msgid "Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:267 docs/master/database.md:267
msgid "You may use the `transaction` method provided by the `DB` facade to run a set of operations within a database transaction. If an exception is thrown within the transaction closure, the transaction will automatically be rolled back. If the closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the `transaction` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:272 docs/8.x/database.md:285
#: docs/master/database.md:272 docs/master/database.md:285
#, no-wrap
msgid "    DB::transaction(function () {\n"
"        DB::update('update users set votes = 1');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:275 docs/master/database.md:275
#, no-wrap
msgid "        DB::delete('delete from posts');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:277 docs/master/database.md:277
#, no-wrap
msgid "<a name=\"handling-deadlocks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:277 docs/master/database.md:277
#, no-wrap
msgid "Handling Deadlocks"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:280 docs/master/database.md:280
msgid "The `transaction` method accepts an optional second argument which defines the number of times a transaction should be retried when a deadlock occurs. Once these attempts have been exhausted, an exception will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:288 docs/master/database.md:288
#, no-wrap
msgid "        DB::delete('delete from posts');\n"
"    }, 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:290 docs/master/database.md:290
#, no-wrap
msgid "<a name=\"manually-using-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/database.md:290 docs/master/database.md:290
#, no-wrap
msgid "Manually Using Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:293 docs/master/database.md:293
msgid "If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the `beginTransaction` method provided by the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:297 docs/master/database.md:297
#, no-wrap
msgid "    DB::beginTransaction();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:299 docs/master/database.md:299
msgid "You can rollback the transaction via the `rollBack` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:301 docs/master/database.md:301
#, no-wrap
msgid "    DB::rollBack();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:303 docs/master/database.md:303
msgid "Lastly, you can commit a transaction via the `commit` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:305 docs/master/database.md:305
#, no-wrap
msgid "    DB::commit();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:307 docs/master/database.md:307
#, no-wrap
msgid "> {tip} The `DB` facade's transaction methods control the transactions for both the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:309 docs/master/database.md:309
#, no-wrap
msgid "<a name=\"connecting-to-the-database-cli\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/database.md:309 docs/master/database.md:309
#, no-wrap
msgid "Connecting To The Database CLI"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:312 docs/master/database.md:312
msgid "If you would like to connect to your database's CLI, you may use the `db` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:314 docs/master/database.md:314
#, no-wrap
msgid "    php artisan db\n"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:316 docs/master/database.md:316
msgid "If needed, you may specify a database connection name to connect to a database connection that is not the default connection:"
msgstr ""

#. type: Plain text
#: docs/8.x/database.md:317 docs/master/database.md:317
#, no-wrap
msgid "    php artisan db mysql\n"
msgstr ""

#. type: Title #
#: docs/8.x/deployment.md:1 docs/master/deployment.md:1
#, no-wrap
msgid "Deployment"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Server Requirements](#server-requirements)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Server Configuration](#server-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Nginx](#nginx)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Optimization](#optimization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Autoloader Optimization](#autoloader-optimization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Optimizing Configuration Loading](#optimizing-configuration-loading)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Optimizing Route Loading](#optimizing-route-loading)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Optimizing View Loading](#optimizing-view-loading)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/deployment.md:14 docs/master/deployment.md:14
msgid "[Deploying With Forge / Vapor](#deploying-with-forge-or-vapor)"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:19 docs/master/deployment.md:19
msgid "When you're ready to deploy your Laravel application to production, there are some important things you can do to make sure your application is running as efficiently as possible. In this document, we'll cover some great starting points for making sure your Laravel application is deployed properly."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:21 docs/master/deployment.md:21
#, no-wrap
msgid "<a name=\"server-requirements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/deployment.md:21 docs/master/deployment.md:21
#, no-wrap
msgid "Server Requirements"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:24 docs/master/deployment.md:24
msgid "The Laravel framework has a few system requirements. You should ensure that your web server has the following minimum PHP version and extensions:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:37 docs/master/deployment.md:37
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- PHP >= 7.3\n"
"- BCMath PHP Extension\n"
"- Ctype PHP Extension\n"
"- Fileinfo PHP Extension\n"
"- JSON PHP Extension\n"
"- Mbstring PHP Extension\n"
"- OpenSSL PHP Extension\n"
"- PDO PHP Extension\n"
"- Tokenizer PHP Extension\n"
"- XML PHP Extension\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:39 docs/master/deployment.md:39
#, no-wrap
msgid "<a name=\"server-configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/deployment.md:39 docs/master/deployment.md:39
#, no-wrap
msgid "Server Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:42 docs/master/deployment.md:42
#, no-wrap
msgid "<a name=\"nginx\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/deployment.md:42 docs/master/deployment.md:42
#, no-wrap
msgid "Nginx"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:45 docs/master/deployment.md:45
msgid "If you are deploying your application to a server that is running Nginx, you may use the following configuration file as a starting point for configuring your web server. Most likely, this file will need to be customized depending on your server's configuration. **If you would like assistance in managing your server, consider using a first-party Laravel server management and deployment service such as [Laravel Forge](https://forge.laravel.com).**"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:47 docs/master/deployment.md:47
msgid "Please ensure, like the configuration below, your web server directs all requests to your application's `public/index.php` file. You should never attempt to move the `index.php` file to your project's root, as serving the application from the project root will expose many sensitive configuration files to the public Internet:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:52 docs/master/deployment.md:52
#, no-wrap
msgid "    server {\n"
"        listen 80;\n"
"        server_name example.com;\n"
"        root /srv/example.com/public;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:55
#, no-wrap
msgid "        add_header X-Frame-Options \"SAMEORIGIN\";\n"
"        add_header X-Content-Type-Options \"nosniff\";\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:57 docs/master/deployment.md:58
#, no-wrap
msgid "        index index.php;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:59 docs/master/deployment.md:60
#, no-wrap
msgid "        charset utf-8;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:63 docs/master/deployment.md:64
#, no-wrap
msgid "        location / {\n"
"            try_files $uri $uri/ /index.php?$query_string;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:66 docs/master/deployment.md:67
#, no-wrap
msgid "        location = /favicon.ico { access_log off; log_not_found off; }\n"
"        location = /robots.txt  { access_log off; log_not_found off; }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:68 docs/master/deployment.md:69
#, no-wrap
msgid "        error_page 404 /index.php;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:74 docs/master/deployment.md:75
#, no-wrap
msgid "        location ~ \\.php$ {\n"
"            fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n"
"            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n"
"            include fastcgi_params;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:79 docs/master/deployment.md:80
#, no-wrap
msgid "        location ~ /\\.(?!well-known).* {\n"
"            deny all;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:81 docs/master/deployment.md:82
#, no-wrap
msgid "<a name=\"optimization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/deployment.md:81 docs/master/deployment.md:82
#, no-wrap
msgid "Optimization"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:84 docs/master/deployment.md:85
#, no-wrap
msgid "<a name=\"autoloader-optimization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/deployment.md:84 docs/master/deployment.md:85
#, no-wrap
msgid "Autoloader Optimization"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:87 docs/master/deployment.md:88
msgid "When deploying to production, make sure that you are optimizing Composer's class autoloader map so Composer can quickly find the proper file to load for a given class:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:89 docs/master/deployment.md:90
#, no-wrap
msgid "    composer install --optimize-autoloader --no-dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:91 docs/master/deployment.md:92
#, no-wrap
msgid "> {tip} In addition to optimizing the autoloader, you should always be sure to include a `composer.lock` file in your project's source control repository. Your project's dependencies can be installed much faster when a `composer.lock` file is present.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:93 docs/master/deployment.md:94
#, no-wrap
msgid "<a name=\"optimizing-configuration-loading\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/deployment.md:93 docs/master/deployment.md:94
#, no-wrap
msgid "Optimizing Configuration Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:96 docs/master/deployment.md:97
msgid "When deploying your application to production, you should make sure that you run the `config:cache` Artisan command during your deployment process:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:98 docs/master/deployment.md:99
#, no-wrap
msgid "    php artisan config:cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:100 docs/master/deployment.md:101
msgid "This command will combine all of Laravel's configuration files into a single, cached file, which greatly reduces the number of trips the framework must make to the filesystem when loading your configuration values."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:102 docs/master/deployment.md:103
#, no-wrap
msgid "> {note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded and all calls to the `env` function for `.env` variables will return `null`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:104 docs/master/deployment.md:105
#, no-wrap
msgid "<a name=\"optimizing-route-loading\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/deployment.md:104 docs/master/deployment.md:105
#, no-wrap
msgid "Optimizing Route Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:107 docs/master/deployment.md:108
msgid "If you are building a large application with many routes, you should make sure that you are running the `route:cache` Artisan command during your deployment process:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:109 docs/8.x/routing.md:667
#: docs/master/deployment.md:110 docs/master/routing.md:666
#, no-wrap
msgid "    php artisan route:cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:111 docs/master/deployment.md:112
msgid "This command reduces all of your route registrations into a single method call within a cached file, improving the performance of route registration when registering hundreds of routes."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:113 docs/master/deployment.md:114
#, no-wrap
msgid "<a name=\"optimizing-view-loading\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/deployment.md:113 docs/master/deployment.md:114
#, no-wrap
msgid "Optimizing View Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:116 docs/master/deployment.md:117
msgid "When deploying your application to production, you should make sure that you run the `view:cache` Artisan command during your deployment process:"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:118 docs/8.x/views.md:262
#: docs/master/deployment.md:119 docs/master/views.md:262
#, no-wrap
msgid "    php artisan view:cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:120 docs/master/deployment.md:121
msgid "This command precompiles all your Blade views so they are not compiled on demand, improving the performance of each request that returns a view."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:125 docs/master/deployment.md:126
msgid "The debug option in your config/app.php configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the APP_DEBUG environment variable, which is stored in your .env file."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:127 docs/master/deployment.md:128
#, no-wrap
msgid "**In your production environment, this value should always be `false`. If the `APP_DEBUG` variable is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:129 docs/master/deployment.md:130
#, no-wrap
msgid "<a name=\"deploying-with-forge-or-vapor\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/deployment.md:129 docs/master/deployment.md:130
#, no-wrap
msgid "Deploying With Forge / Vapor"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:132 docs/master/deployment.md:133
#, no-wrap
msgid "<a name=\"laravel-forge\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/deployment.md:132 docs/master/deployment.md:133
#, no-wrap
msgid "Laravel Forge"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:135 docs/master/deployment.md:136
msgid "If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel application, [Laravel Forge](https://forge.laravel.com) is a wonderful alternative."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:137 docs/master/deployment.md:138
msgid "Laravel Forge can create servers on various infrastructure providers such as DigitalOcean, Linode, AWS, and more. In addition, Forge installs and manages all of the tools needed to build robust Laravel applications, such as Nginx, MySQL, Redis, Memcached, Beanstalk, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:139 docs/master/deployment.md:140
#, no-wrap
msgid "<a name=\"laravel-vapor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/deployment.md:139 docs/master/deployment.md:140
#, no-wrap
msgid "Laravel Vapor"
msgstr ""

#. type: Plain text
#: docs/8.x/deployment.md:141 docs/master/deployment.md:142
msgid "If you would like a totally serverless, auto-scaling deployment platform tuned for Laravel, check out [Laravel Vapor](https://vapor.laravel.com). Laravel Vapor is a serverless deployment platform for Laravel, powered by AWS. Launch your Laravel infrastructure on Vapor and fall in love with the scalable simplicity of serverless. Laravel Vapor is fine-tuned by Laravel's creators to work seamlessly with the framework so you can keep writing your Laravel applications exactly like you're used to."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Prologue"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Release Notes](/docs/{{version}}/releases)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Upgrade Guide](/docs/{{version}}/upgrade)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Contribution Guide](/docs/{{version}}/contributions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Getting Started"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Installation](/docs/{{version}}/installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Configuration](/docs/{{version}}/configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Directory Structure](/docs/{{version}}/structure)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Starter Kits](/docs/{{version}}/starter-kits)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Deployment](/docs/{{version}}/deployment)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Architecture Concepts"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Request Lifecycle](/docs/{{version}}/lifecycle)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Service Container](/docs/{{version}}/container)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Service Providers](/docs/{{version}}/providers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Facades](/docs/{{version}}/facades)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## The Basics"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Routing](/docs/{{version}}/routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Middleware](/docs/{{version}}/middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[CSRF Protection](/docs/{{version}}/csrf)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Controllers](/docs/{{version}}/controllers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Requests](/docs/{{version}}/requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Responses](/docs/{{version}}/responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Views](/docs/{{version}}/views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Blade Templates](/docs/{{version}}/blade)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[URL Generation](/docs/{{version}}/urls)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Session](/docs/{{version}}/session)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Validation](/docs/{{version}}/validation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Error Handling](/docs/{{version}}/errors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Logging](/docs/{{version}}/logging)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Digging Deeper"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Artisan Console](/docs/{{version}}/artisan)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Broadcasting](/docs/{{version}}/broadcasting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Cache](/docs/{{version}}/cache)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Collections](/docs/{{version}}/collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Compiling Assets](/docs/{{version}}/mix)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Contracts](/docs/{{version}}/contracts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Events](/docs/{{version}}/events)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[File Storage](/docs/{{version}}/filesystem)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Helpers](/docs/{{version}}/helpers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[HTTP Client](/docs/{{version}}/http-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Localization](/docs/{{version}}/localization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Mail](/docs/{{version}}/mail)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Notifications](/docs/{{version}}/notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Package Development](/docs/{{version}}/packages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Queues](/docs/{{version}}/queues)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Task Scheduling](/docs/{{version}}/scheduling)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Security"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Authentication](/docs/{{version}}/authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Authorization](/docs/{{version}}/authorization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Email Verification](/docs/{{version}}/verification)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Encryption](/docs/{{version}}/encryption)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Hashing](/docs/{{version}}/hashing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Password Reset](/docs/{{version}}/passwords)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Database"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Getting Started](/docs/{{version}}/database)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Query Builder](/docs/{{version}}/queries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Pagination](/docs/{{version}}/pagination)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Migrations](/docs/{{version}}/migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Seeding](/docs/{{version}}/seeding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Redis](/docs/{{version}}/redis)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Eloquent ORM"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Getting Started](/docs/{{version}}/eloquent)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Relationships](/docs/{{version}}/eloquent-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Collections](/docs/{{version}}/eloquent-collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Mutators / Casts](/docs/{{version}}/eloquent-mutators)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[API Resources](/docs/{{version}}/eloquent-resources)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Serialization](/docs/{{version}}/eloquent-serialization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Testing"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Getting Started](/docs/{{version}}/testing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[HTTP Tests](/docs/{{version}}/http-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Console Tests](/docs/{{version}}/console-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Browser Tests](/docs/{{version}}/dusk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Database](/docs/{{version}}/database-testing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Mocking](/docs/{{version}}/mocking)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "## Packages"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Breeze](/docs/{{version}}/starter-kits#laravel-breeze)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Cashier (Stripe)](/docs/{{version}}/billing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Cashier (Paddle)](/docs/{{version}}/cashier-paddle)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Dusk](/docs/{{version}}/dusk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Envoy](/docs/{{version}}/envoy)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Fortify](/docs/{{version}}/fortify)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Homestead](/docs/{{version}}/homestead)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Horizon](/docs/{{version}}/horizon)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Jetstream](https://jetstream.laravel.com)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Passport](/docs/{{version}}/passport)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Sail](/docs/{{version}}/sail)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Sanctum](/docs/{{version}}/sanctum)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Scout](/docs/{{version}}/scout)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Socialite](/docs/{{version}}/socialite)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Telescope](/docs/{{version}}/telescope)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/documentation.md:92 docs/master/documentation.md:92
msgid "[Valet](/docs/{{version}}/valet)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/documentation.md:92
msgid "[API Documentation](/api/8.x)"
msgstr ""

#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/dusk.md:1 docs/8.x/homestead.md:618 docs/8.x/sail.md:210
#: docs/master/dusk.md:1 docs/master/homestead.md:618 docs/master/sail.md:202
#, no-wrap
msgid "Laravel Dusk"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Managing ChromeDriver Installations](#managing-chromedriver-installations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Using Other Browsers](#using-other-browsers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Getting Started](#getting-started)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Generating Tests](#generating-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Database Migrations](#migrations)"
msgstr ""

#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/8.x/sail.md:24 docs/8.x/testing.md:8
#: docs/master/dusk.md:50 docs/master/sail.md:23 docs/master/testing.md:8
msgid "[Running Tests](#running-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Environment Handling](#environment-handling)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Browser Basics](#browser-basics)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Creating Browsers](#creating-browsers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Navigation](#navigation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Resizing Browser Windows](#resizing-browser-windows)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Browser Macros](#browser-macros)"
msgstr ""

#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/8.x/fortify.md:25 docs/8.x/http-client.md:15
#: docs/8.x/socialite.md:12 docs/master/dusk.md:50 docs/master/fortify.md:25
#: docs/master/http-client.md:15 docs/master/socialite.md:12
msgid "[Authentication](#authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/8.x/http-tests.md:17 docs/8.x/requests.md:22
#: docs/master/dusk.md:50 docs/master/http-tests.md:16
#: docs/master/requests.md:21
msgid "[Cookies](#cookies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Executing JavaScript](#executing-javascript)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Taking A Screenshot](#taking-a-screenshot)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Storing Console Output To Disk](#storing-console-output-to-disk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Storing Page Source To Disk](#storing-page-source-to-disk)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Interacting With Elements](#interacting-with-elements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Dusk Selectors](#dusk-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Text, Values, & Attributes](#text-values-and-attributes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Interacting With Forms](#interacting-with-forms)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Attaching Files](#attaching-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Pressing Buttons](#pressing-buttons)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Clicking Links](#clicking-links)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Using The Keyboard](#using-the-keyboard)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Using The Mouse](#using-the-mouse)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[JavaScript Dialogs](#javascript-dialogs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Scoping Selectors](#scoping-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Waiting For Elements](#waiting-for-elements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Scrolling An Element Into View](#scrolling-an-element-into-view)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Pages](#pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Generating Pages](#generating-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Configuring Pages](#configuring-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Navigating To Pages](#navigating-to-pages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Shorthand Selectors](#shorthand-selectors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Page Methods](#page-methods)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Generating Components](#generating-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Using Components](#using-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Continuous Integration](#continuous-integration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Heroku CI](#running-tests-on-heroku-ci)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[Travis CI](#running-tests-on-travis-ci)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/dusk.md:50 docs/master/dusk.md:50
msgid "[GitHub Actions](#running-tests-on-github-actions)"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:55 docs/master/dusk.md:55
msgid "Laravel Dusk provides an expressive, easy-to-use browser automation and testing API. By default, Dusk does not require you to install JDK or Selenium on your local computer. Instead, Dusk uses a standalone [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/home) installation. However, you are free to utilize any other Selenium compatible driver you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:60 docs/master/dusk.md:60
msgid "To get started, you should add the `laravel/dusk` Composer dependency to your project:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:62 docs/master/dusk.md:62
#, no-wrap
msgid "    composer require --dev laravel/dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:64 docs/master/dusk.md:64
#, no-wrap
msgid "> {note} If you are manually registering Dusk's service provider, you should **never** register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:66 docs/master/dusk.md:66
msgid "After installing the Dusk package, execute the `dusk:install` Artisan command. The `dusk:install` command will create a `tests/Browser` directory and an example Dusk test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:68 docs/master/dusk.md:68
#, no-wrap
msgid "    php artisan dusk:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:70 docs/master/dusk.md:70
msgid "Next, set the `APP_URL` environment variable in your application's `.env` file. This value should match the URL you use to access your application in a browser."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:72 docs/master/dusk.md:72
#, no-wrap
msgid "> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please also consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:74 docs/master/dusk.md:74
#, no-wrap
msgid "<a name=\"managing-chromedriver-installations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:74 docs/master/dusk.md:74
#, no-wrap
msgid "Managing ChromeDriver Installations"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:77 docs/master/dusk.md:77
msgid "If you would like to install a different version of ChromeDriver than what is included with Laravel Dusk, you may use the `dusk:chrome-driver` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:80 docs/master/dusk.md:80
#, no-wrap
msgid "    # Install the latest version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:83 docs/master/dusk.md:83
#, no-wrap
msgid "    # Install a given version of ChromeDriver for your OS...\n"
"    php artisan dusk:chrome-driver 86\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:86 docs/master/dusk.md:86
#, no-wrap
msgid "    # Install a given version of ChromeDriver for all supported OSs...\n"
"    php artisan dusk:chrome-driver --all\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:89 docs/master/dusk.md:89
#, no-wrap
msgid "    # Install the version of ChromeDriver that matches the detected version of Chrome / Chromium for your OS...\n"
"    php artisan dusk:chrome-driver --detect\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:91 docs/master/dusk.md:91
#, no-wrap
msgid "> {note} Dusk requires the `chromedriver` binaries to be executable. If you're having problems running Dusk, you should ensure the binaries are executable using the following command: `chmod -R 0755 vendor/laravel/dusk/bin/`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:93 docs/master/dusk.md:93
#, no-wrap
msgid "<a name=\"using-other-browsers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:93 docs/master/dusk.md:93
#, no-wrap
msgid "Using Other Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:96 docs/master/dusk.md:96
msgid "By default, Dusk uses Google Chrome and a standalone [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/home) installation to run your browser tests. However, you may start your own Selenium server and run your tests against any browser you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:98 docs/master/dusk.md:98
msgid "To get started, open your `tests/DuskTestCase.php` file, which is the base Dusk test case for your application. Within this file, you can remove the call to the `startChromeDriver` method. This will stop Dusk from automatically starting the ChromeDriver:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:109 docs/8.x/dusk.md:187 docs/master/dusk.md:109
#: docs/master/dusk.md:187
#, no-wrap
msgid "    /**\n"
"     * Prepare for Dusk test execution.\n"
"     *\n"
"     * @beforeClass\n"
"     * @return void\n"
"     */\n"
"    public static function prepare()\n"
"    {\n"
"        // static::startChromeDriver();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:111 docs/master/dusk.md:111
msgid "Next, you may modify the `driver` method to connect to the URL and port of your choice. In addition, you may modify the \"desired capabilities\" that should be passed to the WebDriver:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:123 docs/master/dusk.md:123
#, no-wrap
msgid "    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:4444/wd/hub', DesiredCapabilities::phantomjs()\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:125 docs/master/dusk.md:125
#, no-wrap
msgid "<a name=\"getting-started\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:125 docs/master/dusk.md:125
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:128 docs/master/dusk.md:128
#, no-wrap
msgid "<a name=\"generating-tests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:128 docs/master/dusk.md:128
#, no-wrap
msgid "Generating Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:131 docs/master/dusk.md:131
msgid "To generate a Dusk test, use the `dusk:make` Artisan command. The generated test will be placed in the `tests/Browser` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:133 docs/master/dusk.md:133
#, no-wrap
msgid "    php artisan dusk:make LoginTest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:135 docs/8.x/packages.md:143 docs/master/dusk.md:135
#: docs/master/packages.md:143
#, no-wrap
msgid "<a name=\"migrations\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:138 docs/master/dusk.md:138
msgid "Most of the tests you write will interact with pages that retrieve data from your application's database; however, your Dusk tests should never use the `RefreshDatabase `trait. The `RefreshDatabase` trait leverages database transactions which will not be applicable or available across HTTP requests. Instead, use the `DatabaseMigrations` trait, which re-migrates the database for each test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:142 docs/8.x/dusk.md:220 docs/8.x/dusk.md:1684
#: docs/master/dusk.md:142 docs/master/dusk.md:220 docs/master/dusk.md:1676
#, no-wrap
msgid "    namespace Tests\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:147 docs/8.x/dusk.md:225 docs/master/dusk.md:147
#: docs/master/dusk.md:225
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Chrome;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:152 docs/master/dusk.md:152
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:154 docs/master/dusk.md:154
#, no-wrap
msgid "> {note} SQLite in-memory databases may not be used when executing Dusk tests. Since the browser executes within its own process, it will not be able to access the in-memory databases of other processes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:156 docs/8.x/sail.md:197 docs/8.x/testing.md:74
#: docs/master/dusk.md:156 docs/master/sail.md:189 docs/master/testing.md:74
#, no-wrap
msgid "<a name=\"running-tests\"></a>\n"
msgstr ""

#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  dusk.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  testing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/dusk.md:156 docs/8.x/sail.md:197 docs/8.x/testing.md:74
#: docs/master/dusk.md:156 docs/master/sail.md:189 docs/master/testing.md:74
#, no-wrap
msgid "Running Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:159 docs/master/dusk.md:159
msgid "To run your browser tests, execute the `dusk` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:161 docs/master/dusk.md:161
#, no-wrap
msgid "    php artisan dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:163 docs/master/dusk.md:163
msgid "If you had test failures the last time you ran the `dusk` command, you may save time by re-running the failing tests first using the `dusk:fails` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:165 docs/master/dusk.md:165
#, no-wrap
msgid "    php artisan dusk:fails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:167 docs/master/dusk.md:167
msgid "The `dusk` command accepts any argument that is normally accepted by the PHPUnit test runner, such as allowing you to only run the tests for a given [group](https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group):"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:169 docs/master/dusk.md:169
#, no-wrap
msgid "    php artisan dusk --group=foo\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:171 docs/master/dusk.md:171
#, no-wrap
msgid "> {tip} If you are using [Laravel Sail](/docs/{{version}}/sail) to manage your local development environment, please consult the Sail documentation on [configuring and running Dusk tests](/docs/{{version}}/sail#laravel-dusk).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:173 docs/master/dusk.md:173
#, no-wrap
msgid "<a name=\"manually-starting-chromedriver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:173 docs/master/dusk.md:173
#, no-wrap
msgid "Manually Starting ChromeDriver"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:176 docs/master/dusk.md:176
msgid "By default, Dusk will automatically attempt to start ChromeDriver. If this does not work for your particular system, you may manually start ChromeDriver before running the `dusk` command. If you choose to start ChromeDriver manually, you should comment out the following line of your `tests/DuskTestCase.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:189 docs/master/dusk.md:189
msgid "In addition, if you start ChromeDriver on a port other than 9515, you should modify the `driver` method of the same class to reflect the correct port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:201 docs/master/dusk.md:201
#, no-wrap
msgid "    /**\n"
"     * Create the RemoteWebDriver instance.\n"
"     *\n"
"     * @return \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n"
"     */\n"
"    protected function driver()\n"
"    {\n"
"        return RemoteWebDriver::create(\n"
"            'http://localhost:9515', DesiredCapabilities::chrome()\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:203 docs/master/dusk.md:203
#, no-wrap
msgid "<a name=\"environment-handling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:203 docs/master/dusk.md:203
#, no-wrap
msgid "Environment Handling"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:206 docs/master/dusk.md:206
msgid "To force Dusk to use its own environment file when running tests, create a `.env.dusk.{environment}` file in the root of your project. For example, if you will be initiating the `dusk` command from your `local` environment, you should create a `.env.dusk.local` file."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:208 docs/master/dusk.md:208
msgid "When running tests, Dusk will back-up your `.env` file and rename your Dusk environment to `.env`. Once the tests have completed, your `.env` file will be restored."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:210 docs/master/dusk.md:210
#, no-wrap
msgid "<a name=\"browser-basics\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:210 docs/master/dusk.md:210
#, no-wrap
msgid "Browser Basics"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:213 docs/master/dusk.md:213
#, no-wrap
msgid "<a name=\"creating-browsers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:213 docs/master/dusk.md:213
#, no-wrap
msgid "Creating Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:216 docs/master/dusk.md:216
msgid "To get started, let's write a test that verifies we can log into our application. After generating a test, we can modify it to navigate to the login page, enter some credentials, and click the \"Login\" button. To create a browser instance, you may call the `browse` method from within your Dusk test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:229 docs/master/dusk.md:229
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        use DatabaseMigrations;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:240 docs/master/dusk.md:240
#, no-wrap
msgid "        /**\n"
"         * A basic browser test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_example()\n"
"        {\n"
"            $user = User::factory()->create([\n"
"                'email' => 'taylor@laravel.com',\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:250 docs/master/dusk.md:250
#, no-wrap
msgid "            $this->browse(function ($browser) use ($user) {\n"
"                $browser->visit('/login')\n"
"                        ->type('email', $user->email)\n"
"                        ->type('password', 'password')\n"
"                        ->press('Login')\n"
"                        ->assertPathIs('/home');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:252 docs/master/dusk.md:252
msgid "As you can see in the example above, the `browse` method accepts a closure. A browser instance will automatically be passed to this closure by Dusk and is the main object used to interact with and make assertions against your application."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:254 docs/master/dusk.md:254
#, no-wrap
msgid "<a name=\"creating-multiple-browsers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:254 docs/master/dusk.md:254
#, no-wrap
msgid "Creating Multiple Browsers"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:257 docs/master/dusk.md:257
msgid "Sometimes you may need multiple browsers in order to properly carry out a test. For example, multiple browsers may be needed to test a chat screen that interacts with websockets. To create multiple browsers, simply add more browser arguments to the signature of the closure given to the `browse` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:262 docs/master/dusk.md:262
#, no-wrap
msgid "    $this->browse(function ($first, $second) {\n"
"        $first->loginAs(User::find(1))\n"
"              ->visit('/home')\n"
"              ->waitForText('Message');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:268 docs/master/dusk.md:268
#, no-wrap
msgid "        $second->loginAs(User::find(2))\n"
"               ->visit('/home')\n"
"               ->waitForText('Message')\n"
"               ->type('message', 'Hey Taylor')\n"
"               ->press('Send');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:272 docs/master/dusk.md:272
#, no-wrap
msgid "        $first->waitForText('Hey Taylor')\n"
"              ->assertSee('Jeffrey Way');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:274 docs/master/dusk.md:274
#, no-wrap
msgid "<a name=\"navigation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:274 docs/master/dusk.md:274
#, no-wrap
msgid "Navigation"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:277 docs/master/dusk.md:277
msgid "The `visit` method may be used to navigate to a given URI within your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:279 docs/master/dusk.md:279
#, no-wrap
msgid "    $browser->visit('/login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:281 docs/master/dusk.md:281
msgid "You may use the `visitRoute` method to navigate to a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:283 docs/master/dusk.md:283
#, no-wrap
msgid "    $browser->visitRoute('login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:285 docs/master/dusk.md:285
msgid "You may navigate \"back\" and \"forward\" using the `back` and `forward` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:287 docs/master/dusk.md:287
#, no-wrap
msgid "    $browser->back();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:289 docs/master/dusk.md:289
#, no-wrap
msgid "    $browser->forward();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:291 docs/master/dusk.md:291
msgid "You may use the `refresh` method to refresh the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:293 docs/master/dusk.md:293
#, no-wrap
msgid "    $browser->refresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:295 docs/master/dusk.md:295
#, no-wrap
msgid "<a name=\"resizing-browser-windows\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:295 docs/master/dusk.md:295
#, no-wrap
msgid "Resizing Browser Windows"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:298 docs/master/dusk.md:298
msgid "You may use the `resize` method to adjust the size of the browser window:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:300 docs/master/dusk.md:300
#, no-wrap
msgid "    $browser->resize(1920, 1080);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:302 docs/master/dusk.md:302
msgid "The `maximize` method may be used to maximize the browser window:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:304 docs/master/dusk.md:304
#, no-wrap
msgid "    $browser->maximize();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:306 docs/master/dusk.md:306
msgid "The `fitContent` method will resize the browser window to match the size of its content:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:308 docs/master/dusk.md:308
#, no-wrap
msgid "    $browser->fitContent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:310 docs/master/dusk.md:310
msgid "When a test fails, Dusk will automatically resize the browser to fit the content prior to taking a screenshot. You may disable this feature by calling the `disableFitOnFailure` method within your test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:312 docs/master/dusk.md:312
#, no-wrap
msgid "    $browser->disableFitOnFailure();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:314 docs/master/dusk.md:314
msgid "You may use the `move` method to move the browser window to a different position on your screen:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:316 docs/master/dusk.md:316
#, no-wrap
msgid "    $browser->move($x = 100, $y = 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:318 docs/master/dusk.md:318
#, no-wrap
msgid "<a name=\"browser-macros\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:318 docs/master/dusk.md:318
#, no-wrap
msgid "Browser Macros"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:321 docs/master/dusk.md:321
msgid "If you would like to define a custom browser method that you can re-use in a variety of your tests, you may use the `macro` method on the `Browser` class. Typically, you should call this method from a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:328 docs/master/dusk.md:328
#, no-wrap
msgid "    use Illuminate\\Support\\ServiceProvider;\n"
"    use Laravel\\Dusk\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:340 docs/master/dusk.md:340
#, no-wrap
msgid "    class DuskServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register Dusk's browser macros.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Browser::macro('scrollToElement', function ($element = null) {\n"
"                $this->script(\"$('html, body').animate({ scrollTop: $('$element').offset().top }, 0);\");\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:345 docs/master/dusk.md:345
#, no-wrap
msgid "                return $this;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:347 docs/master/dusk.md:347
msgid "The `macro` function accepts a name as its first argument, and a closure as its second. The macro's closure will be executed when calling the macro as a method on a `Browser` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:353 docs/master/dusk.md:353
#, no-wrap
msgid "    $this->browse(function ($browser) use ($user) {\n"
"        $browser->visit('/pay')\n"
"                ->scrollToElement('#credit-card-details')\n"
"                ->assertSee('Enter Credit Card Details');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:355 docs/8.x/fortify.md:124 docs/8.x/http-client.md:130
#: docs/8.x/socialite.md:46 docs/master/dusk.md:355 docs/master/fortify.md:124
#: docs/master/http-client.md:122 docs/master/socialite.md:46
#, no-wrap
msgid "<a name=\"authentication\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:358 docs/master/dusk.md:358
msgid "Often, you will be testing pages that require authentication. You can use Dusk's `loginAs` method in order to avoid interacting with your application's login screen during every test. The `loginAs` method accepts a primary key associated with your authenticatable model or an authenticatable model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:365 docs/master/dusk.md:365
#, no-wrap
msgid "    $this->browse(function ($browser) {\n"
"        $browser->loginAs(User::find(1))\n"
"              ->visit('/home');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:367 docs/master/dusk.md:367
#, no-wrap
msgid "> {note} After using the `loginAs` method, the user session will be maintained for all tests within the file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:369 docs/8.x/http-tests.md:109 docs/8.x/requests.md:391
#: docs/master/dusk.md:369 docs/master/http-tests.md:108
#: docs/master/requests.md:386
#, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:369 docs/8.x/http-tests.md:109 docs/8.x/requests.md:391
#: docs/master/dusk.md:369 docs/master/http-tests.md:108
#: docs/master/requests.md:386
#, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:372 docs/master/dusk.md:372
msgid "You may use the `cookie` method to get or set an encrypted cookie's value. By default, all of the cookies created by Laravel are encrypted:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:374 docs/master/dusk.md:374
#, no-wrap
msgid "    $browser->cookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:376 docs/master/dusk.md:376
#, no-wrap
msgid "    $browser->cookie('name', 'Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:378 docs/master/dusk.md:378
msgid "You may use the `plainCookie` method to get or set an unencrypted cookie's value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:380 docs/master/dusk.md:380
#, no-wrap
msgid "    $browser->plainCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:382 docs/master/dusk.md:382
#, no-wrap
msgid "    $browser->plainCookie('name', 'Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:384 docs/master/dusk.md:384
msgid "You may use the `deleteCookie` method to delete the given cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:386 docs/master/dusk.md:386
#, no-wrap
msgid "    $browser->deleteCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:388 docs/master/dusk.md:388
#, no-wrap
msgid "<a name=\"executing-javascript\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:388 docs/master/dusk.md:388
#, no-wrap
msgid "Executing JavaScript"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:391 docs/master/dusk.md:391
msgid "You may use the `script` method to execute arbitrary JavaScript statements within the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:393 docs/master/dusk.md:393
#, no-wrap
msgid "    $output = $browser->script('document.documentElement.scrollTop = 0');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:398 docs/master/dusk.md:398
#, no-wrap
msgid "    $output = $browser->script([\n"
"        'document.body.scrollTop = 0',\n"
"        'document.documentElement.scrollTop = 0',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:400 docs/master/dusk.md:400
#, no-wrap
msgid "<a name=\"taking-a-screenshot\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:400 docs/master/dusk.md:400
#, no-wrap
msgid "Taking A Screenshot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:403 docs/master/dusk.md:403
msgid "You may use the `screenshot` method to take a screenshot and store it with the given filename. All screenshots will be stored within the `tests/Browser/screenshots` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:405 docs/master/dusk.md:405
#, no-wrap
msgid "    $browser->screenshot('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:407 docs/master/dusk.md:407
#, no-wrap
msgid "<a name=\"storing-console-output-to-disk\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:407 docs/master/dusk.md:407
#, no-wrap
msgid "Storing Console Output To Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:410 docs/master/dusk.md:410
msgid "You may use the `storeConsoleLog` method to write the current browser's console output to disk with the given filename. Console output will be stored within the `tests/Browser/console` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:412 docs/master/dusk.md:412
#, no-wrap
msgid "    $browser->storeConsoleLog('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:414 docs/master/dusk.md:414
#, no-wrap
msgid "<a name=\"storing-page-source-to-disk\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:414 docs/master/dusk.md:414
#, no-wrap
msgid "Storing Page Source To Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:417 docs/master/dusk.md:417
msgid "You may use the `storeSource` method to write the current page's source to disk with the given filename. The page source will be stored within the `tests/Browser/source` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:419 docs/master/dusk.md:419
#, no-wrap
msgid "    $browser->storeSource('filename');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:421 docs/master/dusk.md:421
#, no-wrap
msgid "<a name=\"interacting-with-elements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:421 docs/master/dusk.md:421
#, no-wrap
msgid "Interacting With Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:424 docs/master/dusk.md:424
#, no-wrap
msgid "<a name=\"dusk-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:424 docs/master/dusk.md:424
#, no-wrap
msgid "Dusk Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:427 docs/master/dusk.md:427
msgid "Choosing good CSS selectors for interacting with elements is one of the hardest parts of writing Dusk tests. Over time, frontend changes can cause CSS selectors like the following to break your tests:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:429 docs/8.x/dusk.md:439 docs/8.x/dusk.md:1399
#: docs/master/dusk.md:429 docs/master/dusk.md:439 docs/master/dusk.md:1391
#, no-wrap
msgid "    // HTML...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:431 docs/master/dusk.md:431
#, no-wrap
msgid "    <button>Login</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:433 docs/8.x/dusk.md:443 docs/master/dusk.md:433
#: docs/master/dusk.md:443
#, no-wrap
msgid "    // Test...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:435 docs/master/dusk.md:435
#, no-wrap
msgid "    $browser->click('.login-page .container div > button');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:437 docs/master/dusk.md:437
msgid "Dusk selectors allow you to focus on writing effective tests rather than remembering CSS selectors. To define a selector, add a `dusk` attribute to your HTML element. Then, when interacting with a Dusk browser, prefix the selector with `@` to manipulate the attached element within your test:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:441 docs/master/dusk.md:441
#, no-wrap
msgid "    <button dusk=\"login-button\">Login</button>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:445 docs/master/dusk.md:445
#, no-wrap
msgid "    $browser->click('@login-button');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:447 docs/master/dusk.md:447
#, no-wrap
msgid "<a name=\"text-values-and-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:447 docs/master/dusk.md:447
#, no-wrap
msgid "Text, Values, & Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:450 docs/master/dusk.md:450
#, no-wrap
msgid "<a name=\"retrieving-setting-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:450 docs/master/dusk.md:450
#, no-wrap
msgid "Retrieving & Setting Values"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:453 docs/master/dusk.md:453
msgid "Dusk provides several methods for interacting with the current value, display text, and attributes of elements on the page. For example, to get the \"value\" of an element that matches a given CSS or Dusk selector, use the `value` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:456 docs/master/dusk.md:456
#, no-wrap
msgid "    // Retrieve the value...\n"
"    $value = $browser->value('selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:459 docs/master/dusk.md:459
#, no-wrap
msgid "    // Set the value...\n"
"    $browser->value('selector', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:461 docs/master/dusk.md:461
msgid "You may use the `inputValue` method to get the \"value\" of an input element that has a given field name:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:463 docs/master/dusk.md:463
#, no-wrap
msgid "    $value = $browser->inputValue('field');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:465 docs/master/dusk.md:465
#, no-wrap
msgid "<a name=\"retrieving-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:465 docs/master/dusk.md:465
#, no-wrap
msgid "Retrieving Text"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:468 docs/master/dusk.md:468
msgid "The `text` method may be used to retrieve the display text of an element that matches the given selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:470 docs/master/dusk.md:470
#, no-wrap
msgid "    $text = $browser->text('selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:472 docs/master/dusk.md:472
#, no-wrap
msgid "<a name=\"retrieving-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:472 docs/master/dusk.md:472
#, no-wrap
msgid "Retrieving Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:475 docs/master/dusk.md:475
msgid "Finally, the `attribute` method may be used to retrieve the value of an attribute of an element matching the given selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:477 docs/master/dusk.md:477
#, no-wrap
msgid "    $attribute = $browser->attribute('selector', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:479 docs/master/dusk.md:479
#, no-wrap
msgid "<a name=\"interacting-with-forms\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:479 docs/master/dusk.md:479
#, no-wrap
msgid "Interacting With Forms"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:482 docs/master/dusk.md:482
#, no-wrap
msgid "<a name=\"typing-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:482 docs/master/dusk.md:482
#, no-wrap
msgid "Typing Values"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:485 docs/master/dusk.md:485
msgid "Dusk provides a variety of methods for interacting with forms and input elements. First, let's take a look at an example of typing text into an input field:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:487 docs/master/dusk.md:487
#, no-wrap
msgid "    $browser->type('email', 'taylor@laravel.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:489 docs/master/dusk.md:489
msgid "Note that, although the method accepts one if necessary, we are not required to pass a CSS selector into the `type` method. If a CSS selector is not provided, Dusk will search for an `input` or `textarea` field with the given `name` attribute."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:491 docs/master/dusk.md:491
msgid "To append text to a field without clearing its content, you may use the `append` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:494 docs/master/dusk.md:494
#, no-wrap
msgid "    $browser->type('tags', 'foo')\n"
"            ->append('tags', ', bar, baz');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:496 docs/master/dusk.md:496
msgid "You may clear the value of an input using the `clear` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:498 docs/master/dusk.md:498
#, no-wrap
msgid "    $browser->clear('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:500 docs/master/dusk.md:500
msgid "You can instruct Dusk to type slowly using the `typeSlowly` method. By default, Dusk will pause for 100 milliseconds between key presses. To customize the amount of time between key presses, you may pass the appropriate number of milliseconds as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:502 docs/master/dusk.md:502
#, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:504 docs/master/dusk.md:504
#, no-wrap
msgid "    $browser->typeSlowly('mobile', '+1 (202) 555-5555', 300);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:506 docs/master/dusk.md:506
msgid "You may use the `appendSlowly` method to append text slowly:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:509 docs/master/dusk.md:509
#, no-wrap
msgid "    $browser->type('tags', 'foo')\n"
"            ->appendSlowly('tags', ', bar, baz');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:511 docs/master/dusk.md:511
#, no-wrap
msgid "<a name=\"dropdowns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:511 docs/master/dusk.md:511
#, no-wrap
msgid "Dropdowns"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:514 docs/master/dusk.md:514
msgid "To select a value available on a `select` element, you may use the `select` method. Like the `type` method, the `select` method does not require a full CSS selector. When passing a value to the `select` method, you should pass the underlying option value instead of the display text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:516 docs/master/dusk.md:516
#, no-wrap
msgid "    $browser->select('size', 'Large');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:518 docs/master/dusk.md:518
msgid "You may select a random option by omitting the second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:520 docs/master/dusk.md:520
#, no-wrap
msgid "    $browser->select('size');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:522 docs/master/dusk.md:522
#, no-wrap
msgid "<a name=\"checkboxes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:522 docs/master/dusk.md:522
#, no-wrap
msgid "Checkboxes"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:525 docs/master/dusk.md:525
msgid "To \"check\" a checkbox input, you may use the `check` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a checkbox with a matching `name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:527 docs/master/dusk.md:527
#, no-wrap
msgid "    $browser->check('terms');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:529 docs/master/dusk.md:529
msgid "The `uncheck` method may be used to \"uncheck\" a checkbox input:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:531 docs/master/dusk.md:531
#, no-wrap
msgid "    $browser->uncheck('terms');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:533 docs/master/dusk.md:533
#, no-wrap
msgid "<a name=\"radio-buttons\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:533 docs/master/dusk.md:533
#, no-wrap
msgid "Radio Buttons"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:536 docs/master/dusk.md:536
msgid "To \"select\" a `radio` input option, you may use the `radio` method. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `radio` input with matching `name` and `value` attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:538 docs/master/dusk.md:538
#, no-wrap
msgid "    $browser->radio('size', 'large');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:540 docs/master/dusk.md:540
#, no-wrap
msgid "<a name=\"attaching-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:540 docs/master/dusk.md:540
#, no-wrap
msgid "Attaching Files"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:543 docs/master/dusk.md:543
msgid "The `attach` method may be used to attach a file to a `file` input element. Like many other input related methods, a full CSS selector is not required. If a CSS selector match can't be found, Dusk will search for a `file` input with a matching `name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:545 docs/master/dusk.md:545
#, no-wrap
msgid "    $browser->attach('photo', __DIR__.'/photos/mountains.png');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:547 docs/master/dusk.md:547
#, no-wrap
msgid "> {note} The attach function requires the `Zip` PHP extension to be installed and enabled on your server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:549 docs/master/dusk.md:549
#, no-wrap
msgid "<a name=\"pressing-buttons\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:549 docs/master/dusk.md:549
#, no-wrap
msgid "Pressing Buttons"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:552 docs/master/dusk.md:552
msgid "The `press` method may be used to click a button element on the page. The first argument given to the `press` method may be either the display text of the button or a CSS / Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:554 docs/master/dusk.md:554
#, no-wrap
msgid "    $browser->press('Login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:556 docs/master/dusk.md:556
msgid "When submitting forms, many application's disable the form's submission button after it is pressed and then re-enable the button when the form submission's HTTP request is complete. To press a button and wait for the button to be re-enabled, you may use the `pressAndWaitFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:559 docs/master/dusk.md:559
#, no-wrap
msgid "    // Press the button and wait a maximum of 5 seconds for it to be enabled...\n"
"    $browser->pressAndWaitFor('Save');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:562 docs/master/dusk.md:562
#, no-wrap
msgid "    // Press the button and wait a maximum of 1 second for it to be enabled...\n"
"    $browser->pressAndWaitFor('Save', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:564 docs/master/dusk.md:564
#, no-wrap
msgid "<a name=\"clicking-links\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:564 docs/master/dusk.md:564
#, no-wrap
msgid "Clicking Links"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:567 docs/master/dusk.md:567
msgid "To click a link, you may use the `clickLink` method on the browser instance. The `clickLink` method will click the link that has the given display text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:569 docs/master/dusk.md:569
#, no-wrap
msgid "    $browser->clickLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:571 docs/master/dusk.md:571
msgid "You may use the `seeLink` method to determine if a link with the given display text is visible on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:575 docs/master/dusk.md:575
#, no-wrap
msgid "    if ($browser->seeLink($linkText)) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:577 docs/master/dusk.md:577
#, no-wrap
msgid "> {note} These methods interact with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test's duration.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:579 docs/master/dusk.md:579
#, no-wrap
msgid "<a name=\"using-the-keyboard\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:579 docs/master/dusk.md:579
#, no-wrap
msgid "Using The Keyboard"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:582 docs/master/dusk.md:582
msgid "The `keys` method allows you to provide more complex input sequences to a given element than normally allowed by the `type` method. For example, you may instruct Dusk to hold modifier keys while entering values. In this example, the `shift` key will be held while `taylor` is entered into the element matching the given selector. After `taylor` is typed, `swift` will be typed without any modifier keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:584 docs/master/dusk.md:584
#, no-wrap
msgid "    $browser->keys('selector', ['{shift}', 'taylor'], 'swift');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:586 docs/master/dusk.md:586
msgid "Another valuable use case for the `keys` method is sending a \"keyboard shortcut\" combination to the primary CSS selector for your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:588 docs/master/dusk.md:588
#, no-wrap
msgid "    $browser->keys('.app', ['{command}', 'j']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:590 docs/master/dusk.md:590
#, no-wrap
msgid "> {tip} All modifier keys such as `{command}` are wrapped in `{}` characters, and match the constants defined in the `Facebook\\WebDriver\\WebDriverKeys` class, which can be [found on GitHub](https://github.com/php-webdriver/php-webdriver/blob/master/lib/WebDriverKeys.php).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:592 docs/master/dusk.md:592
#, no-wrap
msgid "<a name=\"using-the-mouse\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:592 docs/master/dusk.md:592
#, no-wrap
msgid "Using The Mouse"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:595 docs/master/dusk.md:595
#, no-wrap
msgid "<a name=\"clicking-on-elements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:595 docs/master/dusk.md:595
#, no-wrap
msgid "Clicking On Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:598 docs/master/dusk.md:598
msgid "The `click` method may be used to click on an element matching the given CSS or Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:600 docs/master/dusk.md:600
#, no-wrap
msgid "    $browser->click('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:602 docs/master/dusk.md:602
msgid "The `clickAtXPath` method may be used to click on an element matching the given XPath expression:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:604 docs/master/dusk.md:604
#, no-wrap
msgid "    $browser->clickAtXPath('//div[@class = \"selector\"]');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:606 docs/master/dusk.md:606
msgid "The `clickAtPoint` method may be used to click on the topmost element at a given pair of coordinates relative to the viewable area of the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:608 docs/master/dusk.md:608
#, no-wrap
msgid "    $browser->clickAtPoint($x = 0, $y = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:610 docs/master/dusk.md:610
msgid "The `doubleClick` method may be used to simulate the double click of a mouse:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:612 docs/master/dusk.md:612
#, no-wrap
msgid "    $browser->doubleClick();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:614 docs/master/dusk.md:614
msgid "The `rightClick` method may be used to simulate the right click of a mouse:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:616 docs/master/dusk.md:616
#, no-wrap
msgid "    $browser->rightClick();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:618 docs/master/dusk.md:618
#, no-wrap
msgid "    $browser->rightClick('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:620 docs/master/dusk.md:620
msgid "The `clickAndHold` method may be used to simulate a mouse button being clicked and held down. A subsequent call to the `releaseMouse` method will undo this behavior and release the mouse button:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:624 docs/master/dusk.md:624
#, no-wrap
msgid "    $browser->clickAndHold()\n"
"            ->pause(1000)\n"
"            ->releaseMouse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:626 docs/master/dusk.md:626
#, no-wrap
msgid "<a name=\"mouseover\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:626 docs/master/dusk.md:626
#, no-wrap
msgid "Mouseover"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:629 docs/master/dusk.md:629
msgid "The `mouseover` method may be used when you need to move the mouse over an element matching the given CSS or Dusk selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:631 docs/master/dusk.md:631
#, no-wrap
msgid "    $browser->mouseover('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:633 docs/master/dusk.md:633
#, no-wrap
msgid "<a name=\"drag-drop\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:633 docs/master/dusk.md:633
#, no-wrap
msgid "Drag & Drop"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:636 docs/master/dusk.md:636
msgid "The `drag` method may be used to drag an element matching the given selector to another element:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:638 docs/master/dusk.md:638
#, no-wrap
msgid "    $browser->drag('.from-selector', '.to-selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:640 docs/master/dusk.md:640
msgid "Or, you may drag an element in a single direction:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:645 docs/master/dusk.md:645
#, no-wrap
msgid "    $browser->dragLeft('.selector', $pixels = 10);\n"
"    $browser->dragRight('.selector', $pixels = 10);\n"
"    $browser->dragUp('.selector', $pixels = 10);\n"
"    $browser->dragDown('.selector', $pixels = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:647 docs/master/dusk.md:647
msgid "Finally, you may drag an element by a given offset:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:649 docs/master/dusk.md:649
#, no-wrap
msgid "    $browser->dragOffset('.selector', $x = 10, $y = 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:651 docs/master/dusk.md:651
#, no-wrap
msgid "<a name=\"javascript-dialogs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:651 docs/master/dusk.md:651
#, no-wrap
msgid "JavaScript Dialogs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:654 docs/master/dusk.md:654
msgid "Dusk provides various methods to interact with JavaScript Dialogs. For example, you may use the `waitForDialog` method to wait for a JavaScript dialog to appear. This method accepts an optional argument indicating how many seconds to wait for the dialog to appear:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:656 docs/master/dusk.md:656
#, no-wrap
msgid "    $browser->waitForDialog($seconds = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:658 docs/master/dusk.md:658
msgid "The `assertDialogOpened` method may be used to assert that a dialog has been displayed and contains the given message:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:660 docs/master/dusk.md:660
#, no-wrap
msgid "    $browser->assertDialogOpened('Dialog message');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:662 docs/master/dusk.md:662
msgid "If the JavaScript dialog contains a prompt, you may use the `typeInDialog` method to type a value into the prompt:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:664 docs/master/dusk.md:664
#, no-wrap
msgid "    $browser->typeInDialog('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:666 docs/master/dusk.md:666
msgid "To close an open JavaScript dialog by clicking the \"OK\" button, you may invoke the `acceptDialog` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:668 docs/master/dusk.md:668
#, no-wrap
msgid "    $browser->acceptDialog();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:670 docs/master/dusk.md:670
msgid "To close an open JavaScript dialog by clicking the \"Cancel\" button, you may invoke the `dismissDialog` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:672 docs/master/dusk.md:672
#, no-wrap
msgid "    $browser->dismissDialog();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:674 docs/master/dusk.md:674
#, no-wrap
msgid "<a name=\"scoping-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:674 docs/master/dusk.md:674
#, no-wrap
msgid "Scoping Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:677 docs/master/dusk.md:677
msgid "Sometimes you may wish to perform several operations while scoping all of the operations within a given selector. For example, you may wish to assert that some text exists only within a table and then click a button within that table. You may use the `with` method to accomplish this. All operations performed within the closure given to the `with` method will be scoped to the original selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:682 docs/master/dusk.md:682
#, no-wrap
msgid "    $browser->with('.table', function ($table) {\n"
"        $table->assertSee('Hello World')\n"
"              ->clickLink('Delete');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:684 docs/master/dusk.md:684
msgid "You may occasionally need to execute assertions outside of the current scope. You may use the `elsewhere` and `elsewhereWhenAvailable` methods to accomplish this:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:687 docs/master/dusk.md:687
#, no-wrap
msgid "     $browser->with('.table', function ($table) {\n"
"        // Current scope is `body .table`...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:692 docs/master/dusk.md:692
#, no-wrap
msgid "        $browser->elsewhere('.page-title', function ($title) {\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:698 docs/master/dusk.md:698
#, no-wrap
msgid "        $browser->elsewhereWhenAvailable('.page-title', function ($title) {\n"
"            // Current scope is `body .page-title`...\n"
"            $title->assertSee('Hello World');\n"
"        });\n"
"     });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:700 docs/master/dusk.md:700
#, no-wrap
msgid "<a name=\"waiting-for-elements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:700 docs/master/dusk.md:700
#, no-wrap
msgid "Waiting For Elements"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:703 docs/master/dusk.md:703
msgid "When testing applications that use JavaScript extensively, it often becomes necessary to \"wait\" for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to be visible on the page or even wait until a given JavaScript expression evaluates to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:705 docs/master/dusk.md:705
#, no-wrap
msgid "<a name=\"waiting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:705 docs/master/dusk.md:705
#, no-wrap
msgid "Waiting"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:708 docs/master/dusk.md:708
msgid "If you just need to pause the test for a given number of milliseconds, use the `pause` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:710 docs/master/dusk.md:710
#, no-wrap
msgid "    $browser->pause(1000);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:712 docs/master/dusk.md:712
#, no-wrap
msgid "<a name=\"waiting-for-selectors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:712 docs/master/dusk.md:712
#, no-wrap
msgid "Waiting For Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:715 docs/master/dusk.md:715
msgid "The `waitFor` method may be used to pause the execution of the test until the element matching the given CSS or Dusk selector is displayed on the page. By default, this will pause the test for a maximum of five seconds before throwing an exception. If necessary, you may pass a custom timeout threshold as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:718 docs/master/dusk.md:718
#, no-wrap
msgid "    // Wait a maximum of five seconds for the selector...\n"
"    $browser->waitFor('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:721 docs/master/dusk.md:721
#, no-wrap
msgid "    // Wait a maximum of one second for the selector...\n"
"    $browser->waitFor('.selector', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:723 docs/master/dusk.md:723
msgid "You may also wait until the element matching the given selector contains the given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:726 docs/master/dusk.md:726
#, no-wrap
msgid "    // Wait a maximum of five seconds for the selector to contain the given text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:729 docs/master/dusk.md:729
#, no-wrap
msgid "    // Wait a maximum of one second for the selector to contain the given text...\n"
"    $browser->waitForTextIn('.selector', 'Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:731 docs/master/dusk.md:731
msgid "You may also wait until the element matching the given selector is missing from the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:734 docs/master/dusk.md:734
#, no-wrap
msgid "    // Wait a maximum of five seconds until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:737 docs/master/dusk.md:737
#, no-wrap
msgid "    // Wait a maximum of one second until the selector is missing...\n"
"    $browser->waitUntilMissing('.selector', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:739 docs/master/dusk.md:739
#, no-wrap
msgid "<a name=\"scoping-selectors-when-available\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:739 docs/master/dusk.md:739
#, no-wrap
msgid "Scoping Selectors When Available"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:742 docs/master/dusk.md:742
msgid "Occasionally, you may wish to wait for an element to appear that matches a given selector and then interact with the element. For example, you may wish to wait until a modal window is available and then press the \"OK\" button within the modal. The `whenAvailable` method may be used to accomplish this. All element operations performed within the given closure will be scoped to the original selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:747 docs/master/dusk.md:747
#, no-wrap
msgid "    $browser->whenAvailable('.modal', function ($modal) {\n"
"        $modal->assertSee('Hello World')\n"
"              ->press('OK');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:749 docs/master/dusk.md:749
#, no-wrap
msgid "<a name=\"waiting-for-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:749 docs/master/dusk.md:749
#, no-wrap
msgid "Waiting For Text"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:752 docs/master/dusk.md:752
msgid "The `waitForText` method may be used to wait until the given text is displayed on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:755 docs/master/dusk.md:755
#, no-wrap
msgid "    // Wait a maximum of five seconds for the text...\n"
"    $browser->waitForText('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:758 docs/master/dusk.md:758
#, no-wrap
msgid "    // Wait a maximum of one second for the text...\n"
"    $browser->waitForText('Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:760 docs/master/dusk.md:760
msgid "You may use the `waitUntilMissingText` method to wait until the displayed text has been removed from the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:763 docs/master/dusk.md:763
#, no-wrap
msgid "    // Wait a maximum of five seconds for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:766 docs/master/dusk.md:766
#, no-wrap
msgid "    // Wait a maximum of one second for the text to be removed...\n"
"    $browser->waitUntilMissingText('Hello World', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:768 docs/master/dusk.md:768
#, no-wrap
msgid "<a name=\"waiting-for-links\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:768 docs/master/dusk.md:768
#, no-wrap
msgid "Waiting For Links"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:771 docs/master/dusk.md:771
msgid "The `waitForLink` method may be used to wait until the given link text is displayed on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:774 docs/master/dusk.md:774
#, no-wrap
msgid "    // Wait a maximum of five seconds for the link...\n"
"    $browser->waitForLink('Create');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:777 docs/master/dusk.md:777
#, no-wrap
msgid "    // Wait a maximum of one second for the link...\n"
"    $browser->waitForLink('Create', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:779 docs/master/dusk.md:779
#, no-wrap
msgid "<a name=\"waiting-on-the-page-location\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:779 docs/master/dusk.md:779
#, no-wrap
msgid "Waiting On The Page Location"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:782 docs/master/dusk.md:782
#, no-wrap
msgid "When making a path assertion such as `$browser->assertPathIs('/home')`, the assertion can fail if `window.location.pathname` is being updated asynchronously. You may use the `waitForLocation` method to wait for the location to be a given value:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:784 docs/master/dusk.md:784
#, no-wrap
msgid "    $browser->waitForLocation('/secret');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:786 docs/master/dusk.md:786
msgid "You may also wait for a [named route's](/docs/{{version}}/routing#named-routes) location:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:788 docs/master/dusk.md:788
#, no-wrap
msgid "    $browser->waitForRoute($routeName, $parameters);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:790 docs/master/dusk.md:790
#, no-wrap
msgid "<a name=\"waiting-for-page-reloads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:790 docs/master/dusk.md:790
#, no-wrap
msgid "Waiting for Page Reloads"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:793 docs/master/dusk.md:793
msgid "If you need to make assertions after a page has been reloaded, use the `waitForReload` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:797 docs/master/dusk.md:797
#, no-wrap
msgid "    $browser->click('.some-action')\n"
"            ->waitForReload()\n"
"            ->assertSee('something');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:799 docs/master/dusk.md:799
#, no-wrap
msgid "<a name=\"waiting-on-javascript-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:799 docs/master/dusk.md:799
#, no-wrap
msgid "Waiting On JavaScript Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:802 docs/master/dusk.md:802
msgid "Sometimes you may wish to pause the execution of a test until a given JavaScript expression evaluates to `true`. You may easily accomplish this using the `waitUntil` method. When passing an expression to this method, you do not need to include the `return` keyword or an ending semi-colon:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:805 docs/master/dusk.md:805
#, no-wrap
msgid "    // Wait a maximum of five seconds for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:808 docs/master/dusk.md:808
#, no-wrap
msgid "    // Wait a maximum of one second for the expression to be true...\n"
"    $browser->waitUntil('App.data.servers.length > 0', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:810 docs/master/dusk.md:810
#, no-wrap
msgid "<a name=\"waiting-on-vue-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:810 docs/master/dusk.md:810
#, no-wrap
msgid "Waiting On Vue Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:813 docs/master/dusk.md:813
msgid "The `waitUntilVue` and `waitUntilVueIsNot` methods may be used to wait until a [Vue component](https://vuejs.org) attribute has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:816 docs/master/dusk.md:816
#, no-wrap
msgid "    // Wait until the component attribute contains the given value...\n"
"    $browser->waitUntilVue('user.name', 'Taylor', '@user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:819 docs/master/dusk.md:819
#, no-wrap
msgid "    // Wait until the component attribute doesn't contain the given value...\n"
"    $browser->waitUntilVueIsNot('user.name', null, '@user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:821 docs/master/dusk.md:821
#, no-wrap
msgid "<a name=\"waiting-with-a-callback\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:821 docs/master/dusk.md:821
#, no-wrap
msgid "Waiting With A Callback"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:824 docs/master/dusk.md:824
msgid "Many of the \"wait\" methods in Dusk rely on the underlying `waitUsing` method. You may use this method directly to wait for a given closure to return `true`. The `waitUsing` method accepts the maximum number of seconds to wait, the interval at which the closure should be evaluated, the closure, and an optional failure message:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:828 docs/master/dusk.md:828
#, no-wrap
msgid "    $browser->waitUsing(10, 1, function () use ($something) {\n"
"        return $something->isReady();\n"
"    }, \"Something wasn't ready in time.\");\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:830 docs/master/dusk.md:830
#, no-wrap
msgid "<a name=\"scrolling-an-element-into-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:830 docs/master/dusk.md:830
#, no-wrap
msgid "Scrolling An Element Into View"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:833 docs/master/dusk.md:833
msgid "Sometimes you may not be able to click on an element because it is outside of the viewable area of the browser. The `scrollIntoView` method will scroll the browser window until the element at the given selector is within the view:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:836 docs/master/dusk.md:836
#, no-wrap
msgid "    $browser->scrollIntoView('.selector')\n"
"            ->click('.selector');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:841 docs/master/dusk.md:841
msgid "Dusk provides a variety of assertions that you may make against your application. All of the available assertions are documented in the list below:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:847 docs/8.x/helpers.md:19 docs/8.x/validation.md:662
#: docs/master/dusk.md:847 docs/master/helpers.md:19
#: docs/master/validation.md:641
#, no-wrap
msgid "<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:852 docs/8.x/helpers.md:24 docs/8.x/http-tests.md:525
#: docs/8.x/validation.md:667 docs/master/dusk.md:852 docs/master/helpers.md:24
#: docs/master/http-tests.md:431 docs/master/validation.md:646
#, no-wrap
msgid "    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:924
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
"[assertTitle](#assert-title)\n"
"[assertTitleContains](#assert-title-contains)\n"
"[assertUrlIs](#assert-url-is)\n"
"[assertSchemeIs](#assert-scheme-is)\n"
"[assertSchemeIsNot](#assert-scheme-is-not)\n"
"[assertHostIs](#assert-host-is)\n"
"[assertHostIsNot](#assert-host-is-not)\n"
"[assertPortIs](#assert-port-is)\n"
"[assertPortIsNot](#assert-port-is-not)\n"
"[assertPathBeginsWith](#assert-path-begins-with)\n"
"[assertPathIs](#assert-path-is)\n"
"[assertPathIsNot](#assert-path-is-not)\n"
"[assertRouteIs](#assert-route-is)\n"
"[assertQueryStringHas](#assert-query-string-has)\n"
"[assertQueryStringMissing](#assert-query-string-missing)\n"
"[assertFragmentIs](#assert-fragment-is)\n"
"[assertFragmentBeginsWith](#assert-fragment-begins-with)\n"
"[assertFragmentIsNot](#assert-fragment-is-not)\n"
"[assertHasCookie](#assert-has-cookie)\n"
"[assertHasPlainCookie](#assert-has-plain-cookie)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertPlainCookieMissing](#assert-plain-cookie-missing)\n"
"[assertCookieValue](#assert-cookie-value)\n"
"[assertPlainCookieValue](#assert-plain-cookie-value)\n"
"[assertSee](#assert-see)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertSeeIn](#assert-see-in)\n"
"[assertDontSeeIn](#assert-dont-see-in)\n"
"[assertSeeAnythingIn](#assert-see-anything-in)\n"
"[assertSeeNothingIn](#assert-see-nothing-in)\n"
"[assertScript](#assert-script)\n"
"[assertSourceHas](#assert-source-has)\n"
"[assertSourceMissing](#assert-source-missing)\n"
"[assertSeeLink](#assert-see-link)\n"
"[assertDontSeeLink](#assert-dont-see-link)\n"
"[assertInputValue](#assert-input-value)\n"
"[assertInputValueIsNot](#assert-input-value-is-not)\n"
"[assertChecked](#assert-checked)\n"
"[assertNotChecked](#assert-not-checked)\n"
"[assertRadioSelected](#assert-radio-selected)\n"
"[assertRadioNotSelected](#assert-radio-not-selected)\n"
"[assertSelected](#assert-selected)\n"
"[assertNotSelected](#assert-not-selected)\n"
"[assertSelectHasOptions](#assert-select-has-options)\n"
"[assertSelectMissingOptions](#assert-select-missing-options)\n"
"[assertSelectHasOption](#assert-select-has-option)\n"
"[assertSelectMissingOption](#assert-select-missing-option)\n"
"[assertValue](#assert-value)\n"
"[assertAttribute](#assert-attribute)\n"
"[assertAriaAttribute](#assert-aria-attribute)\n"
"[assertDataAttribute](#assert-data-attribute)\n"
"[assertVisible](#assert-visible)\n"
"[assertPresent](#assert-present)\n"
"[assertNotPresent](#assert-not-present)\n"
"[assertMissing](#assert-missing)\n"
"[assertDialogOpened](#assert-dialog-opened)\n"
"[assertEnabled](#assert-enabled)\n"
"[assertDisabled](#assert-disabled)\n"
"[assertButtonEnabled](#assert-button-enabled)\n"
"[assertButtonDisabled](#assert-button-disabled)\n"
"[assertFocused](#assert-focused)\n"
"[assertNotFocused](#assert-not-focused)\n"
"[assertAuthenticated](#assert-authenticated)\n"
"[assertGuest](#assert-guest)\n"
"[assertAuthenticatedAs](#assert-authenticated-as)\n"
"[assertVue](#assert-vue)\n"
"[assertVueIsNot](#assert-vue-is-not)\n"
"[assertVueContains](#assert-vue-contains)\n"
"[assertVueDoesNotContain](#assert-vue-does-not-contain)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:926 docs/master/dusk.md:925
#, no-wrap
msgid "<a name=\"assert-title\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:926 docs/master/dusk.md:925
#, no-wrap
msgid "assertTitle"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:929 docs/master/dusk.md:928
msgid "Assert that the page title matches the given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:931 docs/master/dusk.md:930
#, no-wrap
msgid "    $browser->assertTitle($title);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:933 docs/master/dusk.md:932
#, no-wrap
msgid "<a name=\"assert-title-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:933 docs/master/dusk.md:932
#, no-wrap
msgid "assertTitleContains"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:936 docs/master/dusk.md:935
msgid "Assert that the page title contains the given text:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:938 docs/master/dusk.md:937
#, no-wrap
msgid "    $browser->assertTitleContains($title);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:940 docs/master/dusk.md:939
#, no-wrap
msgid "<a name=\"assert-url-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:940 docs/master/dusk.md:939
#, no-wrap
msgid "assertUrlIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:943 docs/master/dusk.md:942
msgid "Assert that the current URL (without the query string) matches the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:945 docs/master/dusk.md:944
#, no-wrap
msgid "    $browser->assertUrlIs($url);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:947 docs/master/dusk.md:946
#, no-wrap
msgid "<a name=\"assert-scheme-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:947 docs/master/dusk.md:946
#, no-wrap
msgid "assertSchemeIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:950 docs/master/dusk.md:949
msgid "Assert that the current URL scheme matches the given scheme:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:952 docs/master/dusk.md:951
#, no-wrap
msgid "    $browser->assertSchemeIs($scheme);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:954 docs/master/dusk.md:953
#, no-wrap
msgid "<a name=\"assert-scheme-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:954 docs/master/dusk.md:953
#, no-wrap
msgid "assertSchemeIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:957 docs/master/dusk.md:956
msgid "Assert that the current URL scheme does not match the given scheme:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:959 docs/master/dusk.md:958
#, no-wrap
msgid "    $browser->assertSchemeIsNot($scheme);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:961 docs/master/dusk.md:960
#, no-wrap
msgid "<a name=\"assert-host-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:961 docs/master/dusk.md:960
#, no-wrap
msgid "assertHostIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:964 docs/master/dusk.md:963
msgid "Assert that the current URL host matches the given host:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:966 docs/master/dusk.md:965
#, no-wrap
msgid "    $browser->assertHostIs($host);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:968 docs/master/dusk.md:967
#, no-wrap
msgid "<a name=\"assert-host-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:968 docs/master/dusk.md:967
#, no-wrap
msgid "assertHostIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:971 docs/master/dusk.md:970
msgid "Assert that the current URL host does not match the given host:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:973 docs/master/dusk.md:972
#, no-wrap
msgid "    $browser->assertHostIsNot($host);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:975 docs/master/dusk.md:974
#, no-wrap
msgid "<a name=\"assert-port-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:975 docs/master/dusk.md:974
#, no-wrap
msgid "assertPortIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:978 docs/master/dusk.md:977
msgid "Assert that the current URL port matches the given port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:980 docs/master/dusk.md:979
#, no-wrap
msgid "    $browser->assertPortIs($port);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:982 docs/master/dusk.md:981
#, no-wrap
msgid "<a name=\"assert-port-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:982 docs/master/dusk.md:981
#, no-wrap
msgid "assertPortIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:985 docs/master/dusk.md:984
msgid "Assert that the current URL port does not match the given port:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:987 docs/master/dusk.md:986
#, no-wrap
msgid "    $browser->assertPortIsNot($port);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:989 docs/master/dusk.md:988
#, no-wrap
msgid "<a name=\"assert-path-begins-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:989 docs/master/dusk.md:988
#, no-wrap
msgid "assertPathBeginsWith"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:992 docs/master/dusk.md:991
msgid "Assert that the current URL path begins with the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:994 docs/master/dusk.md:993
#, no-wrap
msgid "    $browser->assertPathBeginsWith('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:996 docs/master/dusk.md:995
#, no-wrap
msgid "<a name=\"assert-path-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:996 docs/master/dusk.md:995
#, no-wrap
msgid "assertPathIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:999 docs/master/dusk.md:998
msgid "Assert that the current path matches the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1001 docs/master/dusk.md:1000
#, no-wrap
msgid "    $browser->assertPathIs('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1003 docs/master/dusk.md:1002
#, no-wrap
msgid "<a name=\"assert-path-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1003 docs/master/dusk.md:1002
#, no-wrap
msgid "assertPathIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1006 docs/master/dusk.md:1005
msgid "Assert that the current path does not match the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1008 docs/master/dusk.md:1007
#, no-wrap
msgid "    $browser->assertPathIsNot('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1010 docs/master/dusk.md:1009
#, no-wrap
msgid "<a name=\"assert-route-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1010 docs/master/dusk.md:1009
#, no-wrap
msgid "assertRouteIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1013 docs/master/dusk.md:1012
msgid "Assert that the current URL matches the given [named route's](/docs/{{version}}/routing#named-routes) URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1015 docs/master/dusk.md:1014
#, no-wrap
msgid "    $browser->assertRouteIs($name, $parameters);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1017 docs/master/dusk.md:1016
#, no-wrap
msgid "<a name=\"assert-query-string-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1017 docs/master/dusk.md:1016
#, no-wrap
msgid "assertQueryStringHas"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1020 docs/master/dusk.md:1019
msgid "Assert that the given query string parameter is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1022 docs/master/dusk.md:1021
#, no-wrap
msgid "    $browser->assertQueryStringHas($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1024 docs/master/dusk.md:1023
msgid "Assert that the given query string parameter is present and has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1026 docs/master/dusk.md:1025
#, no-wrap
msgid "    $browser->assertQueryStringHas($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1028 docs/master/dusk.md:1027
#, no-wrap
msgid "<a name=\"assert-query-string-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1028 docs/master/dusk.md:1027
#, no-wrap
msgid "assertQueryStringMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1031 docs/master/dusk.md:1030
msgid "Assert that the given query string parameter is missing:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1033 docs/master/dusk.md:1032
#, no-wrap
msgid "    $browser->assertQueryStringMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1035 docs/master/dusk.md:1034
#, no-wrap
msgid "<a name=\"assert-fragment-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1035 docs/master/dusk.md:1034
#, no-wrap
msgid "assertFragmentIs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1038 docs/master/dusk.md:1037
msgid "Assert that the URL's current hash fragment matches the given fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1040 docs/master/dusk.md:1039
#, no-wrap
msgid "    $browser->assertFragmentIs('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1042 docs/master/dusk.md:1041
#, no-wrap
msgid "<a name=\"assert-fragment-begins-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1042 docs/master/dusk.md:1041
#, no-wrap
msgid "assertFragmentBeginsWith"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1045 docs/master/dusk.md:1044
msgid "Assert that the URL's current hash fragment begins with the given fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1047 docs/master/dusk.md:1046
#, no-wrap
msgid "    $browser->assertFragmentBeginsWith('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1049 docs/master/dusk.md:1048
#, no-wrap
msgid "<a name=\"assert-fragment-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1049 docs/master/dusk.md:1048
#, no-wrap
msgid "assertFragmentIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1052 docs/master/dusk.md:1051
msgid "Assert that the URL's current hash fragment does not match the given fragment:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1054 docs/master/dusk.md:1053
#, no-wrap
msgid "    $browser->assertFragmentIsNot('anchor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1056 docs/master/dusk.md:1055
#, no-wrap
msgid "<a name=\"assert-has-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1056 docs/master/dusk.md:1055
#, no-wrap
msgid "assertHasCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1059 docs/master/dusk.md:1058
msgid "Assert that the given encrypted cookie is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1061 docs/master/dusk.md:1060
#, no-wrap
msgid "    $browser->assertHasCookie($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1063 docs/master/dusk.md:1062
#, no-wrap
msgid "<a name=\"assert-has-plain-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1063 docs/master/dusk.md:1062
#, no-wrap
msgid "assertHasPlainCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1066 docs/master/dusk.md:1065
msgid "Assert that the given unencrypted cookie is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1068 docs/master/dusk.md:1067
#, no-wrap
msgid "    $browser->assertHasPlainCookie($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1070 docs/8.x/http-tests.md:598 docs/master/dusk.md:1069
#: docs/master/http-tests.md:504
#, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1070 docs/8.x/http-tests.md:598 docs/master/dusk.md:1069
#: docs/master/http-tests.md:504
#, no-wrap
msgid "assertCookieMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1073 docs/master/dusk.md:1072
msgid "Assert that the given encrypted cookie is not present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1075 docs/master/dusk.md:1074
#, no-wrap
msgid "    $browser->assertCookieMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1077 docs/master/dusk.md:1076
#, no-wrap
msgid "<a name=\"assert-plain-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1077 docs/master/dusk.md:1076
#, no-wrap
msgid "assertPlainCookieMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1080 docs/master/dusk.md:1079
msgid "Assert that the given unencrypted cookie is not present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1082 docs/master/dusk.md:1081
#, no-wrap
msgid "    $browser->assertPlainCookieMissing($name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1084 docs/master/dusk.md:1083
#, no-wrap
msgid "<a name=\"assert-cookie-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1084 docs/master/dusk.md:1083
#, no-wrap
msgid "assertCookieValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1087 docs/master/dusk.md:1086
msgid "Assert that an encrypted cookie has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1089 docs/master/dusk.md:1088
#, no-wrap
msgid "    $browser->assertCookieValue($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1091 docs/master/dusk.md:1090
#, no-wrap
msgid "<a name=\"assert-plain-cookie-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1091 docs/master/dusk.md:1090
#, no-wrap
msgid "assertPlainCookieValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1094 docs/master/dusk.md:1093
msgid "Assert that an unencrypted cookie has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1096 docs/master/dusk.md:1095
#, no-wrap
msgid "    $browser->assertPlainCookieValue($name, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1098 docs/8.x/http-tests.md:803 docs/master/dusk.md:1097
#: docs/master/http-tests.md:709
#, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1098 docs/8.x/http-tests.md:803 docs/master/dusk.md:1097
#: docs/master/http-tests.md:709
#, no-wrap
msgid "assertSee"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1101 docs/master/dusk.md:1100
msgid "Assert that the given text is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1103 docs/master/dusk.md:1102
#, no-wrap
msgid "    $browser->assertSee($text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1105 docs/8.x/http-tests.md:612 docs/master/dusk.md:1104
#: docs/master/http-tests.md:518
#, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1105 docs/8.x/http-tests.md:612 docs/master/dusk.md:1104
#: docs/master/http-tests.md:518
#, no-wrap
msgid "assertDontSee"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1108 docs/master/dusk.md:1107
msgid "Assert that the given text is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1110 docs/master/dusk.md:1109
#, no-wrap
msgid "    $browser->assertDontSee($text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1112 docs/master/dusk.md:1111
#, no-wrap
msgid "<a name=\"assert-see-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1112 docs/master/dusk.md:1111
#, no-wrap
msgid "assertSeeIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1115 docs/master/dusk.md:1114
msgid "Assert that the given text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1117 docs/master/dusk.md:1116
#, no-wrap
msgid "    $browser->assertSeeIn($selector, $text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1119 docs/master/dusk.md:1118
#, no-wrap
msgid "<a name=\"assert-dont-see-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1119 docs/master/dusk.md:1118
#, no-wrap
msgid "assertDontSeeIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1122 docs/master/dusk.md:1121
msgid "Assert that the given text is not present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1124 docs/master/dusk.md:1123
#, no-wrap
msgid "    $browser->assertDontSeeIn($selector, $text);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1126 docs/master/dusk.md:1125
#, no-wrap
msgid "<a name=\"assert-see-anything-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1126 docs/master/dusk.md:1125
#, no-wrap
msgid "assertSeeAnythingIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1129 docs/master/dusk.md:1128
msgid "Assert that any text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1131 docs/master/dusk.md:1130
#, no-wrap
msgid "    $browser->assertSeeAnythingIn($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1133 docs/master/dusk.md:1132
#, no-wrap
msgid "<a name=\"assert-see-nothing-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1133 docs/master/dusk.md:1132
#, no-wrap
msgid "assertSeeNothingIn"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1136 docs/master/dusk.md:1135
msgid "Assert that no text is present within the selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1138 docs/master/dusk.md:1137
#, no-wrap
msgid "    $browser->assertSeeNothingIn($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1140 docs/master/dusk.md:1139
#, no-wrap
msgid "<a name=\"assert-script\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1140 docs/master/dusk.md:1139
#, no-wrap
msgid "assertScript"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1143 docs/master/dusk.md:1142
msgid "Assert that the given JavaScript expression evaluates to the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1146 docs/master/dusk.md:1145
#, no-wrap
msgid "    $browser->assertScript('window.isLoaded')\n"
"            ->assertScript('document.readyState', 'complete');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1148 docs/master/dusk.md:1147
#, no-wrap
msgid "<a name=\"assert-source-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1148 docs/master/dusk.md:1147
#, no-wrap
msgid "assertSourceHas"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1151 docs/master/dusk.md:1150
msgid "Assert that the given source code is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1153 docs/master/dusk.md:1152
#, no-wrap
msgid "    $browser->assertSourceHas($code);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1155 docs/master/dusk.md:1154
#, no-wrap
msgid "<a name=\"assert-source-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1155 docs/master/dusk.md:1154
#, no-wrap
msgid "assertSourceMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1158 docs/master/dusk.md:1157
msgid "Assert that the given source code is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1160 docs/master/dusk.md:1159
#, no-wrap
msgid "    $browser->assertSourceMissing($code);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1162 docs/master/dusk.md:1161
#, no-wrap
msgid "<a name=\"assert-see-link\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1162 docs/master/dusk.md:1161
#, no-wrap
msgid "assertSeeLink"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1165 docs/master/dusk.md:1164
msgid "Assert that the given link is present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1167 docs/master/dusk.md:1166
#, no-wrap
msgid "    $browser->assertSeeLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1169 docs/master/dusk.md:1168
#, no-wrap
msgid "<a name=\"assert-dont-see-link\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1169 docs/master/dusk.md:1168
#, no-wrap
msgid "assertDontSeeLink"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1172 docs/master/dusk.md:1171
msgid "Assert that the given link is not present on the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1174 docs/master/dusk.md:1173
#, no-wrap
msgid "    $browser->assertDontSeeLink($linkText);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1176 docs/master/dusk.md:1175
#, no-wrap
msgid "<a name=\"assert-input-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1176 docs/master/dusk.md:1175
#, no-wrap
msgid "assertInputValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1179 docs/master/dusk.md:1178
msgid "Assert that the given input field has the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1181 docs/master/dusk.md:1180
#, no-wrap
msgid "    $browser->assertInputValue($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1183 docs/master/dusk.md:1182
#, no-wrap
msgid "<a name=\"assert-input-value-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1183 docs/master/dusk.md:1182
#, no-wrap
msgid "assertInputValueIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1186 docs/master/dusk.md:1185
msgid "Assert that the given input field does not have the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1188 docs/master/dusk.md:1187
#, no-wrap
msgid "    $browser->assertInputValueIsNot($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1190 docs/master/dusk.md:1189
#, no-wrap
msgid "<a name=\"assert-checked\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1190 docs/master/dusk.md:1189
#, no-wrap
msgid "assertChecked"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1193 docs/master/dusk.md:1192
msgid "Assert that the given checkbox is checked:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1195 docs/master/dusk.md:1194
#, no-wrap
msgid "    $browser->assertChecked($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1197 docs/master/dusk.md:1196
#, no-wrap
msgid "<a name=\"assert-not-checked\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1197 docs/master/dusk.md:1196
#, no-wrap
msgid "assertNotChecked"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1200 docs/master/dusk.md:1199
msgid "Assert that the given checkbox is not checked:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1202 docs/master/dusk.md:1201
#, no-wrap
msgid "    $browser->assertNotChecked($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1204 docs/master/dusk.md:1203
#, no-wrap
msgid "<a name=\"assert-radio-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1204 docs/master/dusk.md:1203
#, no-wrap
msgid "assertRadioSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1207 docs/master/dusk.md:1206
msgid "Assert that the given radio field is selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1209 docs/master/dusk.md:1208
#, no-wrap
msgid "    $browser->assertRadioSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1211 docs/master/dusk.md:1210
#, no-wrap
msgid "<a name=\"assert-radio-not-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1211 docs/master/dusk.md:1210
#, no-wrap
msgid "assertRadioNotSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1214 docs/master/dusk.md:1213
msgid "Assert that the given radio field is not selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1216 docs/master/dusk.md:1215
#, no-wrap
msgid "    $browser->assertRadioNotSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1218 docs/master/dusk.md:1217
#, no-wrap
msgid "<a name=\"assert-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1218 docs/master/dusk.md:1217
#, no-wrap
msgid "assertSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1221 docs/master/dusk.md:1220
msgid "Assert that the given dropdown has the given value selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1223 docs/master/dusk.md:1222
#, no-wrap
msgid "    $browser->assertSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1225 docs/master/dusk.md:1224
#, no-wrap
msgid "<a name=\"assert-not-selected\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1225 docs/master/dusk.md:1224
#, no-wrap
msgid "assertNotSelected"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1228 docs/master/dusk.md:1227
msgid "Assert that the given dropdown does not have the given value selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1230 docs/master/dusk.md:1229
#, no-wrap
msgid "    $browser->assertNotSelected($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1232 docs/master/dusk.md:1231
#, no-wrap
msgid "<a name=\"assert-select-has-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1232 docs/master/dusk.md:1231
#, no-wrap
msgid "assertSelectHasOptions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1235 docs/master/dusk.md:1234
msgid "Assert that the given array of values are available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1237 docs/master/dusk.md:1236
#, no-wrap
msgid "    $browser->assertSelectHasOptions($field, $values);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1239 docs/master/dusk.md:1238
#, no-wrap
msgid "<a name=\"assert-select-missing-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1239 docs/master/dusk.md:1238
#, no-wrap
msgid "assertSelectMissingOptions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1242 docs/master/dusk.md:1241
msgid "Assert that the given array of values are not available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1244 docs/master/dusk.md:1243
#, no-wrap
msgid "    $browser->assertSelectMissingOptions($field, $values);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1246 docs/master/dusk.md:1245
#, no-wrap
msgid "<a name=\"assert-select-has-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1246 docs/master/dusk.md:1245
#, no-wrap
msgid "assertSelectHasOption"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1249 docs/master/dusk.md:1248
msgid "Assert that the given value is available to be selected on the given field:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1251 docs/master/dusk.md:1250
#, no-wrap
msgid "    $browser->assertSelectHasOption($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1253 docs/master/dusk.md:1252
#, no-wrap
msgid "<a name=\"assert-select-missing-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1253 docs/master/dusk.md:1252
#, no-wrap
msgid "assertSelectMissingOption"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1256 docs/master/dusk.md:1255
msgid "Assert that the given value is not available to be selected:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1258 docs/master/dusk.md:1257
#, no-wrap
msgid "    $browser->assertSelectMissingOption($field, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1260 docs/master/dusk.md:1259
#, no-wrap
msgid "<a name=\"assert-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1260 docs/master/dusk.md:1259
#, no-wrap
msgid "assertValue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1263 docs/master/dusk.md:1262
msgid "Assert that the element matching the given selector has the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1265 docs/master/dusk.md:1264
#, no-wrap
msgid "    $browser->assertValue($selector, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1267 docs/master/dusk.md:1266
#, no-wrap
msgid "<a name=\"assert-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1267 docs/master/dusk.md:1266
#, no-wrap
msgid "assertAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1270 docs/master/dusk.md:1269
msgid "Assert that the element matching the given selector has the given value in the provided attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1272 docs/master/dusk.md:1271
#, no-wrap
msgid "    $browser->assertAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1274 docs/master/dusk.md:1273
#, no-wrap
msgid "<a name=\"assert-aria-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1274 docs/master/dusk.md:1273
#, no-wrap
msgid "assertAriaAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1277 docs/master/dusk.md:1276
msgid "Assert that the element matching the given selector has the given value in the provided aria attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1279 docs/master/dusk.md:1278
#, no-wrap
msgid "    $browser->assertAriaAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1281 docs/master/dusk.md:1280
#, no-wrap
msgid "For example, given the markup `<button aria-label=\"Add\"></button>`, you may assert against the `aria-label` attribute like so:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1283 docs/master/dusk.md:1282
#, no-wrap
msgid "    $browser->assertAriaAttribute('button', 'label', 'Add')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1285 docs/master/dusk.md:1284
#, no-wrap
msgid "<a name=\"assert-data-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1285 docs/master/dusk.md:1284
#, no-wrap
msgid "assertDataAttribute"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1288 docs/master/dusk.md:1287
msgid "Assert that the element matching the given selector has the given value in the provided data attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1290 docs/master/dusk.md:1289
#, no-wrap
msgid "    $browser->assertDataAttribute($selector, $attribute, $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1292 docs/master/dusk.md:1291
#, no-wrap
msgid "For example, given the markup `<tr id=\"row-1\" data-content=\"attendees\"></tr>`, you may assert against the `data-label` attribute like so:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1294 docs/master/dusk.md:1293
#, no-wrap
msgid "    $browser->assertDataAttribute('#row-1', 'content', 'attendees')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1296 docs/master/dusk.md:1295
#, no-wrap
msgid "<a name=\"assert-visible\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1296 docs/master/dusk.md:1295
#, no-wrap
msgid "assertVisible"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1299 docs/master/dusk.md:1298
msgid "Assert that the element matching the given selector is visible:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1301 docs/master/dusk.md:1300
#, no-wrap
msgid "    $browser->assertVisible($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1303 docs/master/dusk.md:1302
#, no-wrap
msgid "<a name=\"assert-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1303 docs/master/dusk.md:1302
#, no-wrap
msgid "assertPresent"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1306 docs/master/dusk.md:1305
msgid "Assert that the element matching the given selector is present:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1308 docs/master/dusk.md:1307
#, no-wrap
msgid "    $browser->assertPresent($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1310
#, no-wrap
msgid "<a name=\"assert-not-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1310
#, no-wrap
msgid "assertNotPresent"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1313
msgid "Assert that the element matching the given selector is not present in the source:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1315
#, no-wrap
msgid "    $browser->assertNotPresent($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1317 docs/master/dusk.md:1309
#, no-wrap
msgid "<a name=\"assert-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1317 docs/master/dusk.md:1309
#, no-wrap
msgid "assertMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1320 docs/master/dusk.md:1312
msgid "Assert that the element matching the given selector is not visible:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1322 docs/master/dusk.md:1314
#, no-wrap
msgid "    $browser->assertMissing($selector);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1324 docs/master/dusk.md:1316
#, no-wrap
msgid "<a name=\"assert-dialog-opened\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1324 docs/master/dusk.md:1316
#, no-wrap
msgid "assertDialogOpened"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1327 docs/master/dusk.md:1319
msgid "Assert that a JavaScript dialog with the given message has been opened:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1329 docs/master/dusk.md:1321
#, no-wrap
msgid "    $browser->assertDialogOpened($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1331 docs/master/dusk.md:1323
#, no-wrap
msgid "<a name=\"assert-enabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1331 docs/master/dusk.md:1323
#, no-wrap
msgid "assertEnabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1334 docs/master/dusk.md:1326
msgid "Assert that the given field is enabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1336 docs/master/dusk.md:1328
#, no-wrap
msgid "    $browser->assertEnabled($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1338 docs/master/dusk.md:1330
#, no-wrap
msgid "<a name=\"assert-disabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1338 docs/master/dusk.md:1330
#, no-wrap
msgid "assertDisabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1341 docs/master/dusk.md:1333
msgid "Assert that the given field is disabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1343 docs/master/dusk.md:1335
#, no-wrap
msgid "    $browser->assertDisabled($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1345 docs/master/dusk.md:1337
#, no-wrap
msgid "<a name=\"assert-button-enabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1345 docs/master/dusk.md:1337
#, no-wrap
msgid "assertButtonEnabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1348 docs/master/dusk.md:1340
msgid "Assert that the given button is enabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1350 docs/master/dusk.md:1342
#, no-wrap
msgid "    $browser->assertButtonEnabled($button);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1352 docs/master/dusk.md:1344
#, no-wrap
msgid "<a name=\"assert-button-disabled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1352 docs/master/dusk.md:1344
#, no-wrap
msgid "assertButtonDisabled"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1355 docs/master/dusk.md:1347
msgid "Assert that the given button is disabled:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1357 docs/master/dusk.md:1349
#, no-wrap
msgid "    $browser->assertButtonDisabled($button);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1359 docs/master/dusk.md:1351
#, no-wrap
msgid "<a name=\"assert-focused\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1359 docs/master/dusk.md:1351
#, no-wrap
msgid "assertFocused"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1362 docs/master/dusk.md:1354
msgid "Assert that the given field is focused:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1364 docs/master/dusk.md:1356
#, no-wrap
msgid "    $browser->assertFocused($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1366 docs/master/dusk.md:1358
#, no-wrap
msgid "<a name=\"assert-not-focused\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1366 docs/master/dusk.md:1358
#, no-wrap
msgid "assertNotFocused"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1369 docs/master/dusk.md:1361
msgid "Assert that the given field is not focused:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1371 docs/master/dusk.md:1363
#, no-wrap
msgid "    $browser->assertNotFocused($field);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1373 docs/8.x/http-tests.md:978 docs/master/dusk.md:1365
#: docs/master/http-tests.md:884
#, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1373 docs/8.x/http-tests.md:978 docs/master/dusk.md:1365
#: docs/master/http-tests.md:884
#, no-wrap
msgid "assertAuthenticated"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1376 docs/master/dusk.md:1368
msgid "Assert that the user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1378 docs/master/dusk.md:1370
#, no-wrap
msgid "    $browser->assertAuthenticated();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1380 docs/8.x/http-tests.md:985 docs/master/dusk.md:1372
#: docs/master/http-tests.md:891
#, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1380 docs/8.x/http-tests.md:985 docs/master/dusk.md:1372
#: docs/master/http-tests.md:891
#, no-wrap
msgid "assertGuest"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1383 docs/master/dusk.md:1375
msgid "Assert that the user is not authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1385 docs/master/dusk.md:1377
#, no-wrap
msgid "    $browser->assertGuest();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1387 docs/8.x/http-tests.md:992 docs/master/dusk.md:1379
#: docs/master/http-tests.md:898
#, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1387 docs/8.x/http-tests.md:992 docs/master/dusk.md:1379
#: docs/master/http-tests.md:898
#, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1390 docs/master/dusk.md:1382
msgid "Assert that the user is authenticated as the given user:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1392 docs/master/dusk.md:1384
#, no-wrap
msgid "    $browser->assertAuthenticatedAs($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1394 docs/master/dusk.md:1386
#, no-wrap
msgid "<a name=\"assert-vue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1394 docs/master/dusk.md:1386
#, no-wrap
msgid "assertVue"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1397 docs/master/dusk.md:1389
msgid "Dusk even allows you to make assertions on the state of [Vue component](https://vuejs.org) data. For example, imagine your application contains the following Vue component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1401 docs/master/dusk.md:1393
#, no-wrap
msgid "    <profile dusk=\"profile-component\"></profile>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1403 docs/master/dusk.md:1395
#, no-wrap
msgid "    // Component Definition...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1406 docs/master/dusk.md:1398
#, no-wrap
msgid "    Vue.component('profile', {\n"
"        template: '<div>{{ user.name }}</div>',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1415 docs/master/dusk.md:1407
#, no-wrap
msgid "        data: function () {\n"
"            return {\n"
"                user: {\n"
"                    name: 'Taylor'\n"
"                }\n"
"            };\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1417 docs/master/dusk.md:1409
msgid "You may assert on the state of the Vue component like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1430 docs/master/dusk.md:1422
#, no-wrap
msgid "    /**\n"
"     * A basic Vue test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testVue()\n"
"    {\n"
"        $this->browse(function (Browser $browser) {\n"
"            $browser->visit('/')\n"
"                    ->assertVue('user.name', 'Taylor', '@profile-component');\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1432 docs/master/dusk.md:1424
#, no-wrap
msgid "<a name=\"assert-vue-is-not\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1432 docs/master/dusk.md:1424
#, no-wrap
msgid "assertVueIsNot"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1435 docs/master/dusk.md:1427
msgid "Assert that a given Vue component data property does not match the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1437 docs/master/dusk.md:1429
#, no-wrap
msgid "    $browser->assertVueIsNot($property, $value, $componentSelector = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1439 docs/master/dusk.md:1431
#, no-wrap
msgid "<a name=\"assert-vue-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1439 docs/master/dusk.md:1431
#, no-wrap
msgid "assertVueContains"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1442 docs/master/dusk.md:1434
msgid "Assert that a given Vue component data property is an array and contains the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1444 docs/master/dusk.md:1436
#, no-wrap
msgid "    $browser->assertVueContains($property, $value, $componentSelector = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1446 docs/master/dusk.md:1438
#, no-wrap
msgid "<a name=\"assert-vue-does-not-contain\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1446 docs/master/dusk.md:1438
#, no-wrap
msgid "assertVueDoesNotContain"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1449 docs/master/dusk.md:1441
msgid "Assert that a given Vue component data property is an array and does not contain the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1451 docs/master/dusk.md:1443
#, no-wrap
msgid "    $browser->assertVueDoesNotContain($property, $value, $componentSelector = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1453 docs/master/dusk.md:1445
#, no-wrap
msgid "<a name=\"pages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:1453 docs/master/dusk.md:1445
#, no-wrap
msgid "Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1456 docs/master/dusk.md:1448
msgid "Sometimes, tests require several complicated actions to be performed in sequence. This can make your tests harder to read and understand. Dusk Pages allow you to define expressive actions that may then be performed on a given page via a single method. Pages also allow you to define short-cuts to common selectors for your application or for a single page."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1458 docs/master/dusk.md:1450
#, no-wrap
msgid "<a name=\"generating-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1458 docs/master/dusk.md:1450
#, no-wrap
msgid "Generating Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1461 docs/master/dusk.md:1453
msgid "To generate a page object, execute the `dusk:page` Artisan command. All page objects will be placed in your application's `tests/Browser/Pages` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1463 docs/master/dusk.md:1455
#, no-wrap
msgid "    php artisan dusk:page Login\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1465 docs/master/dusk.md:1457
#, no-wrap
msgid "<a name=\"configuring-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1465 docs/master/dusk.md:1457
#, no-wrap
msgid "Configuring Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1468 docs/master/dusk.md:1460
msgid "By default, pages have three methods: `url`, `assert`, and `elements`. We will discuss the `url` and `assert` methods now. The `elements` method will be [discussed in more detail below](#shorthand-selectors)."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1470 docs/master/dusk.md:1462
#, no-wrap
msgid "<a name=\"the-url-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1470 docs/master/dusk.md:1462
#, no-wrap
msgid "The `url` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1473 docs/master/dusk.md:1465
msgid "The `url` method should return the path of the URL that represents the page. Dusk will use this URL when navigating to the page in the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1483 docs/master/dusk.md:1475
#, no-wrap
msgid "    /**\n"
"     * Get the URL for the page.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function url()\n"
"    {\n"
"        return '/login';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1485 docs/master/dusk.md:1477
#, no-wrap
msgid "<a name=\"the-assert-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1485 docs/master/dusk.md:1477
#, no-wrap
msgid "The `assert` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1488 docs/master/dusk.md:1480
msgid "The `assert` method may make any assertions necessary to verify that the browser is actually on the given page. It is not actually necessary to place anything within this method; however, you are free to make these assertions if you wish. These assertions will be run automatically when navigating to the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1498 docs/master/dusk.md:1490
#, no-wrap
msgid "    /**\n"
"     * Assert that the browser is on the page.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function assert(Browser $browser)\n"
"    {\n"
"        $browser->assertPathIs($this->url());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1500 docs/master/dusk.md:1492
#, no-wrap
msgid "<a name=\"navigating-to-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1500 docs/master/dusk.md:1492
#, no-wrap
msgid "Navigating To Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1503 docs/master/dusk.md:1495
msgid "Once a page has been defined, you may navigate to it using the `visit` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1505 docs/master/dusk.md:1497
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\Login;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1507 docs/master/dusk.md:1499
#, no-wrap
msgid "    $browser->visit(new Login);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1509 docs/master/dusk.md:1501
msgid "Sometimes you may already be on a given page and need to \"load\" the page's selectors and methods into the current test context. This is common when pressing a button and being redirected to a given page without explicitly navigating to it. In this situation, you may use the `on` method to load the page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1511 docs/master/dusk.md:1503
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\CreatePlaylist;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1516 docs/master/dusk.md:1508
#, no-wrap
msgid "    $browser->visit('/dashboard')\n"
"            ->clickLink('Create Playlist')\n"
"            ->on(new CreatePlaylist)\n"
"            ->assertSee('@create');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1518 docs/master/dusk.md:1510
#, no-wrap
msgid "<a name=\"shorthand-selectors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1518 docs/master/dusk.md:1510
#, no-wrap
msgid "Shorthand Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1521 docs/master/dusk.md:1513
msgid "The `elements` method within page classes allows you to define quick, easy-to-remember shortcuts for any CSS selector on your page. For example, let's define a shortcut for the \"email\" input field of the application's login page:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1533 docs/master/dusk.md:1525
#, no-wrap
msgid "    /**\n"
"     * Get the element shortcuts for the page.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function elements()\n"
"    {\n"
"        return [\n"
"            '@email' => 'input[name=email]',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1535 docs/master/dusk.md:1527
msgid "Once the shortcut has been defined, you may use the shorthand selector anywhere you would typically use a full CSS selector:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1537 docs/master/dusk.md:1529
#, no-wrap
msgid "    $browser->type('@email', 'taylor@laravel.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1539 docs/master/dusk.md:1531
#, no-wrap
msgid "<a name=\"global-shorthand-selectors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/dusk.md:1539 docs/master/dusk.md:1531
#, no-wrap
msgid "Global Shorthand Selectors"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1542 docs/master/dusk.md:1534
msgid "After installing Dusk, a base `Page` class will be placed in your `tests/Browser/Pages` directory. This class contains a `siteElements` method which may be used to define global shorthand selectors that should be available on every page throughout your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1554 docs/master/dusk.md:1546
#, no-wrap
msgid "    /**\n"
"     * Get the global element shortcuts for the site.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public static function siteElements()\n"
"    {\n"
"        return [\n"
"            '@element' => '#selector',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1556 docs/master/dusk.md:1548
#, no-wrap
msgid "<a name=\"page-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1556 docs/master/dusk.md:1548
#, no-wrap
msgid "Page Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1559 docs/master/dusk.md:1551
msgid "In addition to the default methods defined on pages, you may define additional methods which may be used throughout your tests. For example, let's imagine we are building a music management application. A common action for one page of the application might be to create a playlist. Instead of re-writing the logic to create a playlist in each test, you may define a `createPlaylist` method on a page class:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1563 docs/master/dusk.md:1555
#, no-wrap
msgid "    namespace Tests\\Browser\\Pages;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1565 docs/master/dusk.md:1557
#, no-wrap
msgid "    use Laravel\\Dusk\\Browser;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1569 docs/master/dusk.md:1561
#, no-wrap
msgid "    class Dashboard extends Page\n"
"    {\n"
"        // Other page methods...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1584 docs/master/dusk.md:1576
#, no-wrap
msgid "        /**\n"
"         * Create a new playlist.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  string  $name\n"
"         * @return void\n"
"         */\n"
"        public function createPlaylist(Browser $browser, $name)\n"
"        {\n"
"            $browser->type('name', $name)\n"
"                    ->check('share')\n"
"                    ->press('Create Playlist');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1586 docs/master/dusk.md:1578
msgid "Once the method has been defined, you may use it within any test that utilizes the page. The browser instance will automatically be passed as the first argument to custom page methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1588 docs/master/dusk.md:1580
#, no-wrap
msgid "    use Tests\\Browser\\Pages\\Dashboard;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1592 docs/master/dusk.md:1584
#, no-wrap
msgid "    $browser->visit(new Dashboard)\n"
"            ->createPlaylist('My Playlist')\n"
"            ->assertSee('My Playlist');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1597 docs/master/dusk.md:1589
msgid "Components are similar to Duskâs âpage objectsâ, but are intended for pieces of UI and functionality that are re-used throughout your application, such as a navigation bar or notification window. As such, components are not bound to specific URLs."
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1599 docs/master/dusk.md:1591
#, no-wrap
msgid "<a name=\"generating-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1599 docs/master/dusk.md:1591
#, no-wrap
msgid "Generating Components"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1602 docs/master/dusk.md:1594
msgid "To generate a component, execute the `dusk:component` Artisan command. New components are placed in the `tests/Browser/Components` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1604 docs/master/dusk.md:1596
#, no-wrap
msgid "    php artisan dusk:component DatePicker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1606 docs/master/dusk.md:1598
msgid "As shown above, a \"date picker\" is an example of a component that might exist throughout your application on a variety of pages. It can become cumbersome to manually write the browser automation logic to select a date in dozens of tests throughout your test suite. Instead, we can define a Dusk component to represent the date picker, allowing us to encapsulate that logic within the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1610 docs/master/dusk.md:1602
#, no-wrap
msgid "    namespace Tests\\Browser\\Components;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1613 docs/master/dusk.md:1605
#, no-wrap
msgid "    use Laravel\\Dusk\\Browser;\n"
"    use Laravel\\Dusk\\Component as BaseComponent;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1625 docs/master/dusk.md:1617
#, no-wrap
msgid "    class DatePicker extends BaseComponent\n"
"    {\n"
"        /**\n"
"         * Get the root selector for the component.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function selector()\n"
"        {\n"
"            return '.date-picker';\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1636 docs/master/dusk.md:1628
#, no-wrap
msgid "        /**\n"
"         * Assert that the browser page contains the component.\n"
"         *\n"
"         * @param  Browser  $browser\n"
"         * @return void\n"
"         */\n"
"        public function assert(Browser $browser)\n"
"        {\n"
"            $browser->assertVisible($this->selector());\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1651 docs/master/dusk.md:1643
#, no-wrap
msgid "        /**\n"
"         * Get the element shortcuts for the component.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function elements()\n"
"        {\n"
"            return [\n"
"                '@date-field' => 'input.datepicker-input',\n"
"                '@year-list' => 'div > div.datepicker-years',\n"
"                '@month-list' => 'div > div.datepicker-months',\n"
"                '@day-list' => 'div > div.datepicker-days',\n"
"            ];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1675 docs/master/dusk.md:1667
#, no-wrap
msgid "        /**\n"
"         * Select the given date.\n"
"         *\n"
"         * @param  \\Laravel\\Dusk\\Browser  $browser\n"
"         * @param  int  $year\n"
"         * @param  int  $month\n"
"         * @param  int  $day\n"
"         * @return void\n"
"         */\n"
"        public function selectDate(Browser $browser, $year, $month, $day)\n"
"        {\n"
"            $browser->click('@date-field')\n"
"                    ->within('@year-list', function ($browser) use ($year) {\n"
"                        $browser->click($year);\n"
"                    })\n"
"                    ->within('@month-list', function ($browser) use ($month) {\n"
"                        $browser->click($month);\n"
"                    })\n"
"                    ->within('@day-list', function ($browser) use ($day) {\n"
"                        $browser->click($day);\n"
"                    });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1677 docs/master/dusk.md:1669
#, no-wrap
msgid "<a name=\"using-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1677 docs/master/dusk.md:1669
#, no-wrap
msgid "Using Components"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1680 docs/master/dusk.md:1672
msgid "Once the component has been defined, we can easily select a date within the date picker from any test. And, if the logic necessary to select a date changes, we only need to update the component:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1689 docs/master/dusk.md:1681
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n"
"    use Laravel\\Dusk\\Browser;\n"
"    use Tests\\Browser\\Components\\DatePicker;\n"
"    use Tests\\DuskTestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1708 docs/master/dusk.md:1700
#, no-wrap
msgid "    class ExampleTest extends DuskTestCase\n"
"    {\n"
"        /**\n"
"         * A basic component test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function testBasicExample()\n"
"        {\n"
"            $this->browse(function (Browser $browser) {\n"
"                $browser->visit('/')\n"
"                        ->within(new DatePicker, function ($browser) {\n"
"                            $browser->selectDate(2019, 1, 30);\n"
"                        })\n"
"                        ->assertSee('January');\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1710 docs/master/dusk.md:1702
#, no-wrap
msgid "<a name=\"continuous-integration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/dusk.md:1710 docs/master/dusk.md:1702
#, no-wrap
msgid "Continuous Integration"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1713 docs/master/dusk.md:1705
#, no-wrap
msgid "> {note} Most Dusk continuous integration configurations expect your Laravel application to be served using the built-in PHP development server on port 8000. Therefore, before continuing, you should ensure that your continuous integration environment has an `APP_URL` environment variable value of `http://127.0.0.1:8000`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1715 docs/master/dusk.md:1707
#, no-wrap
msgid "<a name=\"running-tests-on-heroku-ci\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1715 docs/master/dusk.md:1707
#, no-wrap
msgid "Heroku CI"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1718 docs/master/dusk.md:1710
msgid "To run Dusk tests on [Heroku CI](https://www.heroku.com/continuous-integration), add the following Google Chrome buildpack and scripts to your Heroku `app.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1733 docs/master/dusk.md:1725
#, no-wrap
msgid "    {\n"
"      \"environments\": {\n"
"        \"test\": {\n"
"          \"buildpacks\": [\n"
"            { \"url\": \"heroku/php\" },\n"
"            { \"url\": \"https://github.com/heroku/heroku-buildpack-google-chrome\" }\n"
"          ],\n"
"          \"scripts\": {\n"
"            \"test-setup\": \"cp .env.testing .env\",\n"
"            \"test\": \"nohup bash -c './vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &' && nohup bash -c 'php artisan serve > /dev/null 2>&1 &' && php artisan dusk\"\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1735 docs/master/dusk.md:1727
#, no-wrap
msgid "<a name=\"running-tests-on-travis-ci\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1735 docs/master/dusk.md:1727
#, no-wrap
msgid "Travis CI"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1738 docs/master/dusk.md:1730
msgid "To run your Dusk tests on [Travis CI](https://travis-ci.org), use the following `.travis.yml` configuration. Since Travis CI is not a graphical environment, we will need to take some extra steps in order to launch a Chrome browser. In addition, we will use `php artisan serve` to launch PHP's built-in web server:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1740 docs/master/dusk.md:1732
#, no-wrap
msgid "    language: php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1743 docs/master/dusk.md:1735
#, no-wrap
msgid "    php:\n"
"      - 7.3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1746 docs/master/dusk.md:1738
#, no-wrap
msgid "    addons:\n"
"      chrome: stable\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1752 docs/master/dusk.md:1744
#, no-wrap
msgid "    install:\n"
"      - cp .env.testing .env\n"
"      - travis_retry composer install --no-interaction --prefer-dist --no-suggest\n"
"      - php artisan key:generate\n"
"      - php artisan dusk:chrome-driver\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1756 docs/master/dusk.md:1748
#, no-wrap
msgid "    before_script:\n"
"      - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &\n"
"      - php artisan serve &\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1759 docs/master/dusk.md:1751
#, no-wrap
msgid "    script:\n"
"      - php artisan dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1761 docs/master/dusk.md:1753
#, no-wrap
msgid "<a name=\"running-tests-on-github-actions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/dusk.md:1761 docs/master/dusk.md:1753
#, no-wrap
msgid "GitHub Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1764 docs/master/dusk.md:1756
msgid "If you are using [Github Actions](https://github.com/features/actions) to run your Dusk tests, you may use the following configuration file as a starting point. Like TravisCI, we will use the `php artisan serve` command to launch PHP's built-in web server:"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1768 docs/master/dusk.md:1760
#, no-wrap
msgid "    name: CI\n"
"    on: [push]\n"
"    jobs:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/dusk.md:1804 docs/master/dusk.md:1796
#, no-wrap
msgid "      dusk-php:\n"
"        runs-on: ubuntu-latest\n"
"        steps:\n"
"          - uses: actions/checkout@v2\n"
"          - name: Prepare The Environment\n"
"            run: cp .env.example .env\n"
"          - name: Create Database\n"
"            run: |\n"
"              sudo systemctl start mysql\n"
"              mysql --user=\"root\" --password=\"root\" -e \"CREATE DATABASE 'my-database' character set UTF8mb4 collate utf8mb4_bin;\"\n"
"          - name: Install Composer Dependencies\n"
"            run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader\n"
"          - name: Generate Application Key\n"
"            run: php artisan key:generate\n"
"          - name: Upgrade Chrome Driver\n"
"            run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d \" \" -f3 | cut -d \".\" -f1`\n"
"          - name: Start Chrome Driver\n"
"            run: ./vendor/laravel/dusk/bin/chromedriver-linux &\n"
"          - name: Run Laravel Server\n"
"            run: php artisan serve &\n"
"          - name: Run Dusk Tests\n"
"            env:\n"
"              APP_URL: \"http://127.0.0.1:8000\"\n"
"            run: php artisan dusk\n"
"          - name: Upload Screenshots\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: screenshots\n"
"              path: tests/Browser/screenshots\n"
"          - name: Upload Console Logs\n"
"            if: failure()\n"
"            uses: actions/upload-artifact@v2\n"
"            with:\n"
"              name: console\n"
"              path: tests/Browser/console\n"
msgstr ""

#. type: Title #
#: docs/8.x/eloquent-collections.md:1 docs/master/eloquent-collections.md:1
#, no-wrap
msgid "Eloquent: Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:6 docs/master/eloquent-collections.md:6
msgid "- [Introduction](#introduction)  - [Available Methods](#available-methods)  - [Custom Collections](#custom-collections)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:11 docs/master/eloquent-collections.md:11
msgid "All Eloquent methods that return more than one model result will return instances of the `Illuminate\\Database\\Eloquent\\Collection` class, including results retrieved via the `get` method or accessed via a relationship. The Eloquent collection object extends Laravel's [base collection](/docs/{{version}}/collections), so it naturally inherits dozens of methods used to fluently work with the underlying array of Eloquent models. Be sure to review the Laravel collection documentation to learn all about these helpful methods!"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:13 docs/master/eloquent-collections.md:13
msgid "All collections also serve as iterators, allowing you to loop over them as if they were simple PHP arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:17 docs/master/eloquent-collections.md:17
#, no-wrap
msgid "    $users = User::where('active', 1)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:23 docs/master/eloquent-collections.md:23
msgid "However, as previously mentioned, collections are much more powerful than arrays and expose a variety of map / reduce operations that may be chained using an intuitive interface. For example, we may remove all inactive models and then gather the first name for each remaining user:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:29 docs/master/eloquent-collections.md:29
#, no-wrap
msgid "    $names = User::all()->reject(function ($user) {\n"
"        return $user->active === false;\n"
"    })->map(function ($user) {\n"
"        return $user->name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:31 docs/master/eloquent-collections.md:31
#, no-wrap
msgid "<a name=\"eloquent-collection-conversion\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:31 docs/master/eloquent-collections.md:31
#, no-wrap
msgid "Eloquent Collection Conversion"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:34 docs/master/eloquent-collections.md:34
msgid "While most Eloquent collection methods return a new instance of an Eloquent collection, the `collapse`, `flatten`, `flip`, `keys`, `pluck`, and `zip` methods return a [base collection](/docs/{{version}}/collections) instance. Likewise, if a `map` operation returns a collection that does not contain any Eloquent models, it will be converted to a base collection instance."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:39 docs/master/eloquent-collections.md:39
msgid "All Eloquent collections extend the base [Laravel collection](/docs/{{version}}/collections#available-methods) object; therefore, they inherit all of the powerful methods provided by the base collection class."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:41 docs/master/eloquent-collections.md:41
msgid "In addition, the `Illuminate\\Database\\Eloquent\\Collection` class provides a superset of methods to aid with managing your model collections. Most methods return `Illuminate\\Database\\Eloquent\\Collection` instances; however, some methods, like `modelKeys`, return an `Illuminate\\Support\\Collection` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:47 docs/master/eloquent-collections.md:47
#, no-wrap
msgid "<style>\n"
"    #collection-method-list > p {\n"
"        column-count: 1; -moz-column-count: 1; -webkit-column-count: 1;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:69 docs/master/eloquent-collections.md:69
msgid "[contains](#method-contains)  [diff](#method-diff)  [except](#method-except)  [find](#method-find)  [fresh](#method-fresh)  [intersect](#method-intersect)  [load](#method-load)  [loadMissing](#method-loadMissing)  [modelKeys](#method-modelKeys)  [makeVisible](#method-makeVisible)  [makeHidden](#method-makeHidden)  [only](#method-only)  [toQuery](#method-toquery)  [unique](#method-unique)"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:73 docs/master/eloquent-collections.md:73
#, no-wrap
msgid "`contains($key, $operator = null, $value = null)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:76 docs/master/eloquent-collections.md:76
msgid "The `contains` method may be used to determine if a given model instance is contained by the collection. This method accepts a primary key or a model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:78 docs/master/eloquent-collections.md:78
#, no-wrap
msgid "    $users->contains(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:80 docs/master/eloquent-collections.md:80
#, no-wrap
msgid "    $users->contains(User::find(1));\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:82 docs/master/eloquent-collections.md:82
#, no-wrap
msgid "`diff($items)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:85 docs/master/eloquent-collections.md:85
msgid "The `diff` method returns all of the models that are not present in the given collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:89 docs/master/eloquent-collections.md:89
#, no-wrap
msgid "    $users = $users->diff(User::whereIn('id', [1, 2, 3])->get());\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:91 docs/master/eloquent-collections.md:91
#, no-wrap
msgid "`except($keys)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:94 docs/master/eloquent-collections.md:94
msgid "The `except` method returns all of the models that do not have the given primary keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:96 docs/master/eloquent-collections.md:96
#, no-wrap
msgid "    $users = $users->except([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:98 docs/master/eloquent-collections.md:98
#, no-wrap
msgid "<a name=\"method-find\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:98 docs/master/eloquent-collections.md:98
#, no-wrap
msgid "`find($key)` {#collection-method .first-collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:101 docs/master/eloquent-collections.md:101
msgid "The `find` method returns the model that has a primary key matching the given key. If `$key` is a model instance, `find` will attempt to return a model matching the primary key. If `$key` is an array of keys, `find` will return all models which have a primary key in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:103 docs/8.x/eloquent-serialization.md:41
#: docs/master/eloquent-collections.md:103
#: docs/master/eloquent-serialization.md:41
#, no-wrap
msgid "    $users = User::all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:105 docs/master/eloquent-collections.md:105
#, no-wrap
msgid "    $user = $users->find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:107 docs/master/eloquent-collections.md:107
#, no-wrap
msgid "<a name=\"method-fresh\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:107 docs/master/eloquent-collections.md:107
#, no-wrap
msgid "`fresh($with = [])`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:110 docs/master/eloquent-collections.md:110
msgid "The `fresh` method retrieves a fresh instance of each model in the collection from the database. In addition, any specified relationships will be eager loaded:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:112 docs/master/eloquent-collections.md:112
#, no-wrap
msgid "    $users = $users->fresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:114 docs/master/eloquent-collections.md:114
#, no-wrap
msgid "    $users = $users->fresh('comments');\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:116 docs/master/eloquent-collections.md:116
#, no-wrap
msgid "`intersect($items)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:119 docs/master/eloquent-collections.md:119
msgid "The `intersect` method returns all of the models that are also present in the given collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:123 docs/master/eloquent-collections.md:123
#, no-wrap
msgid "    $users = $users->intersect(User::whereIn('id', [1, 2, 3])->get());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:125 docs/master/eloquent-collections.md:125
#, no-wrap
msgid "<a name=\"method-load\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:125 docs/master/eloquent-collections.md:125
#, no-wrap
msgid "`load($relations)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:128 docs/master/eloquent-collections.md:128
msgid "The `load` method eager loads the given relationships for all models in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:130 docs/master/eloquent-collections.md:130
#, no-wrap
msgid "    $users->load(['comments', 'posts']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:132 docs/master/eloquent-collections.md:132
#, no-wrap
msgid "    $users->load('comments.author');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:134 docs/master/eloquent-collections.md:134
#, no-wrap
msgid "<a name=\"method-loadMissing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:134 docs/master/eloquent-collections.md:134
#, no-wrap
msgid "`loadMissing($relations)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:137 docs/master/eloquent-collections.md:137
msgid "The `loadMissing` method eager loads the given relationships for all models in the collection if the relationships are not already loaded:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:139 docs/master/eloquent-collections.md:139
#, no-wrap
msgid "    $users->loadMissing(['comments', 'posts']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:141 docs/master/eloquent-collections.md:141
#, no-wrap
msgid "    $users->loadMissing('comments.author');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:143 docs/master/eloquent-collections.md:143
#, no-wrap
msgid "<a name=\"method-modelKeys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:143 docs/master/eloquent-collections.md:143
#, no-wrap
msgid "`modelKeys()`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:146 docs/master/eloquent-collections.md:146
msgid "The `modelKeys` method returns the primary keys for all models in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:148 docs/master/eloquent-collections.md:148
#, no-wrap
msgid "    $users->modelKeys();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:152 docs/master/eloquent-collections.md:152
#, no-wrap
msgid "<a name=\"method-makeVisible\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:152 docs/master/eloquent-collections.md:152
#, no-wrap
msgid "`makeVisible($attributes)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:155 docs/master/eloquent-collections.md:155
msgid "The `makeVisible` method [makes attributes visible](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"hidden\" on each model in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:157 docs/master/eloquent-collections.md:157
#, no-wrap
msgid "    $users = $users->makeVisible(['address', 'phone_number']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:159 docs/master/eloquent-collections.md:159
#, no-wrap
msgid "<a name=\"method-makeHidden\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:159 docs/master/eloquent-collections.md:159
#, no-wrap
msgid "`makeHidden($attributes)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:162 docs/master/eloquent-collections.md:162
msgid "The `makeHidden` method [hides attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"visible\" on each model in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:164 docs/master/eloquent-collections.md:164
#, no-wrap
msgid "    $users = $users->makeHidden(['address', 'phone_number']);\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:166 docs/master/eloquent-collections.md:166
#, no-wrap
msgid "`only($keys)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:169 docs/master/eloquent-collections.md:169
msgid "The `only` method returns all of the models that have the given primary keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:171 docs/master/eloquent-collections.md:171
#, no-wrap
msgid "    $users = $users->only([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:173 docs/master/eloquent-collections.md:173
#, no-wrap
msgid "<a name=\"method-toquery\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:173 docs/master/eloquent-collections.md:173
#, no-wrap
msgid "`toQuery()`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:176 docs/master/eloquent-collections.md:176
msgid "The `toQuery` method returns an Eloquent query builder instance containing a `whereIn` constraint on the collection model's primary keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:180 docs/master/eloquent-collections.md:180
#, no-wrap
msgid "    $users = User::where('status', 'VIP')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:184 docs/master/eloquent-collections.md:184
#, no-wrap
msgid "    $users->toQuery()->update([\n"
"        'status' => 'Administrator',\n"
"    ]);\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-collections.md:186 docs/master/eloquent-collections.md:186
#, no-wrap
msgid "`unique($key = null, $strict = false)`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:189 docs/master/eloquent-collections.md:189
msgid "The `unique` method returns all of the unique models in the collection. Any models of the same type with the same primary key as another model in the collection are removed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:191 docs/master/eloquent-collections.md:191
#, no-wrap
msgid "    $users = $users->unique();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:193 docs/master/eloquent-collections.md:193
#, no-wrap
msgid "<a name=\"custom-collections\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-collections.md:193 docs/master/eloquent-collections.md:193
#, no-wrap
msgid "Custom Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:196 docs/master/eloquent-collections.md:196
msgid "If you would like to use a custom `Collection` object when interacting with a given model, you may define a `newCollection` method on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:200 docs/8.x/eloquent-mutators.md:36
#: docs/8.x/eloquent-mutators.md:85 docs/8.x/eloquent-mutators.md:144
#: docs/8.x/eloquent-mutators.md:177 docs/8.x/eloquent-mutators.md:360
#: docs/8.x/eloquent-mutators.md:543 docs/8.x/eloquent-mutators.md:577
#: docs/8.x/eloquent-relationships.md:72 docs/8.x/eloquent-relationships.md:106
#: docs/8.x/eloquent-relationships.md:150
#: docs/8.x/eloquent-relationships.md:196
#: docs/8.x/eloquent-relationships.md:303
#: docs/8.x/eloquent-relationships.md:366
#: docs/8.x/eloquent-relationships.md:436
#: docs/8.x/eloquent-relationships.md:480
#: docs/8.x/eloquent-relationships.md:564
#: docs/8.x/eloquent-relationships.md:583
#: docs/8.x/eloquent-relationships.md:642
#: docs/8.x/eloquent-relationships.md:744
#: docs/8.x/eloquent-relationships.md:840
#: docs/8.x/eloquent-relationships.md:864
#: docs/8.x/eloquent-relationships.md:965
#: docs/8.x/eloquent-relationships.md:1278
#: docs/8.x/eloquent-relationships.md:1386
#: docs/8.x/eloquent-relationships.md:1682
#: docs/8.x/eloquent-serialization.md:80 docs/8.x/eloquent-serialization.md:100
#: docs/8.x/eloquent-serialization.md:132
#: docs/8.x/eloquent-serialization.md:153 docs/8.x/eloquent.md:82
#: docs/8.x/eloquent.md:100 docs/8.x/eloquent.md:121 docs/8.x/eloquent.md:175
#: docs/8.x/eloquent.md:193 docs/8.x/eloquent.md:224 docs/8.x/eloquent.md:245
#: docs/8.x/eloquent.md:637 docs/8.x/eloquent.md:752 docs/8.x/eloquent.md:908
#: docs/8.x/eloquent.md:939 docs/8.x/eloquent.md:989 docs/8.x/eloquent.md:1044
#: docs/8.x/eloquent.md:1097 docs/8.x/eloquent.md:1129 docs/8.x/facades.md:179
#: docs/8.x/facades.md:204 docs/8.x/notifications.md:76
#: docs/8.x/notifications.md:341 docs/8.x/notifications.md:805
#: docs/8.x/notifications.md:929 docs/8.x/notifications.md:1096
#: docs/8.x/passport.md:82 docs/8.x/passport.md:694 docs/8.x/passport.md:723
#: docs/8.x/scout.md:50 docs/8.x/scout.md:94 docs/8.x/scout.md:121
#: docs/8.x/scout.md:152 docs/8.x/verification.md:29
#: docs/master/eloquent-collections.md:200 docs/master/eloquent-mutators.md:36
#: docs/master/eloquent-mutators.md:85 docs/master/eloquent-mutators.md:144
#: docs/master/eloquent-mutators.md:177 docs/master/eloquent-mutators.md:325
#: docs/master/eloquent-mutators.md:508 docs/master/eloquent-mutators.md:542
#: docs/master/eloquent-relationships.md:72
#: docs/master/eloquent-relationships.md:106
#: docs/master/eloquent-relationships.md:150
#: docs/master/eloquent-relationships.md:196
#: docs/master/eloquent-relationships.md:303
#: docs/master/eloquent-relationships.md:366
#: docs/master/eloquent-relationships.md:436
#: docs/master/eloquent-relationships.md:480
#: docs/master/eloquent-relationships.md:564
#: docs/master/eloquent-relationships.md:583
#: docs/master/eloquent-relationships.md:642
#: docs/master/eloquent-relationships.md:744
#: docs/master/eloquent-relationships.md:840
#: docs/master/eloquent-relationships.md:864
#: docs/master/eloquent-relationships.md:965
#: docs/master/eloquent-relationships.md:1278
#: docs/master/eloquent-relationships.md:1386
#: docs/master/eloquent-relationships.md:1682
#: docs/master/eloquent-serialization.md:80
#: docs/master/eloquent-serialization.md:100
#: docs/master/eloquent-serialization.md:132
#: docs/master/eloquent-serialization.md:153 docs/master/eloquent.md:82
#: docs/master/eloquent.md:100 docs/master/eloquent.md:121
#: docs/master/eloquent.md:175 docs/master/eloquent.md:193
#: docs/master/eloquent.md:224 docs/master/eloquent.md:245
#: docs/master/eloquent.md:637 docs/master/eloquent.md:748
#: docs/master/eloquent.md:904 docs/master/eloquent.md:935
#: docs/master/eloquent.md:985 docs/master/eloquent.md:1040
#: docs/master/eloquent.md:1089 docs/master/eloquent.md:1121
#: docs/master/facades.md:178 docs/master/facades.md:203
#: docs/master/notifications.md:75 docs/master/notifications.md:356
#: docs/master/notifications.md:777 docs/master/notifications.md:901
#: docs/master/notifications.md:1068 docs/master/passport.md:82
#: docs/master/passport.md:692 docs/master/passport.md:721
#: docs/master/scout.md:50 docs/master/scout.md:89 docs/master/scout.md:116
#: docs/master/scout.md:147 docs/master/verification.md:29
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:203 docs/master/eloquent-collections.md:203
#, no-wrap
msgid "    use App\\Support\\UserCollection;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:217 docs/master/eloquent-collections.md:217
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Create a new Eloquent Collection instance.\n"
"         *\n"
"         * @param  array  $models\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Collection\n"
"         */\n"
"        public function newCollection(array $models = [])\n"
"        {\n"
"            return new UserCollection($models);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-collections.md:218 docs/master/eloquent-collections.md:218
msgid "Once you have defined a `newCollection` method, you will receive an instance of your custom collection anytime Eloquent would normally return an `Illuminate\\Database\\Eloquent\\Collection` instance. If you would like to use a custom collection for every model in your application, you should define the `newCollection` method on a base model class that is extended by all of your application's models."
msgstr ""

#. type: Title #
#: docs/8.x/eloquent-mutators.md:1 docs/master/eloquent-mutators.md:1
#, no-wrap
msgid "Eloquent: Mutators & Casting"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Accessors & Mutators](#accessors-and-mutators)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Defining An Accessor](#defining-an-accessor)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Defining A Mutator](#defining-a-mutator)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Attribute Casting](#attribute-casting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Array & JSON Casting](#array-and-json-casting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Date Casting](#date-casting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Query Time Casting](#query-time-casting)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Custom Casts](#custom-casts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Value Object Casting](#value-object-casting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Array / JSON Serialization](#array-json-serialization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Inbound Casting](#inbound-casting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Cast Parameters](#cast-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-mutators.md:17 docs/master/eloquent-mutators.md:17
msgid "[Castables](#castables)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:22 docs/master/eloquent-mutators.md:22
msgid "Accessors, mutators, and attribute casting allow you to transform Eloquent attribute values when you retrieve or set them on model instances. For example, you may want to use the [Laravel encrypter](/docs/{{version}}/encryption) to encrypt a value while it is stored in the database, and then automatically decrypt the attribute when you access it on an Eloquent model. Or, you may want to convert a JSON string that is stored in your database to an array when it is accessed via your Eloquent model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:24 docs/master/eloquent-mutators.md:24
#, no-wrap
msgid "<a name=\"accessors-and-mutators\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:24 docs/master/eloquent-mutators.md:24
#, no-wrap
msgid "Accessors & Mutators"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:27 docs/master/eloquent-mutators.md:27
#, no-wrap
msgid "<a name=\"defining-an-accessor\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:27 docs/master/eloquent-mutators.md:27
#, no-wrap
msgid "Defining An Accessor"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:30 docs/master/eloquent-mutators.md:30
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a `get{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:32 docs/master/eloquent-mutators.md:32
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:38 docs/8.x/eloquent-mutators.md:87
#: docs/8.x/eloquent-mutators.md:146 docs/8.x/eloquent-mutators.md:179
#: docs/8.x/eloquent-relationships.md:74 docs/8.x/eloquent-relationships.md:108
#: docs/8.x/eloquent-relationships.md:152
#: docs/8.x/eloquent-relationships.md:198
#: docs/8.x/eloquent-relationships.md:305
#: docs/8.x/eloquent-relationships.md:368
#: docs/8.x/eloquent-relationships.md:438
#: docs/8.x/eloquent-relationships.md:482
#: docs/8.x/eloquent-relationships.md:566
#: docs/8.x/eloquent-relationships.md:644
#: docs/8.x/eloquent-relationships.md:746
#: docs/8.x/eloquent-relationships.md:842
#: docs/8.x/eloquent-relationships.md:866
#: docs/8.x/eloquent-relationships.md:967
#: docs/8.x/eloquent-relationships.md:1280
#: docs/8.x/eloquent-relationships.md:1342
#: docs/8.x/eloquent-relationships.md:1388
#: docs/8.x/eloquent-relationships.md:1484
#: docs/8.x/eloquent-relationships.md:1684
#: docs/8.x/eloquent-serialization.md:82 docs/8.x/eloquent-serialization.md:102
#: docs/8.x/eloquent-serialization.md:134
#: docs/8.x/eloquent-serialization.md:155 docs/8.x/eloquent.md:84
#: docs/8.x/eloquent.md:102 docs/8.x/eloquent.md:123 docs/8.x/eloquent.md:177
#: docs/8.x/eloquent.md:195 docs/8.x/eloquent.md:226 docs/8.x/eloquent.md:247
#: docs/8.x/eloquent.md:639 docs/8.x/eloquent.md:991 docs/8.x/eloquent.md:1046
#: docs/8.x/eloquent.md:1131 docs/master/eloquent-mutators.md:38
#: docs/master/eloquent-mutators.md:87 docs/master/eloquent-mutators.md:146
#: docs/master/eloquent-mutators.md:179
#: docs/master/eloquent-relationships.md:74
#: docs/master/eloquent-relationships.md:108
#: docs/master/eloquent-relationships.md:152
#: docs/master/eloquent-relationships.md:198
#: docs/master/eloquent-relationships.md:305
#: docs/master/eloquent-relationships.md:368
#: docs/master/eloquent-relationships.md:438
#: docs/master/eloquent-relationships.md:482
#: docs/master/eloquent-relationships.md:566
#: docs/master/eloquent-relationships.md:644
#: docs/master/eloquent-relationships.md:746
#: docs/master/eloquent-relationships.md:842
#: docs/master/eloquent-relationships.md:866
#: docs/master/eloquent-relationships.md:967
#: docs/master/eloquent-relationships.md:1280
#: docs/master/eloquent-relationships.md:1342
#: docs/master/eloquent-relationships.md:1388
#: docs/master/eloquent-relationships.md:1484
#: docs/master/eloquent-relationships.md:1684
#: docs/master/eloquent-serialization.md:82
#: docs/master/eloquent-serialization.md:102
#: docs/master/eloquent-serialization.md:134
#: docs/master/eloquent-serialization.md:155 docs/master/eloquent.md:84
#: docs/master/eloquent.md:102 docs/master/eloquent.md:123
#: docs/master/eloquent.md:177 docs/master/eloquent.md:195
#: docs/master/eloquent.md:226 docs/master/eloquent.md:247
#: docs/master/eloquent.md:639 docs/master/eloquent.md:987
#: docs/master/eloquent.md:1042 docs/master/eloquent.md:1123
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:52 docs/master/eloquent-mutators.md:52
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return string\n"
"         */\n"
"        public function getFirstNameAttribute($value)\n"
"        {\n"
"            return ucfirst($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:54 docs/master/eloquent-mutators.md:54
msgid "As you can see, the original value of the column is passed to the accessor, allowing you to manipulate and return the value. To access the value of the accessor, you may simply access the `first_name` attribute on a model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:60 docs/master/eloquent-mutators.md:60
#, no-wrap
msgid "    $firstName = $user->first_name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:62 docs/master/eloquent-mutators.md:62
msgid "You are not limited to interacting with a single attribute within your accessor. You may also use accessors to return new, computed values from existing attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:72 docs/master/eloquent-mutators.md:72
#, no-wrap
msgid "    /**\n"
"     * Get the user's full name.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getFullNameAttribute()\n"
"    {\n"
"        return \"{$this->first_name} {$this->last_name}\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:74 docs/master/eloquent-mutators.md:74
#, no-wrap
msgid "> {tip} If you would like these computed values to be added to the array / JSON representations of your model, [you will need to append them](https://laravel.com/docs/{{version}}/eloquent-serialization#appending-values-to-json).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:76 docs/master/eloquent-mutators.md:76
#, no-wrap
msgid "<a name=\"defining-a-mutator\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:76 docs/master/eloquent-mutators.md:76
#, no-wrap
msgid "Defining A Mutator"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:79 docs/master/eloquent-mutators.md:79
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, define a `set{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:81 docs/master/eloquent-mutators.md:81
msgid "Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:101 docs/master/eloquent-mutators.md:101
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Set the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return void\n"
"         */\n"
"        public function setFirstNameAttribute($value)\n"
"        {\n"
"            $this->attributes['first_name'] = strtolower($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:103 docs/master/eloquent-mutators.md:103
msgid "The mutator will receive the value that is being set on the attribute, allowing you to manipulate the value and set the manipulated value on the Eloquent model's internal `$attributes` property. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:109 docs/master/eloquent-mutators.md:109
#, no-wrap
msgid "    $user->first_name = 'Sally';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:111 docs/master/eloquent-mutators.md:111
msgid "In this example, the `setFirstNameAttribute` function will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the internal `$attributes` array."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:113 docs/master/eloquent-mutators.md:113
#, no-wrap
msgid "<a name=\"attribute-casting\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:113 docs/master/eloquent-mutators.md:113
#, no-wrap
msgid "Attribute Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:116 docs/master/eloquent-mutators.md:116
msgid "Attribute casting provides functionality similar to accessors and mutators without requiring you to define any additional methods on your model. Instead, your model's `$casts` property provides a convenient method of converting attributes to common data types."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:118 docs/master/eloquent-mutators.md:118
msgid "The `$casts` property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:138 docs/master/eloquent-mutators.md:138
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `array`\n"
"- `boolean`\n"
"- `collection`\n"
"- `date`\n"
"- `datetime`\n"
"- `decimal:<digits>`\n"
"- `double`\n"
"- `encrypted`\n"
"- `encrypted:array`\n"
"- `encrypted:collection`\n"
"- `encrypted:object`\n"
"- `float`\n"
"- `integer`\n"
"- `object`\n"
"- `real`\n"
"- `string`\n"
"- `timestamp`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:140 docs/master/eloquent-mutators.md:140
msgid "To demonstrate attribute casting, let's cast the `is_admin` attribute, which is stored in our database as an integer (`0` or `1`) to a boolean value:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:158 docs/master/eloquent-mutators.md:158
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'is_admin' => 'boolean',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:160 docs/master/eloquent-mutators.md:160
msgid "After defining the cast, the `is_admin` attribute will always be cast to a boolean when you access it, even if the underlying value is stored in the database as an integer:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:166 docs/master/eloquent-mutators.md:166
#, no-wrap
msgid "    if ($user->is_admin) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:168 docs/master/eloquent-mutators.md:168
#, no-wrap
msgid "> {note} Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:170 docs/master/eloquent-mutators.md:170
#, no-wrap
msgid "<a name=\"array-and-json-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:170 docs/master/eloquent-mutators.md:170
#, no-wrap
msgid "Array & JSON Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:173 docs/master/eloquent-mutators.md:173
msgid "The `array` cast is particularly useful when working with columns that are stored as serialized JSON. For example, if your database has a `JSON` or `TEXT` field type that contains serialized JSON, adding the `array` cast to that attribute will automatically deserialize the attribute to a PHP array when you access it on your Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:191 docs/master/eloquent-mutators.md:191
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => 'array',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:193 docs/master/eloquent-mutators.md:193
msgid "Once the cast is defined, you may access the `options` attribute and it will automatically be deserialized from JSON into a PHP array. When you set the value of the `options` attribute, the given array will automatically be serialized back into JSON for storage:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:199 docs/master/eloquent-mutators.md:199
#, no-wrap
msgid "    $options = $user->options;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:201 docs/master/eloquent-mutators.md:201
#, no-wrap
msgid "    $options['key'] = 'value';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:203 docs/master/eloquent-mutators.md:203
#, no-wrap
msgid "    $user->options = $options;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:205 docs/8.x/eloquent-mutators.md:441
#: docs/8.x/eloquent-relationships.md:1595
#: docs/8.x/eloquent-relationships.md:1601 docs/8.x/eloquent.md:584
#: docs/8.x/eloquent.md:599 docs/master/eloquent-mutators.md:205
#: docs/master/eloquent-mutators.md:406
#: docs/master/eloquent-relationships.md:1595
#: docs/master/eloquent-relationships.md:1601 docs/master/eloquent.md:584
#: docs/master/eloquent.md:599
#, no-wrap
msgid "    $user->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:207 docs/master/eloquent-mutators.md:207
#, no-wrap
msgid "To update a single field of a JSON attribute with a more terse syntax, you may use the `->` operator when calling the `update` method:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:211 docs/master/eloquent-mutators.md:211
#, no-wrap
msgid "    $user->update(['options->key' => 'value']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:213
#, no-wrap
msgid "<a name=\"array-object-and-collection-casting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-mutators.md:213
#, no-wrap
msgid "Array Object & Collection Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:216
msgid "Although the standard `array` cast is sufficient for many applications, it does have some disadvantages. Since the `array` cast returns a primitive type, it is not possible to mutate an offset of the array directly. For example, the following code will trigger a PHP error:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:220
#, no-wrap
msgid "    $user->options['key'] = $value;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:222
msgid "To solve this, Laravel offers an `AsArrayObject` cast that casts your JSON attribute to an [ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) class. This feature is implemented using Laravel's [custom cast](#custom-casts) implementation, which allows Laravel to intelligently cache and transform the mutated object such that individual offsets may be modified without triggering a PHP error. To use the `AsArrayObject` cast, simply assign it to an attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:224
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:233
#, no-wrap
msgid "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsArrayObject::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:235
msgid "Similarly, Laravel offers an `AsCollection` cast that casts your JSON attribute to a Laravel [Collection](/docs/{{version}}/collections) instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:237
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:246
#, no-wrap
msgid "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsCollection::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:248 docs/master/eloquent-mutators.md:213
#, no-wrap
msgid "<a name=\"date-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:248 docs/master/eloquent-mutators.md:213
#, no-wrap
msgid "Date Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:251 docs/master/eloquent-mutators.md:216
msgid "By default, Eloquent will cast the `created_at` and `updated_at` columns to instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends the PHP `DateTime` class and provides an assortment of helpful methods. You may cast additional date attributes by defining additional date casts within your model's `$cast` property array. Typically, dates should be cast using the `datetime` cast."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:253 docs/master/eloquent-mutators.md:218
msgid "When defining a `date` or `datetime` cast, you may also specify the date's format. This format will be used when the [model is serialized to an array or JSON](/docs/{{version}}/eloquent-serialization):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:262 docs/master/eloquent-mutators.md:227
#, no-wrap
msgid "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'created_at' => 'datetime:Y-m-d',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:264 docs/master/eloquent-mutators.md:229
msgid "When a column is cast as a date, you may set its value to a UNIX timestamp, date string (`Y-m-d`), date-time string, or a `DateTime` / `Carbon` instance. The date's value will be correctly converted and stored in your database:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:266 docs/master/eloquent-mutators.md:231
msgid "You may customize the default serialization format for all of your model's dates by defining a `serializeDate` method on your model. This method does not affect how your dates are formatted for storage in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:277 docs/8.x/eloquent-serialization.md:195
#: docs/master/eloquent-mutators.md:242
#: docs/master/eloquent-serialization.md:195
#, no-wrap
msgid "    /**\n"
"     * Prepare a date for array / JSON serialization.\n"
"     *\n"
"     * @param  \\DateTimeInterface  $date\n"
"     * @return string\n"
"     */\n"
"    protected function serializeDate(DateTimeInterface $date)\n"
"    {\n"
"        return $date->format('Y-m-d');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:279 docs/master/eloquent-mutators.md:244
msgid "To specify the format that should be used when actually storing a model's dates within your database, you should define a `$dateFormat` property on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:286 docs/master/eloquent-mutators.md:251
#, no-wrap
msgid "    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:288 docs/master/eloquent-mutators.md:253
#, no-wrap
msgid "<a name=\"query-time-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:288 docs/master/eloquent-mutators.md:253
#, no-wrap
msgid "Query Time Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:291 docs/master/eloquent-mutators.md:256
msgid "Sometimes you may need to apply casts while executing a query, such as when selecting a raw value from a table. For example, consider the following query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:300 docs/master/eloquent-mutators.md:265
#, no-wrap
msgid "    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:302 docs/master/eloquent-mutators.md:267
msgid "The `last_posted_at` attribute on the results of this query will be a simple string. It would be wonderful if we could apply a `datetime` cast to this attribute when executing the query. Thankfully, we may accomplish this using the `withCasts` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:310 docs/master/eloquent-mutators.md:275
#, no-wrap
msgid "    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->withCasts([\n"
"        'last_posted_at' => 'datetime'\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:312 docs/master/eloquent-mutators.md:277
#, no-wrap
msgid "<a name=\"custom-casts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:312 docs/master/eloquent-mutators.md:277
#, no-wrap
msgid "Custom Casts"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:315 docs/master/eloquent-mutators.md:280
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. You may accomplish this by defining a class that implements the `CastsAttributes` interface."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:317 docs/master/eloquent-mutators.md:282
msgid "Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:321 docs/8.x/eloquent-mutators.md:386
#: docs/8.x/eloquent-mutators.md:473 docs/master/eloquent-mutators.md:286
#: docs/master/eloquent-mutators.md:351 docs/master/eloquent-mutators.md:438
#, no-wrap
msgid "    namespace App\\Casts;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:323 docs/master/eloquent-mutators.md:288
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:339 docs/master/eloquent-mutators.md:304
#, no-wrap
msgid "    class Json implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_decode($value, true);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:354 docs/master/eloquent-mutators.md:319
#, no-wrap
msgid "        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_encode($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:356 docs/master/eloquent-mutators.md:321
msgid "Once you have defined a custom cast type, you may attach it to a model attribute using its class name:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:363 docs/master/eloquent-mutators.md:328
#, no-wrap
msgid "    use App\\Casts\\Json;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:375 docs/master/eloquent-mutators.md:340
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => Json::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:377 docs/master/eloquent-mutators.md:342
#, no-wrap
msgid "<a name=\"value-object-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:377 docs/master/eloquent-mutators.md:342
#, no-wrap
msgid "Value Object Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:380 docs/master/eloquent-mutators.md:345
msgid "You are not limited to casting values to primitive types. You may also cast values to objects. Defining custom casts that cast values to objects is very similar to casting to primitive types; however, the `set` method should return an array of key / value pairs that will be used to set raw, storable values on the model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:382 docs/master/eloquent-mutators.md:347
msgid "As an example, we will define a custom cast class that casts multiple model values into a single `Address` value object. We will assume the `Address` value has two public properties: `lineOne` and `lineTwo`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:390 docs/master/eloquent-mutators.md:355
#, no-wrap
msgid "    use App\\Models\\Address as AddressModel;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"    use InvalidArgumentException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:409 docs/master/eloquent-mutators.md:374
#, no-wrap
msgid "    class Address implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return \\App\\Models\\Address\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return new AddressModel(\n"
"                $attributes['address_line_one'],\n"
"                $attributes['address_line_two']\n"
"            );\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:424 docs/master/eloquent-mutators.md:389
#, no-wrap
msgid "        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  \\App\\Models\\Address  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            if (! $value instanceof AddressModel) {\n"
"                throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:431 docs/master/eloquent-mutators.md:396
#, no-wrap
msgid "            return [\n"
"                'address_line_one' => $value->lineOne,\n"
"                'address_line_two' => $value->lineTwo,\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:433 docs/master/eloquent-mutators.md:398
msgid "When casting to value objects, any changes made to the value object will automatically be synced back to the model before the model is saved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:439 docs/master/eloquent-mutators.md:404
#, no-wrap
msgid "    $user->address->lineOne = 'Updated Address Value';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:443 docs/master/eloquent-mutators.md:408
#, no-wrap
msgid "> {tip} If you plan to serialize your Eloquent models containing value objects to JSON or arrays, you should implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces on the value object.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:445 docs/master/eloquent-mutators.md:410
#, no-wrap
msgid "<a name=\"array-json-serialization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:445 docs/master/eloquent-mutators.md:410
#, no-wrap
msgid "Array / JSON Serialization"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:448 docs/master/eloquent-mutators.md:413
msgid "When an Eloquent model is converted to an array or JSON using the `toArray` and `toJson` methods, your custom cast value objects will typically be serialized as well as long as they implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces. However, when using value objects provided by third-party libraries, you may not have the ability to add these interfaces to the object."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:450 docs/master/eloquent-mutators.md:415
msgid "Therefore, you may specify that your custom cast class will be responsible for serializing the value object. To do so, your custom class cast should implement the `Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` interface. This interface states that your class should contain a `serialize` method which should return the serialized form of your value object:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:464 docs/master/eloquent-mutators.md:429
#, no-wrap
msgid "    /**\n"
"     * Get the serialized representation of the value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return mixed\n"
"     */\n"
"    public function serialize($model, string $key, $value, array $attributes)\n"
"    {\n"
"        return (string) $value;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:466 docs/master/eloquent-mutators.md:431
#, no-wrap
msgid "<a name=\"inbound-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:466 docs/master/eloquent-mutators.md:431
#, no-wrap
msgid "Inbound Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:469 docs/master/eloquent-mutators.md:434
msgid "Occasionally, you may need to write a custom cast that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model. A classic example of an inbound only cast is a \"hashing\" cast. Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:475 docs/master/eloquent-mutators.md:440
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:484 docs/master/eloquent-mutators.md:449
#, no-wrap
msgid "    class Hash implements CastsInboundAttributes\n"
"    {\n"
"        /**\n"
"         * The hashing algorithm.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $algorithm;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:495 docs/master/eloquent-mutators.md:460
#, no-wrap
msgid "        /**\n"
"         * Create a new cast class instance.\n"
"         *\n"
"         * @param  string|null  $algorithm\n"
"         * @return void\n"
"         */\n"
"        public function __construct($algorithm = null)\n"
"        {\n"
"            $this->algorithm = $algorithm;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:512 docs/master/eloquent-mutators.md:477
#, no-wrap
msgid "        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return is_null($this->algorithm)\n"
"                        ? bcrypt($value)\n"
"                        : hash($this->algorithm, $value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:514 docs/master/eloquent-mutators.md:479
#, no-wrap
msgid "<a name=\"cast-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:514 docs/master/eloquent-mutators.md:479
#, no-wrap
msgid "Cast Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:517 docs/master/eloquent-mutators.md:482
msgid "When attaching a custom cast to a model, cast parameters may be specified by separating them from the class name using a `:` character and comma-delimiting multiple parameters. The parameters will be passed to the constructor of the cast class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:526 docs/master/eloquent-mutators.md:491
#, no-wrap
msgid "    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'secret' => Hash::class.':sha256',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:528 docs/master/eloquent-mutators.md:493
#, no-wrap
msgid "<a name=\"castables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:528 docs/master/eloquent-mutators.md:493
#, no-wrap
msgid "Castables"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:531 docs/master/eloquent-mutators.md:496
msgid "You may want to allow your application's value objects to define their own custom cast classes. Instead of attaching the custom cast class to your model, you may alternatively attach a value object class that implements the `Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:533 docs/8.x/eloquent-mutators.md:564
#: docs/8.x/eloquent.md:845 docs/master/eloquent-mutators.md:498
#: docs/master/eloquent-mutators.md:529 docs/master/eloquent.md:841
#, no-wrap
msgid "    use App\\Models\\Address;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:537 docs/master/eloquent-mutators.md:502
#, no-wrap
msgid "    protected $casts = [\n"
"        'address' => Address::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:539 docs/master/eloquent-mutators.md:504
msgid "Objects that implement the `Castable` interface must define a `castUsing` method that returns the class name of the custom caster class that is responsible for casting to and from the `Castable` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:546 docs/master/eloquent-mutators.md:511
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use App\\Casts\\Address as AddressCast;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:560 docs/master/eloquent-mutators.md:525
#, no-wrap
msgid "    class Address implements Castable\n"
"    {\n"
"        /**\n"
"         * Get the name of the caster class to use when casting from / to this cast target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return AddressCast::class;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:562 docs/master/eloquent-mutators.md:527
msgid "When using `Castable` classes, you may still provide arguments in the `$casts` definition. The arguments will be passed to the `castUsing` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:568 docs/master/eloquent-mutators.md:533
#, no-wrap
msgid "    protected $casts = [\n"
"        'address' => Address::class.':argument',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:570 docs/master/eloquent-mutators.md:535
#, no-wrap
msgid "<a name=\"anonymous-cast-classes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-mutators.md:570 docs/master/eloquent-mutators.md:535
#, no-wrap
msgid "Castables & Anonymous Cast Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:573 docs/master/eloquent-mutators.md:538
msgid "By combining \"castables\" with PHP's [anonymous classes](https://www.php.net/manual/en/language.oop5.anonymous.php), you may define a value object and its casting logic as a single castable object. To accomplish this, return an anonymous class from your value object's `castUsing` method. The anonymous class should implement the `CastsAttributes` interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:580 docs/master/eloquent-mutators.md:545
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:584 docs/master/eloquent-mutators.md:549
#, no-wrap
msgid "    class Address implements Castable\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:602 docs/master/eloquent-mutators.md:567
#, no-wrap
msgid "        /**\n"
"         * Get the caster class to use when casting from / to this cast target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return object|string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return new class implements CastsAttributes\n"
"            {\n"
"                public function get($model, $key, $value, $attributes)\n"
"                {\n"
"                    return new Address(\n"
"                        $attributes['address_line_one'],\n"
"                        $attributes['address_line_two']\n"
"                    );\n"
"                }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:612 docs/master/eloquent-mutators.md:577
#, no-wrap
msgid "                public function set($model, $key, $value, $attributes)\n"
"                {\n"
"                    return [\n"
"                        'address_line_one' => $value->lineOne,\n"
"                        'address_line_two' => $value->lineTwo,\n"
"                    ];\n"
"                }\n"
"            };\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/eloquent-relationships.md:1 docs/master/eloquent-relationships.md:1
#, no-wrap
msgid "Eloquent: Relationships"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Defining Relationships](#defining-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[One To One](#one-to-one)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[One To Many](#one-to-many)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[One To Many (Inverse) / Belongs To](#one-to-many-inverse)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Has One Through](#has-one-through)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Has Many Through](#has-many-through)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Many To Many Relationships](#many-to-many)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Retrieving Intermediate Table Columns](#retrieving-intermediate-table-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Filtering Queries Via Intermediate Table Columns](#filtering-queries-via-intermediate-table-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Defining Custom Intermediate Table Models](#defining-custom-intermediate-table-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[One To One](#one-to-one-polymorphic-relations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[One To Many](#one-to-many-polymorphic-relations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Many To Many](#many-to-many-polymorphic-relations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Custom Polymorphic Types](#custom-polymorphic-types)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Dynamic Relationships](#dynamic-relationships)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Querying Relations](#querying-relations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Relationship Methods Vs. Dynamic Properties](#relationship-methods-vs-dynamic-properties)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Querying Relationship Existence](#querying-relationship-existence)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Querying Relationship Absence](#querying-relationship-absence)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Querying Morph To Relationships](#querying-morph-to-relationships)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Aggregating Related Models](#aggregating-related-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Counting Related Models](#counting-related-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Other Aggregate Functions](#other-aggregate-functions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Counting Related Models On Morph To Relationships](#counting-related-models-on-morph-to-relationships)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Eager Loading](#eager-loading)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Constraining Eager Loads](#constraining-eager-loads)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Lazy Eager Loading](#lazy-eager-loading)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Inserting & Updating Related Models](#inserting-and-updating-related-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[The `save` Method](#the-save-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[The `create` Method](#the-create-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Belongs To Relationships](#updating-belongs-to-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Many To Many Relationships](#updating-many-to-many-relationships)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-relationships.md:38
#: docs/master/eloquent-relationships.md:38
msgid "[Touching Parent Timestamps](#touching-parent-timestamps)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:43
#: docs/master/eloquent-relationships.md:43
msgid "Database tables are often related to one another. For example, a blog post may have many comments or an order could be related to the user who placed it. Eloquent makes managing and working with these relationships easy, and supports a variety of common relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:54
#: docs/master/eloquent-relationships.md:54
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [One To One](#one-to-one)\n"
"- [One To Many](#one-to-many)\n"
"- [Many To Many](#many-to-many)\n"
"- [Has One Through](#has-one-through)\n"
"- [Has Many Through](#has-many-through)\n"
"- [One To One (Polymorphic)](#one-to-one-polymorphic-relations)\n"
"- [One To Many (Polymorphic)](#one-to-many-polymorphic-relations)\n"
"- [Many To Many (Polymorphic)](#many-to-many-polymorphic-relations)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:56
#: docs/master/eloquent-relationships.md:56
#, no-wrap
msgid "<a name=\"defining-relationships\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:56
#: docs/master/eloquent-relationships.md:56
#, no-wrap
msgid "Defining Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:59
#: docs/master/eloquent-relationships.md:59
msgid "Eloquent relationships are defined as methods on your Eloquent model classes. Since relationships also serve as powerful [query builders](/docs/{{version}}/queries), defining relationships as methods provides powerful method chaining and querying capabilities. For example, we may chain additional query constraints on this `posts` relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:61 docs/8.x/eloquent-relationships.md:986
#: docs/master/eloquent-relationships.md:61
#: docs/master/eloquent-relationships.md:986
#, no-wrap
msgid "    $user->posts()->where('active', 1)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:63
#: docs/master/eloquent-relationships.md:63
msgid "But, before diving too deep into using relationships, let's learn how to define each type of relationship supported by Eloquent."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:65
#: docs/master/eloquent-relationships.md:65
#, no-wrap
msgid "<a name=\"one-to-one\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:65
#: docs/master/eloquent-relationships.md:65
#, no-wrap
msgid "One To One"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:68
#: docs/master/eloquent-relationships.md:68
msgid "A one-to-one relationship is a very basic type of database relationship. For example, a `User` model might be associated with one `Phone` model. To define this relationship, we will place a `phone` method on the `User` model. The `phone` method should call the `hasOne` method and return its result. The `hasOne` method is available to your model via the model's `Illuminate\\Database\\Eloquent\\Model` base class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:85
#: docs/master/eloquent-relationships.md:85
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the phone associated with the user.\n"
"         */\n"
"        public function phone()\n"
"        {\n"
"            return $this->hasOne(Phone::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:87
#: docs/master/eloquent-relationships.md:87
msgid "The first argument passed to the `hasOne` method is the name of the related model class. Once the relationship is defined, we may retrieve the related record using Eloquent's dynamic properties. Dynamic properties allow you to access relationship methods as if they were properties defined on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:89
#: docs/master/eloquent-relationships.md:89
#, no-wrap
msgid "    $phone = User::find(1)->phone;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:91
#: docs/master/eloquent-relationships.md:91
msgid "Eloquent determines the foreign key of the relationship based on the parent model name. In this case, the `Phone` model is automatically assumed to have a `user_id` foreign key. If you wish to override this convention, you may pass a second argument to the `hasOne` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:93
#: docs/master/eloquent-relationships.md:93
#, no-wrap
msgid "    return $this->hasOne(Phone::class, 'foreign_key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:95
#: docs/master/eloquent-relationships.md:95
msgid "Additionally, Eloquent assumes that the foreign key should have a value matching the primary key column of the parent. In other words, Eloquent will look for the value of the user's `id` column in the `user_id` column of the `Phone` record. If you would like the relationship to use a primary key value other than `id` or your model's `$primaryKey` property, you may pass a third argument to the `hasOne` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:97
#: docs/master/eloquent-relationships.md:97
#, no-wrap
msgid "    return $this->hasOne(Phone::class, 'foreign_key', 'local_key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:99
#: docs/master/eloquent-relationships.md:99
#, no-wrap
msgid "<a name=\"one-to-one-defining-the-inverse-of-the-relationship\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:99 docs/8.x/eloquent-relationships.md:473
#: docs/8.x/eloquent-relationships.md:855
#: docs/master/eloquent-relationships.md:99
#: docs/master/eloquent-relationships.md:473
#: docs/master/eloquent-relationships.md:855
#, no-wrap
msgid "Defining The Inverse Of The Relationship"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:102
#: docs/master/eloquent-relationships.md:102
msgid "So, we can access the `Phone` model from our `User` model. Next, let's define a relationship on the `Phone` model that will let us access the user that owns the phone. We can define the inverse of a `hasOne` relationship using the `belongsTo` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:119
#: docs/master/eloquent-relationships.md:119
#, no-wrap
msgid "    class Phone extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user that owns the phone.\n"
"         */\n"
"        public function user()\n"
"        {\n"
"            return $this->belongsTo(User::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:121
#: docs/master/eloquent-relationships.md:121
msgid "When invoking the `user` method, Eloquent will attempt to find a `User` model that has an `id` which matches the `user_id` column on the `Phone` model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:123
#: docs/master/eloquent-relationships.md:123
msgid "Eloquent determines the foreign key name by examining the name of the relationship method and suffixing the method name with `_id`. So, in this case, Eloquent assumes that the `Phone` model has a `user_id` column. However, if the foreign key on the `Phone` model is not `user_id`, you may pass a custom key name as the second argument to the `belongsTo` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:131
#: docs/master/eloquent-relationships.md:131
#, no-wrap
msgid "    /**\n"
"     * Get the user that owns the phone.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class, 'foreign_key');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:133
#: docs/master/eloquent-relationships.md:133
msgid "If the parent model does not use `id` as its primary key, or you wish to find the associated model using a different column, you may pass a third argument to the `belongsTo` method specifying the parent table's custom key:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:141
#: docs/master/eloquent-relationships.md:141
#, no-wrap
msgid "    /**\n"
"     * Get the user that owns the phone.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class, 'foreign_key', 'owner_key');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:143
#: docs/master/eloquent-relationships.md:143
#, no-wrap
msgid "<a name=\"one-to-many\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:143
#: docs/master/eloquent-relationships.md:143
#, no-wrap
msgid "One To Many"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:146
#: docs/master/eloquent-relationships.md:146
msgid "A one-to-many relationship is used to define relationships where a single model is the parent to one or more child models. For example, a blog post may have an infinite number of comments. Like all other Eloquent relationships, one-to-many relationships are defined by defining a method on your Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:163
#: docs/master/eloquent-relationships.md:163
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        /**\n"
"         * Get the comments for the blog post.\n"
"         */\n"
"        public function comments()\n"
"        {\n"
"            return $this->hasMany(Comment::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:165
#: docs/master/eloquent-relationships.md:165
msgid "Remember, Eloquent will automatically determine the proper foreign key column for the `Comment` model. By convention, Eloquent will take the \"snake case\" name of the parent model and suffix it with `_id`. So, in this example, Eloquent will assume the foreign key column on the `Comment` model is `post_id`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:167
#: docs/master/eloquent-relationships.md:167
msgid "Once the relationship method has been defined, we can access the [collection](/docs/{{version}}/eloquent-collections) of related comments by accessing the `comments` property. Remember, since Eloquent provides \"dynamic relationship properties\", we can access relationship methods as if they were defined as properties on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:171
#: docs/master/eloquent-relationships.md:171
#, no-wrap
msgid "    $comments = Post::find(1)->comments;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:175
#: docs/master/eloquent-relationships.md:175
#, no-wrap
msgid "    foreach ($comments as $comment) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:177
#: docs/master/eloquent-relationships.md:177
msgid "Since all relationships also serve as query builders, you may add further constraints to the relationship query by calling the `comments` method and continuing to chain conditions onto the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:181
#: docs/master/eloquent-relationships.md:181
#, no-wrap
msgid "    $comment = Post::find(1)->comments()\n"
"                        ->where('title', 'foo')\n"
"                        ->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:183
#: docs/master/eloquent-relationships.md:183
msgid "Like the `hasOne` method, you may also override the foreign and local keys by passing additional arguments to the `hasMany` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:185
#: docs/master/eloquent-relationships.md:185
#, no-wrap
msgid "    return $this->hasMany(Comment::class, 'foreign_key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:187
#: docs/master/eloquent-relationships.md:187
#, no-wrap
msgid "    return $this->hasMany(Comment::class, 'foreign_key', 'local_key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:189
#: docs/master/eloquent-relationships.md:189
#, no-wrap
msgid "<a name=\"one-to-many-inverse\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:189
#: docs/master/eloquent-relationships.md:189
#, no-wrap
msgid "One To Many (Inverse) / Belongs To"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:192
#: docs/master/eloquent-relationships.md:192
msgid "Now that we can access all of a post's comments, let's define a relationship to allow a comment to access its parent post. To define the inverse of a `hasMany` relationship, define a relationship method on the child model which calls the `belongsTo` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:209
#: docs/master/eloquent-relationships.md:209
#, no-wrap
msgid "    class Comment extends Model\n"
"    {\n"
"        /**\n"
"         * Get the post that owns the comment.\n"
"         */\n"
"        public function post()\n"
"        {\n"
"            return $this->belongsTo(Post::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:211
#: docs/master/eloquent-relationships.md:211
msgid "Once the relationship has been defined, we can retrieve a comment's parent post by accessing the `post` \"dynamic relationship property\":"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:213
#: docs/8.x/eloquent-relationships.md:796 docs/8.x/validation.md:332
#: docs/master/eloquent-relationships.md:213
#: docs/master/eloquent-relationships.md:796 docs/master/validation.md:319
#, no-wrap
msgid "    use App\\Models\\Comment;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:215
#: docs/8.x/eloquent-relationships.md:798
#: docs/master/eloquent-relationships.md:215
#: docs/master/eloquent-relationships.md:798
#, no-wrap
msgid "    $comment = Comment::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:217
#: docs/master/eloquent-relationships.md:217
#, no-wrap
msgid "    return $comment->post->title;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:219
#: docs/master/eloquent-relationships.md:219
msgid "In the example above, Eloquent will attempt to find a `Post` model that has an `id` which matches the `post_id` column on the `Comment` model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:221
#: docs/master/eloquent-relationships.md:221
msgid "Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with a `_` followed by the name of the parent model's primary key column. So, in this example, Eloquent will assume the `Post` model's foreign key on the `comments` table is `post_id`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:223
#: docs/master/eloquent-relationships.md:223
msgid "However, if the foreign key for your relationship does not follow these conventions, you may pass a custom foreign key name as the second argument to the `belongsTo` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:231
#: docs/master/eloquent-relationships.md:231
#, no-wrap
msgid "    /**\n"
"     * Get the post that owns the comment.\n"
"     */\n"
"    public function post()\n"
"    {\n"
"        return $this->belongsTo(Post::class, 'foreign_key');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:233
#: docs/master/eloquent-relationships.md:233
msgid "If your parent model does not use `id` as its primary key, or you wish to find the associated model using a different column, you may pass a third argument to the `belongsTo` method specifying your parent table's custom key:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:241
#: docs/master/eloquent-relationships.md:241
#, no-wrap
msgid "    /**\n"
"     * Get the post that owns the comment.\n"
"     */\n"
"    public function post()\n"
"    {\n"
"        return $this->belongsTo(Post::class, 'foreign_key', 'owner_key');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:243
#: docs/master/eloquent-relationships.md:243
#, no-wrap
msgid "<a name=\"default-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:243
#: docs/master/eloquent-relationships.md:243
#, no-wrap
msgid "Default Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:246
#: docs/master/eloquent-relationships.md:246
msgid "The `belongsTo`, `hasOne`, `hasOneThrough`, and `morphOne` relationships allow you to define a default model that will be returned if the given relationship is `null`. This pattern is often referred to as the [Null Object pattern](https://en.wikipedia.org/wiki/Null_Object_pattern) and can help remove conditional checks in your code. In the following example, the `user` relation will return an empty `App\\Models\\User` model if no user is attached to the `Post` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:254
#: docs/master/eloquent-relationships.md:254
#, no-wrap
msgid "    /**\n"
"     * Get the author of the post.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class)->withDefault();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:256
#: docs/master/eloquent-relationships.md:256
msgid "To populate the default model with attributes, you may pass an array or closure to the `withDefault` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:266
#: docs/master/eloquent-relationships.md:266
#, no-wrap
msgid "    /**\n"
"     * Get the author of the post.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class)->withDefault([\n"
"            'name' => 'Guest Author',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:276
#: docs/master/eloquent-relationships.md:276
#, no-wrap
msgid "    /**\n"
"     * Get the author of the post.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class)->withDefault(function ($user, $post) {\n"
"            $user->name = 'Guest Author';\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:278
#: docs/master/eloquent-relationships.md:278
#, no-wrap
msgid "<a name=\"has-one-through\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:278
#: docs/master/eloquent-relationships.md:278
#, no-wrap
msgid "Has One Through"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:281
#: docs/master/eloquent-relationships.md:281
msgid "The \"has-one-through\" relationship defines a one-to-one relationship with another model. However, this relationship indicates that the declaring model can be matched with one instance of another model by proceeding _through_ a third model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:283
#: docs/master/eloquent-relationships.md:283
msgid "For example, in a vehicle repair shop application, each `Mechanic` model may be associated with one `Car` model, and each `Car` model may be associated with one `Owner` model. While the mechanic and the owner have no direct relationship within the database, the mechanic can access the owner _through_ the `Car` model. Let's look at the tables necessary to define this relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:287
#: docs/master/eloquent-relationships.md:287
#, no-wrap
msgid "    mechanics\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:292
#: docs/master/eloquent-relationships.md:292
#, no-wrap
msgid "    cars\n"
"        id - integer\n"
"        model - string\n"
"        mechanic_id - integer\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:297
#: docs/master/eloquent-relationships.md:297
#, no-wrap
msgid "    owners\n"
"        id - integer\n"
"        name - string\n"
"        car_id - integer\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:299
#: docs/master/eloquent-relationships.md:299
msgid "Now that we have examined the table structure for the relationship, let's define the relationship on the `Mechanic` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:316
#: docs/master/eloquent-relationships.md:316
#, no-wrap
msgid "    class Mechanic extends Model\n"
"    {\n"
"        /**\n"
"         * Get the car's owner.\n"
"         */\n"
"        public function carOwner()\n"
"        {\n"
"            return $this->hasOneThrough(Owner::class, Car::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:318
#: docs/master/eloquent-relationships.md:318
msgid "The first argument passed to the `hasOneThrough` method is the name of the final model we wish to access, while the second argument is the name of the intermediate model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:320
#: docs/master/eloquent-relationships.md:320
#, no-wrap
msgid "<a name=\"has-one-through-key-conventions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:320
#: docs/8.x/eloquent-relationships.md:385
#: docs/8.x/eloquent-relationships.md:700
#: docs/master/eloquent-relationships.md:320
#: docs/master/eloquent-relationships.md:385
#: docs/master/eloquent-relationships.md:700
#, no-wrap
msgid "Key Conventions"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:323
#: docs/master/eloquent-relationships.md:323
msgid "Typical Eloquent foreign key conventions will be used when performing the relationship's queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the `hasOneThrough` method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:341
#: docs/master/eloquent-relationships.md:341
#, no-wrap
msgid "    class Mechanic extends Model\n"
"    {\n"
"        /**\n"
"         * Get the car's owner.\n"
"         */\n"
"        public function carOwner()\n"
"        {\n"
"            return $this->hasOneThrough(\n"
"                Owner::class,\n"
"                Car::class,\n"
"                'mechanic_id', // Foreign key on the cars table...\n"
"                'car_id', // Foreign key on the owners table...\n"
"                'id', // Local key on the mechanics table...\n"
"                'id' // Local key on the cars table...\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:343
#: docs/master/eloquent-relationships.md:343
#, no-wrap
msgid "<a name=\"has-many-through\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:343
#: docs/master/eloquent-relationships.md:343
#, no-wrap
msgid "Has Many Through"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:346
#: docs/master/eloquent-relationships.md:346
msgid "The \"has-many-through\" relationship provides a convenient way to access distant relations via an intermediate relation. For example, let's assume we are building a deployment platform like [Laravel Vapor](https://vapor.laravel.com). A `Project` model might access many `Deployment` models through an intermediate `Environment` model. Using this example, you could easily gather all deployments for a given environment. Let's look at the tables required to define this relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:350
#: docs/master/eloquent-relationships.md:350
#, no-wrap
msgid "    projects\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:355
#: docs/master/eloquent-relationships.md:355
#, no-wrap
msgid "    environments\n"
"        id - integer\n"
"        project_id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:360
#: docs/master/eloquent-relationships.md:360
#, no-wrap
msgid "    deployments\n"
"        id - integer\n"
"        environment_id - integer\n"
"        commit_hash - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:362
#: docs/master/eloquent-relationships.md:362
msgid "Now that we have examined the table structure for the relationship, let's define the relationship on the `Project` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:379
#: docs/master/eloquent-relationships.md:379
#, no-wrap
msgid "    class Project extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the deployments for the project.\n"
"         */\n"
"        public function deployments()\n"
"        {\n"
"            return $this->hasManyThrough(Deployment::class, Environment::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:381
#: docs/master/eloquent-relationships.md:381
msgid "The first argument passed to the `hasManyThrough` method is the name of the final model we wish to access, while the second argument is the name of the intermediate model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:383
#: docs/master/eloquent-relationships.md:383
#, no-wrap
msgid "Though the `Deployment` model's table does not contain a `project_id` column, the `hasManyThrough` relation provides access to a project's deployments via `$project->deployments`. To retrieve these models, Eloquent inspects the `project_id` column on the intermediate `Environment` model's table. After finding the relevant environment IDs, they are used to query the `Deployment` model's table.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:385
#: docs/master/eloquent-relationships.md:385
#, no-wrap
msgid "<a name=\"has-many-through-key-conventions\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:388
#: docs/master/eloquent-relationships.md:388
msgid "Typical Eloquent foreign key conventions will be used when performing the relationship's queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the `hasManyThrough` method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:403
#: docs/master/eloquent-relationships.md:403
#, no-wrap
msgid "    class Project extends Model\n"
"    {\n"
"        public function deployments()\n"
"        {\n"
"            return $this->hasManyThrough(\n"
"                Deployment::class,\n"
"                Environment::class,\n"
"                'project_id', // Foreign key on the environments table...\n"
"                'environment_id', // Foreign key on the deployments table...\n"
"                'id', // Local key on the projects table...\n"
"                'id' // Local key on the environments table...\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:405
#: docs/master/eloquent-relationships.md:405
#, no-wrap
msgid "<a name=\"many-to-many\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:408
#: docs/master/eloquent-relationships.md:408
msgid "Many-to-many relations are slightly more complicated than `hasOne` and `hasMany` relationships. An example of a many-to-many relationship is a user that has many roles and those roles are also shared by other users in the application. For example, a user may be assigned the role of \"Author\" and \"Editor\"; however, those roles may also be assigned to other users as well. So, a user has many roles and a role has many users."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:410
#: docs/master/eloquent-relationships.md:410
#, no-wrap
msgid "<a name=\"many-to-many-table-structure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:410
#: docs/8.x/eloquent-relationships.md:614
#: docs/8.x/eloquent-relationships.md:716
#: docs/8.x/eloquent-relationships.md:807
#: docs/master/eloquent-relationships.md:410
#: docs/master/eloquent-relationships.md:614
#: docs/master/eloquent-relationships.md:716
#: docs/master/eloquent-relationships.md:807
#, no-wrap
msgid "Table Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:413
#: docs/master/eloquent-relationships.md:413
msgid "To define this relationship, three database tables are needed: `users`, `roles`, and `role_user`. The `role_user` table is derived from the alphabetical order of the related model names and contains `user_id` and `role_id` columns. This table is used as an intermediate table linking the users and roles."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:415
#: docs/master/eloquent-relationships.md:415
msgid "Remember, since a role can belong to many users, we cannot simply place a `user_id` column on the `roles` table. This would mean that a role could only belong to a single user. In order to provide support for roles being assigned to multiple users, the `role_user` table is needed. We can summarize the relationship's table structure like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:419
#: docs/8.x/eloquent-relationships.md:625
#: docs/master/eloquent-relationships.md:419
#: docs/master/eloquent-relationships.md:625
#, no-wrap
msgid "    users\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:423
#: docs/master/eloquent-relationships.md:423
#, no-wrap
msgid "    roles\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:427
#: docs/master/eloquent-relationships.md:427
#, no-wrap
msgid "    role_user\n"
"        user_id - integer\n"
"        role_id - integer\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:429
#: docs/master/eloquent-relationships.md:429
#, no-wrap
msgid "<a name=\"many-to-many-model-structure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:429
#: docs/8.x/eloquent-relationships.md:635
#: docs/8.x/eloquent-relationships.md:737
#: docs/8.x/eloquent-relationships.md:831
#: docs/master/eloquent-relationships.md:429
#: docs/master/eloquent-relationships.md:635
#: docs/master/eloquent-relationships.md:737
#: docs/master/eloquent-relationships.md:831
#, no-wrap
msgid "Model Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:432
#: docs/master/eloquent-relationships.md:432
msgid "Many-to-many relationships are defined by writing a method that returns the result of the `belongsToMany` method. The `belongsToMany` method is provided by the `Illuminate\\Database\\Eloquent\\Model` base class that is used by all of your application's Eloquent models. For example, let's define a `roles` method on our `User` model. The first argument passed to this method is the name of the related model class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:449
#: docs/master/eloquent-relationships.md:449
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The roles that belong to the user.\n"
"         */\n"
"        public function roles()\n"
"        {\n"
"            return $this->belongsToMany(Role::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:451
#: docs/master/eloquent-relationships.md:451
msgid "Once the relationship is defined, you may access the user's roles using the `roles` dynamic relationship property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:459
#: docs/master/eloquent-relationships.md:459
#, no-wrap
msgid "    foreach ($user->roles as $role) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:461
#: docs/master/eloquent-relationships.md:461
msgid "Since all relationships also serve as query builders, you may add further constraints to the relationship query by calling the `roles` method and continuing to chain conditions onto the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:463
#: docs/master/eloquent-relationships.md:463
#, no-wrap
msgid "    $roles = User::find(1)->roles()->orderBy('name')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:465
#: docs/master/eloquent-relationships.md:465
msgid "To determine the table name of the relationship's intermediate table, Eloquent will join the two related model names in alphabetical order. However, you are free to override this convention. You may do so by passing a second argument to the `belongsToMany` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:467
#: docs/master/eloquent-relationships.md:467
#, no-wrap
msgid "    return $this->belongsToMany(Role::class, 'role_user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:469
#: docs/master/eloquent-relationships.md:469
msgid "In addition to customizing the name of the intermediate table, you may also customize the column names of the keys on the table by passing additional arguments to the `belongsToMany` method. The third argument is the foreign key name of the model on which you are defining the relationship, while the fourth argument is the foreign key name of the model that you are joining to:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:471
#: docs/master/eloquent-relationships.md:471
#, no-wrap
msgid "    return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:473
#: docs/master/eloquent-relationships.md:473
#, no-wrap
msgid "<a name=\"many-to-many-defining-the-inverse-of-the-relationship\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:476
#: docs/master/eloquent-relationships.md:476
msgid "To define the \"inverse\" of a many-to-many relationship, you should define a method on the related model which also returns the result of the `belongsToMany` method. To complete our user / role example, let's define the `users` method on the `Role` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:493
#: docs/master/eloquent-relationships.md:493
#, no-wrap
msgid "    class Role extends Model\n"
"    {\n"
"        /**\n"
"         * The users that belong to the role.\n"
"         */\n"
"        public function users()\n"
"        {\n"
"            return $this->belongsToMany(User::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:495
#: docs/master/eloquent-relationships.md:495
msgid "As you can see, the relationship is defined exactly the same as its `User` model counterpart with the exception of referencing the `App\\Models\\User` model. Since we're reusing the `belongsToMany` method, all of the usual table and key customization options are available when defining the \"inverse\" of many-to-many relationships."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:497
#: docs/master/eloquent-relationships.md:497
#, no-wrap
msgid "<a name=\"retrieving-intermediate-table-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:497
#: docs/master/eloquent-relationships.md:497
#, no-wrap
msgid "Retrieving Intermediate Table Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:500
#: docs/master/eloquent-relationships.md:500
msgid "As you have already learned, working with many-to-many relations requires the presence of an intermediate table. Eloquent provides some very helpful ways of interacting with this table. For example, let's assume our `User` model has many `Role` models that it is related to. After accessing this relationship, we may access the intermediate table using the `pivot` attribute on the models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:508
#: docs/master/eloquent-relationships.md:508
#, no-wrap
msgid "    foreach ($user->roles as $role) {\n"
"        echo $role->pivot->created_at;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:510
#: docs/master/eloquent-relationships.md:510
msgid "Notice that each `Role` model we retrieve is automatically assigned a `pivot` attribute. This attribute contains a model representing the intermediate table."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:512
#: docs/master/eloquent-relationships.md:512
msgid "By default, only the model keys will be present on the `pivot` model. If your intermediate table contains extra attributes, you must specify them when defining the relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:514
#: docs/master/eloquent-relationships.md:514
#, no-wrap
msgid "    return $this->belongsToMany(Role::class)->withPivot('active', 'created_by');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:516
#: docs/master/eloquent-relationships.md:516
msgid "If you would like your intermediate table to have `created_at` and `updated_at` timestamps that are automatically maintained by Eloquent, call the `withTimestamps` method when defining the relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:518
#: docs/master/eloquent-relationships.md:518
#, no-wrap
msgid "    return $this->belongsToMany(Role::class)->withTimestamps();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:520
#: docs/master/eloquent-relationships.md:520
#, no-wrap
msgid "> {note} Intermediate tables that utilize Eloquent's automatically maintained timestamps are required to have both `created_at` and `updated_at` timestamp columns.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:522
#: docs/master/eloquent-relationships.md:522
#, no-wrap
msgid "<a name=\"customizing-the-pivot-attribute-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:522
#: docs/master/eloquent-relationships.md:522
#, no-wrap
msgid "Customizing The `pivot` Attribute Name"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:525
#: docs/master/eloquent-relationships.md:525
msgid "As noted previously, attributes from the intermediate table may be accessed on models via the `pivot` attribute. However, you are free to customize the name of this attribute to better reflect its purpose within your application."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:527
#: docs/master/eloquent-relationships.md:527
msgid "For example, if your application contains users that may subscribe to podcasts, you likely have a many-to-many relationship between users and podcasts. If this is the case, you may wish to rename your intermediate table attribute to `subscription` instead of `pivot`. This can be done using the `as` method when defining the relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:531
#: docs/master/eloquent-relationships.md:531
#, no-wrap
msgid "    return $this->belongsToMany(Podcast::class)\n"
"                    ->as('subscription')\n"
"                    ->withTimestamps();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:533
#: docs/master/eloquent-relationships.md:533
msgid "Once the custom intermediate table attribute has been specified, you may access the intermediate table data using the customized name:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:535
#: docs/master/eloquent-relationships.md:535
#, no-wrap
msgid "    $users = User::with('podcasts')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:539
#: docs/master/eloquent-relationships.md:539
#, no-wrap
msgid "    foreach ($users->flatMap->podcasts as $podcast) {\n"
"        echo $podcast->subscription->created_at;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:541
#: docs/master/eloquent-relationships.md:541
#, no-wrap
msgid "<a name=\"filtering-queries-via-intermediate-table-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:541
#: docs/master/eloquent-relationships.md:541
#, no-wrap
msgid "Filtering Queries Via Intermediate Table Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:544
#: docs/master/eloquent-relationships.md:544
msgid "You can also filter the results returned by `belongsToMany` relationship queries using the `wherePivot`, `wherePivotIn`, and `wherePivotNotIn` methods when defining the relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:547
#: docs/master/eloquent-relationships.md:547
#, no-wrap
msgid "    return $this->belongsToMany(Role::class)\n"
"                    ->wherePivot('approved', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:550
#: docs/master/eloquent-relationships.md:550
#, no-wrap
msgid "    return $this->belongsToMany(Role::class)\n"
"                    ->wherePivotIn('priority', [1, 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:553
#: docs/master/eloquent-relationships.md:553
#, no-wrap
msgid "    return $this->belongsToMany(Role::class)\n"
"                    ->wherePivotNotIn('priority', [1, 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:555
#: docs/master/eloquent-relationships.md:555
#, no-wrap
msgid "<a name=\"defining-custom-intermediate-table-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:555
#: docs/master/eloquent-relationships.md:555
#, no-wrap
msgid "Defining Custom Intermediate Table Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:558
#: docs/master/eloquent-relationships.md:558
msgid "If you would like to define a custom model to represent the intermediate table of your many-to-many relationship, you may call the `using` method when defining the relationship. Custom pivot models give you the opportunity to define additional methods on the pivot model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:560
#: docs/master/eloquent-relationships.md:560
msgid "Custom many-to-many pivot models should extend the `Illuminate\\Database\\Eloquent\\Relations\\Pivot` class while custom polymorphic many-to-many pivot models should extend the `Illuminate\\Database\\Eloquent\\Relations\\MorphPivot` class. For example, we may define a `Role` model which uses a custom `RoleUser` pivot model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:577
#: docs/master/eloquent-relationships.md:577
#, no-wrap
msgid "    class Role extends Model\n"
"    {\n"
"        /**\n"
"         * The users that belong to the role.\n"
"         */\n"
"        public function users()\n"
"        {\n"
"            return $this->belongsToMany(User::class)->using(RoleUser::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:579
#: docs/master/eloquent-relationships.md:579
msgid "When defining the `RoleUser` model, you should extend the `Illuminate\\Database\\Eloquent\\Relations\\Pivot` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:585
#: docs/master/eloquent-relationships.md:585
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Relations\\Pivot;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:590
#: docs/master/eloquent-relationships.md:590
#, no-wrap
msgid "    class RoleUser extends Pivot\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:592
#: docs/master/eloquent-relationships.md:592
#, no-wrap
msgid "> {note} Pivot models may not use the `SoftDeletes` trait. If you need to soft delete pivot records consider converting your pivot model to an actual Eloquent model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:594
#: docs/master/eloquent-relationships.md:594
#, no-wrap
msgid "<a name=\"custom-pivot-models-and-incrementing-ids\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:594
#: docs/master/eloquent-relationships.md:594
#, no-wrap
msgid "Custom Pivot Models And Incrementing IDs"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:597
#: docs/master/eloquent-relationships.md:597
msgid "If you have defined a many-to-many relationship that uses a custom pivot model, and that pivot model has an auto-incrementing primary key, you should ensure your custom pivot model class defines an `incrementing` property that is set to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:604
#: docs/master/eloquent-relationships.md:604
#, no-wrap
msgid "    /**\n"
"     * Indicates if the IDs are auto-incrementing.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $incrementing = true;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:609
msgid "A polymorphic relationship allows the child model to belong to more than one type of model using a single association. For example, imagine you are building an application that allows users to share blog posts and videos. In such an application, a `Comment` model might belong to both the `Post` and `Video` models."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:611
#: docs/master/eloquent-relationships.md:611
#, no-wrap
msgid "<a name=\"one-to-one-polymorphic-relations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:611
#: docs/master/eloquent-relationships.md:611
#, no-wrap
msgid "One To One (Polymorphic)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:614
#: docs/master/eloquent-relationships.md:614
#, no-wrap
msgid "<a name=\"one-to-one-polymorphic-table-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:617
#: docs/master/eloquent-relationships.md:617
msgid "A one-to-one polymorphic relation is similar to a typical one-to-one relation; however, the child model can belong to more than one type of model using a single association. For example, a blog `Post` and a `User` may share a polymorphic relation to an `Image` model. Using a one-to-one polymorphic relation allows you to have a single table of unique images that may be associated with posts and users. First, let's examine the table structure:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:621
#: docs/8.x/eloquent-relationships.md:814
#: docs/master/eloquent-relationships.md:621
#: docs/master/eloquent-relationships.md:814
#, no-wrap
msgid "    posts\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:631
#: docs/master/eloquent-relationships.md:631
#, no-wrap
msgid "    images\n"
"        id - integer\n"
"        url - string\n"
"        imageable_id - integer\n"
"        imageable_type - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:633
#: docs/master/eloquent-relationships.md:633
msgid "Note the `imageable_id` and `imageable_type` columns on the `images` table. The `imageable_id` column will contain the ID value of the post or user, while the `imageable_type` column will contain the class name of the parent model. The `imageable_type` column is used by Eloquent to determine which \"type\" of parent model to return when accessing the `imageable` relation. In this case, the column would contain either `App\\Models\\Post` or `App\\Models\\User`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:635
#: docs/master/eloquent-relationships.md:635
#, no-wrap
msgid "<a name=\"one-to-one-polymorphic-model-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:638
#: docs/8.x/eloquent-relationships.md:740
#: docs/master/eloquent-relationships.md:638
#: docs/master/eloquent-relationships.md:740
msgid "Next, let's examine the model definitions needed to build this relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:655
#: docs/master/eloquent-relationships.md:655
#, no-wrap
msgid "    class Image extends Model\n"
"    {\n"
"        /**\n"
"         * Get the parent imageable model (user or post).\n"
"         */\n"
"        public function imageable()\n"
"        {\n"
"            return $this->morphTo();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:666
#: docs/master/eloquent-relationships.md:666
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        /**\n"
"         * Get the post's image.\n"
"         */\n"
"        public function image()\n"
"        {\n"
"            return $this->morphOne(Image::class, 'imageable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:677
#: docs/master/eloquent-relationships.md:677
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user's image.\n"
"         */\n"
"        public function image()\n"
"        {\n"
"            return $this->morphOne(Image::class, 'imageable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:679
#: docs/master/eloquent-relationships.md:679
#, no-wrap
msgid "<a name=\"one-to-one-polymorphic-retrieving-the-relationship\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:679
#: docs/8.x/eloquent-relationships.md:781
#: docs/8.x/eloquent-relationships.md:887
#: docs/master/eloquent-relationships.md:679
#: docs/master/eloquent-relationships.md:781
#: docs/master/eloquent-relationships.md:887
#, no-wrap
msgid "Retrieving The Relationship"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:682
#: docs/master/eloquent-relationships.md:682
msgid "Once your database table and models are defined, you may access the relationships via your models. For example, to retrieve the image for a post, we can access the `image` dynamic relationship property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:686
#: docs/8.x/eloquent-relationships.md:788
#: docs/8.x/eloquent-relationships.md:894
#: docs/8.x/eloquent-relationships.md:1522
#: docs/8.x/eloquent-relationships.md:1530
#: docs/8.x/eloquent-relationships.md:1551
#: docs/8.x/eloquent-relationships.md:1565
#: docs/8.x/eloquent-relationships.md:1573
#: docs/master/eloquent-relationships.md:686
#: docs/master/eloquent-relationships.md:788
#: docs/master/eloquent-relationships.md:894
#: docs/master/eloquent-relationships.md:1522
#: docs/master/eloquent-relationships.md:1530
#: docs/master/eloquent-relationships.md:1551
#: docs/master/eloquent-relationships.md:1565
#: docs/master/eloquent-relationships.md:1573
#, no-wrap
msgid "    $post = Post::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:688
#: docs/master/eloquent-relationships.md:688
#, no-wrap
msgid "    $image = $post->image;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:690
#: docs/master/eloquent-relationships.md:690
msgid "You may retrieve the parent of the polymorphic model by accessing the name of the method that performs the call to `morphTo`. In this case, that is the `imageable` method on the `Image` model. So, we will access that method as a dynamic relationship property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:692
#: docs/master/eloquent-relationships.md:692
#, no-wrap
msgid "    use App\\Models\\Image;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:694
#: docs/master/eloquent-relationships.md:694
#, no-wrap
msgid "    $image = Image::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:696
#: docs/master/eloquent-relationships.md:696
#, no-wrap
msgid "    $imageable = $image->imageable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:698
#: docs/master/eloquent-relationships.md:698
msgid "The `imageable` relation on the `Image` model will return either a `Post` or `User` instance, depending on which type of model owns the image."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:700
#: docs/master/eloquent-relationships.md:700
#, no-wrap
msgid "<a name=\"morph-one-to-one-key-conventions\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:703
#: docs/master/eloquent-relationships.md:703
msgid "If necessary, you may specify the name of the \"id\" and \"type\" columns utilized by your polymorphic child model. If you do so, ensure that you always pass the name of the relationship as the first argument to the `morphTo` method. Typically, this value should match the method name, so you may use PHP's `__FUNCTION__` constant:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:711
#: docs/master/eloquent-relationships.md:711
#, no-wrap
msgid "    /**\n"
"     * Get the model that the image belongs to.\n"
"     */\n"
"    public function imageable()\n"
"    {\n"
"        return $this->morphTo(__FUNCTION__, 'imageable_type', 'imageable_id');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:713
#: docs/master/eloquent-relationships.md:713
#, no-wrap
msgid "<a name=\"one-to-many-polymorphic-relations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:713
#: docs/master/eloquent-relationships.md:713
#, no-wrap
msgid "One To Many (Polymorphic)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:716
#: docs/master/eloquent-relationships.md:716
#, no-wrap
msgid "<a name=\"one-to-many-polymorphic-table-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:719
#: docs/master/eloquent-relationships.md:719
msgid "A one-to-many polymorphic relation is similar to a typical one-to-many relation; however, the child model can belong to more than one type of model using a single association. For example, imagine users of your application can \"comment\" on posts and videos. Using polymorphic relationships, you may use a single `comments` table to contain comments for both posts and videos. First, let's examine the table structure required to build this relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:724
#: docs/master/eloquent-relationships.md:724
#, no-wrap
msgid "    posts\n"
"        id - integer\n"
"        title - string\n"
"        body - text\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:729
#: docs/master/eloquent-relationships.md:729
#, no-wrap
msgid "    videos\n"
"        id - integer\n"
"        title - string\n"
"        url - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:735
#: docs/master/eloquent-relationships.md:735
#, no-wrap
msgid "    comments\n"
"        id - integer\n"
"        body - text\n"
"        commentable_id - integer\n"
"        commentable_type - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:737
#: docs/master/eloquent-relationships.md:737
#, no-wrap
msgid "<a name=\"one-to-many-polymorphic-model-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:757
#: docs/master/eloquent-relationships.md:757
#, no-wrap
msgid "    class Comment extends Model\n"
"    {\n"
"        /**\n"
"         * Get the parent commentable model (post or video).\n"
"         */\n"
"        public function commentable()\n"
"        {\n"
"            return $this->morphTo();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:768
#: docs/master/eloquent-relationships.md:768
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the post's comments.\n"
"         */\n"
"        public function comments()\n"
"        {\n"
"            return $this->morphMany(Comment::class, 'commentable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:779
#: docs/master/eloquent-relationships.md:779
#, no-wrap
msgid "    class Video extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the video's comments.\n"
"         */\n"
"        public function comments()\n"
"        {\n"
"            return $this->morphMany(Comment::class, 'commentable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:781
#: docs/master/eloquent-relationships.md:781
#, no-wrap
msgid "<a name=\"one-to-many-polymorphic-retrieving-the-relationship\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:784
#: docs/master/eloquent-relationships.md:784
msgid "Once your database table and models are defined, you may access the relationships via your model's dynamic relationship properties. For example, to access all of the comments for a post, we can use the `comments` dynamic property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:792
#: docs/master/eloquent-relationships.md:792
#, no-wrap
msgid "    foreach ($post->comments as $comment) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:794
#: docs/master/eloquent-relationships.md:794
msgid "You may also retrieve the parent of a polymorphic child model by accessing the name of the method that performs the call to `morphTo`. In this case, that is the `commentable` method on the `Comment` model. So, we will access that method as a dynamic relationship property in order to access the comment's parent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:800
#: docs/master/eloquent-relationships.md:800
#, no-wrap
msgid "    $commentable = $comment->commentable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:802
#: docs/master/eloquent-relationships.md:802
msgid "The `commentable` relation on the `Comment` model will return either a `Post` or `Video` instance, depending on which type of model is the comment's parent."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:804
#: docs/master/eloquent-relationships.md:804
#, no-wrap
msgid "<a name=\"many-to-many-polymorphic-relations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:804
#: docs/master/eloquent-relationships.md:804
#, no-wrap
msgid "Many To Many (Polymorphic)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:807
#: docs/master/eloquent-relationships.md:807
#, no-wrap
msgid "<a name=\"many-to-many-polymorphic-table-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:810
#: docs/master/eloquent-relationships.md:810
msgid "Many-to-many polymorphic relations are slightly more complicated than \"morph one\" and \"morph many\" relationships. For example, a `Post` model and `Video` model could share a polymorphic relation to a `Tag` model. Using a many-to-many polymorphic relation in this situation would allow your application to have a single table of unique tags that may be associated with posts or videos. First, let's examine the table structure required to build this relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:818
#: docs/master/eloquent-relationships.md:818
#, no-wrap
msgid "    videos\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:822
#: docs/master/eloquent-relationships.md:822
#, no-wrap
msgid "    tags\n"
"        id - integer\n"
"        name - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:827
#: docs/master/eloquent-relationships.md:827
#, no-wrap
msgid "    taggables\n"
"        tag_id - integer\n"
"        taggable_id - integer\n"
"        taggable_type - string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:829
#: docs/master/eloquent-relationships.md:829
#, no-wrap
msgid "> {tip} Before diving into polymorphic many-to-many relationships, you may benefit from reading the documentation on typical [many-to-many relationships](#many-to-many).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:831
#: docs/master/eloquent-relationships.md:831
#, no-wrap
msgid "<a name=\"many-to-many-polymorphic-model-structure\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:834
#: docs/master/eloquent-relationships.md:834
msgid "Next, we're ready to define the relationships on the models. The `Post` and `Video` models will both contain a `tags` method that calls the `morphToMany` method provided by the base Eloquent model class."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:836
#: docs/master/eloquent-relationships.md:836
msgid "The `morphToMany` method accepts the name of the related model as well as the \"relationship name\". Based on the name we assigned to our intermediate table name and the keys it contains, we will refer to the relationship as \"taggable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:853
#: docs/master/eloquent-relationships.md:853
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the tags for the post.\n"
"         */\n"
"        public function tags()\n"
"        {\n"
"            return $this->morphToMany(Tag::class, 'taggable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:855
#: docs/master/eloquent-relationships.md:855
#, no-wrap
msgid "<a name=\"many-to-many-polymorphic-defining-the-inverse-of-the-relationship\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:858
#: docs/master/eloquent-relationships.md:858
msgid "Next, on the `Tag` model, you should define a method for each of its possible parent models. So, in this example, we will define a `posts` method and a `videos` method. Both of these methods should return the result of the `morphedByMany` method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:860
#: docs/master/eloquent-relationships.md:860
msgid "The `morphedByMany` method accepts the name of the related model as well as the \"relationship name\". Based on the name we assigned to our intermediate table name and the keys it contains, we will refer to the relationship as \"taggable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:876
#: docs/master/eloquent-relationships.md:876
#, no-wrap
msgid "    class Tag extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the posts that are assigned this tag.\n"
"         */\n"
"        public function posts()\n"
"        {\n"
"            return $this->morphedByMany(Post::class, 'taggable');\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:885
#: docs/master/eloquent-relationships.md:885
#, no-wrap
msgid "        /**\n"
"         * Get all of the videos that are assigned this tag.\n"
"         */\n"
"        public function videos()\n"
"        {\n"
"            return $this->morphedByMany(Video::class, 'taggable');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:887
#: docs/master/eloquent-relationships.md:887
#, no-wrap
msgid "<a name=\"many-to-many-polymorphic-retrieving-the-relationship\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:890
#: docs/master/eloquent-relationships.md:890
msgid "Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the tags for a post, you may use the `tags` dynamic relationship property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:898
#: docs/master/eloquent-relationships.md:898
#, no-wrap
msgid "    foreach ($post->tags as $tag) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:900
#: docs/master/eloquent-relationships.md:900
msgid "You may retrieve the parent of a polymorphic relation from the polymorphic child model by accessing the name of the method that performs the call to `morphedByMany`. In this case, that is the `posts` or `videos` methods on the `Tag` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:902
#: docs/master/eloquent-relationships.md:902
#, no-wrap
msgid "    use App\\Models\\Tag;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:904
#: docs/master/eloquent-relationships.md:904
#, no-wrap
msgid "    $tag = Tag::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:908
#: docs/master/eloquent-relationships.md:908
#, no-wrap
msgid "    foreach ($tag->posts as $post) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:912
#: docs/master/eloquent-relationships.md:912
#, no-wrap
msgid "    foreach ($tag->videos as $video) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:914
#: docs/master/eloquent-relationships.md:914
#, no-wrap
msgid "<a name=\"custom-polymorphic-types\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:914
#: docs/master/eloquent-relationships.md:914
#, no-wrap
msgid "Custom Polymorphic Types"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:917
#: docs/master/eloquent-relationships.md:917
msgid "By default, Laravel will use the fully qualified class name to store the \"type\" of the related model. For instance, given the one-to-many relationship example above where a `Comment` model may belong to a `Post` or a `Video` model, the default `commentable_type` would be either `App\\Models\\Post` or `App\\Models\\Video`, respectively. However, you may wish to decouple these values from your application's internal structure."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:919
#: docs/master/eloquent-relationships.md:919
msgid "For example, instead of using the model names as the \"type\", we may use simple strings such as `post` and `video`. By doing so, the polymorphic \"type\" column values in our database will remain valid even if the models are renamed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:921
#: docs/8.x/eloquent-relationships.md:932
#: docs/master/eloquent-relationships.md:921
#: docs/master/eloquent-relationships.md:932
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Relations\\Relation;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:926
#: docs/master/eloquent-relationships.md:926
#, no-wrap
msgid "    Relation::morphMap([\n"
"        'post' => 'App\\Models\\Post',\n"
"        'video' => 'App\\Models\\Video',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:928
#: docs/master/eloquent-relationships.md:928
msgid "You may register the `morphMap` in the `boot` function of your `App\\Providers\\AppServiceProvider` class or create a separate service provider if you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:930
#: docs/master/eloquent-relationships.md:930
msgid "You may determine the morph alias of a given model at runtime using the model's `getMorphClass` method. Conversely, you may determine the fully-qualified class name associated with a morph alias using the `Relation::getMorphedModel` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:934
#: docs/master/eloquent-relationships.md:934
#, no-wrap
msgid "    $alias = $post->getMorphClass();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:936
#: docs/master/eloquent-relationships.md:936
#, no-wrap
msgid "    $class = Relation::getMorphedModel($alias);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:938
#: docs/master/eloquent-relationships.md:938
#, no-wrap
msgid "> {note} When adding a \"morph map\" to your existing application, every morphable `*_type` column value in your database that still contains a fully-qualified class will need to be converted to its \"map\" name.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:940
#: docs/master/eloquent-relationships.md:940
#, no-wrap
msgid "<a name=\"dynamic-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:940
#: docs/master/eloquent-relationships.md:940
#, no-wrap
msgid "Dynamic Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:943
#: docs/master/eloquent-relationships.md:943
msgid "You may use the `resolveRelationUsing` method to define relations between Eloquent models at runtime. While not typically recommended for normal application development, this may occasionally be useful when developing Laravel packages."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:945
msgid "The `resolveRelationUsing` method accepts the desired relationship name as its first argument. The second argument passed to the method should be a closure that accepts the model instance and returns a valid Eloquent relationship definition. Typically, you should configure dynamic relationships within the boot method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:948
#: docs/master/eloquent-relationships.md:948
#, no-wrap
msgid "    use App\\Models\\Order;\n"
"    use App\\Models\\Customer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:952
#: docs/master/eloquent-relationships.md:952
#, no-wrap
msgid "    Order::resolveRelationUsing('customer', function ($orderModel) {\n"
"        return $orderModel->belongsTo(Customer::class, 'customer_id');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:954
#: docs/master/eloquent-relationships.md:954
#, no-wrap
msgid "> {note} When defining dynamic relationships, always provide explicit key name arguments to the Eloquent relationship methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:956
#: docs/master/eloquent-relationships.md:956
#, no-wrap
msgid "<a name=\"querying-relations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:956
#: docs/master/eloquent-relationships.md:956
#, no-wrap
msgid "Querying Relations"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:959
#: docs/master/eloquent-relationships.md:959
msgid "Since all Eloquent relationships are defined via methods, you may call those methods to obtain an instance of the relationship without actually executing a query to load the related models. In addition, all types of Eloquent relationships also serve as [query builders](/docs/{{version}}/queries), allowing you to continue to chain constraints onto the relationship query before finally executing the SQL query against your database."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:961
#: docs/master/eloquent-relationships.md:961
msgid "For example, imagine a blog application in which a `User` model has many associated `Post` models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:978
#: docs/master/eloquent-relationships.md:978
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get all of the posts for the user.\n"
"         */\n"
"        public function posts()\n"
"        {\n"
"            return $this->hasMany(Post::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:980
#: docs/master/eloquent-relationships.md:980
msgid "You may query the `posts` relationship and add additional constraints to the relationship like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:988
#: docs/master/eloquent-relationships.md:988
msgid "You are able to use any of the Laravel [query builder's](/docs/{{version}}/queries) methods on the relationship, so be sure to explore the query builder documentation to learn about all of the methods that are available to you."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:990
#: docs/master/eloquent-relationships.md:990
#, no-wrap
msgid "<a name=\"chaining-orwhere-clauses-after-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:990
#: docs/master/eloquent-relationships.md:990
#, no-wrap
msgid "Chaining `orWhere` Clauses After Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:993
#: docs/master/eloquent-relationships.md:993
msgid "As demonstrated in the example above, you are free to add additional constraints to relationships when querying them. However, use caution when chaining `orWhere` clauses onto a relationship, as the `orWhere` clauses will be logically grouped at the same level as the relationship constraint:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:998
#: docs/master/eloquent-relationships.md:998
#, no-wrap
msgid "    $user->posts()\n"
"            ->where('active', 1)\n"
"            ->orWhere('votes', '>=', 100)\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1000
#: docs/master/eloquent-relationships.md:1000
msgid "The example above will generate the following SQL. As you can see, the `or` clause instructs the query to return _any_ user with greater than 100 votes. The query is no longer constrained to a specific user:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/eloquent-relationships.md:1001
#: docs/master/eloquent-relationships.md:1001
#, no-wrap
msgid "select *\n"
"from posts\n"
"where user_id = ? and active = 1 or votes >= 100\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1008
#: docs/master/eloquent-relationships.md:1008
msgid "In most situations, you should use [logical groups](/docs/{{version}}/queries#logical-grouping) to group the conditional checks between parentheses:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1010
#: docs/8.x/eloquent-relationships.md:1064
#: docs/8.x/eloquent-relationships.md:1089
#: docs/8.x/eloquent-relationships.md:1097
#: docs/8.x/eloquent-relationships.md:1133
#: docs/8.x/eloquent-relationships.md:1150
#: docs/8.x/eloquent-relationships.md:1174
#: docs/8.x/eloquent-relationships.md:1185
#: docs/master/eloquent-relationships.md:1010
#: docs/master/eloquent-relationships.md:1064
#: docs/master/eloquent-relationships.md:1089
#: docs/master/eloquent-relationships.md:1097
#: docs/master/eloquent-relationships.md:1133
#: docs/master/eloquent-relationships.md:1150
#: docs/master/eloquent-relationships.md:1174
#: docs/master/eloquent-relationships.md:1185
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1017
#: docs/master/eloquent-relationships.md:1017
#, no-wrap
msgid "    $user->posts()\n"
"            ->where(function (Builder $query) {\n"
"                return $query->where('active', 1)\n"
"                             ->orWhere('votes', '>=', 100);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1019
#: docs/master/eloquent-relationships.md:1019
msgid "The example above will produce the following SQL. Note that the logical grouping has properly grouped the constraints and the query remains constrained to a specific user:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/eloquent-relationships.md:1020
#: docs/master/eloquent-relationships.md:1020
#, no-wrap
msgid "select *\n"
"from posts\n"
"where user_id = ? and (active = 1 or votes >= 100)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1027
#: docs/master/eloquent-relationships.md:1027
#, no-wrap
msgid "<a name=\"relationship-methods-vs-dynamic-properties\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1027
#: docs/master/eloquent-relationships.md:1027
#, no-wrap
msgid "Relationship Methods Vs. Dynamic Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1030
#: docs/master/eloquent-relationships.md:1030
msgid "If you do not need to add additional constraints to an Eloquent relationship query, you may access the relationship as if it were a property. For example, continuing to use our `User` and `Post` example models, we may access all of a user's posts like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1038
#: docs/master/eloquent-relationships.md:1038
#, no-wrap
msgid "    foreach ($user->posts as $post) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1040
#: docs/master/eloquent-relationships.md:1040
msgid "Dynamic relationship properties perform \"lazy loading\", meaning they will only load their relationship data when you actually access them. Because of this, developers often use [eager loading](#eager-loading) to pre-load relationships they know will be accessed after loading the model. Eager loading provides a significant reduction in SQL queries that must be executed to load a model's relations."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1042
#: docs/master/eloquent-relationships.md:1042
#, no-wrap
msgid "<a name=\"querying-relationship-existence\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1042
#: docs/master/eloquent-relationships.md:1042
#, no-wrap
msgid "Querying Relationship Existence"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1045
#: docs/master/eloquent-relationships.md:1045
msgid "When retrieving model records, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the `has` and `orHas` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1050
#: docs/master/eloquent-relationships.md:1050
#, no-wrap
msgid "    // Retrieve all posts that have at least one comment...\n"
"    $posts = Post::has('comments')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1052
#: docs/master/eloquent-relationships.md:1052
msgid "You may also specify an operator and count value to further customize the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1055
#: docs/master/eloquent-relationships.md:1055
#, no-wrap
msgid "    // Retrieve all posts that have three or more comments...\n"
"    $posts = Post::has('comments', '>=', 3)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1057
#: docs/master/eloquent-relationships.md:1057
msgid "Nested `has` statements may be constructed using \"dot\" notation. For example, you may retrieve all posts that have at least one comment that has at least one image:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1060
#: docs/master/eloquent-relationships.md:1060
#, no-wrap
msgid "    // Retrieve posts that have at least one comment with images...\n"
"    $posts = Post::has('comments.images')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1062
#: docs/master/eloquent-relationships.md:1062
msgid "If you need even more power, you may use the `whereHas` and `orWhereHas` methods to define additional query constraints on your `has` queries, such as inspecting the content of a comment:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1069
#: docs/master/eloquent-relationships.md:1069
#, no-wrap
msgid "    // Retrieve posts with at least one comment containing words like code%...\n"
"    $posts = Post::whereHas('comments', function (Builder $query) {\n"
"        $query->where('content', 'like', 'code%');\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1074
#: docs/master/eloquent-relationships.md:1074
#, no-wrap
msgid "    // Retrieve posts with at least ten comments containing words like code%...\n"
"    $posts = Post::whereHas('comments', function (Builder $query) {\n"
"        $query->where('content', 'like', 'code%');\n"
"    }, '>=', 10)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1076
#: docs/master/eloquent-relationships.md:1076
#, no-wrap
msgid "> {note} Eloquent does not currently support querying for relationship existence across databases. The relationships must exist within the same database.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1078
#: docs/master/eloquent-relationships.md:1078
#, no-wrap
msgid "<a name=\"querying-relationship-absence\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1078
#: docs/master/eloquent-relationships.md:1078
#, no-wrap
msgid "Querying Relationship Absence"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1081
#: docs/master/eloquent-relationships.md:1081
msgid "When retrieving model records, you may wish to limit your results based on the absence of a relationship. For example, imagine you want to retrieve all blog posts that **don't** have any comments. To do so, you may pass the name of the relationship to the `doesntHave` and `orDoesntHave` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1085
#: docs/master/eloquent-relationships.md:1085
#, no-wrap
msgid "    $posts = Post::doesntHave('comments')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1087
#: docs/master/eloquent-relationships.md:1087
msgid "If you need even more power, you may use the `whereDoesntHave` and `orWhereDoesntHave` methods to add additional query constraints to your `doesntHave` queries, such as inspecting the content of a comment:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1093
#: docs/master/eloquent-relationships.md:1093
#, no-wrap
msgid "    $posts = Post::whereDoesntHave('comments', function (Builder $query) {\n"
"        $query->where('content', 'like', 'code%');\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1095
#: docs/master/eloquent-relationships.md:1095
msgid "You may use \"dot\" notation to execute a query against a nested relationship. For example, the following query will retrieve all posts that do not have comments; however, posts that have comments from authors that are not banned will be included in the results:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1101
#: docs/master/eloquent-relationships.md:1101
#, no-wrap
msgid "    $posts = Post::whereDoesntHave('comments.author', function (Builder $query) {\n"
"        $query->where('banned', 0);\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1103
#: docs/master/eloquent-relationships.md:1103
#, no-wrap
msgid "<a name=\"querying-morph-to-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1103
#: docs/master/eloquent-relationships.md:1103
#, no-wrap
msgid "Querying Morph To Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1106
#: docs/master/eloquent-relationships.md:1106
msgid "To query the existence of \"morph to\" relationships, you may use the `whereHasMorph` and `whereDoesntHaveMorph` methods. These methods accept the name of the relationship as their first argument. Next, the methods accept the names of the related models that you wish to include in the query. Finally, you may provide a closure which customizes the relationship query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1111
#: docs/master/eloquent-relationships.md:1111
#, no-wrap
msgid "    use App\\Models\\Comment;\n"
"    use App\\Models\\Post;\n"
"    use App\\Models\\Video;\n"
"    use Illuminate\\Database\\Eloquent\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1120
#: docs/master/eloquent-relationships.md:1120
#, no-wrap
msgid "    // Retrieve comments associated to posts or videos with a title like code%...\n"
"    $comments = Comment::whereHasMorph(\n"
"        'commentable',\n"
"        [Post::class, Video::class],\n"
"        function (Builder $query) {\n"
"            $query->where('title', 'like', 'code%');\n"
"        }\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1129
#: docs/master/eloquent-relationships.md:1129
#, no-wrap
msgid "    // Retrieve comments associated to posts with a title not like code%...\n"
"    $comments = Comment::whereDoesntHaveMorph(\n"
"        'commentable',\n"
"        Post::class,\n"
"        function (Builder $query) {\n"
"            $query->where('title', 'like', 'code%');\n"
"        }\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1131
#: docs/master/eloquent-relationships.md:1131
msgid "You may occasionally need to add query constraints based on the \"type\" of the related polymorphic model. The closure passed to the `whereHasMorph` method may receive a `$type` value as its second argument. This argument allows you to inspect the \"type\" of the query that is being built:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1139
#: docs/master/eloquent-relationships.md:1139
#, no-wrap
msgid "    $comments = Comment::whereHasMorph(\n"
"        'commentable',\n"
"        [Post::class, Video::class],\n"
"        function (Builder $query, $type) {\n"
"            $column = $type === Post::class ? 'content' : 'title';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1143
#: docs/master/eloquent-relationships.md:1143
#, no-wrap
msgid "            $query->where($column, 'like', 'code%');\n"
"        }\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1145
#: docs/master/eloquent-relationships.md:1145
#, no-wrap
msgid "<a name=\"querying-all-morph-to-related-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1145
#: docs/master/eloquent-relationships.md:1145
#, no-wrap
msgid "Querying All Related Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1148
#: docs/master/eloquent-relationships.md:1148
msgid "Instead of passing an array of possible polymorphic models, you may provide `*` as a wildcard value. This will instruct Laravel to retrieve all of the possible polymorphic types from the database. Laravel will execute an additional query in order to perform this operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1154
#: docs/master/eloquent-relationships.md:1154
#, no-wrap
msgid "    $comments = Comment::whereHasMorph('commentable', '*', function (Builder $query) {\n"
"        $query->where('title', 'like', 'foo%');\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1156
#: docs/master/eloquent-relationships.md:1156
#, no-wrap
msgid "<a name=\"aggregating-related-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:1156
#: docs/master/eloquent-relationships.md:1156
#, no-wrap
msgid "Aggregating Related Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1159
#: docs/master/eloquent-relationships.md:1159
#, no-wrap
msgid "<a name=\"counting-related-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1159
#: docs/master/eloquent-relationships.md:1159
#, no-wrap
msgid "Counting Related Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1162
#: docs/master/eloquent-relationships.md:1162
msgid "Sometimes you may want to count the number of related models for a given relationship without actually loading the models. To accomplish this, you may use the `withCount` method. The `withCount` method which will place a `{relation}_count` attribute on the resulting models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1166
#: docs/master/eloquent-relationships.md:1166
#, no-wrap
msgid "    $posts = Post::withCount('comments')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1170
#: docs/master/eloquent-relationships.md:1170
#, no-wrap
msgid "    foreach ($posts as $post) {\n"
"        echo $post->comments_count;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1172
#: docs/master/eloquent-relationships.md:1172
msgid "By passing an array to the `withCount` method, you may add the \"counts\" for multiple relations as well as add additional constraints to the queries:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1178
#: docs/master/eloquent-relationships.md:1178
#, no-wrap
msgid "    $posts = Post::withCount(['votes', 'comments' => function (Builder $query) {\n"
"        $query->where('content', 'like', 'code%');\n"
"    }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1181
#: docs/master/eloquent-relationships.md:1181
#, no-wrap
msgid "    echo $posts[0]->votes_count;\n"
"    echo $posts[0]->comments_count;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1183
#: docs/master/eloquent-relationships.md:1183
msgid "You may also alias the relationship count result, allowing multiple counts on the same relationship:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1192
#: docs/master/eloquent-relationships.md:1192
#, no-wrap
msgid "    $posts = Post::withCount([\n"
"        'comments',\n"
"        'comments as pending_comments_count' => function (Builder $query) {\n"
"            $query->where('approved', false);\n"
"        },\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1195
#: docs/master/eloquent-relationships.md:1195
#, no-wrap
msgid "    echo $posts[0]->comments_count;\n"
"    echo $posts[0]->pending_comments_count;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1197
#: docs/master/eloquent-relationships.md:1197
#, no-wrap
msgid "<a name=\"deferred-count-loading\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1197
#: docs/8.x/eloquent-relationships.md:1259
#: docs/master/eloquent-relationships.md:1197
#: docs/master/eloquent-relationships.md:1259
#, no-wrap
msgid "Deferred Count Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1200
#: docs/master/eloquent-relationships.md:1200
msgid "Using the `loadCount` method, you may load a relationship count after the parent model has already been retrieved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1202
#: docs/master/eloquent-relationships.md:1202
#, no-wrap
msgid "    $book = Book::first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1204
#: docs/master/eloquent-relationships.md:1204
#, no-wrap
msgid "    $book->loadCount('genres');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1206
#: docs/master/eloquent-relationships.md:1206
msgid "If you need to set additional query constraints on the count query, you may pass an array keyed by the relationships you wish to count. The array values should be closures which receive the query builder instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1210
#: docs/master/eloquent-relationships.md:1210
#, no-wrap
msgid "    $book->loadCount(['reviews' => function ($query) {\n"
"        $query->where('rating', 5);\n"
"    }])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1212
#: docs/master/eloquent-relationships.md:1212
#, no-wrap
msgid "<a name=\"relationship-counting-and-custom-select-statements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1212
#: docs/master/eloquent-relationships.md:1212
#, no-wrap
msgid "Relationship Counting & Custom Select Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1215
#: docs/master/eloquent-relationships.md:1215
msgid "If you're combining `withCount` with a `select` statement, ensure that you call `withCount` after the `select` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1219
#: docs/master/eloquent-relationships.md:1219
#, no-wrap
msgid "    $posts = Post::select(['title', 'body'])\n"
"                    ->withCount('comments')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1221
#: docs/master/eloquent-relationships.md:1221
#, no-wrap
msgid "<a name=\"other-aggregate-functions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1221
#: docs/master/eloquent-relationships.md:1221
#, no-wrap
msgid "Other Aggregate Functions"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1224
#: docs/master/eloquent-relationships.md:1224
msgid "In addition to the `withCount` method, Eloquent provides `withMin`, `withMax`, `withAvg`, and `withSum` methods. These methods will place a `{relation}_{function}_{column}` attribute on your resulting models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1228
#: docs/master/eloquent-relationships.md:1228
#, no-wrap
msgid "    $posts = Post::withSum('comments', 'votes')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1232
#: docs/master/eloquent-relationships.md:1232
#, no-wrap
msgid "    foreach ($posts as $post) {\n"
"        echo $post->comments_sum_votes;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1234
#: docs/master/eloquent-relationships.md:1234
msgid "Like the `loadCount` method, deferred versions of these methods are also available. These additional aggregate operations may be performed on Eloquent models that have already been retrieved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1236
#: docs/master/eloquent-relationships.md:1236
#, no-wrap
msgid "    $post = Post::first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1238
#: docs/master/eloquent-relationships.md:1238
#, no-wrap
msgid "    $post->loadSum('comments', 'votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1240
#: docs/master/eloquent-relationships.md:1240
#, no-wrap
msgid "<a name=\"counting-related-models-on-morph-to-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1240
#: docs/master/eloquent-relationships.md:1240
#, no-wrap
msgid "Counting Related Models On Morph To Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1243
#: docs/master/eloquent-relationships.md:1243
msgid "If you would like to eager load a \"morph to\" relationship, as well as related model counts for the various entities that may be returned by that relationship, you may utilize the `with` method in combination with the `morphTo` relationship's `morphWithCount` method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1245
#: docs/master/eloquent-relationships.md:1245
msgid "In this example, let's assume that `Photo` and `Post` models may create `ActivityFeed` models. We will assume the `ActivityFeed` model defines a \"morph to\" relationship named `parentable` that allows us to retrieve the parent `Photo` or `Post` model for a given `ActivityFeed` instance. Additionally, let's assume that `Photo` models \"have many\" `Tag` models and `Post` models \"have many\" `Comment` models."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1247
#: docs/master/eloquent-relationships.md:1247
msgid "Now, let's imagine we want to retrieve `ActivityFeed` instances and eager load the `parentable` parent models for each `ActivityFeed` instance. In addition, we want to retrieve the number of tags that are associated with each parent photo and the number of comments that are associated with each parent post:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1249
#: docs/8.x/eloquent-relationships.md:1359
#: docs/master/eloquent-relationships.md:1249
#: docs/master/eloquent-relationships.md:1359
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1257
#: docs/master/eloquent-relationships.md:1257
#, no-wrap
msgid "    $activities = ActivityFeed::with([\n"
"        'parentable' => function (MorphTo $morphTo) {\n"
"            $morphTo->morphWithCount([\n"
"                Photo::class => ['tags'],\n"
"                Post::class => ['comments'],\n"
"            ]);\n"
"        }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1259
#: docs/master/eloquent-relationships.md:1259
#, no-wrap
msgid "<a name=\"morph-to-deferred-count-loading\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1262
#: docs/master/eloquent-relationships.md:1262
msgid "Let's assume we have already retrieved a set of `ActivityFeed` models and now we would like to load the nested relationship counts for the various `parentable` models associated with the activity feeds. You may use the `loadMorphCount` method to accomplish this:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1264
#: docs/master/eloquent-relationships.md:1264
#, no-wrap
msgid "    $activities = ActivityFeed::with('parentable')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1269
#: docs/master/eloquent-relationships.md:1269
#, no-wrap
msgid "    $activities->loadMorphCount('parentable', [\n"
"        Photo::class => ['tags'],\n"
"        Post::class => ['comments'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1271
#: docs/master/eloquent-relationships.md:1271
#, no-wrap
msgid "<a name=\"eager-loading\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:1271
#: docs/master/eloquent-relationships.md:1271
#, no-wrap
msgid "Eager Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1274
#: docs/master/eloquent-relationships.md:1274
msgid "When accessing Eloquent relationships as properties, the related models are \"lazy loaded\". This means the relationship data is not actually loaded until you first access the property. However, Eloquent can \"eager load\" relationships at the time you query the parent model. Eager loading alleviates the \"N + 1\" query problem. To illustrate the N + 1 query problem, consider a `Book` model that \"belongs to\" to an `Author` model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1291
#: docs/master/eloquent-relationships.md:1291
#, no-wrap
msgid "    class Book extends Model\n"
"    {\n"
"        /**\n"
"         * Get the author that wrote the book.\n"
"         */\n"
"        public function author()\n"
"        {\n"
"            return $this->belongsTo(Author::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1293
#: docs/master/eloquent-relationships.md:1293
msgid "Now, let's retrieve all books and their authors:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1295
#: docs/8.x/eloquent-relationships.md:1457
#: docs/master/eloquent-relationships.md:1295
#: docs/master/eloquent-relationships.md:1457
#, no-wrap
msgid "    use App\\Models\\Book;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1297
#: docs/8.x/eloquent-relationships.md:1459
#: docs/master/eloquent-relationships.md:1297
#: docs/master/eloquent-relationships.md:1459
#, no-wrap
msgid "    $books = Book::all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1301
#: docs/8.x/eloquent-relationships.md:1311
#: docs/master/eloquent-relationships.md:1301
#: docs/master/eloquent-relationships.md:1311
#, no-wrap
msgid "    foreach ($books as $book) {\n"
"        echo $book->author->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1303
#: docs/master/eloquent-relationships.md:1303
msgid "This loop will execute one query to retrieve all of the books within the database table, then another query for each book in order to retrieve the book's author. So, if we have 25 books, the code above would run 26 queries: one for the original book, and 25 additional queries to retrieve the author of each book."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1305
#: docs/master/eloquent-relationships.md:1305
msgid "Thankfully, we can use eager loading to reduce this operation to just two queries. When building a query, you may specify which relationships should be eager loaded using the `with` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1307
#: docs/master/eloquent-relationships.md:1307
#, no-wrap
msgid "    $books = Book::with('author')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1313
#: docs/master/eloquent-relationships.md:1313
msgid "For this operation, only two queries will be executed - one query to retrieve all of the books and one query to retrieve all of the authors for all of the books:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/eloquent-relationships.md:1314
#: docs/master/eloquent-relationships.md:1314
#, no-wrap
msgid "select * from books\n\n"
"select * from authors where id in (1, 2, 3, 4, 5, ...)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1321
#: docs/master/eloquent-relationships.md:1321
#, no-wrap
msgid "<a name=\"eager-loading-multiple-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1321
#: docs/master/eloquent-relationships.md:1321
#, no-wrap
msgid "Eager Loading Multiple Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1324
#: docs/master/eloquent-relationships.md:1324
msgid "Sometimes you may need to eager load several different relationships. To do so, just pass an array of relationships to the `with` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1326
#: docs/master/eloquent-relationships.md:1326
#, no-wrap
msgid "    $books = Book::with(['author', 'publisher'])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1328
#: docs/master/eloquent-relationships.md:1328
#, no-wrap
msgid "<a name=\"nested-eager-loading\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1328
#: docs/master/eloquent-relationships.md:1328
#, no-wrap
msgid "Nested Eager Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1331
msgid "To eager load a relationship's relationships, you may use \"dot\" syntax. For example, let's eager load all of the book's authors and all of the author's personal contacts:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1333
#: docs/master/eloquent-relationships.md:1333
#, no-wrap
msgid "    $books = Book::with('author.contacts')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1335
#: docs/master/eloquent-relationships.md:1335
#, no-wrap
msgid "<a name=\"nested-eager-loading-morphto-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1335
#: docs/master/eloquent-relationships.md:1335
#, no-wrap
msgid "Nested Eager Loading `morphTo` Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1338
#: docs/master/eloquent-relationships.md:1338
msgid "If you would like to eager load a `morphTo` relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the `with` method in combination with the `morphTo` relationship's `morphWith` method. To help illustrate this method, let's consider the following model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1353
#: docs/8.x/eloquent-relationships.md:1495
#: docs/master/eloquent-relationships.md:1353
#: docs/master/eloquent-relationships.md:1495
#, no-wrap
msgid "    class ActivityFeed extends Model\n"
"    {\n"
"        /**\n"
"         * Get the parent of the activity feed record.\n"
"         */\n"
"        public function parentable()\n"
"        {\n"
"            return $this->morphTo();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1355
#: docs/8.x/eloquent-relationships.md:1497
#: docs/master/eloquent-relationships.md:1355
#: docs/master/eloquent-relationships.md:1497
msgid "In this example, let's assume `Event`, `Photo`, and `Post` models may create `ActivityFeed` models. Additionally, let's assume that `Event` models belong to a `Calendar` model, `Photo` models are associated with `Tag` models, and `Post` models belong to an `Author` model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1357
#: docs/8.x/eloquent-relationships.md:1499
#: docs/master/eloquent-relationships.md:1357
#: docs/master/eloquent-relationships.md:1499
msgid "Using these model definitions and relationships, we may retrieve `ActivityFeed` model instances and eager load all `parentable` models and their respective nested relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1368
#: docs/master/eloquent-relationships.md:1368
#, no-wrap
msgid "    $activities = ActivityFeed::query()\n"
"        ->with(['parentable' => function (MorphTo $morphTo) {\n"
"            $morphTo->morphWith([\n"
"                Event::class => ['calendar'],\n"
"                Photo::class => ['tags'],\n"
"                Post::class => ['author'],\n"
"            ]);\n"
"        }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1370
#: docs/master/eloquent-relationships.md:1370
#, no-wrap
msgid "<a name=\"eager-loading-specific-columns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1370
#: docs/master/eloquent-relationships.md:1370
#, no-wrap
msgid "Eager Loading Specific Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1373
#: docs/master/eloquent-relationships.md:1373
msgid "You may not always need every column from the relationships you are retrieving. For this reason, Eloquent allows you to specify which columns of the relationship you would like to retrieve:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1375
#: docs/master/eloquent-relationships.md:1375
#, no-wrap
msgid "    $books = Book::with('author:id,name')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1377
#: docs/master/eloquent-relationships.md:1377
#, no-wrap
msgid "> {note} When using this feature, you should always include the `id` column and any relevant foreign key columns in the list of columns you wish to retrieve.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1379
#: docs/master/eloquent-relationships.md:1379
#, no-wrap
msgid "<a name=\"eager-loading-by-default\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1379
#: docs/master/eloquent-relationships.md:1379
#, no-wrap
msgid "Eager Loading By Default"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1382
#: docs/master/eloquent-relationships.md:1382
msgid "Sometimes you might want to always load some relationships when retrieving a model. To accomplish this, you may define a `$with` property on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1397
#: docs/master/eloquent-relationships.md:1397
#, no-wrap
msgid "    class Book extends Model\n"
"    {\n"
"        /**\n"
"         * The relationships that should always be loaded.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $with = ['author'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1406
#: docs/master/eloquent-relationships.md:1406
#, no-wrap
msgid "        /**\n"
"         * Get the author that wrote the book.\n"
"         */\n"
"        public function author()\n"
"        {\n"
"            return $this->belongsTo(Author::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1408
#: docs/master/eloquent-relationships.md:1408
msgid "If you would like to remove an item from the `$with` property for a single query, you may use the `without` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1410
#: docs/master/eloquent-relationships.md:1410
#, no-wrap
msgid "    $books = Book::without('author')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1412
#: docs/master/eloquent-relationships.md:1412
#, no-wrap
msgid "<a name=\"constraining-eager-loads\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1412
#: docs/master/eloquent-relationships.md:1412
#, no-wrap
msgid "Constraining Eager Loads"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1415
#: docs/master/eloquent-relationships.md:1415
msgid "Sometimes you may wish to eager load a relationship but also specify additional query conditions for the eager loading query. You can accomplish this by passing an array of relationships to the `with` method where the array key is a relationship name and the array value is a closure that adds additional constraints to the eager loading query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1421
#: docs/master/eloquent-relationships.md:1421
#, no-wrap
msgid "    $users = User::with(['posts' => function ($query) {\n"
"        $query->where('title', 'like', '%code%');\n"
"    }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1423
#: docs/master/eloquent-relationships.md:1423
msgid "In this example, Eloquent will only eager load posts where the post's `title` column contains the word `code`. You may call other [query builder](/docs/{{version}}/queries) methods to further customize the eager loading operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1427
#: docs/master/eloquent-relationships.md:1427
#, no-wrap
msgid "    $users = User::with(['posts' => function ($query) {\n"
"        $query->orderBy('created_at', 'desc');\n"
"    }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1429
#: docs/master/eloquent-relationships.md:1429
#, no-wrap
msgid "> {note} The `limit` and `take` query builder methods may not be used when constraining eager loads.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1431
#: docs/master/eloquent-relationships.md:1431
#, no-wrap
msgid "<a name=\"constraining-eager-loading-of-morph-to-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1431
#: docs/master/eloquent-relationships.md:1431
#, no-wrap
msgid "Constraining Eager Loading Of `morphTo` Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1434
#: docs/master/eloquent-relationships.md:1434
msgid "If you are eager loading a `morphTo` relationship, Eloquent will run multiple queries to fetch each type of related model. You may add additional constraints to each of these queries using the `MorphTo` relation's `constrain` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1437
#: docs/master/eloquent-relationships.md:1437
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1448
#: docs/master/eloquent-relationships.md:1448
#, no-wrap
msgid "    $comments = Comment::with(['commentable' => function (MorphTo $morphTo) {\n"
"        $morphTo->constrain([\n"
"            Post::class => function (Builder $query) {\n"
"                $query->whereNull('hidden_at');\n"
"            },\n"
"            Video::class => function (Builder $query) {\n"
"                $query->where('type', 'educational');\n"
"            },\n"
"        ]);\n"
"    }])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1450
#: docs/master/eloquent-relationships.md:1450
msgid "In this example, Eloquent will only eager load posts that have not been hidden and videos have a `type` value of \"educational\"."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1452
#: docs/master/eloquent-relationships.md:1452
#, no-wrap
msgid "<a name=\"lazy-eager-loading\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1452
#: docs/master/eloquent-relationships.md:1452
#, no-wrap
msgid "Lazy Eager Loading"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1455
#: docs/master/eloquent-relationships.md:1455
msgid "Sometimes you may need to eager load a relationship after the parent model has already been retrieved. For example, this may be useful if you need to dynamically decide whether to load related models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1463
#: docs/master/eloquent-relationships.md:1463
#, no-wrap
msgid "    if ($someCondition) {\n"
"        $books->load('author', 'publisher');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1465
#: docs/master/eloquent-relationships.md:1465
msgid "If you need to set additional query constraints on the eager loading query, you may pass an array keyed by the relationships you wish to load. The array values should be closure instances which receive the query instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1469
#: docs/master/eloquent-relationships.md:1469
#, no-wrap
msgid "    $author->load(['books' => function ($query) {\n"
"        $query->orderBy('published_date', 'asc');\n"
"    }]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1471
#: docs/master/eloquent-relationships.md:1471
msgid "To load a relationship only when it has not already been loaded, use the `loadMissing` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1473
#: docs/master/eloquent-relationships.md:1473
#, no-wrap
msgid "    $book->loadMissing('author');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1475
#: docs/master/eloquent-relationships.md:1475
#, no-wrap
msgid "<a name=\"nested-lazy-eager-loading-morphto\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1475
#: docs/master/eloquent-relationships.md:1475
#, no-wrap
msgid "Nested Lazy Eager Loading & `morphTo`"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1478
#: docs/master/eloquent-relationships.md:1478
msgid "If you would like to eager load a `morphTo` relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the `loadMorph` method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1480
#: docs/master/eloquent-relationships.md:1480
msgid "This method accepts the name of the `morphTo` relationship as its first argument, and an array of model / relationship pairs as its second argument. To help illustrate this method, let's consider the following model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1507
#: docs/master/eloquent-relationships.md:1507
#, no-wrap
msgid "    $activities = ActivityFeed::with('parentable')\n"
"        ->get()\n"
"        ->loadMorph('parentable', [\n"
"            Event::class => ['calendar'],\n"
"            Photo::class => ['tags'],\n"
"            Post::class => ['author'],\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1509
#: docs/master/eloquent-relationships.md:1509
#, no-wrap
msgid "<a name=\"inserting-and-updating-related-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:1509
#: docs/master/eloquent-relationships.md:1509
#, no-wrap
msgid "Inserting & Updating Related Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1512
#: docs/master/eloquent-relationships.md:1512
#, no-wrap
msgid "<a name=\"the-save-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1512
#: docs/master/eloquent-relationships.md:1512
#, no-wrap
msgid "The `save` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1515
#: docs/master/eloquent-relationships.md:1515
msgid "Eloquent provides convenient methods for adding new models to relationships. For example, perhaps you need to add a new comment to a post. Instead of manually setting the `post_id` attribute on the `Comment` model you may insert the comment using the relationship's `save` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1518
#: docs/master/eloquent-relationships.md:1518
#, no-wrap
msgid "    use App\\Models\\Comment;\n"
"    use App\\Models\\Post;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1520
#: docs/master/eloquent-relationships.md:1520
#, no-wrap
msgid "    $comment = new Comment(['message' => 'A new comment.']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1524
#: docs/8.x/eloquent-relationships.md:1539
#: docs/master/eloquent-relationships.md:1524
#: docs/master/eloquent-relationships.md:1539
#, no-wrap
msgid "    $post->comments()->save($comment);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1526
#: docs/master/eloquent-relationships.md:1526
msgid "Note that we did not access the `comments` relationship as a dynamic property. Instead, we called the `comments` method to obtain an instance of the relationship. The `save` method will automatically add the appropriate `post_id` value to the new `Comment` model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1528
#: docs/master/eloquent-relationships.md:1528
msgid "If you need to save multiple related models, you may use the `saveMany` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1535
#: docs/master/eloquent-relationships.md:1535
#, no-wrap
msgid "    $post->comments()->saveMany([\n"
"        new Comment(['message' => 'A new comment.']),\n"
"        new Comment(['message' => 'Another new comment.']),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1537
#: docs/master/eloquent-relationships.md:1537
msgid "The `save` and `saveMany` methods will not add the new models to any in-memory relationships that are already loaded onto the parent model. If you plan on accessing the relationship after using the `save` or `saveMany` methods, you may wish to use the `refresh` method to reload the model and its relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1541
#: docs/master/eloquent-relationships.md:1541
#, no-wrap
msgid "    $post->refresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1544
#: docs/master/eloquent-relationships.md:1544
#, no-wrap
msgid "    // All comments, including the newly saved comment...\n"
"    $post->comments;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1546
#: docs/master/eloquent-relationships.md:1546
#, no-wrap
msgid "<a name=\"the-push-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1546
#: docs/master/eloquent-relationships.md:1546
#, no-wrap
msgid "Recursively Saving Models & Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1549
#: docs/master/eloquent-relationships.md:1549
msgid "If you would like to `save` your model and all of its associated relationships, you may use the `push` method. In this example, the `Post` model will be saved as well as its comments and the comment's authors:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1554
#: docs/master/eloquent-relationships.md:1554
#, no-wrap
msgid "    $post->comments[0]->message = 'Message';\n"
"    $post->comments[0]->author->name = 'Author Name';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1556
#: docs/master/eloquent-relationships.md:1556
#, no-wrap
msgid "    $post->push();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1558
#: docs/master/eloquent-relationships.md:1558
#, no-wrap
msgid "<a name=\"the-create-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-relationships.md:1558
#: docs/master/eloquent-relationships.md:1558
#, no-wrap
msgid "The `create` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1561
#: docs/master/eloquent-relationships.md:1561
msgid "In addition to the `save` and `saveMany` methods, you may also use the `create` method, which accepts an array of attributes, creates a model, and inserts it into the database. The difference between `save` and `create` is that `save` accepts a full Eloquent model instance while `create` accepts a plain PHP `array`. The newly created model will be returned by the `create` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1569
#: docs/master/eloquent-relationships.md:1569
#, no-wrap
msgid "    $comment = $post->comments()->create([\n"
"        'message' => 'A new comment.',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1571
#: docs/master/eloquent-relationships.md:1571
msgid "You may use the `createMany` method to create multiple related models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1578
#: docs/master/eloquent-relationships.md:1578
#, no-wrap
msgid "    $post->comments()->createMany([\n"
"        ['message' => 'A new comment.'],\n"
"        ['message' => 'Another new comment.'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1580
#: docs/master/eloquent-relationships.md:1580
msgid "You may also use the `findOrNew`, `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods to [create and update models on relationships](https://laravel.com/docs/{{version}}/eloquent#upserts)."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1582
#: docs/master/eloquent-relationships.md:1582
#, no-wrap
msgid "> {tip} Before using the `create` method, be sure to review the [mass assignment](/docs/{{version}}/eloquent#mass-assignment) documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1584
#: docs/master/eloquent-relationships.md:1584
#, no-wrap
msgid "<a name=\"updating-belongs-to-relationships\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1587
#: docs/master/eloquent-relationships.md:1587
msgid "If you would like to assign a child model to a new parent model, you may use the `associate` method. In this example, the `User` model defines a `belongsTo` relationship to the `Account` model. This `associate` method will set the foreign key on the child model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1589
#: docs/master/eloquent-relationships.md:1589
#, no-wrap
msgid "    use App\\Models\\Account;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1591
#: docs/master/eloquent-relationships.md:1591
#, no-wrap
msgid "    $account = Account::find(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1593
#: docs/master/eloquent-relationships.md:1593
#, no-wrap
msgid "    $user->account()->associate($account);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1597
#: docs/master/eloquent-relationships.md:1597
msgid "To remove a parent model from a child model, you may use the `dissociate` method. This method will set the relationship's foreign key to `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1599
#: docs/master/eloquent-relationships.md:1599
#, no-wrap
msgid "    $user->account()->dissociate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1603
#: docs/master/eloquent-relationships.md:1603
#, no-wrap
msgid "<a name=\"updating-many-to-many-relationships\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1606
#: docs/master/eloquent-relationships.md:1606
#, no-wrap
msgid "<a name=\"attaching-detaching\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1606
#: docs/master/eloquent-relationships.md:1606
#, no-wrap
msgid "Attaching / Detaching"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1609
#: docs/master/eloquent-relationships.md:1609
msgid "Eloquent also provides methods to make working with many-to-many relationships more convenient. For example, let's imagine a user can have many roles and a role can have many users. You may use the `attach` method to attach a role to a user by inserting a record in the relationship's intermediate table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1615
#: docs/master/eloquent-relationships.md:1615
#, no-wrap
msgid "    $user->roles()->attach($roleId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1617
#: docs/master/eloquent-relationships.md:1617
msgid "When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the intermediate table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1619
#: docs/master/eloquent-relationships.md:1619
#, no-wrap
msgid "    $user->roles()->attach($roleId, ['expires' => $expires]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1621
#: docs/master/eloquent-relationships.md:1621
msgid "Sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the `detach` method. The `detach` method will delete the appropriate record out of the intermediate table; however, both models will remain in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1624
#: docs/master/eloquent-relationships.md:1624
#, no-wrap
msgid "    // Detach a single role from the user...\n"
"    $user->roles()->detach($roleId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1627
#: docs/master/eloquent-relationships.md:1627
#, no-wrap
msgid "    // Detach all roles from the user...\n"
"    $user->roles()->detach();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1629
#: docs/master/eloquent-relationships.md:1629
msgid "For convenience, `attach` and `detach` also accept arrays of IDs as input:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1633
#: docs/master/eloquent-relationships.md:1633
#, no-wrap
msgid "    $user->roles()->detach([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1638
#: docs/master/eloquent-relationships.md:1638
#, no-wrap
msgid "    $user->roles()->attach([\n"
"        1 => ['expires' => $expires],\n"
"        2 => ['expires' => $expires],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1640
#: docs/master/eloquent-relationships.md:1640
#, no-wrap
msgid "<a name=\"syncing-associations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1640
#: docs/master/eloquent-relationships.md:1640
#, no-wrap
msgid "Syncing Associations"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1643
#: docs/master/eloquent-relationships.md:1643
msgid "You may also use the `sync` method to construct many-to-many associations. The `sync` method accepts an array of IDs to place on the intermediate table. Any IDs that are not in the given array will be removed from the intermediate table. So, after this operation is complete, only the IDs in the given array will exist in the intermediate table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1645
#: docs/master/eloquent-relationships.md:1645
#, no-wrap
msgid "    $user->roles()->sync([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1647
#: docs/master/eloquent-relationships.md:1647
msgid "You may also pass additional intermediate table values with the IDs:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1649
#: docs/master/eloquent-relationships.md:1649
#, no-wrap
msgid "    $user->roles()->sync([1 => ['expires' => true], 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1651
#: docs/master/eloquent-relationships.md:1651
msgid "If you do not want to detach existing IDs that are missing from the given array, you may use the `syncWithoutDetaching` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1653
#: docs/master/eloquent-relationships.md:1653
#, no-wrap
msgid "    $user->roles()->syncWithoutDetaching([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1655
#: docs/master/eloquent-relationships.md:1655
#, no-wrap
msgid "<a name=\"toggling-associations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1655
#: docs/master/eloquent-relationships.md:1655
#, no-wrap
msgid "Toggling Associations"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1658
#: docs/master/eloquent-relationships.md:1658
msgid "The many-to-many relationship also provides a `toggle` method which \"toggles\" the attachment status of the given related model IDs. If the given ID is currently attached, it will be detached. Likewise, if it is currently detached, it will be attached:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1660
#: docs/master/eloquent-relationships.md:1660
#, no-wrap
msgid "    $user->roles()->toggle([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1662
#: docs/master/eloquent-relationships.md:1662
#, no-wrap
msgid "<a name=\"updating-a-record-on-the-intermediate-table\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-relationships.md:1662
#: docs/master/eloquent-relationships.md:1662
#, no-wrap
msgid "Updating A Record On The Intermediate Table"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1665
#: docs/master/eloquent-relationships.md:1665
msgid "If you need to update an existing row in your relationship's intermediate table, you may use the `updateExistingPivot` method. This method accepts the intermediate record foreign key and an array of attributes to update:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1671
#: docs/master/eloquent-relationships.md:1671
#, no-wrap
msgid "    $user->roles()->updateExistingPivot($roleId, [\n"
"        'active' => false,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1673
#: docs/master/eloquent-relationships.md:1673
#, no-wrap
msgid "<a name=\"touching-parent-timestamps\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-relationships.md:1673
#: docs/master/eloquent-relationships.md:1673
#, no-wrap
msgid "Touching Parent Timestamps"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1676
#: docs/master/eloquent-relationships.md:1676
msgid "When a model defines a `belongsTo` or `belongsToMany` relationship to another model, such as a `Comment` which belongs to a `Post`, it is sometimes helpful to update the parent's timestamp when the child model is updated."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1678
#: docs/master/eloquent-relationships.md:1678
msgid "For example, when a `Comment` model is updated, you may want to automatically \"touch\" the `updated_at` timestamp of the owning `Post` so that it is set to the current date and time. To accomplish this, you may add a `touches` property to your child model containing the names of the relationships that should have their `updated_at` timestamps updated when the child model is updated:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1693
#: docs/master/eloquent-relationships.md:1693
#, no-wrap
msgid "    class Comment extends Model\n"
"    {\n"
"        /**\n"
"         * All of the relationships to be touched.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $touches = ['post'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1702
#: docs/master/eloquent-relationships.md:1702
#, no-wrap
msgid "        /**\n"
"         * Get the post that the comment belongs to.\n"
"         */\n"
"        public function post()\n"
"        {\n"
"            return $this->belongsTo(Post::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-relationships.md:1703
#: docs/master/eloquent-relationships.md:1703
#, no-wrap
msgid "> {note} Parent model timestamps will only be updated if the child model is updated using Eloquent's `save` method.\n"
msgstr ""

#. type: Title #
#: docs/8.x/eloquent-resources.md:1 docs/master/eloquent-resources.md:1
#, no-wrap
msgid "Eloquent: API Resources"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Generating Resources](#generating-resources)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Resource Collections](#resource-collections)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Writing Resources](#writing-resources)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Data Wrapping](#data-wrapping)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/8.x/scout.md:26
#: docs/master/eloquent-resources.md:14 docs/master/scout.md:26
msgid "[Pagination](#pagination)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Conditional Attributes](#conditional-attributes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Conditional Relationships](#conditional-relationships)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Adding Meta Data](#adding-meta-data)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-resources.md:14 docs/master/eloquent-resources.md:14
msgid "[Resource Responses](#resource-responses)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:19 docs/master/eloquent-resources.md:19
msgid "When building an API, you may need a transformation layer that sits between your Eloquent models and the JSON responses that are actually returned to your application's users. For example, you may wish to display certain attributes for a subset of users and not others, or you may wish to always include certain relationships in the JSON representation of your models. Eloquent's resource classes allow you to expressively and easily transform your models and model collections into JSON."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:21 docs/master/eloquent-resources.md:21
msgid "Of course, you may always convert Eloquent models or collections to JSON using their `toJson` methods; however, Eloquent resources provide more granular and robust control over the JSON serialization of your models and their relationships."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:23 docs/master/eloquent-resources.md:23
#, no-wrap
msgid "<a name=\"generating-resources\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:23 docs/master/eloquent-resources.md:23
#, no-wrap
msgid "Generating Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:26 docs/master/eloquent-resources.md:26
msgid "To generate a resource class, you may use the `make:resource` Artisan command. By default, resources will be placed in the `app/Http/Resources` directory of your application. Resources extend the `Illuminate\\Http\\Resources\\Json\\JsonResource` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:28 docs/master/eloquent-resources.md:28
#, no-wrap
msgid "    php artisan make:resource UserResource\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:30 docs/master/eloquent-resources.md:30
#, no-wrap
msgid "<a name=\"generating-resource-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:30 docs/8.x/eloquent-resources.md:85
#: docs/8.x/eloquent-resources.md:259 docs/master/eloquent-resources.md:30
#: docs/master/eloquent-resources.md:85 docs/master/eloquent-resources.md:259
#, no-wrap
msgid "Resource Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:33 docs/master/eloquent-resources.md:33
msgid "In addition to generating resources that transform individual models, you may generate resources that are responsible for transforming collections of models. This allows your JSON responses to include links and other meta information that is relevant to an entire collection of a given resource."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:35 docs/master/eloquent-resources.md:35
msgid "To create a resource collection, you should use the `--collection` flag when creating the resource. Or, including the word `Collection` in the resource name will indicate to Laravel that it should create a collection resource. Collection resources extend the `Illuminate\\Http\\Resources\\Json\\ResourceCollection` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:37 docs/master/eloquent-resources.md:37
#, no-wrap
msgid "    php artisan make:resource User --collection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:39 docs/8.x/eloquent-resources.md:99
#: docs/master/eloquent-resources.md:39 docs/master/eloquent-resources.md:99
#, no-wrap
msgid "    php artisan make:resource UserCollection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:44 docs/master/eloquent-resources.md:44
#, no-wrap
msgid "> {tip} This is a high-level overview of resources and resource collections. You are highly encouraged to read the other sections of this documentation to gain a deeper understanding of the customization and power offered to you by resources.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:46 docs/master/eloquent-resources.md:46
msgid "Before diving into all of the options available to you when writing resources, let's first take a high-level look at how resources are used within Laravel. A resource class represents a single model that needs to be transformed into a JSON structure. For example, here is a simple `UserResource` resource class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:50 docs/8.x/eloquent-resources.md:105
#: docs/8.x/eloquent-resources.md:144 docs/8.x/eloquent-resources.md:176
#: docs/8.x/eloquent-resources.md:199 docs/8.x/eloquent-resources.md:275
#: docs/8.x/eloquent-resources.md:331 docs/8.x/eloquent-resources.md:388
#: docs/8.x/eloquent-resources.md:654 docs/8.x/eloquent-resources.md:724
#: docs/master/eloquent-resources.md:50 docs/master/eloquent-resources.md:105
#: docs/master/eloquent-resources.md:144 docs/master/eloquent-resources.md:176
#: docs/master/eloquent-resources.md:199 docs/master/eloquent-resources.md:275
#: docs/master/eloquent-resources.md:331 docs/master/eloquent-resources.md:388
#: docs/master/eloquent-resources.md:654 docs/master/eloquent-resources.md:724
#, no-wrap
msgid "    namespace App\\Http\\Resources;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:52 docs/8.x/eloquent-resources.md:146
#: docs/8.x/eloquent-resources.md:201 docs/8.x/eloquent-resources.md:333
#: docs/8.x/eloquent-resources.md:726 docs/master/eloquent-resources.md:52
#: docs/master/eloquent-resources.md:146 docs/master/eloquent-resources.md:201
#: docs/master/eloquent-resources.md:333 docs/master/eloquent-resources.md:726
#, no-wrap
msgid "    use Illuminate\\Http\\Resources\\Json\\JsonResource;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:72 docs/8.x/eloquent-resources.md:221
#: docs/master/eloquent-resources.md:72 docs/master/eloquent-resources.md:221
#, no-wrap
msgid "    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Transform the resource into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'id' => $this->id,\n"
"                'name' => $this->name,\n"
"                'email' => $this->email,\n"
"                'created_at' => $this->created_at,\n"
"                'updated_at' => $this->updated_at,\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:74 docs/master/eloquent-resources.md:74
msgid "Every resource class defines a `toArray` method which returns the array of attributes that should be converted to JSON when the resource is returned as a response from a route or controller method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:76 docs/master/eloquent-resources.md:76
msgid "Note that we can access model properties directly from the `$this` variable. This is because a resource class will automatically proxy property and method access down to the underlying model for convenient access. Once the resource is defined, it may be returned from a route or controller. The resource accepts the underlying model instance via its constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:79 docs/8.x/eloquent-resources.md:91
#: docs/8.x/eloquent-resources.md:161 docs/8.x/eloquent-resources.md:226
#: docs/8.x/eloquent-resources.md:265 docs/8.x/eloquent-resources.md:703
#: docs/8.x/eloquent-resources.md:712 docs/master/eloquent-resources.md:79
#: docs/master/eloquent-resources.md:91 docs/master/eloquent-resources.md:161
#: docs/master/eloquent-resources.md:226 docs/master/eloquent-resources.md:265
#: docs/master/eloquent-resources.md:703 docs/master/eloquent-resources.md:712
#, no-wrap
msgid "    use App\\Http\\Resources\\UserResource;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:83 docs/8.x/eloquent-resources.md:230
#: docs/8.x/eloquent-resources.md:707 docs/master/eloquent-resources.md:83
#: docs/master/eloquent-resources.md:230 docs/master/eloquent-resources.md:707
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        return new UserResource(User::findOrFail($id));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:85 docs/master/eloquent-resources.md:85
#, no-wrap
msgid "<a name=\"resource-collections\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:88 docs/master/eloquent-resources.md:88
msgid "If you are returning a collection of resources or a paginated response, you should use the `collection` method provided by your resource class when creating the resource instance in your route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:95 docs/8.x/eloquent-resources.md:269
#: docs/master/eloquent-resources.md:95 docs/master/eloquent-resources.md:269
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return UserResource::collection(User::all());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:97 docs/master/eloquent-resources.md:97
msgid "Note that this does not allow any addition of custom meta data that may need to be returned with your collection. If you would like to customize the resource collection response, you may create a dedicated resource to represent the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:101 docs/master/eloquent-resources.md:101
msgid "Once the resource collection class has been generated, you may easily define any meta data that should be included with the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:107 docs/8.x/eloquent-resources.md:178
#: docs/8.x/eloquent-resources.md:277 docs/8.x/eloquent-resources.md:390
#: docs/8.x/eloquent-resources.md:656 docs/master/eloquent-resources.md:107
#: docs/master/eloquent-resources.md:178 docs/master/eloquent-resources.md:277
#: docs/master/eloquent-resources.md:390 docs/master/eloquent-resources.md:656
#, no-wrap
msgid "    use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:126 docs/8.x/eloquent-resources.md:296
#: docs/master/eloquent-resources.md:126 docs/master/eloquent-resources.md:296
#, no-wrap
msgid "    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'data' => $this->collection,\n"
"                'links' => [\n"
"                    'self' => 'link-value',\n"
"                ],\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:128 docs/master/eloquent-resources.md:128
msgid "After defining your resource collection, it may be returned from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:131 docs/8.x/eloquent-resources.md:301
#: docs/8.x/eloquent-resources.md:447 docs/master/eloquent-resources.md:131
#: docs/master/eloquent-resources.md:301 docs/master/eloquent-resources.md:447
#, no-wrap
msgid "    use App\\Http\\Resources\\UserCollection;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:135 docs/8.x/eloquent-resources.md:305
#: docs/master/eloquent-resources.md:135 docs/master/eloquent-resources.md:305
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return new UserCollection(User::all());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:137 docs/master/eloquent-resources.md:137
#, no-wrap
msgid "<a name=\"preserving-collection-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:137 docs/master/eloquent-resources.md:137
#, no-wrap
msgid "Preserving Collection Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:140 docs/master/eloquent-resources.md:140
msgid "When returning a resource collection from a route, Laravel resets the collection's keys so that they are in numerical order. However, you may add a `preserveKeys` property to your resource class indicating whether a collection's original keys should be preserved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:156 docs/master/eloquent-resources.md:156
#, no-wrap
msgid "    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Indicates if the resource's collection keys should be preserved.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $preserveKeys = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:158 docs/master/eloquent-resources.md:158
msgid "When the `preserveKeys` property is set to `true`, collection keys will be preserved when the collection is returned from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:165 docs/master/eloquent-resources.md:165
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return UserResource::collection(User::all()->keyBy->id);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:167 docs/master/eloquent-resources.md:167
#, no-wrap
msgid "<a name=\"customizing-the-underlying-resource-class\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:167 docs/master/eloquent-resources.md:167
#, no-wrap
msgid "Customizing The Underlying Resource Class"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:170 docs/master/eloquent-resources.md:170
#, no-wrap
msgid "Typically, the `$this->collection` property of a resource collection is automatically populated with the result of mapping each item of the collection to its singular resource class. The singular resource class is assumed to be the collection's class name without the trailing `Collection` portion of the class name. In addition, depending on your personal preference, the singular resource class may or may not be suffixed with `Resource`. \n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:172 docs/master/eloquent-resources.md:172
msgid "For example, `UserCollection` will attempt to map the given user instances into the `UserResource` resource. To customize this behavior, you may override the `$collects` property of your resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:188 docs/master/eloquent-resources.md:188
#, no-wrap
msgid "    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * The resource that this resource collects.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $collects = Member::class;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:190 docs/master/eloquent-resources.md:190
#, no-wrap
msgid "<a name=\"writing-resources\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:190 docs/master/eloquent-resources.md:190
#, no-wrap
msgid "Writing Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:193 docs/master/eloquent-resources.md:193
#, no-wrap
msgid "> {tip} If you have not read the [concept overview](#concept-overview), you are highly encouraged to do so before proceeding with this documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:195 docs/master/eloquent-resources.md:195
msgid "In essence, resources are simple. They only need to transform a given model into an array. So, each resource contains a `toArray` method which translates your model's attributes into an API friendly array that can be returned from your application's routes or controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:223 docs/master/eloquent-resources.md:223
msgid "Once a resource has been defined, it may be returned directly from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:232 docs/8.x/eloquent-serialization.md:68
#: docs/master/eloquent-resources.md:232
#: docs/master/eloquent-serialization.md:68
#, no-wrap
msgid "<a name=\"relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:232 docs/8.x/eloquent-serialization.md:68
#: docs/master/eloquent-resources.md:232
#: docs/master/eloquent-serialization.md:68
#, no-wrap
msgid "Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:235 docs/master/eloquent-resources.md:235
msgid "If you would like to include related resources in your response, you may add them to the array returned by your resource's `toArray` method. In this example, we will use the `PostResource` resource's `collection` method to add the user's blog posts to the resource response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:237 docs/8.x/eloquent-resources.md:555
#: docs/master/eloquent-resources.md:237 docs/master/eloquent-resources.md:555
#, no-wrap
msgid "    use App\\Http\\Resources\\PostResource;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:255 docs/master/eloquent-resources.md:255
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'posts' => PostResource::collection($this->posts),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:257 docs/master/eloquent-resources.md:257
#, no-wrap
msgid "> {tip} If you would like to include relationships only when they have already been loaded, check out the documentation on [conditional relationships](#conditional-relationships).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:259 docs/master/eloquent-resources.md:259
#, no-wrap
msgid "<a name=\"writing-resource-collections\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:262 docs/master/eloquent-resources.md:262
msgid "While resources transform a single model into an array, resource collections transform a collection of models into an array. However, it is not absolutely necessary to define a resource collection class for each one of your models since all resources provide a `collection` method to generate an \"ad-hoc\" resource collection on the fly:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:271 docs/master/eloquent-resources.md:271
msgid "However, if you need to customize the meta data returned with the collection, it is necessary to define your own resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:298 docs/master/eloquent-resources.md:298
msgid "Like singular resources, resource collections may be returned directly from routes or controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:307 docs/master/eloquent-resources.md:307
#, no-wrap
msgid "<a name=\"data-wrapping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:307 docs/master/eloquent-resources.md:307
#, no-wrap
msgid "Data Wrapping"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:310 docs/master/eloquent-resources.md:310
msgid "By default, your outermost resource is wrapped in a `data` key when the resource response is converted to JSON. So, for example, a typical resource collection response looks like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:325 docs/master/eloquent-resources.md:325
#, no-wrap
msgid "    {\n"
"        \"data\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"name\": \"Eladio Schroeder Sr.\",\n"
"                \"email\": \"therese28@example.com\",\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"name\": \"Liliana Mayert\",\n"
"                \"email\": \"evandervort@example.com\",\n"
"            }\n"
"        ]\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:327 docs/master/eloquent-resources.md:327
msgid "If you would like to use a custom key instead of `data`, you may define a `$wrap` attribute on the resource class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:343 docs/master/eloquent-resources.md:343
#, no-wrap
msgid "    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * The \"data\" wrapper that should be applied.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public static $wrap = 'user';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:345 docs/master/eloquent-resources.md:345
msgid "If you would like to disable the wrapping of the outermost resource, you should invoke the `withoutWrapping` method on the base `Illuminate\\Http\\Resources\\Json\\JsonResource` class. Typically, you should call this method from your `AppServiceProvider` or another [service provider](/docs/{{version}}/providers) that is loaded on every request to your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:352 docs/master/eloquent-resources.md:352
#, no-wrap
msgid "    use Illuminate\\Http\\Resources\\Json\\JsonResource;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:375 docs/master/eloquent-resources.md:375
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            JsonResource::withoutWrapping();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:377 docs/master/eloquent-resources.md:377
#, no-wrap
msgid "> {note} The `withoutWrapping` method only affects the outermost response and will not remove `data` keys that you manually add to your own resource collections.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:379 docs/master/eloquent-resources.md:379
#, no-wrap
msgid "<a name=\"wrapping-nested-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:379 docs/master/eloquent-resources.md:379
#, no-wrap
msgid "Wrapping Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:382 docs/master/eloquent-resources.md:382
msgid "You have total freedom to determine how your resource's relationships are wrapped. If you would like all resource collections to be wrapped in a `data` key, regardless of their nesting, you should define a resource collection class for each resource and return the collection within a `data` key."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:384 docs/master/eloquent-resources.md:384
msgid "You may be wondering if this will cause your outermost resource to be wrapped in two `data` keys. Don't worry, Laravel will never let your resources be accidentally double-wrapped, so you don't have to be concerned about the nesting level of the resource collection you are transforming:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:404 docs/master/eloquent-resources.md:404
#, no-wrap
msgid "    class CommentsCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return ['data' => $this->collection];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:406 docs/master/eloquent-resources.md:406
#, no-wrap
msgid "<a name=\"data-wrapping-and-pagination\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:406 docs/master/eloquent-resources.md:406
#, no-wrap
msgid "Data Wrapping And Pagination"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:409 docs/master/eloquent-resources.md:409
msgid "When returning paginated collections via a resource response, Laravel will wrap your resource data in a `data` key even if the `withoutWrapping` method has been called. This is because paginated responses always contain `meta` and `links` keys with information about the paginator's state:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:439 docs/8.x/eloquent-resources.md:483
#: docs/master/eloquent-resources.md:439 docs/master/eloquent-resources.md:483
#, no-wrap
msgid "    {\n"
"        \"data\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"name\": \"Eladio Schroeder Sr.\",\n"
"                \"email\": \"therese28@example.com\",\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"name\": \"Liliana Mayert\",\n"
"                \"email\": \"evandervort@example.com\",\n"
"            }\n"
"        ],\n"
"        \"links\":{\n"
"            \"first\": \"http://example.com/pagination?page=1\",\n"
"            \"last\": \"http://example.com/pagination?page=1\",\n"
"            \"prev\": null,\n"
"            \"next\": null\n"
"        },\n"
"        \"meta\":{\n"
"            \"current_page\": 1,\n"
"            \"from\": 1,\n"
"            \"last_page\": 1,\n"
"            \"path\": \"http://example.com/pagination\",\n"
"            \"per_page\": 15,\n"
"            \"to\": 10,\n"
"            \"total\": 10\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:441 docs/8.x/scout.md:369
#: docs/8.x/upgrade.md:232 docs/master/eloquent-resources.md:441
#: docs/master/scout.md:364 docs/master/upgrade.md:232
#, no-wrap
msgid "<a name=\"pagination\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:441 docs/8.x/scout.md:369
#: docs/8.x/upgrade.md:232 docs/master/eloquent-resources.md:441
#: docs/master/scout.md:364 docs/master/upgrade.md:232
#, no-wrap
msgid "Pagination"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:444 docs/master/eloquent-resources.md:444
msgid "You may pass a Laravel paginator instance to the `collection` method of a resource or to a custom resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:451 docs/master/eloquent-resources.md:451
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return new UserCollection(User::paginate());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:453 docs/master/eloquent-resources.md:453
msgid "Paginated responses always contain `meta` and `links` keys with information about the paginator's state:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:485 docs/master/eloquent-resources.md:485
#, no-wrap
msgid "<a name=\"conditional-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:485 docs/master/eloquent-resources.md:485
#, no-wrap
msgid "Conditional Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:488 docs/master/eloquent-resources.md:488
msgid "Sometimes you may wish to only include an attribute in a resource response if a given condition is met. For example, you may wish to only include a value if the current user is an \"administrator\". Laravel provides a variety of helper methods to assist you in this situation. The `when` method may be used to conditionally add an attribute to a resource response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:508 docs/master/eloquent-resources.md:508
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:510 docs/master/eloquent-resources.md:510
msgid "In this example, the `secret` key will only be returned in the final resource response if the authenticated user's `isAdmin` method returns `true`. If the method returns `false`, the `secret` key will be removed from the resource response before it is sent to the client. The `when` method allows you to expressively define your resources without resorting to conditional statements when building the array."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:512 docs/master/eloquent-resources.md:512
msgid "The `when` method also accepts a closure as its second argument, allowing you to calculate the resulting value only if the given condition is `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:516 docs/master/eloquent-resources.md:516
#, no-wrap
msgid "    'secret' => $this->when(Auth::user()->isAdmin(), function () {\n"
"        return 'secret-value';\n"
"    }),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:518 docs/master/eloquent-resources.md:518
#, no-wrap
msgid "<a name=\"merging-conditional-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:518 docs/master/eloquent-resources.md:518
#, no-wrap
msgid "Merging Conditional Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:521 docs/master/eloquent-resources.md:521
msgid "Sometimes you may have several attributes that should only be included in the resource response based on the same condition. In this case, you may use the `mergeWhen` method to include the attributes in the response only when the given condition is `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:542 docs/master/eloquent-resources.md:542
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            $this->mergeWhen(Auth::user()->isAdmin(), [\n"
"                'first-secret' => 'value',\n"
"                'second-secret' => 'value',\n"
"            ]),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:544 docs/master/eloquent-resources.md:544
msgid "Again, if the given condition is `false`, these attributes will be removed from the resource response before it is sent to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:546 docs/master/eloquent-resources.md:546
#, no-wrap
msgid "> {note} The `mergeWhen` method should not be used within arrays that mix string and numeric keys. Furthermore, it should not be used within arrays with numeric keys that are not ordered sequentially.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:548 docs/master/eloquent-resources.md:548
#, no-wrap
msgid "<a name=\"conditional-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:548 docs/master/eloquent-resources.md:548
#, no-wrap
msgid "Conditional Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:551 docs/master/eloquent-resources.md:551
msgid "In addition to conditionally loading attributes, you may conditionally include relationships on your resource responses based on if the relationship has already been loaded on the model. This allows your controller to decide which relationships should be loaded on the model and your resource can easily include them only when they have actually been loaded. Ultimately, this makes it easier to avoid \"N+1\" query problems within your resources."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:553 docs/master/eloquent-resources.md:553
msgid "The `whenLoaded` method may be used to conditionally load a relationship. In order to avoid unnecessarily loading relationships, this method accepts the name of the relationship instead of the relationship itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:573 docs/master/eloquent-resources.md:573
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'posts' => PostResource::collection($this->whenLoaded('posts')),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:575 docs/master/eloquent-resources.md:575
msgid "In this example, if the relationship has not been loaded, the `posts` key will be removed from the resource response before it is sent to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:577 docs/master/eloquent-resources.md:577
#, no-wrap
msgid "<a name=\"conditional-pivot-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:577 docs/master/eloquent-resources.md:577
#, no-wrap
msgid "Conditional Pivot Information"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:580 docs/master/eloquent-resources.md:580
msgid "In addition to conditionally including relationship information in your resource responses, you may conditionally include data from the intermediate tables of many-to-many relationships using the `whenPivotLoaded` method. The `whenPivotLoaded` method accepts the name of the pivot table as its first argument. The second argument should be a closure that returns the value to be returned if the pivot information is available on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:597 docs/master/eloquent-resources.md:597
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'expires_at' => $this->whenPivotLoaded('role_user', function () {\n"
"                return $this->pivot->expires_at;\n"
"            }),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:599 docs/master/eloquent-resources.md:599
msgid "If your relationship is using a [custom intermediate table model](/docs/{{version}}/eloquent-relationships#defining-custom-intermediate-table-models), you may pass an instance of the intermediate table model as the first argument to the `whenPivotLoaded` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:603 docs/master/eloquent-resources.md:603
#, no-wrap
msgid "    'expires_at' => $this->whenPivotLoaded(new Membership, function () {\n"
"        return $this->pivot->expires_at;\n"
"    }),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:605 docs/master/eloquent-resources.md:605
msgid "If your intermediate table is using an accessor other than `pivot`, you may use the `whenPivotLoadedAs` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:622 docs/master/eloquent-resources.md:622
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n"
"                return $this->subscription->expires_at;\n"
"            }),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:624 docs/master/eloquent-resources.md:624
#, no-wrap
msgid "<a name=\"adding-meta-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:624 docs/master/eloquent-resources.md:624
#, no-wrap
msgid "Adding Meta Data"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:627 docs/master/eloquent-resources.md:627
msgid "Some JSON API standards require the addition of meta data to your resource and resource collections responses. This often includes things like `links` to the resource or related resources, or meta data about the resource itself. If you need to return additional meta data about a resource, include it in your `toArray` method. For example, you might include `link` information when transforming a resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:643 docs/master/eloquent-resources.md:643
#, no-wrap
msgid "    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'data' => $this->collection,\n"
"            'links' => [\n"
"                'self' => 'link-value',\n"
"            ],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:645 docs/master/eloquent-resources.md:645
msgid "When returning additional meta data from your resources, you never have to worry about accidentally overriding the `links` or `meta` keys that are automatically added by Laravel when returning paginated responses. Any additional `links` you define will be merged with the links provided by the paginator."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:647 docs/master/eloquent-resources.md:647
#, no-wrap
msgid "<a name=\"top-level-meta-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:647 docs/master/eloquent-resources.md:647
#, no-wrap
msgid "Top Level Meta Data"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:650 docs/master/eloquent-resources.md:650
msgid "Sometimes you may wish to only include certain meta data with a resource response if the resource is the outermost resource being returned. Typically, this includes meta information about the response as a whole. To define this meta data, add a `with` method to your resource class. This method should return an array of meta data to be included with the resource response only when the resource is the outermost resource being transformed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:669 docs/master/eloquent-resources.md:669
#, no-wrap
msgid "    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return parent::toArray($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:685 docs/master/eloquent-resources.md:685
#, no-wrap
msgid "        /**\n"
"         * Get additional data that should be returned with the resource array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function with($request)\n"
"        {\n"
"            return [\n"
"                'meta' => [\n"
"                    'key' => 'value',\n"
"                ],\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:687 docs/master/eloquent-resources.md:687
#, no-wrap
msgid "<a name=\"adding-meta-data-when-constructing-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:687 docs/master/eloquent-resources.md:687
#, no-wrap
msgid "Adding Meta Data When Constructing Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:690 docs/master/eloquent-resources.md:690
msgid "You may also add top-level data when constructing resource instances in your route or controller. The `additional` method, which is available on all resources, accepts an array of data that should be added to the resource response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:695 docs/master/eloquent-resources.md:695
#, no-wrap
msgid "    return (new UserCollection(User::all()->load('roles')))\n"
"                    ->additional(['meta' => [\n"
"                        'key' => 'value',\n"
"                    ]]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:697 docs/master/eloquent-resources.md:697
#, no-wrap
msgid "<a name=\"resource-responses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:697 docs/master/eloquent-resources.md:697
#, no-wrap
msgid "Resource Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:700 docs/master/eloquent-resources.md:700
msgid "As you have already read, resources may be returned directly from routes and controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:709 docs/master/eloquent-resources.md:709
msgid "However, sometimes you may need to customize the outgoing HTTP response before it is sent to the client. There are two ways to accomplish this. First, you may chain the `response` method onto the resource. This method will return an `Illuminate\\Http\\JsonResponse` instance, giving you full control over the response's headers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:718 docs/master/eloquent-resources.md:718
#, no-wrap
msgid "    Route::get('/user', function () {\n"
"        return (new UserResource(User::find(1)))\n"
"                    ->response()\n"
"                    ->header('X-Value', 'True');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:720 docs/master/eloquent-resources.md:720
msgid "Alternatively, you may define a `withResponse` method within the resource itself. This method will be called when the resource is returned as the outermost resource in a response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:741 docs/master/eloquent-resources.md:741
#, no-wrap
msgid "    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Transform the resource into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'id' => $this->id,\n"
"            ];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:753 docs/master/eloquent-resources.md:753
#, no-wrap
msgid "        /**\n"
"         * Customize the outgoing response for the resource.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Illuminate\\Http\\Response  $response\n"
"         * @return void\n"
"         */\n"
"        public function withResponse($request, $response)\n"
"        {\n"
"            $response->header('X-Value', 'True');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/eloquent-serialization.md:1 docs/master/eloquent-serialization.md:1
#, no-wrap
msgid "Eloquent: Serialization"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Serializing Models & Collections](#serializing-models-and-collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Serializing To Arrays](#serializing-to-arrays)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Serializing To JSON](#serializing-to-json)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Hiding Attributes From JSON](#hiding-attributes-from-json)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Appending Values To JSON](#appending-values-to-json)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-serialization.md:10
#: docs/master/eloquent-serialization.md:10
msgid "[Date Serialization](#date-serialization)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:15
#: docs/master/eloquent-serialization.md:15
msgid "When building APIs using Laravel, you will often need to convert your models and relationships to arrays or JSON. Eloquent includes convenient methods for making these conversions, as well as controlling which attributes are included in the serialized representation of your models."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:17
#: docs/master/eloquent-serialization.md:17
#, no-wrap
msgid "> {tip} For an even more robust way of handling Eloquent model and collection JSON serialization, check out the documentation on [Eloquent API resources](/docs/{{version}}/eloquent-resources).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:19
#: docs/master/eloquent-serialization.md:19
#, no-wrap
msgid "<a name=\"serializing-models-and-collections\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-serialization.md:19
#: docs/master/eloquent-serialization.md:19
#, no-wrap
msgid "Serializing Models & Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:22
#: docs/master/eloquent-serialization.md:22
#, no-wrap
msgid "<a name=\"serializing-to-arrays\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-serialization.md:22
#: docs/master/eloquent-serialization.md:22
#, no-wrap
msgid "Serializing To Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:25
#: docs/master/eloquent-serialization.md:25
msgid "To convert a model and its loaded [relationships](/docs/{{version}}/eloquent-relationships) to an array, you should use the `toArray` method. This method is recursive, so all attributes and all relations (including the relations of relations) will be converted to arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:29
#: docs/master/eloquent-serialization.md:29
#, no-wrap
msgid "    $user = User::with('roles')->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:31
#: docs/master/eloquent-serialization.md:31
#, no-wrap
msgid "    return $user->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:33
#: docs/master/eloquent-serialization.md:33
msgid "The `attributesToArray` method may be used to convert a model's attributes to an array but not its relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:35
#: docs/master/eloquent-serialization.md:35
#, no-wrap
msgid "    $user = User::first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:37
#: docs/master/eloquent-serialization.md:37
#, no-wrap
msgid "    return $user->attributesToArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:39
#: docs/master/eloquent-serialization.md:39
msgid "You may also convert entire [collections](/docs/{{version}}/eloquent-collections) of models to arrays by calling the `toArray` method on the collection instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:43
#: docs/master/eloquent-serialization.md:43
#, no-wrap
msgid "    return $users->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:45
#: docs/master/eloquent-serialization.md:45
#, no-wrap
msgid "<a name=\"serializing-to-json\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-serialization.md:45
#: docs/master/eloquent-serialization.md:45
#, no-wrap
msgid "Serializing To JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:48
#: docs/master/eloquent-serialization.md:48
msgid "To convert a model to JSON, you should use the `toJson` method. Like `toArray`, the `toJson` method is recursive, so all attributes and relations will be converted to JSON. You may also specify any JSON encoding options that are [supported by PHP](https://secure.php.net/manual/en/function.json-encode.php):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:54
#: docs/master/eloquent-serialization.md:54
#, no-wrap
msgid "    return $user->toJson();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:56
#: docs/master/eloquent-serialization.md:56
#, no-wrap
msgid "    return $user->toJson(JSON_PRETTY_PRINT);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:58
#: docs/master/eloquent-serialization.md:58
msgid "Alternatively, you may cast a model or collection to a string, which will automatically call the `toJson` method on the model or collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:60
#: docs/master/eloquent-serialization.md:60
#, no-wrap
msgid "    return (string) User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:62
#: docs/master/eloquent-serialization.md:62
msgid "Since models and collections are converted to JSON when cast to a string, you can return Eloquent objects directly from your application's routes or controllers. Laravel will automatically serialize your Eloquent models and collections to JSON when they are returned from routes or controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:66
#: docs/master/eloquent-serialization.md:66
#, no-wrap
msgid "    Route::get('users', function () {\n"
"        return User::all();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:71
#: docs/master/eloquent-serialization.md:71
msgid "When an Eloquent model is converted to JSON, its loaded relationships will automatically be included as attributes on the JSON object. Also, though Eloquent relationship methods are defined using \"camel case\" method names, a relationship's JSON attribute will be \"snake case\"."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:73
#: docs/master/eloquent-serialization.md:73
#, no-wrap
msgid "<a name=\"hiding-attributes-from-json\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-serialization.md:73
#: docs/master/eloquent-serialization.md:73
#, no-wrap
msgid "Hiding Attributes From JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:76
#: docs/master/eloquent-serialization.md:76
msgid "Sometimes you may wish to limit the attributes, such as passwords, that are included in your model's array or JSON representation. To do so, add a `$hidden` property to your model. In attributes that are listed in the `$hidden` property's array will not be included in the serialized representation of your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:92
#: docs/master/eloquent-serialization.md:92
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be hidden for arrays.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $hidden = ['password'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:94
#: docs/master/eloquent-serialization.md:94
#, no-wrap
msgid "> {tip} To hide relationships, add the relationship's method name to your Eloquent model's `$hidden` property.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:96
#: docs/master/eloquent-serialization.md:96
msgid "Alternatively, you may use the `visible` property to define an \"allow list\" of attributes that should be included in your model's array and JSON representation. All attributes that are not present in the `$visible` array will be hidden when the model is converted to an array or JSON:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:112
#: docs/master/eloquent-serialization.md:112
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be visible in arrays.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $visible = ['first_name', 'last_name'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:114
#: docs/master/eloquent-serialization.md:114
#, no-wrap
msgid "<a name=\"temporarily-modifying-attribute-visibility\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-serialization.md:114
#: docs/master/eloquent-serialization.md:114
#, no-wrap
msgid "Temporarily Modifying Attribute Visibility"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:117
#: docs/master/eloquent-serialization.md:117
msgid "If you would like to make some typically hidden attributes visible on a given model instance, you may use the `makeVisible` method. The `makeVisible` method returns the model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:119
#: docs/master/eloquent-serialization.md:119
#, no-wrap
msgid "    return $user->makeVisible('attribute')->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:121
#: docs/master/eloquent-serialization.md:121
msgid "Likewise, if you would like to hide some attributes that are typically visible, you may use the `makeHidden` method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:123
#: docs/master/eloquent-serialization.md:123
#, no-wrap
msgid "    return $user->makeHidden('attribute')->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:125
#: docs/master/eloquent-serialization.md:125
#, no-wrap
msgid "<a name=\"appending-values-to-json\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-serialization.md:125
#: docs/master/eloquent-serialization.md:125
#, no-wrap
msgid "Appending Values To JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:128
#: docs/master/eloquent-serialization.md:128
msgid "Occasionally, when converting models to arrays or JSON, you may wish to add attributes that do not have a corresponding column in your database. To do so, first define an [accessor](/docs/{{version}}/eloquent-mutators) for the value:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:147
#: docs/master/eloquent-serialization.md:147
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Determine if the user is an administrator.\n"
"         *\n"
"         * @return bool\n"
"         */\n"
"        public function getIsAdminAttribute()\n"
"        {\n"
"            return $this->attributes['admin'] === 'yes';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:149
#: docs/master/eloquent-serialization.md:149
msgid "After creating the accessor, add the attribute name to the `appends` property of your model. Note that attribute names are typically referenced using their \"snake case\" serialized representation, even though the accessor's PHP method is defined using \"camel case\":"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:165
#: docs/master/eloquent-serialization.md:165
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The accessors to append to the model's array form.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $appends = ['is_admin'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:167
#: docs/master/eloquent-serialization.md:167
msgid "Once the attribute has been added to the `appends` list, it will be included in both the model's array and JSON representations. Attributes in the `appends` array will also respect the `visible` and `hidden` settings configured on the model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:169
#: docs/master/eloquent-serialization.md:169
#, no-wrap
msgid "<a name=\"appending-at-run-time\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-serialization.md:169
#: docs/master/eloquent-serialization.md:169
#, no-wrap
msgid "Appending At Run Time"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:172
#: docs/master/eloquent-serialization.md:172
msgid "At runtime, you may instruct a model instance to append additional attributes using the `append` method. Or, you may use the `setAppends` method to override the entire array of appended properties for a given model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:174
#: docs/master/eloquent-serialization.md:174
#, no-wrap
msgid "    return $user->append('is_admin')->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:176
#: docs/master/eloquent-serialization.md:176
#, no-wrap
msgid "    return $user->setAppends(['is_admin'])->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:178
#: docs/master/eloquent-serialization.md:178
#, no-wrap
msgid "<a name=\"date-serialization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-serialization.md:178
#: docs/master/eloquent-serialization.md:178
#, no-wrap
msgid "Date Serialization"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:181
#: docs/master/eloquent-serialization.md:181
#, no-wrap
msgid "<a name=\"customizing-the-default-date-format\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-serialization.md:181
#: docs/master/eloquent-serialization.md:181
#, no-wrap
msgid "Customizing The Default Date Format"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:184
#: docs/master/eloquent-serialization.md:184
msgid "You may customize the default serialization format by overriding the `serializeDate` method. This method does not affect how your dates are formatted for storage in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:197
#: docs/master/eloquent-serialization.md:197
#, no-wrap
msgid "<a name=\"customizing-the-date-format-per-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-serialization.md:197
#: docs/master/eloquent-serialization.md:197
#, no-wrap
msgid "Customizing The Date Format Per Attribute"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:200
#: docs/master/eloquent-serialization.md:200
msgid "You may customize the serialization format of individual Eloquent date attributes by specifying the date format in the model's [cast declarations](/docs/{{version}}/eloquent-mutators#attribute-casting):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-serialization.md:204
#: docs/master/eloquent-serialization.md:204
#, no-wrap
msgid "    protected $casts = [\n"
"        'birthday' => 'date:Y-m-d',\n"
"        'joined_at' => 'datetime:Y-m-d H:00',\n"
"    ];\n"
msgstr ""

#. type: Title #
#: docs/8.x/eloquent.md:1 docs/master/eloquent.md:1
#, no-wrap
msgid "Eloquent: Getting Started"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Generating Model Classes](#generating-model-classes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Eloquent Model Conventions](#eloquent-model-conventions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Table Names](#table-names)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Primary Keys](#primary-keys)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Timestamps](#timestamps)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Database Connections](#database-connections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Default Attribute Values](#default-attribute-values)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Retrieving Models](#retrieving-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Collections](#collections)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/8.x/queries.md:33 docs/master/eloquent.md:36
#: docs/master/queries.md:33
msgid "[Chunking Results](#chunking-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Cursors](#cursors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Advanced Subqueries](#advanced-subqueries)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Retrieving Single Models / Aggregates](#retrieving-single-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Retrieving Or Creating Models](#retrieving-or-creating-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Retrieving Aggregates](#retrieving-aggregates)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Inserting & Updating Models](#inserting-and-updating-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Inserts](#inserts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Updates](#updates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Mass Assignment](#mass-assignment)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/8.x/queries.md:33 docs/master/eloquent.md:36
#: docs/master/queries.md:33
msgid "[Upserts](#upserts)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Deleting Models](#deleting-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/8.x/scout.md:26 docs/master/eloquent.md:36
#: docs/master/scout.md:26
msgid "[Soft Deleting](#soft-deleting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Querying Soft Deleted Models](#querying-soft-deleted-models)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Replicating Models](#replicating-models)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Query Scopes](#query-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Global Scopes](#global-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Local Scopes](#local-scopes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Comparing Models](#comparing-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Using Closures](#events-using-closures)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Observers](#observers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/eloquent.md:36 docs/master/eloquent.md:36
msgid "[Muting Events](#muting-events)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:41 docs/master/eloquent.md:41
msgid "Laravel includes Eloquent, an object-relational mapper (ORM) that makes it enjoyable to interact with your database. When using Eloquent, each database table has a corresponding \"Model\" that is used to interact with that table. In addition to retrieving records from the database table, Eloquent models allow you to insert, update, and delete records from the table as well."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:43 docs/master/eloquent.md:43
#, no-wrap
msgid "> {tip} Before getting started, be sure to configure a database connection in your application's `config/database.php` configuration file. For more information on configuring your database, check out [the database configuration documentation](/docs/{{version}}/database#configuration).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:45 docs/master/eloquent.md:45
#, no-wrap
msgid "<a name=\"generating-model-classes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:45 docs/master/eloquent.md:45
#, no-wrap
msgid "Generating Model Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:48 docs/master/eloquent.md:48
msgid "To get started, let's create an Eloquent model. Models typically live in the `app\\Models` directory and extend the `Illuminate\\Database\\Eloquent\\Model` class. You may use the `make:model` [Artisan command](/docs/{{version}}/artisan) to generate a new model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:50 docs/master/eloquent.md:50
#, no-wrap
msgid "    php artisan make:model Flight\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:52 docs/master/eloquent.md:52
msgid "If you would like to generate a [database migration](/docs/{{version}}/migrations) when you generate the model, you may use the `--migration` or `-m` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:54 docs/master/eloquent.md:54
#, no-wrap
msgid "    php artisan make:model Flight --migration\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:56 docs/master/eloquent.md:56
msgid "You may generate various other types of classes when generating a model, such as factories, seeders, and controllers. In addition, these options may be combined to create multiple classes at once:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/eloquent.md:57 docs/master/eloquent.md:57
#, no-wrap
msgid "# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:75 docs/master/eloquent.md:75
#, no-wrap
msgid "<a name=\"eloquent-model-conventions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:75 docs/master/eloquent.md:75
#, no-wrap
msgid "Eloquent Model Conventions"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:78 docs/master/eloquent.md:78
msgid "Models generated by the `make:model` command will be placed in the `app/Models` directory. Let's examine a basic model class and discuss some of Eloquent's key conventions:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:89 docs/master/eloquent.md:89
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:91 docs/master/eloquent.md:91
#, no-wrap
msgid "<a name=\"table-names\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:91 docs/master/eloquent.md:91
#, no-wrap
msgid "Table Names"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:94 docs/master/eloquent.md:94
msgid "After glancing at the example above, you may have noticed that we did not tell Eloquent which database table corresponds to our `Flight` model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the `Flight` model stores records in the `flights` table, while an `AirTrafficController` model would store records in an `air_traffic_controllers` table."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:96 docs/master/eloquent.md:96
msgid "If your model's corresponding database table does not fit this convention, you may manually specify the model's table name by defining a `table` property on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:112 docs/master/eloquent.md:112
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The table associated with the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $table = 'my_flights';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:114 docs/master/eloquent.md:114
#, no-wrap
msgid "<a name=\"primary-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:114 docs/master/eloquent.md:114
#, no-wrap
msgid "Primary Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:117 docs/master/eloquent.md:117
msgid "Eloquent will also assume that each model's corresponding database table has a primary key column named `id`. If necessary, you may define a protected `$primaryKey` property on your model to specify a different column that serves as your model's primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:133 docs/master/eloquent.md:133
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The primary key associated with the table.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $primaryKey = 'flight_id';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:135 docs/master/eloquent.md:135
msgid "In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that Eloquent will automatically cast the primary key to an integer. If you wish to use a non-incrementing or a non-numeric primary key you must define a public `$incrementing` property on your model that is set to `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:147 docs/master/eloquent.md:147
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model's ID is auto-incrementing.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $incrementing = false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:149 docs/master/eloquent.md:149
msgid "If your model's primary key is not an integer, you should define a protected `$keyType` property on your model. This property should have a value of `string`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:161 docs/master/eloquent.md:161
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The data type of the auto-incrementing ID.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $keyType = 'string';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:163 docs/master/eloquent.md:163
#, no-wrap
msgid "<a name=\"composite-primary-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:163 docs/master/eloquent.md:163
#, no-wrap
msgid "\"Composite\" Primary Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:166 docs/master/eloquent.md:166
msgid "Eloquent requires each model to have at least one uniquely identifying \"ID\" that can serve as its primary key. \"Composite\" primary keys are not supported by Eloquent models. However, you are free to add additional multi-column, unique indexes to your database tables in addition to the table's uniquely identifying primary key."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:168 docs/master/eloquent.md:168
#, no-wrap
msgid "<a name=\"timestamps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:168 docs/master/eloquent.md:168
#, no-wrap
msgid "Timestamps"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:171 docs/master/eloquent.md:171
msgid "By default, Eloquent expects `created_at` and `updated_at` columns to exist on your model's corresponding database table.  Eloquent will automatically set these column's values when models are created or updated. If you do not want these columns to be automatically managed by Eloquent, you should define a `$timestamps` property on your model with a value of `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:187 docs/master/eloquent.md:187
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model should be timestamped.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $timestamps = false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:189 docs/master/eloquent.md:189
msgid "If you need to customize the format of your model's timestamps, set the `$dateFormat` property on your model. This property determines how date attributes are stored in the database as well as their format when the model is serialized to an array or JSON:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:205 docs/master/eloquent.md:205
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The storage format of the model's date columns.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $dateFormat = 'U';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:207 docs/master/eloquent.md:207
msgid "If you need to customize the names of the columns used to store the timestamps, you may define `CREATED_AT` and `UPDATED_AT` constants on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:215 docs/master/eloquent.md:215
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        const CREATED_AT = 'creation_date';\n"
"        const UPDATED_AT = 'updated_date';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:217 docs/master/eloquent.md:217
#, no-wrap
msgid "<a name=\"database-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:217 docs/master/eloquent.md:217
#, no-wrap
msgid "Database Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:220 docs/master/eloquent.md:220
msgid "By default, all Eloquent models will use the default database connection that is configured for your application. If you would like to specify a different connection that should be used when interacting with a particular model, you should define a `$connection` property on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:236 docs/master/eloquent.md:236
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The database connection that should be used by the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $connection = 'sqlite';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:238 docs/master/eloquent.md:238
#, no-wrap
msgid "<a name=\"default-attribute-values\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:238 docs/master/eloquent.md:238
#, no-wrap
msgid "Default Attribute Values"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:241 docs/master/eloquent.md:241
msgid "By default, a newly instantiated model instance will not contain any attribute values. If you would like to define the default values for some of your model's attributes, you may define an `$attributes` property on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:259 docs/master/eloquent.md:259
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The model's default values for attributes.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $attributes = [\n"
"            'delayed' => false,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:261 docs/master/eloquent.md:261
#, no-wrap
msgid "<a name=\"retrieving-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:261 docs/master/eloquent.md:261
#, no-wrap
msgid "Retrieving Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:264 docs/master/eloquent.md:264
msgid "Once you have created a model and [its associated database table](/docs/{{version}}/migrations#writing-migrations), you are ready to start retrieving data from your database. You can think of each Eloquent model as a powerful [query builder](/docs/{{version}}/queries) allowing you to fluently query the database table associated with the model. The model's `all` method will retrieve all of the records from the model's associated database table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:266 docs/8.x/eloquent.md:333 docs/8.x/eloquent.md:357
#: docs/8.x/eloquent.md:411 docs/8.x/eloquent.md:439 docs/8.x/eloquent.md:452
#: docs/8.x/eloquent.md:525 docs/8.x/eloquent.md:538 docs/8.x/eloquent.md:623
#: docs/8.x/eloquent.md:711 docs/8.x/eloquent.md:821
#: docs/master/eloquent.md:266 docs/master/eloquent.md:333
#: docs/master/eloquent.md:357 docs/master/eloquent.md:411
#: docs/master/eloquent.md:439 docs/master/eloquent.md:452
#: docs/master/eloquent.md:525 docs/master/eloquent.md:538
#: docs/master/eloquent.md:623 docs/master/eloquent.md:711
#: docs/master/eloquent.md:817
#, no-wrap
msgid "    use App\\Models\\Flight;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:270 docs/master/eloquent.md:270
#, no-wrap
msgid "    foreach (Flight::all() as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:272 docs/master/eloquent.md:272
#, no-wrap
msgid "<a name=\"building-queries\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:272 docs/master/eloquent.md:272
#, no-wrap
msgid "Building Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:275 docs/master/eloquent.md:275
msgid "The Eloquent `all` method will return all of the results in the model's table. However, since each Eloquent model serves as a [query builder](/docs/{{version}}/queries), you may add additional constraints to queries and then invoke the `get` method to retrieve the results:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:280 docs/master/eloquent.md:280
#, no-wrap
msgid "    $flights = Flight::where('active', 1)\n"
"                   ->orderBy('name')\n"
"                   ->take(10)\n"
"                   ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:282 docs/master/eloquent.md:282
#, no-wrap
msgid "> {tip} Since Eloquent models are query builders, you should review all of the methods provided by Laravel's [query builder](/docs/{{version}}/queries). You may use any of these methods when writing your Eloquent queries.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:284 docs/master/eloquent.md:284
#, no-wrap
msgid "<a name=\"refreshing-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:284 docs/master/eloquent.md:284
#, no-wrap
msgid "Refreshing Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:287 docs/master/eloquent.md:287
msgid "If you already have an instance of an Eloquent model that was retrieved from the database, you can \"refresh\" the model using the `fresh` and `refresh` methods. The `fresh` method will re-retrieve the model from the database. The existing model instance will not be affected:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:289 docs/8.x/eloquent.md:295
#: docs/master/eloquent.md:289 docs/master/eloquent.md:295
#, no-wrap
msgid "    $flight = Flight::where('number', 'FR 900')->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:291 docs/master/eloquent.md:291
#, no-wrap
msgid "    $freshFlight = $flight->fresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:293 docs/master/eloquent.md:293
msgid "The `refresh` method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:297 docs/master/eloquent.md:297
#, no-wrap
msgid "    $flight->number = 'FR 456';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:299 docs/master/eloquent.md:299
#, no-wrap
msgid "    $flight->refresh();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:301 docs/master/eloquent.md:301
#, no-wrap
msgid "    $flight->number; // \"FR 900\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:303 docs/8.x/upgrade.md:71 docs/master/eloquent.md:303
#: docs/master/upgrade.md:71
#, no-wrap
msgid "<a name=\"collections\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:306 docs/master/eloquent.md:306
msgid "As we have seen, Eloquent methods like `all` and `get` retrieve multiple records from the database. However, these methods don't return a plain PHP array. Instead, an instance of `Illuminate\\Database\\Eloquent\\Collection` is returned."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:308 docs/master/eloquent.md:308
msgid "The Eloquent `Collection` class extends Laravel's base `Illuminate\\Support\\Collection` class, which provides a [variety of helpful methods](/docs/{{version}}/collections#available-methods) for interacting with data collections. For example, the `reject` method may be used to remove models from a collection based on the results of an invoked closure:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/eloquent.md:309 docs/master/eloquent.md:309
#, no-wrap
msgid "$flights = Flight::where('destination', 'Paris')->get();\n\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:318 docs/master/eloquent.md:318
msgid "In addition to the methods provided by Laravel's base collection class, the Eloquent collection class provides [a few extra methods](/docs/{{version}}/eloquent-collections#available-methods) that are specifically intended for interacting with collections of Eloquent models."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:320 docs/master/eloquent.md:320
msgid "Since all of Laravel's collections implement PHP's iterable interfaces, you may loop over collections as if they were an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:324 docs/master/eloquent.md:324
#, no-wrap
msgid "    foreach ($flights as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:326 docs/8.x/queries.md:124 docs/master/eloquent.md:326
#: docs/master/queries.md:124
#, no-wrap
msgid "<a name=\"chunking-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:326 docs/8.x/queries.md:124 docs/master/eloquent.md:326
#: docs/master/queries.md:124
#, no-wrap
msgid "Chunking Results"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:329 docs/master/eloquent.md:329
msgid "Your application may run out of memory if you attempt to load tens of thousands of Eloquent records via the `all` or `get` methods. Instead of using these methods, the `chunk` method may be used to process large numbers of models more efficiently."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:331 docs/master/eloquent.md:331
msgid "The `chunk` method will retrieve a subset of Eloquent models, passing them to a closure for processing. Since only the current chunk of Eloquent models is retrieved at a time, the `chunk` method will provide significantly reduced memory usage when working with a large number of models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:339 docs/master/eloquent.md:339
#, no-wrap
msgid "    Flight::chunk(200, function ($flights) {\n"
"        foreach ($flights as $flight) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:341 docs/master/eloquent.md:341
msgid "The first argument passed to the `chunk` method is the number of records you wish to receive per \"chunk\". The closure passed as the second argument will be invoked for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the closure."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:343 docs/master/eloquent.md:343
msgid "If you are filtering the results of the `chunk` method based on a column that you will also be updating while iterating over the results, you should use the `chunkById` method. Using the `chunk` method in these scenarios could lead to unexpected and inconsistent results. Internally, the `chunkById` method will always retrieve models with an `id` column greater than the last model in the previous chunk:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:348 docs/master/eloquent.md:348
#, no-wrap
msgid "    Flight::where('departed', true)\n"
"            ->chunkById(200, function ($flights) {\n"
"                $flights->each->update(['departed' => false]);\n"
"            }, $column = 'id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:350 docs/master/eloquent.md:350
#, no-wrap
msgid "<a name=\"cursors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:350 docs/master/eloquent.md:350
#, no-wrap
msgid "Cursors"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:353 docs/master/eloquent.md:353
msgid "Similar to the `chunk` method, the `cursor` method may be used to significantly reduce your application's memory consumption when iterating through tens of thousands of Eloquent model records."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:355 docs/master/eloquent.md:355
msgid "The `cursor` method will only execute a single database query; however, the individual Eloquent models will not be hydrated until they are actually iterated over. Therefore, only one Eloquent model is kept in memory at any given time while iterating over the cursor. Internally, the `cursor` method uses PHP [generators](https://www.php.net/manual/en/language.generators.overview.php) to implement this functionality:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:361 docs/master/eloquent.md:361
#, no-wrap
msgid "    foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:363 docs/master/eloquent.md:363
msgid "The `cursor` returns an `Illuminate\\Support\\LazyCollection` instance. [Lazy collections](/docs/{{version}}/collections#lazy-collections) allow you to use many of the collection methods available on typical Laravel collections while only loading a single model into memory at a time:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:375 docs/master/eloquent.md:375
#, no-wrap
msgid "<a name=\"advanced-subqueries\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:375 docs/master/eloquent.md:375
#, no-wrap
msgid "Advanced Subqueries"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:378 docs/master/eloquent.md:378
#, no-wrap
msgid "<a name=\"subquery-selects\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:378 docs/master/eloquent.md:378
#, no-wrap
msgid "Subquery Selects"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:381 docs/master/eloquent.md:381
msgid "Eloquent also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let's imagine that we have a table of flight `destinations` and a table of `flights` to destinations. The `flights` table contains an `arrived_at` column which indicates when the flight arrived at the destination."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:383 docs/master/eloquent.md:383
msgid "Using the subquery functionality available to the query builder's `select` and `addSelect` methods, we can select all of the `destinations` and the name of the flight that most recently arrived at that destination using a single query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:386 docs/master/eloquent.md:386
#, no-wrap
msgid "    use App\\Models\\Destination;\n"
"    use App\\Models\\Flight;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:392 docs/master/eloquent.md:392
#, no-wrap
msgid "    return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:394 docs/master/eloquent.md:394
#, no-wrap
msgid "<a name=\"subquery-ordering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:394 docs/master/eloquent.md:394
#, no-wrap
msgid "Subquery Ordering"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:397 docs/master/eloquent.md:397
msgid "In addition, the query builder's `orderBy` function supports subqueries. Continuing to use our flight example, we may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single database query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:404 docs/master/eloquent.md:404
#, no-wrap
msgid "    return Destination::orderByDesc(\n"
"        Flight::select('arrived_at')\n"
"            ->whereColumn('destination_id', 'destinations.id')\n"
"            ->orderByDesc('arrived_at')\n"
"            ->limit(1)\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:406 docs/master/eloquent.md:406
#, no-wrap
msgid "<a name=\"retrieving-single-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:406 docs/master/eloquent.md:406
#, no-wrap
msgid "Retrieving Single Models / Aggregates"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:409 docs/master/eloquent.md:409
msgid "In addition to retrieving all of the records matching a given query, you may also retrieve single records using the `find`, `first`, or `firstWhere` methods. Instead of returning a collection of models, these methods return a single model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:414 docs/master/eloquent.md:414
#, no-wrap
msgid "    // Retrieve a model by its primary key...\n"
"    $flight = Flight::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:417 docs/master/eloquent.md:417
#, no-wrap
msgid "    // Retrieve the first model matching the query constraints...\n"
"    $flight = Flight::where('active', 1)->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:420 docs/master/eloquent.md:420
#, no-wrap
msgid "    // Alternative to retrieving the first model matching the query constraints...\n"
"    $flight = Flight::firstWhere('active', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:422 docs/master/eloquent.md:422
msgid "Sometimes you may wish to retrieve the first result of a query or perform some other action if no results are found. The `firstOr` method will return the first result matching the query or, if no results are found, execute the given closure. The value returned by the closure will be considered the result of the `firstOr` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:426 docs/master/eloquent.md:426
#, no-wrap
msgid "    $model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:428 docs/master/eloquent.md:428
#, no-wrap
msgid "<a name=\"not-found-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:428 docs/master/eloquent.md:428
#, no-wrap
msgid "Not Found Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:431 docs/master/eloquent.md:431
msgid "Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The `findOrFail` and `firstOrFail` methods will retrieve the first result of the query; however, if no result is found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:433 docs/master/eloquent.md:433
#, no-wrap
msgid "    $flight = Flight::findOrFail(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:435 docs/master/eloquent.md:435
#, no-wrap
msgid "    $flight = Flight::where('legs', '>', 3)->firstOrFail();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:437 docs/master/eloquent.md:437
msgid "If the `ModelNotFoundException` is not caught, a 404 HTTP response is automatically sent back to the client:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:443 docs/master/eloquent.md:443
#, no-wrap
msgid "    Route::get('/api/flights/{id}', function ($id) {\n"
"        return Flight::findOrFail($id);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:445 docs/master/eloquent.md:445
#, no-wrap
msgid "<a name=\"retrieving-or-creating-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:445 docs/master/eloquent.md:445
#, no-wrap
msgid "Retrieving Or Creating Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:448 docs/master/eloquent.md:448
msgid "The `firstOrCreate` method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes resulting from merging the first array argument with the optional second array argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:450 docs/master/eloquent.md:450
msgid "The `firstOrNew` method, like `firstOrCreate`, will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by `firstOrNew` has not yet been persisted to the database. You will need to manually call the `save` method to persist it:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:457 docs/master/eloquent.md:457
#, no-wrap
msgid "    // Retrieve flight by name or create it if it doesn't exist...\n"
"    $flight = Flight::firstOrCreate([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:463 docs/master/eloquent.md:463
#, no-wrap
msgid "    // Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n"
"    $flight = Flight::firstOrCreate(\n"
"        ['name' => 'London to Paris'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:468 docs/master/eloquent.md:468
#, no-wrap
msgid "    // Retrieve flight by name or instantiate a new Flight instance...\n"
"    $flight = Flight::firstOrNew([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:474 docs/master/eloquent.md:474
#, no-wrap
msgid "    // Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n"
"    $flight = Flight::firstOrNew(\n"
"        ['name' => 'Tokyo to Sydney'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:476 docs/master/eloquent.md:476
#, no-wrap
msgid "<a name=\"retrieving-aggregates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:476 docs/master/eloquent.md:476
#, no-wrap
msgid "Retrieving Aggregates"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:479 docs/master/eloquent.md:479
msgid "When interacting with Eloquent models, you may also use the `count`, `sum`, `max`, and other [aggregate methods](/docs/{{version}}/queries#aggregates) provided by the Laravel [query builder](/docs/{{version}}/queries). As you might expect, these methods return a scalar value instead of an Eloquent model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:481 docs/master/eloquent.md:481
#, no-wrap
msgid "    $count = Flight::where('active', 1)->count();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:483 docs/master/eloquent.md:483
#, no-wrap
msgid "    $max = Flight::where('active', 1)->max('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:485 docs/master/eloquent.md:485
#, no-wrap
msgid "<a name=\"inserting-and-updating-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:485 docs/master/eloquent.md:485
#, no-wrap
msgid "Inserting & Updating Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:488 docs/master/eloquent.md:488
#, no-wrap
msgid "<a name=\"inserts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:488 docs/master/eloquent.md:488
#, no-wrap
msgid "Inserts"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:491 docs/master/eloquent.md:491
msgid "Of course, when using Eloquent, we don't only need to retrieve models from the database. We also need to insert new records. Thankfully, Eloquent makes it simple. To insert a new record into the database, you should instantiate a new model instance and set attributes on the model. Then, call the `save` method on the model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:499 docs/master/eloquent.md:499
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Flight;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:511 docs/master/eloquent.md:511
#, no-wrap
msgid "    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new flight in the database.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            // Validate the request...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:513 docs/master/eloquent.md:513
#, no-wrap
msgid "            $flight = new Flight;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:515 docs/master/eloquent.md:515
#, no-wrap
msgid "            $flight->name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:519 docs/master/eloquent.md:519
#, no-wrap
msgid "            $flight->save();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:521 docs/master/eloquent.md:521
msgid "In this example, we assign the `name` field from the incoming HTTP request to the `name` attribute of the `App\\Models\\Flight` model instance. When we call the `save` method, a record will be inserted into the database. The model's `created_at` and `updated_at` timestamps will automatically be set when the `save` method is called, so there is no need to set them manually."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:523 docs/master/eloquent.md:523
msgid "Alternatively, you may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the `create` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:529 docs/8.x/eloquent.md:627
#: docs/master/eloquent.md:529 docs/master/eloquent.md:627
#, no-wrap
msgid "    $flight = Flight::create([\n"
"        'name' => 'London to Paris',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:531 docs/master/eloquent.md:531
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default. To learn more about mass assignment, please consult the [mass assignment documentation](#mass-assignment)."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:533 docs/master/eloquent.md:533
#, no-wrap
msgid "<a name=\"updates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:533 docs/master/eloquent.md:533
#, no-wrap
msgid "Updates"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:536 docs/master/eloquent.md:536
msgid "The `save` method may also be used to update models that already exist in the database. To update a model, you should retrieve it and set any attributes you wish to update. Then, you should call the model's `save` method. Again, the `updated_at` timestamp will automatically be updated, so there is no need to manually set its value:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:540 docs/8.x/eloquent.md:713
#: docs/master/eloquent.md:540 docs/master/eloquent.md:713
#, no-wrap
msgid "    $flight = Flight::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:542 docs/master/eloquent.md:542
#, no-wrap
msgid "    $flight->name = 'Paris to London';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:544 docs/master/eloquent.md:544
#, no-wrap
msgid "    $flight->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:546 docs/master/eloquent.md:546
#, no-wrap
msgid "<a name=\"mass-updates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:546 docs/master/eloquent.md:546
#, no-wrap
msgid "Mass Updates"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:549 docs/master/eloquent.md:549
msgid "Updates can also be performed against models that match a given query. In this example, all flights that are `active` and have a `destination` of `San Diego` will be marked as delayed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:553 docs/master/eloquent.md:553
#, no-wrap
msgid "    Flight::where('active', 1)\n"
"          ->where('destination', 'San Diego')\n"
"          ->update(['delayed' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:555 docs/master/eloquent.md:555
msgid "The `update` method expects an array of column and value pairs representing the columns that should be updated."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:557 docs/master/eloquent.md:557
#, no-wrap
msgid "> {note} When issuing a mass update via Eloquent, the `saving`, `saved`, `updating`, and `updated` model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:559 docs/master/eloquent.md:559
#, no-wrap
msgid "<a name=\"examining-attribute-changes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:559 docs/master/eloquent.md:559
#, no-wrap
msgid "Examining Attribute Changes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:562 docs/master/eloquent.md:562
msgid "Eloquent provides the `isDirty`, `isClean`, and `wasChanged` methods to examine the internal state of your model and determine how its attributes have changed from when the model was originally retrieved."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:564 docs/master/eloquent.md:564
msgid "The `isDirty` method determines if any of the model's attributes have been changed since the model was retrieved. You may pass a specific attribute name to the `isDirty` method to determine if a particular attribute is dirty. The `isClean` will determine if an attribute has remained unchanged since the model was retrieved. This method also accepts an optional attribute argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:572 docs/8.x/eloquent.md:595
#: docs/master/eloquent.md:572 docs/master/eloquent.md:595
#, no-wrap
msgid "    $user = User::create([\n"
"        'first_name' => 'Taylor',\n"
"        'last_name' => 'Otwell',\n"
"        'title' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:574 docs/8.x/eloquent.md:597
#: docs/master/eloquent.md:574 docs/master/eloquent.md:597
#, no-wrap
msgid "    $user->title = 'Painter';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:578 docs/master/eloquent.md:578
#, no-wrap
msgid "    $user->isDirty(); // true\n"
"    $user->isDirty('title'); // true\n"
"    $user->isDirty('first_name'); // false\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:582 docs/master/eloquent.md:582
#, no-wrap
msgid "    $user->isClean(); // false\n"
"    $user->isClean('title'); // false\n"
"    $user->isClean('first_name'); // true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:587 docs/master/eloquent.md:587
#, no-wrap
msgid "    $user->isDirty(); // false\n"
"    $user->isClean(); // true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:589 docs/master/eloquent.md:589
msgid "The `wasChanged` method determines if any attributes were changed when the model was last saved within the current request cycle. If needed, you may pass an attribute name to see if a particular attribute was changed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:603 docs/master/eloquent.md:603
#, no-wrap
msgid "    $user->wasChanged(); // true\n"
"    $user->wasChanged('title'); // true\n"
"    $user->wasChanged('first_name'); // false\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:605 docs/master/eloquent.md:605
msgid "The `getOriginal` method returns an array containing the original attributes of the model regardless of any changes to the model since it was retrieved. If needed, you may pass a specific attribute name to get the original value of a particular attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:610 docs/master/eloquent.md:610
#, no-wrap
msgid "    $user->name; // John\n"
"    $user->email; // john@example.com\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:613 docs/master/eloquent.md:613
#, no-wrap
msgid "    $user->name = \"Jack\";\n"
"    $user->name; // Jack\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:616 docs/master/eloquent.md:616
#, no-wrap
msgid "    $user->getOriginal('name'); // John\n"
"    $user->getOriginal(); // Array of original attributes...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:618 docs/master/eloquent.md:618
#, no-wrap
msgid "<a name=\"mass-assignment\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:618 docs/master/eloquent.md:618
#, no-wrap
msgid "Mass Assignment"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:621 docs/master/eloquent.md:621
msgid "You may use the `create` method to \"save\" a new model using a single PHP statement. The inserted model instance will be returned to you by the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:629 docs/master/eloquent.md:629
msgid "However, before using the `create` method, you will need to specify either a `fillable` or `guarded` property on your model class. These properties are required because all Eloquent models are protected against mass assignment vulnerabilities by default."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:631 docs/master/eloquent.md:631
msgid "A mass assignment vulnerability occurs when a user passes an unexpected HTTP request field and that field changes a column in your database that you did not expect. For example, a malicious user might send an `is_admin` parameter through an HTTP request, which is then passed to your model's `create` method, allowing the user to escalate themselves to an administrator."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:633 docs/master/eloquent.md:633
msgid "So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the `$fillable` property on the model. For example, let's make the `name` attribute of our `Flight` model mass assignable:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:649 docs/master/eloquent.md:649
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that are mass assignable.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $fillable = ['name'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:651 docs/master/eloquent.md:651
msgid "Once you have specified which attributes are mass assignable, you may use the `create` method to insert a new record in the database. The `create` method returns the newly created model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:653 docs/master/eloquent.md:653
#, no-wrap
msgid "    $flight = Flight::create(['name' => 'London to Paris']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:655 docs/master/eloquent.md:655
msgid "If you already have a model instance, you may use the `fill` method to populate it with an array of attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:657 docs/master/eloquent.md:657
#, no-wrap
msgid "    $flight->fill(['name' => 'Amsterdam to Frankfurt']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:659 docs/master/eloquent.md:659
#, no-wrap
msgid "<a name=\"mass-assignment-json-columns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:659 docs/master/eloquent.md:659
#, no-wrap
msgid "Mass Assignment & JSON Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:662 docs/master/eloquent.md:662
msgid "When assigning JSON columns, each column's mass assignable key must be specified in your model's `$fillable` array. For security, Laravel does not support updating nested JSON attributes when using the `guarded` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:671 docs/master/eloquent.md:671
#, no-wrap
msgid "    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = [\n"
"        'options->enabled',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:673 docs/master/eloquent.md:673
#, no-wrap
msgid "<a name=\"allowing-mass-assignment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:673 docs/master/eloquent.md:673
#, no-wrap
msgid "Allowing Mass Assignment"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:676 docs/master/eloquent.md:676
msgid "If you would like to make all of your attributes mass assignable, you may define your model's `$guarded` property as an empty array. If you choose to unguard your model, you should take special care to always hand-craft the arrays passed to Eloquent's `fill`, `create`, and `update` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:683 docs/master/eloquent.md:683
#, no-wrap
msgid "    /**\n"
"     * The attributes that aren't mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $guarded = [];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:685 docs/8.x/queries.md:797 docs/master/eloquent.md:685
#: docs/master/queries.md:797
#, no-wrap
msgid "<a name=\"upserts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:685 docs/8.x/queries.md:797 docs/master/eloquent.md:685
#: docs/master/queries.md:797
#, no-wrap
msgid "Upserts"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:688 docs/master/eloquent.md:688
msgid "Occasionally, you may need to update an existing model or create a new model if no matching model exists. Like the `firstOrCreate` method, the `updateOrCreate` method persists the model, so there's no need to manually call the `save` method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:690 docs/master/eloquent.md:690
msgid "In the example below, if a flight exists with a `departure` location of `Oakland` and a `destination` location of `San Diego`, its `price` and `discounted` columns will be updated. If no such flight exists, a new flight will be created which has the attributes resulting from merging the first argument array with the second argument array:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:695 docs/master/eloquent.md:695
#, no-wrap
msgid "    $flight = Flight::updateOrCreate(\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"        ['price' => 99, 'discounted' => 1]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:697 docs/master/eloquent.md:697
msgid "If you would like to perform multiple \"upserts\" in a single query, then you should use the `upsert` method instead. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of the columns that should be updated if a matching record already exists in the database. The `upsert` method will automatically set the `created_at` and `updated_at` timestamps if timestamps are enabled on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:702 docs/master/eloquent.md:702
#, no-wrap
msgid "    Flight::upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:704 docs/master/eloquent.md:704
#, no-wrap
msgid "> {note} All databases systems except SQL Server require the columns in the second argument provided to the `upsert` method to have a \"primary\" or \"unique\" index.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:706 docs/master/eloquent.md:706
#, no-wrap
msgid "<a name=\"deleting-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:706 docs/master/eloquent.md:706
#, no-wrap
msgid "Deleting Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:709 docs/master/eloquent.md:709
msgid "To delete a model, you may call the `delete` method on the model instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:715 docs/master/eloquent.md:715
#, no-wrap
msgid "    $flight->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:717
msgid "You may call the `truncate` method to delete all of the model's associated database records. The `truncate` operation will also reset any auto-incrementing IDs on the model's associated table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:719
#, no-wrap
msgid "    Flight::truncate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:721 docs/master/eloquent.md:717
#, no-wrap
msgid "<a name=\"deleting-an-existing-model-by-its-primary-key\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:721 docs/master/eloquent.md:717
#, no-wrap
msgid "Deleting An Existing Model By Its Primary Key"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:724 docs/master/eloquent.md:720
msgid "In the example above, we are retrieving the model from the database before calling the `delete` method. However, if you know the primary key of the model, you may delete the model without explicitly retrieving it by calling the `destroy` method.  In addition to accepting the single primary key, the `destroy` method will accept multiple primary keys, an array of primary keys, or a [collection](/docs/{{version}}/collections) of primary keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:726 docs/master/eloquent.md:722
#, no-wrap
msgid "    Flight::destroy(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:728 docs/master/eloquent.md:724
#, no-wrap
msgid "    Flight::destroy(1, 2, 3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:730 docs/master/eloquent.md:726
#, no-wrap
msgid "    Flight::destroy([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:732 docs/master/eloquent.md:728
#, no-wrap
msgid "    Flight::destroy(collect([1, 2, 3]));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:734 docs/master/eloquent.md:730
#, no-wrap
msgid "> {note} The `destroy` method loads each model individually and calls the `delete` method so that the `deleting` and `deleted` events are properly dispatched for each model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:736 docs/master/eloquent.md:732
#, no-wrap
msgid "<a name=\"deleting-models-using-queries\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:736 docs/master/eloquent.md:732
#, no-wrap
msgid "Deleting Models Using Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:739 docs/master/eloquent.md:735
msgid "Of course, you may build an Eloquent query to delete all models matching your query's criteria. In this example, we will delete all flights that are marked as inactive. Like mass updates, mass deletes will not dispatch model events for the models that are deleted:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:741 docs/master/eloquent.md:737
#, no-wrap
msgid "    $deletedRows = Flight::where('active', 0)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:743 docs/master/eloquent.md:739
#, no-wrap
msgid "> {note} When executing a mass delete statement via Eloquent, the `deleting` and `deleted` model events will not be dispatched for the deleted models. This is because the models are never actually retrieved when executing the delete statement.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:745 docs/8.x/scout.md:403 docs/master/eloquent.md:741
#: docs/master/scout.md:398
#, no-wrap
msgid "<a name=\"soft-deleting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:745 docs/8.x/scout.md:403 docs/master/eloquent.md:741
#: docs/master/scout.md:398
#, no-wrap
msgid "Soft Deleting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:748 docs/master/eloquent.md:744
msgid "In addition to actually removing records from your database, Eloquent can also \"soft delete\" models. When models are soft deleted, they are not actually removed from your database. Instead, a `deleted_at` attribute is set on the model indicating the date and time at which the model was \"deleted\". To enable soft deletes for a model, add the `Illuminate\\Database\\Eloquent\\SoftDeletes` trait to the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:755 docs/master/eloquent.md:751
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:760 docs/master/eloquent.md:756
#, no-wrap
msgid "    class Flight extends Model\n"
"    {\n"
"        use SoftDeletes;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:762 docs/master/eloquent.md:758
#, no-wrap
msgid "> {tip} The `SoftDeletes` trait will automatically cast the `deleted_at` attribute to a `DateTime` / `Carbon` instance for you.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:764 docs/master/eloquent.md:760
msgid "You should also add the `deleted_at` column to your database table. The Laravel [schema builder](/docs/{{version}}/migrations) contains a helper method to create this column:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:767 docs/master/eloquent.md:763
#, no-wrap
msgid "    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:771 docs/master/eloquent.md:767
#, no-wrap
msgid "    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->softDeletes();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:775 docs/master/eloquent.md:771
#, no-wrap
msgid "    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->dropSoftDeletes();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:777 docs/master/eloquent.md:773
msgid "Now, when you call the `delete` method on the model, the `deleted_at` column will be set to the current date and time. However, the model's database record will be left in the table. When querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:779 docs/master/eloquent.md:775
msgid "To determine if a given model instance has been soft deleted, you may use the `trashed` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:783 docs/master/eloquent.md:779
#, no-wrap
msgid "    if ($flight->trashed()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:785 docs/master/eloquent.md:781
#, no-wrap
msgid "<a name=\"restoring-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:785 docs/master/eloquent.md:781
#, no-wrap
msgid "Restoring Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:788 docs/master/eloquent.md:784
msgid "Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a soft deleted model, you may call the `restore` method on a model instance. The `restore` method will set the model's `deleted_at` column to `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:790 docs/master/eloquent.md:786
#, no-wrap
msgid "    $flight->restore();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:792 docs/master/eloquent.md:788
msgid "You may also use the `restore` method in a query to restore multiple models. Again, like other \"mass\" operations, this will not dispatch any model events for the models that are restored:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:796 docs/master/eloquent.md:792
#, no-wrap
msgid "    Flight::withTrashed()\n"
"            ->where('airline_id', 1)\n"
"            ->restore();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:798 docs/master/eloquent.md:794
msgid "The `restore` method may also be used when building [relationship](/docs/{{version}}/eloquent-relationships) queries:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:800 docs/master/eloquent.md:796
#, no-wrap
msgid "    $flight->history()->restore();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:802 docs/master/eloquent.md:798
#, no-wrap
msgid "<a name=\"permanently-deleting-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:802 docs/master/eloquent.md:798
#, no-wrap
msgid "Permanently Deleting Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:805 docs/master/eloquent.md:801
msgid "Sometimes you may need to truly remove a model from your database. You may use the `forceDelete` method to permanently remove a soft deleted model from the database table:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:807 docs/master/eloquent.md:803
#, no-wrap
msgid "    $flight->forceDelete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:809 docs/master/eloquent.md:805
msgid "You may also use the `forceDelete` method when building Eloquent relationship queries:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:811 docs/master/eloquent.md:807
#, no-wrap
msgid "    $flight->history()->forceDelete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:813 docs/master/eloquent.md:809
#, no-wrap
msgid "<a name=\"querying-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:813 docs/master/eloquent.md:809
#, no-wrap
msgid "Querying Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:816 docs/master/eloquent.md:812
#, no-wrap
msgid "<a name=\"including-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:816 docs/master/eloquent.md:812
#, no-wrap
msgid "Including Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:819 docs/master/eloquent.md:815
msgid "As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to be included in a query's results by calling the `withTrashed` method on the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:825 docs/master/eloquent.md:821
#, no-wrap
msgid "    $flights = Flight::withTrashed()\n"
"                    ->where('account_id', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:827 docs/master/eloquent.md:823
msgid "The `withTrashed` method may also be called when building a [relationship](/docs/{{version}}/eloquent-relationships) query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:829 docs/master/eloquent.md:825
#, no-wrap
msgid "    $flight->history()->withTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:831 docs/master/eloquent.md:827
#, no-wrap
msgid "<a name=\"retrieving-only-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:831 docs/master/eloquent.md:827
#, no-wrap
msgid "Retrieving Only Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:834 docs/master/eloquent.md:830
msgid "The `onlyTrashed` method will retrieve **only** soft deleted models:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:838 docs/master/eloquent.md:834
#, no-wrap
msgid "    $flights = Flight::onlyTrashed()\n"
"                    ->where('airline_id', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:840 docs/master/eloquent.md:836
#, no-wrap
msgid "<a name=\"replicating-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:840 docs/master/eloquent.md:836
#, no-wrap
msgid "Replicating Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:843 docs/master/eloquent.md:839
msgid "You may create an unsaved copy of an existing model instance using the `replicate` method. This method is particularly useful when you have model instances that share many of the same attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:853 docs/master/eloquent.md:849
#, no-wrap
msgid "    $shipping = Address::create([\n"
"        'type' => 'shipping',\n"
"        'line_1' => '123 Example Street',\n"
"        'city' => 'Victorville',\n"
"        'state' => 'CA',\n"
"        'postcode' => '90001',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:857 docs/master/eloquent.md:853
#, no-wrap
msgid "    $billing = $shipping->replicate()->fill([\n"
"        'type' => 'billing'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:859 docs/master/eloquent.md:855
#, no-wrap
msgid "    $billing->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:861 docs/master/eloquent.md:857
#, no-wrap
msgid "<a name=\"query-scopes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:861 docs/master/eloquent.md:857
#, no-wrap
msgid "Query Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:864 docs/master/eloquent.md:860
#, no-wrap
msgid "<a name=\"global-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:864 docs/master/eloquent.md:860
#, no-wrap
msgid "Global Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:867 docs/master/eloquent.md:863
msgid "Global scopes allow you to add constraints to all queries for a given model. Laravel's own [soft delete](#soft-deleting) functionality utilizes global scopes to only retrieve \"non-deleted\" models from the database. Writing your own global scopes can provide a convenient, easy way to make sure every query for a given model receives certain constraints."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:869 docs/master/eloquent.md:865
#, no-wrap
msgid "<a name=\"writing-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:869 docs/master/eloquent.md:865
#, no-wrap
msgid "Writing Global Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:872 docs/master/eloquent.md:868
msgid "Writing a global scope is simple. First, define a class that implements the `Illuminate\\Database\\Eloquent\\Scope` interface. Laravel does not have a conventional location that you should place scope classes, so you are free to place this class in any directory that you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:874 docs/master/eloquent.md:870
msgid "The `Scope` interface requires you to implement one method: `apply`. The `apply` method may add `where` constraints or other types of clauses to the query as needed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:878 docs/master/eloquent.md:874
#, no-wrap
msgid "    namespace App\\Scopes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:882 docs/master/eloquent.md:878
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\Scope;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:897 docs/master/eloquent.md:893
#, no-wrap
msgid "    class AncientScope implements Scope\n"
"    {\n"
"        /**\n"
"         * Apply the scope to a given Eloquent query builder.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @return void\n"
"         */\n"
"        public function apply(Builder $builder, Model $model)\n"
"        {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:899 docs/master/eloquent.md:895
#, no-wrap
msgid "> {tip} If your global scope is adding columns to the select clause of the query, you should use the `addSelect` method instead of `select`. This will prevent the unintentional replacement of the query's existing select clause.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:901 docs/master/eloquent.md:897
#, no-wrap
msgid "<a name=\"applying-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:901 docs/master/eloquent.md:897
#, no-wrap
msgid "Applying Global Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:904 docs/master/eloquent.md:900
msgid "To assign a global scope to a model, you should override the model's `booted` method and invoke the model's `addGlobalScope` method. The `addGlobalScope` method accepts an instance of your scope as its only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:911 docs/master/eloquent.md:907
#, no-wrap
msgid "    use App\\Scopes\\AncientScope;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:924 docs/master/eloquent.md:920
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope(new AncientScope);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:926 docs/master/eloquent.md:922
msgid "After adding the scope in the example above to the `App\\Models\\User` model, a call to the `User::all()` method will execute the following SQL query:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/eloquent.md:927
#, no-wrap
msgid "select * from `users` where `created_at` < 0021-02-18 00:00:00\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:932 docs/master/eloquent.md:928
#, no-wrap
msgid "<a name=\"anonymous-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:932 docs/master/eloquent.md:928
#, no-wrap
msgid "Anonymous Global Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:935 docs/master/eloquent.md:931
msgid "Eloquent also allows you to define global scopes using closures, which is particularly useful for simple scopes that do not warrant a separate class of their own. When defining a global scope using a closure, you should provide a scope name of your own choosing as the first argument to the `addGlobalScope` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:942 docs/master/eloquent.md:938
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:957 docs/master/eloquent.md:953
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope('ancient', function (Builder $builder) {\n"
"                $builder->where('created_at', '<', now()->subYears(2000));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:959 docs/master/eloquent.md:955
#, no-wrap
msgid "<a name=\"removing-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:959 docs/master/eloquent.md:955
#, no-wrap
msgid "Removing Global Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:962 docs/master/eloquent.md:958
msgid "If you would like to remove a global scope for a given query, you may use the `withoutGlobalScope` method. This method accepts the class name of the global scope as its only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:964 docs/master/eloquent.md:960
#, no-wrap
msgid "    User::withoutGlobalScope(AncientScope::class)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:966 docs/master/eloquent.md:962
msgid "Or, if you defined the global scope using a closure, you should pass the string name that you assigned to the global scope:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:968 docs/master/eloquent.md:964
#, no-wrap
msgid "    User::withoutGlobalScope('ancient')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:970 docs/master/eloquent.md:966
msgid "If you would like to remove several or even all of the query's global scopes, you may use the `withoutGlobalScopes` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:973 docs/master/eloquent.md:969
#, no-wrap
msgid "    // Remove all of the global scopes...\n"
"    User::withoutGlobalScopes()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:978 docs/master/eloquent.md:974
#, no-wrap
msgid "    // Remove some of the global scopes...\n"
"    User::withoutGlobalScopes([\n"
"        FirstScope::class, SecondScope::class\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:980 docs/master/eloquent.md:976
#, no-wrap
msgid "<a name=\"local-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:980 docs/master/eloquent.md:976
#, no-wrap
msgid "Local Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:983 docs/master/eloquent.md:979
msgid "Local scopes allow you to define common sets of query constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:985 docs/master/eloquent.md:981
msgid "Scopes should always return a query builder instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1004 docs/master/eloquent.md:1000
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include popular users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopePopular($query)\n"
"        {\n"
"            return $query->where('votes', '>', 100);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1016 docs/master/eloquent.md:1012
#, no-wrap
msgid "        /**\n"
"         * Scope a query to only include active users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopeActive($query)\n"
"        {\n"
"            return $query->where('active', 1);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1018 docs/master/eloquent.md:1014
#, no-wrap
msgid "<a name=\"utilizing-a-local-scope\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:1018 docs/master/eloquent.md:1014
#, no-wrap
msgid "Utilizing A Local Scope"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1021 docs/master/eloquent.md:1017
msgid "Once the scope has been defined, you may call the scope methods when querying the model. However, you should not include the `scope` prefix when calling the method. You can even chain calls to various scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1025 docs/master/eloquent.md:1021
#, no-wrap
msgid "    $users = User::popular()->active()->orderBy('created_at')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1027 docs/master/eloquent.md:1023
msgid "Combining multiple Eloquent model scopes via an `or` query operator may require the use of closures to achieve the correct [logical grouping](/docs/{{version}}/queries#logical-grouping):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1031 docs/master/eloquent.md:1027
#, no-wrap
msgid "    $users = User::popular()->orWhere(function (Builder $query) {\n"
"        $query->active();\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1033 docs/master/eloquent.md:1029
msgid "However, since this can be cumbersome, Laravel provides a \"higher order\" `orWhere` method that allows you to fluently chain scopes together without the use of closures:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1035 docs/master/eloquent.md:1031
#, no-wrap
msgid "    $users = App\\Models\\User::popular()->orWhere->active()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1037 docs/master/eloquent.md:1033
#, no-wrap
msgid "<a name=\"dynamic-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:1037 docs/master/eloquent.md:1033
#, no-wrap
msgid "Dynamic Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1040 docs/master/eloquent.md:1036
msgid "Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope method's signature. Scope parameters should be defined after the `$query` parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1061 docs/master/eloquent.md:1057
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include users of a given type.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @param  mixed  $type\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopeOfType($query, $type)\n"
"        {\n"
"            return $query->where('type', $type);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1063 docs/master/eloquent.md:1059
msgid "Once the expected arguments have been added to your scope method's signature, you may pass the arguments when calling the scope:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1065 docs/master/eloquent.md:1061
#, no-wrap
msgid "    $users = User::ofType('admin')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1067 docs/master/eloquent.md:1063
#, no-wrap
msgid "<a name=\"comparing-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent.md:1067 docs/master/eloquent.md:1063
#, no-wrap
msgid "Comparing Models"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1070
msgid "Sometimes you may need to determine if two models are the \"same\" or not. The `is` and `isNot` methods may be used to quickly verify two models have the same primary key, table, and database connection or not:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1074 docs/master/eloquent.md:1070
#, no-wrap
msgid "    if ($post->is($anotherPost)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1078
#, no-wrap
msgid "    if ($post->isNot($anotherPost)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1080
msgid "The `is` and `isNot` methods are also available when using the `belongsTo`, `hasOne`, `morphTo`, and `morphOne` [relationships](/docs/{{version}}/eloquent-relationships). This method is particularly helpful when you would like to compare a related model without issuing a query to retrieve that model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1084 docs/master/eloquent.md:1076
#, no-wrap
msgid "    if ($post->author()->is($user)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1089 docs/master/eloquent.md:1081
msgid "Eloquent models dispatch several events, allowing you to hook into the following moments in a model's lifecycle: `retrieved`, `creating`, `created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, `restoring`, `restored`, and `replicating`."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1091 docs/master/eloquent.md:1083
msgid "The `retrieved` event will dispatch when an existing model is retrieved from the database. When a new model is saved for the first time, the `creating` and `created` events will dispatch. The `updating` / `updated` events will dispatch when an existing model is modified and the `save` method is called. The `saving` / `saved` events will dispatch when a model is created or updated - even if the model's attributes have not been changed."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1093 docs/master/eloquent.md:1085
msgid "To start listening to model events, define a `$dispatchesEvents` property on your Eloquent model. This property maps various points of the Eloquent model's lifecycle to your own [event classes](/docs/{{version}}/events). Each model event class should expect to receive an instance of the affected model via its constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1101 docs/master/eloquent.md:1093
#, no-wrap
msgid "    use App\\Events\\UserDeleted;\n"
"    use App\\Events\\UserSaved;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1105 docs/8.x/notifications.md:348
#: docs/8.x/notifications.md:813 docs/8.x/notifications.md:936
#: docs/8.x/notifications.md:1103 docs/master/eloquent.md:1097
#: docs/master/notifications.md:363 docs/master/notifications.md:785
#: docs/master/notifications.md:908 docs/master/notifications.md:1075
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1116 docs/master/eloquent.md:1108
#, no-wrap
msgid "        /**\n"
"         * The event map for the model.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $dispatchesEvents = [\n"
"            'saved' => UserSaved::class,\n"
"            'deleted' => UserDeleted::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1118 docs/master/eloquent.md:1110
msgid "After defining and mapping your Eloquent events, you may use [event listeners](https://laravel.com/docs/{{version}}/events#defining-listeners) to handle the events."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1120 docs/master/eloquent.md:1112
#, no-wrap
msgid "> {note} When issuing a mass update or delete query via Eloquent, the `saved`, `updated`, `deleting`, and `deleted` model events will not be dispatched for the affected models. This is because the models are never actually retrieved when performing mass updates or deletes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1122 docs/master/eloquent.md:1114
#, no-wrap
msgid "<a name=\"events-using-closures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:1122 docs/8.x/validation.md:1469
#: docs/master/eloquent.md:1114 docs/master/validation.md:1430
#, no-wrap
msgid "Using Closures"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1125 docs/master/eloquent.md:1117
msgid "Instead of using custom event classes, you may register closures that execute when various model events are dispatched. Typically, you should register these closures in the `booted` method of your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1146 docs/master/eloquent.md:1138
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::created(function ($user) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1148 docs/master/eloquent.md:1140
msgid "If needed, you may utilize [queueable anonymous event listeners](/docs/{{version}}/events#queuable-anonymous-event-listeners) when registering model events. This will instruct Laravel to execute the model event listener in the background using your application's [queue](/docs/{{version}}/queues):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1150 docs/master/eloquent.md:1142
#, no-wrap
msgid "    use function Illuminate\\Events\\queueable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1154 docs/master/eloquent.md:1146
#, no-wrap
msgid "    static::created(queueable(function ($user) {\n"
"        //\n"
"    }));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1156 docs/master/eloquent.md:1148
#, no-wrap
msgid "<a name=\"observers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:1156 docs/master/eloquent.md:1148
#, no-wrap
msgid "Observers"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1159 docs/master/eloquent.md:1151
#, no-wrap
msgid "<a name=\"defining-observers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:1159 docs/master/eloquent.md:1151
#, no-wrap
msgid "Defining Observers"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1162 docs/master/eloquent.md:1154
msgid "If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observer classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the affected model as their only argument. The `make:observer` Artisan command is the easiest way to create a new observer class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1164 docs/master/eloquent.md:1156
#, no-wrap
msgid "    php artisan make:observer UserObserver --model=User\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1166 docs/master/eloquent.md:1158
msgid "This command will place the new observer in your `App/Observers` directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1170 docs/master/eloquent.md:1162
#, no-wrap
msgid "    namespace App\\Observers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1185 docs/master/eloquent.md:1177
#, no-wrap
msgid "    class UserObserver\n"
"    {\n"
"        /**\n"
"         * Handle the User \"created\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function created(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1196 docs/master/eloquent.md:1188
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"updated\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function updated(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1207 docs/master/eloquent.md:1199
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"deleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function deleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1219 docs/master/eloquent.md:1211
#, no-wrap
msgid "        /**\n"
"         * Handle the User \"forceDeleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function forceDeleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1221 docs/master/eloquent.md:1213
msgid "To register an observer, you need to call the `observe` method on the model you wish to observe. You may register observers in the `boot` method of your application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1224 docs/master/eloquent.md:1216
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Observers\\UserObserver;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1234 docs/master/eloquent.md:1226
#, no-wrap
msgid "    /**\n"
"     * Register any events for your application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        User::observe(UserObserver::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1236 docs/master/eloquent.md:1228
#, no-wrap
msgid "<a name=\"muting-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent.md:1236 docs/master/eloquent.md:1228
#, no-wrap
msgid "Muting Events"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1239 docs/master/eloquent.md:1231
msgid "You may occasionally need to temporarily \"mute\" all events fired by a model. You may achieve this using the `withoutEvents` method. The `withoutEvents` method accepts a closure as its only argument. Any code executed within this closure will not dispatch model events. For example, the following example will fetch and delete an `App\\Models\\User` instance without dispatching any model events. Any value returned by the closure will be returned by the `withoutEvents` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1244 docs/master/eloquent.md:1236
#, no-wrap
msgid "    $user = User::withoutEvents(function () use () {\n"
"        User::findOrFail(1)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1247 docs/master/eloquent.md:1239
#, no-wrap
msgid "        return User::find(2);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1249 docs/master/eloquent.md:1241
#, no-wrap
msgid "<a name=\"saving-a-single-model-without-events\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent.md:1249 docs/master/eloquent.md:1241
#, no-wrap
msgid "Saving A Single Model Without Events"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1252 docs/master/eloquent.md:1244
msgid "Sometimes you may wish to \"save\" a given model without dispatching any events. You may accomplish this using the `saveQuietly` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1254 docs/master/eloquent.md:1246
#, no-wrap
msgid "    $user = User::findOrFail(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1256 docs/master/eloquent.md:1248
#, no-wrap
msgid "    $user->name = 'Victoria Faith';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent.md:1257 docs/master/eloquent.md:1249
#, no-wrap
msgid "    $user->saveQuietly();\n"
msgstr ""

#. type: Title #
#: docs/8.x/encryption.md:1 docs/master/encryption.md:1
#, no-wrap
msgid "Encryption"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:6 docs/master/encryption.md:6
msgid "- [Introduction](#introduction)  - [Configuration](#configuration)  - [Using The Encrypter](#using-the-encrypter)"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:11 docs/master/encryption.md:11
msgid "Laravel's encryption services provide a simple, convenient interface for encrypting and decrypting text via OpenSSL using AES-256 and AES-128 encryption. All of Laravel's encrypted values are signed using a message authentication code (MAC) so that their underlying value can not be modified or tampered with once encrypted."
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:16 docs/master/encryption.md:16
msgid "Before using Laravel's encrypter, you must set the `key` configuration option in your `config/app.php` configuration file. This configuration value is driven by the `APP_KEY` environment variable. You should use the `php artisan key:generate` command to generate this variable's value since the `key:generate` command will use PHP's secure random bytes generator to build a cryptographically secure key for your application. Typically, the value of the `APP_KEY` environment variable will be generated for you during [Laravel's installation](/docs/{{version}}/installation)."
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:18 docs/master/encryption.md:18
#, no-wrap
msgid "<a name=\"using-the-encrypter\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/encryption.md:18 docs/master/encryption.md:18
#, no-wrap
msgid "Using The Encrypter"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:21 docs/master/encryption.md:21
#, no-wrap
msgid "<a name=\"encrypting-a-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/encryption.md:21 docs/master/encryption.md:21
#, no-wrap
msgid "Encrypting A Value"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:24 docs/master/encryption.md:24
msgid "You may encrypt a value using the `encryptString` method provided by the `Crypt` facade. All encrypted values are encrypted using OpenSSL and the AES-256-CBC cipher. Furthermore, all encrypted values are signed with a message authentication code (MAC). The integrated message authentication code will prevent the decryption of any values that have been tampered with by malicious users:"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:33 docs/master/encryption.md:33
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Crypt;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:49 docs/master/encryption.md:49
#, no-wrap
msgid "    class DigitalOceanTokenController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a DigitalOcean API token for the user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function storeSecret(Request $request)\n"
"        {\n"
"            $request->user()->fill([\n"
"                'token' => Crypt::encryptString($request->token),\n"
"            ])->save();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:51 docs/master/encryption.md:51
#, no-wrap
msgid "<a name=\"decrypting-a-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/encryption.md:51 docs/master/encryption.md:51
#, no-wrap
msgid "Decrypting A Value"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:54 docs/master/encryption.md:54
msgid "You may decrypt values using the `decryptString` method provided by the `Crypt` facade. If the value can not be properly decrypted, such as when the message authentication code is invalid, an `Illuminate\\Contracts\\Encryption\\DecryptException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:57 docs/master/encryption.md:57
#, no-wrap
msgid "    use Illuminate\\Contracts\\Encryption\\DecryptException;\n"
"    use Illuminate\\Support\\Facades\\Crypt;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/encryption.md:62 docs/master/encryption.md:62
#, no-wrap
msgid "    try {\n"
"        $decrypted = Crypt::decryptString($encryptedValue);\n"
"    } catch (DecryptException $e) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/envoy.md:1 docs/master/envoy.md:1
#, no-wrap
msgid "Laravel Envoy"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Writing Tasks](#writing-tasks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Defining Tasks](#defining-tasks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Multiple Servers](#multiple-servers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Setup](#setup)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Variables](#variables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Stories](#stories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18
msgid "[Completion Hooks](#completion-hooks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Running Tasks](#running-tasks)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Confirming Task Execution](#confirming-task-execution)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Slack](#slack)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Discord](#discord)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/envoy.md:18 docs/master/envoy.md:17
msgid "[Telegram](#telegram)"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:23 docs/master/envoy.md:22
msgid "[Laravel Envoy](https://github.com/laravel/envoy) is a tool for executing common tasks you run on your remote servers. Using [Blade](/docs/{{version}}/blade) style syntax, you can easily setup tasks for deployment, Artisan commands, and more. Currently, Envoy only supports the Mac and Linux operating systems. However, Windows support is achievable using [WSL2](https://docs.microsoft.com/en-us/windows/wsl/install-win10)."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:28 docs/master/envoy.md:27
msgid "First, install Envoy into your project using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:30 docs/master/envoy.md:29
#, no-wrap
msgid "    composer require laravel/envoy --dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:32 docs/master/envoy.md:31
msgid "Once Envoy has been installed, the Envoy binary will be available in your application's `vendor/bin` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:34 docs/master/envoy.md:33
#, no-wrap
msgid "    php vendor/bin/envoy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:36 docs/master/envoy.md:35
#, no-wrap
msgid "<a name=\"writing-tasks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/envoy.md:36 docs/master/envoy.md:35
#, no-wrap
msgid "Writing Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:39 docs/master/envoy.md:38
#, no-wrap
msgid "<a name=\"defining-tasks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:39 docs/master/envoy.md:38
#, no-wrap
msgid "Defining Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:42 docs/master/envoy.md:41
msgid "Tasks are the basic building block of Envoy. Tasks define the shell commands that should execute on your remote servers when the task is invoked. For example, you might define a task that executes the `php artisan queue:restart` command on all of your application's queue worker servers."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:44 docs/master/envoy.md:43
msgid "All of your Envoy tasks should be defined in an `Envoy.blade.php` file at the root of your application. Here's an example to get you started:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:45 docs/master/envoy.md:44
#, no-wrap
msgid "@servers(['web' => ['user@192.168.1.1'], 'workers' => ['user@192.168.1.2']])\n\n"
"@task('restart-queues', ['on' => 'workers'])\n"
"    cd /home/user/example.com\n"
"    php artisan queue:restart\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:55 docs/master/envoy.md:54
msgid "As you can see, an array of `@servers` is defined at the top of the file, allowing you to reference these servers via the `on` option of your task declarations. The `@servers` declaration should always be placed on a single line. Within your `@task` declarations, you should place the shell commands that should execute on your servers when the task is invoked."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:57 docs/master/envoy.md:56
#, no-wrap
msgid "<a name=\"local-tasks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:57 docs/master/envoy.md:56
#, no-wrap
msgid "Local Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:60 docs/master/envoy.md:59
msgid "You can force a script to run on your local computer by specifying the server's IP address as `127.0.0.1`:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:61 docs/master/envoy.md:60
#, no-wrap
msgid "@servers(['localhost' => '127.0.0.1'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:66 docs/master/envoy.md:65
#, no-wrap
msgid "<a name=\"importing-envoy-tasks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:66 docs/master/envoy.md:65
#, no-wrap
msgid "Importing Envoy Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:69 docs/master/envoy.md:68
msgid "Using the `@import` directive, you may import other Envoy files so their stories and tasks are added to yours. After the files have been imported, you may execute the tasks they contain as if they were defined in your own Envoy file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:70 docs/master/envoy.md:69
#, no-wrap
msgid "@import('vendor/package/Envoy.blade.php')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:75 docs/master/envoy.md:74
#, no-wrap
msgid "<a name=\"multiple-servers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:75 docs/master/envoy.md:74
#, no-wrap
msgid "Multiple Servers"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:78 docs/master/envoy.md:77
msgid "Envoy allows you to easily run a task across multiple servers. First, add additional servers to your `@servers` declaration. Each server should be assigned a unique name. Once you have defined your additional servers you may list each of the servers in the task's `on` array:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:79 docs/master/envoy.md:78
#, no-wrap
msgid "@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])\n\n"
"@task('deploy', ['on' => ['web-1', 'web-2']])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:90 docs/master/envoy.md:89
#, no-wrap
msgid "<a name=\"parallel-execution\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:90 docs/master/envoy.md:89
#, no-wrap
msgid "Parallel Execution"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:93 docs/master/envoy.md:92
msgid "By default, tasks will be executed on each server serially. In other words, a task will finish running on the first server before proceeding to execute on the second server. If you would like to run a task across multiple servers in parallel, add the `parallel` option to your task declaration:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:94 docs/master/envoy.md:93
#, no-wrap
msgid "@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])\n\n"
"@task('deploy', ['on' => ['web-1', 'web-2'], 'parallel' => true])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:105 docs/master/envoy.md:104
#, no-wrap
msgid "<a name=\"setup\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:105 docs/master/envoy.md:104
#, no-wrap
msgid "Setup"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:108 docs/master/envoy.md:107
msgid "Sometimes, you may need to execute arbitrary PHP code before running your Envoy tasks. You may use the `@setup` directive to define a block of PHP code that should execute before your tasks:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/envoy.md:109 docs/master/envoy.md:108
#, no-wrap
msgid "@setup\n"
"    $now = new DateTime;\n"
"@endsetup\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:116 docs/master/envoy.md:115
msgid "If you need to require other PHP files before your task is executed, you may use the `@include` directive at the top of your `Envoy.blade.php` file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:117 docs/master/envoy.md:116
#, no-wrap
msgid "@include('vendor/autoload.php')\n\n"
"@task('restart-queues')\n"
"    # ...\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:126 docs/master/envoy.md:125
#, no-wrap
msgid "<a name=\"variables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:126 docs/master/envoy.md:125
#, no-wrap
msgid "Variables"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:129 docs/master/envoy.md:128
msgid "If needed, you may pass arguments to Envoy tasks by specifying them on the command line when invoking Envoy:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:131 docs/master/envoy.md:130
#, no-wrap
msgid "    php vendor/bin/envoy run deploy --branch=master\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:133 docs/master/envoy.md:132
msgid "You may access the options within your tasks using Blade's \"echo\" syntax. You may also define Blade `if` statements and loops within your tasks. For example, let's verify the presence of the `$branch` variable before executing the `git pull` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:134 docs/master/envoy.md:133
#, no-wrap
msgid "@servers(['web' => ['user@192.168.1.1']])\n\n"
"@task('deploy', ['on' => 'web'])\n"
"    cd /home/user/example.com\n\n"
"    @if ($branch)\n"
"        git pull origin {{ $branch }}\n"
"    @endif\n\n"
"    php artisan migrate --force\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:149 docs/master/envoy.md:148
#, no-wrap
msgid "<a name=\"stories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:149 docs/master/envoy.md:148
#, no-wrap
msgid "Stories"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:152 docs/master/envoy.md:151
msgid "Stories group a set of tasks under a single, convenient name. For instance, a `deploy` story may run the `update-code` and `install-dependencies` tasks by listing the task names within its definition:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:153 docs/master/envoy.md:152
#, no-wrap
msgid "@servers(['web' => ['user@192.168.1.1']])\n\n"
"@story('deploy')\n"
"    update-code\n"
"    install-dependencies\n"
"@endstory\n\n"
"@task('update-code')\n"
"    cd /home/user/example.com\n"
"    git pull origin master\n"
"@endtask\n\n"
"@task('install-dependencies')\n"
"    cd /home/user/example.com\n"
"    composer install\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:173 docs/master/envoy.md:172
msgid "Once the story has been written, you may invoke it in the same way you would invoke a task:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:175 docs/8.x/envoy.md:239 docs/master/envoy.md:174
#: docs/master/envoy.md:181
#, no-wrap
msgid "    php vendor/bin/envoy run deploy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:177
#, no-wrap
msgid "<a name=\"completion-hooks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:177
#, no-wrap
msgid "Completion Hooks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:180
msgid "When tasks and stories finish, a number of hooks are executed. The hook types supported by Envoy are `@after`, `@error`, `@success`, and `@finished`. All of the code in these hooks is interpreted as PHP and executed locally, not on the remote servers that your tasks interact with."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:182
msgid "You may define as many of each of these hooks as you like. They will be executed in the order that they appear in your Envoy script."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:184
#, no-wrap
msgid "<a name=\"completion-after\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:184
#, no-wrap
msgid "`@after`"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:187
msgid "After each task execution, all of the `@after` hooks registered in your Envoy script will execute. The `@after` hooks receive the name of the task that was executed:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/envoy.md:188
#, no-wrap
msgid "@after\n"
"    if ($task === 'deploy') {\n"
"        // ...\n"
"    }\n"
"@endafter\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:197
#, no-wrap
msgid "<a name=\"completion-error\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:197
#, no-wrap
msgid "`@error`"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:200
msgid "After every task failure (exits with a status code greater than `0`), all of the `@error` hooks registered in your Envoy script will execute. The `@error` hooks receive the name of the task that was executed:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/envoy.md:201
#, no-wrap
msgid "@error\n"
"    if ($task === 'deploy') {\n"
"        // ...\n"
"    }\n"
"@enderror\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:210
#, no-wrap
msgid "<a name=\"completion-success\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:210
#, no-wrap
msgid "`@success`"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:213
msgid "If all tasks have executed without errors, all of the `@success` hooks registered in your Envoy script will execute:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:214
#, no-wrap
msgid "@success\n"
"    // ...\n"
"@endsuccess\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:221
#, no-wrap
msgid "<a name=\"completion-finished\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/envoy.md:221
#, no-wrap
msgid "`@finished`"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:224
msgid "After all tasks have been executed (regardless of exit status), all of the `@finished` hooks will be executed. The `@finished` hooks receive the status code of the completed task, which may be `null` or an `integer` greater than or equal to `0`:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:225
#, no-wrap
msgid "@finished\n"
"    if ($exitCode > 0) {\n"
"        // There were errors in one of the tasks...\n"
"    }\n"
"@endfinished\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:234 docs/master/envoy.md:176
#, no-wrap
msgid "<a name=\"running-tasks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/envoy.md:234 docs/master/envoy.md:176
#, no-wrap
msgid "Running Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:237 docs/master/envoy.md:179
msgid "To run a task or story that is defined in your application's `Envoy.blade.php` file, execute Envoy's `run` command, passing the name of the task or story you would like to execute. Envoy will execute the task and display the output from your remote servers as the task is running:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:241 docs/master/envoy.md:183
#, no-wrap
msgid "<a name=\"confirming-task-execution\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:241 docs/master/envoy.md:183
#, no-wrap
msgid "Confirming Task Execution"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:244 docs/master/envoy.md:186
msgid "If you would like to be prompted for confirmation before running a given task on your servers, you should add the `confirm` directive to your task declaration. This option is particularly useful for destructive operations:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/envoy.md:245 docs/master/envoy.md:187
#, no-wrap
msgid "@task('deploy', ['on' => 'web', 'confirm' => true])\n"
"    cd /home/user/example.com\n"
"    git pull origin {{ $branch }}\n"
"    php artisan migrate\n"
"@endtask\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:257 docs/master/envoy.md:199
#, no-wrap
msgid "<a name=\"slack\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:257 docs/master/envoy.md:199
#, no-wrap
msgid "Slack"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:260 docs/master/envoy.md:202
msgid "Envoy supports sending notifications to [Slack](https://slack.com) after each task is executed. The `@slack` directive accepts a Slack hook URL and a channel / user name. You may retrieve your webhook URL by creating an \"Incoming WebHooks\" integration in your Slack control panel."
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:262 docs/master/envoy.md:204
msgid "You should pass the entire webhook URL as the first argument given to the `@slack` directive. The second argument given to the `@slack` directive should be a channel name (`#channel`) or a user name (`@user`):"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:266 docs/master/envoy.md:208
#, no-wrap
msgid "    @finished\n"
"        @slack('webhook-url', '#bots')\n"
"    @endfinished\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:268
msgid "By default, Envoy notifications will send a message to the notification channel describing the task that was executed. However, you may overwrite this message with your own custom message by passing a third argument to the `@slack` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:272
#, no-wrap
msgid "    @finished\n"
"        @slack('webhook-url', '#bots', 'Hello, Slack.')\n"
"    @endfinished\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:274 docs/master/envoy.md:210
#, no-wrap
msgid "<a name=\"discord\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:274 docs/master/envoy.md:210
#, no-wrap
msgid "Discord"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:277 docs/master/envoy.md:213
msgid "Envoy also supports sending notifications to [Discord](https://discord.com) after each task is executed. The `@discord` directive accepts a Discord hook URL and a message. You may retrieve your webhook URL by creating a \"Webhook\" in your Server Settings and choosing which channel the webhook should post to. You should pass the entire Webhook URL into the `@discord` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:281 docs/master/envoy.md:217
#, no-wrap
msgid "    @finished\n"
"        @discord('discord-webhook-url')\n"
"    @endfinished\n"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:283 docs/master/envoy.md:219
#, no-wrap
msgid "<a name=\"telegram\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/envoy.md:283 docs/master/envoy.md:219
#, no-wrap
msgid "Telegram"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:286 docs/master/envoy.md:222
msgid "Envoy also supports sending notifications to [Telegram](https://telegram.org) after each task is executed. The `@telegram` directive accepts a Telegram Bot ID and a Chat ID. You may retrieve your Bot ID by creating a new bot using [BotFather](https://t.me/botfather). You can retrieve a valid Chat ID using [@username_to_id_bot](https://t.me/username_to_id_bot). You should pass the entire Bot ID and Chat ID into the `@telegram` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/envoy.md:289 docs/master/envoy.md:225
#, no-wrap
msgid "    @finished\n"
"        @telegram('bot-id','chat-id')\n"
"    @endfinished\n"
msgstr ""

#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  errors.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/errors.md:1 docs/8.x/http-client.md:166 docs/8.x/queues.md:1016
#: docs/master/errors.md:1 docs/master/http-client.md:158
#: docs/master/queues.md:954
#, no-wrap
msgid "Error Handling"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[The Exception Handler](#the-exception-handler)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[Reporting Exceptions](#reporting-exceptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[Ignoring Exceptions By Type](#ignoring-exceptions-by-type)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[Rendering Exceptions](#rendering-exceptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[Reportable & Renderable Exceptions](#renderable-exceptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[HTTP Exceptions](#http-exceptions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/errors.md:12 docs/master/errors.md:12
msgid "[Custom HTTP Error Pages](#custom-http-error-pages)"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:17 docs/master/errors.md:17
msgid "When you start a new Laravel project, error and exception handling is already configured for you. The `App\\Exceptions\\Handler` class is where all exceptions thrown by your application are logged and then rendered to the user. We'll dive deeper into this class throughout this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:24 docs/master/errors.md:24
msgid "During local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the value is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:26 docs/master/errors.md:26
#, no-wrap
msgid "<a name=\"the-exception-handler\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:26 docs/master/errors.md:26
#, no-wrap
msgid "The Exception Handler"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:29 docs/master/errors.md:29
#, no-wrap
msgid "<a name=\"reporting-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:29 docs/master/errors.md:29
#, no-wrap
msgid "Reporting Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:32 docs/master/errors.md:32
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com) or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:34 docs/master/errors.md:34
msgid "For example, if you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will deduce what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:36 docs/8.x/errors.md:126 docs/8.x/errors.md:146
#: docs/master/errors.md:36 docs/master/errors.md:100 docs/master/errors.md:120
#, no-wrap
msgid "    use App\\Exceptions\\InvalidOrderException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:48 docs/master/errors.md:48
#, no-wrap
msgid "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->reportable(function (InvalidOrderException $e) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:50 docs/master/errors.md:50
msgid "When you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:54 docs/master/errors.md:54
#, no-wrap
msgid "    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    })->stop();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:58 docs/master/errors.md:58
#, no-wrap
msgid "    $this->reportable(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:60
#, no-wrap
msgid "> {tip} To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:62 docs/master/errors.md:62
#, no-wrap
msgid "<a name=\"global-log-context\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:62 docs/master/errors.md:62
#, no-wrap
msgid "Global Log Context"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:65 docs/master/errors.md:65
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by overriding the `context` method of your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:77 docs/master/errors.md:77
#, no-wrap
msgid "    /**\n"
"     * Get the default context variables for logging.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function context()\n"
"    {\n"
"        return array_merge(parent::context(), [\n"
"            'foo' => 'bar',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:79
#, no-wrap
msgid "<a name=\"exception-log-context\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:79
#, no-wrap
msgid "Exception Log Context"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:82
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's custom exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:86 docs/8.x/errors.md:167 docs/master/errors.md:141
#, no-wrap
msgid "    namespace App\\Exceptions;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:88 docs/8.x/errors.md:169 docs/master/errors.md:143
#, no-wrap
msgid "    use Exception;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:92
#, no-wrap
msgid "    class InvalidOrderException extends Exception\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:103
#, no-wrap
msgid "        /**\n"
"         * Get the exception's context information.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function context()\n"
"        {\n"
"            return ['order_id' => $this->orderId];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:105 docs/master/errors.md:79
#, no-wrap
msgid "<a name=\"the-report-helper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:105 docs/master/errors.md:79
#, no-wrap
msgid "The `report` Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:108 docs/master/errors.md:82
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception via the exception handler without rendering an error page to the user:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:115 docs/master/errors.md:89
#, no-wrap
msgid "    public function isValid($value)\n"
"    {\n"
"        try {\n"
"            // Validate the value...\n"
"        } catch (Throwable $e) {\n"
"            report($e);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:119 docs/master/errors.md:93
#, no-wrap
msgid "            return false;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:121 docs/master/errors.md:95
#, no-wrap
msgid "<a name=\"ignoring-exceptions-by-type\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:121 docs/master/errors.md:95
#, no-wrap
msgid "Ignoring Exceptions By Type"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:124 docs/master/errors.md:98
msgid "When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a `$dontReport` property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:135 docs/master/errors.md:109
#, no-wrap
msgid "    /**\n"
"     * A list of the exception types that should not be reported.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dontReport = [\n"
"        InvalidOrderException::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:137 docs/master/errors.md:111
#, no-wrap
msgid "> {tip} Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:139 docs/master/errors.md:113
#, no-wrap
msgid "<a name=\"rendering-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:139 docs/master/errors.md:113
#, no-wrap
msgid "Rendering Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:142 docs/master/errors.md:116
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the `renderable` method of your exception handler."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:144 docs/master/errors.md:118
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will deduce what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:158 docs/master/errors.md:132
#, no-wrap
msgid "    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (InvalidOrderException $e, $request) {\n"
"            return response()->view('errors.invalid-order', [], 500);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:160 docs/master/errors.md:134
#, no-wrap
msgid "<a name=\"renderable-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:160 docs/master/errors.md:134
#, no-wrap
msgid "Reportable & Renderable Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:163 docs/master/errors.md:137
msgid "Instead of type-checking exceptions in the exception handler's `register` method, you may define `report` and `render` methods directly on your custom exceptions. When these methods exist, they will be automatically called by the framework:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:181 docs/master/errors.md:155
#, no-wrap
msgid "    class InvalidOrderException extends Exception\n"
"    {\n"
"        /**\n"
"         * Report the exception.\n"
"         *\n"
"         * @return bool|null\n"
"         */\n"
"        public function report()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:193 docs/master/errors.md:167
#, no-wrap
msgid "        /**\n"
"         * Render the exception into an HTTP response.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function render($request)\n"
"        {\n"
"            return response(...);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:195 docs/master/errors.md:169
msgid "If your exception contains custom reporting logic that is only necessary when certain conditions are met, you may need to instruct Laravel to sometimes report the exception using the default exception handling configuration. To accomplish this, you may return `false` from the exception's `report` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:204 docs/master/errors.md:178
#, no-wrap
msgid "    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        // Determine if the exception needs custom reporting...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:207 docs/8.x/valet.md:299 docs/master/errors.md:181
#: docs/master/valet.md:299
#, no-wrap
msgid "        return false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:209 docs/master/errors.md:183
#, no-wrap
msgid "> {tip} You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:211 docs/master/errors.md:185
#, no-wrap
msgid "<a name=\"http-exceptions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:211 docs/master/errors.md:185
#, no-wrap
msgid "HTTP Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:214 docs/master/errors.md:188
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:216 docs/master/errors.md:190
#, no-wrap
msgid "    abort(404);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:218 docs/master/errors.md:192
#, no-wrap
msgid "<a name=\"custom-http-error-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:218 docs/master/errors.md:192
#, no-wrap
msgid "Custom HTTP Error Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:221 docs/master/errors.md:195
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php`. This file will be served on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:223 docs/master/errors.md:197
#, no-wrap
msgid "    <h2>{{ $exception->getMessage() }}</h2>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:225 docs/master/errors.md:199
msgid "You may publish Laravel's default error page templates using the `vendor:publish` Artisan command. Once the templates have been published, you may customize them to your liking:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:226 docs/master/errors.md:200
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-errors\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Registering Events & Listeners](#registering-events-and-listeners)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Generating Events & Listeners](#generating-events-and-listeners)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Manually Registering Events](#manually-registering-events)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Event Discovery](#event-discovery)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Defining Events](#defining-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Defining Listeners](#defining-listeners)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Queued Event Listeners](#queued-event-listeners)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18
msgid "[Manually Interacting With The Queue](#manually-interacting-with-the-queue)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Queued Event Listeners & Database Transactions](#queued-event-listeners-and-database-transactions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Handling Failed Jobs](#handling-failed-jobs)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Dispatching Events](#dispatching-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Event Subscribers](#event-subscribers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Writing Event Subscribers](#writing-event-subscribers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/events.md:18 docs/master/events.md:18
msgid "[Registering Event Subscribers](#registering-event-subscribers)"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:23 docs/master/events.md:23
msgid "Laravel's events provide a simple observer pattern implementation, allowing you to subscribe and listen for various events that occur within your application. Event classes are typically stored in the `app/Events` directory, while their listeners are stored in `app/Listeners`. Don't worry if you don't see these directories in your application as they will be created for you as you generate events and listeners using Artisan console commands."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:25 docs/master/events.md:25
msgid "Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. For example, you may wish to send a Slack notification to your user each time an order has shipped. Instead of coupling your order processing code to your Slack notification code, you can raise an `App\\Events\\OrderShipped` event which a listener can receive and use to dispatch a Slack notification."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:27 docs/master/events.md:27
#, no-wrap
msgid "<a name=\"registering-events-and-listeners\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:27 docs/master/events.md:27
#, no-wrap
msgid "Registering Events & Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:30 docs/master/events.md:30
msgid "The `App\\Providers\\EventServiceProvider` included with your Laravel application provides a convenient place to register all of your application's event listeners. The `listen` property contains an array of all events (keys) and their listeners (values). You may add as many events to this array as your application requires. For example, let's add an `OrderShipped` event:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:33 docs/master/events.md:33
#, no-wrap
msgid "    use App\\Events\\OrderShipped;\n"
"    use App\\Listeners\\SendShipmentNotification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:44 docs/master/events.md:44
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        OrderShipped::class => [\n"
"            SendShipmentNotification::class,\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:46 docs/master/events.md:46
#, no-wrap
msgid "> {tip} The `event:list` command may be used to display a list of all events and listeners registered by your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:48 docs/master/events.md:48
#, no-wrap
msgid "<a name=\"generating-events-and-listeners\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:48 docs/master/events.md:48
#, no-wrap
msgid "Generating Events & Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:51 docs/master/events.md:51
msgid "Of course, manually creating the files for each event and listener is cumbersome. Instead, add listeners and events to your `EventServiceProvider` and use the `event:generate` Artisan command. This command will generate any events or listeners that are listed in your `EventServiceProvider` that do not already exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:53 docs/master/events.md:53
#, no-wrap
msgid "    php artisan event:generate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:55 docs/master/events.md:55
msgid "Alternatively, you may use the `make:event` and `make:listener` Artisan commands to generate individual events and listeners:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:57 docs/master/events.md:57
#, no-wrap
msgid "    php artisan make:event PodcastProcessed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:59 docs/master/events.md:59
#, no-wrap
msgid "    php artisan make:listener SendPodcastNotification --event=PodcastProcessed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:61 docs/master/events.md:61
#, no-wrap
msgid "<a name=\"manually-registering-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:61 docs/master/events.md:61
#, no-wrap
msgid "Manually Registering Events"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:64 docs/master/events.md:64
msgid "Typically, events should be registered via the `EventServiceProvider` `$listen` array; however, you may also register class or closure based event listeners manually in the `boot` method of your `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:68 docs/master/events.md:68
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use App\\Listeners\\SendPodcastNotification;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:80 docs/master/events.md:80
#, no-wrap
msgid "    /**\n"
"     * Register any other events for your application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Event::listen(\n"
"            PodcastProcessed::class,\n"
"            [SendPodcastNotification::class, 'handle']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:85 docs/master/events.md:85
#, no-wrap
msgid "        Event::listen(function (PodcastProcessed $event) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:87 docs/master/events.md:87
#, no-wrap
msgid "<a name=\"queuable-anonymous-event-listeners\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:87 docs/master/events.md:87
#, no-wrap
msgid "Queueable Anonymous Event Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:90 docs/master/events.md:90
msgid "When registering closure based event listeners manually, you may wrap the listener closure within the `Illuminate\\Events\\queueable` function to instruct Laravel to execute the listener using the [queue](/docs/{{version}}/queues):"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:94 docs/8.x/releases.md:300 docs/master/events.md:94
#: docs/master/releases.md:300
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:106 docs/master/events.md:106
#, no-wrap
msgid "    /**\n"
"     * Register any other events for your application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Event::listen(queueable(function (PodcastProcessed $event) {\n"
"            //\n"
"        }));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:108 docs/8.x/releases.md:306 docs/master/events.md:108
#: docs/master/releases.md:306
msgid "Like queued jobs, you may use the `onConnection`, `onQueue`, and `delay` methods to customize the execution of the queued listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:112 docs/8.x/releases.md:310 docs/master/events.md:112
#: docs/master/releases.md:310
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:114 docs/master/events.md:114
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener. This closure will receive the event instance and the `Throwable` instance that caused the listener's failure:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:119 docs/8.x/releases.md:317 docs/master/events.md:119
#: docs/master/releases.md:317
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use function Illuminate\\Events\\queueable;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:125 docs/8.x/releases.md:323 docs/master/events.md:125
#: docs/master/releases.md:323
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    })->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"        // The queued listener failed...\n"
"    }));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:127 docs/master/events.md:127
#, no-wrap
msgid "<a name=\"wildcard-event-listeners\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:127 docs/master/events.md:127
#, no-wrap
msgid "Wildcard Event Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:130 docs/master/events.md:130
msgid "You may even register listeners using the `*` as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument and the entire event data array as their second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:134 docs/master/events.md:134
#, no-wrap
msgid "    Event::listen('event.*', function ($eventName, array $data) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:136 docs/master/events.md:136
#, no-wrap
msgid "<a name=\"event-discovery\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:136 docs/master/events.md:136
#, no-wrap
msgid "Event Discovery"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:139 docs/master/events.md:139
msgid "Instead of registering events and listeners manually in the `$listen` array of the `EventServiceProvider`, you can enable automatic event discovery. When event discovery is enabled, Laravel will automatically find and register your events and listeners by scanning your application's `Listeners` directory. In addition, any explicitly defined events listed in the `EventServiceProvider` will still be registered."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:141 docs/master/events.md:141
msgid "Laravel finds event listeners by scanning the listener classes using PHP's reflection services. When Laravel finds any listener class method that begins with `handle`, Laravel will register those methods as event listeners for the event that is type-hinted in the method's signature:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:143 docs/master/events.md:143
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:157
#, no-wrap
msgid "    class SendPodcastNotification\n"
"    {\n"
"        /**\n"
"         * Handle the given event.\n"
"         *\n"
"         * @param  \\App\\Events\\PodcastProcessed  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(PodcastProcessed $event)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:159 docs/master/events.md:159
msgid "Event discovery is disabled by default, but you can enable it by overriding the `shouldDiscoverEvents` method of your application's `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:169 docs/master/events.md:169
#, no-wrap
msgid "    /**\n"
"     * Determine if events and listeners should be automatically discovered.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function shouldDiscoverEvents()\n"
"    {\n"
"        return true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:171 docs/master/events.md:171
msgid "By default, all listeners within your application's `app/Listeners` directory will be scanned. If you would like to define additional directories to scan, you may override the `discoverEventsWithin` method in your `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:183 docs/master/events.md:183
#, no-wrap
msgid "    /**\n"
"     * Get the listener directories that should be used to discover events.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function discoverEventsWithin()\n"
"    {\n"
"        return [\n"
"            $this->app->path('Listeners'),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:185 docs/master/events.md:185
#, no-wrap
msgid "<a name=\"event-discovery-in-production\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:185 docs/master/events.md:185
#, no-wrap
msgid "Event Discovery In Production"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:188 docs/master/events.md:188
msgid "In production, it is not efficient for the framework to scan all of your listeners on every request. Therefore, during your deployment process, you should run the `event:cache` Artisan command to cache a manifest of all of your application's events and listeners. This manifest will be used by the framework to speed up the event registration process. The `event:clear` command may be used to destroy the cache."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:190 docs/master/events.md:190
#, no-wrap
msgid "<a name=\"defining-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:190 docs/master/events.md:190
#, no-wrap
msgid "Defining Events"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:193 docs/master/events.md:193
msgid "An event class is essentially a data container which holds the information related to the event. For example, let's assume an `App\\Events\\OrderShipped` event receives an [Eloquent ORM](/docs/{{version}}/eloquent) object:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:202 docs/master/events.md:202
#, no-wrap
msgid "    use App\\Models\\Order;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Foundation\\Events\\Dispatchable;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:206 docs/master/events.md:206
#, no-wrap
msgid "    class OrderShipped\n"
"    {\n"
"        use Dispatchable, InteractsWithSockets, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:213 docs/8.x/mail.md:219 docs/master/events.md:213
#: docs/master/mail.md:219
#, no-wrap
msgid "        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Models\\Order\n"
"         */\n"
"        public $order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:225 docs/master/events.md:225
#, no-wrap
msgid "        /**\n"
"         * Create a new event instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Order  $order\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Order $order)\n"
"        {\n"
"            $this->order = $order;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:227 docs/master/events.md:227
msgid "As you can see, this event class contains no logic. It is a container for the `App\\Models\\Order` instance that was purchased. The `SerializesModels` trait used by the event will gracefully serialize any Eloquent models if the event object is serialized using PHP's `serialize` function, such as when utilizing [queued listeners](#queued-event-listeners)."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:229 docs/master/events.md:229
#, no-wrap
msgid "<a name=\"defining-listeners\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:229 docs/master/events.md:229
#, no-wrap
msgid "Defining Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:232 docs/master/events.md:232
msgid "Next, let's take a look at the listener for our example event. Event listeners receive event instances in their `handle` method. The `event:generate` and `make:listener` Artisan commands will automatically import the proper event class and type-hint the event on the `handle` method. Within the `handle` method, you may perform any actions necessary to respond to the event:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:238 docs/master/events.md:238
#, no-wrap
msgid "    use App\\Events\\OrderShipped;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:250 docs/master/events.md:250
#, no-wrap
msgid "    class SendShipmentNotification\n"
"    {\n"
"        /**\n"
"         * Create the event listener.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:262 docs/master/events.md:262
#, no-wrap
msgid "        /**\n"
"         * Handle the event.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderShipped  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(OrderShipped $event)\n"
"        {\n"
"            // Access the order using $event->order...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:264 docs/master/events.md:264
#, no-wrap
msgid "> {tip} Your event listeners may also type-hint any dependencies they need on their constructors. All event listeners are resolved via the Laravel [service container](/docs/{{version}}/container), so dependencies will be injected automatically.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:266 docs/master/events.md:266
#, no-wrap
msgid "<a name=\"stopping-the-propagation-of-an-event\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:266 docs/master/events.md:266
#, no-wrap
msgid "Stopping The Propagation Of An Event"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:269 docs/master/events.md:269
msgid "Sometimes, you may wish to stop the propagation of an event to other listeners. You may do so by returning `false` from your listener's `handle` method."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:271 docs/master/events.md:271
#, no-wrap
msgid "<a name=\"queued-event-listeners\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:271 docs/master/events.md:271
#, no-wrap
msgid "Queued Event Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:274 docs/master/events.md:274
msgid "Queueing listeners can be beneficial if your listener is going to perform a slow task such as sending an email or making an HTTP request. Before using queued listeners, make sure to [configure your queue](/docs/{{version}}/queues) and start a queue worker on your server or local development environment."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:276 docs/master/events.md:276
msgid "To specify that a listener should be queued, add the `ShouldQueue` interface to the listener class. Listeners generated by the `event:generate` and `make:listener` Artisan commands already have this interface imported into the current namespace so you can use it immediately:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:283 docs/8.x/events.md:302 docs/master/events.md:283
#: docs/master/events.md:302
#, no-wrap
msgid "    use App\\Events\\OrderShipped;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:288 docs/master/events.md:288
#, no-wrap
msgid "    class SendShipmentNotification implements ShouldQueue\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:290 docs/master/events.md:290
msgid "That's it! Now, when an event handled by this listener is dispatched, the listener will automatically be queued by the event dispatcher using Laravel's [queue system](/docs/{{version}}/queues). If no exceptions are thrown when the listener is executed by the queue, the queued job will automatically be deleted after it has finished processing."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:292 docs/master/events.md:292
#, no-wrap
msgid "<a name=\"customizing-the-queue-connection-queue-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:292 docs/master/events.md:292
#, no-wrap
msgid "Customizing The Queue Connection & Queue Name"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:295 docs/master/events.md:295
msgid "If you would like to customize the queue connection, queue name, or queue delay time of an event listener, you may define the `$connection`, `$queue`, or `$delay` properties on your listener class:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:311 docs/master/events.md:311
#, no-wrap
msgid "    class SendShipmentNotification implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * The name of the connection the job should be sent to.\n"
"         *\n"
"         * @var string|null\n"
"         */\n"
"        public $connection = 'sqs';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:318 docs/master/events.md:318
#, no-wrap
msgid "        /**\n"
"         * The name of the queue the job should be sent to.\n"
"         *\n"
"         * @var string|null\n"
"         */\n"
"        public $queue = 'listeners';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:326 docs/master/events.md:326
#, no-wrap
msgid "        /**\n"
"         * The time (seconds) before the job should be processed.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $delay = 60;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:328 docs/master/events.md:328
msgid "If you would like to define the listener's queue at runtime, you may define a `viaQueue` method on the listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:338 docs/master/events.md:338
#, no-wrap
msgid "    /**\n"
"     * Get the name of the listener's queue.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function viaQueue()\n"
"    {\n"
"        return 'listeners';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:340 docs/master/events.md:340
#, no-wrap
msgid "<a name=\"conditionally-queueing-listeners\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:340 docs/master/events.md:340
#, no-wrap
msgid "Conditionally Queueing Listeners"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:343 docs/master/events.md:343
msgid "Sometimes, you may need to determine whether a listener should be queued based on some data that are only available at runtime. To accomplish this, a `shouldQueue` method may be added to a listener to determine whether the listener should be queued. If the `shouldQueue` method returns `false`, the listener will not be executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:350 docs/master/events.md:350
#, no-wrap
msgid "    use App\\Events\\OrderCreated;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:363 docs/master/events.md:363
#, no-wrap
msgid "    class RewardGiftCard implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * Reward a gift card to the customer.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderCreated  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(OrderCreated $event)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:375 docs/master/events.md:375
#, no-wrap
msgid "        /**\n"
"         * Determine whether the listener should be queued.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderCreated  $event\n"
"         * @return bool\n"
"         */\n"
"        public function shouldQueue(OrderCreated $event)\n"
"        {\n"
"            return $event->order->subtotal >= 5000;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:377
#, no-wrap
msgid "<a name=\"manually-interacting-with-the-queue\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:377
#, no-wrap
msgid "Manually Interacting With The Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:380 docs/master/events.md:380
msgid "If you need to manually access the listener's underlying queue job's `delete` and `release` methods, you may do so using the `Illuminate\\Queue\\InteractsWithQueue` trait. This trait is imported by default on generated listeners and provides access to these methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:388 docs/8.x/events.md:442 docs/8.x/events.md:485
#: docs/master/events.md:388 docs/master/events.md:442
#: docs/master/events.md:485
#, no-wrap
msgid "    use App\\Events\\OrderShipped;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:392 docs/8.x/events.md:424 docs/8.x/events.md:446
#: docs/8.x/events.md:489 docs/master/events.md:392 docs/master/events.md:424
#: docs/master/events.md:446 docs/master/events.md:489
#, no-wrap
msgid "    class SendShipmentNotification implements ShouldQueue\n"
"    {\n"
"        use InteractsWithQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:406 docs/master/events.md:406
#, no-wrap
msgid "        /**\n"
"         * Handle the event.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderShipped  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(OrderShipped $event)\n"
"        {\n"
"            if (true) {\n"
"                $this->release(30);\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:408 docs/master/events.md:408
#, no-wrap
msgid "<a name=\"queued-event-listeners-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:408 docs/master/events.md:408
#, no-wrap
msgid "Queued Event Listeners & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:411 docs/master/events.md:411
msgid "When queued listeners are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your listener depends on these models, unexpected errors can occur when the job that dispatches the queued listener is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:413 docs/master/events.md:413
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued listener should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the listener class:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:420 docs/master/events.md:420
#, no-wrap
msgid "    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:431 docs/master/events.md:431
#, no-wrap
msgid "<a name=\"handling-failed-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:431 docs/master/events.md:431
#, no-wrap
msgid "Handling Failed Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:434 docs/master/events.md:434
msgid "Sometimes your queued event listeners may fail. If queued listener exceeds the maximum number of attempts as defined by your queue worker, the `failed` method will be called on your listener. The `failed` method receives the event instance and the `Throwable` that caused the failure:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:457 docs/master/events.md:457
#, no-wrap
msgid "        /**\n"
"         * Handle the event.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderShipped  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(OrderShipped $event)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:470 docs/master/events.md:470
#, no-wrap
msgid "        /**\n"
"         * Handle a job failure.\n"
"         *\n"
"         * @param  \\App\\Events\\OrderShipped  $event\n"
"         * @param  \\Throwable  $exception\n"
"         * @return void\n"
"         */\n"
"        public function failed(OrderShipped $event, $exception)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:472 docs/master/events.md:472
#, no-wrap
msgid "<a name=\"specifying-queued-listener-maximum-attempts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/events.md:472 docs/master/events.md:472
#, no-wrap
msgid "Specifying Queued Listener Maximum Attempts"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:475 docs/master/events.md:475
msgid "If one of your queued listeners is encountering an error, you likely do not want it to keep retrying indefinitely. Therefore, Laravel provides various ways to specify how many times or for how long a listener may be attempted."
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:477 docs/master/events.md:477
msgid "You may define `$tries` property on your listener class to specify how many times the listener may be attempted before it is considered to have failed:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:497 docs/master/events.md:497
#, no-wrap
msgid "        /**\n"
"         * The number of times the queued listener may be attempted.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $tries = 5;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:499 docs/master/events.md:499
msgid "As an alternative to defining how many times a listener may be attempted before it fails, you may define a time at which the listener should no longer be attempted. This allows a listener to be attempted any number of times within a given time frame. To define the time at which a listener should no longer be attempted, add a `retryUntil` method to your listener class. This method should return a `DateTime` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:509 docs/master/events.md:509
#, no-wrap
msgid "    /**\n"
"     * Determine the time at which the listener should timeout.\n"
"     *\n"
"     * @return \\DateTime\n"
"     */\n"
"    public function retryUntil()\n"
"    {\n"
"        return now()->addMinutes(5);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:511 docs/master/events.md:511
#, no-wrap
msgid "<a name=\"dispatching-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:511 docs/master/events.md:511
#, no-wrap
msgid "Dispatching Events"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:514 docs/master/events.md:514
msgid "To dispatch an event, you may call the static `dispatch` method on the event. This method is made available on the event by the `Illuminate\\Foundation\\Events\\Dispatchable` trait. Any arguments passed to the `dispatch` method will be passed to the event's constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:523 docs/master/events.md:523
#, no-wrap
msgid "    use App\\Events\\OrderShipped;\n"
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Order;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:535 docs/8.x/mail.md:565 docs/master/events.md:535
#: docs/master/mail.md:565
#, no-wrap
msgid "    class OrderShipmentController extends Controller\n"
"    {\n"
"        /**\n"
"         * Ship the given order.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $order = Order::findOrFail($request->order_id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:537 docs/master/events.md:537
#, no-wrap
msgid "            // Order shipment logic...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:541 docs/master/events.md:541
#, no-wrap
msgid "            OrderShipped::dispatch($order);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:543 docs/master/events.md:543
#, no-wrap
msgid "> {tip} When testing, it can be helpful to assert that certain events were dispatched without actually triggering their listeners. Laravel's [built-in testing helpers](/docs/{{version}}/mocking#event-fake) makes it a cinch.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:545 docs/master/events.md:545
#, no-wrap
msgid "<a name=\"event-subscribers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/events.md:545 docs/master/events.md:545
#, no-wrap
msgid "Event Subscribers"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:548 docs/master/events.md:548
#, no-wrap
msgid "<a name=\"writing-event-subscribers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:548 docs/master/events.md:548
#, no-wrap
msgid "Writing Event Subscribers"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:551 docs/master/events.md:551
msgid "Event subscribers are classes that may subscribe to multiple events from within the subscriber class itself, allowing you to define several event handlers within a single class. Subscribers should define a `subscribe` method, which will be passed an event dispatcher instance. You may call the `listen` method on the given dispatcher to register event listeners:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:562 docs/master/events.md:562
#, no-wrap
msgid "    class UserEventSubscriber\n"
"    {\n"
"        /**\n"
"         * Handle user login events.\n"
"         */\n"
"        public function handleUserLogin($event) {}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:567 docs/master/events.md:567
#, no-wrap
msgid "        /**\n"
"         * Handle user logout events.\n"
"         */\n"
"        public function handleUserLogout($event) {}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:580 docs/master/events.md:580
#, no-wrap
msgid "        /**\n"
"         * Register the listeners for the subscriber.\n"
"         *\n"
"         * @param  \\Illuminate\\Events\\Dispatcher  $events\n"
"         * @return void\n"
"         */\n"
"        public function subscribe($events)\n"
"        {\n"
"            $events->listen(\n"
"                'Illuminate\\Auth\\Events\\Login',\n"
"                [UserEventSubscriber::class, 'handleUserLogin']\n"
"            );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:587 docs/master/events.md:587
#, no-wrap
msgid "            $events->listen(\n"
"                'Illuminate\\Auth\\Events\\Logout',\n"
"                [UserEventSubscriber::class, 'handleUserLogout']\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:589 docs/master/events.md:589
#, no-wrap
msgid "<a name=\"registering-event-subscribers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/events.md:589 docs/master/events.md:589
#, no-wrap
msgid "Registering Event Subscribers"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:592 docs/master/events.md:592
msgid "After writing the subscriber, you are ready to register it with the event dispatcher. You may register subscribers using the `$subscribe` property on the `EventServiceProvider`. For example, let's add the `UserEventSubscriber` to the list:"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:599 docs/master/events.md:599
#, no-wrap
msgid "    use App\\Listeners\\UserEventSubscriber;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:610 docs/master/events.md:610
#, no-wrap
msgid "    class EventServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The event listener mappings for the application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $listen = [\n"
"            //\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/events.md:619 docs/master/events.md:619
#, no-wrap
msgid "        /**\n"
"         * The subscriber classes to register.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $subscribe = [\n"
"            UserEventSubscriber::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/facades.md:1 docs/master/facades.md:1
#, no-wrap
msgid "Facades"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[When To Use Facades](#when-to-use-facades)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[Facades Vs. Dependency Injection](#facades-vs-dependency-injection)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[Facades Vs. Helper Functions](#facades-vs-helper-functions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[How Facades Work](#how-facades-work)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[Real-Time Facades](#real-time-facades)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/facades.md:10 docs/master/facades.md:10
msgid "[Facade Class Reference](#facade-class-reference)"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:15 docs/master/facades.md:15
msgid "Throughout the Laravel documentation, you will see examples of code that interacts with Laravel's features via \"facades\". Facades provide a \"static\" interface to classes that are available in the application's [service container](/docs/{{version}}/container). Laravel ships with many facades which provide access to almost all of Laravel's features."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:17 docs/master/facades.md:17
msgid "Laravel facades serve as \"static proxies\" to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods. It's perfectly fine if you don't totally understand how facades work under the hood - just go with the flow and continue learning about Laravel."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:19 docs/master/facades.md:19
msgid "All of Laravel's facades are defined in the `Illuminate\\Support\\Facades` namespace. So, we can easily access a facade like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:22
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cache;\n"
"    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:26 docs/8.x/facades.md:69 docs/master/facades.md:25
#: docs/master/facades.md:68
#, no-wrap
msgid "    Route::get('/cache', function () {\n"
"        return Cache::get('key');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:28 docs/master/facades.md:27
msgid "Throughout the Laravel documentation, many of the examples will use facades to demonstrate various features of the framework."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:30 docs/master/facades.md:29
#, no-wrap
msgid "<a name=\"helper-functions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/facades.md:30 docs/master/facades.md:29
#, no-wrap
msgid "Helper Functions"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:33 docs/master/facades.md:32
msgid "To compliment facades, Laravel offers a variety of global \"helper functions\" that make it even easier to interact with common Laravel features. Some of the common helper functions you may interact with are `view`, `response`, `url`, `config`, and more. Each helper function offered by Laravel is documented with their corresponding feature; however, a complete list is available within the dedicated [helper documentation](/docs/{{version}}/helpers)."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:35 docs/master/facades.md:34
msgid "For example, instead of using the `Illuminate\\Support\\Facades\\Response` facade to generate a JSON response, we may simply use the `response` function. Because helper functions are globally available, you do not need to import any classes in order to use them:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:37 docs/master/facades.md:36
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Response;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:43 docs/master/facades.md:42
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return Response::json([\n"
"            // ...\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:49 docs/master/facades.md:48
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return response()->json([\n"
"            // ...\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:51 docs/master/facades.md:50
#, no-wrap
msgid "<a name=\"when-to-use-facades\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/facades.md:51 docs/master/facades.md:50
#, no-wrap
msgid "When To Use Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:54 docs/master/facades.md:53
msgid "Facades have many benefits. They provide a terse, memorable syntax that allows you to use Laravel's features without remembering long class names that must be injected or configured manually. Furthermore, because of their unique usage of PHP's dynamic methods, they are easy to test."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:56 docs/master/facades.md:55
msgid "However, some care must be taken when using facades. The primary danger of facades is class \"scope creep\". Since facades are so easy to use and do not require injection, it can be easy to let your classes continue to grow and use many facades in a single class. Using dependency injection, this potential is mitigated by the visual feedback a large constructor gives you that your class is growing too large. So, when using facades, pay special attention to the size of your class so that its scope of responsibility stays narrow. If your class is getting too large, consider splitting it into multiple smaller classes."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:58 docs/master/facades.md:57
#, no-wrap
msgid "<a name=\"facades-vs-dependency-injection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/facades.md:58 docs/master/facades.md:57
#, no-wrap
msgid "Facades Vs. Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:61 docs/master/facades.md:60
msgid "One of the primary benefits of dependency injection is the ability to swap implementations of the injected class. This is useful during testing since you can inject a mock or stub and assert that various methods were called on the stub."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:63 docs/master/facades.md:62
msgid "Typically, it would not be possible to mock or stub a truly static class method. However, since facades use dynamic methods to proxy method calls to objects resolved from the service container, we actually can test facades just as we would test an injected class instance. For example, given the following route:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:71 docs/master/facades.md:70
msgid "Using Laravel's facade testing methods, we can write the following test to verify that the `Cache::get` method was called with the argument we expected:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:84 docs/8.x/facades.md:119 docs/master/facades.md:83
#: docs/master/facades.md:118
#, no-wrap
msgid "    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function testBasicExample()\n"
"    {\n"
"        Cache::shouldReceive('get')\n"
"             ->with('key')\n"
"             ->andReturn('value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:86 docs/8.x/facades.md:121 docs/master/facades.md:85
#: docs/master/facades.md:120
#, no-wrap
msgid "        $response = $this->get('/cache');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:89 docs/8.x/facades.md:124 docs/master/facades.md:88
#: docs/master/facades.md:123
#, no-wrap
msgid "        $response->assertSee('value');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:91 docs/master/facades.md:90
#, no-wrap
msgid "<a name=\"facades-vs-helper-functions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/facades.md:91 docs/master/facades.md:90
#, no-wrap
msgid "Facades Vs. Helper Functions"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:94 docs/master/facades.md:93
msgid "In addition to facades, Laravel includes a variety of \"helper\" functions which can perform common tasks like generating views, firing events, dispatching jobs, or sending HTTP responses. Many of these helper functions perform the same function as a corresponding facade. For example, this facade call and helper call are equivalent:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:96 docs/master/facades.md:95
#, no-wrap
msgid "    return Illuminate\\Support\\Facades\\View::make('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:98 docs/master/facades.md:97
#, no-wrap
msgid "    return view('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:100 docs/master/facades.md:99
msgid "There is absolutely no practical difference between facades and helper functions. When using helper functions, you may still test them exactly as you would the corresponding facade. For example, given the following route:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:104 docs/master/facades.md:103
#, no-wrap
msgid "    Route::get('/cache', function () {\n"
"        return cache('key');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:106 docs/master/facades.md:105
msgid "Under the hood, the `cache` helper is going to call the `get` method on the class underlying the `Cache` facade. So, even though we are using the helper function, we can write the following test to verify that the method was called with the argument we expected:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:126 docs/master/facades.md:125
#, no-wrap
msgid "<a name=\"how-facades-work\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/facades.md:126 docs/master/facades.md:125
#, no-wrap
msgid "How Facades Work"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:129 docs/master/facades.md:128
msgid "In a Laravel application, a facade is a class that provides access to an object from the container. The machinery that makes this work is in the `Facade` class. Laravel's facades, and any custom facades you create, will extend the base `Illuminate\\Support\\Facades\\Facade` class."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:131 docs/master/facades.md:130
msgid "The `Facade` base class makes use of the `__callStatic()` magic-method to defer calls from your facade to an object resolved from the container. In the example below, a call is made to the Laravel cache system. By glancing at this code, one might assume that the static `get` method is being called on the `Cache` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:138 docs/master/facades.md:137
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\Cache;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:150 docs/master/facades.md:149
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return Response\n"
"         */\n"
"        public function showProfile($id)\n"
"        {\n"
"            $user = Cache::get('user:'.$id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:154 docs/master/facades.md:153
#, no-wrap
msgid "            return view('profile', ['user' => $user]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:156 docs/master/facades.md:155
msgid "Notice that near the top of the file we are \"importing\" the `Cache` facade. This facade serves as a proxy for accessing the underlying implementation of the `Illuminate\\Contracts\\Cache\\Factory` interface. Any calls we make using the facade will be passed to the underlying instance of Laravel's cache service."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:158 docs/master/facades.md:157
msgid "If we look at that `Illuminate\\Support\\Facades\\Cache` class, you'll see that there is no static method `get`:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:168 docs/master/facades.md:167
#, no-wrap
msgid "    class Cache extends Facade\n"
"    {\n"
"        /**\n"
"         * Get the registered name of the component.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        protected static function getFacadeAccessor() { return 'cache'; }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:170 docs/master/facades.md:169
msgid "Instead, the `Cache` facade extends the base `Facade` class and defines the method `getFacadeAccessor()`. This method's job is to return the name of a service container binding. When a user references any static method on the `Cache` facade, Laravel resolves the `cache` binding from the [service container](/docs/{{version}}/container) and runs the requested method (in this case, `get`) against that object."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:172 docs/master/facades.md:171
#, no-wrap
msgid "<a name=\"real-time-facades\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/facades.md:172 docs/master/facades.md:171
#, no-wrap
msgid "Real-Time Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:175
msgid "Using real-time facades, you may treat any class in your application as if it was a facade. To illustrate how this can be used, let's first examine some code that does not use real-time facades. For example, let's assume our `Podcast` model has a `publish` method. However, in order to publish the podcast, we need to inject a `Publisher` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:182 docs/master/facades.md:181
#, no-wrap
msgid "    use App\\Contracts\\Publisher;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:194 docs/master/facades.md:193
#, no-wrap
msgid "    class Podcast extends Model\n"
"    {\n"
"        /**\n"
"         * Publish the podcast.\n"
"         *\n"
"         * @param  Publisher  $publisher\n"
"         * @return void\n"
"         */\n"
"        public function publish(Publisher $publisher)\n"
"        {\n"
"            $this->update(['publishing' => now()]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:198 docs/master/facades.md:197
#, no-wrap
msgid "            $publisher->publish($this);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:200 docs/master/facades.md:199
msgid "Injecting a publisher implementation into the method allows us to easily test the method in isolation since we can mock the injected publisher. However, it requires us to always pass a publisher instance each time we call the `publish` method. Using real-time facades, we can maintain the same testability while not being required to explicitly pass a `Publisher` instance. To generate a real-time facade, prefix the namespace of the imported class with `Facades`:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:207 docs/master/facades.md:206
#, no-wrap
msgid "    use Facades\\App\\Contracts\\Publisher;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:218 docs/master/facades.md:217
#, no-wrap
msgid "    class Podcast extends Model\n"
"    {\n"
"        /**\n"
"         * Publish the podcast.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function publish()\n"
"        {\n"
"            $this->update(['publishing' => now()]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:222 docs/master/facades.md:221
#, no-wrap
msgid "            Publisher::publish($this);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:224 docs/master/facades.md:223
msgid "When the real-time facade is used, the publisher implementation will be resolved out of the service container using the portion of the interface or class name that appears after the `Facades` prefix. When testing, we can use Laravel's built-in facade testing helpers to mock this method call:"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:233 docs/master/facades.md:232
#, no-wrap
msgid "    use App\\Models\\Podcast;\n"
"    use Facades\\App\\Contracts\\Publisher;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:237 docs/master/facades.md:236
#, no-wrap
msgid "    class PodcastTest extends TestCase\n"
"    {\n"
"        use RefreshDatabase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:246 docs/master/facades.md:245
#, no-wrap
msgid "        /**\n"
"         * A test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_podcast_can_be_published()\n"
"        {\n"
"            $podcast = Podcast::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:248 docs/master/facades.md:247
#, no-wrap
msgid "            Publisher::shouldReceive('publish')->once()->with($podcast);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:252 docs/master/facades.md:251
#, no-wrap
msgid "            $podcast->publish();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:254 docs/master/facades.md:253
#, no-wrap
msgid "<a name=\"facade-class-reference\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/facades.md:254 docs/master/facades.md:253
#, no-wrap
msgid "Facade Class Reference"
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:257 docs/master/facades.md:256
msgid "Below you will find every facade and its underlying class. This is a useful tool for quickly digging into the API documentation for a given facade root. The [service container binding](/docs/{{version}}/container) key is also included where applicable."
msgstr ""

#. type: Plain text
#: docs/8.x/facades.md:306
msgid "Facade | Class | Service Container Binding ------------- | ------------- | ------------- App | [Illuminate\\Foundation\\Application](https://laravel.com/api/{{version}}/Illuminate/Foundation/Application.html)  | `app` Artisan | [Illuminate\\Contracts\\Console\\Kernel](https://laravel.com/api/{{version}}/Illuminate/Contracts/Console/Kernel.html)  | `artisan` Auth | [Illuminate\\Auth\\AuthManager](https://laravel.com/api/{{version}}/Illuminate/Auth/AuthManager.html)  | `auth` Auth (Instance)  | [Illuminate\\Contracts\\Auth\\Guard](https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Guard.html)  | `auth.driver` Blade | [Illuminate\\View\\Compilers\\BladeCompiler](https://laravel.com/api/{{version}}/Illuminate/View/Compilers/BladeCompiler.html)  | `blade.compiler` Broadcast | [Illuminate\\Contracts\\Broadcasting\\Factory](https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Factory.html)  | &nbsp; Broadcast (Instance)  | [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Broadcaster.html)  | &nbsp; Bus | [Illuminate\\Contracts\\Bus\\Dispatcher](https://laravel.com/api/{{version}}/Illuminate/Contracts/Bus/Dispatcher.html)  | &nbsp; Cache | [Illuminate\\Cache\\CacheManager](https://laravel.com/api/{{version}}/Illuminate/Cache/CacheManager.html)  | `cache` Cache (Instance)  | [Illuminate\\Cache\\Repository](https://laravel.com/api/{{version}}/Illuminate/Cache/Repository.html)  | `cache.store` Config | [Illuminate\\Config\\Repository](https://laravel.com/api/{{version}}/Illuminate/Config/Repository.html)  | `config` Cookie | [Illuminate\\Cookie\\CookieJar](https://laravel.com/api/{{version}}/Illuminate/Cookie/CookieJar.html)  | `cookie` Crypt | [Illuminate\\Encryption\\Encrypter](https://laravel.com/api/{{version}}/Illuminate/Encryption/Encrypter.html)  | `encrypter` Date | [Illuminate\\Support\\DateFactory](https://laravel.com/api/{{version}}/Illuminate/Support/DateFactory.html)  | `date` DB | [Illuminate\\Database\\DatabaseManager](https://laravel.com/api/{{version}}/Illuminate/Database/DatabaseManager.html)  | `db` DB (Instance)  | [Illuminate\\Database\\Connection](https://laravel.com/api/{{version}}/Illuminate/Database/Connection.html)  | `db.connection` Event | [Illuminate\\Events\\Dispatcher](https://laravel.com/api/{{version}}/Illuminate/Events/Dispatcher.html)  | `events` File | [Illuminate\\Filesystem\\Filesystem](https://laravel.com/api/{{version}}/Illuminate/Filesystem/Filesystem.html)  | `files` Gate | [Illuminate\\Contracts\\Auth\\Access\\Gate](https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Access/Gate.html)  | &nbsp; Hash | [Illuminate\\Contracts\\Hashing\\Hasher](https://laravel.com/api/{{version}}/Illuminate/Contracts/Hashing/Hasher.html)  | `hash` Http | [Illuminate\\Http\\Client\\Factory](https://laravel.com/api/{{version}}/Illuminate/Http/Client/Factory.html)  | &nbsp; Lang | [Illuminate\\Translation\\Translator](https://laravel.com/api/{{version}}/Illuminate/Translation/Translator.html)  | `translator` Log | [Illuminate\\Log\\LogManager](https://laravel.com/api/{{version}}/Illuminate/Log/LogManager.html)  | `log` Mail | [Illuminate\\Mail\\Mailer](https://laravel.com/api/{{version}}/Illuminate/Mail/Mailer.html)  | `mailer` Notification | [Illuminate\\Notifications\\ChannelManager](https://laravel.com/api/{{version}}/Illuminate/Notifications/ChannelManager.html)  | &nbsp; Password | [Illuminate\\Auth\\Passwords\\PasswordBrokerManager](https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBrokerManager.html)  | `auth.password` Password (Instance)  | [Illuminate\\Auth\\Passwords\\PasswordBroker](https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBroker.html)  | `auth.password.broker` Queue | [Illuminate\\Queue\\QueueManager](https://laravel.com/api/{{version}}/Illuminate/Queue/QueueManager.html)  | `queue` Queue (Instance)  | [Illuminate\\Contracts\\Queue\\Queue](https://laravel.com/api/{{version}}/Illuminate/Contracts/Queue/Queue.html)  | `queue.connection` Queue (Base Class)  | [Illuminate\\Queue\\Queue](https://laravel.com/api/{{version}}/Illuminate/Queue/Queue.html)  | &nbsp; Redirect | [Illuminate\\Routing\\Redirector](https://laravel.com/api/{{version}}/Illuminate/Routing/Redirector.html)  | `redirect` Redis | [Illuminate\\Redis\\RedisManager](https://laravel.com/api/{{version}}/Illuminate/Redis/RedisManager.html)  | `redis` Redis (Instance)  | [Illuminate\\Redis\\Connections\\Connection](https://laravel.com/api/{{version}}/Illuminate/Redis/Connections/Connection.html)  | `redis.connection` Request | [Illuminate\\Http\\Request](https://laravel.com/api/{{version}}/Illuminate/Http/Request.html)  | `request` Response | [Illuminate\\Contracts\\Routing\\ResponseFactory](https://laravel.com/api/{{version}}/Illuminate/Contracts/Routing/ResponseFactory.html)  | &nbsp; Response (Instance)  | [Illuminate\\Http\\Response](https://laravel.com/api/{{version}}/Illuminate/Http/Response.html)  | &nbsp; Route | [Illuminate\\Routing\\Router](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html)  | `router` Schema | [Illuminate\\Database\\Schema\\Builder](https://laravel.com/api/{{version}}/Illuminate/Database/Schema/Builder.html)  | &nbsp; Session | [Illuminate\\Session\\SessionManager](https://laravel.com/api/{{version}}/Illuminate/Session/SessionManager.html)  | `session` Session (Instance)  | [Illuminate\\Session\\Store](https://laravel.com/api/{{version}}/Illuminate/Session/Store.html)  | `session.store` Storage | [Illuminate\\Filesystem\\FilesystemManager](https://laravel.com/api/{{version}}/Illuminate/Filesystem/FilesystemManager.html)  | `filesystem` Storage (Instance)  | [Illuminate\\Contracts\\Filesystem\\Filesystem](https://laravel.com/api/{{version}}/Illuminate/Contracts/Filesystem/Filesystem.html)  | `filesystem.disk` URL | [Illuminate\\Routing\\UrlGenerator](https://laravel.com/api/{{version}}/Illuminate/Routing/UrlGenerator.html)  | `url` Validator | [Illuminate\\Validation\\Factory](https://laravel.com/api/{{version}}/Illuminate/Validation/Factory.html)  | `validator` Validator (Instance)  | [Illuminate\\Validation\\Validator](https://laravel.com/api/{{version}}/Illuminate/Validation/Validator.html)  | &nbsp; View | [Illuminate\\View\\Factory](https://laravel.com/api/{{version}}/Illuminate/View/Factory.html)  | `view` View (Instance)  | [Illuminate\\View\\View](https://laravel.com/api/{{version}}/Illuminate/View/View.html)  | &nbsp;"
msgstr ""

#. type: Title #
#: docs/8.x/filesystem.md:1 docs/master/filesystem.md:1
#, no-wrap
msgid "File Storage"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[The Local Driver](#the-local-driver)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[The Public Disk](#the-public-disk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Caching](#caching)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Obtaining Disk Instances](#obtaining-disk-instances)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Retrieving Files](#retrieving-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Downloading Files](#downloading-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[File URLs](#file-urls)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[File Metadata](#file-metadata)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Storing Files](#storing-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[File Uploads](#file-uploads)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[File Visibility](#file-visibility)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Deleting Files](#deleting-files)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Directories](#directories)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/filesystem.md:20 docs/master/filesystem.md:20
msgid "[Custom Filesystems](#custom-filesystems)"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:25 docs/master/filesystem.md:25
msgid "Laravel provides a powerful filesystem abstraction thanks to the wonderful [Flysystem](https://github.com/thephpleague/flysystem) PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple drivers for working with local filesystems, SFTP, and Amazon S3. Even better, it's amazingly simple to switch between these storage options between your local development machine and production server as the API remains the same for each system."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:30 docs/master/filesystem.md:30
msgid "Laravel's filesystem configuration file is located at `config/filesystems.php`. Within this file, you may configure all of your filesystem \"disks\". Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file so you can modify the configuration to reflect your storage preferences and credentials."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:32 docs/master/filesystem.md:32
msgid "The `local` driver interacts with files stored locally on the server running the Laravel application while the `s3` driver is used to write to Amazon's S3 cloud storage service."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:34 docs/master/filesystem.md:34
#, no-wrap
msgid "> {tip} You may configure as many disks as you like and may even have multiple disks that use the same driver.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:36 docs/master/filesystem.md:36
#, no-wrap
msgid "<a name=\"the-local-driver\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:36 docs/master/filesystem.md:36
#, no-wrap
msgid "The Local Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:39 docs/master/filesystem.md:39
msgid "When using the `local` driver, all file operations are relative to the `root` directory defined in your `filesystems` configuration file. By default, this value is set to the `storage/app` directory. Therefore, the following method would write to `storage/app/example.txt`:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:41 docs/8.x/filesystem.md:149
#: docs/8.x/filesystem.md:190 docs/8.x/filesystem.md:203
#: docs/8.x/filesystem.md:237 docs/8.x/filesystem.md:250
#: docs/8.x/filesystem.md:259 docs/8.x/filesystem.md:389
#: docs/8.x/filesystem.md:434 docs/8.x/filesystem.md:442
#: docs/8.x/filesystem.md:454 docs/master/filesystem.md:41
#: docs/master/filesystem.md:149 docs/master/filesystem.md:190
#: docs/master/filesystem.md:203 docs/master/filesystem.md:237
#: docs/master/filesystem.md:250 docs/master/filesystem.md:259
#: docs/master/filesystem.md:389 docs/master/filesystem.md:434
#: docs/master/filesystem.md:442 docs/master/filesystem.md:454
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Storage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:43 docs/master/filesystem.md:43
#, no-wrap
msgid "    Storage::disk('local')->put('example.txt', 'Contents');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:45 docs/master/filesystem.md:45
#, no-wrap
msgid "<a name=\"the-public-disk\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:45 docs/master/filesystem.md:45
#, no-wrap
msgid "The Public Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:48 docs/master/filesystem.md:48
msgid "The `public` disk included in your application's `filesystems` configuration file is intended for files that are going to be publicly accessible. By default, the `public` disk uses the `local` driver and stores its files in `storage/app/public`."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:50 docs/master/filesystem.md:50
msgid "To make these files accessible from the web, you should create a symbolic link from `public/storage` to `storage/app/public`. Utilizing this folder convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like [Envoyer](https://envoyer.io)."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:52 docs/master/filesystem.md:52
msgid "To create the symbolic link, you may use the `storage:link` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:54 docs/master/filesystem.md:54
#, no-wrap
msgid "    php artisan storage:link\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:56 docs/master/filesystem.md:56
msgid "Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the `asset` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:58 docs/master/filesystem.md:58
#, no-wrap
msgid "    echo asset('storage/file.txt');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:60 docs/master/filesystem.md:60
msgid "You may configure additional symbolic links in your `filesystems` configuration file. Each of the configured links will be created when you run the `storage:link` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:65 docs/master/filesystem.md:65
#, no-wrap
msgid "    'links' => [\n"
"        public_path('storage') => storage_path('app/public'),\n"
"        public_path('images') => storage_path('app/images'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:70 docs/master/filesystem.md:70
#, no-wrap
msgid "<a name=\"composer-packages\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:70 docs/master/filesystem.md:70
#, no-wrap
msgid "Composer Packages"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:73 docs/master/filesystem.md:73
msgid "Before using the S3 or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:76 docs/master/filesystem.md:76
msgid "- Amazon S3: `league/flysystem-aws-s3-v3 ~1.0` - SFTP: `league/flysystem-sftp ~1.0`"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:78 docs/master/filesystem.md:78
msgid "In addition, you may choose to install a cached adapter for increased performance:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:80 docs/master/filesystem.md:80
msgid "- CachedAdapter: `league/flysystem-cached-adapter ~1.0`"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:82 docs/master/filesystem.md:82
#, no-wrap
msgid "<a name=\"s3-driver-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:82 docs/master/filesystem.md:82
#, no-wrap
msgid "S3 Driver Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:85 docs/master/filesystem.md:85
msgid "The S3 driver configuration information is located in your `config/filesystems.php` configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:87 docs/master/filesystem.md:87
#, no-wrap
msgid "<a name=\"ftp-driver-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:87 docs/master/filesystem.md:87
#, no-wrap
msgid "FTP Driver Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:90 docs/master/filesystem.md:90
msgid "Laravel's Flysystem integrations work great with FTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an FTP filesystem, you may use the configuration example below:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:96 docs/master/filesystem.md:96
#, no-wrap
msgid "    'ftp' => [\n"
"        'driver' => 'ftp',\n"
"        'host' => 'ftp.example.com',\n"
"        'username' => 'your-username',\n"
"        'password' => 'your-password',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:104 docs/master/filesystem.md:104
#, no-wrap
msgid "        // Optional FTP Settings...\n"
"        // 'port' => 21,\n"
"        // 'root' => '',\n"
"        // 'passive' => true,\n"
"        // 'ssl' => true,\n"
"        // 'timeout' => 30,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:106 docs/master/filesystem.md:106
#, no-wrap
msgid "<a name=\"sftp-driver-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:106 docs/master/filesystem.md:106
#, no-wrap
msgid "SFTP Driver Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:109 docs/master/filesystem.md:109
msgid "Laravel's Flysystem integrations work great with SFTP; however, a sample configuration is not included with the framework's default `filesystems.php` configuration file. If you need to configure an SFTP filesystem, you may use the configuration example below:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:115 docs/master/filesystem.md:115
#, no-wrap
msgid "    'sftp' => [\n"
"        'driver' => 'sftp',\n"
"        'host' => 'example.com',\n"
"        'username' => 'your-username',\n"
"        'password' => 'your-password',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:119 docs/master/filesystem.md:119
#, no-wrap
msgid "        // Settings for SSH key based authentication...\n"
"        'privateKey' => '/path/to/privateKey',\n"
"        'password' => 'encryption-password',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:125 docs/master/filesystem.md:125
#, no-wrap
msgid "        // Optional SFTP Settings...\n"
"        // 'port' => 22,\n"
"        // 'root' => '',\n"
"        // 'timeout' => 30,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:127 docs/master/filesystem.md:127
#, no-wrap
msgid "<a name=\"caching\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:127 docs/master/filesystem.md:127
#, no-wrap
msgid "Caching"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:130 docs/master/filesystem.md:130
msgid "To enable caching for a given disk, you may add a `cache` directive to the disk's configuration options. The `cache` option should be an array of caching options containing the `disk` name, the `expire` time in seconds, and the cache `prefix`:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:133 docs/master/filesystem.md:133
#, no-wrap
msgid "    's3' => [\n"
"        'driver' => 's3',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:135 docs/master/filesystem.md:135
#, no-wrap
msgid "        // Other Disk Options...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:142 docs/master/filesystem.md:142
#, no-wrap
msgid "        'cache' => [\n"
"            'store' => 'memcached',\n"
"            'expire' => 600,\n"
"            'prefix' => 'cache-prefix',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:144 docs/master/filesystem.md:144
#, no-wrap
msgid "<a name=\"obtaining-disk-instances\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:144 docs/master/filesystem.md:144
#, no-wrap
msgid "Obtaining Disk Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:147 docs/master/filesystem.md:147
msgid "The `Storage` facade may be used to interact with any of your configured disks. For example, you may use the `put` method on the facade to store an avatar on the default disk. If you call methods on the `Storage` facade without first calling the `disk` method, the method will automatically be passed to the default disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:151 docs/master/filesystem.md:151
#, no-wrap
msgid "    Storage::put('avatars/1', $content);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:153 docs/master/filesystem.md:153
msgid "If your application interacts with multiple disks, you may use the `disk` method on the `Storage` facade to work with files on a particular disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:155 docs/master/filesystem.md:155
#, no-wrap
msgid "    Storage::disk('s3')->put('avatars/1', $content);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:157 docs/master/filesystem.md:157
#, no-wrap
msgid "<a name=\"retrieving-files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:157 docs/master/filesystem.md:157
#, no-wrap
msgid "Retrieving Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:160 docs/master/filesystem.md:160
msgid "The `get` method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the disk's \"root\" location:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:162 docs/master/filesystem.md:162
#, no-wrap
msgid "    $contents = Storage::get('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:164 docs/master/filesystem.md:164
msgid "The `exists` method may be used to determine if a file exists on the disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:168 docs/master/filesystem.md:168
#, no-wrap
msgid "    if (Storage::disk('s3')->exists('file.jpg')) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:170 docs/master/filesystem.md:170
msgid "The `missing` method may be used to determine if a file is missing from the disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:174 docs/master/filesystem.md:174
#, no-wrap
msgid "    if (Storage::disk('s3')->missing('file.jpg')) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:176 docs/master/filesystem.md:176
#, no-wrap
msgid "<a name=\"downloading-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:176 docs/master/filesystem.md:176
#, no-wrap
msgid "Downloading Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:179 docs/8.x/responses.md:286
#: docs/master/filesystem.md:179 docs/master/responses.md:286
msgid "The `download` method may be used to generate a response that forces the user's browser to download the file at the given path. The `download` method accepts a filename as the second argument to the method, which will determine the filename that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:181 docs/master/filesystem.md:181
#, no-wrap
msgid "    return Storage::download('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:183 docs/master/filesystem.md:183
#, no-wrap
msgid "    return Storage::download('file.jpg', $name, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:185 docs/master/filesystem.md:185
#, no-wrap
msgid "<a name=\"file-urls\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:185 docs/master/filesystem.md:185
#, no-wrap
msgid "File URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:188 docs/master/filesystem.md:188
msgid "You may use the `url` method to get the URL for a given file. If you are using the `local` driver, this will typically just prepend `/storage` to the given path and return a relative URL to the file. If you are using the `s3` driver, the fully qualified remote URL will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:192 docs/master/filesystem.md:192
#, no-wrap
msgid "    $url = Storage::url('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:194 docs/master/filesystem.md:194
msgid "When using the `local` driver, all files that should be publicly accessible should be placed in the `storage/app/public` directory. Furthermore, you should [create a symbolic link](#the-public-disk) at `public/storage` which points to the `storage/app/public` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:196 docs/master/filesystem.md:196
#, no-wrap
msgid "> {note} When using the `local` driver, the return value of `url` is not URL encoded. For this reason, we recommend always storing your files using names that will create valid URLs.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:198 docs/master/filesystem.md:198
#, no-wrap
msgid "<a name=\"temporary-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:198 docs/master/filesystem.md:198
#, no-wrap
msgid "Temporary URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:201 docs/master/filesystem.md:201
msgid "Using the `temporaryUrl` method, you may create temporary URLs to files stored using the `s3` driver. This method accepts a path and a `DateTime` instance specifying when the URL should expire:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:207 docs/master/filesystem.md:207
#, no-wrap
msgid "    $url = Storage::temporaryUrl(\n"
"        'file.jpg', now()->addMinutes(5)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:209 docs/master/filesystem.md:209
msgid "If you need to specify additional [S3 request parameters](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests), you may pass the array of request parameters as the third argument to the `temporaryUrl` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:218 docs/master/filesystem.md:218
#, no-wrap
msgid "    $url = Storage::temporaryUrl(\n"
"        'file.jpg',\n"
"        now()->addMinutes(5),\n"
"        [\n"
"            'ResponseContentType' => 'application/octet-stream',\n"
"            'ResponseContentDisposition' => 'attachment; filename=file2.jpg',\n"
"        ]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:220 docs/master/filesystem.md:220
#, no-wrap
msgid "<a name=\"url-host-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:220 docs/master/filesystem.md:220
#, no-wrap
msgid "URL Host Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:223 docs/master/filesystem.md:223
msgid "If you would like to pre-define the host for URLs generated using the `Storage` facade, you may add a `url` option to the disk's configuration array:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:230 docs/master/filesystem.md:230
#, no-wrap
msgid "    'public' => [\n"
"        'driver' => 'local',\n"
"        'root' => storage_path('app/public'),\n"
"        'url' => env('APP_URL').'/storage',\n"
"        'visibility' => 'public',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:232 docs/master/filesystem.md:232
#, no-wrap
msgid "<a name=\"file-metadata\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:232 docs/master/filesystem.md:232
#, no-wrap
msgid "File Metadata"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:235 docs/master/filesystem.md:235
msgid "In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the `size` method may be used to get the size of a file in bytes:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:239 docs/master/filesystem.md:239
#, no-wrap
msgid "    $size = Storage::size('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:241 docs/master/filesystem.md:241
msgid "The `lastModified` method returns the UNIX timestamp of the last time the file was modified:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:243 docs/master/filesystem.md:243
#, no-wrap
msgid "    $time = Storage::lastModified('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:245 docs/master/filesystem.md:245
#, no-wrap
msgid "<a name=\"file-paths\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:245 docs/master/filesystem.md:245
#, no-wrap
msgid "File Paths"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:248 docs/master/filesystem.md:248
msgid "You may use the `path` method to get the path for a given file. If you are using the `local` driver, this will return the absolute path to the file. If you are using the `s3` driver, this method will return the relative path to the file in the S3 bucket:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:252 docs/master/filesystem.md:252
#, no-wrap
msgid "    $path = Storage::path('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:254 docs/master/filesystem.md:254
#, no-wrap
msgid "<a name=\"storing-files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:254 docs/master/filesystem.md:254
#, no-wrap
msgid "Storing Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:257 docs/master/filesystem.md:257
msgid "The `put` method may be used to store file contents on a disk. You may also pass a PHP `resource` to the `put` method, which will use Flysystem's underlying stream support. Remember, all file paths should be specified relative to the \"root\" location configured for the disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:261 docs/master/filesystem.md:261
#, no-wrap
msgid "    Storage::put('file.jpg', $contents);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:263 docs/master/filesystem.md:263
#, no-wrap
msgid "    Storage::put('file.jpg', $resource);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:265 docs/master/filesystem.md:265
#, no-wrap
msgid "<a name=\"automatic-streaming\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:265 docs/master/filesystem.md:265
#, no-wrap
msgid "Automatic Streaming"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:268 docs/master/filesystem.md:268
msgid "Streaming files to storage offers significantly reduced memory usage. If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the `putFile` or `putFileAs` method. This method accepts either an `Illuminate\\Http\\File` or `Illuminate\\Http\\UploadedFile` instance and will automatically stream the file to your desired location:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:271 docs/master/filesystem.md:271
#, no-wrap
msgid "    use Illuminate\\Http\\File;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:274 docs/master/filesystem.md:274
#, no-wrap
msgid "    // Automatically generate a unique ID for filename...\n"
"    $path = Storage::putFile('photos', new File('/path/to/photo'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:277 docs/master/filesystem.md:277
#, no-wrap
msgid "    // Manually specify a filename...\n"
"    $path = Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:279 docs/master/filesystem.md:279
msgid "There are a few important things to note about the `putFile` method. Note that we only specified a directory name and not a filename. By default, the `putFile` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `putFile` method so you can store the path, including the generated filename, in your database."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:281 docs/master/filesystem.md:281
msgid "The `putFile` and `putFileAs` methods also accept an argument to specify the \"visibility\" of the stored file. This is particularly useful if you are storing the file on a cloud disk such as Amazon S3 and would like the file to be publicly accessible via generated URLs:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:283 docs/master/filesystem.md:283
#, no-wrap
msgid "    Storage::putFile('photos', new File('/path/to/photo'), 'public');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:285 docs/master/filesystem.md:285
#, no-wrap
msgid "<a name=\"prepending-appending-to-files\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:285 docs/master/filesystem.md:285
#, no-wrap
msgid "Prepending & Appending To Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:288 docs/master/filesystem.md:288
msgid "The `prepend` and `append` methods allow you to write to the beginning or end of a file:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:290 docs/master/filesystem.md:290
#, no-wrap
msgid "    Storage::prepend('file.log', 'Prepended Text');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:292 docs/master/filesystem.md:292
#, no-wrap
msgid "    Storage::append('file.log', 'Appended Text');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:294 docs/master/filesystem.md:294
#, no-wrap
msgid "<a name=\"copying-moving-files\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:294 docs/master/filesystem.md:294
#, no-wrap
msgid "Copying & Moving Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:297 docs/master/filesystem.md:297
msgid "The `copy` method may be used to copy an existing file to a new location on the disk, while the `move` method may be used to rename or move an existing file to a new location:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:299 docs/master/filesystem.md:299
#, no-wrap
msgid "    Storage::copy('old/file.jpg', 'new/file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:301 docs/master/filesystem.md:301
#, no-wrap
msgid "    Storage::move('old/file.jpg', 'new/file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:303 docs/master/filesystem.md:303
#, no-wrap
msgid "<a name=\"file-uploads\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:303 docs/master/filesystem.md:303
#, no-wrap
msgid "File Uploads"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:306 docs/master/filesystem.md:306
msgid "In web applications, one of the most common use-cases for storing files is storing user uploaded files such as photos and documents. Laravel makes it very easy to store uploaded files using the `store` method on an uploaded file instance. Call the `store` method with the path at which you wish to store the uploaded file:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:313 docs/8.x/session.md:86 docs/8.x/validation.md:68
#: docs/master/filesystem.md:313 docs/master/session.md:86
#: docs/master/validation.md:68
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:325 docs/master/filesystem.md:325
#, no-wrap
msgid "    class UserAvatarController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the avatar for the user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            $path = $request->file('avatar')->store('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:329 docs/master/filesystem.md:329
#, no-wrap
msgid "            return $path;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:331 docs/master/filesystem.md:331
msgid "There are a few important things to note about this example. Note that we only specified a directory name, not a filename. By default, the `store` method will generate a unique ID to serve as the filename. The file's extension will be determined by examining the file's MIME type. The path to the file will be returned by the `store` method so you can store the path, including the generated filename, in your database."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:333 docs/master/filesystem.md:333
msgid "You may also call the `putFile` method on the `Storage` facade to perform the same file storage operation as the example above:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:335 docs/master/filesystem.md:335
#, no-wrap
msgid "    $path = Storage::putFile('avatars', $request->file('avatar'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:337 docs/master/filesystem.md:337
#, no-wrap
msgid "<a name=\"specifying-a-file-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:337 docs/master/filesystem.md:337
#, no-wrap
msgid "Specifying A File Name"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:340 docs/master/filesystem.md:340
msgid "If you do not want a filename to be automatically assigned to your stored file, you may use the `storeAs` method, which receives the path, the filename, and the (optional) disk as its arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:344 docs/master/filesystem.md:344
#, no-wrap
msgid "    $path = $request->file('avatar')->storeAs(\n"
"        'avatars', $request->user()->id\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:346 docs/master/filesystem.md:346
msgid "You may also use the `putFileAs` method on the `Storage` facade, which will perform the same file storage operation as the example above:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:350 docs/master/filesystem.md:350
#, no-wrap
msgid "    $path = Storage::putFileAs(\n"
"        'avatars', $request->file('avatar'), $request->user()->id\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:352 docs/master/filesystem.md:352
#, no-wrap
msgid "> {note} Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel's file storage methods. File paths are normalized using the `League\\Flysystem\\Util::normalizePath` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:354 docs/master/filesystem.md:354
#, no-wrap
msgid "<a name=\"specifying-a-disk\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:354 docs/master/filesystem.md:354
#, no-wrap
msgid "Specifying A Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:357 docs/master/filesystem.md:357
msgid "By default, this uploaded file's `store` method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the `store` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:361 docs/master/filesystem.md:361
#, no-wrap
msgid "    $path = $request->file('avatar')->store(\n"
"        'avatars/'.$request->user()->id, 's3'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:363 docs/master/filesystem.md:363
msgid "If you are using the `storeAs` method, you may pass the disk name as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:369 docs/master/filesystem.md:369
#, no-wrap
msgid "    $path = $request->file('avatar')->storeAs(\n"
"        'avatars',\n"
"        $request->user()->id,\n"
"        's3'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:371 docs/master/filesystem.md:371
#, no-wrap
msgid "<a name=\"other-uploaded-file-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:371 docs/master/filesystem.md:371
#, no-wrap
msgid "Other Uploaded File Information"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:374 docs/master/filesystem.md:374
msgid "If you would like to get the original name of the uploaded file, you may do so using the `getClientOriginalName` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:376 docs/master/filesystem.md:376
#, no-wrap
msgid "    $name = $request->file('avatar')->getClientOriginalName();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:378 docs/master/filesystem.md:378
msgid "The `extension` method may be used to get the file extension of the uploaded file:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:380 docs/master/filesystem.md:380
#, no-wrap
msgid "    $extension = $request->file('avatar')->extension();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:382 docs/master/filesystem.md:382
#, no-wrap
msgid "<a name=\"file-visibility\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/filesystem.md:382 docs/master/filesystem.md:382
#, no-wrap
msgid "File Visibility"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:385 docs/master/filesystem.md:385
msgid "In Laravel's Flysystem integration, \"visibility\" is an abstraction of file permissions across multiple platforms. Files may either be declared `public` or `private`. When a file is declared `public`, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for `public` files."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:387 docs/master/filesystem.md:387
msgid "You can set the visibility when writing the file via the `put` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:391 docs/master/filesystem.md:391
#, no-wrap
msgid "    Storage::put('file.jpg', $contents, 'public');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:393 docs/master/filesystem.md:393
msgid "If the file has already been stored, its visibility can be retrieved and set via the `getVisibility` and `setVisibility` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:395 docs/master/filesystem.md:395
#, no-wrap
msgid "    $visibility = Storage::getVisibility('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:397 docs/master/filesystem.md:397
#, no-wrap
msgid "    Storage::setVisibility('file.jpg', 'public');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:399 docs/master/filesystem.md:399
msgid "When interacting with uploaded files, you may use the `storePublicly` and `storePubliclyAs` methods to store the uploaded file with `public` visibility:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:401 docs/master/filesystem.md:401
#, no-wrap
msgid "    $path = $request->file('avatar')->storePublicly('avatars', 's3');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:407 docs/master/filesystem.md:407
#, no-wrap
msgid "    $path = $request->file('avatar')->storePubliclyAs(\n"
"        'avatars',\n"
"        $request->user()->id,\n"
"        's3'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:409 docs/master/filesystem.md:409
#, no-wrap
msgid "<a name=\"local-files-and-visibility\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:409 docs/master/filesystem.md:409
#, no-wrap
msgid "Local Files & Visibility"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:412 docs/master/filesystem.md:412
msgid "When using the `local` driver, `public` [visibility](#file-visibility) translates to `0755` permissions for directories and `0644` permissions for files. You can modify the permissions mappings in your application's `filesystems` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:427 docs/master/filesystem.md:427
#, no-wrap
msgid "    'local' => [\n"
"        'driver' => 'local',\n"
"        'root' => storage_path('app'),\n"
"        'permissions' => [\n"
"            'file' => [\n"
"                'public' => 0664,\n"
"                'private' => 0600,\n"
"            ],\n"
"            'dir' => [\n"
"                'public' => 0775,\n"
"                'private' => 0700,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:429 docs/master/filesystem.md:429
#, no-wrap
msgid "<a name=\"deleting-files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:429 docs/master/filesystem.md:429
#, no-wrap
msgid "Deleting Files"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:432 docs/master/filesystem.md:432
msgid "The `delete` method accepts a single filename or an array of files to delete:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:436 docs/master/filesystem.md:436
#, no-wrap
msgid "    Storage::delete('file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:438 docs/master/filesystem.md:438
#, no-wrap
msgid "    Storage::delete(['file.jpg', 'file2.jpg']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:440 docs/master/filesystem.md:440
msgid "If necessary, you may specify the disk that the file should be deleted from:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:444 docs/master/filesystem.md:444
#, no-wrap
msgid "    Storage::disk('s3')->delete('path/file.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:446 docs/master/filesystem.md:446
#, no-wrap
msgid "<a name=\"directories\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:446 docs/master/filesystem.md:446
#, no-wrap
msgid "Directories"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:449 docs/master/filesystem.md:449
#, no-wrap
msgid "<a name=\"get-all-files-within-a-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:449 docs/master/filesystem.md:449
#, no-wrap
msgid "Get All Files Within A Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:452 docs/master/filesystem.md:452
msgid "The `files` method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all subdirectories, you may use the `allFiles` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:456 docs/master/filesystem.md:456
#, no-wrap
msgid "    $files = Storage::files($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:458 docs/master/filesystem.md:458
#, no-wrap
msgid "    $files = Storage::allFiles($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:460 docs/master/filesystem.md:460
#, no-wrap
msgid "<a name=\"get-all-directories-within-a-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:460 docs/master/filesystem.md:460
#, no-wrap
msgid "Get All Directories Within A Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:463 docs/master/filesystem.md:463
msgid "The `directories` method returns an array of all the directories within a given directory. Additionally, you may use the `allDirectories` method to get a list of all directories within a given directory and all of its subdirectories:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:465 docs/master/filesystem.md:465
#, no-wrap
msgid "    $directories = Storage::directories($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:467 docs/master/filesystem.md:467
#, no-wrap
msgid "    $directories = Storage::allDirectories($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:469 docs/master/filesystem.md:469
#, no-wrap
msgid "<a name=\"create-a-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:469 docs/master/filesystem.md:469
#, no-wrap
msgid "Create A Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:472 docs/master/filesystem.md:472
msgid "The `makeDirectory` method will create the given directory, including any needed subdirectories:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:474 docs/master/filesystem.md:474
#, no-wrap
msgid "    Storage::makeDirectory($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:476 docs/master/filesystem.md:476
#, no-wrap
msgid "<a name=\"delete-a-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/filesystem.md:476 docs/master/filesystem.md:476
#, no-wrap
msgid "Delete A Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:479 docs/master/filesystem.md:479
msgid "Finally, the `deleteDirectory` method may be used to remove a directory and all of its files:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:481 docs/master/filesystem.md:481
#, no-wrap
msgid "    Storage::deleteDirectory($directory);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:483 docs/master/filesystem.md:483
#, no-wrap
msgid "<a name=\"custom-filesystems\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/filesystem.md:483 docs/master/filesystem.md:483
#, no-wrap
msgid "Custom Filesystems"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:486 docs/master/filesystem.md:486
msgid "Laravel's Flysystem integration provides support for several \"drivers\" out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:488 docs/master/filesystem.md:488
msgid "In order to define a custom filesystem you will need a Flysystem adapter. Let's add a community maintained Dropbox adapter to our project:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:490 docs/master/filesystem.md:490
#, no-wrap
msgid "    composer require spatie/flysystem-dropbox\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:492 docs/master/filesystem.md:492
msgid "Next, you can register the driver within the `boot` method of one of your application's [service providers](/docs/{{version}}/providers). To accomplish this, you should use the `extend` method of the `Storage` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:502 docs/master/filesystem.md:502
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use League\\Flysystem\\Filesystem;\n"
"    use Spatie\\Dropbox\\Client as DropboxClient;\n"
"    use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:526 docs/master/filesystem.md:526
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Storage::extend('dropbox', function ($app, $config) {\n"
"                $client = new DropboxClient(\n"
"                    $config['authorization_token']\n"
"                );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:531 docs/master/filesystem.md:531
#, no-wrap
msgid "                return new Filesystem(new DropboxAdapter($client));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:533 docs/master/filesystem.md:533
msgid "The first argument of the `extend` method is the name of the driver and the second is a closure that receives the `$app` and `$config` variables. The closure must return an instance of `League\\Flysystem\\Filesystem`. The `$config` variable contains the values defined in `config/filesystems.php` for the specified disk."
msgstr ""

#. type: Plain text
#: docs/8.x/filesystem.md:534 docs/master/filesystem.md:534
msgid "Once you have created and registered the extension's service provider, you may use the `dropbox` driver in your `config/filesystems.php` configuration file."
msgstr ""

#. type: Title #
#: docs/8.x/fortify.md:1 docs/master/fortify.md:1
#, no-wrap
msgid "Laravel Fortify"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[What Is Fortify?](#what-is-fortify)"
msgstr "[什麼是 Fortify？](#what-is-fortify)"

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[When Should I Use Fortify?](#when-should-i-use-fortify)"
msgstr "[什麼時候該用 Fortify？](#when-should-i-use-fortify)"

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[The Fortify Service Provider](#the-fortify-service-provider)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Fortify Features](#fortify-features)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Disabling Views](#disabling-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Customizing User Authentication](#customizing-user-authentication)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Two Factor Authentication](#two-factor-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Enabling Two Factor Authentication](#enabling-two-factor-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Authenticating With Two Factor Authentication](#authenticating-with-two-factor-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Disabling Two Factor Authentication](#disabling-two-factor-authentication)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Registration](#registration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Customizing Registration](#customizing-registration)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Password Reset](#password-reset)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Requesting A Password Reset Link](#requesting-a-password-reset-link)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/8.x/passwords.md:11 docs/master/fortify.md:25
#: docs/master/passwords.md:10
msgid "[Resetting The Password](#resetting-the-password)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Customizing Password Resets](#customizing-password-resets)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/fortify.md:25 docs/master/fortify.md:25
msgid "[Email Verification](#email-verification)"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:30 docs/master/fortify.md:30
msgid "Laravel Fortify is a frontend agnostic authentication backend implementation for Laravel. Fortify registers the routes and controllers needed to implement all of Laravel's authentication features, including login, registration, password reset, email verification, and more. After installing Fortify, you may run the `route:list` Artisan command to see the routes that Fortify has registered."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:32 docs/master/fortify.md:32
msgid "Since Fortify does not provide its own user interface, it is meant to be paired with your own user interface which makes requests to the routes it registers. We will discuss exactly how to make requests to these routes in the remainder of this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:34 docs/master/fortify.md:34
#, no-wrap
msgid "> {tip} Remember, Fortify is a package that is meant to give you a head start implementing Laravel's authentication features. **You are not required to use it.** You are always free to manually interact with Laravel's authentication services by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:36 docs/master/fortify.md:36
#, no-wrap
msgid "<a name=\"what-is-fortify\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:36 docs/master/fortify.md:36
#, no-wrap
msgid "What Is Fortify?"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:39 docs/master/fortify.md:39
msgid "As mentioned previously, Laravel Fortify is a frontend agnostic authentication backend implementation for Laravel. Fortify registers the routes and controllers needed to implement all of Laravel's authentication features, including login, registration, password reset, email verification, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:41 docs/master/fortify.md:41
#, no-wrap
msgid "**You are not required to use Fortify in order to use Laravel's authentication features.** You are always free to manually interact with Laravel's authentication services by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:43 docs/master/fortify.md:43
msgid "If you are new to Laravel, you may wish to explore the [Laravel Breeze](/docs/{{version}}/starter-kits) application starter kit before attempting to use Laravel Fortify. Laravel Breeze provides an authentication scaffolding for your application that includes a user interface built with [Tailwind CSS](https://tailwindcss.com). Unlike Fortify, Breeze publishes its routes and controllers directly into your application. This allows you to study and get comfortable with Laravel's authentication features before allowing Laravel Fortify to implement these features for you."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:45 docs/master/fortify.md:45
msgid "Laravel Fortify essentially takes the routes and controllers of Laravel Breeze and offers them as a package that does not include a user interface. This allows you to still quickly scaffold the backend implementation of your application's authentication layer without being tied to any particular frontend opinions."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:47 docs/master/fortify.md:47
#, no-wrap
msgid "<a name=\"when-should-i-use-fortify\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:47 docs/master/fortify.md:47
#, no-wrap
msgid "When Should I Use Fortify?"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:50 docs/master/fortify.md:50
msgid "You may be wondering when it is appropriate to use Laravel Fortify. First, if you are using one of Laravel's [application starter kits](/docs/{{version}}/starter-kits), you do not need to install Laravel Fortify since all of Laravel's application starter kits already provide a full authentication implementation."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:52 docs/master/fortify.md:52
msgid "If you are not using an application starter kit and your application needs authentication features, you have two options: manually implement your application's authentication features or use Laravel Fortify to provide the backend implementation of these features."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:54 docs/master/fortify.md:54
msgid "If you choose to install Fortify, your user interface will make requests to Fortify's authentication routes that are detailed in this documentation in order to authenticate and register users."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:56 docs/master/fortify.md:56
msgid "If you choose to manually interact with Laravel's authentication services instead of using Fortify, you may do so by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:58 docs/master/fortify.md:58
#, no-wrap
msgid "<a name=\"laravel-fortify-and-laravel-sanctum\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:58 docs/master/fortify.md:58
#, no-wrap
msgid "Laravel Fortify & Laravel Sanctum"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:61 docs/master/fortify.md:61
msgid "Some developers become confused regarding the difference between [Laravel Sanctum](/docs/{{version}}/sanctum) and Laravel Fortify. Because the two packages solve two different but related problems, Laravel Fortify and Laravel Sanctum are not mutually exclusive or competing packages."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:63 docs/master/fortify.md:63
msgid "Laravel Sanctum is only concerned with managing API tokens and authenticating existing users using session cookies or tokens. Sanctum does not provide any routes that handle user registration, password reset, etc."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:65 docs/master/fortify.md:65
msgid "If you are attempting to manually build the authentication layer for an application that offers an API or serves as the backend for a single-page application, it is entirely possible that you will utilize both Laravel Fortify (for user registration, password reset, etc.) and Laravel Sanctum (API token management, session authentication)."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:70 docs/master/fortify.md:70
msgid "To get started, install Fortify using the Composer package manager:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/fortify.md:71 docs/master/fortify.md:71
#, no-wrap
msgid "composer require laravel/fortify\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:76 docs/master/fortify.md:76
msgid "Next, publish Fortify's resources using the `vendor:publish` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/fortify.md:77 docs/master/fortify.md:77
#, no-wrap
msgid "php artisan vendor:publish --provider=\"Laravel\\Fortify\\FortifyServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:82 docs/master/fortify.md:82
msgid "This command will publish Fortify's actions to your `app/Actions` directory, which will be created if it does not exist. In addition, Fortify's configuration file and migrations will be published."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:84 docs/master/fortify.md:84
msgid "Next, you should migrate your database:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/fortify.md:85 docs/master/fortify.md:85
#, no-wrap
msgid "php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:90 docs/master/fortify.md:90
#, no-wrap
msgid "<a name=\"the-fortify-service-provider\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:90 docs/master/fortify.md:90
#, no-wrap
msgid "The Fortify Service Provider"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:93 docs/master/fortify.md:93
msgid "The `vendor:publish` command discussed above will also publish the `App\\Providers\\FortifyServiceProvider` class. You should ensure this class is registered within the `providers` array of your application's `config/app.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:95 docs/master/fortify.md:95
msgid "The Fortify service provider registers the actions that Fortify published and instructs Fortify to use them when their respective tasks are executed by Fortify."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:97 docs/master/fortify.md:97
#, no-wrap
msgid "<a name=\"fortify-features\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:97 docs/master/fortify.md:97
#, no-wrap
msgid "Fortify Features"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:100 docs/master/fortify.md:100
msgid "The `fortify` configuration file contains a `features` configuration array. This array defines which backend routes / features Fortify will expose by default. If you are not using Fortify in combination with [Laravel Jetstream](https://jetstream.laravel.com), we recommend that you only enable the following features, which are the basic authentication features provided by most Laravel applications:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:101 docs/master/fortify.md:101
#, no-wrap
msgid "'features' => [\n"
"    Features::registration(),\n"
"    Features::resetPasswords(),\n"
"    Features::emailVerification(),\n"
"],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:110 docs/master/fortify.md:110
#, no-wrap
msgid "<a name=\"disabling-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:110 docs/master/fortify.md:110
#, no-wrap
msgid "Disabling Views"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:113 docs/master/fortify.md:113
msgid "By default, Fortify define routes that are intended to return views, such as a login screen or registration screen. However, if you are building a JavaScript driven single-page application, you may not need these routes. For that reason, you may disable these routes entirely by setting the `views` configuration value within your application's `config/fortify.php` configuration file to `false`:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:114 docs/master/fortify.md:114
#, no-wrap
msgid "'views' => false,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:119 docs/master/fortify.md:119
#, no-wrap
msgid "<a name=\"disabling-views-and-password-reset\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:119 docs/master/fortify.md:119
#, no-wrap
msgid "Disabling Views & Password Reset"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:122 docs/master/fortify.md:122
msgid "If you choose to disable Fortify's views and you will be implementing password reset features for your application, you should still define a route named `password.reset` that is responsible for displaying your application's \"reset password\" view. This is necessary because Laravel's `Illuminate\\Auth\\Notifications\\ResetPassword` notification will generate the password reset URL via the `password.reset` named route."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:127 docs/master/fortify.md:127
msgid "To get started, we need to instruct Fortify how to return our \"login\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:129 docs/master/fortify.md:129
msgid "All of the authentication view's rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class. Fortify will take care of defining the `/login` route that returns this view:"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:131 docs/master/fortify.md:131
#, no-wrap
msgid "    use Laravel\\Fortify\\Fortify;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:140 docs/master/fortify.md:140
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Fortify::loginView(fn () => view('auth.login'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:145 docs/master/fortify.md:145
msgid "Your login template should include a form that makes a POST request to `/login`. The `/login` endpoint expects a string email address / username and a `password`. The name of the email / username field should match the `username` value within the `config/fortify.php` configuration file. In addition, a boolean `remember` field may be provided to indicate that the user would like to use the \"remember me\" functionality provided by Laravel."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:147 docs/master/fortify.md:147
msgid "If the login attempt is successful, Fortify will redirect you to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:149 docs/master/fortify.md:149
msgid "If the request was not successful, the user will be redirected back to the login screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with the 422 HTTP response."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:151 docs/master/fortify.md:151
#, no-wrap
msgid "<a name=\"customizing-user-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:151 docs/master/fortify.md:151
#, no-wrap
msgid "Customizing User Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:154 docs/master/fortify.md:154
msgid "Fortify will automatically retrieve and authenticate the user based on the provided credentials and the authentication guard that is configured for your application. However, you may sometimes wish to have full customization over how login credentials are authenticated and users are retrieved. Thankfully, Fortify allows you to easily accomplish this using the `Fortify::authenticateUsing` method."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:156 docs/master/fortify.md:156
msgid "This method accepts a closure which receives the incoming HTTP request. The closure is responsible for validating the login credentials attached to the request and returning the associated user instance. If the credentials are invalid or no user can be found, `null` or `false` should be returned by the closure. Typically, this method should be called from the `boot` method of your `FortifyServiceProvider`:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:157 docs/master/fortify.md:157
#, no-wrap
msgid "use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::authenticateUsing(function (Request $request) {\n"
"        $user = User::where('email', $request->email)->first();\n\n"
"        if ($user &&\n"
"            Hash::check($request->password, $user->password)) {\n"
"            return $user;\n"
"        }\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:184 docs/master/fortify.md:184
#, no-wrap
msgid "<a name=\"authentication-guard\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:184 docs/master/fortify.md:184
#, no-wrap
msgid "Authentication Guard"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:187 docs/master/fortify.md:187
msgid "You may customize the authentication guard used by Fortify within your application's `fortify` configuration file. However, you should ensure that the configured guard is an implementation of `Illuminate\\Contracts\\Auth\\StatefulGuard`. If you are attempting to use Laravel Fortify to authenticate an SPA, you should use Laravel's default `web` guard in combination with [Laravel Sanctum](https://laravel.com/docs/sanctum)."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:189 docs/master/fortify.md:189
#, no-wrap
msgid "<a name=\"two-factor-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/fortify.md:189 docs/master/fortify.md:189
#, no-wrap
msgid "Two Factor Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:192 docs/master/fortify.md:192
msgid "When Fortify's two factor authentication feature is enabled, the user is required to input a six digit numeric token during the authentication process. This token is generated using a time-based one-time password (TOTP) that can be retrieved from any TOTP compatible mobile authentication application such as Google Authenticator."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:194 docs/master/fortify.md:194
msgid "Before getting started, you should first ensure that your application's `App\\Models\\User` model uses the `Laravel\\Fortify\\TwoFactorAuthenticatable` trait:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:195 docs/master/fortify.md:195
#, no-wrap
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Fortify\\TwoFactorAuthenticatable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable, TwoFactorAuthenticatable;\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:211 docs/master/fortify.md:211
msgid "Next, you should build a screen within your application where users can manage their two factor authentication settings. This screen should allow the user to enable and disable two factor authentication, as well as regenerate their two factor authentication recovery codes."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:213 docs/master/fortify.md:213
#, no-wrap
msgid "> By default, the `features` array of the `fortify` configuration file instructs Fortify's two factor authentication settings to require password confirmation before modification. Therefore, your application should implement Fortify's [password confirmation](#password-confirmation) feature before continuing.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:215 docs/master/fortify.md:215
#, no-wrap
msgid "<a name=\"enabling-two-factor-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:215 docs/master/fortify.md:215
#, no-wrap
msgid "Enabling Two Factor Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:218 docs/master/fortify.md:218
msgid "To enable two factor authentication, your application should make a POST request to the `/user/two-factor-authentication` endpoint defined by Fortify. If the request is successful, the user will be redirected back to the previous URL and the `status` session variable will be set to `two-factor-authentication-enabled`. You may detect this `status` session variable within your templates to display the appropriate success message. If the request was an XHR request, `200` HTTP response will be returned:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/fortify.md:219 docs/master/fortify.md:219
#, no-wrap
msgid "@if (session('status') == 'two-factor-authentication-enabled')\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        Two factor authentication has been enabled.\n"
"    </div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:228 docs/master/fortify.md:228
msgid "Next, you should display the two factor authentication QR code for the user to scan into their authenticator application. If you are using Blade to render your application's frontend, you may retrieve the QR code SVG using the `twoFactorQrCodeSvg` method available on the user instance:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:229 docs/master/fortify.md:229
#, no-wrap
msgid "$request->user()->twoFactorQrCodeSvg();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:234 docs/master/fortify.md:234
msgid "If you are building a JavaScript powered frontend, you may make an XHR GET request to the `/user/two-factor-qr-code` endpoint to retrieve the user's two factor authentication QR code. This endpoint will return a JSON object containing an `svg` key."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:236 docs/master/fortify.md:236
#, no-wrap
msgid "<a name=\"displaying-the-recovery-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:236 docs/master/fortify.md:236
#, no-wrap
msgid "Displaying The Recovery Codes"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:239 docs/master/fortify.md:239
msgid "You should also display the user's two factor recovery codes. These recovery codes allow the user to authenticate if they lose access to their mobile device. If you are using Blade to render your application's frontend, you may access the recovery codes via the authenticated user instance:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:240
#, no-wrap
msgid "(array) $request->user()->recoveryCodes()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:245 docs/master/fortify.md:245
msgid "If you are building a JavaScript powered frontend, you may make an XHR GET request to the `/user/two-factor-recovery-codes` endpoint. This endpoint will return a JSON array containing the user's recovery codes."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:247 docs/master/fortify.md:247
msgid "To regenerate the user's recovery codes, your application should make a POST request to the `/user/two-factor-recovery-codes` endpoint."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:249 docs/master/fortify.md:249
#, no-wrap
msgid "<a name=\"authenticating-with-two-factor-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:249 docs/master/fortify.md:249
#, no-wrap
msgid "Authenticating With Two Factor Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:252 docs/master/fortify.md:252
msgid "During the authentication process, Fortify will automatically redirect the user to your application's two factor authentication challenge screen. However, if your application is making an XHR login request, the JSON response returned after a successful authentication attempt will contain a JSON object that has a `two_factor` boolean property. You should inspect this value to know whether you should redirect to your application's two factor authentication challenge screen."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:254 docs/master/fortify.md:254
msgid "To begin implementing two factor authentication functionality, we need to instruct Fortify how to return our two factor authentication challenge view. All of Fortify's authentication view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:255 docs/master/fortify.md:255
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::twoFactorChallengeView(function () {\n"
"        return view('auth.two-factor-challenge');\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:274 docs/master/fortify.md:274
msgid "Fortify will take care of defining the `/two-factor-challenge` route that returns this view. Your `two-factor-challenge` template should include a form that makes a POST request to the `/two-factor-challenge` endpoint. The `/two-factor-challenge` action expects a `code` field that contains a valid TOTP token or a `recovery_code` field that contains one of the user's recovery codes."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:276 docs/master/fortify.md:276
msgid "If the login attempt is successful, Fortify will redirect the user to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 204 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:278 docs/master/fortify.md:278
msgid "If the request was not successful, the user will be redirected back to the login screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:280 docs/master/fortify.md:280
#, no-wrap
msgid "<a name=\"disabling-two-factor-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:280 docs/master/fortify.md:280
#, no-wrap
msgid "Disabling Two Factor Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:283 docs/master/fortify.md:283
msgid "To disable two factor authentication, your application should make a DELETE request to the `/user/two-factor-authentication` endpoint. Remember, Fortify's two factor authentication endpoints require [password confirmation](#password-confirmation) prior to being called."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:285 docs/master/fortify.md:285
#, no-wrap
msgid "<a name=\"registration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/fortify.md:285 docs/master/fortify.md:285
#, no-wrap
msgid "Registration"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:288 docs/master/fortify.md:288
msgid "To begin implementing our application's registration functionality, we need to instruct Fortify how to return our \"register\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:290 docs/master/fortify.md:290
msgid "All of the Fortify's view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:291 docs/master/fortify.md:291
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::registerView(fn () => view('auth.register'));\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:308 docs/master/fortify.md:308
msgid "Fortify will take care of defining the `/register` route that returns this view. Your `register` template should include a form that makes a POST request to the `/register` endpoint defined by Fortify."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:310 docs/master/fortify.md:310
msgid "The `/register` endpoint expects a string `name`, string email address / username, `password`, and `password_confirmation` fields. The name of the email / username field should match the `username` configuration value defined within your application's `fortify` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:312 docs/master/fortify.md:312
msgid "If the registration attempt is successful, Fortify will redirect the user to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:314 docs/master/fortify.md:314
msgid "If the request was not successful, the user will be redirected back to the registration screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:316 docs/master/fortify.md:316
#, no-wrap
msgid "<a name=\"customizing-registration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:316 docs/master/fortify.md:316
#, no-wrap
msgid "Customizing Registration"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:319 docs/master/fortify.md:319
msgid "The user validation and creation process may be customized by modifying the `App\\Actions\\Fortify\\CreateNewUser` action that was generated when you installed Laravel Fortify."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:321 docs/master/fortify.md:321
#, no-wrap
msgid "<a name=\"password-reset\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/fortify.md:321 docs/master/fortify.md:321
#, no-wrap
msgid "Password Reset"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:324 docs/master/fortify.md:324
#, no-wrap
msgid "<a name=\"requesting-a-password-reset-link\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:324 docs/master/fortify.md:324
#, no-wrap
msgid "Requesting A Password Reset Link"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:327 docs/master/fortify.md:327
msgid "To begin implementing our application's password reset functionality, we need to instruct Fortify how to return our \"forgot password\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:329 docs/8.x/fortify.md:483 docs/master/fortify.md:329
#: docs/master/fortify.md:483
msgid "All of Fortify's view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:330 docs/master/fortify.md:330
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::requestPasswordResetLinkView(function () {\n"
"        return view('auth.forgot-password');\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:349 docs/master/fortify.md:349
msgid "Fortify will take care of defining the `/forgot-password` endpoint that returns this view. Your `forgot-password` template should include a form that makes a POST request to the `/forgot-password` endpoint."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:351 docs/master/fortify.md:351
msgid "The `/forgot-password` endpoint expects a string `email` field. The name of this field / database column should match the `email` configuration value within your application's `fortify` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:353 docs/master/fortify.md:353
#, no-wrap
msgid "<a name=\"handling-the-password-reset-link-request-response\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:353 docs/master/fortify.md:353
#, no-wrap
msgid "Handling The Password Reset Link Request Response"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:356 docs/master/fortify.md:356
msgid "If the password reset link request was successful, Fortify will redirect the user back to the `/forgot-password` endpoint and send an email to the user with a secure link they can use to reset their password. If the request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:358 docs/master/fortify.md:358
msgid "After being redirected back to the `/forgot-password` endpoint after a successful request, the `status` session variable may be used to display the status of the password reset link request attempt. The value of this session variable will match one of the translation strings defined within your application's `passwords` [language file](/docs/{{version}}/localization):"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/fortify.md:359 docs/8.x/fortify.md:403 docs/master/fortify.md:359
#: docs/master/fortify.md:403
#, no-wrap
msgid "@if (session('status'))\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        {{ session('status') }}\n"
"    </div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:368 docs/master/fortify.md:368
msgid "If the request was not successful, the user will be redirected back to the request password reset link screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:370 docs/8.x/passwords.md:90 docs/master/fortify.md:370
#: docs/master/passwords.md:80
#, no-wrap
msgid "<a name=\"resetting-the-password\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:370 docs/8.x/passwords.md:90 docs/master/fortify.md:370
#: docs/master/passwords.md:80
#, no-wrap
msgid "Resetting The Password"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:373 docs/master/fortify.md:373
msgid "To finish implementing our application's password reset functionality, we need to instruct Fortify how to return our \"reset password\" view."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:375 docs/8.x/fortify.md:428 docs/master/fortify.md:375
#: docs/master/fortify.md:428
msgid "All of Fortify's view's rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:376 docs/master/fortify.md:376
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::resetPasswordView(function ($request) {\n"
"        return view('auth.reset-password', ['request' => $request]);\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:395 docs/master/fortify.md:395
msgid "Fortify will take care of defining the route to display this view. Your `reset-password` template should include a form that makes a POST request to `/reset-password`."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:397 docs/master/fortify.md:397
#, no-wrap
msgid "The `/reset-password` endpoint expects a string `email` field, a `password` field, a `password_confirmation` field, and a hidden field named `token` that contains the value of `request()->route('token')`. The name of the \"email\" field / database column should match the `email` configuration value defined within your application's `fortify` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:399 docs/master/fortify.md:399
#, no-wrap
msgid "<a name=\"handling-the-password-reset-response\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:399 docs/master/fortify.md:399
#, no-wrap
msgid "Handling The Password Reset Response"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:402 docs/master/fortify.md:402
msgid "If the password reset request was successful, Fortify will redirect back to the `/login` route so that the user can log in with their new password. In addition, a `status` session variable will be set so that you may display the successful status of the reset on your login screen:"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:412 docs/master/fortify.md:412
msgid "If the request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:414 docs/master/fortify.md:414
msgid "If the request was not successful, the user will be redirected back to the reset password screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:416 docs/master/fortify.md:416
#, no-wrap
msgid "<a name=\"customizing-password-resets\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/fortify.md:416 docs/master/fortify.md:416
#, no-wrap
msgid "Customizing Password Resets"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:419 docs/master/fortify.md:419
msgid "The password reset process may be customized by modifying the `App\\Actions\\ResetUserPassword` action that was generated when you installed Laravel Fortify."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:421 docs/master/fortify.md:421
#, no-wrap
msgid "<a name=\"email-verification\"></a>\n"
msgstr ""

#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  fortify.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  verification.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/fortify.md:421 docs/8.x/verification.md:1
#: docs/master/fortify.md:421 docs/master/verification.md:1
#, no-wrap
msgid "Email Verification"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:424 docs/master/fortify.md:424
msgid "After registration, you may wish for users to verify their email address before they continue accessing your application. To get started, ensure the `emailVerification` feature is enabled in your `fortify` configuration file's `features` array. Next, you should ensure that your `App\\Models\\User` class implements the `Illuminate\\Contracts\\Auth\\MustVerifyEmail` interface."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:426 docs/master/fortify.md:426
msgid "Once these two setup steps have been completed, newly registered users will receive an email prompting them to verify their email address ownership. However, we need to inform Fortify how to display the email verification screen which informs the user that they need to go click the verification link in the email."
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:429 docs/master/fortify.md:429
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::verifyEmailView(fn () => view('auth.verify-email'));\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:446 docs/master/fortify.md:446
msgid "Fortify will take care of defining the route that displays this view when a user is redirected to the `/email/verify` endpoint by Laravel's built-in `verified` middleware."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:448 docs/master/fortify.md:448
msgid "Your `verify-email` template should include an informational message instructing the user to click the email verification link that was sent to their email address."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:450 docs/master/fortify.md:450
#, no-wrap
msgid "<a name=\"resending-email-verification-links\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/fortify.md:450 docs/master/fortify.md:450
#, no-wrap
msgid "Resending Email Verification Links"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:453 docs/master/fortify.md:453
msgid "If you wish, you may add a button to your application's `verify-email` template that triggers a POST request to the `/email/verification-notification` endpoint. When this endpoint receives a request, a new verification email link will be emailed to the user, allowing the user to get a new verification link if the previous one was accidentally deleted or lost."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:455 docs/master/fortify.md:455
msgid "If the request to resend the verification link email was successful, Fortify will redirect the user back to the `/email/verify` endpoint with a `status` session variable, allowing you to display an informational message to the user informing them the operation was successful. If the request was an XHR request, a 202 HTTP response will be returned:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/fortify.md:456 docs/master/fortify.md:456
#, no-wrap
msgid "@if (session('status') == 'verification-link-sent')\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        A new email verification link has been emailed to you!\n"
"    </div>\n"
"@endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:468 docs/master/fortify.md:468
msgid "To specify that a route or group of routes requires that the user has verified their email address, you should attach Laravel's built-in `verified` middleware to the route. This middleware is registered within your application's `App\\Http\\Kernel` class:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:469 docs/master/fortify.md:469
#, no-wrap
msgid "Route::get('/dashboard', function () {\n"
"    // ...\n"
"})->middleware(['verified']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:479 docs/master/fortify.md:479
msgid "While building your application, you may occasionally have actions that should require the user to confirm their password before the action is performed. Typically, these routes are protected by Laravel's built-in `password.confirm` middleware."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:481 docs/master/fortify.md:481
msgid "To begin implementing password confirmation functionality, we need to instruct Fortify how to return our application's \"password confirmation\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/fortify.md:484 docs/master/fortify.md:484
#, no-wrap
msgid "use Laravel\\Fortify\\Fortify;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::confirmPasswordView(function () {\n"
"        return view('auth.confirm-password');\n"
"    });\n\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:503 docs/master/fortify.md:503
msgid "Fortify will take care of defining the `/user/confirm-password` endpoint that returns this view. Your `confirm-password` template should include a form that makes a POST request to the `/user/confirm-password` endpoint. The `/user/confirm-password` endpoint expects a `password` field that contains the user's current password."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:505 docs/master/fortify.md:505
msgid "If the password matches the user's current password, Fortify will redirect the user to the route they were attempting to access. If the request was an XHR request, a 201 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/fortify.md:506 docs/master/fortify.md:506
msgid "If the request was not successful, the user will be redirected back to the confirm password screen and the validation errors will be available to you via the shared `$errors` Blade template variable. Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#. type: Title #
#: docs/8.x/hashing.md:1 docs/master/hashing.md:1
#, no-wrap
msgid "Hashing"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/hashing.md:9 docs/8.x/pagination.md:15 docs/master/hashing.md:9
#: docs/master/pagination.md:15
msgid "[Basic Usage](#basic-usage)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/hashing.md:9 docs/master/hashing.md:9
msgid "[Hashing Passwords](#hashing-passwords)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/hashing.md:9 docs/master/hashing.md:9
msgid "[Verifying That A Password Matches A Hash](#verifying-that-a-password-matches-a-hash)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/hashing.md:9 docs/master/hashing.md:9
msgid "[Determining If A Password Needs To Be Rehashed](#determining-if-a-password-needs-to-be-rehashed)"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:14 docs/master/hashing.md:14
msgid "The Laravel `Hash` [facade](/docs/{{version}}/facades) provides secure Bcrypt and Argon2 hashing for storing user passwords. If you are using one of the [Laravel application starter kits](/docs/{{version}}/starter-kits), Bcrypt will be used for registration and authentication by default."
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:16 docs/master/hashing.md:16
msgid "Bcrypt is a great choice for hashing passwords because its \"work factor\" is adjustable, which means that the time it takes to generate a hash can be increased as hardware power increases. When hashing passwords, slow is good. The longer an algorithm takes to hash a password, the longer it takes malicious users to generate \"rainbow tables\" of all possible string hash values that may be used in brute force attacks against applications."
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:21 docs/master/hashing.md:21
msgid "The default hashing driver for your application is configured in your application's `config/hashing.php` configuration file. There are currently several supported drivers: [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) and [Argon2](https://en.wikipedia.org/wiki/Argon2) (Argon2i and Argon2id variants)."
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:23 docs/master/hashing.md:23
#, no-wrap
msgid "> {note} The Argon2i driver requires PHP 7.2.0 or greater and the Argon2id driver requires PHP 7.3.0 or greater.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:25 docs/8.x/pagination.md:24 docs/master/hashing.md:25
#: docs/master/pagination.md:24
#, no-wrap
msgid "<a name=\"basic-usage\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/hashing.md:25 docs/8.x/pagination.md:24 docs/master/hashing.md:25
#: docs/master/pagination.md:24
#, no-wrap
msgid "Basic Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:28 docs/master/hashing.md:28
#, no-wrap
msgid "<a name=\"hashing-passwords\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/hashing.md:28 docs/master/hashing.md:28
#, no-wrap
msgid "Hashing Passwords"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:31 docs/master/hashing.md:31
msgid "You may hash a password by calling the `make` method on the `Hash` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:39 docs/master/hashing.md:39
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:51 docs/master/hashing.md:51
#, no-wrap
msgid "    class PasswordController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the password for the user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            // Validate the new password length...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:57 docs/master/hashing.md:57
#, no-wrap
msgid "            $request->user()->fill([\n"
"                'password' => Hash::make($request->newPassword)\n"
"            ])->save();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:59 docs/master/hashing.md:59
#, no-wrap
msgid "<a name=\"adjusting-the-bcrypt-work-factor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/hashing.md:59 docs/master/hashing.md:59
#, no-wrap
msgid "Adjusting The Bcrypt Work Factor"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:62 docs/master/hashing.md:62
msgid "If you are using the Bcrypt algorithm, the `make` method allows you to manage the work factor of the algorithm using the `rounds` option; however, the default work factor managed by Laravel is acceptable for most applications:"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:66 docs/master/hashing.md:66
#, no-wrap
msgid "    $hashed = Hash::make('password', [\n"
"        'rounds' => 12,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:68 docs/master/hashing.md:68
#, no-wrap
msgid "<a name=\"adjusting-the-argon2-work-factor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/hashing.md:68 docs/master/hashing.md:68
#, no-wrap
msgid "Adjusting The Argon2 Work Factor"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:71 docs/master/hashing.md:71
msgid "If you are using the Argon2 algorithm, the `make` method allows you to manage the work factor of the algorithm using the `memory`, `time`, and `threads` options; however, the default values managed by Laravel are acceptable for most applications:"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:77 docs/master/hashing.md:77
#, no-wrap
msgid "    $hashed = Hash::make('password', [\n"
"        'memory' => 1024,\n"
"        'time' => 2,\n"
"        'threads' => 2,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:79 docs/master/hashing.md:79
#, no-wrap
msgid "> {tip} For more information on these options, please refer to the [official PHP documentation regarding Argon hashing](https://secure.php.net/manual/en/function.password-hash.php).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:81 docs/master/hashing.md:81
#, no-wrap
msgid "<a name=\"verifying-that-a-password-matches-a-hash\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/hashing.md:81 docs/master/hashing.md:81
#, no-wrap
msgid "Verifying That A Password Matches A Hash"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:84 docs/master/hashing.md:84
msgid "The `check` method provided by the `Hash` facade allows you to verify that a given plain-text string corresponds to a given hash:"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:88 docs/master/hashing.md:88
#, no-wrap
msgid "    if (Hash::check('plain-text', $hashedPassword)) {\n"
"        // The passwords match...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:90 docs/master/hashing.md:90
#, no-wrap
msgid "<a name=\"determining-if-a-password-needs-to-be-rehashed\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/hashing.md:90 docs/master/hashing.md:90
#, no-wrap
msgid "Determining If A Password Needs To Be Rehashed"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:93 docs/master/hashing.md:93
msgid "The `needsRehash` method provided by the `Hash` facade allows you to determine if the work factor used by the hasher has changed since the password was hashed. Some applications choose to perform this check during the application's authentication process:"
msgstr ""

#. type: Plain text
#: docs/8.x/hashing.md:96 docs/master/hashing.md:96
#, no-wrap
msgid "    if (Hash::needsRehash($hashed)) {\n"
"        $hashed = Hash::make('plain-text');\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/helpers.md:1 docs/master/helpers.md:1
#, no-wrap
msgid "Helpers"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:5 docs/master/helpers.md:5
msgid "- [Introduction](#introduction)  - [Available Methods](#available-methods)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:10 docs/master/helpers.md:10
msgid "Laravel includes a variety of global \"helper\" PHP functions. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:26 docs/master/helpers.md:26
#, no-wrap
msgid "<a name=\"arrays-and-objects-method-list\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/helpers.md:26 docs/8.x/helpers.md:285 docs/master/helpers.md:26
#: docs/master/helpers.md:284
#, no-wrap
msgid "Arrays & Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:29 docs/8.x/helpers.md:69 docs/8.x/helpers.md:85
#: docs/8.x/helpers.md:141 docs/8.x/helpers.md:205 docs/8.x/helpers.md:219
#: docs/8.x/http-tests.md:527 docs/8.x/validation.md:669
#: docs/master/helpers.md:29 docs/master/helpers.md:69
#: docs/master/helpers.md:85 docs/master/helpers.md:141
#: docs/master/helpers.md:204 docs/master/helpers.md:218
#: docs/master/http-tests.md:433 docs/master/validation.md:648
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:64 docs/master/helpers.md:64
#, no-wrap
msgid "[Arr::accessible](#method-array-accessible)\n"
"[Arr::add](#method-array-add)\n"
"[Arr::collapse](#method-array-collapse)\n"
"[Arr::crossJoin](#method-array-crossjoin)\n"
"[Arr::divide](#method-array-divide)\n"
"[Arr::dot](#method-array-dot)\n"
"[Arr::except](#method-array-except)\n"
"[Arr::exists](#method-array-exists)\n"
"[Arr::first](#method-array-first)\n"
"[Arr::flatten](#method-array-flatten)\n"
"[Arr::forget](#method-array-forget)\n"
"[Arr::get](#method-array-get)\n"
"[Arr::has](#method-array-has)\n"
"[Arr::hasAny](#method-array-hasany)\n"
"[Arr::isAssoc](#method-array-isassoc)\n"
"[Arr::last](#method-array-last)\n"
"[Arr::only](#method-array-only)\n"
"[Arr::pluck](#method-array-pluck)\n"
"[Arr::prepend](#method-array-prepend)\n"
"[Arr::pull](#method-array-pull)\n"
"[Arr::query](#method-array-query)\n"
"[Arr::random](#method-array-random)\n"
"[Arr::set](#method-array-set)\n"
"[Arr::shuffle](#method-array-shuffle)\n"
"[Arr::sort](#method-array-sort)\n"
"[Arr::sortRecursive](#method-array-sort-recursive)\n"
"[Arr::where](#method-array-where)\n"
"[Arr::wrap](#method-array-wrap)\n"
"[data_fill](#method-data-fill)\n"
"[data_get](#method-data-get)\n"
"[data_set](#method-data-set)\n"
"[head](#method-head)\n"
"[last](#method-last)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:66 docs/master/helpers.md:66
#, no-wrap
msgid "<a name=\"paths-method-list\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/helpers.md:66 docs/8.x/helpers.md:933 docs/master/helpers.md:66
#: docs/master/helpers.md:932
#, no-wrap
msgid "Paths"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:78 docs/master/helpers.md:78
msgid "[app_path](#method-app-path)  [base_path](#method-base-path)  [config_path](#method-config-path)  [database_path](#method-database-path)  [mix](#method-mix)  [public_path](#method-public-path)  [resource_path](#method-resource-path)  [storage_path](#method-storage-path)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:82 docs/master/helpers.md:82
#, no-wrap
msgid "<a name=\"strings-method-list\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/helpers.md:82 docs/8.x/helpers.md:1006 docs/master/helpers.md:82
#: docs/master/helpers.md:1005
#, no-wrap
msgid "Strings"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:134 docs/master/helpers.md:134
msgid "[\\__](#method-__)  [class_basename](#method-class-basename)  [e](#method-e)  [preg_replace_array](#method-preg-replace-array)  [Str::after](#method-str-after)  [Str::afterLast](#method-str-after-last)  [Str::ascii](#method-str-ascii)  [Str::before](#method-str-before)  [Str::beforeLast](#method-str-before-last)  [Str::between](#method-str-between)  [Str::camel](#method-camel-case)  [Str::contains](#method-str-contains)  [Str::containsAll](#method-str-contains-all)  [Str::endsWith](#method-ends-with)  [Str::finish](#method-str-finish)  [Str::is](#method-str-is)  [Str::isAscii](#method-str-is-ascii)  [Str::isUuid](#method-str-is-uuid)  [Str::kebab](#method-kebab-case)  [Str::length](#method-str-length)  [Str::limit](#method-str-limit)  [Str::lower](#method-str-lower)  [Str::markdown](#method-str-markdown)  [Str::orderedUuid](#method-str-ordered-uuid)  [Str::padBoth](#method-str-padboth)  [Str::padLeft](#method-str-padleft)  [Str::padRight](#method-str-padright)  [Str::plural](#method-str-plural)  [Str::pluralStudly](#method-str-plural-studly)  [Str::random](#method-str-random)  [Str::replaceArray](#method-str-replace-array)  [Str::replaceFirst](#method-str-replace-first)  [Str::replaceLast](#method-str-replace-last)  [Str::singular](#method-str-singular)  [Str::slug](#method-str-slug)  [Str::snake](#method-snake-case)  [Str::start](#method-str-start)  [Str::startsWith](#method-starts-with)  [Str::studly](#method-studly-case)  [Str::substr](#method-str-substr)  [Str::substrCount](#method-str-substrcount)  [Str::title](#method-title-case)  [Str::ucfirst](#method-str-ucfirst)  [Str::upper](#method-str-upper)  [Str::uuid](#method-str-uuid)  [Str::words](#method-str-words)  [trans](#method-trans)  [trans_choice](#method-trans-choice)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:138 docs/master/helpers.md:138
#, no-wrap
msgid "<a name=\"fluent-strings-method-list\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/helpers.md:138 docs/8.x/helpers.md:1628 docs/master/helpers.md:138
#: docs/master/helpers.md:1627
#, no-wrap
msgid "Fluent Strings"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:198
msgid "[after](#method-fluent-str-after)  [afterLast](#method-fluent-str-after-last)  [append](#method-fluent-str-append)  [ascii](#method-fluent-str-ascii)  [basename](#method-fluent-str-basename)  [before](#method-fluent-str-before)  [beforeLast](#method-fluent-str-before-last)  [camel](#method-fluent-str-camel)  [contains](#method-fluent-str-contains)  [containsAll](#method-fluent-str-contains-all)  [dirname](#method-fluent-str-dirname)  [endsWith](#method-fluent-str-ends-with)  [exactly](#method-fluent-str-exactly)  [explode](#method-fluent-str-explode)  [finish](#method-fluent-str-finish)  [is](#method-fluent-str-is)  [isAscii](#method-fluent-str-is-ascii)  [isEmpty](#method-fluent-str-is-empty)  [isNotEmpty](#method-fluent-str-is-not-empty)  [kebab](#method-fluent-str-kebab)  [length](#method-fluent-str-length)  [limit](#method-fluent-str-limit)  [lower](#method-fluent-str-lower)  [ltrim](#method-fluent-str-ltrim)  [markdown](#method-fluent-str-markdown)  [match](#method-fluent-str-match)  [matchAll](#method-fluent-str-match-all)  [padBoth](#method-fluent-str-padboth)  [padLeft](#method-fluent-str-padleft)  [padRight](#method-fluent-str-padright)  [pipe](#method-fluent-str-pipe)  [plural](#method-fluent-str-plural)  [prepend](#method-fluent-str-prepend)  [replace](#method-fluent-str-replace)  [replaceArray](#method-fluent-str-replace-array)  [replaceFirst](#method-fluent-str-replace-first)  [replaceLast](#method-fluent-str-replace-last)  [replaceMatches](#method-fluent-str-replace-matches)  [rtrim](#method-fluent-str-rtrim)  [singular](#method-fluent-str-singular)  [slug](#method-fluent-str-slug)  [snake](#method-fluent-str-snake)  [split](#method-fluent-str-split)  [start](#method-fluent-str-start)  [startsWith](#method-fluent-str-starts-with)  [studly](#method-fluent-str-studly)  [substr](#method-fluent-str-substr)  [tap](#method-fluent-str-tap)  [test](#method-fluent-str-test)  [title](#method-fluent-str-title)  [trim](#method-fluent-str-trim)  [ucfirst](#method-fluent-str-ucfirst)  [upper](#method-fluent-str-upper)  [when](#method-fluent-str-when)  [whenEmpty](#method-fluent-str-when-empty)  [words](#method-fluent-str-words)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:202 docs/master/helpers.md:201
#, no-wrap
msgid "<a name=\"urls-method-list\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/helpers.md:202 docs/8.x/helpers.md:2416 docs/master/helpers.md:201
#: docs/master/helpers.md:2404
#, no-wrap
msgid "URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:212 docs/master/helpers.md:211
msgid "[action](#method-action)  [asset](#method-asset)  [route](#method-route)  [secure_asset](#method-secure-asset)  [secure_url](#method-secure-url)  [url](#method-url)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:216 docs/master/helpers.md:215
#, no-wrap
msgid "<a name=\"miscellaneous-method-list\"></a>\n"
msgstr ""

#. #-#-#-#-#  helpers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  helpers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/helpers.md:216 docs/8.x/helpers.md:2493 docs/8.x/upgrade.md:435
#: docs/master/helpers.md:215 docs/master/helpers.md:2481
#: docs/master/upgrade.md:435
#, no-wrap
msgid "Miscellaneous"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:268 docs/master/helpers.md:267
msgid "[abort](#method-abort)  [abort_if](#method-abort-if)  [abort_unless](#method-abort-unless)  [app](#method-app)  [auth](#method-auth)  [back](#method-back)  [bcrypt](#method-bcrypt)  [blank](#method-blank)  [broadcast](#method-broadcast)  [cache](#method-cache)  [class_uses_recursive](#method-class-uses-recursive)  [collect](#method-collect)  [config](#method-config)  [cookie](#method-cookie)  [csrf_field](#method-csrf-field)  [csrf_token](#method-csrf-token)  [dd](#method-dd)  [dispatch](#method-dispatch)  [dispatch_now](#method-dispatch-now)  [dump](#method-dump)  [env](#method-env)  [event](#method-event)  [filled](#method-filled)  [info](#method-info)  [logger](#method-logger)  [method_field](#method-method-field)  [now](#method-now)  [old](#method-old)  [optional](#method-optional)  [policy](#method-policy)  [redirect](#method-redirect)  [report](#method-report)  [request](#method-request)  [rescue](#method-rescue)  [resolve](#method-resolve)  [response](#method-response)  [retry](#method-retry)  [session](#method-session)  [tap](#method-tap)  [throw_if](#method-throw-if)  [throw_unless](#method-throw-unless)  [today](#method-today)  [trait_uses_recursive](#method-trait-uses-recursive)  [transform](#method-transform)  [validator](#method-validator)  [value](#method-value)  [view](#method-view)  [with](#method-with)"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:285 docs/master/helpers.md:284
#, no-wrap
msgid "<a name=\"arrays\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:288 docs/master/helpers.md:287
#, no-wrap
msgid "<a name=\"method-array-accessible\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:288 docs/master/helpers.md:287
#, no-wrap
msgid "`Arr::accessible()` {#collection-method .first-collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:291 docs/master/helpers.md:290
msgid "The `Arr::accessible` method determines if the given value is array accessible:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:294 docs/master/helpers.md:293
#, no-wrap
msgid "    use Illuminate\\Support\\Arr;\n"
"    use Illuminate\\Support\\Collection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:296 docs/master/helpers.md:295
#, no-wrap
msgid "    $isAccessible = Arr::accessible(['a' => 1, 'b' => 2]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:300 docs/master/helpers.md:299
#, no-wrap
msgid "    $isAccessible = Arr::accessible(new Collection);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:304 docs/master/helpers.md:303
#, no-wrap
msgid "    $isAccessible = Arr::accessible('abc');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:308 docs/master/helpers.md:307
#, no-wrap
msgid "    $isAccessible = Arr::accessible(new stdClass);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:312 docs/master/helpers.md:311
#, no-wrap
msgid "<a name=\"method-array-add\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:312 docs/master/helpers.md:311
#, no-wrap
msgid "`Arr::add()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:315 docs/master/helpers.md:314
msgid "The `Arr::add` method adds a given key / value pair to an array if the given key doesn't already exist in the array or is set to `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:317 docs/8.x/helpers.md:333 docs/8.x/helpers.md:344
#: docs/8.x/helpers.md:377 docs/8.x/helpers.md:390 docs/8.x/helpers.md:403
#: docs/8.x/helpers.md:416 docs/8.x/helpers.md:433 docs/8.x/helpers.md:445
#: docs/8.x/helpers.md:454 docs/8.x/helpers.md:467 docs/8.x/helpers.md:480
#: docs/8.x/helpers.md:490 docs/8.x/helpers.md:501 docs/8.x/helpers.md:518
#: docs/8.x/helpers.md:539 docs/8.x/helpers.md:554 docs/8.x/helpers.md:566
#: docs/8.x/helpers.md:575 docs/8.x/helpers.md:588 docs/8.x/helpers.md:601
#: docs/8.x/helpers.md:612 docs/8.x/helpers.md:622 docs/8.x/helpers.md:635
#: docs/8.x/helpers.md:647 docs/8.x/helpers.md:656 docs/8.x/helpers.md:675
#: docs/8.x/helpers.md:685 docs/8.x/helpers.md:696 docs/8.x/helpers.md:709
#: docs/8.x/helpers.md:720 docs/8.x/helpers.md:730 docs/8.x/helpers.md:755
#: docs/8.x/helpers.md:778 docs/8.x/helpers.md:793 docs/8.x/helpers.md:803
#: docs/master/helpers.md:316 docs/master/helpers.md:332
#: docs/master/helpers.md:343 docs/master/helpers.md:376
#: docs/master/helpers.md:389 docs/master/helpers.md:402
#: docs/master/helpers.md:415 docs/master/helpers.md:432
#: docs/master/helpers.md:444 docs/master/helpers.md:453
#: docs/master/helpers.md:466 docs/master/helpers.md:479
#: docs/master/helpers.md:489 docs/master/helpers.md:500
#: docs/master/helpers.md:517 docs/master/helpers.md:538
#: docs/master/helpers.md:553 docs/master/helpers.md:565
#: docs/master/helpers.md:574 docs/master/helpers.md:587
#: docs/master/helpers.md:600 docs/master/helpers.md:611
#: docs/master/helpers.md:621 docs/master/helpers.md:634
#: docs/master/helpers.md:646 docs/master/helpers.md:655
#: docs/master/helpers.md:674 docs/master/helpers.md:684
#: docs/master/helpers.md:695 docs/master/helpers.md:708
#: docs/master/helpers.md:719 docs/master/helpers.md:729
#: docs/master/helpers.md:754 docs/master/helpers.md:777
#: docs/master/helpers.md:792 docs/master/helpers.md:802
#, no-wrap
msgid "    use Illuminate\\Support\\Arr;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:319 docs/master/helpers.md:318
#, no-wrap
msgid "    $array = Arr::add(['name' => 'Desk'], 'price', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:321 docs/8.x/helpers.md:325 docs/8.x/helpers.md:581
#: docs/8.x/helpers.md:628 docs/master/helpers.md:320
#: docs/master/helpers.md:324 docs/master/helpers.md:580
#: docs/master/helpers.md:627
#, no-wrap
msgid "    // ['name' => 'Desk', 'price' => 100]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:323 docs/master/helpers.md:322
#, no-wrap
msgid "    $array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:328 docs/master/helpers.md:327
#, no-wrap
msgid "<a name=\"method-array-collapse\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:328 docs/master/helpers.md:327
#, no-wrap
msgid "`Arr::collapse()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:331 docs/master/helpers.md:330
msgid "The `Arr::collapse` method collapses an array of arrays into a single array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:335 docs/master/helpers.md:334
#, no-wrap
msgid "    $array = Arr::collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:339 docs/master/helpers.md:338
#, no-wrap
msgid "<a name=\"method-array-crossjoin\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:339 docs/master/helpers.md:338
#, no-wrap
msgid "`Arr::crossJoin()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:342 docs/master/helpers.md:341
msgid "The `Arr::crossJoin` method cross joins the given arrays, returning a Cartesian product with all possible permutations:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:346 docs/master/helpers.md:345
#, no-wrap
msgid "    $matrix = Arr::crossJoin([1, 2], ['a', 'b']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:357 docs/master/helpers.md:356
#, no-wrap
msgid "    $matrix = Arr::crossJoin([1, 2], ['a', 'b'], ['I', 'II']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:372 docs/master/helpers.md:371
#, no-wrap
msgid "<a name=\"method-array-divide\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:372 docs/master/helpers.md:371
#, no-wrap
msgid "`Arr::divide()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:375 docs/master/helpers.md:374
msgid "The `Arr::divide` method returns two arrays: one containing the keys and the other containing the values of the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:379 docs/master/helpers.md:378
#, no-wrap
msgid "    [$keys, $values] = Arr::divide(['name' => 'Desk']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:381 docs/master/helpers.md:380
#, no-wrap
msgid "    // $keys: ['name']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:383 docs/master/helpers.md:382
#, no-wrap
msgid "    // $values: ['Desk']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:385 docs/master/helpers.md:384
#, no-wrap
msgid "<a name=\"method-array-dot\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:385 docs/master/helpers.md:384
#, no-wrap
msgid "`Arr::dot()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:388 docs/master/helpers.md:387
msgid "The `Arr::dot` method flattens a multi-dimensional array into a single level array that uses \"dot\" notation to indicate depth:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:392 docs/8.x/helpers.md:469 docs/8.x/helpers.md:482
#: docs/8.x/helpers.md:698 docs/master/helpers.md:391
#: docs/master/helpers.md:468 docs/master/helpers.md:481
#: docs/master/helpers.md:697
#, no-wrap
msgid "    $array = ['products' => ['desk' => ['price' => 100]]];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:394 docs/master/helpers.md:393
#, no-wrap
msgid "    $flattened = Arr::dot($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:396 docs/master/helpers.md:395
#, no-wrap
msgid "    // ['products.desk.price' => 100]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:398 docs/master/helpers.md:397
#, no-wrap
msgid "<a name=\"method-array-except\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:398 docs/master/helpers.md:397
#, no-wrap
msgid "`Arr::except()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:401 docs/master/helpers.md:400
msgid "The `Arr::except` method removes the given key / value pairs from an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:405 docs/8.x/helpers.md:637 docs/master/helpers.md:404
#: docs/master/helpers.md:636
#, no-wrap
msgid "    $array = ['name' => 'Desk', 'price' => 100];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:407 docs/master/helpers.md:406
#, no-wrap
msgid "    $filtered = Arr::except($array, ['price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:409 docs/master/helpers.md:408
#, no-wrap
msgid "    // ['name' => 'Desk']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:411 docs/master/helpers.md:410
#, no-wrap
msgid "<a name=\"method-array-exists\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:411 docs/master/helpers.md:410
#, no-wrap
msgid "`Arr::exists()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:414 docs/master/helpers.md:413
msgid "The `Arr::exists` method checks that the given key exists in the provided array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:418 docs/master/helpers.md:417
#, no-wrap
msgid "    $array = ['name' => 'John Doe', 'age' => 17];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:420 docs/master/helpers.md:419
#, no-wrap
msgid "    $exists = Arr::exists($array, 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:424 docs/master/helpers.md:423
#, no-wrap
msgid "    $exists = Arr::exists($array, 'salary');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:428 docs/master/helpers.md:427
#, no-wrap
msgid "<a name=\"method-array-first\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:428 docs/master/helpers.md:427
#, no-wrap
msgid "`Arr::first()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:431 docs/master/helpers.md:430
msgid "The `Arr::first` method returns the first element of an array passing a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:435 docs/8.x/helpers.md:916 docs/8.x/helpers.md:927
#: docs/master/helpers.md:434 docs/master/helpers.md:915
#: docs/master/helpers.md:926
#, no-wrap
msgid "    $array = [100, 200, 300];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:439 docs/master/helpers.md:438
#, no-wrap
msgid "    $first = Arr::first($array, function ($value, $key) {\n"
"        return $value >= 150;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:441 docs/master/helpers.md:440
#, no-wrap
msgid "    // 200\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:443 docs/master/helpers.md:442
msgid "A default value may also be passed as the third parameter to the method. This value will be returned if no value passes the truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:447 docs/master/helpers.md:446
#, no-wrap
msgid "    $first = Arr::first($array, $callback, $default);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:449 docs/master/helpers.md:448
#, no-wrap
msgid "<a name=\"method-array-flatten\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:449 docs/master/helpers.md:448
#, no-wrap
msgid "`Arr::flatten()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:452 docs/master/helpers.md:451
msgid "The `Arr::flatten` method flattens a multi-dimensional array into a single level array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:456 docs/master/helpers.md:455
#, no-wrap
msgid "    $array = ['name' => 'Joe', 'languages' => ['PHP', 'Ruby']];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:458 docs/master/helpers.md:457
#, no-wrap
msgid "    $flattened = Arr::flatten($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:460 docs/master/helpers.md:459
#, no-wrap
msgid "    // ['Joe', 'PHP', 'Ruby']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:462 docs/master/helpers.md:461
#, no-wrap
msgid "<a name=\"method-array-forget\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:462 docs/master/helpers.md:461
#, no-wrap
msgid "`Arr::forget()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:465 docs/master/helpers.md:464
msgid "The `Arr::forget` method removes a given key / value pair from a deeply nested array using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:471 docs/master/helpers.md:470
#, no-wrap
msgid "    Arr::forget($array, 'products.desk');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:473 docs/master/helpers.md:472
#, no-wrap
msgid "    // ['products' => []]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:475 docs/master/helpers.md:474
#, no-wrap
msgid "<a name=\"method-array-get\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:475 docs/master/helpers.md:474
#, no-wrap
msgid "`Arr::get()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:478 docs/master/helpers.md:477
msgid "The `Arr::get` method retrieves a value from a deeply nested array using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:484 docs/master/helpers.md:483
#, no-wrap
msgid "    $price = Arr::get($array, 'products.desk.price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:486 docs/8.x/helpers.md:853 docs/8.x/helpers.md:920
#: docs/master/helpers.md:485 docs/master/helpers.md:852
#: docs/master/helpers.md:919
#, no-wrap
msgid "    // 100\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:488 docs/master/helpers.md:487
msgid "The `Arr::get` method also accepts a default value, which will be returned if the specified key is not present in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:492 docs/master/helpers.md:491
#, no-wrap
msgid "    $discount = Arr::get($array, 'products.desk.discount', 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:494 docs/8.x/helpers.md:859 docs/8.x/helpers.md:3023
#: docs/master/helpers.md:493 docs/master/helpers.md:858
#: docs/master/helpers.md:3011
#, no-wrap
msgid "    // 0\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:496 docs/master/helpers.md:495
#, no-wrap
msgid "<a name=\"method-array-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:496 docs/master/helpers.md:495
#, no-wrap
msgid "`Arr::has()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:499 docs/master/helpers.md:498
msgid "The `Arr::has` method checks whether a given item or items exists in an array using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:503 docs/8.x/helpers.md:520 docs/master/helpers.md:502
#: docs/master/helpers.md:519
#, no-wrap
msgid "    $array = ['product' => ['name' => 'Desk', 'price' => 100]];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:505 docs/master/helpers.md:504
#, no-wrap
msgid "    $contains = Arr::has($array, 'product.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:509 docs/master/helpers.md:508
#, no-wrap
msgid "    $contains = Arr::has($array, ['product.price', 'product.discount']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:513 docs/master/helpers.md:512
#, no-wrap
msgid "<a name=\"method-array-hasany\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:513 docs/master/helpers.md:512
#, no-wrap
msgid "`Arr::hasAny()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:516 docs/master/helpers.md:515
msgid "The `Arr::hasAny` method checks whether any item in a given set exists in an array using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:522 docs/master/helpers.md:521
#, no-wrap
msgid "    $contains = Arr::hasAny($array, 'product.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:526 docs/master/helpers.md:525
#, no-wrap
msgid "    $contains = Arr::hasAny($array, ['product.name', 'product.discount']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:530 docs/master/helpers.md:529
#, no-wrap
msgid "    $contains = Arr::hasAny($array, ['category', 'product.discount']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:534 docs/master/helpers.md:533
#, no-wrap
msgid "<a name=\"method-array-isassoc\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:534 docs/master/helpers.md:533
#, no-wrap
msgid "`Arr::isAssoc()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:537 docs/master/helpers.md:536
msgid "The `Arr::isAssoc` returns `true` if the given array is an associative array. An array is considered \"associative\" if it doesn't have sequential numerical keys beginning with zero:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:541 docs/master/helpers.md:540
#, no-wrap
msgid "    $isAssoc = Arr::isAssoc(['product' => ['name' => 'Desk', 'price' => 100]]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:545 docs/master/helpers.md:544
#, no-wrap
msgid "    $isAssoc = Arr::isAssoc([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:549 docs/master/helpers.md:548
#, no-wrap
msgid "<a name=\"method-array-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:549 docs/master/helpers.md:548
#, no-wrap
msgid "`Arr::last()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:552 docs/master/helpers.md:551
msgid "The `Arr::last` method returns the last element of an array passing a given truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:556 docs/master/helpers.md:555
#, no-wrap
msgid "    $array = [100, 200, 300, 110];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:560 docs/master/helpers.md:559
#, no-wrap
msgid "    $last = Arr::last($array, function ($value, $key) {\n"
"        return $value >= 150;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:562 docs/8.x/helpers.md:931 docs/master/helpers.md:561
#: docs/master/helpers.md:930
#, no-wrap
msgid "    // 300\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:564 docs/master/helpers.md:563
msgid "A default value may be passed as the third argument to the method. This value will be returned if no value passes the truth test:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:568 docs/master/helpers.md:567
#, no-wrap
msgid "    $last = Arr::last($array, $callback, $default);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:570 docs/master/helpers.md:569
#, no-wrap
msgid "<a name=\"method-array-only\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:570 docs/master/helpers.md:569
#, no-wrap
msgid "`Arr::only()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:573 docs/master/helpers.md:572
msgid "The `Arr::only` method returns only the specified key / value pairs from the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:577 docs/master/helpers.md:576
#, no-wrap
msgid "    $array = ['name' => 'Desk', 'price' => 100, 'orders' => 10];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:579 docs/master/helpers.md:578
#, no-wrap
msgid "    $slice = Arr::only($array, ['name', 'price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:583 docs/master/helpers.md:582
#, no-wrap
msgid "<a name=\"method-array-pluck\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:583 docs/master/helpers.md:582
#, no-wrap
msgid "`Arr::pluck()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:586 docs/master/helpers.md:585
msgid "The `Arr::pluck` method retrieves all of the values for a given key from an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:593 docs/master/helpers.md:592
#, no-wrap
msgid "    $array = [\n"
"        ['developer' => ['id' => 1, 'name' => 'Taylor']],\n"
"        ['developer' => ['id' => 2, 'name' => 'Abigail']],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:595 docs/master/helpers.md:594
#, no-wrap
msgid "    $names = Arr::pluck($array, 'developer.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:597 docs/master/helpers.md:596
#, no-wrap
msgid "    // ['Taylor', 'Abigail']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:599 docs/master/helpers.md:598
msgid "You may also specify how you wish the resulting list to be keyed:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:603 docs/master/helpers.md:602
#, no-wrap
msgid "    $names = Arr::pluck($array, 'developer.name', 'developer.id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:605 docs/master/helpers.md:604
#, no-wrap
msgid "    // [1 => 'Taylor', 2 => 'Abigail']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:607 docs/master/helpers.md:606
#, no-wrap
msgid "<a name=\"method-array-prepend\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:607 docs/master/helpers.md:606
#, no-wrap
msgid "`Arr::prepend()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:610 docs/master/helpers.md:609
msgid "The `Arr::prepend` method will push an item onto the beginning of an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:614 docs/master/helpers.md:613
#, no-wrap
msgid "    $array = ['one', 'two', 'three', 'four'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:616 docs/master/helpers.md:615
#, no-wrap
msgid "    $array = Arr::prepend($array, 'zero');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:618 docs/master/helpers.md:617
#, no-wrap
msgid "    // ['zero', 'one', 'two', 'three', 'four']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:620 docs/master/helpers.md:619
msgid "If needed, you may specify the key that should be used for the value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:624 docs/master/helpers.md:623
#, no-wrap
msgid "    $array = ['price' => 100];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:626 docs/master/helpers.md:625
#, no-wrap
msgid "    $array = Arr::prepend($array, 'Desk', 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:630 docs/master/helpers.md:629
#, no-wrap
msgid "<a name=\"method-array-pull\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:630 docs/master/helpers.md:629
#, no-wrap
msgid "`Arr::pull()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:633 docs/master/helpers.md:632
msgid "The `Arr::pull` method returns and removes a key / value pair from an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:639 docs/master/helpers.md:638
#, no-wrap
msgid "    $name = Arr::pull($array, 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:641 docs/master/helpers.md:640
#, no-wrap
msgid "    // $name: Desk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:643 docs/master/helpers.md:642
#, no-wrap
msgid "    // $array: ['price' => 100]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:645 docs/master/helpers.md:644
msgid "A default value may be passed as the third argument to the method. This value will be returned if the key doesn't exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:649 docs/master/helpers.md:648
#, no-wrap
msgid "    $value = Arr::pull($array, $key, $default);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:651 docs/master/helpers.md:650
#, no-wrap
msgid "<a name=\"method-array-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:651 docs/master/helpers.md:650
#, no-wrap
msgid "`Arr::query()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:654 docs/master/helpers.md:653
msgid "The `Arr::query` method converts the array into a query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:664 docs/master/helpers.md:663
#, no-wrap
msgid "    $array = [\n"
"        'name' => 'Taylor',\n"
"        'order' => [\n"
"            'column' => 'created_at',\n"
"            'direction' => 'desc'\n"
"        ]\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:666 docs/master/helpers.md:665
#, no-wrap
msgid "    Arr::query($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:668 docs/master/helpers.md:667
#, no-wrap
msgid "    // name=Taylor&order[column]=created_at&order[direction]=desc\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:670 docs/master/helpers.md:669
#, no-wrap
msgid "<a name=\"method-array-random\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:670 docs/master/helpers.md:669
#, no-wrap
msgid "`Arr::random()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:673 docs/master/helpers.md:672
msgid "The `Arr::random` method returns a random value from an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:677 docs/master/helpers.md:676
#, no-wrap
msgid "    $array = [1, 2, 3, 4, 5];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:679 docs/master/helpers.md:678
#, no-wrap
msgid "    $random = Arr::random($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:683 docs/master/helpers.md:682
msgid "You may also specify the number of items to return as an optional second argument. Note that providing this argument will return an array even if only one item is desired:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:687 docs/master/helpers.md:686
#, no-wrap
msgid "    $items = Arr::random($array, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:689 docs/master/helpers.md:688
#, no-wrap
msgid "    // [2, 5] - (retrieved randomly)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:691 docs/master/helpers.md:690
#, no-wrap
msgid "<a name=\"method-array-set\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:691 docs/master/helpers.md:690
#, no-wrap
msgid "`Arr::set()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:694 docs/master/helpers.md:693
msgid "The `Arr::set` method sets a value within a deeply nested array using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:700 docs/master/helpers.md:699
#, no-wrap
msgid "    Arr::set($array, 'products.desk.price', 200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:702 docs/8.x/helpers.md:881 docs/master/helpers.md:701
#: docs/master/helpers.md:880
#, no-wrap
msgid "    // ['products' => ['desk' => ['price' => 200]]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:704 docs/master/helpers.md:703
#, no-wrap
msgid "<a name=\"method-array-shuffle\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:704 docs/master/helpers.md:703
#, no-wrap
msgid "`Arr::shuffle()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:707 docs/master/helpers.md:706
msgid "The `Arr::shuffle` method randomly shuffles the items in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:711 docs/master/helpers.md:710
#, no-wrap
msgid "    $array = Arr::shuffle([1, 2, 3, 4, 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:715 docs/master/helpers.md:714
#, no-wrap
msgid "<a name=\"method-array-sort\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:715 docs/master/helpers.md:714
#, no-wrap
msgid "`Arr::sort()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:718 docs/master/helpers.md:717
msgid "The `Arr::sort` method sorts an array by its values:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:722 docs/master/helpers.md:721
#, no-wrap
msgid "    $array = ['Desk', 'Table', 'Chair'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:724 docs/master/helpers.md:723
#, no-wrap
msgid "    $sorted = Arr::sort($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:726 docs/master/helpers.md:725
#, no-wrap
msgid "    // ['Chair', 'Desk', 'Table']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:728 docs/master/helpers.md:727
msgid "You may also sort the array by the results of a given closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:736 docs/master/helpers.md:735
#, no-wrap
msgid "    $array = [\n"
"        ['name' => 'Desk'],\n"
"        ['name' => 'Table'],\n"
"        ['name' => 'Chair'],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:740 docs/master/helpers.md:739
#, no-wrap
msgid "    $sorted = array_values(Arr::sort($array, function ($value) {\n"
"        return $value['name'];\n"
"    }));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:748 docs/master/helpers.md:747
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['name' => 'Chair'],\n"
"            ['name' => 'Desk'],\n"
"            ['name' => 'Table'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:750 docs/master/helpers.md:749
#, no-wrap
msgid "<a name=\"method-array-sort-recursive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:750 docs/master/helpers.md:749
#, no-wrap
msgid "`Arr::sortRecursive()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:753 docs/master/helpers.md:752
msgid "The `Arr::sortRecursive` method recursively sorts an array using the `sort` function for numerically indexed sub-arrays and the `ksort` function for associative sub-arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:761 docs/master/helpers.md:760
#, no-wrap
msgid "    $array = [\n"
"        ['Roman', 'Taylor', 'Li'],\n"
"        ['PHP', 'Ruby', 'JavaScript'],\n"
"        ['one' => 1, 'two' => 2, 'three' => 3],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:763 docs/master/helpers.md:762
#, no-wrap
msgid "    $sorted = Arr::sortRecursive($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:771 docs/master/helpers.md:770
#, no-wrap
msgid "    /*\n"
"        [\n"
"            ['JavaScript', 'PHP', 'Ruby'],\n"
"            ['one' => 1, 'three' => 3, 'two' => 2],\n"
"            ['Li', 'Roman', 'Taylor'],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:773 docs/master/helpers.md:772
#, no-wrap
msgid "<a name=\"method-array-where\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:773 docs/master/helpers.md:772
#, no-wrap
msgid "`Arr::where()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:776 docs/master/helpers.md:775
msgid "The `Arr::where` method filters an array using the given closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:780 docs/master/helpers.md:779
#, no-wrap
msgid "    $array = [100, '200', 300, '400', 500];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:784 docs/master/helpers.md:783
#, no-wrap
msgid "    $filtered = Arr::where($array, function ($value, $key) {\n"
"        return is_string($value);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:786 docs/master/helpers.md:785
#, no-wrap
msgid "    // [1 => '200', 3 => '400']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:788 docs/master/helpers.md:787
#, no-wrap
msgid "<a name=\"method-array-wrap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:788 docs/master/helpers.md:787
#, no-wrap
msgid "`Arr::wrap()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:791
msgid "The `Arr::wrap` method wraps the given value in an array. If the given value is already an array it will be returned without modification:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:795 docs/master/helpers.md:794
#, no-wrap
msgid "    $string = 'Laravel';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:797 docs/master/helpers.md:796
#, no-wrap
msgid "    $array = Arr::wrap($string);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:799 docs/master/helpers.md:798
#, no-wrap
msgid "    // ['Laravel']\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:801 docs/master/helpers.md:800
msgid "If the given value is `null`, an empty array will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:805 docs/master/helpers.md:804
#, no-wrap
msgid "    $array = Arr::wrap(null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:809 docs/master/helpers.md:808
#, no-wrap
msgid "<a name=\"method-data-fill\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:809 docs/master/helpers.md:808
#, no-wrap
msgid "`data_fill()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:812 docs/master/helpers.md:811
msgid "The `data_fill` function sets a missing value within a nested array or object using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:814 docs/8.x/helpers.md:849 docs/8.x/helpers.md:877
#: docs/8.x/helpers.md:905 docs/master/helpers.md:813
#: docs/master/helpers.md:848 docs/master/helpers.md:876
#: docs/master/helpers.md:904
#, no-wrap
msgid "    $data = ['products' => ['desk' => ['price' => 100]]];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:816 docs/master/helpers.md:815
#, no-wrap
msgid "    data_fill($data, 'products.desk.price', 200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:818 docs/8.x/helpers.md:909 docs/master/helpers.md:817
#: docs/master/helpers.md:908
#, no-wrap
msgid "    // ['products' => ['desk' => ['price' => 100]]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:820 docs/master/helpers.md:819
#, no-wrap
msgid "    data_fill($data, 'products.desk.discount', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:822 docs/master/helpers.md:821
#, no-wrap
msgid "    // ['products' => ['desk' => ['price' => 100, 'discount' => 10]]]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:824 docs/master/helpers.md:823
msgid "This function also accepts asterisks as wildcards and will fill the target accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:831 docs/master/helpers.md:830
#, no-wrap
msgid "    $data = [\n"
"        'products' => [\n"
"            ['name' => 'Desk 1', 'price' => 100],\n"
"            ['name' => 'Desk 2'],\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:833 docs/master/helpers.md:832
#, no-wrap
msgid "    data_fill($data, 'products.*.price', 200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:842 docs/master/helpers.md:841
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'products' => [\n"
"                ['name' => 'Desk 1', 'price' => 100],\n"
"                ['name' => 'Desk 2', 'price' => 200],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:844 docs/master/helpers.md:843
#, no-wrap
msgid "<a name=\"method-data-get\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:844 docs/master/helpers.md:843
#, no-wrap
msgid "`data_get()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:847 docs/master/helpers.md:846
msgid "The `data_get` function retrieves a value from a nested array or object using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:851 docs/master/helpers.md:850
#, no-wrap
msgid "    $price = data_get($data, 'products.desk.price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:855 docs/master/helpers.md:854
msgid "The `data_get` function also accepts a default value, which will be returned if the specified key is not found:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:857 docs/master/helpers.md:856
#, no-wrap
msgid "    $discount = data_get($data, 'products.desk.discount', 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:861 docs/master/helpers.md:860
msgid "The function also accepts wildcards using asterisks, which may target any key of the array or object:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:866 docs/master/helpers.md:865
#, no-wrap
msgid "    $data = [\n"
"        'product-one' => ['name' => 'Desk 1', 'price' => 100],\n"
"        'product-two' => ['name' => 'Desk 2', 'price' => 150],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:868 docs/master/helpers.md:867
#, no-wrap
msgid "    data_get($data, '*.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:870 docs/master/helpers.md:869
#, no-wrap
msgid "    // ['Desk 1', 'Desk 2'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:872 docs/master/helpers.md:871
#, no-wrap
msgid "<a name=\"method-data-set\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:872 docs/master/helpers.md:871
#, no-wrap
msgid "`data_set()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:875 docs/master/helpers.md:874
msgid "The `data_set` function sets a value within a nested array or object using \"dot\" notation:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:879 docs/master/helpers.md:878
#, no-wrap
msgid "    data_set($data, 'products.desk.price', 200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:883 docs/master/helpers.md:882
msgid "This function also accepts wildcards using asterisks and will set values on the target accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:890 docs/master/helpers.md:889
#, no-wrap
msgid "    $data = [\n"
"        'products' => [\n"
"            ['name' => 'Desk 1', 'price' => 100],\n"
"            ['name' => 'Desk 2', 'price' => 150],\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:892 docs/master/helpers.md:891
#, no-wrap
msgid "    data_set($data, 'products.*.price', 200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:901 docs/master/helpers.md:900
#, no-wrap
msgid "    /*\n"
"        [\n"
"            'products' => [\n"
"                ['name' => 'Desk 1', 'price' => 200],\n"
"                ['name' => 'Desk 2', 'price' => 200],\n"
"            ],\n"
"        ]\n"
"    */\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:903 docs/master/helpers.md:902
msgid "By default, any existing values are overwritten. If you wish to only set a value if it doesn't exist, you may pass `false` as the fourth argument to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:907 docs/master/helpers.md:906
#, no-wrap
msgid "    data_set($data, 'products.desk.price', 200, $overwrite = false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:911 docs/master/helpers.md:910
#, no-wrap
msgid "<a name=\"method-head\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:911 docs/master/helpers.md:910
#, no-wrap
msgid "`head()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:914 docs/master/helpers.md:913
msgid "The `head` function returns the first element in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:918 docs/master/helpers.md:917
#, no-wrap
msgid "    $first = head($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:925 docs/master/helpers.md:924
msgid "The `last` function returns the last element in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:929 docs/master/helpers.md:928
#, no-wrap
msgid "    $last = last($array);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:933 docs/master/helpers.md:932
#, no-wrap
msgid "<a name=\"paths\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:936 docs/master/helpers.md:935
#, no-wrap
msgid "<a name=\"method-app-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:936 docs/master/helpers.md:935
#, no-wrap
msgid "`app_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:939 docs/master/helpers.md:938
msgid "The `app_path` function returns the fully qualified path to your application's `app` directory. You may also use the `app_path` function to generate a fully qualified path to a file relative to the application directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:941 docs/master/helpers.md:940
#, no-wrap
msgid "    $path = app_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:943 docs/master/helpers.md:942
#, no-wrap
msgid "    $path = app_path('Http/Controllers/Controller.php');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:945 docs/master/helpers.md:944
#, no-wrap
msgid "<a name=\"method-base-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:945 docs/master/helpers.md:944
#, no-wrap
msgid "`base_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:948 docs/master/helpers.md:947
msgid "The `base_path` function returns the fully qualified path to your application's root directory. You may also use the `base_path` function to generate a fully qualified path to a given file relative to the project root directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:950 docs/master/helpers.md:949
#, no-wrap
msgid "    $path = base_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:952 docs/master/helpers.md:951
#, no-wrap
msgid "    $path = base_path('vendor/bin');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:954 docs/master/helpers.md:953
#, no-wrap
msgid "<a name=\"method-config-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:954 docs/master/helpers.md:953
#, no-wrap
msgid "`config_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:957 docs/master/helpers.md:956
msgid "The `config_path` function returns the fully qualified path to your application's `config` directory. You may also use the `config_path` function to generate a fully qualified path to a given file within the application's configuration directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:959 docs/master/helpers.md:958
#, no-wrap
msgid "    $path = config_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:961 docs/master/helpers.md:960
#, no-wrap
msgid "    $path = config_path('app.php');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:963 docs/master/helpers.md:962
#, no-wrap
msgid "<a name=\"method-database-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:963 docs/master/helpers.md:962
#, no-wrap
msgid "`database_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:966 docs/master/helpers.md:965
msgid "The `database_path` function returns the fully qualified path to your application's `database` directory. You may also use the `database_path` function to generate a fully qualified path to a given file within the database directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:968 docs/master/helpers.md:967
#, no-wrap
msgid "    $path = database_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:970 docs/master/helpers.md:969
#, no-wrap
msgid "    $path = database_path('factories/UserFactory.php');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:972 docs/master/helpers.md:971
#, no-wrap
msgid "<a name=\"method-mix\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:972 docs/master/helpers.md:971
#, no-wrap
msgid "`mix()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:975 docs/master/helpers.md:974
msgid "The `mix` function returns the path to a [versioned Mix file](/docs/{{version}}/mix):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:977 docs/master/helpers.md:976
#, no-wrap
msgid "    $path = mix('css/app.css');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:979 docs/master/helpers.md:978
#, no-wrap
msgid "<a name=\"method-public-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:979 docs/master/helpers.md:978
#, no-wrap
msgid "`public_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:982 docs/master/helpers.md:981
msgid "The `public_path` function returns the fully qualified path to your application's `public` directory. You may also use the `public_path` function to generate a fully qualified path to a given file within the public directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:984 docs/master/helpers.md:983
#, no-wrap
msgid "    $path = public_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:986 docs/master/helpers.md:985
#, no-wrap
msgid "    $path = public_path('css/app.css');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:988 docs/master/helpers.md:987
#, no-wrap
msgid "<a name=\"method-resource-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:988 docs/master/helpers.md:987
#, no-wrap
msgid "`resource_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:991 docs/master/helpers.md:990
msgid "The `resource_path` function returns the fully qualified path to your application's `resources` directory. You may also use the `resource_path` function to generate a fully qualified path to a given file within the resources directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:993 docs/master/helpers.md:992
#, no-wrap
msgid "    $path = resource_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:995 docs/master/helpers.md:994
#, no-wrap
msgid "    $path = resource_path('sass/app.scss');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:997 docs/master/helpers.md:996
#, no-wrap
msgid "<a name=\"method-storage-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:997 docs/master/helpers.md:996
#, no-wrap
msgid "`storage_path()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1000 docs/master/helpers.md:999
msgid "The `storage_path` function returns the fully qualified path to your application's `storage` directory. You may also use the `storage_path` function to generate a fully qualified path to a given file within the storage directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1002 docs/master/helpers.md:1001
#, no-wrap
msgid "    $path = storage_path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1004 docs/master/helpers.md:1003
#, no-wrap
msgid "    $path = storage_path('app/file.txt');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1006 docs/master/helpers.md:1005
#, no-wrap
msgid "<a name=\"strings\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1009 docs/master/helpers.md:1008
#, no-wrap
msgid "<a name=\"method-__\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1009 docs/master/helpers.md:1008
#, no-wrap
msgid "`__()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1012 docs/master/helpers.md:1011
msgid "The `__` function translates the given translation string or translation key using your [localization files](/docs/{{version}}/localization):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1014 docs/master/helpers.md:1013
#, no-wrap
msgid "    echo __('Welcome to our application');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1016 docs/8.x/localization.md:122
#: docs/master/helpers.md:1015 docs/master/localization.md:122
#, no-wrap
msgid "    echo __('messages.welcome');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1018 docs/master/helpers.md:1017
msgid "If the specified translation string or key does not exist, the `__` function will return the given value. So, using the example above, the `__` function would return `messages.welcome` if that translation key does not exist."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1020 docs/master/helpers.md:1019
#, no-wrap
msgid "<a name=\"method-class-basename\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1020 docs/master/helpers.md:1019
#, no-wrap
msgid "`class_basename()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1023 docs/master/helpers.md:1022
msgid "The `class_basename` function returns the class name of the given class with the class's namespace removed:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1025 docs/master/helpers.md:1024
#, no-wrap
msgid "    $class = class_basename('Foo\\Bar\\Baz');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1027 docs/master/helpers.md:1026
#, no-wrap
msgid "    // Baz\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1029 docs/master/helpers.md:1028
#, no-wrap
msgid "<a name=\"method-e\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1029 docs/master/helpers.md:1028
#, no-wrap
msgid "`e()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1032 docs/master/helpers.md:1031
msgid "The `e` function runs PHP's `htmlspecialchars` function with the `double_encode` option set to `true` by default:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1034 docs/master/helpers.md:1033
#, no-wrap
msgid "    echo e('<html>foo</html>');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1036 docs/master/helpers.md:1035
#, no-wrap
msgid "    // &lt;html&gt;foo&lt;/html&gt;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1038 docs/master/helpers.md:1037
#, no-wrap
msgid "<a name=\"method-preg-replace-array\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1038 docs/master/helpers.md:1037
#, no-wrap
msgid "`preg_replace_array()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1041 docs/master/helpers.md:1040
msgid "The `preg_replace_array` function replaces a given pattern in the string sequentially using an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1043 docs/master/helpers.md:1042
#, no-wrap
msgid "    $string = 'The event will take place between :start and :end';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1045 docs/master/helpers.md:1044
#, no-wrap
msgid "    $replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], $string);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1047 docs/8.x/helpers.md:1437 docs/8.x/helpers.md:2141
#: docs/master/helpers.md:1046 docs/master/helpers.md:1436
#: docs/master/helpers.md:2140
#, no-wrap
msgid "    // The event will take place between 8:30 and 9:00\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1049 docs/master/helpers.md:1048
#, no-wrap
msgid "<a name=\"method-str-after\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1049 docs/master/helpers.md:1048
#, no-wrap
msgid "`Str::after()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1052 docs/master/helpers.md:1051
msgid "The `Str::after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1054 docs/8.x/helpers.md:1065 docs/8.x/helpers.md:1076
#: docs/8.x/helpers.md:1087 docs/8.x/helpers.md:1098 docs/8.x/helpers.md:1109
#: docs/8.x/helpers.md:1120 docs/8.x/helpers.md:1131 docs/8.x/helpers.md:1139
#: docs/8.x/helpers.md:1150 docs/8.x/helpers.md:1161 docs/8.x/helpers.md:1170
#: docs/8.x/helpers.md:1185 docs/8.x/helpers.md:1200 docs/8.x/helpers.md:1215
#: docs/8.x/helpers.md:1230 docs/8.x/helpers.md:1245 docs/8.x/helpers.md:1256
#: docs/8.x/helpers.md:1267 docs/8.x/helpers.md:1275 docs/8.x/helpers.md:1286
#: docs/8.x/helpers.md:1297 docs/8.x/helpers.md:1314 docs/8.x/helpers.md:1323
#: docs/8.x/helpers.md:1338 docs/8.x/helpers.md:1353 docs/8.x/helpers.md:1368
#: docs/8.x/helpers.md:1380 docs/8.x/helpers.md:1395 docs/8.x/helpers.md:1407
#: docs/8.x/helpers.md:1422 docs/8.x/helpers.md:1431 docs/8.x/helpers.md:1444
#: docs/8.x/helpers.md:1455 docs/8.x/helpers.md:1466 docs/8.x/helpers.md:1481
#: docs/8.x/helpers.md:1492 docs/8.x/helpers.md:1503 docs/8.x/helpers.md:1518
#: docs/8.x/helpers.md:1529 docs/8.x/helpers.md:1540 docs/8.x/helpers.md:1551
#: docs/8.x/helpers.md:1562 docs/8.x/helpers.md:1573 docs/8.x/helpers.md:1584
#: docs/8.x/helpers.md:1595 docs/8.x/helpers.md:1604 docs/8.x/helpers.md:1638
#: docs/8.x/helpers.md:1649 docs/8.x/helpers.md:1660 docs/8.x/helpers.md:1671
#: docs/8.x/helpers.md:1682 docs/8.x/helpers.md:1690 docs/8.x/helpers.md:1701
#: docs/8.x/helpers.md:1712 docs/8.x/helpers.md:1723 docs/8.x/helpers.md:1734
#: docs/8.x/helpers.md:1742 docs/8.x/helpers.md:1753 docs/8.x/helpers.md:1764
#: docs/8.x/helpers.md:1772 docs/8.x/helpers.md:1783 docs/8.x/helpers.md:1791
#: docs/8.x/helpers.md:1806 docs/8.x/helpers.md:1817 docs/8.x/helpers.md:1828
#: docs/8.x/helpers.md:1843 docs/8.x/helpers.md:1858 docs/8.x/helpers.md:1873
#: docs/8.x/helpers.md:1889 docs/8.x/helpers.md:1904 docs/8.x/helpers.md:1915
#: docs/8.x/helpers.md:1926 docs/8.x/helpers.md:1934 docs/8.x/helpers.md:1945
#: docs/8.x/helpers.md:1956 docs/8.x/helpers.md:1971 docs/8.x/helpers.md:1988
#: docs/8.x/helpers.md:2003 docs/8.x/helpers.md:2011 docs/8.x/helpers.md:2024
#: docs/8.x/helpers.md:2039 docs/8.x/helpers.md:2054 docs/8.x/helpers.md:2069
#: docs/8.x/helpers.md:2086 docs/8.x/helpers.md:2098 docs/8.x/helpers.md:2113
#: docs/8.x/helpers.md:2124 docs/8.x/helpers.md:2135 docs/8.x/helpers.md:2148
#: docs/8.x/helpers.md:2159 docs/8.x/helpers.md:2170 docs/8.x/helpers.md:2178
#: docs/8.x/helpers.md:2191 docs/8.x/helpers.md:2206 docs/8.x/helpers.md:2221
#: docs/8.x/helpers.md:2232 docs/8.x/helpers.md:2243 docs/8.x/helpers.md:2254
#: docs/8.x/helpers.md:2269 docs/8.x/helpers.md:2280 docs/8.x/helpers.md:2291
#: docs/8.x/helpers.md:2306 docs/8.x/helpers.md:2322 docs/8.x/helpers.md:2333
#: docs/8.x/helpers.md:2344 docs/8.x/helpers.md:2359 docs/8.x/helpers.md:2370
#: docs/8.x/helpers.md:2381 docs/8.x/helpers.md:2397 docs/8.x/helpers.md:2410
#: docs/8.x/validation.md:406 docs/master/helpers.md:1053
#: docs/master/helpers.md:1064 docs/master/helpers.md:1075
#: docs/master/helpers.md:1086 docs/master/helpers.md:1097
#: docs/master/helpers.md:1108 docs/master/helpers.md:1119
#: docs/master/helpers.md:1130 docs/master/helpers.md:1138
#: docs/master/helpers.md:1149 docs/master/helpers.md:1160
#: docs/master/helpers.md:1169 docs/master/helpers.md:1184
#: docs/master/helpers.md:1199 docs/master/helpers.md:1214
#: docs/master/helpers.md:1229 docs/master/helpers.md:1244
#: docs/master/helpers.md:1255 docs/master/helpers.md:1266
#: docs/master/helpers.md:1274 docs/master/helpers.md:1285
#: docs/master/helpers.md:1296 docs/master/helpers.md:1313
#: docs/master/helpers.md:1322 docs/master/helpers.md:1337
#: docs/master/helpers.md:1352 docs/master/helpers.md:1367
#: docs/master/helpers.md:1379 docs/master/helpers.md:1394
#: docs/master/helpers.md:1406 docs/master/helpers.md:1421
#: docs/master/helpers.md:1430 docs/master/helpers.md:1443
#: docs/master/helpers.md:1454 docs/master/helpers.md:1465
#: docs/master/helpers.md:1480 docs/master/helpers.md:1491
#: docs/master/helpers.md:1502 docs/master/helpers.md:1517
#: docs/master/helpers.md:1528 docs/master/helpers.md:1539
#: docs/master/helpers.md:1550 docs/master/helpers.md:1561
#: docs/master/helpers.md:1572 docs/master/helpers.md:1583
#: docs/master/helpers.md:1594 docs/master/helpers.md:1603
#: docs/master/helpers.md:1637 docs/master/helpers.md:1648
#: docs/master/helpers.md:1659 docs/master/helpers.md:1670
#: docs/master/helpers.md:1681 docs/master/helpers.md:1689
#: docs/master/helpers.md:1700 docs/master/helpers.md:1711
#: docs/master/helpers.md:1722 docs/master/helpers.md:1733
#: docs/master/helpers.md:1741 docs/master/helpers.md:1752
#: docs/master/helpers.md:1763 docs/master/helpers.md:1771
#: docs/master/helpers.md:1782 docs/master/helpers.md:1790
#: docs/master/helpers.md:1805 docs/master/helpers.md:1816
#: docs/master/helpers.md:1827 docs/master/helpers.md:1842
#: docs/master/helpers.md:1857 docs/master/helpers.md:1872
#: docs/master/helpers.md:1888 docs/master/helpers.md:1903
#: docs/master/helpers.md:1914 docs/master/helpers.md:1925
#: docs/master/helpers.md:1933 docs/master/helpers.md:1944
#: docs/master/helpers.md:1955 docs/master/helpers.md:1970
#: docs/master/helpers.md:1987 docs/master/helpers.md:2002
#: docs/master/helpers.md:2010 docs/master/helpers.md:2023
#: docs/master/helpers.md:2038 docs/master/helpers.md:2053
#: docs/master/helpers.md:2068 docs/master/helpers.md:2085
#: docs/master/helpers.md:2097 docs/master/helpers.md:2112
#: docs/master/helpers.md:2123 docs/master/helpers.md:2134
#: docs/master/helpers.md:2147 docs/master/helpers.md:2158
#: docs/master/helpers.md:2169 docs/master/helpers.md:2177
#: docs/master/helpers.md:2190 docs/master/helpers.md:2205
#: docs/master/helpers.md:2220 docs/master/helpers.md:2231
#: docs/master/helpers.md:2242 docs/master/helpers.md:2253
#: docs/master/helpers.md:2268 docs/master/helpers.md:2279
#: docs/master/helpers.md:2290 docs/master/helpers.md:2305
#: docs/master/helpers.md:2321 docs/master/helpers.md:2332
#: docs/master/helpers.md:2347 docs/master/helpers.md:2358
#: docs/master/helpers.md:2369 docs/master/helpers.md:2385
#: docs/master/helpers.md:2398 docs/master/validation.md:393
#, no-wrap
msgid "    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1056 docs/master/helpers.md:1055
#, no-wrap
msgid "    $slice = Str::after('This is my name', 'This is');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1058 docs/8.x/helpers.md:1642
#: docs/master/helpers.md:1057 docs/master/helpers.md:1641
#, no-wrap
msgid "    // ' my name'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1060 docs/master/helpers.md:1059
#, no-wrap
msgid "<a name=\"method-str-after-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1060 docs/master/helpers.md:1059
#, no-wrap
msgid "`Str::afterLast()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1063 docs/master/helpers.md:1062
msgid "The `Str::afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1067 docs/master/helpers.md:1066
#, no-wrap
msgid "    $slice = Str::afterLast('App\\Http\\Controllers\\Controller', '\\\\');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1069 docs/8.x/helpers.md:1653
#: docs/master/helpers.md:1068 docs/master/helpers.md:1652
#, no-wrap
msgid "    // 'Controller'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1071 docs/master/helpers.md:1070
#, no-wrap
msgid "<a name=\"method-str-ascii\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1071 docs/master/helpers.md:1070
#, no-wrap
msgid "`Str::ascii()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1074 docs/master/helpers.md:1073
msgid "The `Str::ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1078 docs/master/helpers.md:1077
#, no-wrap
msgid "    $slice = Str::ascii('Ã»');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1080 docs/8.x/helpers.md:1675
#: docs/master/helpers.md:1079 docs/master/helpers.md:1674
#, no-wrap
msgid "    // 'u'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1082 docs/master/helpers.md:1081
#, no-wrap
msgid "<a name=\"method-str-before\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1082 docs/master/helpers.md:1081
#, no-wrap
msgid "`Str::before()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1085 docs/master/helpers.md:1084
msgid "The `Str::before` method returns everything before the given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1089 docs/master/helpers.md:1088
#, no-wrap
msgid "    $slice = Str::before('This is my name', 'my name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1091 docs/8.x/helpers.md:1705
#: docs/master/helpers.md:1090 docs/master/helpers.md:1704
#, no-wrap
msgid "    // 'This is '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1093 docs/master/helpers.md:1092
#, no-wrap
msgid "<a name=\"method-str-before-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1093 docs/master/helpers.md:1092
#, no-wrap
msgid "`Str::beforeLast()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1096 docs/master/helpers.md:1095
msgid "The `Str::beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1100 docs/master/helpers.md:1099
#, no-wrap
msgid "    $slice = Str::beforeLast('This is my name', 'is');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1102 docs/8.x/helpers.md:1716
#: docs/master/helpers.md:1101 docs/master/helpers.md:1715
#, no-wrap
msgid "    // 'This '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1104 docs/master/helpers.md:1103
#, no-wrap
msgid "<a name=\"method-str-between\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1104 docs/master/helpers.md:1103
#, no-wrap
msgid "`Str::between()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1107 docs/master/helpers.md:1106
msgid "The `Str::between` method returns the portion of a string between two values:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1111 docs/master/helpers.md:1110
#, no-wrap
msgid "    $slice = Str::between('This is my name', 'This', 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1113 docs/master/helpers.md:1112
#, no-wrap
msgid "    // ' is my '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1115 docs/master/helpers.md:1114
#, no-wrap
msgid "<a name=\"method-camel-case\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1115 docs/master/helpers.md:1114
#, no-wrap
msgid "`Str::camel()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1118 docs/master/helpers.md:1117
msgid "The `Str::camel` method converts the given string to `camelCase`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1122 docs/master/helpers.md:1121
#, no-wrap
msgid "    $converted = Str::camel('foo_bar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1124 docs/8.x/helpers.md:1727
#: docs/master/helpers.md:1123 docs/master/helpers.md:1726
#, no-wrap
msgid "    // fooBar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1126 docs/master/helpers.md:1125
#, no-wrap
msgid "<a name=\"method-str-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1126 docs/master/helpers.md:1125
#, no-wrap
msgid "`Str::contains()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1129 docs/master/helpers.md:1128
msgid "The `Str::contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1133 docs/master/helpers.md:1132
#, no-wrap
msgid "    $contains = Str::contains('This is my name', 'my');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1137 docs/8.x/helpers.md:1740
#: docs/master/helpers.md:1136 docs/master/helpers.md:1739
msgid "You may also pass an array of values to determine if the given string contains any of the values in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1141 docs/master/helpers.md:1140
#, no-wrap
msgid "    $contains = Str::contains('This is my name', ['my', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1145 docs/master/helpers.md:1144
#, no-wrap
msgid "<a name=\"method-str-contains-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1145 docs/master/helpers.md:1144
#, no-wrap
msgid "`Str::containsAll()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1148 docs/master/helpers.md:1147
msgid "The `Str::containsAll` method determines if the given string contains all of the values in a given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1152 docs/master/helpers.md:1151
#, no-wrap
msgid "    $containsAll = Str::containsAll('This is my name', ['my', 'name']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1156 docs/master/helpers.md:1155
#, no-wrap
msgid "<a name=\"method-ends-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1156 docs/master/helpers.md:1155
#, no-wrap
msgid "`Str::endsWith()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1159 docs/master/helpers.md:1158
msgid "The `Str::endsWith` method determines if the given string ends with the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1163 docs/master/helpers.md:1162
#, no-wrap
msgid "    $result = Str::endsWith('This is my name', 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1168 docs/8.x/helpers.md:1789
#: docs/master/helpers.md:1167 docs/master/helpers.md:1788
msgid "You may also pass an array of values to determine if the given string ends with any of the values in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1172 docs/master/helpers.md:1171
#, no-wrap
msgid "    $result = Str::endsWith('This is my name', ['name', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1176 docs/master/helpers.md:1175
#, no-wrap
msgid "    $result = Str::endsWith('This is my name', ['this', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1180 docs/master/helpers.md:1179
#, no-wrap
msgid "<a name=\"method-str-finish\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1180 docs/master/helpers.md:1179
#, no-wrap
msgid "`Str::finish()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1183 docs/master/helpers.md:1182
msgid "The `Str::finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1187 docs/master/helpers.md:1186
#, no-wrap
msgid "    $adjusted = Str::finish('this/string', '/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1189 docs/8.x/helpers.md:1193 docs/8.x/helpers.md:1832
#: docs/8.x/helpers.md:1836 docs/master/helpers.md:1188
#: docs/master/helpers.md:1192 docs/master/helpers.md:1831
#: docs/master/helpers.md:1835
#, no-wrap
msgid "    // this/string/\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1191 docs/master/helpers.md:1190
#, no-wrap
msgid "    $adjusted = Str::finish('this/string/', '/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1195 docs/master/helpers.md:1194
#, no-wrap
msgid "<a name=\"method-str-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1195 docs/master/helpers.md:1194
#, no-wrap
msgid "`Str::is()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1198 docs/master/helpers.md:1197
msgid "The `Str::is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1202 docs/master/helpers.md:1201
#, no-wrap
msgid "    $matches = Str::is('foo*', 'foobar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1206 docs/master/helpers.md:1205
#, no-wrap
msgid "    $matches = Str::is('baz*', 'foobar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1210 docs/master/helpers.md:1209
#, no-wrap
msgid "<a name=\"method-str-is-ascii\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1210 docs/master/helpers.md:1209
#, no-wrap
msgid "`Str::isAscii()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1213 docs/master/helpers.md:1212
msgid "The `Str::isAscii` method determines if a given string is 7 bit ASCII:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1217 docs/master/helpers.md:1216
#, no-wrap
msgid "    $isAscii = Str::isAscii('Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1221 docs/master/helpers.md:1220
#, no-wrap
msgid "    $isAscii = Str::isAscii('Ã¼');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1225 docs/master/helpers.md:1224
#, no-wrap
msgid "<a name=\"method-str-is-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1225 docs/master/helpers.md:1224
#, no-wrap
msgid "`Str::isUuid()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1228 docs/master/helpers.md:1227
msgid "The `Str::isUuid` method determines if the given string is a valid UUID:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1232 docs/master/helpers.md:1231
#, no-wrap
msgid "    $isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1236 docs/master/helpers.md:1235
#, no-wrap
msgid "    $isUuid = Str::isUuid('laravel');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1240 docs/master/helpers.md:1239
#, no-wrap
msgid "<a name=\"method-kebab-case\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1240 docs/master/helpers.md:1239
#, no-wrap
msgid "`Str::kebab()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1243 docs/master/helpers.md:1242
msgid "The `Str::kebab` method converts the given string to `kebab-case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1247 docs/master/helpers.md:1246
#, no-wrap
msgid "    $converted = Str::kebab('fooBar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1249 docs/8.x/helpers.md:1908
#: docs/master/helpers.md:1248 docs/master/helpers.md:1907
#, no-wrap
msgid "    // foo-bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1251 docs/master/helpers.md:1250
#, no-wrap
msgid "<a name=\"method-str-length\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1251 docs/master/helpers.md:1250
#, no-wrap
msgid "`Str::length()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1254 docs/master/helpers.md:1253
msgid "The `Str::length` method returns the length of the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1258 docs/master/helpers.md:1257
#, no-wrap
msgid "    $length = Str::length('Laravel');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1260 docs/8.x/helpers.md:1919
#: docs/master/helpers.md:1259 docs/master/helpers.md:1918
#, no-wrap
msgid "    // 7\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1262 docs/master/helpers.md:1261
#, no-wrap
msgid "<a name=\"method-str-limit\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1262 docs/master/helpers.md:1261
#, no-wrap
msgid "`Str::limit()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1265 docs/master/helpers.md:1264
msgid "The `Str::limit` method truncates the given string to the specified length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1269 docs/master/helpers.md:1268
#, no-wrap
msgid "    $truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1271 docs/8.x/helpers.md:1930
#: docs/master/helpers.md:1270 docs/master/helpers.md:1929
#, no-wrap
msgid "    // The quick brown fox...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1273 docs/master/helpers.md:1272
msgid "You may pass a third argument to the method to change the string that will be appended to the end of the truncated string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1277 docs/master/helpers.md:1276
#, no-wrap
msgid "    $truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1279 docs/8.x/helpers.md:1938
#: docs/master/helpers.md:1278 docs/master/helpers.md:1937
#, no-wrap
msgid "    // The quick brown fox (...)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1281 docs/master/helpers.md:1280
#, no-wrap
msgid "<a name=\"method-str-lower\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1281 docs/master/helpers.md:1280
#, no-wrap
msgid "`Str::lower()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1284 docs/master/helpers.md:1283
msgid "The `Str::lower` method converts the given string to lowercase:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1288 docs/master/helpers.md:1287
#, no-wrap
msgid "    $converted = Str::lower('LARAVEL');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1290 docs/master/helpers.md:1289
#, no-wrap
msgid "    // laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1292 docs/master/helpers.md:1291
#, no-wrap
msgid "<a name=\"method-str-markdown\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1292 docs/master/helpers.md:1291
#, no-wrap
msgid "`Str::markdown()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1295 docs/master/helpers.md:1294
msgid "The `Str::markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1299 docs/master/helpers.md:1298
#, no-wrap
msgid "    $html = Str::markdown('# Laravel');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1301 docs/8.x/helpers.md:1975
#: docs/master/helpers.md:1300 docs/master/helpers.md:1974
#, no-wrap
msgid "    // <h1>Laravel</h1>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1305 docs/master/helpers.md:1304
#, no-wrap
msgid "    $html = Str::markdown('# Taylor <b>Otwell</b>', [\n"
"        'html_input' => 'strip',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1307 docs/8.x/helpers.md:1981
#: docs/master/helpers.md:1306 docs/master/helpers.md:1980
#, no-wrap
msgid "    // <h1>Taylor Otwell</h1>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1309 docs/master/helpers.md:1308
#, no-wrap
msgid "<a name=\"method-str-ordered-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1309 docs/master/helpers.md:1308
#, no-wrap
msgid "`Str::orderedUuid()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1312 docs/master/helpers.md:1311
msgid "The `Str::orderedUuid` method generates a \"timestamp first\" UUID that may be efficiently stored in an indexed database column. Each UUID that is generated using this method will be sorted after UUIDs previously generated using the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1316 docs/master/helpers.md:1315
#, no-wrap
msgid "    return (string) Str::orderedUuid();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1318 docs/master/helpers.md:1317
#, no-wrap
msgid "<a name=\"method-str-padboth\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1318 docs/master/helpers.md:1317
#, no-wrap
msgid "`Str::padBoth()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1321 docs/master/helpers.md:1320
msgid "The `Str::padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches a desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1325 docs/master/helpers.md:1324
#, no-wrap
msgid "    $padded = Str::padBoth('James', 10, '_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1327 docs/8.x/helpers.md:2028
#: docs/master/helpers.md:1326 docs/master/helpers.md:2027
#, no-wrap
msgid "    // '__James___'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1329 docs/master/helpers.md:1328
#, no-wrap
msgid "    $padded = Str::padBoth('James', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1331 docs/8.x/helpers.md:2032
#: docs/master/helpers.md:1330 docs/master/helpers.md:2031
#, no-wrap
msgid "    // '  James   '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1333 docs/master/helpers.md:1332
#, no-wrap
msgid "<a name=\"method-str-padleft\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1333 docs/master/helpers.md:1332
#, no-wrap
msgid "`Str::padLeft()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1336 docs/master/helpers.md:1335
msgid "The `Str::padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches a desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1340 docs/master/helpers.md:1339
#, no-wrap
msgid "    $padded = Str::padLeft('James', 10, '-=');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1342 docs/8.x/helpers.md:2043
#: docs/master/helpers.md:1341 docs/master/helpers.md:2042
#, no-wrap
msgid "    // '-=-=-James'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1344 docs/master/helpers.md:1343
#, no-wrap
msgid "    $padded = Str::padLeft('James', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1346 docs/8.x/helpers.md:2047
#: docs/master/helpers.md:1345 docs/master/helpers.md:2046
#, no-wrap
msgid "    // '     James'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1348 docs/master/helpers.md:1347
#, no-wrap
msgid "<a name=\"method-str-padright\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1348 docs/master/helpers.md:1347
#, no-wrap
msgid "`Str::padRight()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1351 docs/master/helpers.md:1350
msgid "The `Str::padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches a desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1355 docs/master/helpers.md:1354
#, no-wrap
msgid "    $padded = Str::padRight('James', 10, '-');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1357 docs/8.x/helpers.md:2058
#: docs/master/helpers.md:1356 docs/master/helpers.md:2057
#, no-wrap
msgid "    // 'James-----'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1359 docs/master/helpers.md:1358
#, no-wrap
msgid "    $padded = Str::padRight('James', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1361 docs/8.x/helpers.md:2062
#: docs/master/helpers.md:1360 docs/master/helpers.md:2061
#, no-wrap
msgid "    // 'James     '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1363 docs/master/helpers.md:1362
#, no-wrap
msgid "<a name=\"method-str-plural\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1363 docs/master/helpers.md:1362
#, no-wrap
msgid "`Str::plural()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1366 docs/master/helpers.md:1365
msgid "The `Str::plural` method converts a singular word string to its plural form. This function currently only supports the English language:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1370 docs/master/helpers.md:1369
#, no-wrap
msgid "    $plural = Str::plural('car');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1372 docs/8.x/helpers.md:2090
#: docs/master/helpers.md:1371 docs/master/helpers.md:2089
#, no-wrap
msgid "    // cars\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1374 docs/master/helpers.md:1373
#, no-wrap
msgid "    $plural = Str::plural('child');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1376 docs/8.x/helpers.md:1384 docs/8.x/helpers.md:2094
#: docs/8.x/helpers.md:2102 docs/master/helpers.md:1375
#: docs/master/helpers.md:1383 docs/master/helpers.md:2093
#: docs/master/helpers.md:2101
#, no-wrap
msgid "    // children\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1378 docs/8.x/helpers.md:1405 docs/8.x/helpers.md:2096
#: docs/master/helpers.md:1377 docs/master/helpers.md:1404
#: docs/master/helpers.md:2095
msgid "You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1382 docs/master/helpers.md:1381
#, no-wrap
msgid "    $plural = Str::plural('child', 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1386 docs/master/helpers.md:1385
#, no-wrap
msgid "    $singular = Str::plural('child', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1388 docs/8.x/helpers.md:1474 docs/8.x/helpers.md:2106
#: docs/8.x/helpers.md:2214 docs/master/helpers.md:1387
#: docs/master/helpers.md:1473 docs/master/helpers.md:2105
#: docs/master/helpers.md:2213
#, no-wrap
msgid "    // child\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1390 docs/master/helpers.md:1389
#, no-wrap
msgid "<a name=\"method-str-plural-studly\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1390 docs/master/helpers.md:1389
#, no-wrap
msgid "`Str::pluralStudly()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1393 docs/master/helpers.md:1392
msgid "The `Str::pluralStudly` method converts a singular word string formatted in studly caps case to its plural form. This function currently only supports the English language:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1397 docs/master/helpers.md:1396
#, no-wrap
msgid "    $plural = Str::pluralStudly('VerifiedHuman');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1399 docs/8.x/helpers.md:1411
#: docs/master/helpers.md:1398 docs/master/helpers.md:1410
#, no-wrap
msgid "    // VerifiedHumans\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1401 docs/master/helpers.md:1400
#, no-wrap
msgid "    $plural = Str::pluralStudly('UserFeedback');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1403 docs/master/helpers.md:1402
#, no-wrap
msgid "    // UserFeedback\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1409 docs/master/helpers.md:1408
#, no-wrap
msgid "    $plural = Str::pluralStudly('VerifiedHuman', 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1413 docs/master/helpers.md:1412
#, no-wrap
msgid "    $singular = Str::pluralStudly('VerifiedHuman', 1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1415 docs/master/helpers.md:1414
#, no-wrap
msgid "    // VerifiedHuman\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1417 docs/master/helpers.md:1416
#, no-wrap
msgid "<a name=\"method-str-random\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1417 docs/master/helpers.md:1416
#, no-wrap
msgid "`Str::random()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1420 docs/master/helpers.md:1419
msgid "The `Str::random` method generates a random string of the specified length. This function uses PHP's `random_bytes` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1424 docs/master/helpers.md:1423
#, no-wrap
msgid "    $random = Str::random(40);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1426 docs/master/helpers.md:1425
#, no-wrap
msgid "<a name=\"method-str-replace-array\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1426 docs/master/helpers.md:1425
#, no-wrap
msgid "`Str::replaceArray()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1429 docs/master/helpers.md:1428
msgid "The `Str::replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1433 docs/8.x/helpers.md:2137
#: docs/master/helpers.md:1432 docs/master/helpers.md:2136
#, no-wrap
msgid "    $string = 'The event will take place between ? and ?';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1435 docs/master/helpers.md:1434
#, no-wrap
msgid "    $replaced = Str::replaceArray('?', ['8:30', '9:00'], $string);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1439 docs/master/helpers.md:1438
#, no-wrap
msgid "<a name=\"method-str-replace-first\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1439 docs/master/helpers.md:1438
#, no-wrap
msgid "`Str::replaceFirst()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1442 docs/master/helpers.md:1441
msgid "The `Str::replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1446 docs/master/helpers.md:1445
#, no-wrap
msgid "    $replaced = Str::replaceFirst('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1448 docs/8.x/helpers.md:2152
#: docs/master/helpers.md:1447 docs/master/helpers.md:2151
#, no-wrap
msgid "    // a quick brown fox jumps over the lazy dog\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1450 docs/master/helpers.md:1449
#, no-wrap
msgid "<a name=\"method-str-replace-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1450 docs/master/helpers.md:1449
#, no-wrap
msgid "`Str::replaceLast()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1453 docs/master/helpers.md:1452
msgid "The `Str::replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1457 docs/master/helpers.md:1456
#, no-wrap
msgid "    $replaced = Str::replaceLast('the', 'a', 'the quick brown fox jumps over the lazy dog');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1459 docs/8.x/helpers.md:2163
#: docs/master/helpers.md:1458 docs/master/helpers.md:2162
#, no-wrap
msgid "    // the quick brown fox jumps over a lazy dog\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1461 docs/master/helpers.md:1460
#, no-wrap
msgid "<a name=\"method-str-singular\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1461 docs/master/helpers.md:1460
#, no-wrap
msgid "`Str::singular()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1464 docs/master/helpers.md:1463
msgid "The `Str::singular` method converts a string to its singular form. This function currently only supports the English language:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1468 docs/master/helpers.md:1467
#, no-wrap
msgid "    $singular = Str::singular('cars');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1470 docs/8.x/helpers.md:2210
#: docs/master/helpers.md:1469 docs/master/helpers.md:2209
#, no-wrap
msgid "    // car\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1472 docs/master/helpers.md:1471
#, no-wrap
msgid "    $singular = Str::singular('children');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1476 docs/master/helpers.md:1475
#, no-wrap
msgid "<a name=\"method-str-slug\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1476 docs/master/helpers.md:1475
#, no-wrap
msgid "`Str::slug()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1479 docs/master/helpers.md:1478
msgid "The `Str::slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1483 docs/master/helpers.md:1482
#, no-wrap
msgid "    $slug = Str::slug('Laravel 5 Framework', '-');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1485 docs/master/helpers.md:1484
#, no-wrap
msgid "    // laravel-5-framework\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1487 docs/master/helpers.md:1486
#, no-wrap
msgid "<a name=\"method-snake-case\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1487 docs/master/helpers.md:1486
#, no-wrap
msgid "`Str::snake()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1490 docs/master/helpers.md:1489
msgid "The `Str::snake` method converts the given string to `snake_case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1494 docs/master/helpers.md:1493
#, no-wrap
msgid "    $converted = Str::snake('fooBar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1496 docs/8.x/helpers.md:2236
#: docs/master/helpers.md:1495 docs/master/helpers.md:2235
#, no-wrap
msgid "    // foo_bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1498 docs/master/helpers.md:1497
#, no-wrap
msgid "<a name=\"method-str-start\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1498 docs/master/helpers.md:1497
#, no-wrap
msgid "`Str::start()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1501 docs/master/helpers.md:1500
msgid "The `Str::start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1505 docs/master/helpers.md:1504
#, no-wrap
msgid "    $adjusted = Str::start('this/string', '/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1507 docs/8.x/helpers.md:1511 docs/8.x/helpers.md:2258
#: docs/8.x/helpers.md:2262 docs/master/helpers.md:1506
#: docs/master/helpers.md:1510 docs/master/helpers.md:2257
#: docs/master/helpers.md:2261
#, no-wrap
msgid "    // /this/string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1509 docs/master/helpers.md:1508
#, no-wrap
msgid "    $adjusted = Str::start('/this/string', '/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1513 docs/master/helpers.md:1512
#, no-wrap
msgid "<a name=\"method-starts-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1513 docs/master/helpers.md:1512
#, no-wrap
msgid "`Str::startsWith()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1516 docs/master/helpers.md:1515
msgid "The `Str::startsWith` method determines if the given string begins with the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1520 docs/master/helpers.md:1519
#, no-wrap
msgid "    $result = Str::startsWith('This is my name', 'This');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1524 docs/master/helpers.md:1523
#, no-wrap
msgid "<a name=\"method-studly-case\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1524 docs/master/helpers.md:1523
#, no-wrap
msgid "`Str::studly()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1527 docs/master/helpers.md:1526
msgid "The `Str::studly` method converts the given string to `StudlyCase`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1531 docs/master/helpers.md:1530
#, no-wrap
msgid "    $converted = Str::studly('foo_bar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1533 docs/8.x/helpers.md:2284
#: docs/master/helpers.md:1532 docs/master/helpers.md:2283
#, no-wrap
msgid "    // FooBar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1535 docs/master/helpers.md:1534
#, no-wrap
msgid "<a name=\"method-str-substr\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1535 docs/master/helpers.md:1534
#, no-wrap
msgid "`Str::substr()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1538 docs/master/helpers.md:1537
msgid "The `Str::substr` method returns the portion of string specified by the start and length parameters:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1542 docs/master/helpers.md:1541
#, no-wrap
msgid "    $converted = Str::substr('The Laravel Framework', 4, 7);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1544 docs/master/helpers.md:1543
#, no-wrap
msgid "    // Laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1546 docs/master/helpers.md:1545
#, no-wrap
msgid "<a name=\"method-str-substrcount\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1546 docs/master/helpers.md:1545
#, no-wrap
msgid "`Str::substrCount()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1549 docs/master/helpers.md:1548
msgid "The `Str::substrCount` method returns the number of occurrences of a given value in the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1553 docs/master/helpers.md:1552
#, no-wrap
msgid "    $count = Str::substrCount('If you like ice cream, you will like snow cones.', 'like');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1557 docs/master/helpers.md:1556
#, no-wrap
msgid "<a name=\"method-title-case\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1557 docs/master/helpers.md:1556
#, no-wrap
msgid "`Str::title()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1560 docs/master/helpers.md:1559
msgid "The `Str::title` method converts the given string to `Title Case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1564 docs/master/helpers.md:1563
#, no-wrap
msgid "    $converted = Str::title('a nice title uses the correct case');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1566 docs/8.x/helpers.md:2337
#: docs/master/helpers.md:1565 docs/master/helpers.md:2325
#, no-wrap
msgid "    // A Nice Title Uses The Correct Case\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1568 docs/master/helpers.md:1567
#, no-wrap
msgid "<a name=\"method-str-ucfirst\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1568 docs/master/helpers.md:1567
#, no-wrap
msgid "`Str::ucfirst()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1571 docs/master/helpers.md:1570
msgid "The `Str::ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1575 docs/master/helpers.md:1574
#, no-wrap
msgid "    $string = Str::ucfirst('foo bar');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1577 docs/8.x/helpers.md:2363
#: docs/master/helpers.md:1576 docs/master/helpers.md:2351
#, no-wrap
msgid "    // Foo bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1579 docs/master/helpers.md:1578
#, no-wrap
msgid "<a name=\"method-str-upper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1579 docs/master/helpers.md:1578
#, no-wrap
msgid "`Str::upper()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1582 docs/master/helpers.md:1581
msgid "The `Str::upper` method converts the given string to uppercase:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1586 docs/master/helpers.md:1585
#, no-wrap
msgid "    $string = Str::upper('laravel');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1588 docs/8.x/helpers.md:2374
#: docs/master/helpers.md:1587 docs/master/helpers.md:2362
#, no-wrap
msgid "    // LARAVEL\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1590 docs/master/helpers.md:1589
#, no-wrap
msgid "<a name=\"method-str-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1590 docs/master/helpers.md:1589
#, no-wrap
msgid "`Str::uuid()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1593 docs/master/helpers.md:1592
msgid "The `Str::uuid` method generates a UUID (version 4):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1597 docs/master/helpers.md:1596
#, no-wrap
msgid "    return (string) Str::uuid();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1599 docs/master/helpers.md:1598
#, no-wrap
msgid "<a name=\"method-str-words\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1599 docs/master/helpers.md:1598
#, no-wrap
msgid "`Str::words()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1602 docs/master/helpers.md:1601
msgid "The `Str::words` method limits the number of words in a string. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1606 docs/master/helpers.md:1605
#, no-wrap
msgid "    return Str::words('Perfectly balanced, as all things should be.', 3, ' >>>');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1608 docs/8.x/helpers.md:2414
#: docs/master/helpers.md:1607 docs/master/helpers.md:2402
#, no-wrap
msgid "    // Perfectly balanced, as >>>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1610 docs/master/helpers.md:1609
#, no-wrap
msgid "<a name=\"method-trans\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1610 docs/master/helpers.md:1609
#, no-wrap
msgid "`trans()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1613 docs/master/helpers.md:1612
msgid "The `trans` function translates the given translation key using your [localization files](/docs/{{version}}/localization):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1615 docs/master/helpers.md:1614
#, no-wrap
msgid "    echo trans('messages.welcome');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1617 docs/master/helpers.md:1616
msgid "If the specified translation key does not exist, the `trans` function will return the given key. So, using the example above, the `trans` function would return `messages.welcome` if the translation key does not exist."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1619 docs/master/helpers.md:1618
#, no-wrap
msgid "<a name=\"method-trans-choice\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1619 docs/master/helpers.md:1618
#, no-wrap
msgid "`trans_choice()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1622 docs/master/helpers.md:1621
msgid "The `trans_choice` function translates the given translation key with inflection:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1624 docs/master/helpers.md:1623
#, no-wrap
msgid "    echo trans_choice('messages.notifications', $unreadCount);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1626 docs/master/helpers.md:1625
msgid "If the specified translation key does not exist, the `trans_choice` function will return the given key. So, using the example above, the `trans_choice` function would return `messages.notifications` if the translation key does not exist."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1628 docs/master/helpers.md:1627
#, no-wrap
msgid "<a name=\"fluent-strings\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1631 docs/master/helpers.md:1630
msgid "Fluent strings provide a more fluent, object-oriented interface for working with string values, allowing you to chain multiple string operations together using a more readable syntax compared to traditional string operations."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1633 docs/master/helpers.md:1632
#, no-wrap
msgid "<a name=\"method-fluent-str-after\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1633 docs/master/helpers.md:1632
#, no-wrap
msgid "`after` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1636 docs/master/helpers.md:1635
msgid "The `after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1640 docs/master/helpers.md:1639
#, no-wrap
msgid "    $slice = Str::of('This is my name')->after('This is');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1644 docs/master/helpers.md:1643
#, no-wrap
msgid "<a name=\"method-fluent-str-after-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1644 docs/master/helpers.md:1643
#, no-wrap
msgid "`afterLast` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1647 docs/master/helpers.md:1646
msgid "The `afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1651 docs/master/helpers.md:1650
#, no-wrap
msgid "    $slice = Str::of('App\\Http\\Controllers\\Controller')->afterLast('\\\\');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1655 docs/master/helpers.md:1654
#, no-wrap
msgid "<a name=\"method-fluent-str-append\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1655 docs/master/helpers.md:1654
#, no-wrap
msgid "`append` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1658 docs/master/helpers.md:1657
msgid "The `append` method appends the given values to the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1662 docs/master/helpers.md:1661
#, no-wrap
msgid "    $string = Str::of('Taylor')->append(' Otwell');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1664 docs/8.x/helpers.md:2388
#: docs/master/helpers.md:1663 docs/master/helpers.md:2376
#, no-wrap
msgid "    // 'Taylor Otwell'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1666 docs/master/helpers.md:1665
#, no-wrap
msgid "<a name=\"method-fluent-str-ascii\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1666 docs/master/helpers.md:1665
#, no-wrap
msgid "`ascii` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1669 docs/master/helpers.md:1668
msgid "The `ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1673 docs/master/helpers.md:1672
#, no-wrap
msgid "    $string = Str::of('Ã¼')->ascii();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1677 docs/master/helpers.md:1676
#, no-wrap
msgid "<a name=\"method-fluent-str-basename\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1677 docs/master/helpers.md:1676
#, no-wrap
msgid "`basename` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1680 docs/master/helpers.md:1679
msgid "The `basename` method will return the trailing name component of the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1684 docs/master/helpers.md:1683
#, no-wrap
msgid "    $string = Str::of('/foo/bar/baz')->basename();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1686 docs/8.x/helpers.md:1694
#: docs/master/helpers.md:1685 docs/master/helpers.md:1693
#, no-wrap
msgid "    // 'baz'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1688 docs/master/helpers.md:1687
msgid "If needed, you may provide an \"extension\" that will be removed from the trailing component:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1692 docs/master/helpers.md:1691
#, no-wrap
msgid "    $string = Str::of('/foo/bar/baz.jpg')->basename('.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1696 docs/master/helpers.md:1695
#, no-wrap
msgid "<a name=\"method-fluent-str-before\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1696 docs/master/helpers.md:1695
#, no-wrap
msgid "`before` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1699 docs/master/helpers.md:1698
msgid "The `before` method returns everything before the given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1703 docs/master/helpers.md:1702
#, no-wrap
msgid "    $slice = Str::of('This is my name')->before('my name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1707 docs/master/helpers.md:1706
#, no-wrap
msgid "<a name=\"method-fluent-str-before-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1707 docs/master/helpers.md:1706
#, no-wrap
msgid "`beforeLast` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1710 docs/master/helpers.md:1709
msgid "The `beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1714 docs/master/helpers.md:1713
#, no-wrap
msgid "    $slice = Str::of('This is my name')->beforeLast('is');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1718 docs/master/helpers.md:1717
#, no-wrap
msgid "<a name=\"method-fluent-str-camel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1718 docs/master/helpers.md:1717
#, no-wrap
msgid "`camel` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1721 docs/master/helpers.md:1720
msgid "The `camel` method converts the given string to `camelCase`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1725 docs/master/helpers.md:1724
#, no-wrap
msgid "    $converted = Str::of('foo_bar')->camel();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1729 docs/master/helpers.md:1728
#, no-wrap
msgid "<a name=\"method-fluent-str-contains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1729 docs/master/helpers.md:1728
#, no-wrap
msgid "`contains` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1732 docs/master/helpers.md:1731
msgid "The `contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1736 docs/master/helpers.md:1735
#, no-wrap
msgid "    $contains = Str::of('This is my name')->contains('my');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1744 docs/master/helpers.md:1743
#, no-wrap
msgid "    $contains = Str::of('This is my name')->contains(['my', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1748 docs/master/helpers.md:1747
#, no-wrap
msgid "<a name=\"method-fluent-str-contains-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1748 docs/master/helpers.md:1747
#, no-wrap
msgid "`containsAll` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1751 docs/master/helpers.md:1750
msgid "The `containsAll` method determines if the given string contains all of the values in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1755 docs/master/helpers.md:1754
#, no-wrap
msgid "    $containsAll = Str::of('This is my name')->containsAll(['my', 'name']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1759 docs/master/helpers.md:1758
#, no-wrap
msgid "<a name=\"method-fluent-str-dirname\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1759 docs/master/helpers.md:1758
#, no-wrap
msgid "`dirname` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1762 docs/master/helpers.md:1761
msgid "The `dirname` method returns the parent directory portion of the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1766 docs/master/helpers.md:1765
#, no-wrap
msgid "    $string = Str::of('/foo/bar/baz')->dirname();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1768 docs/master/helpers.md:1767
#, no-wrap
msgid "    // '/foo/bar'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1770 docs/master/helpers.md:1769
msgid "If necessary, you may specify how many directory levels you wish to trim from the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1774 docs/master/helpers.md:1773
#, no-wrap
msgid "    $string = Str::of('/foo/bar/baz')->dirname(2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1776 docs/master/helpers.md:1775
#, no-wrap
msgid "    // '/foo'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1778 docs/master/helpers.md:1777
#, no-wrap
msgid "<a name=\"method-fluent-str-ends-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1778 docs/master/helpers.md:1777
#, no-wrap
msgid "`endsWith` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1781 docs/master/helpers.md:1780
msgid "The `endsWith` method determines if the given string ends with the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1785 docs/master/helpers.md:1784
#, no-wrap
msgid "    $result = Str::of('This is my name')->endsWith('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1793 docs/master/helpers.md:1792
#, no-wrap
msgid "    $result = Str::of('This is my name')->endsWith(['name', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1797 docs/master/helpers.md:1796
#, no-wrap
msgid "    $result = Str::of('This is my name')->endsWith(['this', 'foo']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1801 docs/master/helpers.md:1800
#, no-wrap
msgid "<a name=\"method-fluent-str-exactly\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1801 docs/master/helpers.md:1800
#, no-wrap
msgid "`exactly` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1804 docs/master/helpers.md:1803
msgid "The `exactly` method determines if the given string is an exact match with another string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1808 docs/master/helpers.md:1807
#, no-wrap
msgid "    $result = Str::of('Laravel')->exactly('Laravel');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1812 docs/master/helpers.md:1811
#, no-wrap
msgid "<a name=\"method-fluent-str-explode\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1812 docs/master/helpers.md:1811
#, no-wrap
msgid "`explode` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1815 docs/master/helpers.md:1814
msgid "The `explode` method splits the string by the given delimiter and returns a collection containing each section of the split string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1819 docs/master/helpers.md:1818
#, no-wrap
msgid "    $collection = Str::of('foo bar baz')->explode(' ');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1821 docs/master/helpers.md:1820
#, no-wrap
msgid "    // collect(['foo', 'bar', 'baz'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1823 docs/master/helpers.md:1822
#, no-wrap
msgid "<a name=\"method-fluent-str-finish\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1823 docs/master/helpers.md:1822
#, no-wrap
msgid "`finish` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1826 docs/master/helpers.md:1825
msgid "The `finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1830 docs/master/helpers.md:1829
#, no-wrap
msgid "    $adjusted = Str::of('this/string')->finish('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1834 docs/master/helpers.md:1833
#, no-wrap
msgid "    $adjusted = Str::of('this/string/')->finish('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1838 docs/master/helpers.md:1837
#, no-wrap
msgid "<a name=\"method-fluent-str-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1838 docs/master/helpers.md:1837
#, no-wrap
msgid "`is` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1841 docs/master/helpers.md:1840
msgid "The `is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1845 docs/master/helpers.md:1844
#, no-wrap
msgid "    $matches = Str::of('foobar')->is('foo*');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1849 docs/master/helpers.md:1848
#, no-wrap
msgid "    $matches = Str::of('foobar')->is('baz*');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1853 docs/master/helpers.md:1852
#, no-wrap
msgid "<a name=\"method-fluent-str-is-ascii\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1853 docs/master/helpers.md:1852
#, no-wrap
msgid "`isAscii` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1856 docs/master/helpers.md:1855
msgid "The `isAscii` method determines if a given string is an ASCII string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1860 docs/master/helpers.md:1859
#, no-wrap
msgid "    $result = Str::of('Taylor')->isAscii();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1864 docs/master/helpers.md:1863
#, no-wrap
msgid "    $result = Str::of('Ã¼')->isAscii();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1868 docs/master/helpers.md:1867
#, no-wrap
msgid "<a name=\"method-fluent-str-is-empty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1868 docs/master/helpers.md:1867
#, no-wrap
msgid "`isEmpty` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1871 docs/master/helpers.md:1870
msgid "The `isEmpty` method determines if the given string is empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1875 docs/master/helpers.md:1874
#, no-wrap
msgid "    $result = Str::of('  ')->trim()->isEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1879 docs/master/helpers.md:1878
#, no-wrap
msgid "    $result = Str::of('Laravel')->trim()->isEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1883 docs/master/helpers.md:1882
#, no-wrap
msgid "<a name=\"method-fluent-str-is-not-empty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1883 docs/master/helpers.md:1882
#, no-wrap
msgid "`isNotEmpty` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1886 docs/master/helpers.md:1885
msgid "The `isNotEmpty` method determines if the given string is not empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1891 docs/master/helpers.md:1890
#, no-wrap
msgid "    $result = Str::of('  ')->trim()->isNotEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1895 docs/master/helpers.md:1894
#, no-wrap
msgid "    $result = Str::of('Laravel')->trim()->isNotEmpty();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1899 docs/master/helpers.md:1898
#, no-wrap
msgid "<a name=\"method-fluent-str-kebab\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1899 docs/master/helpers.md:1898
#, no-wrap
msgid "`kebab` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1902 docs/master/helpers.md:1901
msgid "The `kebab` method converts the given string to `kebab-case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1906 docs/master/helpers.md:1905
#, no-wrap
msgid "    $converted = Str::of('fooBar')->kebab();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1910 docs/master/helpers.md:1909
#, no-wrap
msgid "<a name=\"method-fluent-str-length\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1910 docs/master/helpers.md:1909
#, no-wrap
msgid "`length` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1913 docs/master/helpers.md:1912
msgid "The `length` method returns the length of the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1917 docs/master/helpers.md:1916
#, no-wrap
msgid "    $length = Str::of('Laravel')->length();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1921 docs/master/helpers.md:1920
#, no-wrap
msgid "<a name=\"method-fluent-str-limit\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1921 docs/master/helpers.md:1920
#, no-wrap
msgid "`limit` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1924 docs/master/helpers.md:1923
msgid "The `limit` method truncates the given string to the specified length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1928 docs/master/helpers.md:1927
#, no-wrap
msgid "    $truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1932 docs/master/helpers.md:1931
msgid "You may also pass a second argument to change the string that will be appended to the end of the truncated string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1936 docs/master/helpers.md:1935
#, no-wrap
msgid "    $truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1940 docs/master/helpers.md:1939
#, no-wrap
msgid "<a name=\"method-fluent-str-lower\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1940 docs/master/helpers.md:1939
#, no-wrap
msgid "`lower` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1943 docs/master/helpers.md:1942
msgid "The `lower` method converts the given string to lowercase:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1947 docs/master/helpers.md:1946
#, no-wrap
msgid "    $result = Str::of('LARAVEL')->lower();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1949 docs/master/helpers.md:1948
#, no-wrap
msgid "    // 'laravel'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1951 docs/master/helpers.md:1950
#, no-wrap
msgid "<a name=\"method-fluent-str-ltrim\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1951 docs/master/helpers.md:1950
#, no-wrap
msgid "`ltrim` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1954 docs/master/helpers.md:1953
msgid "The `ltrim` method trims the left side of the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1958 docs/master/helpers.md:1957
#, no-wrap
msgid "    $string = Str::of('  Laravel  ')->ltrim();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1960 docs/master/helpers.md:1959
#, no-wrap
msgid "    // 'Laravel  '\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1962 docs/master/helpers.md:1961
#, no-wrap
msgid "    $string = Str::of('/Laravel/')->ltrim('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1964 docs/master/helpers.md:1963
#, no-wrap
msgid "    // 'Laravel/'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1966 docs/master/helpers.md:1965
#, no-wrap
msgid "<a name=\"method-fluent-str-markdown\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1966 docs/master/helpers.md:1965
#, no-wrap
msgid "`markdown` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1969 docs/master/helpers.md:1968
msgid "The `markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1973 docs/master/helpers.md:1972
#, no-wrap
msgid "    $html = Str::of('# Laravel')->markdown();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1979 docs/master/helpers.md:1978
#, no-wrap
msgid "    $html = Str::of('# Taylor <b>Otwell</b>')->markdown([\n"
"        'html_input' => 'strip',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1983 docs/master/helpers.md:1982
#, no-wrap
msgid "<a name=\"method-fluent-str-match\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1983 docs/master/helpers.md:1982
#, no-wrap
msgid "`match` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1986 docs/master/helpers.md:1985
msgid "The `match` method will return the portion of a string that matches a given regular expression pattern:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1990 docs/master/helpers.md:1989
#, no-wrap
msgid "    $result = Str::of('foo bar')->match('/bar/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1992 docs/8.x/helpers.md:1996 docs/8.x/helpers.md:2079
#: docs/master/helpers.md:1991 docs/master/helpers.md:1995
#: docs/master/helpers.md:2078
#, no-wrap
msgid "    // 'bar'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1994 docs/master/helpers.md:1993
#, no-wrap
msgid "    $result = Str::of('foo bar')->match('/foo (.*)/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:1998 docs/master/helpers.md:1997
#, no-wrap
msgid "<a name=\"method-fluent-str-match-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:1998 docs/master/helpers.md:1997
#, no-wrap
msgid "`matchAll` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2001 docs/master/helpers.md:2000
msgid "The `matchAll` method will return a collection containing the portions of a string that match a given regular expression pattern:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2005 docs/master/helpers.md:2004
#, no-wrap
msgid "    $result = Str::of('bar foo bar')->matchAll('/bar/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2007 docs/master/helpers.md:2006
#, no-wrap
msgid "    // collect(['bar', 'bar'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2009 docs/master/helpers.md:2008
msgid "If you specify a matching group within the expression, Laravel will return a collection of that group's matches:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2013 docs/master/helpers.md:2012
#, no-wrap
msgid "    $result = Str::of('bar fun bar fly')->matchAll('/f(\\w*)/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2015 docs/master/helpers.md:2014
#, no-wrap
msgid "    // collect(['un', 'ly']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2017 docs/master/helpers.md:2016
msgid "If no matches are found, an empty collection will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2019 docs/master/helpers.md:2018
#, no-wrap
msgid "<a name=\"method-fluent-str-padboth\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2019 docs/master/helpers.md:2018
#, no-wrap
msgid "`padBoth` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2022 docs/master/helpers.md:2021
msgid "The `padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches the desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2026 docs/master/helpers.md:2025
#, no-wrap
msgid "    $padded = Str::of('James')->padBoth(10, '_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2030 docs/master/helpers.md:2029
#, no-wrap
msgid "    $padded = Str::of('James')->padBoth(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2034 docs/master/helpers.md:2033
#, no-wrap
msgid "<a name=\"method-fluent-str-padleft\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2034 docs/master/helpers.md:2033
#, no-wrap
msgid "`padLeft` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2037 docs/master/helpers.md:2036
msgid "The `padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches the desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2041 docs/master/helpers.md:2040
#, no-wrap
msgid "    $padded = Str::of('James')->padLeft(10, '-=');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2045 docs/master/helpers.md:2044
#, no-wrap
msgid "    $padded = Str::of('James')->padLeft(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2049 docs/master/helpers.md:2048
#, no-wrap
msgid "<a name=\"method-fluent-str-padright\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2049 docs/master/helpers.md:2048
#, no-wrap
msgid "`padRight` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2052 docs/master/helpers.md:2051
msgid "The `padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches the desired length:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2056 docs/master/helpers.md:2055
#, no-wrap
msgid "    $padded = Str::of('James')->padRight(10, '-');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2060 docs/master/helpers.md:2059
#, no-wrap
msgid "    $padded = Str::of('James')->padRight(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2064 docs/master/helpers.md:2063
#, no-wrap
msgid "<a name=\"method-fluent-str-pipe\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2064 docs/master/helpers.md:2063
#, no-wrap
msgid "`pipe` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2067 docs/master/helpers.md:2066
msgid "The `pipe` method allows you to transform the string by passing its current value to the given callable:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2071 docs/master/helpers.md:2070
#, no-wrap
msgid "    $hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2073 docs/master/helpers.md:2072
#, no-wrap
msgid "    // 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2077 docs/master/helpers.md:2076
#, no-wrap
msgid "    $closure = Str::of('foo')->pipe(function ($str) {\n"
"        return 'bar';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2081 docs/master/helpers.md:2080
#, no-wrap
msgid "<a name=\"method-fluent-str-plural\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2081 docs/master/helpers.md:2080
#, no-wrap
msgid "`plural` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2084 docs/master/helpers.md:2083
msgid "The `plural` method converts a singular word string to its plural form. This function currently only supports the English language:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2088 docs/master/helpers.md:2087
#, no-wrap
msgid "    $plural = Str::of('car')->plural();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2092 docs/master/helpers.md:2091
#, no-wrap
msgid "    $plural = Str::of('child')->plural();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2100 docs/master/helpers.md:2099
#, no-wrap
msgid "    $plural = Str::of('child')->plural(2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2104 docs/master/helpers.md:2103
#, no-wrap
msgid "    $plural = Str::of('child')->plural(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2108 docs/master/helpers.md:2107
#, no-wrap
msgid "<a name=\"method-fluent-str-prepend\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2108 docs/master/helpers.md:2107
#, no-wrap
msgid "`prepend` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2111 docs/master/helpers.md:2110
msgid "The `prepend` method prepends the given values onto the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2115 docs/master/helpers.md:2114
#, no-wrap
msgid "    $string = Str::of('Framework')->prepend('Laravel ');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2117 docs/master/helpers.md:2116
#, no-wrap
msgid "    // Laravel Framework\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2119 docs/master/helpers.md:2118
#, no-wrap
msgid "<a name=\"method-fluent-str-replace\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2119 docs/master/helpers.md:2118
#, no-wrap
msgid "`replace` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2122 docs/master/helpers.md:2121
msgid "The `replace` method replaces a given string within the string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2126 docs/master/helpers.md:2125
#, no-wrap
msgid "    $replaced = Str::of('Laravel 6.x')->replace('6.x', '7.x');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2128 docs/master/helpers.md:2127
#, no-wrap
msgid "    // Laravel 7.x\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2130 docs/master/helpers.md:2129
#, no-wrap
msgid "<a name=\"method-fluent-str-replace-array\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2130 docs/master/helpers.md:2129
#, no-wrap
msgid "`replaceArray` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2133 docs/master/helpers.md:2132
msgid "The `replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2139 docs/master/helpers.md:2138
#, no-wrap
msgid "    $replaced = Str::of($string)->replaceArray('?', ['8:30', '9:00']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2143 docs/master/helpers.md:2142
#, no-wrap
msgid "<a name=\"method-fluent-str-replace-first\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2143 docs/master/helpers.md:2142
#, no-wrap
msgid "`replaceFirst` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2146 docs/master/helpers.md:2145
msgid "The `replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2150 docs/master/helpers.md:2149
#, no-wrap
msgid "    $replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceFirst('the', 'a');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2154 docs/master/helpers.md:2153
#, no-wrap
msgid "<a name=\"method-fluent-str-replace-last\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2154 docs/master/helpers.md:2153
#, no-wrap
msgid "`replaceLast` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2157 docs/master/helpers.md:2156
msgid "The `replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2161 docs/master/helpers.md:2160
#, no-wrap
msgid "    $replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceLast('the', 'a');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2165 docs/master/helpers.md:2164
#, no-wrap
msgid "<a name=\"method-fluent-str-replace-matches\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2165 docs/master/helpers.md:2164
#, no-wrap
msgid "`replaceMatches` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2168 docs/master/helpers.md:2167
msgid "The `replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2172 docs/master/helpers.md:2171
#, no-wrap
msgid "    $replaced = Str::of('(+1) 501-555-1000')->replaceMatches('/[^A-Za-z0-9]++/', '')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2174 docs/master/helpers.md:2173
#, no-wrap
msgid "    // '15015551000'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2176 docs/master/helpers.md:2175
msgid "The `replaceMatches` method also accepts a closure that will be invoked with each portion of the string matching the given pattern, allowing you to perform the replacement logic within the closure and return the replaced value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2182 docs/master/helpers.md:2181
#, no-wrap
msgid "    $replaced = Str::of('123')->replaceMatches('/\\d/', function ($match) {\n"
"        return '['.$match[0].']';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2184 docs/master/helpers.md:2183
#, no-wrap
msgid "    // '[1][2][3]'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2186 docs/master/helpers.md:2185
#, no-wrap
msgid "<a name=\"method-fluent-str-rtrim\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2186 docs/master/helpers.md:2185
#, no-wrap
msgid "`rtrim` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2189 docs/master/helpers.md:2188
msgid "The `rtrim` method trims the right side of the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2193 docs/master/helpers.md:2192
#, no-wrap
msgid "    $string = Str::of('  Laravel  ')->rtrim();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2195 docs/master/helpers.md:2194
#, no-wrap
msgid "    // '  Laravel'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2197 docs/master/helpers.md:2196
#, no-wrap
msgid "    $string = Str::of('/Laravel/')->rtrim('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2199 docs/master/helpers.md:2198
#, no-wrap
msgid "    // '/Laravel'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2201 docs/master/helpers.md:2200
#, no-wrap
msgid "<a name=\"method-fluent-str-singular\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2201 docs/master/helpers.md:2200
#, no-wrap
msgid "`singular` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2204 docs/master/helpers.md:2203
msgid "The `singular` method converts a string to its singular form. This function currently only supports the English language:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2208 docs/master/helpers.md:2207
#, no-wrap
msgid "    $singular = Str::of('cars')->singular();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2212 docs/master/helpers.md:2211
#, no-wrap
msgid "    $singular = Str::of('children')->singular();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2216 docs/master/helpers.md:2215
#, no-wrap
msgid "<a name=\"method-fluent-str-slug\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2216 docs/master/helpers.md:2215
#, no-wrap
msgid "`slug` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2219 docs/master/helpers.md:2218
msgid "The `slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2223 docs/master/helpers.md:2222
#, no-wrap
msgid "    $slug = Str::of('Laravel Framework')->slug('-');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2225 docs/master/helpers.md:2224
#, no-wrap
msgid "    // laravel-framework\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2227 docs/master/helpers.md:2226
#, no-wrap
msgid "<a name=\"method-fluent-str-snake\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2227 docs/master/helpers.md:2226
#, no-wrap
msgid "`snake` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2230 docs/master/helpers.md:2229
msgid "The `snake` method converts the given string to `snake_case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2234 docs/master/helpers.md:2233
#, no-wrap
msgid "    $converted = Str::of('fooBar')->snake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2238 docs/master/helpers.md:2237
#, no-wrap
msgid "<a name=\"method-fluent-str-split\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2238 docs/master/helpers.md:2237
#, no-wrap
msgid "`split` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2241 docs/master/helpers.md:2240
msgid "The `split` method splits a string into a collection using a regular expression:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2245 docs/master/helpers.md:2244
#, no-wrap
msgid "    $segments = Str::of('one, two, three')->split('/[\\s,]+/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2247 docs/master/helpers.md:2246
#, no-wrap
msgid "    // collect([\"one\", \"two\", \"three\"])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2249 docs/master/helpers.md:2248
#, no-wrap
msgid "<a name=\"method-fluent-str-start\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2249 docs/master/helpers.md:2248
#, no-wrap
msgid "`start` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2252 docs/master/helpers.md:2251
msgid "The `start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2256 docs/master/helpers.md:2255
#, no-wrap
msgid "    $adjusted = Str::of('this/string')->start('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2260 docs/master/helpers.md:2259
#, no-wrap
msgid "    $adjusted = Str::of('/this/string')->start('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2264 docs/master/helpers.md:2263
#, no-wrap
msgid "<a name=\"method-fluent-str-starts-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2264 docs/master/helpers.md:2263
#, no-wrap
msgid "`startsWith` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2267 docs/master/helpers.md:2266
msgid "The `startsWith` method determines if the given string begins with the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2271 docs/master/helpers.md:2270
#, no-wrap
msgid "    $result = Str::of('This is my name')->startsWith('This');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2275 docs/master/helpers.md:2274
#, no-wrap
msgid "<a name=\"method-fluent-str-studly\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2275 docs/master/helpers.md:2274
#, no-wrap
msgid "`studly` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2278 docs/master/helpers.md:2277
msgid "The `studly` method converts the given string to `StudlyCase`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2282 docs/master/helpers.md:2281
#, no-wrap
msgid "    $converted = Str::of('foo_bar')->studly();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2286 docs/master/helpers.md:2285
#, no-wrap
msgid "<a name=\"method-fluent-str-substr\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2286 docs/master/helpers.md:2285
#, no-wrap
msgid "`substr` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2289 docs/master/helpers.md:2288
msgid "The `substr` method returns the portion of the string specified by the given start and length parameters:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2293 docs/master/helpers.md:2292
#, no-wrap
msgid "    $string = Str::of('Laravel Framework')->substr(8);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2295 docs/master/helpers.md:2294
#, no-wrap
msgid "    // Framework\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2297 docs/master/helpers.md:2296
#, no-wrap
msgid "    $string = Str::of('Laravel Framework')->substr(8, 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2299 docs/master/helpers.md:2298
#, no-wrap
msgid "    // Frame\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2301 docs/master/helpers.md:2300
#, no-wrap
msgid "<a name=\"method-fluent-str-tap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2301 docs/master/helpers.md:2300
#, no-wrap
msgid "`tap` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2304 docs/master/helpers.md:2303
msgid "The `tap` method passes the string to the given closure, allowing you to examine and interact with the string while not affecting the string itself. The original string is returned by the `tap` method regardless of what is returned by the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2313 docs/master/helpers.md:2312
#, no-wrap
msgid "    $string = Str::of('Laravel')\n"
"        ->append(' Framework')\n"
"        ->tap(function ($string) {\n"
"            dump('String after append: ' . $string);\n"
"        })\n"
"        ->upper();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2315 docs/master/helpers.md:2314
#, no-wrap
msgid "    // LARAVEL FRAMEWORK\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2317
#, no-wrap
msgid "<a name=\"method-fluent-str-test\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2317
#, no-wrap
msgid "`test` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2320
msgid "The `test` method determines if a string matches the given regular expression pattern:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2324
#, no-wrap
msgid "    $result = Str::of('Laravel Framework')->test('/Laravel/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2328 docs/master/helpers.md:2316
#, no-wrap
msgid "<a name=\"method-fluent-str-title\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2328 docs/master/helpers.md:2316
#, no-wrap
msgid "`title` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2331 docs/master/helpers.md:2319
msgid "The `title` method converts the given string to `Title Case`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2335 docs/master/helpers.md:2323
#, no-wrap
msgid "    $converted = Str::of('a nice title uses the correct case')->title();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2339 docs/master/helpers.md:2327
#, no-wrap
msgid "<a name=\"method-fluent-str-trim\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2339 docs/master/helpers.md:2327
#, no-wrap
msgid "`trim` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2342 docs/master/helpers.md:2330
msgid "The `trim` method trims the given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2346 docs/master/helpers.md:2334
#, no-wrap
msgid "    $string = Str::of('  Laravel  ')->trim();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2348 docs/8.x/helpers.md:2352 docs/8.x/helpers.md:2403
#: docs/master/helpers.md:2336 docs/master/helpers.md:2340
#: docs/master/helpers.md:2391
#, no-wrap
msgid "    // 'Laravel'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2350 docs/master/helpers.md:2338
#, no-wrap
msgid "    $string = Str::of('/Laravel/')->trim('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2354 docs/master/helpers.md:2342
#, no-wrap
msgid "<a name=\"method-fluent-str-ucfirst\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2354 docs/master/helpers.md:2342
#, no-wrap
msgid "`ucfirst` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2357 docs/master/helpers.md:2345
msgid "The `ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2361 docs/master/helpers.md:2349
#, no-wrap
msgid "    $string = Str::of('foo bar')->ucfirst();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2365 docs/master/helpers.md:2353
#, no-wrap
msgid "<a name=\"method-fluent-str-upper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2365 docs/master/helpers.md:2353
#, no-wrap
msgid "`upper` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2368 docs/master/helpers.md:2356
msgid "The `upper` method converts the given string to uppercase:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2372 docs/master/helpers.md:2360
#, no-wrap
msgid "    $adjusted = Str::of('laravel')->upper();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2376 docs/master/helpers.md:2364
#, no-wrap
msgid "<a name=\"method-fluent-str-when\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2376 docs/master/helpers.md:2364
#, no-wrap
msgid "`when` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2379 docs/master/helpers.md:2367
msgid "The `when` method invokes the given closure if a given condition is `true`. The closure will receive the fluent string instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2386 docs/master/helpers.md:2374
#, no-wrap
msgid "    $string = Str::of('Taylor')\n"
"                    ->when(true, function ($string) {\n"
"                        return $string->append(' Otwell');\n"
"                    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2390 docs/master/helpers.md:2378
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the condition parameter evaluates to `false`."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2392 docs/master/helpers.md:2380
#, no-wrap
msgid "<a name=\"method-fluent-str-when-empty\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2392 docs/master/helpers.md:2380
#, no-wrap
msgid "`whenEmpty` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2395 docs/master/helpers.md:2383
msgid "The `whenEmpty` method invokes the given closure if the string is empty. If the closure returns a value, that value will also be returned by the `whenEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2401 docs/master/helpers.md:2389
#, no-wrap
msgid "    $string = Str::of('  ')->whenEmpty(function ($string) {\n"
"        return $string->trim()->prepend('Laravel');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2405 docs/master/helpers.md:2393
#, no-wrap
msgid "<a name=\"method-fluent-str-words\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2405 docs/master/helpers.md:2393
#, no-wrap
msgid "`words` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2408 docs/master/helpers.md:2396
msgid "The `words` method limits the number of words in a string. If necessary, you may specify an additional string that will be appended to the truncated string:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2412 docs/master/helpers.md:2400
#, no-wrap
msgid "    $string = Str::of('Perfectly balanced, as all things should be.')->words(3, ' >>>');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2416 docs/master/helpers.md:2404
#, no-wrap
msgid "<a name=\"urls\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2419 docs/master/helpers.md:2407
#, no-wrap
msgid "<a name=\"method-action\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2419 docs/master/helpers.md:2407
#, no-wrap
msgid "`action()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2422 docs/8.x/urls.md:146 docs/master/helpers.md:2410
#: docs/master/urls.md:146
msgid "The `action` function generates a URL for the given controller action:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2424 docs/8.x/redirects.md:65 docs/8.x/urls.md:148
#: docs/master/helpers.md:2412 docs/master/redirects.md:65
#: docs/master/urls.md:148
#, no-wrap
msgid "    use App\\Http\\Controllers\\HomeController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2426 docs/8.x/urls.md:150 docs/master/helpers.md:2414
#: docs/master/urls.md:150
#, no-wrap
msgid "    $url = action([HomeController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2428 docs/master/helpers.md:2416
msgid "If the method accepts route parameters, you may pass them as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2430 docs/8.x/urls.md:154 docs/master/helpers.md:2418
#: docs/master/urls.md:154
#, no-wrap
msgid "    $url = action([UserController::class, 'profile'], ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2432 docs/master/helpers.md:2420
#, no-wrap
msgid "<a name=\"method-asset\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2432 docs/master/helpers.md:2420
#, no-wrap
msgid "`asset()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2435 docs/master/helpers.md:2423
msgid "The `asset` function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2437 docs/master/helpers.md:2425
#, no-wrap
msgid "    $url = asset('img/photo.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2439 docs/master/helpers.md:2427
msgid "You can configure the asset URL host by setting the `ASSET_URL` variable in your `.env` file. This can be useful if you host your assets on an external service like Amazon S3 or another CDN:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2441 docs/master/helpers.md:2429
#, no-wrap
msgid "    // ASSET_URL=http://example.com/assets\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2443 docs/master/helpers.md:2431
#, no-wrap
msgid "    $url = asset('img/photo.jpg'); // http://example.com/assets/img/photo.jpg\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2445 docs/master/helpers.md:2433
#, no-wrap
msgid "<a name=\"method-route\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2445 docs/master/helpers.md:2433
#, no-wrap
msgid "`route()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2448 docs/master/helpers.md:2436
msgid "The `route` function generates a URL for a given [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2450 docs/master/helpers.md:2438
#, no-wrap
msgid "    $url = route('route.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2452 docs/master/helpers.md:2440
msgid "If the route accepts parameters, you may pass them as the second argument to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2454 docs/master/helpers.md:2442
#, no-wrap
msgid "    $url = route('route.name', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2456 docs/master/helpers.md:2444
msgid "By default, the `route` function generates an absolute URL. If you wish to generate a relative URL, you may pass `false` as the third argument to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2458 docs/master/helpers.md:2446
#, no-wrap
msgid "    $url = route('route.name', ['id' => 1], false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2460 docs/master/helpers.md:2448
#, no-wrap
msgid "<a name=\"method-secure-asset\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2460 docs/master/helpers.md:2448
#, no-wrap
msgid "`secure_asset()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2463 docs/master/helpers.md:2451
msgid "The `secure_asset` function generates a URL for an asset using HTTPS:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2465 docs/master/helpers.md:2453
#, no-wrap
msgid "    $url = secure_asset('img/photo.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2467 docs/master/helpers.md:2455
#, no-wrap
msgid "<a name=\"method-secure-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2467 docs/master/helpers.md:2455
#, no-wrap
msgid "`secure_url()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2470 docs/master/helpers.md:2458
msgid "The `secure_url` function generates a fully qualified HTTPS URL to the given path. Additional URL segments may be passed in the function's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2472 docs/master/helpers.md:2460
#, no-wrap
msgid "    $url = secure_url('user/profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2474 docs/master/helpers.md:2462
#, no-wrap
msgid "    $url = secure_url('user/profile', [1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2476 docs/master/helpers.md:2464
#, no-wrap
msgid "<a name=\"method-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2476 docs/master/helpers.md:2464
#, no-wrap
msgid "`url()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2479 docs/master/helpers.md:2467
msgid "The `url` function generates a fully qualified URL to the given path:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2481 docs/master/helpers.md:2469
#, no-wrap
msgid "    $url = url('user/profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2483 docs/master/helpers.md:2471
#, no-wrap
msgid "    $url = url('user/profile', [1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2485 docs/master/helpers.md:2473
msgid "If no path is provided, an `Illuminate\\Routing\\UrlGenerator` instance is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2487 docs/master/helpers.md:2475
#, no-wrap
msgid "    $current = url()->current();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2489 docs/master/helpers.md:2477
#, no-wrap
msgid "    $full = url()->full();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2491 docs/master/helpers.md:2479
#, no-wrap
msgid "    $previous = url()->previous();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2493 docs/8.x/upgrade.md:435 docs/master/helpers.md:2481
#: docs/master/upgrade.md:435
#, no-wrap
msgid "<a name=\"miscellaneous\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2496 docs/master/helpers.md:2484
#, no-wrap
msgid "<a name=\"method-abort\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2496 docs/master/helpers.md:2484
#, no-wrap
msgid "`abort()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2499 docs/master/helpers.md:2487
msgid "The `abort` function throws [an HTTP exception](/docs/{{version}}/errors#http-exceptions) which will be rendered by the [exception handler](/docs/{{version}}/errors#the-exception-handler):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2501 docs/master/helpers.md:2489
#, no-wrap
msgid "    abort(403);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2503 docs/master/helpers.md:2491
msgid "You may also provide the exception's message and custom HTTP response headers that should be sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2505 docs/master/helpers.md:2493
#, no-wrap
msgid "    abort(403, 'Unauthorized.', $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2507 docs/master/helpers.md:2495
#, no-wrap
msgid "<a name=\"method-abort-if\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2507 docs/master/helpers.md:2495
#, no-wrap
msgid "`abort_if()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2510 docs/master/helpers.md:2498
msgid "The `abort_if` function throws an HTTP exception if a given boolean expression evaluates to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2512 docs/master/helpers.md:2500
#, no-wrap
msgid "    abort_if(! Auth::user()->isAdmin(), 403);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2514 docs/8.x/helpers.md:2523
#: docs/master/helpers.md:2502 docs/master/helpers.md:2511
msgid "Like the `abort` method, you may also provide the exception's response text as the third argument and an array of custom response headers as the fourth argument to the function."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2516 docs/master/helpers.md:2504
#, no-wrap
msgid "<a name=\"method-abort-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2516 docs/master/helpers.md:2504
#, no-wrap
msgid "`abort_unless()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2519 docs/master/helpers.md:2507
msgid "The `abort_unless` function throws an HTTP exception if a given boolean expression evaluates to `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2521 docs/master/helpers.md:2509
#, no-wrap
msgid "    abort_unless(Auth::user()->isAdmin(), 403);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2525 docs/master/helpers.md:2513
#, no-wrap
msgid "<a name=\"method-app\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2525 docs/master/helpers.md:2513
#, no-wrap
msgid "`app()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2528 docs/master/helpers.md:2516
msgid "The `app` function returns the [service container](/docs/{{version}}/container) instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2530 docs/master/helpers.md:2518
#, no-wrap
msgid "    $container = app();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2532 docs/master/helpers.md:2520
msgid "You may pass a class or interface name to resolve it from the container:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2534 docs/master/helpers.md:2522
#, no-wrap
msgid "    $api = app('HelpSpot\\API');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2536 docs/master/helpers.md:2524
#, no-wrap
msgid "<a name=\"method-auth\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2536 docs/master/helpers.md:2524
#, no-wrap
msgid "`auth()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2539 docs/master/helpers.md:2527
msgid "The `auth` function returns an [authenticator](/docs/{{version}}/authentication) instance. You may use it as an alternative to the `Auth` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2541 docs/master/helpers.md:2529
#, no-wrap
msgid "    $user = auth()->user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2543 docs/master/helpers.md:2531
msgid "If needed, you may specify which guard instance you would like to access:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2545 docs/master/helpers.md:2533
#, no-wrap
msgid "    $user = auth('admin')->user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2547 docs/master/helpers.md:2535
#, no-wrap
msgid "<a name=\"method-back\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2547 docs/master/helpers.md:2535
#, no-wrap
msgid "`back()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2550 docs/master/helpers.md:2538
msgid "The `back` function generates a [redirect HTTP response](/docs/{{version}}/responses#redirects) to the user's previous location:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2552 docs/master/helpers.md:2540
#, no-wrap
msgid "    return back($status = 302, $headers = [], $fallback = '/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2554 docs/master/helpers.md:2542
#, no-wrap
msgid "    return back();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2556 docs/master/helpers.md:2544
#, no-wrap
msgid "<a name=\"method-bcrypt\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2556 docs/master/helpers.md:2544
#, no-wrap
msgid "`bcrypt()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2559 docs/master/helpers.md:2547
msgid "The `bcrypt` function [hashes](/docs/{{version}}/hashing) the given value using Bcrypt. You may use this function as an alternative to the `Hash` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2561 docs/master/helpers.md:2549
#, no-wrap
msgid "    $password = bcrypt('my-secret-password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2563 docs/master/helpers.md:2551
#, no-wrap
msgid "<a name=\"method-blank\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2563 docs/master/helpers.md:2551
#, no-wrap
msgid "`blank()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2566 docs/master/helpers.md:2554
msgid "The `blank` function determines whether the given value is \"blank\":"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2571 docs/master/helpers.md:2559
#, no-wrap
msgid "    blank('');\n"
"    blank('   ');\n"
"    blank(null);\n"
"    blank(collect());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2577 docs/master/helpers.md:2565
#, no-wrap
msgid "    blank(0);\n"
"    blank(true);\n"
"    blank(false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2581 docs/master/helpers.md:2569
msgid "For the inverse of `blank`, see the [`filled`](#method-filled) method."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2583 docs/master/helpers.md:2571
#, no-wrap
msgid "<a name=\"method-broadcast\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2583 docs/master/helpers.md:2571
#, no-wrap
msgid "`broadcast()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2586 docs/master/helpers.md:2574
msgid "The `broadcast` function [broadcasts](/docs/{{version}}/broadcasting) the given [event](/docs/{{version}}/events) to its listeners:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2588 docs/master/helpers.md:2576
#, no-wrap
msgid "    broadcast(new UserRegistered($user));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2590 docs/master/helpers.md:2578
#, no-wrap
msgid "    broadcast(new UserRegistered($user))->toOthers();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2592 docs/master/helpers.md:2580
#, no-wrap
msgid "<a name=\"method-cache\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2592 docs/master/helpers.md:2580
#, no-wrap
msgid "`cache()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2595 docs/master/helpers.md:2583
msgid "The `cache` function may be used to get values from the [cache](/docs/{{version}}/cache). If the given key does not exist in the cache, an optional default value will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2599 docs/master/helpers.md:2587
#, no-wrap
msgid "    $value = cache('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2601 docs/master/helpers.md:2589
msgid "You may add items to the cache by passing an array of key / value pairs to the function. You should also pass the number of seconds or duration the cached value should be considered valid:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2603 docs/master/helpers.md:2591
#, no-wrap
msgid "    cache(['key' => 'value'], 300);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2605 docs/master/helpers.md:2593
#, no-wrap
msgid "    cache(['key' => 'value'], now()->addSeconds(10));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2607 docs/master/helpers.md:2595
#, no-wrap
msgid "<a name=\"method-class-uses-recursive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2607 docs/master/helpers.md:2595
#, no-wrap
msgid "`class_uses_recursive()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2610 docs/master/helpers.md:2598
msgid "The `class_uses_recursive` function returns all traits used by a class, including traits used by all of its parent classes:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2612 docs/master/helpers.md:2600
#, no-wrap
msgid "    $traits = class_uses_recursive(App\\Models\\User::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2617 docs/master/helpers.md:2605
msgid "The `collect` function creates a [collection](/docs/{{version}}/collections) instance from the given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2619 docs/master/helpers.md:2607
#, no-wrap
msgid "    $collection = collect(['taylor', 'abigail']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2621 docs/master/helpers.md:2609
#, no-wrap
msgid "<a name=\"method-config\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2621 docs/master/helpers.md:2609
#, no-wrap
msgid "`config()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2624 docs/master/helpers.md:2612
msgid "The `config` function gets the value of a [configuration](/docs/{{version}}/configuration) variable. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and the option you wish to access. A default value may be specified and is returned if the configuration option does not exist:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2628 docs/master/helpers.md:2616
#, no-wrap
msgid "    $value = config('app.timezone', $default);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2630 docs/master/helpers.md:2618
msgid "You may set configuration variables at runtime by passing an array of key / value pairs. However, note that this function only affects the configuration value for the current request and does not update your actual configuration values:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2632 docs/master/helpers.md:2620
#, no-wrap
msgid "    config(['app.debug' => true]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2634 docs/master/helpers.md:2622
#, no-wrap
msgid "<a name=\"method-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2634 docs/master/helpers.md:2622
#, no-wrap
msgid "`cookie()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2637 docs/master/helpers.md:2625
msgid "The `cookie` function creates a new [cookie](/docs/{{version}}/requests#cookies) instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2639 docs/8.x/responses.md:123
#: docs/master/helpers.md:2627 docs/master/responses.md:123
#, no-wrap
msgid "    $cookie = cookie('name', 'value', $minutes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2641 docs/master/helpers.md:2629
#, no-wrap
msgid "<a name=\"method-csrf-field\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2641 docs/master/helpers.md:2629
#, no-wrap
msgid "`csrf_field()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2644 docs/master/helpers.md:2632
msgid "The `csrf_field` function generates an HTML `hidden` input field containing the value of the CSRF token. For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2646 docs/master/helpers.md:2634
#, no-wrap
msgid "    {{ csrf_field() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2648 docs/master/helpers.md:2636
#, no-wrap
msgid "<a name=\"method-csrf-token\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2648 docs/master/helpers.md:2636
#, no-wrap
msgid "`csrf_token()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2651 docs/master/helpers.md:2639
msgid "The `csrf_token` function retrieves the value of the current CSRF token:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2653 docs/master/helpers.md:2641
#, no-wrap
msgid "    $token = csrf_token();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2658 docs/master/helpers.md:2646
msgid "The `dd` function dumps the given variables and ends execution of the script:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2660 docs/master/helpers.md:2648
#, no-wrap
msgid "    dd($value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2662 docs/master/helpers.md:2650
#, no-wrap
msgid "    dd($value1, $value2, $value3, ...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2664 docs/master/helpers.md:2652
msgid "If you do not want to halt the execution of your script, use the [`dump`](#method-dump) function instead."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2666 docs/master/helpers.md:2654
#, no-wrap
msgid "<a name=\"method-dispatch\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2666 docs/master/helpers.md:2654
#, no-wrap
msgid "`dispatch()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2669 docs/master/helpers.md:2657
msgid "The `dispatch` function pushes the given [job](/docs/{{version}}/queues#creating-jobs) onto the Laravel [job queue](/docs/{{version}}/queues):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2671 docs/master/helpers.md:2659
#, no-wrap
msgid "    dispatch(new App\\Jobs\\SendEmails);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2673 docs/master/helpers.md:2661
#, no-wrap
msgid "<a name=\"method-dispatch-now\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2673 docs/master/helpers.md:2661
#, no-wrap
msgid "`dispatch_now()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2676 docs/master/helpers.md:2664
msgid "The `dispatch_now` function runs the given [job](/docs/{{version}}/queues#creating-jobs) immediately and returns the value from its `handle` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2678 docs/master/helpers.md:2666
#, no-wrap
msgid "    $result = dispatch_now(new App\\Jobs\\SendEmails);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2683 docs/master/helpers.md:2671
msgid "The `dump` function dumps the given variables:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2685 docs/master/helpers.md:2673
#, no-wrap
msgid "    dump($value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2687 docs/master/helpers.md:2675
#, no-wrap
msgid "    dump($value1, $value2, $value3, ...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2689 docs/master/helpers.md:2677
msgid "If you want to stop executing the script after dumping the variables, use the [`dd`](#method-dd) function instead."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2691 docs/master/helpers.md:2679
#, no-wrap
msgid "<a name=\"method-env\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2691 docs/master/helpers.md:2679
#, no-wrap
msgid "`env()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2694 docs/master/helpers.md:2682
msgid "The `env` function retrieves the value of an [environment variable](/docs/{{version}}/configuration#environment-configuration) or returns a default value:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2696 docs/master/helpers.md:2684
#, no-wrap
msgid "    $env = env('APP_ENV');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2698 docs/master/helpers.md:2686
#, no-wrap
msgid "    $env = env('APP_ENV', 'production');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2700 docs/master/configuration.md:110
#: docs/master/helpers.md:2688
#, no-wrap
msgid "> {note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded and all calls to the `env` function will return `null`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2702 docs/master/helpers.md:2690
#, no-wrap
msgid "<a name=\"method-event\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2702 docs/master/helpers.md:2690
#, no-wrap
msgid "`event()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2705 docs/master/helpers.md:2693
msgid "The `event` function dispatches the given [event](/docs/{{version}}/events) to its listeners:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2707 docs/master/helpers.md:2695
#, no-wrap
msgid "    event(new UserRegistered($user));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2709 docs/master/helpers.md:2697
#, no-wrap
msgid "<a name=\"method-filled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2709 docs/master/helpers.md:2697
#, no-wrap
msgid "`filled()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2712 docs/master/helpers.md:2700
msgid "The `filled` function determines whether the given value is not \"blank\":"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2716 docs/master/helpers.md:2704
#, no-wrap
msgid "    filled(0);\n"
"    filled(true);\n"
"    filled(false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2723 docs/master/helpers.md:2711
#, no-wrap
msgid "    filled('');\n"
"    filled('   ');\n"
"    filled(null);\n"
"    filled(collect());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2727 docs/master/helpers.md:2715
msgid "For the inverse of `filled`, see the [`blank`](#method-blank) method."
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2729 docs/master/helpers.md:2717
#, no-wrap
msgid "<a name=\"method-info\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2729 docs/master/helpers.md:2717
#, no-wrap
msgid "`info()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2732 docs/master/helpers.md:2720
msgid "The `info` function will write information to your application's [log](/docs/{{version}}/logging):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2734 docs/master/helpers.md:2722
#, no-wrap
msgid "    info('Some helpful information!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2736 docs/8.x/helpers.md:2747
#: docs/master/helpers.md:2724 docs/master/helpers.md:2735
msgid "An array of contextual data may also be passed to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2738 docs/master/helpers.md:2726
#, no-wrap
msgid "    info('User login attempt failed.', ['id' => $user->id]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2740 docs/master/helpers.md:2728
#, no-wrap
msgid "<a name=\"method-logger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2740 docs/master/helpers.md:2728
#, no-wrap
msgid "`logger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2743 docs/master/helpers.md:2731
msgid "The `logger` function can be used to write a `debug` level message to the [log](/docs/{{version}}/logging):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2745 docs/master/helpers.md:2733
#, no-wrap
msgid "    logger('Debug message');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2749 docs/master/helpers.md:2737
#, no-wrap
msgid "    logger('User has logged in.', ['id' => $user->id]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2751 docs/master/helpers.md:2739
msgid "A [logger](/docs/{{version}}/errors#logging) instance will be returned if no value is passed to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2753 docs/master/helpers.md:2741
#, no-wrap
msgid "    logger()->error('You are not allowed here.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2755 docs/master/helpers.md:2743
#, no-wrap
msgid "<a name=\"method-method-field\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2755 docs/master/helpers.md:2743
#, no-wrap
msgid "`method_field()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2758 docs/master/helpers.md:2746
msgid "The `method_field` function generates an HTML `hidden` input field containing the spoofed value of the form's HTTP verb. For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2762 docs/master/helpers.md:2750
#, no-wrap
msgid "    <form method=\"POST\">\n"
"        {{ method_field('DELETE') }}\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2764 docs/master/helpers.md:2752
#, no-wrap
msgid "<a name=\"method-now\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2764 docs/master/helpers.md:2752
#, no-wrap
msgid "`now()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2767 docs/master/helpers.md:2755
msgid "The `now` function creates a new `Illuminate\\Support\\Carbon` instance for the current time:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2769 docs/master/helpers.md:2757
#, no-wrap
msgid "    $now = now();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2771 docs/master/helpers.md:2759
#, no-wrap
msgid "<a name=\"method-old\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2771 docs/master/helpers.md:2759
#, no-wrap
msgid "`old()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2774 docs/master/helpers.md:2762
msgid "The `old` function [retrieves](/docs/{{version}}/requests#retrieving-input) an [old input](/docs/{{version}}/requests#old-input) value flashed into the session:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2776 docs/master/helpers.md:2764
#, no-wrap
msgid "    $value = old('value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2778 docs/master/helpers.md:2766
#, no-wrap
msgid "    $value = old('value', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2780 docs/master/helpers.md:2768
#, no-wrap
msgid "<a name=\"method-optional\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2780 docs/master/helpers.md:2768
#, no-wrap
msgid "`optional()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2783 docs/master/helpers.md:2771
msgid "The `optional` function accepts any argument and allows you to access properties or call methods on that object. If the given object is `null`, properties and methods will return `null` instead of causing an error:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2785 docs/master/helpers.md:2773
#, no-wrap
msgid "    return optional($user->address)->street;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2787 docs/master/helpers.md:2775
#, no-wrap
msgid "    {!! old('name', optional($user)->name) !!}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2789 docs/master/helpers.md:2777
msgid "The `optional` function also accepts a closure as its second argument. The closure will be invoked if the value provided as the first argument is not null:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2793 docs/master/helpers.md:2781
#, no-wrap
msgid "    return optional(User::find($id), function ($user) {\n"
"        return $user->name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2795 docs/master/helpers.md:2783
#, no-wrap
msgid "<a name=\"method-policy\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2795 docs/master/helpers.md:2783
#, no-wrap
msgid "`policy()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2798 docs/master/helpers.md:2786
msgid "The `policy` method retrieves a [policy](/docs/{{version}}/authorization#creating-policies) instance for a given class:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2800 docs/master/helpers.md:2788
#, no-wrap
msgid "    $policy = policy(App\\Models\\User::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2802 docs/master/helpers.md:2790
#, no-wrap
msgid "<a name=\"method-redirect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2802 docs/master/helpers.md:2790
#, no-wrap
msgid "`redirect()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2805 docs/master/helpers.md:2793
msgid "The `redirect` function returns a [redirect HTTP response](/docs/{{version}}/responses#redirects), or returns the redirector instance if called with no arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2807 docs/master/helpers.md:2795
#, no-wrap
msgid "    return redirect($to = null, $status = 302, $headers = [], $https = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2809 docs/master/helpers.md:2797
#, no-wrap
msgid "    return redirect('/home');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2811 docs/master/helpers.md:2799
#, no-wrap
msgid "    return redirect()->route('route.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2813 docs/master/helpers.md:2801
#, no-wrap
msgid "<a name=\"method-report\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2813 docs/master/helpers.md:2801
#, no-wrap
msgid "`report()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2816 docs/master/helpers.md:2804
msgid "The `report` function will report an exception using your [exception handler](/docs/{{version}}/errors#the-exception-handler):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2818 docs/master/helpers.md:2806
#, no-wrap
msgid "    report($e);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2820 docs/master/helpers.md:2808
msgid "The `report` function also accepts a string as an argument. When a string is given to the function, the function will create an exception with the given string as its message:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2822 docs/master/helpers.md:2810
#, no-wrap
msgid "    report('Something went wrong.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2824 docs/master/helpers.md:2812
#, no-wrap
msgid "<a name=\"method-request\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2824 docs/master/helpers.md:2812
#, no-wrap
msgid "`request()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2827 docs/master/helpers.md:2815
msgid "The `request` function returns the current [request](/docs/{{version}}/requests) instance or obtains an input field's value from the current request:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2829 docs/master/helpers.md:2817
#, no-wrap
msgid "    $request = request();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2831 docs/master/helpers.md:2819
#, no-wrap
msgid "    $value = request('key', $default);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2833 docs/master/helpers.md:2821
#, no-wrap
msgid "<a name=\"method-rescue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2833 docs/master/helpers.md:2821
#, no-wrap
msgid "`rescue()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2836 docs/master/helpers.md:2824
msgid "The `rescue` function executes the given closure and catches any exceptions that occur during its execution. All exceptions that are caught will be sent to your [exception handler](/docs/{{version}}/errors#the-exception-handler); however, the request will continue processing:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2840 docs/master/helpers.md:2828
#, no-wrap
msgid "    return rescue(function () {\n"
"        return $this->method();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2842 docs/master/helpers.md:2830
msgid "You may also pass a second argument to the `rescue` function. This argument will be the \"default\" value that should be returned if an exception occurs while executing the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2846 docs/master/helpers.md:2834
#, no-wrap
msgid "    return rescue(function () {\n"
"        return $this->method();\n"
"    }, false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2852 docs/master/helpers.md:2840
#, no-wrap
msgid "    return rescue(function () {\n"
"        return $this->method();\n"
"    }, function () {\n"
"        return $this->failure();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2854 docs/master/helpers.md:2842
#, no-wrap
msgid "<a name=\"method-resolve\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2854 docs/master/helpers.md:2842
#, no-wrap
msgid "`resolve()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2857 docs/master/helpers.md:2845
msgid "The `resolve` function resolves a given class or interface name to an instance using the [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2859 docs/master/helpers.md:2847
#, no-wrap
msgid "    $api = resolve('HelpSpot\\API');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2861 docs/master/helpers.md:2849
#, no-wrap
msgid "<a name=\"method-response\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2861 docs/master/helpers.md:2849
#, no-wrap
msgid "`response()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2864 docs/master/helpers.md:2852
msgid "The `response` function creates a [response](/docs/{{version}}/responses) instance or obtains an instance of the response factory:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2866 docs/master/helpers.md:2854
#, no-wrap
msgid "    return response('Hello World', 200, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2868 docs/master/helpers.md:2856
#, no-wrap
msgid "    return response()->json(['foo' => 'bar'], 200, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2870 docs/master/helpers.md:2858
#, no-wrap
msgid "<a name=\"method-retry\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2870 docs/master/helpers.md:2858
#, no-wrap
msgid "`retry()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2873 docs/master/helpers.md:2861
msgid "The `retry` function attempts to execute the given callback until the given maximum attempt threshold is met. If the callback does not throw an exception, its return value will be returned. If the callback throws an exception, it will automatically be retried. If the maximum attempt count is exceeded, the exception will be thrown:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2877 docs/master/helpers.md:2865
#, no-wrap
msgid "    return retry(5, function () {\n"
"        // Attempt 5 times while resting 100ms in between attempts...\n"
"    }, 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2879 docs/master/helpers.md:2867
#, no-wrap
msgid "<a name=\"method-session\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2879 docs/master/helpers.md:2867
#, no-wrap
msgid "`session()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2882 docs/master/helpers.md:2870
msgid "The `session` function may be used to get or set [session](/docs/{{version}}/session) values:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2884 docs/master/helpers.md:2872
#, no-wrap
msgid "    $value = session('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2886 docs/master/helpers.md:2874
msgid "You may set values by passing an array of key / value pairs to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2888 docs/master/helpers.md:2876
#, no-wrap
msgid "    session(['chairs' => 7, 'instruments' => 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2890 docs/master/helpers.md:2878
msgid "The session store will be returned if no value is passed to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2892 docs/master/helpers.md:2880
#, no-wrap
msgid "    $value = session()->get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2894 docs/master/helpers.md:2882
#, no-wrap
msgid "    session()->put('key', $value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2899 docs/master/helpers.md:2887
msgid "The `tap` function accepts two arguments: an arbitrary `$value` and a closure. The `$value` will be passed to the closure and then be returned by the `tap` function. The return value of the closure is irrelevant:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2902 docs/master/helpers.md:2890
#, no-wrap
msgid "    $user = tap(User::first(), function ($user) {\n"
"        $user->name = 'taylor';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2905 docs/master/helpers.md:2893
#, no-wrap
msgid "        $user->save();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2907 docs/master/helpers.md:2895
msgid "If no closure is passed to the `tap` function, you may call any method on the given `$value`. The return value of the method you call will always be `$value`, regardless of what the method actually returns in its definition. For example, the Eloquent `update` method typically returns an integer. However, we can force the method to return the model itself by chaining the `update` method call through the `tap` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2912 docs/master/helpers.md:2900
#, no-wrap
msgid "    $user = tap($user)->update([\n"
"        'name' => $name,\n"
"        'email' => $email,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2914 docs/master/helpers.md:2902
msgid "To add a `tap` method to a class, you may add the `Illuminate\\Support\\Traits\\Tappable` trait to the class. The `tap` method of this trait accepts a Closure as its only argument. The object instance itself will be passed to the Closure and then be returned by the `tap` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2918 docs/master/helpers.md:2906
#, no-wrap
msgid "    return $user->tap(function ($user) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2920 docs/master/helpers.md:2908
#, no-wrap
msgid "<a name=\"method-throw-if\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2920 docs/master/helpers.md:2908
#, no-wrap
msgid "`throw_if()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2923 docs/master/helpers.md:2911
msgid "The `throw_if` function throws the given exception if a given boolean expression evaluates to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2925 docs/master/helpers.md:2913
#, no-wrap
msgid "    throw_if(! Auth::user()->isAdmin(), AuthorizationException::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2931 docs/master/helpers.md:2919
#, no-wrap
msgid "    throw_if(\n"
"        ! Auth::user()->isAdmin(),\n"
"        AuthorizationException::class,\n"
"        'You are not allowed to access this page.'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2933 docs/master/helpers.md:2921
#, no-wrap
msgid "<a name=\"method-throw-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2933 docs/master/helpers.md:2921
#, no-wrap
msgid "`throw_unless()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2936 docs/master/helpers.md:2924
msgid "The `throw_unless` function throws the given exception if a given boolean expression evaluates to `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2938 docs/master/helpers.md:2926
#, no-wrap
msgid "    throw_unless(Auth::user()->isAdmin(), AuthorizationException::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2944 docs/master/helpers.md:2932
#, no-wrap
msgid "    throw_unless(\n"
"        Auth::user()->isAdmin(),\n"
"        AuthorizationException::class,\n"
"        'You are not allowed to access this page.'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2946 docs/master/helpers.md:2934
#, no-wrap
msgid "<a name=\"method-today\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2946 docs/master/helpers.md:2934
#, no-wrap
msgid "`today()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2949 docs/master/helpers.md:2937
msgid "The `today` function creates a new `Illuminate\\Support\\Carbon` instance for the current date:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2951 docs/master/helpers.md:2939
#, no-wrap
msgid "    $today = today();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2953 docs/master/helpers.md:2941
#, no-wrap
msgid "<a name=\"method-trait-uses-recursive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2953 docs/master/helpers.md:2941
#, no-wrap
msgid "`trait_uses_recursive()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2956 docs/master/helpers.md:2944
msgid "The `trait_uses_recursive` function returns all traits used by a trait:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2958 docs/master/helpers.md:2946
#, no-wrap
msgid "    $traits = trait_uses_recursive(\\Illuminate\\Notifications\\Notifiable::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2963 docs/master/helpers.md:2951
msgid "The `transform` function executes a closure on a given value if the value is not [blank](#method-blank) and then returns the return value of the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2967 docs/master/helpers.md:2955
#, no-wrap
msgid "    $callback = function ($value) {\n"
"        return $value * 2;\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2969 docs/master/helpers.md:2957
#, no-wrap
msgid "    $result = transform(5, $callback);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2973 docs/master/helpers.md:2961
msgid "A default value or closure may be passed as the third argument to the function. This value will be returned if the given value is blank:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2975 docs/master/helpers.md:2963
#, no-wrap
msgid "    $result = transform(null, $callback, 'The value is blank');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2977 docs/master/helpers.md:2965
#, no-wrap
msgid "    // The value is blank\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2979 docs/master/helpers.md:2967
#, no-wrap
msgid "<a name=\"method-validator\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2979 docs/master/helpers.md:2967
#, no-wrap
msgid "`validator()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2982 docs/master/helpers.md:2970
msgid "The `validator` function creates a new [validator](/docs/{{version}}/validation) instance with the given arguments. You may use it as an alternative to the `Validator` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2984 docs/master/helpers.md:2972
#, no-wrap
msgid "    $validator = validator($data, $rules, $messages);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2986 docs/master/helpers.md:2974
#, no-wrap
msgid "<a name=\"method-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:2986 docs/master/helpers.md:2974
#, no-wrap
msgid "`value()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2989 docs/master/helpers.md:2977
msgid "The `value` function returns the value it is given. However, if you pass a closure to the function, the closure will be executed and its returned value will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2991 docs/master/helpers.md:2979
#, no-wrap
msgid "    $result = value(true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:2997 docs/master/helpers.md:2985
#, no-wrap
msgid "    $result = value(function () {\n"
"        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3001 docs/master/helpers.md:2989
#, no-wrap
msgid "<a name=\"method-view\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:3001 docs/master/helpers.md:2989
#, no-wrap
msgid "`view()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3004 docs/master/helpers.md:2992
msgid "The `view` function retrieves a [view](/docs/{{version}}/views) instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3006 docs/master/helpers.md:2994
#, no-wrap
msgid "    return view('auth.login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3008 docs/master/helpers.md:2996
#, no-wrap
msgid "<a name=\"method-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/helpers.md:3008 docs/master/helpers.md:2996
#, no-wrap
msgid "`with()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3011 docs/master/helpers.md:2999
msgid "The `with` function returns the value it is given. If a closure is passed as the second argument to the function, the closure will be executed and its returned value will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3015 docs/master/helpers.md:3003
#, no-wrap
msgid "    $callback = function ($value) {\n"
"        return (is_numeric($value)) ? $value * 2 : 0;\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3017 docs/master/helpers.md:3005
#, no-wrap
msgid "    $result = with(5, $callback);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3021 docs/master/helpers.md:3009
#, no-wrap
msgid "    $result = with(null, $callback);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/helpers.md:3025 docs/master/helpers.md:3013
#, no-wrap
msgid "    $result = with(5, null);\n"
msgstr ""

#. type: Title #
#: docs/8.x/homestead.md:1 docs/master/homestead.md:1
#, no-wrap
msgid "Laravel Homestead"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Installation & Setup](#installation-and-setup)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/8.x/lifecycle.md:11
#: docs/master/homestead.md:36 docs/master/lifecycle.md:11
msgid "[First Steps](#first-steps)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring Homestead](#configuring-homestead)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring Nginx Sites](#configuring-nginx-sites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring Services](#configuring-services)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Launching The Vagrant Box](#launching-the-vagrant-box)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Per Project Installation](#per-project-installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Installing Optional Features](#installing-optional-features)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Aliases](#aliases)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Updating Homestead](#updating-homestead)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Daily Usage](#daily-usage)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Connecting Via SSH](#connecting-via-ssh)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Adding Additional Sites](#adding-additional-sites)"
msgstr ""

#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/8.x/mix.md:21 docs/master/homestead.md:36
#: docs/master/mix.md:21
msgid "[Environment Variables](#environment-variables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Ports](#ports)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[PHP Versions](#php-versions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Connecting To Databases](#connecting-to-databases)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Database Backups](#database-backups)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Database Snapshots](#database-snapshots)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring Cron Schedules](#configuring-cron-schedules)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring MailHog](#configuring-mailhog)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Configuring Minio](#configuring-minio)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/8.x/sail.md:24 docs/master/homestead.md:36
#: docs/master/sail.md:23
msgid "[Laravel Dusk](#laravel-dusk)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Sharing Your Environment](#sharing-your-environment)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Debugging & Profiling](#debugging-and-profiling)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Debugging Web Requests With Xdebug](#debugging-web-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Debugging CLI Applications](#debugging-cli-applications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Profiling Applications with Blackfire](#profiling-applications-with-blackfire)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Network Interfaces](#network-interfaces)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Extending Homestead](#extending-homestead)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[Provider Specific Settings](#provider-specific-settings)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/homestead.md:36 docs/master/homestead.md:36
msgid "[VirtualBox](#provider-specific-virtualbox)"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:41 docs/master/homestead.md:41
msgid "Laravel strives to make the entire PHP development experience delightful, including your local development environment. Laravel Homestead is an official, pre-packaged Vagrant box that provides you a wonderful development environment without requiring you to install PHP, a web server, and any other server software on your local machine."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:43 docs/master/homestead.md:43
msgid "[Vagrant](https://www.vagrantup.com) provides a simple, elegant way to manage and provision Virtual Machines. Vagrant boxes are completely disposable. If something goes wrong, you can destroy and re-create the box in minutes!"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:45 docs/master/homestead.md:45
msgid "Homestead runs on any Windows, macOS, or Linux system and includes Nginx, PHP, MySQL, PostgreSQL, Redis, Memcached, Node, and all of the other software you need to develop amazing Laravel applications."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:47 docs/master/homestead.md:47
#, no-wrap
msgid "> {note} If you are using Windows, you may need to enable hardware virtualization (VT-x). It can usually be enabled via your BIOS. If you are using Hyper-V on a UEFI system you may additionally need to disable Hyper-V in order to access VT-x.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:49 docs/master/homestead.md:49
#, no-wrap
msgid "<a name=\"included-software\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:49 docs/master/homestead.md:49
#, no-wrap
msgid "Included Software"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:58 docs/8.x/homestead.md:97
#: docs/master/homestead.md:58 docs/master/homestead.md:97
#, no-wrap
msgid "<style>\n"
"    #software-list > ul {\n"
"        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n"
"        column-gap: 5em; -moz-column-gap: 5em; -webkit-column-gap: 5em;\n"
"        line-height: 1.9;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:86 docs/master/homestead.md:86
#, no-wrap
msgid "<div id=\"software-list\" markdown=\"1\">\n"
"- Ubuntu 20.04\n"
"- Git\n"
"- PHP 8.0\n"
"- PHP 7.4\n"
"- PHP 7.3\n"
"- PHP 7.2\n"
"- PHP 7.1\n"
"- PHP 7.0\n"
"- PHP 5.6\n"
"- Nginx\n"
"- MySQL\n"
"- lmm\n"
"- Sqlite3\n"
"- PostgreSQL (9.6, 10, 11, 12, 13)\n"
"- Composer\n"
"- Node (With Yarn, Bower, Grunt, and Gulp)\n"
"- Redis\n"
"- Memcached\n"
"- Beanstalkd\n"
"- Mailhog\n"
"- avahi\n"
"- ngrok\n"
"- Xdebug\n"
"- XHProf / Tideways / XHGui\n"
"- wp-cli\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:88 docs/master/homestead.md:88
#, no-wrap
msgid "<a name=\"optional-software\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:88 docs/master/homestead.md:88
#, no-wrap
msgid "Optional Software"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:123 docs/master/homestead.md:123
#, no-wrap
msgid "<div id=\"software-list\" markdown=\"1\">\n"
"- Apache\n"
"- Blackfire\n"
"- Cassandra\n"
"- Chronograf\n"
"- CouchDB\n"
"- Crystal & Lucky Framework\n"
"- Docker\n"
"- Elasticsearch\n"
"- Gearman\n"
"- Go\n"
"- Grafana\n"
"- InfluxDB\n"
"- MariaDB\n"
"- MinIO\n"
"- MongoDB\n"
"- Neo4j\n"
"- Oh My Zsh\n"
"- Open Resty\n"
"- PM2\n"
"- Python\n"
"- RabbitMQ\n"
"- Solr\n"
"- Webdriver & Laravel Dusk Utilities\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:125 docs/master/homestead.md:125
#, no-wrap
msgid "<a name=\"installation-and-setup\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:125 docs/8.x/mix.md:37 docs/8.x/sail.md:35
#: docs/master/homestead.md:125 docs/master/mix.md:37 docs/master/sail.md:34
#, no-wrap
msgid "Installation & Setup"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:128 docs/8.x/lifecycle.md:23
#: docs/master/homestead.md:128 docs/master/lifecycle.md:23
#, no-wrap
msgid "<a name=\"first-steps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:128 docs/8.x/lifecycle.md:23
#: docs/master/homestead.md:128 docs/master/lifecycle.md:23
#, no-wrap
msgid "First Steps"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:131 docs/master/homestead.md:131
msgid "Before launching your Homestead environment, you must install [Vagrant](https://www.vagrantup.com/downloads.html) as well as one of the following supported providers:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:134 docs/master/homestead.md:134
msgid "- [VirtualBox 6.1.x](https://www.virtualbox.org/wiki/Downloads)  - [Parallels](https://www.parallels.com/products/desktop/)"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:136 docs/master/homestead.md:136
msgid "All of these software packages provide easy-to-use visual installers for all popular operating systems."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:138 docs/master/homestead.md:138
msgid "To use the Parallels provider, you will need to install [Parallels Vagrant plug-in](https://github.com/Parallels/vagrant-parallels). It is free of charge."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:140 docs/master/homestead.md:140
#, no-wrap
msgid "<a name=\"installing-homestead\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:140 docs/master/homestead.md:140
#, no-wrap
msgid "Installing Homestead"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:143 docs/master/homestead.md:143
msgid "You may install Homestead by cloning the Homestead repository onto your host machine. Consider cloning the repository into a `Homestead` folder within your \"home\" directory, as the Homestead virtual machine will serve as the host to all of your Laravel applications. Throughout this documentation, we will refer to this directory as your \"Homestead directory\":"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/homestead.md:144 docs/master/homestead.md:144
#, no-wrap
msgid "git clone https://github.com/laravel/homestead.git ~/Homestead\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:149 docs/master/homestead.md:149
msgid "After cloning the Laravel Homestead repository, you should checkout the `release` branch. This branch always contains the latest stable release of Homestead:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:151 docs/master/homestead.md:151
#, no-wrap
msgid "    cd ~/Homestead\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:153 docs/master/homestead.md:153
#, no-wrap
msgid "    git checkout release\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:155 docs/master/homestead.md:155
msgid "Next, execute the `bash init.sh` command from the Homestead directory to create the `Homestead.yaml` configuration file. The `Homestead.yaml` file is where you will configure all of the settings for your Homestead installation. This file will be placed in the Homestead directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:158 docs/8.x/homestead.md:380
#: docs/master/homestead.md:158 docs/master/homestead.md:380
#, no-wrap
msgid "    // macOS / Linux...\n"
"    bash init.sh\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:161 docs/8.x/homestead.md:383
#: docs/master/homestead.md:161 docs/master/homestead.md:383
#, no-wrap
msgid "    // Windows...\n"
"    init.bat\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:163 docs/master/homestead.md:163
#, no-wrap
msgid "<a name=\"configuring-homestead\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:163 docs/master/homestead.md:163
#, no-wrap
msgid "Configuring Homestead"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:166 docs/master/homestead.md:166
#, no-wrap
msgid "<a name=\"setting-your-provider\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:166 docs/master/homestead.md:166
#, no-wrap
msgid "Setting Your Provider"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:169 docs/master/homestead.md:169
msgid "The `provider` key in your `Homestead.yaml` file indicates which Vagrant provider should be used: `virtualbox` or `parallels`:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:171 docs/master/homestead.md:171
#, no-wrap
msgid "    provider: virtualbox\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:173 docs/master/homestead.md:173
#, no-wrap
msgid "<a name=\"configuring-shared-folders\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:173 docs/master/homestead.md:173
#, no-wrap
msgid "Configuring Shared Folders"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:176 docs/master/homestead.md:176
msgid "The `folders` property of the `Homestead.yaml` file lists all of the folders you wish to share with your Homestead environment. As files within these folders are changed, they will be kept in sync between your local machine and the Homestead virtual environment. You may configure as many shared folders as necessary:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:177 docs/master/homestead.md:177
#, no-wrap
msgid "folders:\n"
"    - map: ~/code/project1\n"
"      to: /home/vagrant/project1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:184 docs/master/homestead.md:184
#, no-wrap
msgid "> {note} Windows users should not use the `~/` path syntax and instead should use the full path to their project, such as `C:\\Users\\user\\Code\\project1`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:186 docs/master/homestead.md:186
msgid "You should always map individual applications to their own folder mapping instead of mapping a single large directory that contains all of your applications. When you map a folder, the virtual machine must keep track of all disk IO for *every* file in the folder. You may experience reduced performance if you have a large number of files in a folder:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:187 docs/master/homestead.md:187
#, no-wrap
msgid "folders:\n"
"    - map: ~/code/project1\n"
"      to: /home/vagrant/project1\n"
"    - map: ~/code/project2\n"
"      to: /home/vagrant/project2\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:196 docs/master/homestead.md:196
#, no-wrap
msgid "> {note} You should never mount `.` (the current directory) when using Homestead. This causes Vagrant to not map the current folder to `/vagrant` and will break optional features and cause unexpected results while provisioning.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:198 docs/master/homestead.md:198
msgid "To enable [NFS](https://www.vagrantup.com/docs/synced-folders/nfs.html), you may add a `type` option to your folder mapping:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:203 docs/master/homestead.md:203
#, no-wrap
msgid "    folders:\n"
"        - map: ~/code/project1\n"
"          to: /home/vagrant/project1\n"
"          type: \"nfs\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:205 docs/master/homestead.md:205
#, no-wrap
msgid "> {note} When using NFS on Windows, you should consider installing the [vagrant-winnfsd](https://github.com/winnfsd/vagrant-winnfsd) plug-in. This plug-in will maintain the correct user / group permissions for files and directories within the Homestead virtual machine.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:207 docs/master/homestead.md:207
msgid "You may also pass any options supported by Vagrant's [Synced Folders](https://www.vagrantup.com/docs/synced-folders/basic_usage.html) by listing them under the `options` key:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:215 docs/master/homestead.md:215
#, no-wrap
msgid "    folders:\n"
"        - map: ~/code/project1\n"
"          to: /home/vagrant/project1\n"
"          type: \"rsync\"\n"
"          options:\n"
"              rsync__args: [\"--verbose\", \"--archive\", \"--delete\", \"-zz\"]\n"
"              rsync__exclude: [\"node_modules\"]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:217 docs/master/homestead.md:217
#, no-wrap
msgid "<a name=\"configuring-nginx-sites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:217 docs/master/homestead.md:217
#, no-wrap
msgid "Configuring Nginx Sites"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:220 docs/master/homestead.md:220
msgid "Not familiar with Nginx? No problem. Your `Homestead.yaml` file's `sites` property allows you to easily map a \"domain\" to a folder on your Homestead environment. A sample site configuration is included in the `Homestead.yaml` file. Again, you may add as many sites to your Homestead environment as necessary. Homestead can serve as a convenient, virtualized environment for every Laravel application you are working on:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:224 docs/master/homestead.md:224
#, no-wrap
msgid "    sites:\n"
"        - map: homestead.test\n"
"          to: /home/vagrant/project1/public\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:226 docs/master/homestead.md:226
msgid "If you change the `sites` property after provisioning the Homestead virtual machine, you should execute the `vagrant reload --provision` command in your terminal to update the Nginx configuration on the virtual machine."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:228 docs/master/homestead.md:228
#, no-wrap
msgid "> {note} Homestead scripts are built to be as idempotent as possible. However, if you are experiencing issues while provisioning you should destroy and rebuild the machine by executing the `vagrant destroy && vagrant up` command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:230 docs/master/homestead.md:230
#, no-wrap
msgid "<a name=\"hostname-resolution\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:230 docs/master/homestead.md:230
#, no-wrap
msgid "Hostname Resolution"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:233 docs/master/homestead.md:233
msgid "Homestead publishes hostnames using `mDNS` for automatic host resolution. If you set `hostname: homestead` in your `Homestead.yaml` file, the host will be available at `homestead.local`. macOS, iOS, and Linux desktop distributions include `mDNS` support by default. If you are using Windows, you must install [Bonjour Print Services for Windows](https://support.apple.com/kb/DL999?viewlocale=en_US&locale=en_US)."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:235 docs/master/homestead.md:235
msgid "Using automatic hostnames works best for [per project installations](#per-project-installation) of Homestead. If you host multiple sites on a single Homestead instance, you may add the \"domains\" for your web sites to the `hosts` file on your machine. The `hosts` file will redirect requests for your Homestead sites into your Homestead virtual machine. On macOS and Linux, this file is located at `/etc/hosts`. On Windows, it is located at `C:\\Windows\\System32\\drivers\\etc\\hosts`. The lines you add to this file will look like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:237 docs/master/homestead.md:237
#, no-wrap
msgid "    192.168.10.10  homestead.test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:239 docs/master/homestead.md:239
msgid "Make sure the IP address listed is the one set in your `Homestead.yaml` file. Once you have added the domain to your `hosts` file and launched the Vagrant box you will be able to access the site via your web browser:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/homestead.md:240 docs/master/homestead.md:240
#, no-wrap
msgid "http://homestead.test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:245 docs/master/homestead.md:245
#, no-wrap
msgid "<a name=\"configuring-services\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:245 docs/master/homestead.md:245
#, no-wrap
msgid "Configuring Services"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:248 docs/master/homestead.md:248
msgid "Homestead starts several services by default; however, you may customize which services are enabled or disabled during provisioning. For example, you may enable PostgreSQL and disable MySQL by modifying the `services` option within your `Homestead.yaml` file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:249 docs/master/homestead.md:249
#, no-wrap
msgid "services:\n"
"    - enabled:\n"
"        - \"postgresql@12-main\"\n"
"    - disabled:\n"
"        - \"mysql\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:258 docs/master/homestead.md:258
msgid "The specified services will be started or stopped based on their order in the `enabled` and `disabled` directives."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:260 docs/master/homestead.md:260
#, no-wrap
msgid "<a name=\"launching-the-vagrant-box\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:260 docs/master/homestead.md:260
#, no-wrap
msgid "Launching The Vagrant Box"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:263 docs/master/homestead.md:263
msgid "Once you have edited the `Homestead.yaml` to your liking, run the `vagrant up` command from your Homestead directory. Vagrant will boot the virtual machine and automatically configure your shared folders and Nginx sites."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:265 docs/master/homestead.md:265
msgid "To destroy the machine, you may use the `vagrant destroy` command."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:267 docs/master/homestead.md:267
#, no-wrap
msgid "<a name=\"per-project-installation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:267 docs/master/homestead.md:267
#, no-wrap
msgid "Per Project Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:270 docs/master/homestead.md:270
msgid "Instead of installing Homestead globally and sharing the same Homestead virtual machine across all of your projects, you may instead configure a Homestead instance for each project you manage. Installing Homestead per project may be beneficial if you wish to ship a `Vagrantfile` with your project, allowing others working on the project to `vagrant up` immediately after cloning the project's repository."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:272 docs/master/homestead.md:272
msgid "You may install Homestead into your project using the Composer package manager:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/homestead.md:273 docs/master/homestead.md:273
#, no-wrap
msgid "composer require laravel/homestead --dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:278 docs/master/homestead.md:278
msgid "Once Homestead has been installed, invoke Homestead's `make` command to generate the `Vagrantfile` and `Homestead.yaml` file for your project. These files will be placed in the root of your project. The `make` command will automatically configure the `sites` and `folders` directives in the `Homestead.yaml` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:281 docs/master/homestead.md:281
#, no-wrap
msgid "    // macOS / Linux...\n"
"    php vendor/bin/homestead make\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:284 docs/master/homestead.md:284
#, no-wrap
msgid "    // Windows...\n"
"    vendor\\\\bin\\\\homestead make\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:286 docs/master/homestead.md:286
msgid "Next, run the `vagrant up` command in your terminal and access your project at `http://homestead.test` in your browser. Remember, you will still need to add an `/etc/hosts` file entry for `homestead.test` or the domain of your choice if you are not using automatic [hostname resolution](#hostname-resolution)."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:288 docs/master/homestead.md:288
#, no-wrap
msgid "<a name=\"installing-optional-features\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:288 docs/master/homestead.md:288
#, no-wrap
msgid "Installing Optional Features"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:291 docs/master/homestead.md:291
msgid "Optional software is installed using the `features` option within your `Homestead.yaml` file. Most features can be enabled or disabled with a boolean value, while some features allow multiple configuration options:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:320 docs/master/homestead.md:320
#, no-wrap
msgid "    features:\n"
"        - blackfire:\n"
"            server_id: \"server_id\"\n"
"            server_token: \"server_value\"\n"
"            client_id: \"client_id\"\n"
"            client_token: \"client_value\"\n"
"        - cassandra: true\n"
"        - chronograf: true\n"
"        - couchdb: true\n"
"        - crystal: true\n"
"        - docker: true\n"
"        - elasticsearch:\n"
"            version: 7.9.0\n"
"        - gearman: true\n"
"        - golang: true\n"
"        - grafana: true\n"
"        - influxdb: true\n"
"        - mariadb: true\n"
"        - minio: true\n"
"        - mongodb: true\n"
"        - neo4j: true\n"
"        - ohmyzsh: true\n"
"        - openresty: true\n"
"        - pm2: true\n"
"        - python: true\n"
"        - rabbitmq: true\n"
"        - solr: true\n"
"        - webdriver: true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:322 docs/master/homestead.md:322
#, no-wrap
msgid "<a name=\"elasticsearch\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:322 docs/master/homestead.md:322
#, no-wrap
msgid "Elasticsearch"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:325 docs/master/homestead.md:325
msgid "You may specify a supported version of Elasticsearch, which must be an exact version number (major.minor.patch). The default installation will create a cluster named 'homestead'. You should never give Elasticsearch more than half of the operating system's memory, so make sure your Homestead virtual machine has at least twice the Elasticsearch allocation."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:327 docs/master/homestead.md:327
#, no-wrap
msgid "> {tip} Check out the [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current) to learn how to customize your configuration.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:329 docs/master/homestead.md:329
#, no-wrap
msgid "<a name=\"mariadb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:329 docs/master/homestead.md:329
#, no-wrap
msgid "MariaDB"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:332 docs/master/homestead.md:332
msgid "Enabling MariaDB will remove MySQL and install MariaDB. MariaDB typically serves as a drop-in replacement for MySQL, so you should still use the `mysql` database driver in your application's database configuration."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:334 docs/master/homestead.md:334
#, no-wrap
msgid "<a name=\"mongodb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:334 docs/master/homestead.md:334
#, no-wrap
msgid "MongoDB"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:337 docs/master/homestead.md:337
msgid "The default MongoDB installation will set the database username to `homestead` and the corresponding password to `secret`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:339 docs/master/homestead.md:339
#, no-wrap
msgid "<a name=\"neo4j\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:339 docs/master/homestead.md:339
#, no-wrap
msgid "Neo4j"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:342 docs/master/homestead.md:342
msgid "The default Neo4j installation will set the database username to `homestead` and the corresponding password to `secret`. To access the Neo4j browser, visit `http://homestead.test:7474` via your web browser. The ports `7687` (Bolt), `7474` (HTTP), and `7473` (HTTPS) are ready to serve requests from the Neo4j client."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:344 docs/master/homestead.md:344
#, no-wrap
msgid "<a name=\"aliases\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:344 docs/master/homestead.md:344
#, no-wrap
msgid "Aliases"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:347 docs/master/homestead.md:347
msgid "You may add Bash aliases to your Homestead virtual machine by modifying the `aliases` file within your Homestead directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:350 docs/master/homestead.md:350
#, no-wrap
msgid "    alias c='clear'\n"
"    alias ..='cd ..'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:352 docs/master/homestead.md:352
msgid "After you have updated the `aliases` file, you should re-provision the Homestead virtual machine using the `vagrant reload --provision` command. This will ensure that your new aliases are available on the machine."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:354 docs/master/homestead.md:354
#, no-wrap
msgid "<a name=\"updating-homestead\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:354 docs/master/homestead.md:354
#, no-wrap
msgid "Updating Homestead"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:357 docs/master/homestead.md:357
msgid "Before you begin updating Homestead you should ensure you have removed your current virtual machine by running the following command in your Homestead directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:359 docs/master/homestead.md:359
#, no-wrap
msgid "    vagrant destroy\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:361 docs/master/homestead.md:361
msgid "Next, you need to update the Homestead source code. If you cloned the repository, you can execute the following commands at the location you originally cloned the repository:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:363 docs/master/homestead.md:363
#, no-wrap
msgid "    git fetch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:365 docs/master/homestead.md:365
#, no-wrap
msgid "    git pull origin release\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:367 docs/master/homestead.md:367
msgid "These commands pull the latest Homestead code from the GitHub repository, fetch the latest tags, and then check out the latest tagged release. You can find the latest stable release version on Homestead's [GitHub releases page](https://github.com/laravel/homestead/releases)."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:369 docs/master/homestead.md:369
msgid "If you have installed Homestead via your project's `composer.json` file, you should ensure your `composer.json` file contains `\"laravel/homestead\": \"^12\"` and update your dependencies:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:371 docs/master/homestead.md:371
#, no-wrap
msgid "    composer update\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:373 docs/master/homestead.md:373
msgid "Next, you should update the Vagrant box using the `vagrant box update` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:375 docs/master/homestead.md:375
#, no-wrap
msgid "    vagrant box update\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:377 docs/master/homestead.md:377
msgid "After updating the Vagrant box, you should run the `bash init.sh` command from the Homestead directory in order to update Homestead's additional configuration files. You will be asked whether you wish to overwrite your existing `Homestead.yaml`, `after.sh`, and `aliases` files:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:385 docs/master/homestead.md:385
msgid "Finally, you will need to regenerate your Homestead virtual machine to utilize the latest Vagrant installation:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:387 docs/master/homestead.md:387
#, no-wrap
msgid "    vagrant up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:389 docs/master/homestead.md:389
#, no-wrap
msgid "<a name=\"daily-usage\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:389 docs/master/homestead.md:389
#, no-wrap
msgid "Daily Usage"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:392 docs/master/homestead.md:392
#, no-wrap
msgid "<a name=\"connecting-via-ssh\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:392 docs/master/homestead.md:392
#, no-wrap
msgid "Connecting Via SSH"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:395 docs/master/homestead.md:395
msgid "You can SSH into your virtual machine by executing the `vagrant ssh` terminal command from your Homestead directory."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:397 docs/master/homestead.md:397
#, no-wrap
msgid "<a name=\"adding-additional-sites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:397 docs/master/homestead.md:397
#, no-wrap
msgid "Adding Additional Sites"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:400 docs/master/homestead.md:400
msgid "Once your Homestead environment is provisioned and running, you may want to add additional Nginx sites for your other Laravel projects. You can run as many Laravel projects as you wish on a single Homestead environment. To add an additional site, add the site to your `Homestead.yaml` file."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:406 docs/master/homestead.md:406
#, no-wrap
msgid "    sites:\n"
"        - map: homestead.test\n"
"          to: /home/vagrant/project1/public\n"
"        - map: another.test\n"
"          to: /home/vagrant/project2/public\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:408 docs/master/homestead.md:408
#, no-wrap
msgid "> {note} You should ensure that you have configured a [folder mapping](#configuring-shared-folders) for the project's directory before adding the site.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:410 docs/master/homestead.md:410
msgid "If Vagrant is not automatically managing your \"hosts\" file, you may need to add the new site to that file as well. On macOS and Linux, this file is located at `/etc/hosts`. On Windows, it is located at `C:\\Windows\\System32\\drivers\\etc\\hosts`:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:413 docs/master/homestead.md:413
#, no-wrap
msgid "    192.168.10.10  homestead.test\n"
"    192.168.10.10  another.test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:415 docs/master/homestead.md:415
msgid "Once the site has been added, execute the `vagrant reload --provision` terminal command from your Homestead directory."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:417 docs/master/homestead.md:417
#, no-wrap
msgid "<a name=\"site-types\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:417 docs/master/homestead.md:417
#, no-wrap
msgid "Site Types"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:420 docs/master/homestead.md:420
msgid "Homestead supports several \"types\" of sites which allow you to easily run projects that are not based on Laravel. For example, we may easily add a Statamic application to Homestead using the `statamic` site type:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:421 docs/master/homestead.md:421
#, no-wrap
msgid "sites:\n"
"    - map: statamic.test\n"
"      to: /home/vagrant/my-symfony-project/web\n"
"      type: \"statamic\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:429 docs/master/homestead.md:429
msgid "The available site types are: `apache`, `apigility`, `expressive`, `laravel` (the default), `proxy`, `silverstripe`, `statamic`, `symfony2`, `symfony4`, and `zf`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:431 docs/master/homestead.md:431
#, no-wrap
msgid "<a name=\"site-parameters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:431 docs/master/homestead.md:431
#, no-wrap
msgid "Site Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:434 docs/master/homestead.md:434
msgid "You may add additional Nginx `fastcgi_param` values to your site via the `params` site directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:441 docs/master/homestead.md:441
#, no-wrap
msgid "    sites:\n"
"        - map: homestead.test\n"
"          to: /home/vagrant/project1/public\n"
"          params:\n"
"              - key: FOO\n"
"                value: BAR\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:443 docs/8.x/mix.md:354 docs/master/homestead.md:443
#: docs/master/mix.md:354
#, no-wrap
msgid "<a name=\"environment-variables\"></a>\n"
msgstr ""

#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  mix.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/homestead.md:443 docs/8.x/mix.md:354 docs/master/homestead.md:443
#: docs/master/mix.md:354
#, no-wrap
msgid "Environment Variables"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:446 docs/master/homestead.md:446
msgid "You can define global environment variables by adding them to your `Homestead.yaml` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:452 docs/master/homestead.md:452
#, no-wrap
msgid "    variables:\n"
"        - key: APP_ENV\n"
"          value: local\n"
"        - key: FOO\n"
"          value: bar\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:454 docs/master/homestead.md:454
msgid "After updating the `Homestead.yaml` file, be sure to re-provision the machine by executing the `vagrant reload --provision` command. This will update the PHP-FPM configuration for all of the installed PHP versions and also update the environment for the `vagrant` user."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:456 docs/master/homestead.md:456
#, no-wrap
msgid "<a name=\"ports\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:456 docs/master/homestead.md:456
#, no-wrap
msgid "Ports"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:459 docs/master/homestead.md:459
msgid "By default, the following ports are forwarded to your Homestead environment:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:471 docs/master/homestead.md:471
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- **SSH:** 2222 &rarr; Forwards To 22\n"
"- **ngrok UI:** 4040 &rarr; Forwards To 4040\n"
"- **HTTP:** 8000 &rarr; Forwards To 80\n"
"- **HTTPS:** 44300 &rarr; Forwards To 443\n"
"- **MySQL:** 33060 &rarr; Forwards To 3306\n"
"- **PostgreSQL:** 54320 &rarr; Forwards To 5432\n"
"- **MongoDB:** 27017 &rarr; Forwards To 27017\n"
"- **Mailhog:** 8025 &rarr; Forwards To 8025\n"
"- **Minio:** 9600 &rarr; Forwards To 9600\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:473 docs/master/homestead.md:473
#, no-wrap
msgid "<a name=\"forwarding-additional-ports\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:473 docs/master/homestead.md:473
#, no-wrap
msgid "Forwarding Additional Ports"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:476 docs/master/homestead.md:476
msgid "If you wish, you may forward additional ports to the Vagrant box by defining a `ports` configuration entry within your `Homestead.yaml` file. After updating the `Homestead.yaml` file, be sure to re-provision the machine by executing the `vagrant reload --provision` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:483 docs/master/homestead.md:483
#, no-wrap
msgid "    ports:\n"
"        - send: 50000\n"
"          to: 5000\n"
"        - send: 7777\n"
"          to: 777\n"
"          protocol: udp\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:485 docs/8.x/valet.md:90 docs/master/homestead.md:485
#: docs/master/valet.md:90
#, no-wrap
msgid "<a name=\"php-versions\"></a>\n"
msgstr ""

#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  homestead.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  valet.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/homestead.md:485 docs/8.x/sail.md:264 docs/8.x/valet.md:90
#: docs/master/homestead.md:485 docs/master/sail.md:256 docs/master/valet.md:90
#, no-wrap
msgid "PHP Versions"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:488 docs/master/homestead.md:488
msgid "Homestead 6 introduced support for running multiple versions of PHP on the same virtual machine. You may specify which version of PHP to use for a given site within your `Homestead.yaml` file. The available PHP versions are: \"5.6\", \"7.0\", \"7.1\", \"7.2\", \"7.3\", \"7.4\", and \"8.0\" (the default):"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:493 docs/master/homestead.md:493
#, no-wrap
msgid "    sites:\n"
"        - map: homestead.test\n"
"          to: /home/vagrant/project1/public\n"
"          php: \"7.1\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:495 docs/master/homestead.md:495
msgid "[Within your Homestead virtual machine](#connecting-via-ssh), you may use any of the supported PHP versions via the CLI:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:503 docs/master/homestead.md:503
#, no-wrap
msgid "    php5.6 artisan list\n"
"    php7.0 artisan list\n"
"    php7.1 artisan list\n"
"    php7.2 artisan list\n"
"    php7.3 artisan list\n"
"    php7.4 artisan list\n"
"    php8.0 artisan list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:505 docs/master/homestead.md:505
msgid "You may change the default version of PHP used by the CLI by issuing the following commands from within your Homestead virtual machine:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:513 docs/master/homestead.md:513
#, no-wrap
msgid "    php56\n"
"    php70\n"
"    php71\n"
"    php72\n"
"    php73\n"
"    php74\n"
"    php80\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:515 docs/master/homestead.md:515
#, no-wrap
msgid "<a name=\"connecting-to-databases\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:515 docs/master/homestead.md:515
#, no-wrap
msgid "Connecting To Databases"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:518 docs/master/homestead.md:518
msgid "A `homestead` database is configured for both MySQL and PostgreSQL out of the box. To connect to your MySQL or PostgreSQL database from your host machine's database client, you should connect to `127.0.0.1` on port `33060` (MySQL) or `54320` (PostgreSQL). The username and password for both databases is `homestead` / `secret`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:520 docs/master/homestead.md:520
#, no-wrap
msgid "> {note} You should only use these non-standard ports when connecting to the databases from your host machine. You will use the default 3306 and 5432 ports in your Laravel application's `database` configuration file since Laravel is running _within_ the virtual machine.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:522 docs/master/homestead.md:522
#, no-wrap
msgid "<a name=\"database-backups\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:522 docs/master/homestead.md:522
#, no-wrap
msgid "Database Backups"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:525 docs/master/homestead.md:525
msgid "Homestead can automatically backup your database when your Homestead virtual machine is destroyed. To utilize this feature, you must be using Vagrant 2.1.0 or greater. Or, if you are using an older version of Vagrant, you must install the `vagrant-triggers` plug-in. To enable automatic database backups, add the following line to your `Homestead.yaml` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:527 docs/master/homestead.md:527
#, no-wrap
msgid "    backup: true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:529 docs/master/homestead.md:529
msgid "Once configured, Homestead will export your databases to `mysql_backup` and `postgres_backup` directories when the `vagrant destroy` command is executed. These directories can be found in the folder where you installed Homestead or in the root of your project if you are using the [per project installation](#per-project-installation) method."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:531 docs/master/homestead.md:531
#, no-wrap
msgid "<a name=\"database-snapshots\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:531 docs/master/homestead.md:531
#, no-wrap
msgid "Database Snapshots"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:534 docs/master/homestead.md:534
msgid "Homestead supports freezing the state of MySQL and MariaDB databases and branching between them using [Logical MySQL Manager](https://github.com/Lullabot/lmm). For example, imagine working on a site with a multi-gigabyte database. You can import the database and take a snapshot. After doing some work and creating some test content locally, you may quickly restore back to the original state."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:536 docs/master/homestead.md:536
msgid "Under the hood, LMM uses LVM's thin snapshot functionality with copy-on-write support. In practice, this means that changing a single row in a table will only cause the changes you made to be written to disk, saving significant time and disk space during restores."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:538 docs/master/homestead.md:538
msgid "Since LMM interacts with LVM, it must be run as `root`. To see all available commands, run the `sudo lmm` command within Vagrant box. A common workflow looks like the following:"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:544 docs/master/homestead.md:544
msgid "Import a database into the default `master` lmm branch."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:544 docs/master/homestead.md:544
msgid "Save a snapshot of the unchanged database using `sudo lmm branch prod-YYYY-MM-DD`."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:544 docs/master/homestead.md:544
msgid "Modify the database."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:544 docs/master/homestead.md:544
msgid "Run `sudo lmm merge prod-YYYY-MM-DD` to undo all changes."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/homestead.md:544 docs/master/homestead.md:544
msgid "Run `sudo lmm delete <branch>` to delete unneeded branches."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:546 docs/master/homestead.md:546
#, no-wrap
msgid "<a name=\"configuring-cron-schedules\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:546 docs/master/homestead.md:546
#, no-wrap
msgid "Configuring Cron Schedules"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:549 docs/master/homestead.md:549
msgid "Laravel provides a convenient way to [schedule cron jobs](/docs/{{version}}/scheduling) by scheduling a single `schedule:run` Artisan command to run every minute. The `schedule:run` command will examine the job schedule defined in your `App\\Console\\Kernel` class to determine which scheduled tasks to run."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:551 docs/master/homestead.md:551
msgid "If you would like the `schedule:run` command to be run for a Homestead site, you may set the `schedule` option to `true` when defining the site:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:552 docs/master/homestead.md:552
#, no-wrap
msgid "sites:\n"
"    - map: homestead.test\n"
"      to: /home/vagrant/project1/public\n"
"      schedule: true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:560 docs/master/homestead.md:560
msgid "The cron job for the site will be defined in the `/etc/cron.d` directory of the Homestead virtual machine."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:562 docs/master/homestead.md:562
#, no-wrap
msgid "<a name=\"configuring-mailhog\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:562 docs/master/homestead.md:562
#, no-wrap
msgid "Configuring MailHog"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:565 docs/master/homestead.md:565
msgid "[MailHog](https://github.com/mailhog/MailHog) allows you to intercept your outgoing email and examine it without actually sending the mail to its recipients. To get started, update your application's `.env` file to use the following mail settings:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:572 docs/master/homestead.md:572
#, no-wrap
msgid "    MAIL_MAILER=smtp\n"
"    MAIL_HOST=localhost\n"
"    MAIL_PORT=1025\n"
"    MAIL_USERNAME=null\n"
"    MAIL_PASSWORD=null\n"
"    MAIL_ENCRYPTION=null\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:574 docs/master/homestead.md:574
msgid "Once MailHog has been configured, you may access the MailHog dashboard at `http://localhost:8025`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:576 docs/master/homestead.md:576
#, no-wrap
msgid "<a name=\"configuring-minio\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:576 docs/master/homestead.md:576
#, no-wrap
msgid "Configuring Minio"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:579 docs/master/homestead.md:579
msgid "[Minio](https://github.com/minio/minio) is an open source object storage server with an Amazon S3 compatible API. To install Minio, update your `Homestead.yaml` file with the following configuration option in the [features](#installing-optional-features) section:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:581 docs/master/homestead.md:581
#, no-wrap
msgid "    minio: true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:583 docs/master/homestead.md:583
msgid "By default, Minio is available on port 9600. You may access the Minio control panel by visiting `http://localhost:9600`. The default access key is `homestead`, while the default secret key is `secretkey`. When accessing Minio, you should always use region `us-east-1`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:585 docs/master/homestead.md:585
msgid "In order to use Minio, you will need to adjust the S3 disk configuration in your application's `config/filesystems.php` configuration file. You will need to add the `use_path_style_endpoint` option to the disk configuration as well as change the `url` key to `endpoint`:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:595 docs/master/homestead.md:595
#, no-wrap
msgid "    's3' => [\n"
"        'driver' => 's3',\n"
"        'key' => env('AWS_ACCESS_KEY_ID'),\n"
"        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"        'region' => env('AWS_DEFAULT_REGION'),\n"
"        'bucket' => env('AWS_BUCKET'),\n"
"        'endpoint' => env('AWS_URL'),\n"
"        'use_path_style_endpoint' => true,\n"
"    ]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:597 docs/master/homestead.md:597
msgid "Finally, ensure your `.env` file has the following options:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/homestead.md:598 docs/master/homestead.md:598
#, no-wrap
msgid "AWS_ACCESS_KEY_ID=homestead\n"
"AWS_SECRET_ACCESS_KEY=secretkey\n"
"AWS_DEFAULT_REGION=us-east-1\n"
"AWS_URL=http://localhost:9600\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:606 docs/master/homestead.md:606
msgid "To provision Minio powered \"S3\" buckets, add a `buckets` directive to your `Homestead.yaml` file. After defining your buckets, you should execute the `vagrant reload --provision` command in your terminal:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:607 docs/master/homestead.md:607
#, no-wrap
msgid "buckets:\n"
"    - name: your-bucket\n"
"      policy: public\n"
"    - name: your-private-bucket\n"
"      policy: none\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:616 docs/master/homestead.md:616
msgid "Supported `policy` values include: `none`, `download`, `upload`, and `public`."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:618 docs/8.x/sail.md:210 docs/master/homestead.md:618
#: docs/master/sail.md:202
#, no-wrap
msgid "<a name=\"laravel-dusk\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:621 docs/master/homestead.md:621
msgid "In order to run [Laravel Dusk](/docs/{{version}}/dusk) tests within Homestead, you should enable the [`webdriver` feature](#installing-optional-features) in your Homestead configuration:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:622 docs/master/homestead.md:622
#, no-wrap
msgid "features:\n"
"    - webdriver: true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:628 docs/master/homestead.md:628
msgid "After enabling the `webdriver` feature, you should execute the `vagrant reload --provision` command in your terminal."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:630 docs/master/homestead.md:630
#, no-wrap
msgid "<a name=\"sharing-your-environment\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:630 docs/master/homestead.md:630
#, no-wrap
msgid "Sharing Your Environment"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:633 docs/master/homestead.md:633
msgid "Sometimes you may wish to share what you're currently working on with coworkers or a client. Vagrant has built-in support for this via the `vagrant share` command; however, this will not work if you have multiple sites configured in your `Homestead.yaml` file."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:635 docs/master/homestead.md:635
msgid "To solve this problem, Homestead includes its own `share` command. To get started, [SSH into your Homestead virtual machine](#connecting-via-ssh) via `vagrant ssh` and execute the `share homestead.test` command. This command will share the `homestead.test` site from your `Homestead.yaml` configuration file. You may substitute any of your other configured sites for `homestead.test`:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:637 docs/master/homestead.md:637
#, no-wrap
msgid "    share homestead.test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:639 docs/master/homestead.md:639
msgid "After running the command, you will see an Ngrok screen appear which contains the activity log and the publicly accessible URLs for the shared site. If you would like to specify a custom region, subdomain, or other Ngrok runtime option, you may add them to your `share` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:641 docs/master/homestead.md:641
#, no-wrap
msgid "    share homestead.test -region=eu -subdomain=laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:643 docs/master/homestead.md:643
#, no-wrap
msgid "> {note} Remember, Vagrant is inherently insecure and you are exposing your virtual machine to the Internet when running the `share` command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:645 docs/master/homestead.md:645
#, no-wrap
msgid "<a name=\"debugging-and-profiling\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:645 docs/master/homestead.md:645
#, no-wrap
msgid "Debugging & Profiling"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:648 docs/master/homestead.md:648
#, no-wrap
msgid "<a name=\"debugging-web-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:648 docs/master/homestead.md:648
#, no-wrap
msgid "Debugging Web Requests With Xdebug"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:651 docs/master/homestead.md:651
msgid "Homestead includes support for step debugging using [Xdebug](https://xdebug.org). For example, you can access a page in your browser and PHP will connect to your IDE to allow inspection and modification of the running code."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:653 docs/master/homestead.md:653
msgid "By default, Xdebug is already running and ready to accept connections. If you need to enable Xdebug on the CLI, execute the `sudo phpenmod xdebug` command within your Homestead virtual machine. Next, follow your IDE's instructions to enable debugging. Finally, configure your browser to trigger Xdebug with an extension or [bookmarklet](https://www.jetbrains.com/phpstorm/marklets/)."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:655 docs/master/homestead.md:655
#, no-wrap
msgid "> {note} Xdebug causes PHP to run significantly slower. To disable Xdebug, run `sudo phpdismod xdebug` within your Homestead virtual machine and restart the FPM service.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:657 docs/master/homestead.md:657
#, no-wrap
msgid "<a name=\"autostarting-xdebug\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:657 docs/master/homestead.md:657
#, no-wrap
msgid "Autostarting Xdebug"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:660 docs/master/homestead.md:660
msgid "When debugging functional tests that make requests to the web server, it is easier to autostart debugging rather than modifying tests to pass through a custom header or cookie to trigger debugging. To force Xdebug to start automatically, modify the `/etc/php/7.x/fpm/conf.d/20-xdebug.ini` file inside your Homestead virtual machine and add the following configuration:"
msgstr ""

#. type: Fenced code block (ini)
#: docs/8.x/homestead.md:661 docs/master/homestead.md:661
#, no-wrap
msgid "; If Homestead.yaml contains a different subnet for the IP address, this address may be different...\n"
"xdebug.remote_host = 192.168.10.1\n"
"xdebug.remote_autostart = 1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:668 docs/master/homestead.md:668
#, no-wrap
msgid "<a name=\"debugging-cli-applications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:668 docs/master/homestead.md:668
#, no-wrap
msgid "Debugging CLI Applications"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:671 docs/master/homestead.md:671
msgid "To debug a PHP CLI application, use the `xphp` shell alias inside your Homestead virtual machine:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:673 docs/master/homestead.md:673
#, no-wrap
msgid "    xphp /path/to/script\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:675 docs/master/homestead.md:675
#, no-wrap
msgid "<a name=\"profiling-applications-with-blackfire\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:675 docs/master/homestead.md:675
#, no-wrap
msgid "Profiling Applications with Blackfire"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:678 docs/master/homestead.md:678
msgid "[Blackfire](https://blackfire.io/docs/introduction) is a service for profiling web requests and CLI applications. It offers an interactive user interface which displays profile data in call-graphs and timelines. It is built for use in development, staging, and production, with no overhead for end users. In addition, Blackfire provides performance, quality, and security checks on code and `php.ini` configuration settings."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:680 docs/master/homestead.md:680
msgid "The [Blackfire Player](https://blackfire.io/docs/player/index) is an open-source Web Crawling, Web Testing, and Web Scraping application which can work jointly with Blackfire in order to script profiling scenarios."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:682 docs/master/homestead.md:682
msgid "To enable Blackfire, use the \"features\" setting in your Homestead configuration file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:683 docs/master/homestead.md:683
#, no-wrap
msgid "features:\n"
"    - blackfire:\n"
"        server_id: \"server_id\"\n"
"        server_token: \"server_value\"\n"
"        client_id: \"client_id\"\n"
"        client_token: \"client_value\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:693 docs/master/homestead.md:693
msgid "Blackfire server credentials and client credentials [require a Blackfire account](https://blackfire.io/signup). Blackfire offers various options to profile an application, including a CLI tool and browser extension. Please [review the Blackfire documentation for more details](https://blackfire.io/docs/cookbooks/index)."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:695 docs/master/homestead.md:695
#, no-wrap
msgid "<a name=\"network-interfaces\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:695 docs/master/homestead.md:695
#, no-wrap
msgid "Network Interfaces"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:698 docs/master/homestead.md:698
msgid "The `networks` property of the `Homestead.yaml` file configures network interfaces for your Homestead virtual machine. You may configure as many interfaces as necessary:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:699 docs/master/homestead.md:699
#, no-wrap
msgid "networks:\n"
"    - type: \"private_network\"\n"
"      ip: \"192.168.10.20\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:706 docs/master/homestead.md:706
msgid "To enable a [bridged](https://www.vagrantup.com/docs/networking/public_network.html) interface, configure a `bridge` setting for the network and change the network type to `public_network`:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:707 docs/master/homestead.md:707
#, no-wrap
msgid "networks:\n"
"    - type: \"public_network\"\n"
"      ip: \"192.168.10.20\"\n"
"      bridge: \"en1: Wi-Fi (AirPort)\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:715 docs/master/homestead.md:715
msgid "To enable [DHCP](https://www.vagrantup.com/docs/networking/public_network.html), just remove the `ip` option from your configuration:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:716 docs/master/homestead.md:716
#, no-wrap
msgid "networks:\n"
"    - type: \"public_network\"\n"
"      bridge: \"en1: Wi-Fi (AirPort)\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:723 docs/master/homestead.md:723
#, no-wrap
msgid "<a name=\"extending-homestead\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:723 docs/master/homestead.md:723
#, no-wrap
msgid "Extending Homestead"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:726 docs/master/homestead.md:726
msgid "You may extend Homestead using the `after.sh` script in the root of your Homestead directory. Within this file, you may add any shell commands that are necessary to properly configure and customize your virtual machine."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:728 docs/master/homestead.md:728
msgid "When customizing Homestead, Ubuntu may ask you if you would like to keep a package's original configuration or overwrite it with a new configuration file. To avoid this, you should use the following command when installing packages in order to avoid overwriting any configuration previously written by Homestead:"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:733 docs/master/homestead.md:733
#, no-wrap
msgid "    sudo apt-get -y \\\n"
"        -o Dpkg::Options::=\"--force-confdef\" \\\n"
"        -o Dpkg::Options::=\"--force-confold\" \\\n"
"        install package-name\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:735 docs/master/homestead.md:735
#, no-wrap
msgid "<a name=\"user-customizations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:735 docs/master/homestead.md:735
#, no-wrap
msgid "User Customizations"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:738 docs/master/homestead.md:738
msgid "When using Homestead with your team, you may want to tweak Homestead to better fit your personal development style. To accomplish this, you may create a `user-customizations.sh` file in the root of your Homestead directory (the same directory containing your `Homestead.yaml` file). Within this file, you may make any customization you would like; however, the `user-customizations.sh` should not be version controlled."
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:740 docs/master/homestead.md:740
#, no-wrap
msgid "<a name=\"provider-specific-settings\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/homestead.md:740 docs/master/homestead.md:740
#, no-wrap
msgid "Provider Specific Settings"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:743 docs/master/homestead.md:743
#, no-wrap
msgid "<a name=\"provider-specific-virtualbox\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/homestead.md:743 docs/master/homestead.md:743
#, no-wrap
msgid "VirtualBox"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:746 docs/master/homestead.md:746
#, no-wrap
msgid "<a name=\"natdnshostresolver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:746 docs/master/homestead.md:746
#, no-wrap
msgid "`natdnshostresolver`"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:749 docs/master/homestead.md:749
msgid "By default, Homestead configures the `natdnshostresolver` setting to `on`. This allows Homestead to use your host operating system's DNS settings. If you would like to override this behavior, add the following configuration options to your `Homestead.yaml` file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/homestead.md:750 docs/master/homestead.md:750
#, no-wrap
msgid "provider: virtualbox\n"
"natdnshostresolver: 'off'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:756 docs/master/homestead.md:756
#, no-wrap
msgid "<a name=\"symbolic-links-on-windows\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/homestead.md:756 docs/master/homestead.md:756
#, no-wrap
msgid "Symbolic Links On Windows"
msgstr ""

#. type: Plain text
#: docs/8.x/homestead.md:759 docs/master/homestead.md:759
msgid "If symbolic links are not working properly on your Windows machine, you may need to add the following block to your `Vagrantfile`:"
msgstr ""

#. type: Fenced code block (ruby)
#: docs/8.x/homestead.md:760 docs/master/homestead.md:760
#, no-wrap
msgid "config.vm.provider \"virtualbox\" do |v|\n"
"    v.customize [\"setextradata\", :id, \"VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root\", \"1\"]\n"
"end\n"
msgstr ""

#. type: Title #
#: docs/8.x/horizon.md:1 docs/master/horizon.md:1
#, no-wrap
msgid "Laravel Horizon"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Balancing Strategies](#balancing-strategies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/horizon.md:16 docs/8.x/telescope.md:33 docs/master/horizon.md:16
#: docs/master/telescope.md:33
msgid "[Dashboard Authorization](#dashboard-authorization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Upgrading Horizon](#upgrading-horizon)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Running Horizon](#running-horizon)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Deploying Horizon](#deploying-horizon)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Tags](#tags)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Metrics](#metrics)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/master/horizon.md:16
msgid "[Deleting Failed Jobs](#deleting-failed-jobs)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/horizon.md:16 docs/8.x/queues.md:44 docs/master/horizon.md:16
#: docs/master/queues.md:43
msgid "[Clearing Jobs From Queues](#clearing-jobs-from-queues)"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:21 docs/master/horizon.md:21
#, no-wrap
msgid "> {tip} Before digging into Laravel Horizon, you should familiarize yourself with Laravel's base [queue services](/docs/{{version}}/queues). Horizon augments Laravel's queue with additional features that may be confusing if you are not already familiar with the basic queue features offered by Laravel.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:23 docs/master/horizon.md:23
msgid "Laravel Horizon provides a beautiful dashboard and code-driven configuration for your Laravel powered [Redis queues](/docs/{{version}}/queues). Horizon allows you to easily monitor key metrics of your queue system such as job throughput, runtime, and job failures."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:25 docs/master/horizon.md:25
msgid "When using Horizon, all of your queue worker configuration is stored in a single, simple configuration file. By defining your application's worker configuration in a version controlled file, you may easily scale or modify your application's queue workers when deploying your application."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:27 docs/master/horizon.md:27
#, no-wrap
msgid "<img src=\"https://laravel.com/img/docs/horizon-example.png\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:32 docs/master/horizon.md:32
#, no-wrap
msgid "> {note} Laravel Horizon requires that you use [Redis](https://redis.io) to power your queue. Therefore, you should ensure that your queue connection is set to `redis` in your application's `config/queue.php` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:34 docs/master/horizon.md:34
msgid "You may install Horizon into your project using the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:36 docs/master/horizon.md:36
#, no-wrap
msgid "    composer require laravel/horizon\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:38 docs/master/horizon.md:38
msgid "After installing Horizon, publish its assets using the `horizon:install` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:40 docs/master/horizon.md:40
#, no-wrap
msgid "    php artisan horizon:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:45 docs/master/horizon.md:45
msgid "After publishing Horizon's assets, its primary configuration file will be located at `config/horizon.php`. This configuration file allows you to configure the queue worker options for your application. Each configuration option includes a description of its purpose, so be sure to thoroughly explore this file."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:47 docs/master/horizon.md:47
#, no-wrap
msgid "<a name=\"environments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:47 docs/master/horizon.md:47
#, no-wrap
msgid "Environments"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:50 docs/master/horizon.md:50
msgid "After installation, the primary Horizon configuration option that you should familiarize yourself with is the `environments` configuration option. This configuration option is an array of environments that your application runs on and defines the worker process options for each environment. By default, this entry contains a `production` and `local` environment. However, you are free to add more environments as needed:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:59 docs/master/horizon.md:59
#, no-wrap
msgid "    'environments' => [\n"
"        'production' => [\n"
"            'supervisor-1' => [\n"
"                'maxProcesses' => 10,\n"
"                'balanceMaxShift' => 1,\n"
"                'balanceCooldown' => 3,\n"
"            ],\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:66 docs/master/horizon.md:66
#, no-wrap
msgid "        'local' => [\n"
"            'supervisor-1' => [\n"
"                'maxProcesses' => 3,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:68 docs/master/horizon.md:68
msgid "When you start Horizon, it will use the worker process configuration options for the environment that your application is running on. Typically, the environment is determined by the value of the `APP_ENV` [environment variable](/docs/{{version}}/configuration#determining-the-current-environment). For example, the default `local` Horizon environment is configured to start three worker processes and automatically balance the number of worker processes assigned to each queue. The default `production` environment is configured to start a maximum of 10 worker processes and automatically balance the number of worker processes assigned to each queue."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:70 docs/master/horizon.md:70
#, no-wrap
msgid "> {note} You should ensure that the `environments` portion of your `horizon` configuration file contains an entry for each [environment](/docs/{{version}}/configuration#environment-configuration) on which you plan to run Horizon.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:72 docs/master/horizon.md:72
#, no-wrap
msgid "<a name=\"supervisors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:72 docs/master/horizon.md:72
#, no-wrap
msgid "Supervisors"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:75 docs/master/horizon.md:75
msgid "As you can see in Horizon's default configuration file. Each environment can contain one or more \"supervisors\". By default, the configuration file defines this supervisor as `supervisor-1`; however, you are free to name your supervisors whatever you want. Each supervisor is essentially responsible for \"supervising\" a group of worker processes and takes care of balancing worker processes across queues."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:77 docs/master/horizon.md:77
msgid "You may add additional supervisors to a given environment if you would like to define a new group of worker processes that should run in that environment. You may choose to do this if you would like to define a different balancing strategy or worker process count for a given queue used by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:79 docs/8.x/urls.md:156 docs/master/horizon.md:79
#: docs/master/urls.md:156
#, no-wrap
msgid "<a name=\"default-values\"></a>\n"
msgstr ""

#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  urls.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  urls.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/horizon.md:79 docs/8.x/urls.md:156 docs/master/horizon.md:79
#: docs/master/urls.md:156
#, no-wrap
msgid "Default Values"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:82 docs/master/horizon.md:82
msgid "Within Horizon's default configuration file, you will notice a `defaults` configuration option. This configuration option specifies the default values for your application's [supervisors](#supervisors). The supervisor's default configuration values will be merged into the supervisor's configuration for each environment, allowing you to avoid unnecessary repetition when defining your supervisors."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:84 docs/master/horizon.md:84
#, no-wrap
msgid "<a name=\"balancing-strategies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/horizon.md:84 docs/master/horizon.md:84
#, no-wrap
msgid "Balancing Strategies"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:87 docs/master/horizon.md:87
msgid "Unlike Laravel's default queue system, Horizon allows you to choose from three worker balancing strategies: `simple`, `auto`, and `false`. The `simple` strategy, which is the configuration file's default, splits incoming jobs evenly between worker processes:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:89 docs/master/horizon.md:89
#, no-wrap
msgid "    'balance' => 'simple',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:91 docs/master/horizon.md:91
msgid "The `auto` strategy adjusts the number of worker processes per queue based on the current workload of the queue. For example, if your `notifications` queue has 1,000 pending jobs while your `render` queue is empty, Horizon will allocate more workers to your `notifications` queue until the queue is empty."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:93 docs/master/horizon.md:93
msgid "When using the `auto` strategy, you may define the `minProcesses` and `maxProcesses` configuration options to control the minimum and the maximum number of worker processes Horizon should scale up and down to:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:108 docs/master/horizon.md:108
#, no-wrap
msgid "    'environments' => [\n"
"        'production' => [\n"
"            'supervisor-1' => [\n"
"                'connection' => 'redis',\n"
"                'queue' => ['default'],\n"
"                'balance' => 'auto',\n"
"                'minProcesses' => 1,\n"
"                'maxProcesses' => 10,\n"
"                'balanceMaxShift' => 1,\n"
"                'balanceCooldown' => 3,\n"
"                'tries' => 3,\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:110 docs/master/horizon.md:110
msgid "The `balanceMaxShift` and `balanceCooldown` configuration values to determine how quickly Horizon will scale to meet worker demand. In the example above, a maximum of one new process will be created or destroyed every three seconds. You are free to tweak these values as necessary based on your application's needs."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:112 docs/master/horizon.md:112
msgid "When the `balance` option is set to `false`, the default Laravel behavior will be used, which processes queues in the order they are listed in your configuration."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:114 docs/8.x/telescope.md:116 docs/master/horizon.md:114
#: docs/master/telescope.md:116
#, no-wrap
msgid "<a name=\"dashboard-authorization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/horizon.md:114 docs/8.x/telescope.md:116 docs/master/horizon.md:114
#: docs/master/telescope.md:116
#, no-wrap
msgid "Dashboard Authorization"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:117 docs/master/horizon.md:117
msgid "Horizon exposes a dashboard at the `/horizon` URI. By default, you will only be able to access this dashboard in the `local` environment. However, within your `app/Providers/HorizonServiceProvider.php` file, there is an [authorization gate](/docs/{{version}}/authorization#gates) definition. This authorization gate controls access to Horizon in **non-local** environments. You are free to modify this gate as needed to restrict access to your Horizon installation:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:133 docs/master/horizon.md:133
#, no-wrap
msgid "    /**\n"
"     * Register the Horizon gate.\n"
"     *\n"
"     * This gate determines who can access Horizon in non-local environments.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function gate()\n"
"    {\n"
"        Gate::define('viewHorizon', function ($user) {\n"
"            return in_array($user->email, [\n"
"                'taylor@laravel.com',\n"
"            ]);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:135 docs/master/horizon.md:135
#, no-wrap
msgid "<a name=\"alternative-authentication-strategies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:135 docs/master/horizon.md:135
#, no-wrap
msgid "Alternative Authentication Strategies"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:138 docs/master/horizon.md:138
msgid "Remember that Laravel automatically injects the authenticated user into the gate closure. If your application is providing Horizon security via another method, such as IP restrictions, then your Horizon users may not need to \"login\". Therefore, you will need to change `function ($user)` closure signature above to `function ($user = null)` in order to force Laravel to not require authentication."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:140 docs/master/horizon.md:140
#, no-wrap
msgid "<a name=\"upgrading-horizon\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:140 docs/master/horizon.md:140
#, no-wrap
msgid "Upgrading Horizon"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:143 docs/master/horizon.md:143
msgid "When upgrading to a new major version of Horizon, it's important that you carefully review [the upgrade guide](https://github.com/laravel/horizon/blob/master/UPGRADE.md). In addition, when upgrading to any new Horizon version, you should re-publish Horizon's assets:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:145 docs/master/horizon.md:145
#, no-wrap
msgid "    php artisan horizon:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:147 docs/master/horizon.md:147
msgid "To keep the assets up-to-date and avoid issues in future updates, you may add the `horizon:publish` command to the `post-update-cmd` scripts in your application's `composer.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:155 docs/master/horizon.md:155
#, no-wrap
msgid "    {\n"
"        \"scripts\": {\n"
"            \"post-update-cmd\": [\n"
"                \"@php artisan horizon:publish --ansi\"\n"
"            ]\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:157 docs/master/horizon.md:157
#, no-wrap
msgid "<a name=\"running-horizon\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:157 docs/master/horizon.md:157
#, no-wrap
msgid "Running Horizon"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:160 docs/master/horizon.md:160
msgid "Once you have configured your supervisors and workers in your application's `config/horizon.php` configuration file, you may start Horizon using the `horizon` Artisan command. This single command will start all of the configured worker processes for the current environment:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:162 docs/master/horizon.md:162
#, no-wrap
msgid "    php artisan horizon\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:164 docs/master/horizon.md:164
msgid "You may pause the Horizon process and instruct it to continue processing jobs using the `horizon:pause` and `horizon:continue` Artisan commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:166 docs/master/horizon.md:166
#, no-wrap
msgid "    php artisan horizon:pause\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:168 docs/master/horizon.md:168
#, no-wrap
msgid "    php artisan horizon:continue\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:170 docs/master/horizon.md:170
msgid "You may also pause and continue specific Horizon [supervisors](#supervisors) using the `horizon:pause-supervisor` and `horizon:continue-supervisor` Artisan commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:172 docs/master/horizon.md:172
#, no-wrap
msgid "    php artisan horizon:pause-supervisor supervisor-1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:174 docs/master/horizon.md:174
#, no-wrap
msgid "    php artisan horizon:continue-supervisor supervisor-1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:176 docs/master/horizon.md:176
msgid "You may check the current status of the Horizon process using the `horizon:status` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:178 docs/master/horizon.md:178
#, no-wrap
msgid "    php artisan horizon:status\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:180 docs/master/horizon.md:180
msgid "You may gracefully terminate the Horizon process using the `horizon:terminate` Artisan command. Any jobs that are currently being processed by will be completed and then Horizon will stop executing:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:182 docs/8.x/horizon.md:191 docs/master/horizon.md:182
#: docs/master/horizon.md:191
#, no-wrap
msgid "    php artisan horizon:terminate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:184 docs/master/horizon.md:184
#, no-wrap
msgid "<a name=\"deploying-horizon\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/horizon.md:184 docs/master/horizon.md:184
#, no-wrap
msgid "Deploying Horizon"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:187 docs/master/horizon.md:187
msgid "When you're ready to deploy Horizon to your application's actual server, you should configure a process monitor to monitor the `php artisan horizon` command and restart it if it exits unexpectedly. Don't worry, we'll discuss how to install a process monitor below."
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:189 docs/master/horizon.md:189
msgid "During your application's deployment process, you should instruct the Horizon process to terminate so that it will be restarted by your process monitor and receive your code changes:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:193 docs/8.x/queues.md:1487 docs/master/horizon.md:193
#: docs/master/queues.md:1425
#, no-wrap
msgid "<a name=\"installing-supervisor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:193 docs/8.x/queues.md:1487 docs/master/horizon.md:193
#: docs/master/queues.md:1425
#, no-wrap
msgid "Installing Supervisor"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:196 docs/master/horizon.md:196
msgid "Supervisor is a process monitor for the Linux operating system and will automatically restart your `horizon` process if it stops executing. To install Supervisor on Ubuntu, you may use the following command. If you are not using Ubuntu, you can likely install Supervisor using your operating system's package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:198 docs/8.x/queues.md:1492 docs/master/horizon.md:198
#: docs/master/queues.md:1430
#, no-wrap
msgid "    sudo apt-get install supervisor\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:200 docs/master/horizon.md:200
#, no-wrap
msgid "> {tip} If configuring Supervisor yourself sounds overwhelming, consider using [Laravel Forge](https://forge.laravel.com), which will automatically install and configure Supervisor for your Laravel projects.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:202 docs/8.x/queues.md:1480 docs/master/horizon.md:202
#: docs/master/queues.md:1418
#, no-wrap
msgid "<a name=\"supervisor-configuration\"></a>\n"
msgstr ""

#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  horizon.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/horizon.md:202 docs/8.x/queues.md:1480 docs/master/horizon.md:202
#: docs/master/queues.md:1418
#, no-wrap
msgid "Supervisor Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:205 docs/master/horizon.md:205
msgid "Supervisor configuration files are typically stored within your server's `/etc/supervisor/conf.d` directory. Within this directory, you may create any number of configuration files that instruct supervisor how your processes should be monitored. For example, let's create a `horizon.conf` file that starts and monitors a `horizon` process:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:215 docs/master/horizon.md:215
#, no-wrap
msgid "    [program:horizon]\n"
"    process_name=%(program_name)s\n"
"    command=php /home/forge/example.com/artisan horizon\n"
"    autostart=true\n"
"    autorestart=true\n"
"    user=forge\n"
"    redirect_stderr=true\n"
"    stdout_logfile=/home/forge/example.com/horizon.log\n"
"    stopwaitsecs=3600\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:217 docs/8.x/queues.md:1518 docs/master/horizon.md:217
#: docs/master/queues.md:1456
#, no-wrap
msgid "> {note} You should ensure that the value of `stopwaitsecs` is greater than the number of seconds consumed by your longest running job. Otherwise, Supervisor may kill the job before it is finished processing.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:219 docs/8.x/queues.md:1520 docs/master/horizon.md:219
#: docs/master/queues.md:1458
#, no-wrap
msgid "<a name=\"starting-supervisor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:219 docs/8.x/queues.md:1520 docs/master/horizon.md:219
#: docs/master/queues.md:1458
#, no-wrap
msgid "Starting Supervisor"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:222 docs/master/horizon.md:222
msgid "Once the configuration file has been created, you may update the Supervisor configuration and start the monitored processes using the following commands:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:224 docs/master/horizon.md:224
#, no-wrap
msgid "    sudo supervisorctl reread\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:226 docs/master/horizon.md:226
#, no-wrap
msgid "    sudo supervisorctl update\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:228 docs/master/horizon.md:228
#, no-wrap
msgid "    sudo supervisorctl start horizon\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:230 docs/master/horizon.md:230
#, no-wrap
msgid "> {tip} For more information on running Supervisor, consult the [Supervisor documentation](http://supervisord.org/index.html).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:232 docs/master/horizon.md:232
#, no-wrap
msgid "<a name=\"tags\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:232 docs/master/horizon.md:232
#, no-wrap
msgid "Tags"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:235 docs/master/horizon.md:235
msgid "Horizon allows you to assign âtagsâ to jobs, including mailables, broadcast events, notifications, and queued event listeners. In fact, Horizon will intelligently and automatically tag most jobs depending on the Eloquent models that are attached to the job. For example, take a look at the following job:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:239 docs/8.x/queues.md:152 docs/8.x/queues.md:805
#: docs/8.x/queues.md:870 docs/8.x/queues.md:911 docs/8.x/queues.md:947
#: docs/8.x/queues.md:1002 docs/8.x/queues.md:1081 docs/8.x/queues.md:1592
#: docs/master/horizon.md:239 docs/master/queues.md:151
#: docs/master/queues.md:743 docs/master/queues.md:808
#: docs/master/queues.md:849 docs/master/queues.md:885
#: docs/master/queues.md:940 docs/master/queues.md:1019
#: docs/master/queues.md:1530
#, no-wrap
msgid "    namespace App\\Jobs;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:246 docs/master/horizon.md:246
#, no-wrap
msgid "    use App\\Models\\Video;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Foundation\\Bus\\Dispatchable;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:250 docs/master/horizon.md:250
#, no-wrap
msgid "    class RenderVideo implements ShouldQueue\n"
"    {\n"
"        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:257 docs/master/horizon.md:257
#, no-wrap
msgid "        /**\n"
"         * The video instance.\n"
"         *\n"
"         * @var \\App\\Models\\Video\n"
"         */\n"
"        public $video;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:268 docs/master/horizon.md:268
#, no-wrap
msgid "        /**\n"
"         * Create a new job instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Video  $video\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Video $video)\n"
"        {\n"
"            $this->video = $video;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:279 docs/master/horizon.md:279
#, no-wrap
msgid "        /**\n"
"         * Execute the job.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function handle()\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:281 docs/master/horizon.md:281
msgid "If this job is queued with an `App\\Models\\Video` instance that has an `id` attribute of `1`, it will automatically receive the tag `App\\Models\\Video:1`. This is because Horizon will search the job's properties for any Eloquent models. If Eloquent models are found, Horizon will intelligently tag the job using the model's class name and primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:284 docs/master/horizon.md:284
#, no-wrap
msgid "    use App\\Jobs\\RenderVideo;\n"
"    use App\\Models\\Video;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:286 docs/master/horizon.md:286
#, no-wrap
msgid "    $video = Video::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:288 docs/master/horizon.md:288
#, no-wrap
msgid "    RenderVideo::dispatch($video);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:290 docs/master/horizon.md:290
#, no-wrap
msgid "<a name=\"manually-tagging-jobs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:290 docs/master/horizon.md:290
#, no-wrap
msgid "Manually Tagging Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:293 docs/master/horizon.md:293
msgid "If you would like to manually define the tags for one of your queueable objects, you may define a `tags` method on the class:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:306 docs/master/horizon.md:306
#, no-wrap
msgid "    class RenderVideo implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * Get the tags that should be assigned to the job.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function tags()\n"
"        {\n"
"            return ['render', 'video:'.$this->video->id];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:311 docs/master/horizon.md:311
#, no-wrap
msgid "> {note} When configuring Horizon to send Slack or SMS notifications, you should review the [prerequisites for the relevant notification channel](/docs/{{version}}/notifications).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:313 docs/master/horizon.md:313
msgid "If you would like to be notified when one of your queues has a long wait time, you may use the `Horizon::routeMailNotificationsTo`, `Horizon::routeSlackNotificationsTo`, and `Horizon::routeSmsNotificationsTo` methods. You may call these methods from the `boot` method of your application's `App\\Providers\\HorizonServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:322 docs/master/horizon.md:322
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        parent::boot();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:327 docs/master/horizon.md:327
#, no-wrap
msgid "        Horizon::routeSmsNotificationsTo('15556667777');\n"
"        Horizon::routeMailNotificationsTo('example@example.com');\n"
"        Horizon::routeSlackNotificationsTo('slack-webhook-url', '#channel');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:329 docs/master/horizon.md:329
#, no-wrap
msgid "<a name=\"configuring-notification-wait-time-thresholds\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/horizon.md:329 docs/master/horizon.md:329
#, no-wrap
msgid "Configuring Notification Wait Time Thresholds"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:332 docs/master/horizon.md:332
msgid "You may configure how many seconds are considered a \"long wait\" within your application's `config/horizon.php` configuration file. The `waits` configuration option within this file allows you to control the long wait threshold for each connection / queue combination:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:337 docs/master/horizon.md:337
#, no-wrap
msgid "    'waits' => [\n"
"        'redis:default' => 60,\n"
"        'redis:critical,high' => 90,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:339 docs/master/horizon.md:339
#, no-wrap
msgid "<a name=\"metrics\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:339 docs/master/horizon.md:339
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:342 docs/master/horizon.md:342
msgid "Horizon includes a metrics dashboard which provides information regarding your job and queue wait times and throughput. In order to populate this dashboard, you should configure Horizon's `snapshot` Artisan command to run every five minutes via your application's [scheduler](/docs/{{version}}/scheduling):"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:353 docs/master/horizon.md:353
#, no-wrap
msgid "    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->command('horizon:snapshot')->everyFiveMinutes();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:355 docs/master/horizon.md:355
#, no-wrap
msgid "<a name=\"deleting-failed-jobs\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:355 docs/master/horizon.md:355
#, no-wrap
msgid "Deleting Failed Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:358 docs/master/horizon.md:358
msgid "If you would like to delete a failed job, you may use the `horizon:forget` command. The `horizon:forget` command accepts the ID of the failed job as its only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:360 docs/master/horizon.md:360
#, no-wrap
msgid "    php artisan horizon:forget 5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:362 docs/8.x/queues.md:1732 docs/master/horizon.md:362
#: docs/master/queues.md:1670
#, no-wrap
msgid "<a name=\"clearing-jobs-from-queues\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/horizon.md:362 docs/8.x/queues.md:1732 docs/master/horizon.md:362
#: docs/master/queues.md:1670
#, no-wrap
msgid "Clearing Jobs From Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:365 docs/master/horizon.md:365
msgid "If you would like to delete all jobs from your application's default queue, you may do so using the `horizon:clear` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:367 docs/master/horizon.md:367
#, no-wrap
msgid "    php artisan horizon:clear\n"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:369 docs/master/horizon.md:369
msgid "You may provide the `queue` option to delete jobs from a specific queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/horizon.md:370 docs/master/horizon.md:370
#, no-wrap
msgid "    php artisan horizon:clear --queue=emails\n"
msgstr ""

#. type: Title #
#: docs/8.x/http-client.md:1 docs/master/http-client.md:1
#, no-wrap
msgid "HTTP Client"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/http-client.md:15 docs/8.x/http-tests.md:17
#: docs/master/http-client.md:15 docs/master/http-tests.md:16
msgid "[Making Requests](#making-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Request Data](#request-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Headers](#headers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Timeout](#timeout)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Retries](#retries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/8.x/queues.md:44
#: docs/master/http-client.md:15 docs/master/queues.md:43
msgid "[Error Handling](#error-handling)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Guzzle Options](#guzzle-options)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Faking Responses](#faking-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-client.md:15 docs/master/http-client.md:15
msgid "[Inspecting Requests](#inspecting-requests)"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:20 docs/master/http-client.md:20
msgid "Laravel provides an expressive, minimal API around the [Guzzle HTTP client](http://docs.guzzlephp.org/en/stable/), allowing you to quickly make outgoing HTTP requests to communicate with other web applications. Laravel's wrapper around Guzzle is focused on its most common use cases and a wonderful developer experience."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:22 docs/master/http-client.md:22
msgid "Before getting started, you should ensure that you have installed the Guzzle package as a dependency of your application. By default, Laravel automatically includes this dependency. However, if you have previously removed the package, you may install it again via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:24 docs/8.x/mail.md:45 docs/8.x/scheduling.md:415
#: docs/master/http-client.md:24 docs/master/mail.md:45
#: docs/master/scheduling.md:415
#, no-wrap
msgid "    composer require guzzlehttp/guzzle\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:26 docs/8.x/http-tests.md:49
#: docs/master/http-client.md:26 docs/master/http-tests.md:48
#, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-client.md:26 docs/8.x/http-tests.md:49
#: docs/master/http-client.md:26 docs/master/http-tests.md:48
#, no-wrap
msgid "Making Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:29 docs/master/http-client.md:29
msgid "To make requests, you may use the `get`, `post`, `put`, `patch`, and `delete` methods provided by the `Http` facade. First, let's examine how to make a basic `GET` request to another URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:31 docs/8.x/http-client.md:65
#: docs/8.x/http-client.md:226 docs/8.x/passport.md:485
#: docs/8.x/passport.md:651 docs/8.x/passport.md:671 docs/8.x/passport.md:819
#: docs/8.x/passport.md:956 docs/master/http-client.md:31
#: docs/master/http-client.md:57 docs/master/http-client.md:218
#: docs/master/passport.md:483 docs/master/passport.md:649
#: docs/master/passport.md:669 docs/master/passport.md:817
#: docs/master/passport.md:954
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:33 docs/master/http-client.md:33
#, no-wrap
msgid "    $response = Http::get('http://example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:35 docs/master/http-client.md:35
msgid "The `get` method returns an instance of `Illuminate\\Http\\Client\\Response`, which provides a variety of methods that may be used to inspect the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:47
#, no-wrap
msgid "    $response->body() : string;\n"
"    $response->json() : array|mixed;\n"
"    $response->collect() : Illuminate\\Support\\Collection;\n"
"    $response->status() : int;\n"
"    $response->ok() : bool;\n"
"    $response->successful() : bool;\n"
"    $response->failed() : bool;\n"
"    $response->serverError() : bool;\n"
"    $response->clientError() : bool;\n"
"    $response->header($header) : string;\n"
"    $response->headers() : array;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:49 docs/master/http-client.md:48
msgid "The `Illuminate\\Http\\Client\\Response` object also implements the PHP `ArrayAccess` interface, allowing you to access JSON response data directly on the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:51 docs/master/http-client.md:50
#, no-wrap
msgid "    return Http::get('http://example.com/users/1')['name'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:53
#, no-wrap
msgid "<a name=\"dumping-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:53
#, no-wrap
msgid "Dumping Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:56
msgid "If you would like to dump the outgoing request instance before it is sent and terminate the script's execution, you may add the `dd` method to the beginning of your request definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:58
#, no-wrap
msgid "    return Http::dd()->get('http://example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:60 docs/master/http-client.md:52
#, no-wrap
msgid "<a name=\"request-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:60 docs/master/http-client.md:52
#, no-wrap
msgid "Request Data"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:63 docs/master/http-client.md:55
msgid "Of course, it is common when making `POST`, `PUT`, and `PATCH` requests to send additional data with your request, so these methods accept an array of data as their second argument. By default, data will be sent using the `application/json` content type:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:70 docs/master/http-client.md:62
#, no-wrap
msgid "    $response = Http::post('http://example.com/users', [\n"
"        'name' => 'Steve',\n"
"        'role' => 'Network Administrator',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:72 docs/master/http-client.md:64
#, no-wrap
msgid "<a name=\"get-request-query-parameters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:72 docs/master/http-client.md:64
#, no-wrap
msgid "GET Request Query Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:75 docs/master/http-client.md:67
msgid "When making `GET` requests, you may either append a query string to the URL directly or pass an array of key / value pairs as the second argument to the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:80 docs/master/http-client.md:72
#, no-wrap
msgid "    $response = Http::get('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'page' => 1,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:82 docs/master/http-client.md:74
#, no-wrap
msgid "<a name=\"sending-form-url-encoded-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:82 docs/master/http-client.md:74
#, no-wrap
msgid "Sending Form URL Encoded Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:85 docs/master/http-client.md:77
msgid "If you would like to send data using the `application/x-www-form-urlencoded` content type, you should call the `asForm` method before making your request:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:90 docs/master/http-client.md:82
#, no-wrap
msgid "    $response = Http::asForm()->post('http://example.com/users', [\n"
"        'name' => 'Sara',\n"
"        'role' => 'Privacy Consultant',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:92 docs/master/http-client.md:84
#, no-wrap
msgid "<a name=\"sending-a-raw-request-body\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:92 docs/master/http-client.md:84
#, no-wrap
msgid "Sending A Raw Request Body"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:95 docs/master/http-client.md:87
msgid "You may use the `withBody` method if you would like to provide a raw request body when making a request. The content type may be provided via the method's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:99 docs/master/http-client.md:91
#, no-wrap
msgid "    $response = Http::withBody(\n"
"        base64_encode($photo), 'image/jpeg'\n"
"    )->post('http://example.com/photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:101 docs/master/http-client.md:93
#, no-wrap
msgid "<a name=\"multi-part-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:101 docs/master/http-client.md:93
#, no-wrap
msgid "Multi-Part Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:104 docs/master/http-client.md:96
msgid "If you would like to send files as multi-part requests, you should call the `attach` method before making your request. This method accepts the name of the file and its contents. If needed, you may provide a third argument which will be considered the file's filename:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:108 docs/master/http-client.md:100
#, no-wrap
msgid "    $response = Http::attach(\n"
"        'attachment', file_get_contents('photo.jpg'), 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:110 docs/master/http-client.md:102
msgid "Instead of passing the raw contents of a file, you may pass a stream resource:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:112 docs/master/http-client.md:104
#, no-wrap
msgid "    $photo = fopen('photo.jpg', 'r');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:116 docs/master/http-client.md:108
#, no-wrap
msgid "    $response = Http::attach(\n"
"        'attachment', $photo, 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:118 docs/master/http-client.md:110
#, no-wrap
msgid "<a name=\"headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:118 docs/master/http-client.md:110
#, no-wrap
msgid "Headers"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:121 docs/master/http-client.md:113
msgid "Headers may be added to requests using the `withHeaders` method. This `withHeaders` method accepts an array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:128 docs/master/http-client.md:120
#, no-wrap
msgid "    $response = Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"        'X-Second' => 'bar'\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:133 docs/master/http-client.md:125
msgid "You may specify basic and digest authentication credentials using the `withBasicAuth` and `withDigestAuth` methods, respectively:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:136 docs/master/http-client.md:128
#, no-wrap
msgid "    // Basic authentication...\n"
"    $response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:139 docs/master/http-client.md:131
#, no-wrap
msgid "    // Digest authentication...\n"
"    $response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:141 docs/master/http-client.md:133
#, no-wrap
msgid "<a name=\"bearer-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:141 docs/master/http-client.md:133
#, no-wrap
msgid "Bearer Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:144 docs/master/http-client.md:136
msgid "If you would like to quickly add a bearer token to the request's `Authorization` header, you may use the `withToken` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:146 docs/master/http-client.md:138
#, no-wrap
msgid "    $response = Http::withToken('token')->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:148 docs/8.x/queues.md:985
#: docs/master/http-client.md:140 docs/master/queues.md:923
#, no-wrap
msgid "<a name=\"timeout\"></a>\n"
msgstr ""

#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  http-client.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/http-client.md:148 docs/8.x/queues.md:985
#: docs/master/http-client.md:140 docs/master/queues.md:923
#, no-wrap
msgid "Timeout"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:151 docs/master/http-client.md:143
msgid "The `timeout` method may be used to specify the maximum number of seconds to wait for a response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:153 docs/master/http-client.md:145
#, no-wrap
msgid "    $response = Http::timeout(3)->get(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:155 docs/master/http-client.md:147
msgid "If the given timeout is exceeded, an instance of `Illuminate\\Http\\Client\\ConnectionException` will be thrown."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:157 docs/master/http-client.md:149
#, no-wrap
msgid "<a name=\"retries\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:157 docs/master/http-client.md:149
#, no-wrap
msgid "Retries"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:160 docs/master/http-client.md:152
msgid "If you would like HTTP client to automatically retry the request if a client or server error occurs, you may use the `retry` method. The `retry` method accepts two arguments: the maximum number of times the request should be attempted and the number of milliseconds that Laravel should wait in between attempts:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:162 docs/master/http-client.md:154
#, no-wrap
msgid "    $response = Http::retry(3, 100)->post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:164 docs/master/http-client.md:156
msgid "If all of the requests fail, an instance of `Illuminate\\Http\\Client\\RequestException` will be thrown."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:166 docs/8.x/queues.md:1016
#: docs/master/http-client.md:158 docs/master/queues.md:954
#, no-wrap
msgid "<a name=\"error-handling\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:169 docs/master/http-client.md:161
msgid "Unlike Guzzle's default behavior, Laravel's HTTP client wrapper does not throw exceptions on client or server errors (`400` and `500` level responses from servers). You may determine if one of these errors was returned using the `successful`, `clientError`, or `serverError` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:172 docs/master/http-client.md:164
#, no-wrap
msgid "    // Determine if the status code is >= 200 and < 300...\n"
"    $response->successful();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:175 docs/master/http-client.md:167
#, no-wrap
msgid "    // Determine if the status code is >= 400...\n"
"    $response->failed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:178 docs/master/http-client.md:170
#, no-wrap
msgid "    // Determine if the response has a 400 level status code...\n"
"    $response->clientError();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:181 docs/master/http-client.md:173
#, no-wrap
msgid "    // Determine if the response has a 500 level status code...\n"
"    $response->serverError();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:183 docs/master/http-client.md:175
#, no-wrap
msgid "<a name=\"throwing-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:183 docs/master/http-client.md:175
#, no-wrap
msgid "Throwing Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:186 docs/master/http-client.md:178
msgid "If you have a response instance and would like to throw an instance of `Illuminate\\Http\\Client\\RequestException` if the response status code indicates a client or server error, you may use the `throw` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:188 docs/8.x/http-client.md:230
#: docs/master/http-client.md:180 docs/master/http-client.md:222
#, no-wrap
msgid "    $response = Http::post(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:191 docs/master/http-client.md:183
#, no-wrap
msgid "    // Throw an exception if a client or server error occurred...\n"
"    $response->throw();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:193 docs/master/http-client.md:185
#, no-wrap
msgid "    return $response['user']['id'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:195 docs/master/http-client.md:187
msgid "The `Illuminate\\Http\\Client\\RequestException` instance has a public `$response` property which will allow you to inspect the returned response."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:197 docs/master/http-client.md:189
msgid "The `throw` method returns the response instance if no error occurred, allowing you to chain other operations onto the `throw` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:199 docs/master/http-client.md:191
#, no-wrap
msgid "    return Http::post(...)->throw()->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:201 docs/master/http-client.md:193
msgid "If you would like to perform some additional logic before the exception is thrown, you may pass a closure to the `throw` method. The exception will be thrown automatically after the closure is invoked, so you do not need to re-throw the exception from within the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:205 docs/master/http-client.md:197
#, no-wrap
msgid "    return Http::post(...)->throw(function ($response, $e) {\n"
"        //\n"
"    })->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:207 docs/master/http-client.md:199
#, no-wrap
msgid "<a name=\"guzzle-options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:207 docs/master/http-client.md:199
#, no-wrap
msgid "Guzzle Options"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:210 docs/master/http-client.md:202
msgid "You may specify additional [Guzzle request options](http://docs.guzzlephp.org/en/stable/request-options.html) using the `withOptions` method. The `withOptions` method accepts an array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:214 docs/master/http-client.md:206
#, no-wrap
msgid "    $response = Http::withOptions([\n"
"        'debug' => true,\n"
"    ])->get('http://example.com/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:219 docs/master/http-client.md:211
msgid "Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's HTTP wrapper is no exception. The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:221 docs/master/http-client.md:213
#, no-wrap
msgid "<a name=\"faking-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:221 docs/master/http-client.md:213
#, no-wrap
msgid "Faking Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:224 docs/master/http-client.md:216
msgid "For example, to instruct the HTTP client to return empty, `200` status code responses for every request, you may call the `fake` method with no arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:228 docs/8.x/http-client.md:305
#: docs/8.x/http-client.md:326 docs/8.x/http-client.md:339
#: docs/master/http-client.md:220 docs/master/http-client.md:297
#: docs/master/http-client.md:318 docs/master/http-client.md:331
#, no-wrap
msgid "    Http::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:232 docs/master/http-client.md:224
#, no-wrap
msgid "> {note} When faking requests, HTTP client middleware are not executed. You should define expectations for faked responses as if these middleware have run correctly.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:234 docs/master/http-client.md:226
#, no-wrap
msgid "<a name=\"faking-specific-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:234 docs/master/http-client.md:226
#, no-wrap
msgid "Faking Specific URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:237 docs/master/http-client.md:229
msgid "Alternatively, you may pass an array to the `fake` method. The array's keys should represent URL patterns that you wish to fake and their associated responses. The `*` character may be used as a wildcard character. Any requests made to URLs that have not been faked will actually be executed. You may use the `Http` facade's `response` method to construct stub / fake responses for these endpoints:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:241 docs/master/http-client.md:233
#, no-wrap
msgid "    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:245 docs/master/http-client.md:237
#, no-wrap
msgid "        // Stub a string response for Google endpoints...\n"
"        'google.com/*' => Http::response('Hello World', 200, $headers),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:247 docs/master/http-client.md:239
msgid "If you would like to specify a fallback URL pattern that will stub all unmatched URLs, you may use a single `*` character:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:251 docs/master/http-client.md:243
#, no-wrap
msgid "    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, ['Headers']),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:255 docs/master/http-client.md:247
#, no-wrap
msgid "        // Stub a string response for all other endpoints...\n"
"        '*' => Http::response('Hello World', 200, ['Headers']),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:257 docs/master/http-client.md:249
#, no-wrap
msgid "<a name=\"faking-response-sequences\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:257 docs/master/http-client.md:249
#, no-wrap
msgid "Faking Response Sequences"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:260 docs/master/http-client.md:252
msgid "Sometimes you may need to specify that a single URL should return a series of fake responses in a specific order. You may accomplish this using the `Http::sequence` method to build the responses:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:268 docs/master/http-client.md:260
#, no-wrap
msgid "    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->pushStatus(404),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:270 docs/master/http-client.md:262
msgid "When all of the responses in a response sequence have been consumed, any further requests will cause the response sequence to throw an exception. If you would like to specify a default response that should be returned when a sequence is empty, you may use the `whenEmpty` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:278 docs/master/http-client.md:270
#, no-wrap
msgid "    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->whenEmpty(Http::response()),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:280 docs/master/http-client.md:272
msgid "If you would like to fake a sequence of responses but do not need to specify a specific URL pattern that should be faked, you may use the `Http::fakeSequence` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:284 docs/master/http-client.md:276
#, no-wrap
msgid "    Http::fakeSequence()\n"
"            ->push('Hello World', 200)\n"
"            ->whenEmpty(Http::response());\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:286 docs/master/http-client.md:278
#, no-wrap
msgid "<a name=\"fake-callback\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-client.md:286 docs/master/http-client.md:278
#, no-wrap
msgid "Fake Callback"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:289 docs/master/http-client.md:281
msgid "If you require more complicated logic to determine what responses to return for certain endpoints, you may pass a closure to the `fake` method. This closure will receive an instance of `Illuminate\\Http\\Client\\Request` and should return a response instance. Within your closure, you may perform whatever logic is necessary to determine what type of response to return:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:293 docs/master/http-client.md:285
#, no-wrap
msgid "    Http::fake(function ($request) {\n"
"        return Http::response('Hello World', 200);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:295 docs/master/http-client.md:287
#, no-wrap
msgid "<a name=\"inspecting-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-client.md:295 docs/master/http-client.md:287
#, no-wrap
msgid "Inspecting Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:298 docs/master/http-client.md:290
msgid "When faking responses, you may occasionally wish to inspect the requests the client receives in order to make sure your application is sending the correct data or headers. You may accomplish this by calling the `Http::assertSent` method after calling `Http::fake`."
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:300 docs/master/http-client.md:292
msgid "The `assertSent` method accepts a closure which will receive an `Illuminate\\Http\\Client\\Request` instance and should return a boolean value indicating if the request matches your expectations. In order for the test to pass, at least one request must have been issued matching the given expectations:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:303 docs/8.x/http-client.md:324
#: docs/master/http-client.md:295 docs/master/http-client.md:316
#, no-wrap
msgid "    use Illuminate\\Http\\Client\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:312 docs/master/http-client.md:304
#, no-wrap
msgid "    Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:319 docs/master/http-client.md:311
#, no-wrap
msgid "    Http::assertSent(function (Request $request) {\n"
"        return $request->hasHeader('X-First', 'foo') &&\n"
"               $request->url() == 'http://example.com/users' &&\n"
"               $request['name'] == 'Taylor' &&\n"
"               $request['role'] == 'Developer';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:321 docs/master/http-client.md:313
msgid "If needed, you may assert that a specific request was not sent using the `assertNotSent` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:331 docs/master/http-client.md:323
#, no-wrap
msgid "    Http::post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:335 docs/master/http-client.md:327
#, no-wrap
msgid "    Http::assertNotSent(function (Request $request) {\n"
"        return $request->url() === 'http://example.com/posts';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:337 docs/master/http-client.md:329
msgid "Or, you may use the `assertNothingSent` method to assert that no requests were sent during the test:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-client.md:340 docs/master/http-client.md:332
#, no-wrap
msgid "    Http::assertNothingSent();\n"
msgstr ""

#. type: Title #
#: docs/8.x/http-tests.md:1 docs/master/http-tests.md:1
#, no-wrap
msgid "HTTP Tests"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Customizing Request Headers](#customizing-request-headers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Session / Authentication](#session-and-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Debugging Responses](#debugging-responses)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Testing JSON APIs](#testing-json-apis)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17
msgid "[Fluent JSON Testing](#fluent-json-testing)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Testing File Uploads](#testing-file-uploads)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Testing Views](#testing-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Rendering Blade & Components](#rendering-blade-and-components)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Response Assertions](#response-assertions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/http-tests.md:17 docs/master/http-tests.md:16
msgid "[Authentication Assertions](#authentication-assertions)"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:22 docs/master/http-tests.md:21
msgid "Laravel provides a very fluent API for making HTTP requests to your application and examining the responses. For example, take a look at the feature test defined below:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:41 docs/8.x/http-tests.md:73
#: docs/master/http-tests.md:40 docs/master/http-tests.md:72
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_a_basic_request()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:45 docs/8.x/http-tests.md:77
#: docs/master/http-tests.md:44 docs/master/http-tests.md:76
#, no-wrap
msgid "            $response->assertStatus(200);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:47 docs/master/http-tests.md:46
msgid "The `get` method makes a `GET` request into the application, while the `assertStatus` method asserts that the returned response should have the given HTTP status code. In addition to this simple assertion, Laravel also contains a variety of assertions for inspecting the response headers, content, JSON structure, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:52 docs/master/http-tests.md:51
msgid "To make a request to your application, you may invoke the `get`, `post`, `put`, `patch`, or `delete` methods within your test. These methods do not actually issue a \"real\" HTTP request to your application. Instead, the entire network request is simulated internally."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:54 docs/master/http-tests.md:53
msgid "Instead of returning an `Illuminate\\Http\\Response` instance, test request methods return an instance of `Illuminate\\Testing\\TestResponse`, which provides a [variety of helpful assertions](#available-assertions) that allow you to inspect your application's responses:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:79 docs/master/http-tests.md:78
#, no-wrap
msgid "> {tip} For convenience, the CSRF middleware is automatically disabled when running tests.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:81 docs/master/http-tests.md:80
#, no-wrap
msgid "<a name=\"customizing-request-headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:81 docs/master/http-tests.md:80
#, no-wrap
msgid "Customizing Request Headers"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:84 docs/master/http-tests.md:83
msgid "You may use the `withHeaders` method to customize the request's headers before it is sent to the application. This method allows you to add any custom headers you would like to the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:90 docs/8.x/http-tests.md:118
#: docs/8.x/http-tests.md:142 docs/8.x/http-tests.md:218
#: docs/8.x/http-tests.md:254 docs/8.x/http-tests.md:284
#: docs/8.x/http-tests.md:461 docs/master/http-tests.md:89
#: docs/master/http-tests.md:117 docs/master/http-tests.md:141
#: docs/master/http-tests.md:217 docs/master/http-tests.md:253
#: docs/master/http-tests.md:283 docs/master/http-tests.md:367
#, no-wrap
msgid "    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:103 docs/master/http-tests.md:102
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_interacting_with_headers()\n"
"        {\n"
"            $response = $this->withHeaders([\n"
"                'X-Header' => 'Value',\n"
"            ])->post('/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:107 docs/master/http-tests.md:106
#, no-wrap
msgid "            $response->assertStatus(201);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:112 docs/master/http-tests.md:111
msgid "You may use the `withCookie` or `withCookies` methods to set cookie values before making a request. The `withCookie` method accepts a cookie name and value as its two arguments, while the `withCookies` method accepts an array of name / value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:124 docs/master/http-tests.md:123
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_cookies()\n"
"        {\n"
"            $response = $this->withCookie('color', 'blue')->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:131 docs/master/http-tests.md:130
#, no-wrap
msgid "            $response = $this->withCookies([\n"
"                'color' => 'blue',\n"
"                'name' => 'Taylor',\n"
"            ])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:133 docs/master/http-tests.md:132
#, no-wrap
msgid "<a name=\"session-and-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:133 docs/master/http-tests.md:132
#, no-wrap
msgid "Session / Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:136 docs/master/http-tests.md:135
msgid "Laravel provides several helpers for interacting with the session during HTTP testing. First, you may set the session data to a given array using the `withSession` method. This is useful for loading the session with data before issuing a request to your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:150 docs/master/http-tests.md:149
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_the_session()\n"
"        {\n"
"            $response = $this->withSession(['banned' => false])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:152 docs/master/http-tests.md:151
msgid "Laravel's session is typically used to maintain state for the currently authenticated user. Therefore, the `actingAs` helper method provides a simple way to authenticate a given user as the current user. For example, we may use a [model factory](/docs/{{version}}/database-testing#writing-factories) to generate and authenticate a user:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:159 docs/master/http-tests.md:158
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:165 docs/master/http-tests.md:164
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_an_action_that_requires_authentication()\n"
"        {\n"
"            $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:171 docs/master/http-tests.md:170
#, no-wrap
msgid "            $response = $this->actingAs($user)\n"
"                             ->withSession(['banned' => false])\n"
"                             ->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:173 docs/master/http-tests.md:172
msgid "You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the `actingAs` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:175 docs/master/http-tests.md:174
#, no-wrap
msgid "    $this->actingAs($user, 'api')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:177 docs/master/http-tests.md:176
#, no-wrap
msgid "<a name=\"debugging-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:177 docs/master/http-tests.md:176
#, no-wrap
msgid "Debugging Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:180 docs/master/http-tests.md:179
msgid "After making a test request to your application, the `dump`, `dumpHeaders`, and `dumpSession` methods may be used to examine and debug the response contents:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:199 docs/master/http-tests.md:198
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:201 docs/master/http-tests.md:200
#, no-wrap
msgid "            $response->dumpHeaders();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:203 docs/master/http-tests.md:202
#, no-wrap
msgid "            $response->dumpSession();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:207 docs/master/http-tests.md:206
#, no-wrap
msgid "            $response->dump();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:209 docs/master/http-tests.md:208
#, no-wrap
msgid "<a name=\"testing-json-apis\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-tests.md:209 docs/master/http-tests.md:208
#, no-wrap
msgid "Testing JSON APIs"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:212 docs/master/http-tests.md:211
msgid "Laravel also provides several helpers for testing JSON APIs and their responses. For example, the `json`, `getJson`, `postJson`, `putJson`, `patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue JSON requests with various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let's write a test to make a `POST` request to `/api/user` and assert that the expected JSON data was returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:229 docs/master/http-tests.md:228
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_making_an_api_request()\n"
"        {\n"
"            $response = $this->postJson('/api/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:237 docs/master/http-tests.md:236
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:239 docs/master/http-tests.md:238
msgid "In addition, JSON response data may be accessed as array variables on the response, making it convenient for you to inspect the individual values returned within a JSON response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:241 docs/master/http-tests.md:240
#, no-wrap
msgid "    $this->assertTrue($response['created']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:243 docs/master/http-tests.md:242
#, no-wrap
msgid "> {tip} The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:245 docs/master/http-tests.md:244
#, no-wrap
msgid "<a name=\"verifying-exact-match\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:245 docs/master/http-tests.md:244
#, no-wrap
msgid "Asserting Exact JSON Matches"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:248 docs/master/http-tests.md:247
msgid "As previously mentioned, the `assertJson` method may be used to assert that a fragment of JSON exists within the JSON response. If you would like to verify that a given array **exactly matches** the JSON returned by your application, you should use the `assertExactJson` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:265 docs/master/http-tests.md:264
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_an_exact_json_match()\n"
"        {\n"
"            $response = $this->json('POST', '/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:273 docs/master/http-tests.md:272
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertExactJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:275 docs/master/http-tests.md:274
#, no-wrap
msgid "<a name=\"verifying-json-paths\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:275 docs/master/http-tests.md:274
#, no-wrap
msgid "Asserting On JSON Paths"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:278 docs/master/http-tests.md:277
msgid "If you would like to verify that the JSON response contains the given data at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:295 docs/master/http-tests.md:294
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_a_json_paths_value()\n"
"        {\n"
"            $response = $this->json('POST', '/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:301 docs/master/http-tests.md:300
#, no-wrap
msgid "            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJsonPath('team.owner.name', 'Darian');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:303
#, no-wrap
msgid "<a name=\"fluent-json-testing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:303
#, no-wrap
msgid "Fluent JSON Testing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:306
msgid "Laravel also offers a beautiful way to fluently test your application's JSON responses. To get started, pass a closure to the `assertJson` method. This closure will be invoked with an instance of `Illuminate\\Testing\\Fluent\\AssertableJson` which can be used to make assertions against the JSON that was returned by your application. The `where` method may be used to make assertions against a particular attribute of the JSON, while the `missing` method may be used to assert that a particular attribute is missing from the JSON:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:308
#, no-wrap
msgid "    use Illuminate\\Testing\\Fluent\\AssertableJson;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:317
#, no-wrap
msgid "    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_fluent_json()\n"
"    {\n"
"        $response = $this->json('GET', '/users/1');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:326
#, no-wrap
msgid "        $response\n"
"            ->assertJson(fn (AssertableJson $json) =>\n"
"                $json->where('id', 1)\n"
"                     ->where('name', 'Victoria Faith')\n"
"                     ->missing('password')\n"
"                     ->etc()\n"
"            );\n"
"    }\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:327
#, no-wrap
msgid "Understanding The `etc` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:330
msgid "In the example above, you may have noticed we invoked the `etc` method at the end of our assertion chain. This method informs Laravel that there may be other attributes present on the JSON object. If the `etc` method is not used, the test will fail if other attributes that you did not make assertions against exist on the JSON object."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:332
msgid "The intention behind this behavior is to protect you from unintentionally exposing sensitive information in your JSON responses by forcing you to either explicitly make an assertion against the attribute or explicitly allow additional attributes via the `etc` method."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:334
#, no-wrap
msgid "<a name=\"asserting-against-json-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:334
#, no-wrap
msgid "Asserting Against JSON Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:337
msgid "Often, your route will return a JSON response that contains multiple items, such as multiple users:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:341
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return User::all();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:343
msgid "In these situations, we may use the fluent JSON object's `has` method to make assertions against the users included in the response. For example, let's assert that the JSON response contains three users. Next, we'll make some assertions about the first user in the collection using the `first` method. The `first` method accepts a closure which receives another assertable JSON string that we can use to make assertions about the first object in the JSON collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:354
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has(3)\n"
"                 ->first(fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:356
#, no-wrap
msgid "<a name=\"scoping-json-collection-assertions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:356
#, no-wrap
msgid "Scoping JSON Collection Assertions"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:359
msgid "Sometimes, your application's routes will return JSON collections that are assigned named keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:366
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return [\n"
"            'meta' => [...],\n"
"            'users' => User::all(),\n"
"        ];\n"
"    })\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:368
msgid "When testing these routes, you may use the `has` method to assert against the number of items in the collection. In addition, you may use the `has` method to scope a chain of assertions:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:380
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3)\n"
"                 ->has('users.0', fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:382
msgid "However, instead of making two separate calls to the `has` method to assert against the `users` collection, you may make a single call which provides a closure as its third parameter. When doing so, the closure will automatically be invoked and scoped to the first item in the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:394
#, no-wrap
msgid "    $response\n"
"        ->assertJson(fn (AssertableJson $json) =>\n"
"            $json->has('meta')\n"
"                 ->has('users', 3, fn ($json) =>\n"
"                    $json->where('id', 1)\n"
"                         ->where('name', 'Victoria Faith')\n"
"                         ->missing('password')\n"
"                         ->etc()\n"
"                 )\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:396 docs/master/http-tests.md:302
#, no-wrap
msgid "<a name=\"testing-file-uploads\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-tests.md:396 docs/master/http-tests.md:302
#, no-wrap
msgid "Testing File Uploads"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:399 docs/master/http-tests.md:305
msgid "The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which may be used to generate dummy files or images for testing. This, combined with the `Storage` facade's `fake` method, greatly simplifies the testing of file uploads. For example, you may combine these two features to easily test an avatar upload form:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:409 docs/8.x/mocking.md:552
#: docs/master/http-tests.md:315 docs/master/mocking.md:552
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Http\\UploadedFile;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:415 docs/master/http-tests.md:321
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_avatars_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:417 docs/master/http-tests.md:323
#, no-wrap
msgid "            $file = UploadedFile::fake()->image('avatar.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:421 docs/master/http-tests.md:327
#, no-wrap
msgid "            $response = $this->post('/avatar', [\n"
"                'avatar' => $file,\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:425 docs/master/http-tests.md:331
#, no-wrap
msgid "            Storage::disk('avatars')->assertExists($file->hashName());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:427 docs/master/http-tests.md:333
msgid "If you would like to assert that a given file does not exist, you may use the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:429 docs/master/http-tests.md:335
#, no-wrap
msgid "    Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:431 docs/8.x/mocking.md:71 docs/8.x/scout.md:230
#: docs/master/http-tests.md:337 docs/master/mocking.md:71
#: docs/master/scout.md:225
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:433 docs/master/http-tests.md:339
#, no-wrap
msgid "    Storage::disk('avatars')->assertMissing('missing.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:435 docs/master/http-tests.md:341
#, no-wrap
msgid "<a name=\"fake-file-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:435 docs/master/http-tests.md:341
#, no-wrap
msgid "Fake File Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:438 docs/master/http-tests.md:344
msgid "When creating files using the `fake` method provided by the `UploadedFile` class, you may specify the width, height, and size of the image (in kilobytes) in order to better test your application's validation rules:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:440 docs/master/http-tests.md:346
#, no-wrap
msgid "    UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:442 docs/master/http-tests.md:348
msgid "In addition to creating images, you may create files of any other type using the `create` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:444 docs/master/http-tests.md:350
#, no-wrap
msgid "    UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:446 docs/master/http-tests.md:352
msgid "If needed, you may pass a `$mimeType` argument to the method to explicitly define the MIME type that should be returned by the file:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:450 docs/master/http-tests.md:356
#, no-wrap
msgid "    UploadedFile::fake()->create(\n"
"        'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:452 docs/master/http-tests.md:358
#, no-wrap
msgid "<a name=\"testing-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/http-tests.md:452 docs/master/http-tests.md:358
#, no-wrap
msgid "Testing Views"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:455 docs/master/http-tests.md:361
msgid "Laravel also allows you to render a view without making a simulated HTTP request to the application. To accomplish this, you may call the `view` method within your test. The `view` method accepts the view name and an optional array of data. The method returns an instance of `Illuminate\\Testing\\TestView`, which offers several methods to conveniently make assertions about the view's contents:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:467 docs/master/http-tests.md:373
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_a_welcome_view_can_be_rendered()\n"
"        {\n"
"            $view = $this->view('welcome', ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:471 docs/master/http-tests.md:377
#, no-wrap
msgid "            $view->assertSee('Taylor');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:473 docs/master/http-tests.md:379
msgid "The `TestView` class provides the following assertion methods: `assertSee`, `assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, `assertDontSee`, and `assertDontSeeText`."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:475 docs/master/http-tests.md:381
msgid "If needed, you may get the raw, rendered view contents by casting the `TestView` instance to a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:477 docs/master/http-tests.md:383
#, no-wrap
msgid "    $contents = (string) $this->view('welcome');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:479 docs/master/http-tests.md:385
#, no-wrap
msgid "<a name=\"sharing-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:479 docs/master/http-tests.md:385
#, no-wrap
msgid "Sharing Errors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:482 docs/master/http-tests.md:388
msgid "Some views may depend on errors shared in the [global error bag provided by Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). To hydrate the error bag with error messages, you may use the `withViewErrors` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:486 docs/master/http-tests.md:392
#, no-wrap
msgid "    $view = $this->withViewErrors([\n"
"        'name' => ['Please provide a valid name.']\n"
"    ])->view('form');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:488 docs/master/http-tests.md:394
#, no-wrap
msgid "    $view->assertSee('Please provide a valid name.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:490 docs/master/http-tests.md:396
#, no-wrap
msgid "<a name=\"rendering-blade-and-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:490 docs/master/http-tests.md:396
#, no-wrap
msgid "Rendering Blade & Components"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:493 docs/master/http-tests.md:399
msgid "If necessary, you may use the `blade` method to evaluate and render a raw [Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:498 docs/master/http-tests.md:404
#, no-wrap
msgid "    $view = $this->blade(\n"
"        '<x-component :name=\"$name\" />',\n"
"        ['name' => 'Taylor']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:500 docs/8.x/http-tests.md:506
#: docs/master/http-tests.md:406 docs/master/http-tests.md:412
#, no-wrap
msgid "    $view->assertSee('Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:502 docs/master/http-tests.md:408
msgid "You may use the `component` method to evaluate and render a [Blade component](/docs/{{version}}/blade#components). Like the `view` method, the `component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:504 docs/master/http-tests.md:410
#, no-wrap
msgid "    $view = $this->component(Profile::class, ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:511 docs/master/http-tests.md:417
#, no-wrap
msgid "<a name=\"response-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:511 docs/master/http-tests.md:417
#, no-wrap
msgid "Response Assertions"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:514 docs/master/http-tests.md:420
msgid "Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of custom assertion methods that you may utilize when testing your application. These assertions may be accessed on the response that is returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:520 docs/master/http-tests.md:426
#, no-wrap
msgid "<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:573 docs/master/http-tests.md:479
msgid "[assertCookie](#assert-cookie)  [assertCookieExpired](#assert-cookie-expired)  [assertCookieNotExpired](#assert-cookie-not-expired)  [assertCookieMissing](#assert-cookie-missing)  [assertCreated](#assert-created)  [assertDontSee](#assert-dont-see)  [assertDontSeeText](#assert-dont-see-text)  [assertExactJson](#assert-exact-json)  [assertForbidden](#assert-forbidden)  [assertHeader](#assert-header)  [assertHeaderMissing](#assert-header-missing)  [assertJson](#assert-json)  [assertJsonCount](#assert-json-count)  [assertJsonFragment](#assert-json-fragment)  [assertJsonMissing](#assert-json-missing)  [assertJsonMissingExact](#assert-json-missing-exact)  [assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)  [assertJsonPath](#assert-json-path)  [assertJsonStructure](#assert-json-structure)  [assertJsonValidationErrors](#assert-json-validation-errors)  [assertLocation](#assert-location)  [assertNoContent](#assert-no-content)  [assertNotFound](#assert-not-found)  [assertOk](#assert-ok)  [assertPlainCookie](#assert-plain-cookie)  [assertRedirect](#assert-redirect)  [assertSee](#assert-see)  [assertSeeInOrder](#assert-see-in-order)  [assertSeeText](#assert-see-text)  [assertSeeTextInOrder](#assert-see-text-in-order)  [assertSessionHas](#assert-session-has)  [assertSessionHasInput](#assert-session-has-input)  [assertSessionHasAll](#assert-session-has-all)  [assertSessionHasErrors](#assert-session-has-errors)  [assertSessionHasErrorsIn](#assert-session-has-errors-in)  [assertSessionHasNoErrors](#assert-session-has-no-errors)  [assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)  [assertSessionMissing](#assert-session-missing)  [assertStatus](#assert-status)  [assertSuccessful](#assert-successful)  [assertUnauthorized](#assert-unauthorized)  [assertViewHas](#assert-view-has)  [assertViewHasAll](#assert-view-has-all)  [assertViewIs](#assert-view-is)  [assertViewMissing](#assert-view-missing)"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:577 docs/master/http-tests.md:483
#, no-wrap
msgid "<a name=\"assert-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:577 docs/master/http-tests.md:483
#, no-wrap
msgid "assertCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:580 docs/master/http-tests.md:486
msgid "Assert that the response contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:582 docs/master/http-tests.md:488
#, no-wrap
msgid "    $response->assertCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:584 docs/master/http-tests.md:490
#, no-wrap
msgid "<a name=\"assert-cookie-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:584 docs/master/http-tests.md:490
#, no-wrap
msgid "assertCookieExpired"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:587 docs/master/http-tests.md:493
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:589 docs/master/http-tests.md:495
#, no-wrap
msgid "    $response->assertCookieExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:591 docs/master/http-tests.md:497
#, no-wrap
msgid "<a name=\"assert-cookie-not-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:591 docs/master/http-tests.md:497
#, no-wrap
msgid "assertCookieNotExpired"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:594 docs/master/http-tests.md:500
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:596 docs/master/http-tests.md:502
#, no-wrap
msgid "    $response->assertCookieNotExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:601 docs/master/http-tests.md:507
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:603 docs/master/http-tests.md:509
#, no-wrap
msgid "    $response->assertCookieMissing($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:605 docs/master/http-tests.md:511
#, no-wrap
msgid "<a name=\"assert-created\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:605 docs/master/http-tests.md:511
#, no-wrap
msgid "assertCreated"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:608 docs/master/http-tests.md:514
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:610 docs/master/http-tests.md:516
#, no-wrap
msgid "    $response->assertCreated();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:615 docs/master/http-tests.md:521
msgid "Assert that the given string is not contained within the response returned by the application. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:617 docs/master/http-tests.md:523
#, no-wrap
msgid "    $response->assertDontSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:619 docs/master/http-tests.md:525
#, no-wrap
msgid "<a name=\"assert-dont-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:619 docs/master/http-tests.md:525
#, no-wrap
msgid "assertDontSeeText"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:622 docs/master/http-tests.md:528
msgid "Assert that the given string is not contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. This method will pass the response content to the `strip_tags` PHP function before making the assertion:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:624 docs/master/http-tests.md:530
#, no-wrap
msgid "    $response->assertDontSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:626 docs/master/http-tests.md:532
#, no-wrap
msgid "<a name=\"assert-exact-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:626 docs/master/http-tests.md:532
#, no-wrap
msgid "assertExactJson"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:629 docs/master/http-tests.md:535
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:631 docs/master/http-tests.md:537
#, no-wrap
msgid "    $response->assertExactJson(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:633 docs/master/http-tests.md:539
#, no-wrap
msgid "<a name=\"assert-forbidden\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:633 docs/master/http-tests.md:539
#, no-wrap
msgid "assertForbidden"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:636 docs/master/http-tests.md:542
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:638 docs/master/http-tests.md:544
#, no-wrap
msgid "    $response->assertForbidden();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:640 docs/master/http-tests.md:546
#, no-wrap
msgid "<a name=\"assert-header\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:640 docs/master/http-tests.md:546
#, no-wrap
msgid "assertHeader"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:643 docs/master/http-tests.md:549
msgid "Assert that the given header and value is present on the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:645 docs/master/http-tests.md:551
#, no-wrap
msgid "    $response->assertHeader($headerName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:647 docs/master/http-tests.md:553
#, no-wrap
msgid "<a name=\"assert-header-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:647 docs/master/http-tests.md:553
#, no-wrap
msgid "assertHeaderMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:650 docs/master/http-tests.md:556
msgid "Assert that the given header is not present on the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:652 docs/master/http-tests.md:558
#, no-wrap
msgid "    $response->assertHeaderMissing($headerName);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:654 docs/master/http-tests.md:560
#, no-wrap
msgid "<a name=\"assert-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:654 docs/master/http-tests.md:560
#, no-wrap
msgid "assertJson"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:657 docs/master/http-tests.md:563
msgid "Assert that the response contains the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:659 docs/master/http-tests.md:565
#, no-wrap
msgid "    $response->assertJson(array $data, $strict = false);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:661 docs/master/http-tests.md:567
msgid "The `assertJson` method converts the response to an array and utilizes `PHPUnit::assertArraySubset` to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:663 docs/master/http-tests.md:569
#, no-wrap
msgid "<a name=\"assert-json-count\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:663 docs/master/http-tests.md:569
#, no-wrap
msgid "assertJsonCount"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:666 docs/master/http-tests.md:572
msgid "Assert that the response JSON has an array with the expected number of items at the given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:668 docs/master/http-tests.md:574
#, no-wrap
msgid "    $response->assertJsonCount($count, $key = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:670 docs/master/http-tests.md:576
#, no-wrap
msgid "<a name=\"assert-json-fragment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:670 docs/master/http-tests.md:576
#, no-wrap
msgid "assertJsonFragment"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:673 docs/master/http-tests.md:579
msgid "Assert that the response contains the given JSON data anywhere in the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:683 docs/master/http-tests.md:589
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return [\n"
"            'users' => [\n"
"                [\n"
"                    'name' => 'Taylor Otwell',\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:685 docs/master/http-tests.md:591
#, no-wrap
msgid "    $response->assertJsonFragment(['name' => 'Taylor Otwell']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:687 docs/master/http-tests.md:593
#, no-wrap
msgid "<a name=\"assert-json-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:687 docs/master/http-tests.md:593
#, no-wrap
msgid "assertJsonMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:690 docs/master/http-tests.md:596
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:692 docs/master/http-tests.md:598
#, no-wrap
msgid "    $response->assertJsonMissing(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:694 docs/master/http-tests.md:600
#, no-wrap
msgid "<a name=\"assert-json-missing-exact\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:694 docs/master/http-tests.md:600
#, no-wrap
msgid "assertJsonMissingExact"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:697 docs/master/http-tests.md:603
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:699 docs/master/http-tests.md:605
#, no-wrap
msgid "    $response->assertJsonMissingExact(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:701 docs/master/http-tests.md:607
#, no-wrap
msgid "<a name=\"assert-json-missing-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:701 docs/master/http-tests.md:607
#, no-wrap
msgid "assertJsonMissingValidationErrors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:704 docs/master/http-tests.md:610
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:706 docs/master/http-tests.md:612
#, no-wrap
msgid "    $response->assertJsonMissingValidationErrors($keys);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:708 docs/master/http-tests.md:614
#, no-wrap
msgid "<a name=\"assert-json-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:708 docs/master/http-tests.md:614
#, no-wrap
msgid "assertJsonPath"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:711 docs/master/http-tests.md:617
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:713
#, no-wrap
msgid "    $response->assertJsonPath($path, $expectedValue);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:715 docs/8.x/http-tests.md:736
#: docs/master/http-tests.md:621 docs/master/http-tests.md:642
msgid "For example, if the JSON response returned by your application contains the following data:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/http-tests.md:716 docs/8.x/http-tests.md:737
#: docs/master/http-tests.md:622 docs/master/http-tests.md:643
#, no-wrap
msgid "{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:725 docs/master/http-tests.md:631
msgid "You may assert that the `name` property of the `user` object matches a given value like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:727 docs/master/http-tests.md:633
#, no-wrap
msgid "    $response->assertJsonPath('user.name', 'Steve Schoger');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:729 docs/master/http-tests.md:635
#, no-wrap
msgid "<a name=\"assert-json-structure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:729 docs/master/http-tests.md:635
#, no-wrap
msgid "assertJsonStructure"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:732 docs/master/http-tests.md:638
msgid "Assert that the response has a given JSON structure:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:734 docs/master/http-tests.md:640
#, no-wrap
msgid "    $response->assertJsonStructure(array $structure);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:746 docs/master/http-tests.md:652
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:752 docs/master/http-tests.md:658
#, no-wrap
msgid "    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            'name',\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:754 docs/master/http-tests.md:660
#, no-wrap
msgid "<a name=\"assert-json-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:754 docs/master/http-tests.md:660
#, no-wrap
msgid "assertJsonValidationErrors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:757 docs/master/http-tests.md:663
msgid "Assert that the response has the given JSON validation errors for the given keys. This method should be used when asserting against responses where the validation errors are returned as a JSON structure instead of being flashed to the session:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:759 docs/master/http-tests.md:665
#, no-wrap
msgid "    $response->assertJsonValidationErrors(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:761 docs/master/http-tests.md:667
#, no-wrap
msgid "<a name=\"assert-location\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:761 docs/master/http-tests.md:667
#, no-wrap
msgid "assertLocation"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:764 docs/master/http-tests.md:670
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:766 docs/master/http-tests.md:672
#, no-wrap
msgid "    $response->assertLocation($uri);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:768 docs/master/http-tests.md:674
#, no-wrap
msgid "<a name=\"assert-no-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:768 docs/master/http-tests.md:674
#, no-wrap
msgid "assertNoContent"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:771 docs/master/http-tests.md:677
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:773 docs/master/http-tests.md:679
#, no-wrap
msgid "    $response->assertNoContent($status = 204);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:775 docs/master/http-tests.md:681
#, no-wrap
msgid "<a name=\"assert-not-found\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:775 docs/master/http-tests.md:681
#, no-wrap
msgid "assertNotFound"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:778 docs/master/http-tests.md:684
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:780 docs/master/http-tests.md:686
#, no-wrap
msgid "    $response->assertNotFound();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:782 docs/master/http-tests.md:688
#, no-wrap
msgid "<a name=\"assert-ok\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:782 docs/master/http-tests.md:688
#, no-wrap
msgid "assertOk"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:785 docs/master/http-tests.md:691
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:787 docs/master/http-tests.md:693
#, no-wrap
msgid "    $response->assertOk();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:789 docs/master/http-tests.md:695
#, no-wrap
msgid "<a name=\"assert-plain-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:789 docs/master/http-tests.md:695
#, no-wrap
msgid "assertPlainCookie"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:792 docs/master/http-tests.md:698
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:794 docs/master/http-tests.md:700
#, no-wrap
msgid "    $response->assertPlainCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:796 docs/master/http-tests.md:702
#, no-wrap
msgid "<a name=\"assert-redirect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:796 docs/master/http-tests.md:702
#, no-wrap
msgid "assertRedirect"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:799 docs/master/http-tests.md:705
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:801 docs/master/http-tests.md:707
#, no-wrap
msgid "    $response->assertRedirect($uri);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:806 docs/master/http-tests.md:712
msgid "Assert that the given string is contained within the response. This assertion will automatically escape the given string unless you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:808 docs/master/http-tests.md:714
#, no-wrap
msgid "    $response->assertSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:810 docs/master/http-tests.md:716
#, no-wrap
msgid "<a name=\"assert-see-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:810 docs/master/http-tests.md:716
#, no-wrap
msgid "assertSeeInOrder"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:813 docs/master/http-tests.md:719
msgid "Assert that the given strings are contained in order within the response. This assertion will automatically escape the given strings unless you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:815 docs/master/http-tests.md:721
#, no-wrap
msgid "    $response->assertSeeInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:817 docs/master/http-tests.md:723
#, no-wrap
msgid "<a name=\"assert-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:817 docs/master/http-tests.md:723
#, no-wrap
msgid "assertSeeText"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:820 docs/master/http-tests.md:726
msgid "Assert that the given string is contained within the response text. This assertion will automatically escape the given string unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:822 docs/master/http-tests.md:728
#, no-wrap
msgid "    $response->assertSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:824 docs/master/http-tests.md:730
#, no-wrap
msgid "<a name=\"assert-see-text-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:824 docs/master/http-tests.md:730
#, no-wrap
msgid "assertSeeTextInOrder"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:827 docs/master/http-tests.md:733
msgid "Assert that the given strings are contained in order within the response text. This assertion will automatically escape the given strings unless you pass a second argument of `false`. The response content will be passed to the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:829 docs/master/http-tests.md:735
#, no-wrap
msgid "    $response->assertSeeTextInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:831 docs/master/http-tests.md:737
#, no-wrap
msgid "<a name=\"assert-session-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:831 docs/master/http-tests.md:737
#, no-wrap
msgid "assertSessionHas"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:834 docs/master/http-tests.md:740
msgid "Assert that the session contains the given piece of data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:836 docs/master/http-tests.md:742
#, no-wrap
msgid "    $response->assertSessionHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:838 docs/master/http-tests.md:744
#, no-wrap
msgid "<a name=\"assert-session-has-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:838 docs/master/http-tests.md:744
#, no-wrap
msgid "assertSessionHasInput"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:841 docs/master/http-tests.md:747
msgid "Assert that the session has a given value in the [flashed input array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:843 docs/master/http-tests.md:749
#, no-wrap
msgid "    $response->assertSessionHasInput($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:845 docs/master/http-tests.md:751
#, no-wrap
msgid "<a name=\"assert-session-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:845 docs/master/http-tests.md:751
#, no-wrap
msgid "assertSessionHasAll"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:848 docs/master/http-tests.md:754
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:850 docs/master/http-tests.md:756
#, no-wrap
msgid "    $response->assertSessionHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:852 docs/master/http-tests.md:758
msgid "For example, if your application's session contains `name` and `status` keys, you may assert that both exist and have the specified values like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:857 docs/master/http-tests.md:763
#, no-wrap
msgid "    $response->assertSessionHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'status' => 'active',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:859 docs/master/http-tests.md:765
#, no-wrap
msgid "<a name=\"assert-session-has-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:859 docs/master/http-tests.md:765
#, no-wrap
msgid "assertSessionHasErrors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:862 docs/master/http-tests.md:768
msgid "Assert that the session contains an error for the given `$keys`. If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key). This method should be used when testing routes that flash validation errors to the session instead of returning them as a JSON structure:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:866 docs/master/http-tests.md:772
#, no-wrap
msgid "    $response->assertSessionHasErrors(\n"
"        array $keys, $format = null, $errorBag = 'default'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:868
msgid "For example, to assert that the `name` and `email` fields have validation error messages that were flashed to the session, you may invoke the `assertSessionHasErrors` method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:870 docs/master/http-tests.md:776
#, no-wrap
msgid "    $response->assertSessionHasErrors(['name', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:872 docs/master/http-tests.md:778
msgid "Or, you may assert that a given field has a particular validation error message:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:876 docs/master/http-tests.md:782
#, no-wrap
msgid "    $response->assertSessionHasErrors([\n"
"        'name' => 'The given name was invalid.'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:878 docs/master/http-tests.md:784
#, no-wrap
msgid "<a name=\"assert-session-has-errors-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:878 docs/master/http-tests.md:784
#, no-wrap
msgid "assertSessionHasErrorsIn"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:881 docs/master/http-tests.md:787
msgid "Assert that the session contains an error for the given `$keys` within a specific [error bag](/docs/{{version}}/validation#named-error-bags). If `$keys` is an associative array, assert that the session contains a specific error message (value) for each field (key), within the error bag:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:883 docs/master/http-tests.md:789
#, no-wrap
msgid "    $response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:885 docs/master/http-tests.md:791
#, no-wrap
msgid "<a name=\"assert-session-has-no-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:885 docs/master/http-tests.md:791
#, no-wrap
msgid "assertSessionHasNoErrors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:888 docs/master/http-tests.md:794
msgid "Assert that the session has no validation errors:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:890 docs/master/http-tests.md:796
#, no-wrap
msgid "    $response->assertSessionHasNoErrors();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:892 docs/master/http-tests.md:798
#, no-wrap
msgid "<a name=\"assert-session-doesnt-have-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:892 docs/master/http-tests.md:798
#, no-wrap
msgid "assertSessionDoesntHaveErrors"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:895 docs/master/http-tests.md:801
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:897 docs/master/http-tests.md:803
#, no-wrap
msgid "    $response->assertSessionDoesntHaveErrors($keys = [], $format = null, $errorBag = 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:899 docs/master/http-tests.md:805
#, no-wrap
msgid "<a name=\"assert-session-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:899 docs/master/http-tests.md:805
#, no-wrap
msgid "assertSessionMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:902 docs/master/http-tests.md:808
msgid "Assert that the session does not contain the given key:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:904 docs/master/http-tests.md:810
#, no-wrap
msgid "    $response->assertSessionMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:906 docs/master/http-tests.md:812
#, no-wrap
msgid "<a name=\"assert-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:906 docs/master/http-tests.md:812
#, no-wrap
msgid "assertStatus"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:909 docs/master/http-tests.md:815
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:911 docs/master/http-tests.md:817
#, no-wrap
msgid "    $response->assertStatus($code);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:913 docs/master/http-tests.md:819
#, no-wrap
msgid "<a name=\"assert-successful\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:913 docs/master/http-tests.md:819
#, no-wrap
msgid "assertSuccessful"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:916 docs/master/http-tests.md:822
#, no-wrap
msgid "Assert that the response has a successful (>= 200 and < 300) HTTP status code:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:918 docs/master/http-tests.md:824
#, no-wrap
msgid "    $response->assertSuccessful();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:920 docs/master/http-tests.md:826
#, no-wrap
msgid "<a name=\"assert-unauthorized\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:920 docs/master/http-tests.md:826
#, no-wrap
msgid "assertUnauthorized"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:923 docs/master/http-tests.md:829
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:925 docs/master/http-tests.md:831
#, no-wrap
msgid "    $response->assertUnauthorized();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:927 docs/master/http-tests.md:833
#, no-wrap
msgid "<a name=\"assert-view-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:927 docs/master/http-tests.md:833
#, no-wrap
msgid "assertViewHas"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:930 docs/master/http-tests.md:836
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:932 docs/master/http-tests.md:838
#, no-wrap
msgid "    $response->assertViewHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:934 docs/master/http-tests.md:840
msgid "In addition, view data may be accessed as array variables on the response, allowing you to convenient inspect it:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:936 docs/master/http-tests.md:842
#, no-wrap
msgid "    $this->assertEquals('Taylor', $response['name']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:938 docs/master/http-tests.md:844
#, no-wrap
msgid "<a name=\"assert-view-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:938 docs/master/http-tests.md:844
#, no-wrap
msgid "assertViewHasAll"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:941 docs/master/http-tests.md:847
msgid "Assert that the response view has a given list of data:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:943 docs/master/http-tests.md:849
#, no-wrap
msgid "    $response->assertViewHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:945 docs/master/http-tests.md:851
msgid "This method may be used to assert that the view simply contains data matching the given keys:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:950 docs/master/http-tests.md:856
#, no-wrap
msgid "    $response->assertViewHasAll([\n"
"        'name',\n"
"        'email',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:952 docs/master/http-tests.md:858
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:957 docs/master/http-tests.md:863
#, no-wrap
msgid "    $response->assertViewHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'email' => 'taylor@example.com,',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:959 docs/master/http-tests.md:865
#, no-wrap
msgid "<a name=\"assert-view-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:959 docs/master/http-tests.md:865
#, no-wrap
msgid "assertViewIs"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:962 docs/master/http-tests.md:868
msgid "Assert that the given view was returned by the route:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:964 docs/master/http-tests.md:870
#, no-wrap
msgid "    $response->assertViewIs($value);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:966 docs/master/http-tests.md:872
#, no-wrap
msgid "<a name=\"assert-view-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/http-tests.md:966 docs/master/http-tests.md:872
#, no-wrap
msgid "assertViewMissing"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:969 docs/master/http-tests.md:875
msgid "Assert that the given data key was not made available to the view returned in the application's response:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:971 docs/master/http-tests.md:877
#, no-wrap
msgid "    $response->assertViewMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:973 docs/master/http-tests.md:879
#, no-wrap
msgid "<a name=\"authentication-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/http-tests.md:973 docs/master/http-tests.md:879
#, no-wrap
msgid "Authentication Assertions"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:976 docs/master/http-tests.md:882
msgid "Laravel also provides a variety of authentication related assertions that you may utilize within your application's feature tests. Note that these methods are invoked on the test class itself and not the `Illuminate\\Testing\\TestResponse` instance returned by methods such as `get` and `post`."
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:981 docs/master/http-tests.md:887
msgid "Assert that a user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:983 docs/master/http-tests.md:889
#, no-wrap
msgid "    $this->assertAuthenticated($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:988 docs/master/http-tests.md:894
msgid "Assert that a user is not authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:990 docs/master/http-tests.md:896
#, no-wrap
msgid "    $this->assertGuest($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:995 docs/master/http-tests.md:901
msgid "Assert that a specific user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/http-tests.md:996 docs/master/http-tests.md:902
#, no-wrap
msgid "    $this->assertAuthenticatedAs($user, $guard = null);\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Meet Laravel](#meet-laravel)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Why Laravel?](#why-laravel)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Your First Laravel Project](#your-first-laravel-project)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Getting Started On macOS](#getting-started-on-macos)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Getting Started On Windows](#getting-started-on-windows)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Getting Started On Linux](#getting-started-on-linux)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17
msgid "[Choosing Your Sail Services](#choosing-your-sail-services)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Installation Via Composer](#installation-via-composer)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Initial Configuration](#initial-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17
msgid "[Environment Based Configuration](#environment-based-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17
msgid "[Directory Configuration](#directory-configuration)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Next Steps](#next-steps)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Laravel The Full Stack Framework](#laravel-the-fullstack-framework)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/installation.md:17 docs/master/installation.md:14
msgid "[Laravel The API Backend](#laravel-the-api-backend)"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:19 docs/master/installation.md:16
#, no-wrap
msgid "<a name=\"meet-laravel\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/installation.md:19 docs/master/installation.md:16
#, no-wrap
msgid "Meet Laravel"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:22 docs/master/installation.md:19
msgid "Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:24 docs/master/installation.md:21
msgid "Laravel strives to provide an amazing developer experience, while providing powerful features such as thorough dependency injection, an expressive database abstraction layer, queues and scheduled jobs, unit and integration testing, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:26 docs/master/installation.md:23
msgid "Whether you are new to PHP or web frameworks or have years of experience, Laravel is a framework that can grow with you. We'll help you take your first steps as a web developer or give you a boost as you take your expertise to the next level. We can't wait to see what you build."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:28 docs/master/installation.md:25
#, no-wrap
msgid "<a name=\"why-laravel\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:28 docs/master/installation.md:25
#, no-wrap
msgid "Why Laravel?"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:31 docs/master/installation.md:28
msgid "There are a variety of tools and frameworks available to you when building a web application. However, we believe Laravel is the best choice for building modern, full-stack web applications."
msgstr ""

#. type: Title ####
#: docs/8.x/installation.md:32 docs/master/installation.md:29
#, no-wrap
msgid "A Progressive Framework"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:35 docs/master/installation.md:32
msgid "We like to call Laravel a \"progressive\" framework. By that, we mean that Laravel grows with you. If you're just taking your first steps into web development, Laravel's vast library of documentation, guides, and [video tutorials](https://laracasts.com) will help you learn the ropes without becoming overwhelmed."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:37 docs/master/installation.md:34
msgid "If you're a senior developer, Laravel gives you robust tools for [dependency injection](/docs/{{version}}/container), [unit testing](/docs/{{version}}/testing), [queues](/docs/{{version}}/queues), [real-time events](/docs/{{version}}/broadcasting), and more. Laravel is fine-tuned for building professional web applications and ready to handle enterprise work loads."
msgstr ""

#. type: Title ####
#: docs/8.x/installation.md:38 docs/master/installation.md:35
#, no-wrap
msgid "A Scalable Framework"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:41 docs/master/installation.md:38
msgid "Laravel is incredibly scalable. Thanks to the scaling-friendly nature of PHP and Laravel's built-in support for fast, distributed cache systems like Redis, horizontal scaling with Laravel is a breeze. In fact, Laravel applications have been easily scaled to handle hundreds of millions of requests per month."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:43 docs/master/installation.md:40
msgid "Need extreme scaling? Platforms like [Laravel Vapor](https://vapor.laravel.com) allow you to run your Laravel application at nearly limitless scale on AWS's latest serverless technology."
msgstr ""

#. type: Title ####
#: docs/8.x/installation.md:44 docs/master/installation.md:41
#, no-wrap
msgid "A Community Framework"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:47 docs/master/installation.md:44
msgid "Laravel combines the best packages in the PHP ecosystem to offer the most robust and developer friendly framework available. In addition, thousands of talented developers from around the world have [contributed to the framework](https://github.com/laravel/framework). Who knows, maybe you'll even become a Laravel contributor."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:49 docs/master/installation.md:46
#, no-wrap
msgid "<a name=\"your-first-laravel-project\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/installation.md:49 docs/master/installation.md:46
#, no-wrap
msgid "Your First Laravel Project"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:52 docs/master/installation.md:49
msgid "We want it to be as easy as possible to get started with Laravel. There are a variety of options for developing and running a Laravel project on your own computer. While you may wish to explore these options at a later time, Laravel provides [Sail](/docs/{{version}}/sail), a built-in solution for running your Laravel project using [Docker](https://www.docker.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:54 docs/master/installation.md:51
msgid "Docker is a tool for running applications and services in small, light-weight \"containers\" which do not interfere with your local computer's installed software or configuration. This means you don't have to worry about configuring or setting up complicated development tools such as web servers and databases on your personal computer. To get started, you only need to install [Docker Desktop](https://www.docker.com/products/docker-desktop)."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:56 docs/master/installation.md:53
msgid "Laravel Sail is a light-weight command-line interface for interacting with Laravel's default Docker configuration. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:58 docs/master/installation.md:55
#, no-wrap
msgid "> {tip} Already a Docker expert? Don't worry! Everything about Sail can be customized using the `docker-compose.yml` file included with Laravel.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:60 docs/master/installation.md:57
#, no-wrap
msgid "<a name=\"getting-started-on-macos\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:60 docs/master/installation.md:57
#, no-wrap
msgid "Getting Started On macOS"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:63 docs/master/installation.md:60
msgid "If you're developing on a Mac and [Docker Desktop](https://www.docker.com/products/docker-desktop) is already installed, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/installation.md:64
#, no-wrap
msgid "curl -s \"https://laravel.build/example-app\" | bash\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:69 docs/8.x/installation.md:98
#: docs/8.x/installation.md:129 docs/master/installation.md:66
#: docs/master/installation.md:95 docs/master/installation.md:126
msgid "Of course, you can change \"example-app\" in this URL to anything you like. The Laravel application's directory will be created within the directory you execute the command from."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:71 docs/8.x/installation.md:100
#: docs/8.x/installation.md:131 docs/master/installation.md:68
#: docs/master/installation.md:97 docs/master/installation.md:128
msgid "After the project has been created, you can navigate to the application directory and start Laravel Sail. Laravel Sail provides a simple command-line interface for interacting with Laravel's default Docker configuration:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/installation.md:72 docs/8.x/installation.md:101
#: docs/8.x/installation.md:132 docs/master/installation.md:69
#: docs/master/installation.md:98 docs/master/installation.md:129
#, no-wrap
msgid "cd example-app\n\n"
"./vendor/bin/sail up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:79 docs/8.x/installation.md:108
#: docs/8.x/installation.md:139 docs/master/installation.md:76
#: docs/master/installation.md:105 docs/master/installation.md:136
msgid "The first time you run the Sail `up` command, Sail's application containers will be built on your machine. This could take several minutes. **Don't worry, subsequent attempts to start Sail will be much faster.**"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:81 docs/8.x/installation.md:110
#: docs/8.x/installation.md:141 docs/master/installation.md:78
#: docs/master/installation.md:107 docs/master/installation.md:138
msgid "Once the application's Docker containers have been started, you can access the application in your web browser at: http://localhost."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:83 docs/8.x/installation.md:112
#: docs/8.x/installation.md:143 docs/master/installation.md:80
#: docs/master/installation.md:109 docs/master/installation.md:140
#, no-wrap
msgid "> {tip} To continue learning more about Laravel Sail, review its [complete documentation](/docs/{{version}}/sail).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:85 docs/master/installation.md:82
#, no-wrap
msgid "<a name=\"getting-started-on-windows\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:85 docs/master/installation.md:82
#, no-wrap
msgid "Getting Started On Windows"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:88 docs/master/installation.md:85
msgid "Before we create a new Laravel application on your Windows machine, make sure to install [Docker Desktop](https://www.docker.com/products/docker-desktop). Next, you should ensure that Windows Subsystem for Linux 2 (WSL2) is installed and enabled. WSL allows you to run Linux binary executables natively on Windows 10. Information on how to install and enable WSL2 can be found within Microsoft's [developer environment documentation](https://docs.microsoft.com/en-us/windows/wsl/install-win10)."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:90 docs/master/installation.md:87
#, no-wrap
msgid "> {tip} After installing and enabling WSL2, you should ensure that Docker Desktop is [configured to use the WSL2 backend](https://docs.docker.com/docker-for-windows/wsl/).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:92 docs/master/installation.md:89
msgid "Next, you are ready to create your first Laravel project. Launch [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab) and begin a new terminal session for your WSL2 Linux operating system. Next, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/installation.md:93 docs/8.x/installation.md:124
#: docs/master/installation.md:61 docs/master/installation.md:90
#: docs/master/installation.md:121
#, no-wrap
msgid "curl -s https://laravel.build/example-app | bash\n"
msgstr ""

#. type: Title ####
#: docs/8.x/installation.md:113 docs/master/installation.md:110
#, no-wrap
msgid "Developing Within WSL2"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:116 docs/master/installation.md:113
msgid "Of course, you will need to be able to modify the Laravel application files that were created within your WSL2 installation. To accomplish this, we recommend using Microsoft's [Visual Studio Code](https://code.visualstudio.com) editor and their first-party extension for [Remote Development](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:118 docs/master/installation.md:115
msgid "Once these tools are installed, you may open any Laravel project by executing the `code .` command from your application's root directory using Windows Terminal."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:120 docs/master/installation.md:117
#, no-wrap
msgid "<a name=\"getting-started-on-linux\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:120 docs/master/installation.md:117
#, no-wrap
msgid "Getting Started On Linux"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:123 docs/master/installation.md:120
msgid "If you're developing on Linux and [Docker](https://www.docker.com) is already installed, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:145
#, no-wrap
msgid "<a name=\"choosing-your-sail-services\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:145
#, no-wrap
msgid "Choosing Your Sail Services"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:148
msgid "When creating a new Laravel application via Sail, you may use the `with` query string variable to choose which services should be configured in your new application's `docker-compose.yml` file. Available services include `mysql`, `pgsql`, `redis`, `memcached`, `meilisearch`, `selenium`, and `mailhog`:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/installation.md:149
#, no-wrap
msgid "curl -s \"https://laravel.build/example-app?with=mysql,redis\" | bash\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:154
msgid "If you do not specify which services you would like configured, a default stack of `mysql`, `redis`, `meilisearch`, `mailhog`, and `selenium` will be configured."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:156 docs/master/installation.md:142
#, no-wrap
msgid "<a name=\"installation-via-composer\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:156 docs/master/installation.md:142
#, no-wrap
msgid "Installation Via Composer"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:159 docs/master/installation.md:145
msgid "If your computer already has PHP and Composer installed, you may create a new Laravel project by using Composer directly. After the application has been created, you may start Laravel's local development server using the Artisan CLI's `serve` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:161 docs/master/installation.md:147
#, no-wrap
msgid "    composer create-project laravel/laravel example-app\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:163 docs/master/installation.md:149
#, no-wrap
msgid "    cd example-app\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:165 docs/master/installation.md:151
#, no-wrap
msgid "    php artisan serve\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:167 docs/master/installation.md:153
#, no-wrap
msgid "<a name=\"the-laravel-installer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/installation.md:167 docs/master/installation.md:153
#, no-wrap
msgid "The Laravel Installer"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:170 docs/master/installation.md:156
msgid "Or, you may install the Laravel Installer as a global Composer dependency:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/installation.md:171 docs/master/installation.md:157
#, no-wrap
msgid "composer global require laravel/installer\n\n"
"laravel new example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:182 docs/master/installation.md:168
msgid "Make sure to place Composer's system-wide vendor bin directory in your `$PATH` so the `laravel` executable can be located by your system. This directory exists in different locations based on your operating system; however, some common locations include:"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:188 docs/master/installation.md:174
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- macOS: `$HOME/.composer/vendor/bin`\n"
"- Windows: `%USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin`\n"
"- GNU / Linux Distributions: `$HOME/.config/composer/vendor/bin` or `$HOME/.composer/vendor/bin`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:190
msgid "For convenience, the Laravel installer can also create a Git repository for your new project. To indicate that you want a Git repository to be created, pass the `--git` flag when creating a new project:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/installation.md:191
#, no-wrap
msgid "laravel new example-app --git\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:196
msgid "This command will initialize a new Git repository for your project and automatically commit the base Laravel skeleton. The `git` flag assumes you have properly installed and configured Git."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:198
msgid "Or, instead of using the `--git` flag, you may use the `--github` flag to create a Git repository and also create a corresponding private repository on GitHub:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/installation.md:199
#, no-wrap
msgid "laravel new example-app --github\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:204
#, no-wrap
msgid "The created repository will then be available at `https://github.com/<your-account>/my-app.com`. The `github` flag assumes you have properly installed the [`gh` CLI tool](https://cli.github.com) and are authenticated with GitHub. Additionally, you should have `git` installed and properly configured. If needed, you can pass additional flags that supported by the GitHub CLI:\n"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/installation.md:205
#, no-wrap
msgid "laravel new example-app --github=\"--public\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:210
msgid "You may use the `--organization` flag to create the repository under a specific GitHub organization:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/installation.md:211
#, no-wrap
msgid "laravel new example-app --github=\"--public\" --organization=\"laravel\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:216
#, no-wrap
msgid "> {note} You may experience issues with the `github` flag if your system's Git protocol is set to `https`. If you're prompted for your GitHub username and password during the installation, try setting your system's Git protocol to `ssh` by running `gh config set git_protocol ssh --host github.com`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:218 docs/master/installation.md:176
#, no-wrap
msgid "<a name=\"initial-configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/installation.md:218 docs/master/installation.md:176
#, no-wrap
msgid "Initial Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:223 docs/master/installation.md:181
msgid "Laravel needs almost no additional configuration out of the box. You are free to get started developing! However, you may wish to review the `config/app.php` file and its documentation. It contains several options such as `timezone` and `locale` that you may wish to change according to your application."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:225
#, no-wrap
msgid "<a name=\"environment-based-configuration\"></a>\n"
msgstr ""

#. #-#-#-#-#  installation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  installation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/installation.md:225 docs/master/installation.md:183
#, no-wrap
msgid "Environment Based Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:228 docs/master/installation.md:186
msgid "Since many of Laravel's configuration option values may vary depending on whether your application is running on your local computer or on a production web server, many important configuration values are defined using the `.env` file that exists at the root of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:232 docs/master/installation.md:190
#, no-wrap
msgid "> {tip} For more information about the `.env` file and environment based configuration, check out the full [configuration documentation](/docs/{{version}}/configuration#environment-configuration).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:234
#, no-wrap
msgid "<a name=\"directory-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:234
#, no-wrap
msgid "Directory Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:237
msgid "Laravel should always be served out of the root of the \"web directory\" configured for your web server. You should not attempt to serve a Laravel application out of a subdirectory of the \"web directory\". Attempting to do so could expose sensitive files that exist within your application."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:239 docs/master/installation.md:192
#, no-wrap
msgid "<a name=\"next-steps\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/installation.md:239 docs/master/installation.md:192
#, no-wrap
msgid "Next Steps"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:242 docs/master/installation.md:195
msgid "Now that you have created your Laravel project, you may be wondering what to learn next. First, we strongly recommend becoming familiar with how Laravel works by reading the following documentation:"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:250 docs/master/installation.md:203
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [Request Lifecycle](/docs/{{version}}/lifecycle)\n"
"- [Configuration](/docs/{{version}}/configuration)\n"
"- [Directory Structure](/docs/{{version}}/structure)\n"
"- [Service Container](/docs/{{version}}/container)\n"
"- [Facades](/docs/{{version}}/facades)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:252 docs/master/installation.md:205
msgid "How you want to use Laravel will also dictate the next steps on your journey. There are a variety of ways to use Laravel, and we'll explore two primary use cases for the framework below."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:254 docs/master/installation.md:207
#, no-wrap
msgid "<a name=\"laravel-the-fullstack-framework\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:254 docs/master/installation.md:207
#, no-wrap
msgid "Laravel The Full Stack Framework"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:257 docs/master/installation.md:210
msgid "Laravel may serve as a full stack framework. By \"full stack\" framework we mean that you are going to use Laravel to route requests to your application and render your frontend via [Blade templates](/docs/{{version}}/blade) or using a single-page application hybrid technology like [Inertia.js](https://inertiajs.com). This is the most common way to use the Laravel framework."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:259 docs/master/installation.md:212
msgid "If this is how you plan to use Laravel, you may want to check out our documentation on [routing](/docs/{{version}}/routing), [views](/docs/{{version}}/views), or the [Eloquent ORM](/docs/{{version}}/eloquent). In addition, you might be interested in learning about community packages like [Livewire](https://laravel-livewire.com) and [Inertia.js](https://inertiajs.com). These packages allow you to use Laravel as a full-stack framework while enjoying many of the UI benefits provided by single-page JavaScript applications."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:261 docs/master/installation.md:214
msgid "If you are using Laravel as a full stack framework, we also strongly encourage you to learn how to compile your application's CSS and JavaScript using [Laravel Mix](/docs/{{version}}/mix)."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:263 docs/master/installation.md:216
#, no-wrap
msgid "> {tip} If you want to get a head start building your application, check out one of our official [application starter kits](/docs/{{version}}/starter-kits).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:265 docs/master/installation.md:218
#, no-wrap
msgid "<a name=\"laravel-the-api-backend\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/installation.md:265 docs/master/installation.md:218
#, no-wrap
msgid "Laravel The API Backend"
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:268 docs/master/installation.md:221
msgid "Laravel may also serve as an API backend to a JavaScript single-page application or mobile application. For example, you might use Laravel as an API backend for your [Next.js](https://nextjs.org) application. In this context, you may use Laravel to provide [authentication](/docs/{{version}}/sanctum) and data storage / retrieval for your application, while also taking advantage of Laravel's powerful services such as queues, emails, notifications, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/installation.md:270 docs/master/installation.md:223
msgid "If this is how you plan to use Laravel, you may want to check out our documentation on [routing](/docs/{{version}}/routing), [Laravel Sanctum](/docs/{{version}}/sanctum), and the [Eloquent ORM](/docs/{{version}}/eloquent)."
msgstr ""

#. type: Plain text
#: docs/8.x/license.md:2 docs/master/license.md:2
msgid "The MIT License (MIT)"
msgstr ""

#. type: Plain text
#: docs/8.x/license.md:4 docs/master/license.md:4
msgid "Copyright (c) Taylor Otwell"
msgstr ""

#. type: Plain text
#: docs/8.x/license.md:11 docs/master/license.md:11
msgid "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"
msgstr ""

#. type: Plain text
#: docs/8.x/license.md:14 docs/master/license.md:14
msgid "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."
msgstr ""

#. type: Plain text
#: docs/8.x/license.md:21 docs/master/license.md:21
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#. type: Title #
#: docs/8.x/lifecycle.md:1 docs/master/lifecycle.md:1
#, no-wrap
msgid "Request Lifecycle"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/lifecycle.md:11 docs/master/lifecycle.md:11
msgid "[Lifecycle Overview](#lifecycle-overview)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/lifecycle.md:11 docs/master/lifecycle.md:11
msgid "[HTTP / Console Kernels](#http-console-kernels)"
msgstr ""

#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/lifecycle.md:11 docs/8.x/packages.md:17 docs/master/lifecycle.md:11
#: docs/master/packages.md:17
msgid "[Service Providers](#service-providers)"
msgstr ""

#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  socialite.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#: docs/8.x/lifecycle.md:11 docs/8.x/passwords.md:11 docs/8.x/socialite.md:12
#: docs/master/lifecycle.md:11 docs/master/passwords.md:10
#: docs/master/socialite.md:12
msgid "[Routing](#routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/lifecycle.md:11 docs/master/lifecycle.md:11
msgid "[Finishing Up](#finishing-up)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/lifecycle.md:11 docs/master/lifecycle.md:11
msgid "[Focus On Service Providers](#focus-on-service-providers)"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:16 docs/master/lifecycle.md:16
msgid "When using any tool in the \"real world\", you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable and confident using them."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:18 docs/master/lifecycle.md:18
msgid "The goal of this document is to give you a good, high-level overview of how the Laravel framework works. By getting to know the overall framework better, everything feels less \"magical\" and you will be more confident building your applications. If you don't understand all of the terms right away, don't lose heart! Just try to get a basic grasp of what is going on, and your knowledge will grow as you explore other sections of the documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:20 docs/master/lifecycle.md:20
#, no-wrap
msgid "<a name=\"lifecycle-overview\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/lifecycle.md:20 docs/master/lifecycle.md:20
#, no-wrap
msgid "Lifecycle Overview"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:26 docs/master/lifecycle.md:26
msgid "The entry point for all requests to a Laravel application is the `public/index.php` file. All requests are directed to this file by your web server (Apache / Nginx) configuration. The `index.php` file doesn't contain much code. Rather, it is a starting point for loading the rest of the framework."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:28 docs/master/lifecycle.md:28
msgid "The `index.php` file loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from `bootstrap/app.php`. The first action taken by Laravel itself is to create an instance of the application / [service container](/docs/{{version}}/container)."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:30 docs/master/lifecycle.md:30
#, no-wrap
msgid "<a name=\"http-console-kernels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/lifecycle.md:30 docs/master/lifecycle.md:30
#, no-wrap
msgid "HTTP / Console Kernels"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:33 docs/master/lifecycle.md:33
msgid "Next, the incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application. These two kernels serve as the central location that all requests flow through. For now, let's just focus on the HTTP kernel, which is located in `app/Http/Kernel.php`."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:35 docs/master/lifecycle.md:35
msgid "The HTTP kernel extends the `Illuminate\\Foundation\\Http\\Kernel` class, which defines an array of `bootstrappers` that will be run before the request is executed. These bootstrappers configure error handling, configure logging, [detect the application environment](/docs/{{version}}/configuration#environment-configuration), and perform other tasks that need to be done before the request is actually handled. Typically, these classes handle internal Laravel configuration that you do not need to worry about."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:37 docs/master/lifecycle.md:37
msgid "The HTTP kernel also defines a list of HTTP [middleware](/docs/{{version}}/middleware) that all requests must pass through before being handled by the application. These middleware handle reading and writing the [HTTP session](/docs/{{version}}/session), determining if the application is in maintenance mode, [verifying the CSRF token](/docs/{{version}}/csrf), and more. We'll talk more about these soon."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:39 docs/master/lifecycle.md:39
msgid "The method signature for the HTTP kernel's `handle` method is quite simple: it receives a `Request` and returns a `Response`. Think of the kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:41 docs/8.x/packages.md:74 docs/master/lifecycle.md:41
#: docs/master/packages.md:74
#, no-wrap
msgid "<a name=\"service-providers\"></a>\n"
msgstr ""

#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  providers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  lifecycle.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  providers.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/lifecycle.md:41 docs/8.x/packages.md:74 docs/8.x/providers.md:1
#: docs/master/lifecycle.md:41 docs/master/packages.md:74
#: docs/master/providers.md:1
#, no-wrap
msgid "Service Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:44 docs/master/lifecycle.md:44
msgid "One of the most important kernel bootstrapping actions is loading the [service providers](/docs/{{version}}/providers) for your application. All of the service providers for the application are configured in the `config/app.php` configuration file's `providers` array."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:46 docs/master/lifecycle.md:46
msgid "Laravel will iterate through this list of providers and instantiate each of them. After instantiating the providers, the `register` method will be called on all of the providers. Then, once all of the providers have been registered, the `boot` method will be called on each provider."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:48 docs/master/lifecycle.md:48
msgid "Service providers are responsible for bootstrapping all of the framework's various components, such as the database, queue, validation, and routing components. Essentially every major feature offered by Laravel is bootstrapped and configured by a service provider. Since they bootstrap and configure so many features offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:50 docs/master/lifecycle.md:50
msgid "You may be wondering why the `register` method of every service provider is called before calling the `boot` method on any service providers. The answer is simple. By calling the `register` method of every service provider first, service providers may depend on every container binding being registered and available by the time the `boot` method is executed."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:52 docs/8.x/passwords.md:43 docs/8.x/socialite.md:49
#: docs/8.x/upgrade.md:301 docs/master/lifecycle.md:52
#: docs/master/passwords.md:33 docs/master/socialite.md:49
#: docs/master/upgrade.md:301
#, no-wrap
msgid "<a name=\"routing\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:55 docs/master/lifecycle.md:55
msgid "One of the most important service providers in your application is the `App\\Providers\\RouteServiceProvider`. This service provider loads the route files contained within your application's `routes` directory. Go ahead, crack open the `RouteServiceProvider` code and take a look at how it works!"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:57 docs/master/lifecycle.md:57
msgid "Once the application has been bootstrapped and all service providers have been registered, the `Request` will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:59 docs/master/lifecycle.md:59
msgid "Middleware provide a convenient mechanism for filtering or examining HTTP requests entering your application. For example, Laravel includes a middleware that verifies if the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to the login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application. Some middleware are assigned to all routes within the application, like those defined in the `$middleware` property of your HTTP kernel, while some are only assigned to specific routes or route groups. You can learn more about middleware by reading the complete [middleware documentation](/docs/{{version}}/middleware)."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:61 docs/master/lifecycle.md:61
msgid "If the request passes through all of the matched route's assigned middleware, the route or controller method will be executed and the response returned by the route or controller method will be sent back through the route's chain of middleware."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:63 docs/master/lifecycle.md:63
#, no-wrap
msgid "<a name=\"finishing-up\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/lifecycle.md:63 docs/master/lifecycle.md:63
#, no-wrap
msgid "Finishing Up"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:66 docs/master/lifecycle.md:66
msgid "Once the route or controller method returns a response, the response will travel back outward through the route's middleware, giving the application a chance to modify or examine the outgoing response."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:68 docs/master/lifecycle.md:68
msgid "Finally, once the response travels back through the middleware, the HTTP kernel's `handle` method returns the response object and the `index.php` file calls the `send` method on the returned response. The `send` method sends the response content to the user's web browser. We've finished our journey through the entire Laravel request lifecycle!"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:70 docs/master/lifecycle.md:70
#, no-wrap
msgid "<a name=\"focus-on-service-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/lifecycle.md:70 docs/master/lifecycle.md:70
#, no-wrap
msgid "Focus On Service Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:73 docs/master/lifecycle.md:73
msgid "Service providers are truly the key to bootstrapping a Laravel application. The application instance is created, the service providers are registered, and the request is handed to the bootstrapped application. It's really that simple!"
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:75 docs/master/lifecycle.md:75
msgid "Having a firm grasp of how a Laravel application is built and bootstrapped via service providers is very valuable. Your application's default service providers are stored in the `app/Providers` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/lifecycle.md:76 docs/master/lifecycle.md:76
msgid "By default, the `AppServiceProvider` is fairly empty. This provider is a great place to add your application's own bootstrapping and service container bindings. For large applications, you may wish to create several service providers, each with more granular bootstrapping for specific services used by your application."
msgstr ""

#. type: Title #
#: docs/8.x/localization.md:1 docs/master/localization.md:1
#, no-wrap
msgid "Localization"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Configuring The Locale](#configuring-the-locale)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Defining Translation Strings](#defining-translation-strings)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Using Short Keys](#using-short-keys)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Using Translation Strings As Keys](#using-translation-strings-as-keys)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Retrieving Translation Strings](#retrieving-translation-strings)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Replacing Parameters In Translation Strings](#replacing-parameters-in-translation-strings)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Pluralization](#pluralization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/localization.md:12 docs/master/localization.md:12
msgid "[Overriding Package Language Files](#overriding-package-language-files)"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:17 docs/master/localization.md:17
msgid "Laravel's localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:19 docs/master/localization.md:19
msgid "Laravel provides two ways to manage translation strings. First, language strings may be stored in files within the `resources/lang` directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:26 docs/8.x/localization.md:86
#: docs/master/localization.md:26 docs/master/localization.md:86
#, no-wrap
msgid "    /resources\n"
"        /lang\n"
"            /en\n"
"                messages.php\n"
"            /es\n"
"                messages.php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:28 docs/master/localization.md:28
msgid "Or, translation strings may be defined within JSON files that are placed within the `resources/lang` directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for application's that have a large number of translatable strings:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:33 docs/master/localization.md:33
#, no-wrap
msgid "    /resources\n"
"        /lang\n"
"            en.json\n"
"            es.json\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:35 docs/master/localization.md:35
msgid "We'll discuss each approach to managing translation strings within this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:37 docs/master/localization.md:37
#, no-wrap
msgid "<a name=\"configuring-the-locale\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/localization.md:37 docs/master/localization.md:37
#, no-wrap
msgid "Configuring The Locale"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:40 docs/master/localization.md:40
msgid "The default language for your application is stored in the `config/app.php` configuration file's `locale` configuration option. You are free to modify this value to suit the needs of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:42 docs/master/localization.md:42
msgid "You may modify the default language for a single HTTP request at runtime using the `setLocale` method provided by the `App` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:49 docs/master/localization.md:49
#, no-wrap
msgid "    Route::get('/greeting/{locale}', function ($locale) {\n"
"        if (! in_array($locale, ['en', 'es', 'fr'])) {\n"
"            abort(400);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:51 docs/master/localization.md:51
#, no-wrap
msgid "        App::setLocale($locale);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:56 docs/master/localization.md:56
msgid "You may configure a \"fallback language\", which will be used when the active language does not contain a given translation string. Like the default language, the fallback language is also configured in the `config/app.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:58 docs/master/localization.md:58
#, no-wrap
msgid "    'fallback_locale' => 'en',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:60 docs/master/localization.md:60
#, no-wrap
msgid "<a name=\"determining-the-current-locale\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/localization.md:60 docs/master/localization.md:60
#, no-wrap
msgid "Determining The Current Locale"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:63 docs/master/localization.md:63
msgid "You may use the `currentLocale` and `isLocale` methods on the `App` facade to determine the current locale or check if the locale is a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:67 docs/master/localization.md:67
#, no-wrap
msgid "    $locale = App::currentLocale();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:71 docs/master/localization.md:71
#, no-wrap
msgid "    if (App::isLocale('en')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:73 docs/master/localization.md:73
#, no-wrap
msgid "<a name=\"defining-translation-strings\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/localization.md:73 docs/master/localization.md:73
#, no-wrap
msgid "Defining Translation Strings"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:76 docs/master/localization.md:76
#, no-wrap
msgid "<a name=\"using-short-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/localization.md:76 docs/master/localization.md:76
#, no-wrap
msgid "Using Short Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:79 docs/master/localization.md:79
msgid "Typically, translation strings are stored in files within the `resources/lang` directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:88 docs/master/localization.md:88
msgid "All language files return an array of keyed strings. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:92 docs/master/localization.md:92
#, no-wrap
msgid "    // resources/lang/en/messages.php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:96 docs/master/localization.md:96
#, no-wrap
msgid "    return [\n"
"        'welcome' => 'Welcome to our application!',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:98 docs/master/localization.md:98
#, no-wrap
msgid "> {note} For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, \"en_GB\" should be used for British English rather than \"en-gb\".\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:100 docs/master/localization.md:100
#, no-wrap
msgid "<a name=\"using-translation-strings-as-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/localization.md:100 docs/master/localization.md:100
#, no-wrap
msgid "Using Translation Strings As Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:103 docs/master/localization.md:103
msgid "For applications with a large number of translatable strings, defining every string with a \"short key\" can become confusing when referencing the keys in your views and it is cumbersome to continually invent keys for every translation string supported by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:105 docs/master/localization.md:105
msgid "For this reason, Laravel also provides support for defining translation strings using the \"default\" translation of the string as the key. Translation files that use translation strings as keys are stored as JSON files in the `resources/lang` directory. For example, if your application has a Spanish translation, you should create a `resources/lang/es.json` file:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/localization.md:106 docs/master/localization.md:106
#, no-wrap
msgid "{\n"
"    \"I love programming.\": \"Me encanta programar.\"\n"
"}\n"
msgstr ""

#. type: Title ####
#: docs/8.x/localization.md:112 docs/master/localization.md:112
#, no-wrap
msgid "Key / File Conflicts"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:115 docs/master/localization.md:115
msgid "You should not define translation string keys that conflict with other translation filenames. For example, translating `__('Action')` for the \"NL\" locale while a `nl/action.php` file exists but a `nl.json` file does not exist will result in the translator returning the contents of `nl/action.php`."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:117 docs/master/localization.md:117
#, no-wrap
msgid "<a name=\"retrieving-translation-strings\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/localization.md:117 docs/master/localization.md:117
#, no-wrap
msgid "Retrieving Translation Strings"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:120 docs/master/localization.md:120
msgid "You may retrieve translation strings from your language files using the `__` helper function. If you are using \"short keys\" to define your translation strings, you should pass the file that contains the key and the key itself to the `__` function using \"dot\" syntax. For example, let's retrieve the `welcome` translation string from the `resources/lang/en/messages.php` language file:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:124 docs/master/localization.md:124
msgid "If the specified translation string does not exist, the `__` function will return the translation string key. So, using the example above, the `__` function would return `messages.welcome` if the translation string does not exist."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:126 docs/master/localization.md:126
#, no-wrap
msgid " If you are using your [default translation strings as your translation keys](#using-translation-strings-as-keys), you should pass the default translation of your string to the `__` function;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:128 docs/master/localization.md:128
#, no-wrap
msgid "    echo __('I love programming.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:130 docs/master/localization.md:130
msgid "Again, if the translation string does not exist, the `__` function will return the translation string key that it was given."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:132 docs/master/localization.md:132
msgid "If you are using the [Blade templating engine](/docs/{{version}}/blade), you may use the `{{ }}` echo syntax to display the translation string:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:134 docs/master/localization.md:134
#, no-wrap
msgid "    {{ __('messages.welcome') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:136 docs/master/localization.md:136
#, no-wrap
msgid "<a name=\"replacing-parameters-in-translation-strings\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/localization.md:136 docs/master/localization.md:136
#, no-wrap
msgid "Replacing Parameters In Translation Strings"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:139 docs/master/localization.md:139
msgid "If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a `:`. For example, you may define a welcome message with a placeholder name:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:141 docs/master/localization.md:141
#, no-wrap
msgid "    'welcome' => 'Welcome, :name',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:143 docs/master/localization.md:143
msgid "To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the `__` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:145 docs/master/localization.md:145
#, no-wrap
msgid "    echo __('messages.welcome', ['name' => 'dayle']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:147 docs/master/localization.md:147
msgid "If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:150 docs/master/localization.md:150
#, no-wrap
msgid "    'welcome' => 'Welcome, :NAME', // Welcome, DAYLE\n"
"    'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:152 docs/master/localization.md:152
#, no-wrap
msgid "<a name=\"pluralization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/localization.md:152 docs/master/localization.md:152
#, no-wrap
msgid "Pluralization"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:155 docs/master/localization.md:155
msgid "Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization; however, Laravel can help you translate strings differently based on pluralization rules that you define. Using a `|` character, you may distinguish singular and plural forms of a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:157 docs/master/localization.md:157
#, no-wrap
msgid "    'apples' => 'There is one apple|There are many apples',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:159 docs/master/localization.md:159
msgid "Of course, pluralization is also supported when using [translation strings as keys](#using-translation-strings-as-keys):"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/localization.md:160 docs/master/localization.md:160
#, no-wrap
msgid "{\n"
"    \"There is one apple|There are many apples\": \"Hay una manzana|Hay muchas manzanas\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:167 docs/master/localization.md:167
msgid "You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:169 docs/master/localization.md:169
#, no-wrap
msgid "    'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:171 docs/master/localization.md:171
msgid "After defining a translation string that has pluralization options, you may use the `trans_choice` function to retrieve the line for a given \"count\". In this example, since the count is greater than one, the plural form of the translation string is returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:173 docs/master/localization.md:173
#, no-wrap
msgid "    echo trans_choice('messages.apples', 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:175 docs/master/localization.md:175
msgid "You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the `trans_choice` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:177 docs/master/localization.md:177
#, no-wrap
msgid "    'minutes_ago' => '{1} :value minute ago|[2,*] :value minutes ago',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:179 docs/master/localization.md:179
#, no-wrap
msgid "    echo trans_choice('time.minutes_ago', 5, ['value' => 5]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:181 docs/master/localization.md:181
msgid "If you would like to display the integer value that was passed to the `trans_choice` function, you may use the built-in `:count` placeholder:"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:183 docs/master/localization.md:183
#, no-wrap
msgid "    'apples' => '{0} There are none|{1} There is one|[2,*] There are :count',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:185 docs/master/localization.md:185
#, no-wrap
msgid "<a name=\"overriding-package-language-files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/localization.md:185 docs/master/localization.md:185
#, no-wrap
msgid "Overriding Package Language Files"
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:188 docs/master/localization.md:188
msgid "Some packages may ship with their own language files. Instead of changing the package's core files to tweak these lines, you may override them by placing files in the `resources/lang/vendor/{package}/{locale}` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/localization.md:189 docs/master/localization.md:189
msgid "So, for example, if you need to override the English translation strings in `messages.php` for a package named `skyrim/hearthfire`, you should place a language file at: `resources/lang/vendor/hearthfire/en/messages.php`. Within this file, you should only define the translation strings you wish to override. Any translation strings you don't override will still be loaded from the package's original language files."
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Available Channel Drivers](#available-channel-drivers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Channel Prerequisites](#channel-prerequisites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Building Log Stacks](#building-log-stacks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Writing Log Messages](#writing-log-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Writing To Specific Channels](#writing-to-specific-channels)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Monolog Channel Customization](#monolog-channel-customization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Customizing Monolog For Channels](#customizing-monolog-for-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Creating Monolog Handler Channels](#creating-monolog-handler-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/logging.md:14 docs/master/logging.md:14
msgid "[Creating Custom Channels Via Factories](#creating-custom-channels-via-factories)"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:19 docs/master/logging.md:19
msgid "To help you learn more about what's happening within your application, Laravel provides robust logging services that allow you to log messages to files, the system error log, and even to Slack to notify your entire team."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:21 docs/master/logging.md:21
msgid "Laravel logging is based on \"channels\". Each channel represents a specific way of writing log information. For example, the `single` channel writes log files to a single log file, while the `slack` channel sends log messages to Slack. Log messages may be written to multiple channels based on their severity."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:23 docs/master/logging.md:23
msgid "Under the hood, Laravel utilizes the [Monolog](https://github.com/Seldaek/monolog) library, which provides support for a variety of powerful log handlers. Laravel makes it a cinch to configure these handlers, allowing you to mix and match them to customize your application's log handling."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:28 docs/master/logging.md:28
msgid "All of the configuration options for your application's logging behavior is housed in the `config/logging.php` configuration file. This file allows you to configure your application's log channels, so be sure to review each of the available channels and their options. We'll review a few common options below."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:30 docs/master/logging.md:30
msgid "By default, Laravel will use the `stack` channel when logging messages. The `stack` channel is used to aggregate multiple log channels into a single channel. For more information on building stacks, check out the [documentation below](#building-log-stacks)."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:32 docs/master/logging.md:32
#, no-wrap
msgid "<a name=\"configuring-the-channel-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:32 docs/master/logging.md:32
#, no-wrap
msgid "Configuring The Channel Name"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:35 docs/master/logging.md:35
msgid "By default, Monolog is instantiated with a \"channel name\" that matches the current environment, such as `production` or `local`. To change this value, add a `name` option to your channel's configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:41 docs/master/logging.md:41
#, no-wrap
msgid "    'stack' => [\n"
"        'driver' => 'stack',\n"
"        'name' => 'channel-name',\n"
"        'channels' => ['single', 'slack'],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:43 docs/master/logging.md:43
#, no-wrap
msgid "<a name=\"available-channel-drivers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:43 docs/master/logging.md:43
#, no-wrap
msgid "Available Channel Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:46 docs/master/logging.md:46
msgid "Each log channel is powered by a \"driver\". The driver determines how and where the log message is actually recorded. The following log channel drivers are available in every Laravel application. An entry for most of these drivers is already present in your application's `config/logging.php` configuration file, so be sure to review this file to become familiar with its contents:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:59 docs/master/logging.md:59
msgid "Name | Description ------------- | ------------- `custom` | A driver that calls a specified factory to create a channel `daily` | A `RotatingFileHandler` based Monolog driver which rotates daily `errorlog` | A `ErrorLogHandler` based Monolog driver `monolog` | A Monolog factory driver that may use any supported Monolog handler `null` | A driver that discards all log messages `papertrail` | A `SyslogUdpHandler` based Monolog driver `single` | A single file or path based logger channel (`StreamHandler`)  `slack` | A `SlackWebhookHandler` based Monolog driver `stack` | A wrapper to facilitate creating \"multi-channel\" channels `syslog` | A `SyslogHandler` based Monolog driver"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:61 docs/master/logging.md:61
#, no-wrap
msgid "> {tip} Check out the documentation on [advanced channel customization](#monolog-channel-customization) to learn more about the `monolog` and `custom` drivers.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:63 docs/master/logging.md:63
#, no-wrap
msgid "<a name=\"channel-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:63 docs/master/logging.md:63
#, no-wrap
msgid "Channel Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:66 docs/master/logging.md:66
#, no-wrap
msgid "<a name=\"configuring-the-single-and-daily-channels\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:66 docs/master/logging.md:66
#, no-wrap
msgid "Configuring The Single and Daily Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:69 docs/master/logging.md:69
msgid "The `single` and `daily` channels have three optional configuration options: `bubble`, `permission`, and `locking`."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:75 docs/master/logging.md:75
msgid "Name | Description | Default ------------- | ------------- | ------------- `bubble` | Indicates if messages should bubble up to other channels after being handled | `true` `locking` | Attempt to lock the log file before writing to it | `false` `permission` | The log file's permissions | `0644`"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:77 docs/master/logging.md:77
#, no-wrap
msgid "<a name=\"configuring-the-papertrail-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:77 docs/master/logging.md:77
#, no-wrap
msgid "Configuring The Papertrail Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:80 docs/master/logging.md:80
msgid "The `papertrail` channel requires the `host` and `port` configuration options. You can obtain these values from [Papertrail](https://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-php-apps/#send-events-from-php-app)."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:82 docs/master/logging.md:82
#, no-wrap
msgid "<a name=\"configuring-the-slack-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:82 docs/master/logging.md:82
#, no-wrap
msgid "Configuring The Slack Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:85 docs/master/logging.md:85
msgid "The `slack` channel requires a `url` configuration option. This URL should match a URL for an [incoming webhook](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) that you have configured for your Slack team."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:87 docs/master/logging.md:87
msgid "By default, Slack will only receive logs at the `critical` level and above; however, you can adjust this in your `config/logging.php` configuration file by modifying the `level` configuration option within your Slack log channel's configuration array."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:89 docs/master/logging.md:89
#, no-wrap
msgid "<a name=\"building-log-stacks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:89 docs/master/logging.md:89
#, no-wrap
msgid "Building Log Stacks"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:92 docs/master/logging.md:92
msgid "As mentioned previously, the `stack` driver allows you to combine multiple channels into a single log channel for convenience. To illustrate how to use log stacks, let's take a look at an example configuration that you might see in a production application:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:98 docs/master/logging.md:98
#, no-wrap
msgid "    'channels' => [\n"
"        'stack' => [\n"
"            'driver' => 'stack',\n"
"            'channels' => ['syslog', 'slack'],\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:103 docs/master/logging.md:103
#, no-wrap
msgid "        'syslog' => [\n"
"            'driver' => 'syslog',\n"
"            'level' => 'debug',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:112 docs/master/logging.md:112
#, no-wrap
msgid "        'slack' => [\n"
"            'driver' => 'slack',\n"
"            'url' => env('LOG_SLACK_WEBHOOK_URL'),\n"
"            'username' => 'Laravel Log',\n"
"            'emoji' => ':boom:',\n"
"            'level' => 'critical',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:114 docs/master/logging.md:114
msgid "Let's dissect this configuration. First, notice our `stack` channel aggregates two other channels via its `channels` option: `syslog` and `slack`. So, when logging messages, both of these channels will have the opportunity to log the message. However, as we will see below, whether these channels actually log the message may be determined by the message's severity / \"level\"."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:116 docs/master/logging.md:116
#, no-wrap
msgid "<a name=\"log-levels\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:116 docs/master/logging.md:116
#, no-wrap
msgid "Log Levels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:119 docs/master/logging.md:119
msgid "Take note of the `level` configuration option present on the `syslog` and `slack` channel configurations in the example above. This option determines the minimum \"level\" a message must be in order to be logged by the channel. Monolog, which powers Laravel's logging services, offers all of the log levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info**, and **debug**."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:121 docs/master/logging.md:121
msgid "So, imagine we log a message using the `debug` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:123 docs/master/logging.md:123
#, no-wrap
msgid "    Log::debug('An informational message.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:125 docs/master/logging.md:125
msgid "Given our configuration, the `syslog` channel will write the message to the system log; however, since the error message is not `critical` or above, it will not be sent to Slack. However, if we log an `emergency` message, it will be sent to both the system log and Slack since the `emergency` level is above our minimum level threshold for both channels:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:127 docs/master/logging.md:127
#, no-wrap
msgid "    Log::emergency('The system is down!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:129 docs/master/logging.md:129
#, no-wrap
msgid "<a name=\"writing-log-messages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:129 docs/master/logging.md:129
#, no-wrap
msgid "Writing Log Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:132 docs/master/logging.md:132
msgid "You may write information to the logs using the `Log` [facade](/docs/{{version}}/facades). As previously mentioned, the logger provides the eight logging levels defined in the [RFC 5424 specification](https://tools.ietf.org/html/rfc5424): **emergency**, **alert**, **critical**, **error**, **warning**, **notice**, **info** and **debug**:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:134 docs/8.x/logging.md:185 docs/master/logging.md:134
#: docs/master/logging.md:185
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:143 docs/master/logging.md:143
#, no-wrap
msgid "    Log::emergency($message);\n"
"    Log::alert($message);\n"
"    Log::critical($message);\n"
"    Log::error($message);\n"
"    Log::warning($message);\n"
"    Log::notice($message);\n"
"    Log::info($message);\n"
"    Log::debug($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:145 docs/master/logging.md:145
msgid "You may call any of these methods to log a message for the corresponding level. By default, the message will be written to the default log channel as configured by your `logging` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:153 docs/master/logging.md:153
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:165 docs/master/logging.md:165
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            Log::info('Showing the user profile for user: '.$id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:171 docs/master/logging.md:171
#, no-wrap
msgid "            return view('user.profile', [\n"
"                'user' => User::findOrFail($id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:173 docs/master/logging.md:173
#, no-wrap
msgid "<a name=\"contextual-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:173 docs/master/logging.md:173
#, no-wrap
msgid "Contextual Information"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:176 docs/master/logging.md:176
msgid "An array of contextual data may also be passed to the log methods. This contextual data will be formatted and displayed with the log message:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:178 docs/master/logging.md:178
#, no-wrap
msgid "    Log::info('User failed to login.', ['id' => $user->id]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:180 docs/master/logging.md:180
#, no-wrap
msgid "<a name=\"writing-to-specific-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:180 docs/master/logging.md:180
#, no-wrap
msgid "Writing To Specific Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:183 docs/master/logging.md:183
msgid "Sometimes you may wish to log a message to a channel other than your application's default channel. You may use the `channel` method on the `Log` facade to retrieve and log to any channel defined in your configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:187 docs/master/logging.md:187
#, no-wrap
msgid "    Log::channel('slack')->info('Something happened!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:189 docs/master/logging.md:189
msgid "If you would like to create an on-demand logging stack consisting of multiple channels, you may use the `stack` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:191 docs/master/logging.md:191
#, no-wrap
msgid "    Log::stack(['single', 'slack'])->info('Something happened!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:194 docs/master/logging.md:194
#, no-wrap
msgid "<a name=\"monolog-channel-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:194 docs/master/logging.md:194
#, no-wrap
msgid "Monolog Channel Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:197 docs/master/logging.md:197
#, no-wrap
msgid "<a name=\"customizing-monolog-for-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:197 docs/master/logging.md:197
#, no-wrap
msgid "Customizing Monolog For Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:200 docs/master/logging.md:200
msgid "Sometimes you may need complete control over how Monolog is configured for an existing channel. For example, you may want to configure a custom Monolog `FormatterInterface` implementation for Laravel's built-in `single` channel."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:202 docs/master/logging.md:202
msgid "To get started, define a `tap` array on the channel's configuration. The `tap` array should contain a list of classes that should have an opportunity to customize (or \"tap\" into) the Monolog instance after it is created. There is no conventional location where these classes should be placed, so you are free to create a directory within your application to contain these classes:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:209 docs/master/logging.md:209
#, no-wrap
msgid "    'single' => [\n"
"        'driver' => 'single',\n"
"        'tap' => [App\\Logging\\CustomizeFormatter::class],\n"
"        'path' => storage_path('logs/laravel.log'),\n"
"        'level' => 'debug',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:211 docs/master/logging.md:211
msgid "Once you have configured the `tap` option on your channel, you're ready to define the class that will customize your Monolog instance. This class only needs a single method: `__invoke`, which receives an `Illuminate\\Log\\Logger` instance. The `Illuminate\\Log\\Logger` instance proxies all method calls to the underlying Monolog instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:215 docs/8.x/logging.md:293 docs/master/logging.md:215
#: docs/master/logging.md:293
#, no-wrap
msgid "    namespace App\\Logging;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:217 docs/master/logging.md:217
#, no-wrap
msgid "    use Monolog\\Formatter\\LineFormatter;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:235 docs/master/logging.md:235
#, no-wrap
msgid "    class CustomizeFormatter\n"
"    {\n"
"        /**\n"
"         * Customize the given logger instance.\n"
"         *\n"
"         * @param  \\Illuminate\\Log\\Logger  $logger\n"
"         * @return void\n"
"         */\n"
"        public function __invoke($logger)\n"
"        {\n"
"            foreach ($logger->getHandlers() as $handler) {\n"
"                $handler->setFormatter(new LineFormatter(\n"
"                    '[%datetime%] %channel%.%level_name%: %message% %context% %extra%'\n"
"                ));\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:237 docs/master/logging.md:237
#, no-wrap
msgid "> {tip} All of your \"tap\" classes are resolved by the [service container](/docs/{{version}}/container), so any constructor dependencies they require will automatically be injected.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:239 docs/master/logging.md:239
#, no-wrap
msgid "<a name=\"creating-monolog-handler-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:239 docs/master/logging.md:239
#, no-wrap
msgid "Creating Monolog Handler Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:242 docs/master/logging.md:242
msgid "Monolog has a variety of [available handlers](https://github.com/Seldaek/monolog/tree/master/src/Monolog/Handler) and Laravel does not include a built-in channel for each one. In some cases, you may wish to create a custom channel that is merely an instance of a specific Monolog handler that does not have a corresponding Laravel log driver.  These channels can be easily created using the `monolog` driver."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:244 docs/master/logging.md:244
msgid "When using the `monolog` driver, the `handler` configuration option is used to specify which handler will be instantiated. Optionally, any constructor parameters the handler needs may be specified using the `with` configuration option:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:253 docs/master/logging.md:253
#, no-wrap
msgid "    'logentries' => [\n"
"        'driver'  => 'monolog',\n"
"        'handler' => Monolog\\Handler\\SyslogUdpHandler::class,\n"
"        'with' => [\n"
"            'host' => 'my.logentries.internal.datahubhost.company.com',\n"
"            'port' => '10000',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:255 docs/master/logging.md:255
#, no-wrap
msgid "<a name=\"monolog-formatters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:255 docs/master/logging.md:255
#, no-wrap
msgid "Monolog Formatters"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:258 docs/master/logging.md:258
msgid "When using the `monolog` driver, the Monolog `LineFormatter` will be used as the default formatter. However, you may customize the type of formatter passed to the handler using the `formatter` and `formatter_with` configuration options:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:267 docs/master/logging.md:267
#, no-wrap
msgid "    'browser' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\BrowserConsoleHandler::class,\n"
"        'formatter' => Monolog\\Formatter\\HtmlFormatter::class,\n"
"        'formatter_with' => [\n"
"            'dateFormat' => 'Y-m-d',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:269 docs/master/logging.md:269
msgid "If you are using a Monolog handler that is capable of providing its own formatter, you may set the value of the `formatter` configuration option to `default`:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:275 docs/master/logging.md:275
#, no-wrap
msgid "    'newrelic' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\NewRelicHandler::class,\n"
"        'formatter' => 'default',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:277 docs/master/logging.md:277
#, no-wrap
msgid "<a name=\"creating-custom-channels-via-factories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:277 docs/master/logging.md:277
#, no-wrap
msgid "Creating Custom Channels Via Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:280 docs/master/logging.md:280
msgid "If you would like to define an entirely custom channel in which you have full control over Monolog's instantiation and configuration, you may specify a `custom` driver type in your `config/logging.php` configuration file. Your configuration should include a `via` option that contains the name of the factory class which will be invoked to create the Monolog instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:287 docs/master/logging.md:287
#, no-wrap
msgid "    'channels' => [\n"
"        'example-custom-channel' => [\n"
"            'driver' => 'custom',\n"
"            'via' => App\\Logging\\CreateCustomLogger::class,\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:289 docs/master/logging.md:289
msgid "Once you have configured the `custom` driver channel, you're ready to define the class that will create your Monolog instance. This class only needs a single `__invoke` method which should return the Monolog logger instance. The method will receive the channels configuration array as its only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:295 docs/master/logging.md:295
#, no-wrap
msgid "    use Monolog\\Logger;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:308 docs/master/logging.md:308
#, no-wrap
msgid "    class CreateCustomLogger\n"
"    {\n"
"        /**\n"
"         * Create a custom Monolog instance.\n"
"         *\n"
"         * @param  array  $config\n"
"         * @return \\Monolog\\Logger\n"
"         */\n"
"        public function __invoke(array $config)\n"
"        {\n"
"            return new Logger(...);\n"
"        }\n"
"    }\n"
msgstr ""

#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  mail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/mail.md:1 docs/8.x/upgrade.md:222 docs/master/mail.md:1
#: docs/master/upgrade.md:222
#, no-wrap
msgid "Mail"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[View Data](#view-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Attachments](#attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/8.x/notifications.md:48 docs/master/mail.md:26
#: docs/master/notifications.md:47
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26 docs/master/mail.md:26
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:31 docs/master/mail.md:31
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:36 docs/master/mail.md:36
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:38 docs/master/mail.md:38
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:40 docs/master/mail.md:40
#, no-wrap
msgid "Driver / Transport Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:43 docs/master/mail.md:43
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:47 docs/master/mail.md:47
#, no-wrap
msgid "<a name=\"mailgun-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:47 docs/master/mail.md:47
#, no-wrap
msgid "Mailgun Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:50 docs/master/mail.md:50
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:55 docs/master/mail.md:55
#, no-wrap
msgid "    'mailgun' => [\n"
"        'domain' => env('MAILGUN_DOMAIN'),\n"
"        'secret' => env('MAILGUN_SECRET'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:57 docs/master/mail.md:57
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:63 docs/master/mail.md:63
#, no-wrap
msgid "    'mailgun' => [\n"
"        'domain' => env('MAILGUN_DOMAIN'),\n"
"        'secret' => env('MAILGUN_SECRET'),\n"
"        'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:65 docs/master/mail.md:65
#, no-wrap
msgid "<a name=\"postmark-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:65 docs/master/mail.md:65
#, no-wrap
msgid "Postmark Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:68 docs/master/mail.md:68
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:70 docs/master/mail.md:70
#, no-wrap
msgid "    composer require wildbit/swiftmailer-postmark\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:72 docs/master/mail.md:72
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:76 docs/master/mail.md:76
#, no-wrap
msgid "    'postmark' => [\n"
"        'token' => env('POSTMARK_TOKEN'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:78 docs/master/mail.md:78
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:83 docs/master/mail.md:83
#, no-wrap
msgid "    'postmark' => [\n"
"        'transport' => 'postmark',\n"
"        'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:85 docs/master/mail.md:85
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:87 docs/master/mail.md:87
#, no-wrap
msgid "<a name=\"ses-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:87 docs/master/mail.md:87
#, no-wrap
msgid "SES Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:90 docs/master/mail.md:90
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/mail.md:91 docs/master/mail.md:91
#, no-wrap
msgid "composer require aws/aws-sdk-php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:96 docs/master/mail.md:96
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:102 docs/master/mail.md:102
#, no-wrap
msgid "    'ses' => [\n"
"        'key' => env('AWS_ACCESS_KEY_ID'),\n"
"        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:104 docs/master/mail.md:104
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:116 docs/master/mail.md:116
#, no-wrap
msgid "    'ses' => [\n"
"        'key' => env('AWS_ACCESS_KEY_ID'),\n"
"        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"        'options' => [\n"
"            'ConfigurationSetName' => 'MyConfigurationSet',\n"
"            'Tags' => [\n"
"                ['Name' => 'foo', 'Value' => 'bar'],\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:118 docs/master/mail.md:118
#, no-wrap
msgid "<a name=\"generating-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:118 docs/master/mail.md:118
#, no-wrap
msgid "Generating Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:121 docs/master/mail.md:121
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:123 docs/master/mail.md:123
#, no-wrap
msgid "    php artisan make:mail OrderShipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:125 docs/master/mail.md:125
#, no-wrap
msgid "<a name=\"writing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:125 docs/master/mail.md:125
#, no-wrap
msgid "Writing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:128 docs/master/mail.md:128
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:130 docs/master/mail.md:130
#, no-wrap
msgid "<a name=\"configuring-the-sender\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:130 docs/master/mail.md:130
#, no-wrap
msgid "Configuring The Sender"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:133 docs/master/mail.md:133
#, no-wrap
msgid "<a name=\"using-the-from-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:133 docs/master/mail.md:133
#, no-wrap
msgid "Using The `from` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:136 docs/master/mail.md:136
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:147 docs/master/mail.md:147
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->from('example@example.com')\n"
"                    ->view('emails.orders.shipped');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:149 docs/master/mail.md:149
#, no-wrap
msgid "<a name=\"using-a-global-from-address\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:149 docs/master/mail.md:149
#, no-wrap
msgid "Using A Global `from` Address"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:152 docs/master/mail.md:152
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:154 docs/master/mail.md:154
#, no-wrap
msgid "    'from' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:156 docs/master/mail.md:156
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:158 docs/master/mail.md:158
#, no-wrap
msgid "    'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:160 docs/master/mail.md:160
#, no-wrap
msgid "<a name=\"configuring-the-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:160 docs/master/mail.md:160
#, no-wrap
msgid "Configuring The View"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:163 docs/master/mail.md:163
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:173 docs/master/mail.md:173
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:175 docs/master/mail.md:175
#, no-wrap
msgid "> {tip} You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:177 docs/master/mail.md:177
#, no-wrap
msgid "<a name=\"plain-text-emails\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:177 docs/master/mail.md:177
#, no-wrap
msgid "Plain Text Emails"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:180 docs/master/mail.md:180
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:191 docs/master/mail.md:191
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->text('emails.orders.shipped_plain');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:193 docs/master/mail.md:193
#, no-wrap
msgid "<a name=\"view-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:193 docs/master/mail.md:193
#, no-wrap
msgid "View Data"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:196 docs/master/mail.md:196
#, no-wrap
msgid "<a name=\"via-public-properties\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:196 docs/master/mail.md:196
#, no-wrap
msgid "Via Public Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:199 docs/master/mail.md:199
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:203 docs/8.x/mail.md:256 docs/master/mail.md:203
#: docs/master/mail.md:256
#, no-wrap
msgid "    namespace App\\Mail;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:208 docs/8.x/mail.md:261 docs/master/mail.md:208
#: docs/master/mail.md:261
#, no-wrap
msgid "    use App\\Models\\Order;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Mail\\Mailable;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:212 docs/8.x/mail.md:265 docs/master/mail.md:212
#: docs/master/mail.md:265
#, no-wrap
msgid "    class OrderShipped extends Mailable\n"
"    {\n"
"        use Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:230 docs/master/mail.md:230
#, no-wrap
msgid "        /**\n"
"         * Create a new message instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Order  $order\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Order $order)\n"
"        {\n"
"            $this->order = $order;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:241 docs/master/mail.md:241
#, no-wrap
msgid "        /**\n"
"         * Build the message.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function build()\n"
"        {\n"
"            return $this->view('emails.orders.shipped');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:243 docs/master/mail.md:243
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:247 docs/master/mail.md:247
#, no-wrap
msgid "    <div>\n"
"        Price: {{ $order->price }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:249 docs/master/mail.md:249
#, no-wrap
msgid "<a name=\"via-the-with-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:249 docs/master/mail.md:249
#, no-wrap
msgid "Via The `with` Method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:252 docs/master/mail.md:252
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:272 docs/master/mail.md:272
#, no-wrap
msgid "        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Models\\Order\n"
"         */\n"
"        protected $order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:283 docs/master/mail.md:283
#, no-wrap
msgid "        /**\n"
"         * Create a new message instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Order $order\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Order $order)\n"
"        {\n"
"            $this->order = $order;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:298 docs/master/mail.md:298
#, no-wrap
msgid "        /**\n"
"         * Build the message.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function build()\n"
"        {\n"
"            return $this->view('emails.orders.shipped')\n"
"                        ->with([\n"
"                            'orderName' => $this->order->name,\n"
"                            'orderPrice' => $this->order->price,\n"
"                        ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:300 docs/master/mail.md:300
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:304 docs/master/mail.md:304
#, no-wrap
msgid "    <div>\n"
"        Price: {{ $orderPrice }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:306 docs/master/mail.md:306
#, no-wrap
msgid "<a name=\"attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:306 docs/8.x/notifications.md:409 docs/master/mail.md:306
#: docs/master/notifications.md:424
#, no-wrap
msgid "Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:309 docs/master/mail.md:309
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:320 docs/master/mail.md:320
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attach('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:322 docs/8.x/notifications.md:427 docs/master/mail.md:322
#: docs/master/notifications.md:442
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:336 docs/master/mail.md:336
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attach('/path/to/file', [\n"
"                        'as' => 'name.pdf',\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:338 docs/master/mail.md:338
#, no-wrap
msgid "<a name=\"attaching-files-from-disk\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:338
#, no-wrap
msgid "Attaching Files From Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:341 docs/master/mail.md:341
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:352 docs/master/mail.md:352
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorage('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:354 docs/master/mail.md:354
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:367 docs/master/mail.md:367
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                       'mime' => 'application/pdf'\n"
"                   ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:369 docs/master/mail.md:369
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:380 docs/master/mail.md:380
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorageDisk('s3', '/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:382 docs/8.x/notifications.md:462 docs/master/mail.md:382
#: docs/master/notifications.md:477
#, no-wrap
msgid "<a name=\"raw-data-attachments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:382 docs/8.x/notifications.md:462 docs/master/mail.md:382
#: docs/master/notifications.md:477
#, no-wrap
msgid "Raw Data Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:385 docs/master/mail.md:385
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:398 docs/master/mail.md:398
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attachData($this->pdf, 'name.pdf', [\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:400 docs/master/mail.md:400
#, no-wrap
msgid "<a name=\"inline-attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:400 docs/master/mail.md:400
#, no-wrap
msgid "Inline Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:403 docs/master/mail.md:403
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:406 docs/master/mail.md:406
#, no-wrap
msgid "    <body>\n"
"        Here is an image:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:409 docs/master/mail.md:409
#, no-wrap
msgid "        <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"    </body>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:411 docs/master/mail.md:411
#, no-wrap
msgid "> {note} The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:413 docs/master/mail.md:413
#, no-wrap
msgid "<a name=\"embedding-raw-data-attachments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:413 docs/master/mail.md:413
#, no-wrap
msgid "Embedding Raw Data Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:416 docs/master/mail.md:416
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:419 docs/master/mail.md:419
#, no-wrap
msgid "    <body>\n"
"        Here is an image from raw data:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:422 docs/master/mail.md:422
#, no-wrap
msgid "        <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"    </body>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:424 docs/master/mail.md:424
#, no-wrap
msgid "<a name=\"customizing-the-swiftmailer-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:424 docs/master/mail.md:424
#, no-wrap
msgid "Customizing The SwiftMailer Message"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:427 docs/master/mail.md:427
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:436 docs/master/mail.md:436
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        $this->view('emails.orders.shipped');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:443 docs/master/mail.md:443
#, no-wrap
msgid "        $this->withSwiftMessage(function ($message) {\n"
"            $message->getHeaders()->addTextHeader(\n"
"                'Custom-Header', 'Header Value'\n"
"            );\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:445 docs/master/mail.md:445
#, no-wrap
msgid "<a name=\"markdown-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:445 docs/master/mail.md:445
#, no-wrap
msgid "Markdown Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:448 docs/master/mail.md:448
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:450 docs/master/mail.md:450
#, no-wrap
msgid "<a name=\"generating-markdown-mailables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:450 docs/master/mail.md:450
#, no-wrap
msgid "Generating Markdown Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:453 docs/master/mail.md:453
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:455 docs/master/mail.md:455
#, no-wrap
msgid "    php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:457 docs/master/mail.md:457
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:470 docs/master/mail.md:470
#, no-wrap
msgid "    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->from('example@example.com')\n"
"                    ->markdown('emails.orders.shipped', [\n"
"                        'url' => $this->orderUrl,\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:472 docs/master/mail.md:472
#, no-wrap
msgid "<a name=\"writing-markdown-messages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:472 docs/master/mail.md:472
#, no-wrap
msgid "Writing Markdown Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:475 docs/master/mail.md:475
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:478 docs/master/mail.md:478
#, no-wrap
msgid "    @component('mail::message')\n"
"    # Order Shipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:480 docs/master/mail.md:480
#, no-wrap
msgid "    Your order has been shipped!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:484 docs/master/mail.md:484
#, no-wrap
msgid "    @component('mail::button', ['url' => $url])\n"
"    View Order\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:488 docs/8.x/notifications.md:585 docs/master/mail.md:488
#: docs/master/notifications.md:557
#, no-wrap
msgid "    Thanks,<br>\n"
"    {{ config('app.name') }}\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:490 docs/master/mail.md:490
#, no-wrap
msgid "> {tip} Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:492 docs/8.x/notifications.md:587 docs/master/mail.md:492
#: docs/master/notifications.md:559
#, no-wrap
msgid "<a name=\"button-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:492 docs/8.x/notifications.md:587 docs/master/mail.md:492
#: docs/master/notifications.md:559
#, no-wrap
msgid "Button Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:495 docs/master/mail.md:495
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:499 docs/master/mail.md:499
#, no-wrap
msgid "    @component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"    View Order\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:501 docs/8.x/notifications.md:596 docs/master/mail.md:501
#: docs/master/notifications.md:568
#, no-wrap
msgid "<a name=\"panel-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:501 docs/8.x/notifications.md:596 docs/master/mail.md:501
#: docs/master/notifications.md:568
#, no-wrap
msgid "Panel Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:504 docs/master/mail.md:504
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:508 docs/8.x/notifications.md:603 docs/master/mail.md:508
#: docs/master/notifications.md:575
#, no-wrap
msgid "    @component('mail::panel')\n"
"    This is the panel content.\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:510 docs/8.x/notifications.md:605 docs/master/mail.md:510
#: docs/master/notifications.md:577
#, no-wrap
msgid "<a name=\"table-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:510 docs/8.x/notifications.md:605 docs/master/mail.md:510
#: docs/master/notifications.md:577
#, no-wrap
msgid "Table Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:513 docs/8.x/notifications.md:608 docs/master/mail.md:513
#: docs/master/notifications.md:580
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:520 docs/8.x/notifications.md:615 docs/master/mail.md:520
#: docs/master/notifications.md:587
#, no-wrap
msgid "    @component('mail::table')\n"
"    | Laravel       | Table         | Example  |\n"
"    | ------------- |:-------------:| --------:|\n"
"    | Col 2 is      | Centered      | $10      |\n"
"    | Col 3 is      | Right-Aligned | $20      |\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:522 docs/8.x/notifications.md:617 docs/master/mail.md:522
#: docs/master/notifications.md:589
#, no-wrap
msgid "<a name=\"customizing-the-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:522 docs/8.x/notifications.md:617 docs/master/mail.md:522
#: docs/master/notifications.md:589
#, no-wrap
msgid "Customizing The Components"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:525 docs/master/mail.md:525
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:527 docs/8.x/notifications.md:622 docs/master/mail.md:527
#: docs/master/notifications.md:594
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:529 docs/8.x/notifications.md:624 docs/master/mail.md:529
#: docs/master/notifications.md:596
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:531 docs/8.x/notifications.md:626 docs/master/mail.md:531
#: docs/master/notifications.md:598
#, no-wrap
msgid "<a name=\"customizing-the-css\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:531 docs/8.x/notifications.md:626 docs/master/mail.md:531
#: docs/master/notifications.md:598
#, no-wrap
msgid "Customizing The CSS"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:534 docs/master/mail.md:534
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:536 docs/master/mail.md:536
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:538 docs/master/mail.md:538
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:540 docs/master/mail.md:540
#, no-wrap
msgid "<a name=\"sending-mail\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:540 docs/master/mail.md:540
#, no-wrap
msgid "Sending Mail"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:543 docs/master/mail.md:543
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:553 docs/master/mail.md:553
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Mail\\OrderShipped;\n"
"    use App\\Models\\Order;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Mail;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:567 docs/master/mail.md:567
#, no-wrap
msgid "            // Ship the order...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:571 docs/master/mail.md:571
#, no-wrap
msgid "            Mail::to($request->user())->send(new OrderShipped($order));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:573 docs/master/mail.md:573
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:578 docs/master/mail.md:578
#, no-wrap
msgid "    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:580 docs/master/mail.md:580
#, no-wrap
msgid "<a name=\"looping-over-recipients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:580 docs/master/mail.md:580
#, no-wrap
msgid "Looping Over Recipients"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:583 docs/master/mail.md:583
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:587 docs/master/mail.md:587
#, no-wrap
msgid "    foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"        Mail::to($recipient)->send(new OrderShipped($order));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:589 docs/master/mail.md:589
#, no-wrap
msgid "<a name=\"sending-mail-via-a-specific-mailer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:589 docs/master/mail.md:589
#, no-wrap
msgid "Sending Mail Via A Specific Mailer"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:592 docs/master/mail.md:592
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:596 docs/master/mail.md:596
#, no-wrap
msgid "    Mail::mailer('postmark')\n"
"            ->to($request->user())\n"
"            ->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:598 docs/master/mail.md:598
#, no-wrap
msgid "<a name=\"queueing-mail\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:598 docs/master/mail.md:598
#, no-wrap
msgid "Queueing Mail"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:601 docs/master/mail.md:601
#, no-wrap
msgid "<a name=\"queueing-a-mail-message\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:601 docs/master/mail.md:601
#, no-wrap
msgid "Queueing A Mail Message"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:604 docs/master/mail.md:604
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:609 docs/master/mail.md:609
#, no-wrap
msgid "    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->queue(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:611 docs/master/mail.md:611
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:613 docs/master/mail.md:613
#, no-wrap
msgid "<a name=\"delayed-message-queueing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:613 docs/master/mail.md:613
#, no-wrap
msgid "Delayed Message Queueing"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:616 docs/master/mail.md:616
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:621 docs/master/mail.md:621
#, no-wrap
msgid "    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->later(now()->addMinutes(10), new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:623 docs/master/mail.md:623
#, no-wrap
msgid "<a name=\"pushing-to-specific-queues\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:623 docs/master/mail.md:623
#, no-wrap
msgid "Pushing To Specific Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:626 docs/master/mail.md:626
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:630 docs/master/mail.md:630
#, no-wrap
msgid "    $message = (new OrderShipped($order))\n"
"                    ->onConnection('sqs')\n"
"                    ->onQueue('emails');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:635 docs/master/mail.md:635
#, no-wrap
msgid "    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->queue($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:637 docs/master/mail.md:637
#, no-wrap
msgid "<a name=\"queueing-by-default\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:637 docs/master/mail.md:637
#, no-wrap
msgid "Queueing By Default"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:640 docs/master/mail.md:640
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:642 docs/8.x/mail.md:656 docs/master/mail.md:642
#: docs/master/mail.md:656
#, no-wrap
msgid "    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:647 docs/master/mail.md:647
#, no-wrap
msgid "    class OrderShipped extends Mailable implements ShouldQueue\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:649 docs/master/mail.md:649
#, no-wrap
msgid "<a name=\"queued-mailables-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:649 docs/master/mail.md:649
#, no-wrap
msgid "Queued Mailables & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:652 docs/master/mail.md:652
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:654 docs/master/mail.md:654
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the mailable class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:661 docs/master/mail.md:661
#, no-wrap
msgid "    class OrderShipped extends Mailable implements ShouldQueue\n"
"    {\n"
"        public $afterCommit = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:665 docs/master/mail.md:665
#, no-wrap
msgid "<a name=\"rendering-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:665 docs/master/mail.md:665
#, no-wrap
msgid "Rendering Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:668 docs/master/mail.md:668
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:671 docs/master/mail.md:671
#, no-wrap
msgid "    use App\\Mail\\InvoicePaid;\n"
"    use App\\Models\\Invoice;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:673 docs/master/mail.md:673
#, no-wrap
msgid "    $invoice = Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:675 docs/master/mail.md:675
#, no-wrap
msgid "    return (new InvoicePaid($invoice))->render();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:677 docs/master/mail.md:677
#, no-wrap
msgid "<a name=\"previewing-mailables-in-the-browser\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:677 docs/master/mail.md:677
#, no-wrap
msgid "Previewing Mailables In The Browser"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:680 docs/master/mail.md:680
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:683 docs/master/mail.md:683
#, no-wrap
msgid "    Route::get('/mailable', function () {\n"
"        $invoice = App\\Models\\Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:686 docs/master/mail.md:686
#, no-wrap
msgid "        return new App\\Mail\\InvoicePaid($invoice);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:688 docs/master/mail.md:688
#, no-wrap
msgid "> {note} [Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:690 docs/master/mail.md:690
#, no-wrap
msgid "<a name=\"localizing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:690 docs/master/mail.md:690
#, no-wrap
msgid "Localizing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:693 docs/master/mail.md:693
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:695 docs/master/mail.md:695
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:699 docs/master/mail.md:699
#, no-wrap
msgid "    Mail::to($request->user())->locale('es')->send(\n"
"        new OrderShipped($order)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:701 docs/8.x/notifications.md:1132 docs/master/mail.md:701
#: docs/master/notifications.md:1104
#, no-wrap
msgid "<a name=\"user-preferred-locales\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:701 docs/8.x/notifications.md:1132 docs/master/mail.md:701
#: docs/master/notifications.md:1104
#, no-wrap
msgid "User Preferred Locales"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:704 docs/master/mail.md:704
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:706 docs/8.x/notifications.md:1137 docs/master/mail.md:706
#: docs/master/notifications.md:1109
#, no-wrap
msgid "    use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:719 docs/8.x/notifications.md:1150 docs/master/mail.md:719
#: docs/master/notifications.md:1122
#, no-wrap
msgid "    class User extends Model implements HasLocalePreference\n"
"    {\n"
"        /**\n"
"         * Get the user's preferred locale.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function preferredLocale()\n"
"        {\n"
"            return $this->locale;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:721 docs/master/mail.md:721
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:723 docs/master/mail.md:723
#, no-wrap
msgid "    Mail::to($request->user())->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:725 docs/master/mail.md:725
#, no-wrap
msgid "<a name=\"testing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:725 docs/master/mail.md:725
#, no-wrap
msgid "Testing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:728 docs/master/mail.md:728
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:730 docs/master/mail.md:730
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:733 docs/master/mail.md:733
#, no-wrap
msgid "    use App\\Mail\\InvoicePaid;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:737 docs/master/mail.md:737
#, no-wrap
msgid "    public function test_mailable_content()\n"
"    {\n"
"        $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:739 docs/master/mail.md:739
#, no-wrap
msgid "        $mailable = new InvoicePaid($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:742 docs/master/mail.md:742
#, no-wrap
msgid "        $mailable->assertSeeInHtml($user->email);\n"
"        $mailable->assertSeeInHtml('Invoice Paid');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:746 docs/master/mail.md:746
#, no-wrap
msgid "        $mailable->assertSeeInText($user->email);\n"
"        $mailable->assertSeeInText('Invoice Paid');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:748 docs/master/mail.md:748
#, no-wrap
msgid "<a name=\"testing-mailable-sending\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:748 docs/master/mail.md:748
#, no-wrap
msgid "Testing Mailable Sending"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:751 docs/master/mail.md:751
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:753 docs/master/mail.md:753
#, no-wrap
msgid "<a name=\"mail-and-local-development\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:753 docs/master/mail.md:753
#, no-wrap
msgid "Mail & Local Development"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:756 docs/master/mail.md:756
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:758 docs/master/mail.md:758
#, no-wrap
msgid "<a name=\"log-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:758 docs/master/mail.md:758
#, no-wrap
msgid "Log Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:761 docs/master/mail.md:761
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:763 docs/master/mail.md:763
#, no-wrap
msgid "<a name=\"mailtrap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:763 docs/master/mail.md:763
#, no-wrap
msgid "HELO / Mailtrap / MailHog"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:766 docs/master/mail.md:766
msgid "Finally, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:768 docs/master/mail.md:768
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:773 docs/master/mail.md:773
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:786 docs/master/mail.md:786
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"            'App\\Listeners\\LogSendingMessage',\n"
"        ],\n"
"        'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"            'App\\Listeners\\LogSentMessage',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. #-#-#-#-#  middleware.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  middleware.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/middleware.md:1 docs/8.x/routing.md:310 docs/master/middleware.md:1
#: docs/master/routing.md:310
#, no-wrap
msgid "Middleware"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Defining Middleware](#defining-middleware)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Registering Middleware](#registering-middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Global Middleware](#global-middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Assigning Middleware To Routes](#assigning-middleware-to-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Middleware Groups](#middleware-groups)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Sorting Middleware](#sorting-middleware)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Middleware Parameters](#middleware-parameters)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/middleware.md:12 docs/master/middleware.md:12
msgid "[Terminable Middleware](#terminable-middleware)"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:17 docs/master/middleware.md:17
msgid "Middleware provide a convenient mechanism for inspecting and filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to your application's login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:19 docs/master/middleware.md:19
msgid "Additional middleware can be written to perform a variety of tasks besides authentication. For example, a logging middleware might log all incoming requests to your application. There are several middleware included in the Laravel framework, including middleware for authentication and CSRF protection. All of these middleware are located in the `app/Http/Middleware` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:21 docs/master/middleware.md:21
#, no-wrap
msgid "<a name=\"defining-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/middleware.md:21 docs/master/middleware.md:21
#, no-wrap
msgid "Defining Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:24 docs/master/middleware.md:24
msgid "To create a new middleware, use the `make:middleware` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:26 docs/master/middleware.md:26
#, no-wrap
msgid "    php artisan make:middleware EnsureTokenIsValid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:28 docs/master/middleware.md:28
msgid "This command will place a new `EnsureTokenIsValid` class within your `app/Http/Middleware` directory. In this middleware, we will only allow access to the route if the supplied `token` input matches a specified value. Otherwise, we will redirect the users back to the `home` URI:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:49 docs/master/middleware.md:49
#, no-wrap
msgid "    class EnsureTokenIsValid\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->input('token') !== 'my-secret-token') {\n"
"                return redirect('home');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:55 docs/master/middleware.md:55
msgid "As you can see, if the given `token` does not match our secret token, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to \"pass\"), you should call the `$next` callback with the `$request`."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:57 docs/master/middleware.md:57
msgid "It's best to envision middleware as a series of \"layers\" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:59 docs/master/middleware.md:59
#, no-wrap
msgid "> {tip} All middleware are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a middleware's constructor.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:62 docs/master/middleware.md:62
#, no-wrap
msgid "<a name=\"before-after-middleware\"></a>\n"
"<a name=\"middleware-and-responses\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/middleware.md:62 docs/master/middleware.md:62
#, no-wrap
msgid "Middleware & Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:65 docs/master/middleware.md:65
msgid "Of course, a middleware can perform tasks before or after passing the request deeper into the application. For example, the following middleware would perform some task **before** the request is handled by the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:77 docs/master/middleware.md:77
#, no-wrap
msgid "    class BeforeMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            // Perform action\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:83 docs/master/middleware.md:83
msgid "However, this middleware would perform its task **after** the request is handled by the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:95 docs/master/middleware.md:95
#, no-wrap
msgid "    class AfterMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            $response = $next($request);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:97 docs/master/middleware.md:97
#, no-wrap
msgid "            // Perform action\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:101 docs/master/middleware.md:101
#, no-wrap
msgid "            return $response;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:103 docs/master/middleware.md:103
#, no-wrap
msgid "<a name=\"registering-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/middleware.md:103 docs/master/middleware.md:103
#, no-wrap
msgid "Registering Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:106 docs/master/middleware.md:106
#, no-wrap
msgid "<a name=\"global-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/middleware.md:106 docs/master/middleware.md:106
#, no-wrap
msgid "Global Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:109 docs/master/middleware.md:109
msgid "If you want a middleware to run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:111 docs/master/middleware.md:111
#, no-wrap
msgid "<a name=\"assigning-middleware-to-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/middleware.md:111 docs/master/middleware.md:111
#, no-wrap
msgid "Assigning Middleware To Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:114 docs/master/middleware.md:114
msgid "If you would like to assign middleware to specific routes, you should first assign the middleware a key in your application's `app/Http/Kernel.php` file. By default, the `$routeMiddleware` property of this class contains entries for the middleware included with Laravel. You may add your own middleware to this list and assign it a key of your choosing:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:116 docs/master/middleware.md:116
#, no-wrap
msgid "    // Within App\\Http\\Kernel class...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:128 docs/master/middleware.md:128
#, no-wrap
msgid "    protected $routeMiddleware = [\n"
"        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"        'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:130 docs/master/middleware.md:130
msgid "Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:134 docs/master/middleware.md:134
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:136 docs/master/middleware.md:136
msgid "You may assign multiple middleware to the route by passing an array of middleware names to the `middleware` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:140 docs/master/middleware.md:140
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        //\n"
"    })->middleware(['first', 'second']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:142 docs/master/middleware.md:142
msgid "When assigning middleware, you may also pass the fully qualified class name:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:144 docs/8.x/middleware.md:152
#: docs/master/middleware.md:144 docs/master/middleware.md:152
#, no-wrap
msgid "    use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:148 docs/master/middleware.md:148
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware(EnsureTokenIsValid::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:150 docs/master/middleware.md:150
msgid "When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the `withoutMiddleware` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:157 docs/master/middleware.md:157
#, no-wrap
msgid "    Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"        Route::get('/', function () {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:162 docs/master/middleware.md:162
#, no-wrap
msgid "        Route::get('/profile', function () {\n"
"            //\n"
"        })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:164 docs/master/middleware.md:164
msgid "The `withoutMiddleware` method can only remove route middleware and does not apply to [global middleware](#global-middleware)."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:166 docs/master/middleware.md:166
#, no-wrap
msgid "<a name=\"middleware-groups\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/middleware.md:166 docs/master/middleware.md:166
#, no-wrap
msgid "Middleware Groups"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:169 docs/master/middleware.md:169
msgid "Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the `$middlewareGroups` property of your HTTP kernel."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:171
msgid "Out of the box, Laravel comes with `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:187 docs/master/middleware.md:187
#, no-wrap
msgid "    /**\n"
"     * The application's route middleware groups.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewareGroups = [\n"
"        'web' => [\n"
"            \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"            \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"            // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:193 docs/master/middleware.md:193
#, no-wrap
msgid "        'api' => [\n"
"            'throttle:api',\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:195 docs/master/middleware.md:195
msgid "Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware. Again, middleware groups make it more convenient to assign many middleware to a route at once:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:199 docs/master/middleware.md:199
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        //\n"
"    })->middleware('web');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:203 docs/master/middleware.md:203
#, no-wrap
msgid "    Route::middleware(['web'])->group(function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:205 docs/master/middleware.md:205
#, no-wrap
msgid "> {tip} Out of the box, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:207 docs/master/middleware.md:207
#, no-wrap
msgid "<a name=\"sorting-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/middleware.md:207 docs/master/middleware.md:207
#, no-wrap
msgid "Sorting Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:210 docs/master/middleware.md:210
msgid "Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In this case, you may specify your middleware priority using the `$middlewarePriority` property of your `app/Http/Kernel.php` file. This property may not exist in your HTTP kernel by default. If it does not exist, you may copy its default definition below:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:228 docs/master/middleware.md:228
#, no-wrap
msgid "    /**\n"
"     * The priority-sorted list of middleware.\n"
"     *\n"
"     * This forces non-global middleware to always be in the given order.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewarePriority = [\n"
"        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:230 docs/master/middleware.md:230
#, no-wrap
msgid "<a name=\"middleware-parameters\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/middleware.md:230 docs/master/middleware.md:230
#, no-wrap
msgid "Middleware Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:233 docs/master/middleware.md:233
msgid "Middleware can also receive additional parameters. For example, if your application needs to verify that the authenticated user has a given \"role\" before performing a given action, you could create an `EnsureUserHasRole` middleware that receives a role name as an additional argument."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:235 docs/master/middleware.md:235
msgid "Additional middleware parameters will be passed to the middleware after the `$next` argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:257 docs/master/middleware.md:257
#, no-wrap
msgid "    class EnsureUserHasRole\n"
"    {\n"
"        /**\n"
"         * Handle the incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @param  string  $role\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next, $role)\n"
"        {\n"
"            if (! $request->user()->hasRole($role)) {\n"
"                // Redirect...\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:260 docs/master/middleware.md:260
#, no-wrap
msgid "            return $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:264 docs/master/middleware.md:264
msgid "Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a `:`. Multiple parameters should be delimited by commas:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:268 docs/master/middleware.md:268
#, no-wrap
msgid "    Route::put('/post/{id}', function ($id) {\n"
"        //\n"
"    })->middleware('role:editor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:270 docs/master/middleware.md:270
#, no-wrap
msgid "<a name=\"terminable-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/middleware.md:270 docs/master/middleware.md:270
#, no-wrap
msgid "Terminable Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:273 docs/master/middleware.md:273
msgid "Sometimes a middleware may need to do some work after the HTTP response has been sent to the browser. If you define a `terminate` method on your middleware and your web server is using FastCGI, the `terminate` method will automatically be called after the response is sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:277 docs/master/middleware.md:277
#, no-wrap
msgid "    namespace Illuminate\\Session\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:293 docs/master/middleware.md:293
#, no-wrap
msgid "    class TerminatingMiddleware\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            return $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:306 docs/master/middleware.md:306
#, no-wrap
msgid "        /**\n"
"         * Handle tasks after the response has been sent to the browser.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Illuminate\\Http\\Response  $response\n"
"         * @return void\n"
"         */\n"
"        public function terminate($request, $response)\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:308 docs/master/middleware.md:308
msgid "The `terminate` method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of routes or global middleware in the `app/Http/Kernel.php` file."
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:310 docs/master/middleware.md:310
msgid "When calling the `terminate` method on your middleware, Laravel will resolve a fresh instance of the middleware from the [service container](/docs/{{version}}/container). If you would like to use the same middleware instance when the `handle` and `terminate` methods are called, register the middleware with the container using the container's `singleton` method. Typically this should be done in the `register` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:312 docs/master/middleware.md:312
#, no-wrap
msgid "    use App\\Http\\Middleware\\TerminatingMiddleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/middleware.md:321 docs/master/middleware.md:321
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->singleton(TerminatingMiddleware::class);\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/migrations.md:1 docs/master/migrations.md:1
#, no-wrap
msgid "Database: Migrations"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Generating Migrations](#generating-migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Squashing Migrations](#squashing-migrations)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Migration Structure](#migration-structure)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Running Migrations](#running-migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Rolling Back Migrations](#rolling-back-migrations)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Tables](#tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Creating Tables](#creating-tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Updating Tables](#updating-tables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Renaming / Dropping Tables](#renaming-and-dropping-tables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Columns](#columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Creating Columns](#creating-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Available Column Types](#available-column-types)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Column Modifiers](#column-modifiers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Modifying Columns](#modifying-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Dropping Columns](#dropping-columns)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Indexes](#indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Creating Indexes](#creating-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Renaming Indexes](#renaming-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Dropping Indexes](#dropping-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/migrations.md:24 docs/master/migrations.md:24
msgid "[Foreign Key Constraints](#foreign-key-constraints)"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:29 docs/master/migrations.md:29
msgid "Migrations are like version control for your database, allowing your team to define and share the application's database schema definition. If you have ever had to tell a teammate to manually add a column to their local database schema after pulling in your changes from source control, you've faced the problem that database migrations solve."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:31 docs/master/migrations.md:31
msgid "The Laravel `Schema` [facade](/docs/{{version}}/facades) provides database agnostic support for creating and manipulating tables across all of Laravel's supported database systems. Typically, migrations will use this facade to create and modify database tables and columns."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:33 docs/master/migrations.md:33
#, no-wrap
msgid "<a name=\"generating-migrations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:33 docs/master/migrations.md:33
#, no-wrap
msgid "Generating Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:36 docs/master/migrations.md:36
msgid "You may use the `make:migration` [Artisan command](/docs/{{version}}/artisan) to generate a database migration. The new migration will be placed in your `database/migrations` directory. Each migration filename contains a timestamp that allows Laravel to determine the order of the migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:38 docs/master/migrations.md:38
#, no-wrap
msgid "    php artisan make:migration create_flights_table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:40 docs/master/migrations.md:40
msgid "Laravel will use the name of the migration to attempt to guess the name of the table and whether or not the migration will be creating a new table. If Laravel is able to determine the table name from the migration name, Laravel will pre-fill the generated migration file with the specified table. Otherwise, you may simply specify the table in the migration file manually."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:42 docs/master/migrations.md:42
msgid "If you would like to specify a custom path for the generated migration, you may use the `--path` option when executing the `make:migration` command. The given path should be relative to your application's base path."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:44
#, no-wrap
msgid "> {tip} Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:46 docs/master/migrations.md:46
#, no-wrap
msgid "<a name=\"squashing-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:46 docs/master/migrations.md:46
#, no-wrap
msgid "Squashing Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:49 docs/master/migrations.md:49
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your `database/migrations` directory becoming bloated with potentially hundreds of migrations. If you would like, you may \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:51 docs/8.x/releases.md:144
#: docs/master/migrations.md:51 docs/master/releases.md:144
#, no-wrap
msgid "    php artisan schema:dump\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:54 docs/8.x/releases.md:147
#: docs/master/migrations.md:54 docs/master/releases.md:147
#, no-wrap
msgid "    // Dump the current database schema and prune all existing migrations...\n"
"    php artisan schema:dump --prune\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:56 docs/master/migrations.md:56
msgid "When you execute this command, Laravel will write a \"schema\" file to your application's `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL statements first. After executing the schema file's statements, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:58 docs/master/migrations.md:58
msgid "You should commit your database schema file to source control so that other new developers on your team may quickly create your application's initial database structure."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:60 docs/master/migrations.md:60
#, no-wrap
msgid "> {note} Migration squashing is only available for the MySQL, PostgreSQL, and SQLite databases and utilizes the database's command-line client. Schema dumps may not be restored to in-memory SQLite databases.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:62 docs/master/migrations.md:62
#, no-wrap
msgid "<a name=\"migration-structure\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:62 docs/master/migrations.md:62
#, no-wrap
msgid "Migration Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:65 docs/master/migrations.md:65
msgid "A migration class contains two methods: `up` and `down`. The `up` method is used to add new tables, columns, or indexes to your database, while the `down` method should reverse the operations performed by the `up` method."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:67 docs/master/migrations.md:67
msgid "Within both of these methods, you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the `Schema` builder, [check out its documentation](#creating-tables). For example, the following migration creates a `flights` table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:73 docs/master/migrations.md:73
#, no-wrap
msgid "    use Illuminate\\Database\\Migrations\\Migration;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:90 docs/master/migrations.md:90
#, no-wrap
msgid "    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->string('name');\n"
"                $table->string('airline');\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:101 docs/master/migrations.md:101
#, no-wrap
msgid "        /**\n"
"         * Reverse the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function down()\n"
"        {\n"
"            Schema::drop('flights');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:103
#, no-wrap
msgid "<a name=\"setting-the-migration-connection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:103
#, no-wrap
msgid "Setting The Migration Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:106
msgid "If your migration will be interacting with a database connection other than your application's default database connection, you should set the `$connection` property of your migration:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:113
#, no-wrap
msgid "    /**\n"
"     * The database connection that should be used by the migration.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $connection = 'pgsql';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:123
#, no-wrap
msgid "    /**\n"
"     * Run the migrations.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function up()\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:125 docs/master/migrations.md:103
#, no-wrap
msgid "<a name=\"running-migrations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:125 docs/master/migrations.md:103
#, no-wrap
msgid "Running Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:128 docs/master/migrations.md:106
msgid "To run all of your outstanding migrations, execute the `migrate` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:132
msgid "If you would like to see which migrations have run thus far, you may use the `migrate:status` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:134
#, no-wrap
msgid "    php artisan migrate:status\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:136 docs/master/migrations.md:110
#, no-wrap
msgid "<a name=\"forcing-migrations-to-run-in-production\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:136 docs/master/migrations.md:110
#, no-wrap
msgid "Forcing Migrations To Run In Production"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:139 docs/master/migrations.md:113
msgid "Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the `--force` flag:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:141 docs/master/migrations.md:115
#, no-wrap
msgid "    php artisan migrate --force\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:143 docs/master/migrations.md:117
#, no-wrap
msgid "<a name=\"rolling-back-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:143 docs/master/migrations.md:117
#, no-wrap
msgid "Rolling Back Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:146 docs/master/migrations.md:120
msgid "To roll back the latest migration operation, you may use the `rollback` Artisan command. This command rolls back the last \"batch\" of migrations, which may include multiple migration files:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:148 docs/master/migrations.md:122
#, no-wrap
msgid "    php artisan migrate:rollback\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:150 docs/master/migrations.md:124
msgid "You may roll back a limited number of migrations by providing the `step` option to the `rollback` command. For example, the following command will roll back the last five migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:152 docs/master/migrations.md:126
#, no-wrap
msgid "    php artisan migrate:rollback --step=5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:154 docs/master/migrations.md:128
msgid "The `migrate:reset` command will roll back all of your application's migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:156 docs/master/migrations.md:130
#, no-wrap
msgid "    php artisan migrate:reset\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:158 docs/master/migrations.md:132
#, no-wrap
msgid "<a name=\"roll-back-migrate-using-a-single-command\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:158 docs/master/migrations.md:132
#, no-wrap
msgid "Roll Back & Migrate Using A Single Command"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:161 docs/master/migrations.md:135
msgid "The `migrate:refresh` command will roll back all of your migrations and then execute the `migrate` command. This command effectively re-creates your entire database:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:163 docs/master/migrations.md:137
#, no-wrap
msgid "    php artisan migrate:refresh\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:166 docs/master/migrations.md:140
#, no-wrap
msgid "    // Refresh the database and run all database seeds...\n"
"    php artisan migrate:refresh --seed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:168 docs/master/migrations.md:142
msgid "You may roll back and re-migrate a limited number of migrations by providing the `step` option to the `refresh` command. For example, the following command will roll back and re-migrate the last five migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:170 docs/master/migrations.md:144
#, no-wrap
msgid "    php artisan migrate:refresh --step=5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:172 docs/master/migrations.md:146
#, no-wrap
msgid "<a name=\"drop-all-tables-migrate\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:172 docs/master/migrations.md:146
#, no-wrap
msgid "Drop All Tables & Migrate"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:175 docs/master/migrations.md:149
msgid "The `migrate:fresh` command will drop all tables from the database and then execute the `migrate` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:177 docs/master/migrations.md:151
#, no-wrap
msgid "    php artisan migrate:fresh\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:179 docs/8.x/seeding.md:108
#: docs/master/migrations.md:153 docs/master/seeding.md:108
#, no-wrap
msgid "    php artisan migrate:fresh --seed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:181 docs/master/migrations.md:155
#, no-wrap
msgid "> {note} The `migrate:fresh` command will drop all database tables regardless of their prefix. This command should be used with caution when developing on a database that is shared with other applications.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:186 docs/master/migrations.md:160
#, no-wrap
msgid "<a name=\"creating-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:186 docs/master/migrations.md:160
#, no-wrap
msgid "Creating Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:189 docs/master/migrations.md:163
msgid "To create a new database table, use the `create` method on the `Schema` facade. The `create` method accepts two arguments: the first is the name of the table, while the second is a closure which receives a `Blueprint` object that may be used to define the new table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:192 docs/8.x/migrations.md:256
#: docs/8.x/migrations.md:291 docs/8.x/migrations.md:814
#: docs/8.x/migrations.md:975 docs/8.x/migrations.md:1056
#: docs/8.x/upgrade.md:285 docs/master/migrations.md:166
#: docs/master/migrations.md:230 docs/master/migrations.md:265
#: docs/master/migrations.md:788 docs/master/migrations.md:938
#: docs/master/migrations.md:1019 docs/master/upgrade.md:285
#, no-wrap
msgid "    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:199 docs/master/migrations.md:173
#, no-wrap
msgid "    Schema::create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"        $table->string('name');\n"
"        $table->string('email');\n"
"        $table->timestamps();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:201 docs/master/migrations.md:175
msgid "When creating the table, you may use any of the schema builder's [column methods](#creating-columns) to define the table's columns."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:203 docs/master/migrations.md:177
#, no-wrap
msgid "<a name=\"checking-for-table-column-existence\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:203 docs/master/migrations.md:177
#, no-wrap
msgid "Checking For Table / Column Existence"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:206 docs/master/migrations.md:180
msgid "You may check for the existence of a table or column using the `hasTable` and `hasColumn` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:210 docs/master/migrations.md:184
#, no-wrap
msgid "    if (Schema::hasTable('users')) {\n"
"        // The \"users\" table exists...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:214 docs/master/migrations.md:188
#, no-wrap
msgid "    if (Schema::hasColumn('users', 'email')) {\n"
"        // The \"users\" table exists and has an \"email\" column...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:216 docs/master/migrations.md:190
#, no-wrap
msgid "<a name=\"database-connection-table-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:216 docs/master/migrations.md:190
#, no-wrap
msgid "Database Connection & Table Options"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:219 docs/master/migrations.md:193
msgid "If you want to perform a schema operation on a database connection that is not your application's default connection, use the `connection` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:223 docs/master/migrations.md:197
#, no-wrap
msgid "    Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n"
"        $table->id();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:225 docs/master/migrations.md:199
msgid "In addition, a few other properties and methods may be used to define other aspects of the table's creation. The `engine` property may be used to specify the table's storage engine when using MySQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:228 docs/master/migrations.md:202
#, no-wrap
msgid "    Schema::create('users', function (Blueprint $table) {\n"
"        $table->engine = 'InnoDB';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:233 docs/master/migrations.md:207
msgid "The `charset` and `collation` properties may be used to specify the character set and collation for the created table when using MySQL:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:237 docs/master/migrations.md:211
#, no-wrap
msgid "    Schema::create('users', function (Blueprint $table) {\n"
"        $table->charset = 'utf8mb4';\n"
"        $table->collation = 'utf8mb4_unicode_ci';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:242 docs/master/migrations.md:216
msgid "The `temporary` method may be used to indicate that the table should be \"temporary\". Temporary tables are only visible to the current connection's database session and are dropped automatically when the connection is closed:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:245 docs/master/migrations.md:219
#, no-wrap
msgid "    Schema::create('calculations', function (Blueprint $table) {\n"
"        $table->temporary();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:250 docs/master/migrations.md:224
#, no-wrap
msgid "<a name=\"updating-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:250 docs/master/migrations.md:224
#, no-wrap
msgid "Updating Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:253 docs/master/migrations.md:227
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives a `Blueprint` instance you may use to add columns or indexes to the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:260 docs/8.x/migrations.md:295
#: docs/master/migrations.md:234 docs/master/migrations.md:269
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->integer('votes');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:262 docs/master/migrations.md:236
#, no-wrap
msgid "<a name=\"renaming-and-dropping-tables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:262 docs/master/migrations.md:236
#, no-wrap
msgid "Renaming / Dropping Tables"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:265 docs/master/migrations.md:239
msgid "To rename an existing database table, use the `rename` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:267 docs/8.x/migrations.md:1011
#: docs/master/migrations.md:241 docs/master/migrations.md:974
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:269 docs/master/migrations.md:243
#, no-wrap
msgid "    Schema::rename($from, $to);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:271 docs/master/migrations.md:245
msgid "To drop an existing table, you may use the `drop` or `dropIfExists` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:273 docs/master/migrations.md:247
#, no-wrap
msgid "    Schema::drop('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:275 docs/master/migrations.md:249
#, no-wrap
msgid "    Schema::dropIfExists('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:277 docs/master/migrations.md:251
#, no-wrap
msgid "<a name=\"renaming-tables-with-foreign-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:277 docs/master/migrations.md:251
#, no-wrap
msgid "Renaming Tables With Foreign Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:280 docs/master/migrations.md:254
msgid "Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting Laravel assign a convention based name. Otherwise, the foreign key constraint name will refer to the old table name."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:282 docs/master/migrations.md:256
#, no-wrap
msgid "<a name=\"columns\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:282 docs/master/migrations.md:256
#, no-wrap
msgid "Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:285 docs/master/migrations.md:259
#, no-wrap
msgid "<a name=\"creating-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:285 docs/master/migrations.md:259
#, no-wrap
msgid "Creating Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:288 docs/master/migrations.md:262
msgid "The `table` method on the `Schema` facade may be used to update existing tables. Like the `create` method, the `table` method accepts two arguments: the name of the table and a closure that receives an `Illuminate\\Database\\Schema\\Blueprint` instance you may use to add columns to the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:297 docs/master/migrations.md:271
#, no-wrap
msgid "<a name=\"available-column-types\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:297 docs/master/migrations.md:271
#, no-wrap
msgid "Available Column Types"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:300 docs/master/migrations.md:274
msgid "The schema builder blueprint offers a variety of methods that correspond to the different types of columns you can add to your database tables. Each of the available methods are listed in the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:375 docs/master/migrations.md:349
#, no-wrap
msgid "<div id=\"collection-method-list\" markdown=\"1\">\n"
"[bigIncrements](#column-method-bigIncrements)\n"
"[bigInteger](#column-method-bigInteger)\n"
"[binary](#column-method-binary)\n"
"[boolean](#column-method-boolean)\n"
"[char](#column-method-char)\n"
"[dateTimeTz](#column-method-dateTimeTz)\n"
"[dateTime](#column-method-dateTime)\n"
"[date](#column-method-date)\n"
"[decimal](#column-method-decimal)\n"
"[double](#column-method-double)\n"
"[enum](#column-method-enum)\n"
"[float](#column-method-float)\n"
"[foreignId](#column-method-foreignId)\n"
"[geometryCollection](#column-method-geometryCollection)\n"
"[geometry](#column-method-geometry)\n"
"[id](#column-method-id)\n"
"[increments](#column-method-increments)\n"
"[integer](#column-method-integer)\n"
"[ipAddress](#column-method-ipAddress)\n"
"[json](#column-method-json)\n"
"[jsonb](#column-method-jsonb)\n"
"[lineString](#column-method-lineString)\n"
"[longText](#column-method-longText)\n"
"[macAddress](#column-method-macAddress)\n"
"[mediumIncrements](#column-method-mediumIncrements)\n"
"[mediumInteger](#column-method-mediumInteger)\n"
"[mediumText](#column-method-mediumText)\n"
"[morphs](#column-method-morphs)\n"
"[multiLineString](#column-method-multiLineString)\n"
"[multiPoint](#column-method-multiPoint)\n"
"[multiPolygon](#column-method-multiPolygon)\n"
"[nullableMorphs](#column-method-nullableMorphs)\n"
"[nullableTimestamps](#column-method-nullableTimestamps)\n"
"[nullableUuidMorphs](#column-method-nullableUuidMorphs)\n"
"[point](#column-method-point)\n"
"[polygon](#column-method-polygon)\n"
"[rememberToken](#column-method-rememberToken)\n"
"[set](#column-method-set)\n"
"[smallIncrements](#column-method-smallIncrements)\n"
"[smallInteger](#column-method-smallInteger)\n"
"[softDeletesTz](#column-method-softDeletesTz)\n"
"[softDeletes](#column-method-softDeletes)\n"
"[string](#column-method-string)\n"
"[text](#column-method-text)\n"
"[timeTz](#column-method-timeTz)\n"
"[time](#column-method-time)\n"
"[timestampTz](#column-method-timestampTz)\n"
"[timestamp](#column-method-timestamp)\n"
"[timestampsTz](#column-method-timestampsTz)\n"
"[timestamps](#column-method-timestamps)\n"
"[tinyIncrements](#column-method-tinyIncrements)\n"
"[tinyInteger](#column-method-tinyInteger)\n"
"[unsignedBigInteger](#column-method-unsignedBigInteger)\n"
"[unsignedDecimal](#column-method-unsignedDecimal)\n"
"[unsignedInteger](#column-method-unsignedInteger)\n"
"[unsignedMediumInteger](#column-method-unsignedMediumInteger)\n"
"[unsignedSmallInteger](#column-method-unsignedSmallInteger)\n"
"[unsignedTinyInteger](#column-method-unsignedTinyInteger)\n"
"[uuidMorphs](#column-method-uuidMorphs)\n"
"[uuid](#column-method-uuid)\n"
"[year](#column-method-year)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:377 docs/master/migrations.md:351
#, no-wrap
msgid "<a name=\"column-method-bigIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:377
#, no-wrap
msgid "`bigIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:380 docs/master/migrations.md:354
msgid "The `bigIncrements` method creates an auto-incrementing `UNSIGNED BIGINT` (primary key) equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:382 docs/master/migrations.md:356
#, no-wrap
msgid "    $table->bigIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:384 docs/master/migrations.md:358
#, no-wrap
msgid "<a name=\"column-method-bigInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:384 docs/master/migrations.md:358
#, no-wrap
msgid "`bigInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:387 docs/master/migrations.md:361
msgid "The `bigInteger` method creates a `BIGINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:389 docs/master/migrations.md:363
#, no-wrap
msgid "    $table->bigInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:391 docs/master/migrations.md:365
#, no-wrap
msgid "<a name=\"column-method-binary\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:391 docs/master/migrations.md:365
#, no-wrap
msgid "`binary()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:394 docs/master/migrations.md:368
msgid "The `binary` method creates a `BLOB` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:396 docs/master/migrations.md:370
#, no-wrap
msgid "    $table->binary('photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:398 docs/master/migrations.md:372
#, no-wrap
msgid "<a name=\"column-method-boolean\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:398 docs/master/migrations.md:372
#, no-wrap
msgid "`boolean()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:401 docs/master/migrations.md:375
msgid "The `boolean` method creates a `BOOLEAN` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:403 docs/master/migrations.md:377
#, no-wrap
msgid "    $table->boolean('confirmed');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:405 docs/master/migrations.md:379
#, no-wrap
msgid "<a name=\"column-method-char\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:405 docs/master/migrations.md:379
#, no-wrap
msgid "`char()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:408 docs/master/migrations.md:382
msgid "The `char` method creates a `CHAR` equivalent column with of a given length:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:410 docs/master/migrations.md:384
#, no-wrap
msgid "    $table->char('name', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:412 docs/master/migrations.md:386
#, no-wrap
msgid "<a name=\"column-method-dateTimeTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:412 docs/master/migrations.md:386
#, no-wrap
msgid "`dateTimeTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:415 docs/master/migrations.md:389
msgid "The `dateTimeTz` method creates a `DATETIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:417 docs/master/migrations.md:391
#, no-wrap
msgid "    $table->dateTimeTz('created_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:419 docs/master/migrations.md:393
#, no-wrap
msgid "<a name=\"column-method-dateTime\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:419 docs/master/migrations.md:393
#, no-wrap
msgid "`dateTime()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:422 docs/master/migrations.md:396
msgid "The `dateTime` method creates a `DATETIME` equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:424 docs/master/migrations.md:398
#, no-wrap
msgid "    $table->dateTime('created_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:426 docs/master/migrations.md:400
#, no-wrap
msgid "<a name=\"column-method-date\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:426 docs/master/migrations.md:400
#, no-wrap
msgid "`date()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:429 docs/master/migrations.md:403
msgid "The `date` method creates a `DATE` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:431 docs/master/migrations.md:405
#, no-wrap
msgid "    $table->date('created_at');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:433 docs/master/migrations.md:407
#, no-wrap
msgid "<a name=\"column-method-decimal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:433 docs/master/migrations.md:407
#, no-wrap
msgid "`decimal()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:436 docs/master/migrations.md:410
msgid "The `decimal` method creates a `DECIMAL` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:438 docs/master/migrations.md:412
#, no-wrap
msgid "    $table->decimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:440 docs/master/migrations.md:414
#, no-wrap
msgid "<a name=\"column-method-double\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:440 docs/master/migrations.md:414
#, no-wrap
msgid "`double()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:443 docs/master/migrations.md:417
msgid "The `double` method creates a `DOUBLE` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:445 docs/master/migrations.md:419
#, no-wrap
msgid "    $table->double('amount', 8, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:447 docs/master/migrations.md:421
#, no-wrap
msgid "<a name=\"column-method-enum\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:447 docs/master/migrations.md:421
#, no-wrap
msgid "`enum()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:450 docs/master/migrations.md:424
msgid "The `enum` method creates a `ENUM` equivalent column with the given valid values:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:452 docs/master/migrations.md:426
#, no-wrap
msgid "    $table->enum('difficulty', ['easy', 'hard']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:454 docs/master/migrations.md:428
#, no-wrap
msgid "<a name=\"column-method-float\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:454 docs/master/migrations.md:428
#, no-wrap
msgid "`float()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:457 docs/master/migrations.md:431
msgid "The `float` method creates a `FLOAT` equivalent column with the given precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:459 docs/master/migrations.md:433
#, no-wrap
msgid "    $table->float('amount', 8, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:461 docs/master/migrations.md:435
#, no-wrap
msgid "<a name=\"column-method-foreignId\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:461 docs/master/migrations.md:435
#, no-wrap
msgid "`foreignId()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:464 docs/master/migrations.md:438
msgid "The `foreignId` method is an alias of the `unsignedBigInteger` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:466 docs/master/migrations.md:440
#, no-wrap
msgid "    $table->foreignId('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:468 docs/master/migrations.md:442
#, no-wrap
msgid "<a name=\"column-method-geometryCollection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:468 docs/master/migrations.md:442
#, no-wrap
msgid "`geometryCollection()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:471 docs/master/migrations.md:445
msgid "The `geometryCollection` method creates a `GEOMETRYCOLLECTION` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:473 docs/master/migrations.md:447
#, no-wrap
msgid "    $table->geometryCollection('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:475 docs/master/migrations.md:449
#, no-wrap
msgid "<a name=\"column-method-geometry\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:475 docs/master/migrations.md:449
#, no-wrap
msgid "`geometry()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:478 docs/master/migrations.md:452
msgid "The `geometry` method creates a `GEOMETRY` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:480 docs/master/migrations.md:454
#, no-wrap
msgid "    $table->geometry('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:482 docs/master/migrations.md:456
#, no-wrap
msgid "<a name=\"column-method-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:482 docs/master/migrations.md:456
#, no-wrap
msgid "`id()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:485 docs/master/migrations.md:459
msgid "The `id` method is an alias of the `bigIncrements` method. By default, the method will create an `id` column; however, you may pass a column name if you would like to assign a different name to the column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:487 docs/master/migrations.md:461
#, no-wrap
msgid "    $table->id();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:489 docs/master/migrations.md:463
#, no-wrap
msgid "<a name=\"column-method-increments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:489 docs/master/migrations.md:463
#, no-wrap
msgid "`increments()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:492 docs/master/migrations.md:466
msgid "The `increments` method creates an auto-incrementing `UNSIGNED INTEGER` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:494 docs/master/migrations.md:468
#, no-wrap
msgid "    $table->increments('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:496 docs/master/migrations.md:470
#, no-wrap
msgid "<a name=\"column-method-integer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:496 docs/master/migrations.md:470
#, no-wrap
msgid "`integer()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:499 docs/master/migrations.md:473
msgid "The `integer` method creates an `INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:501 docs/master/migrations.md:475
#, no-wrap
msgid "    $table->integer('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:503 docs/master/migrations.md:477
#, no-wrap
msgid "<a name=\"column-method-ipAddress\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:503 docs/master/migrations.md:477
#, no-wrap
msgid "`ipAddress()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:506 docs/master/migrations.md:480
msgid "The `ipAddress` method creates an `INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:508 docs/master/migrations.md:482
#, no-wrap
msgid "    $table->ipAddress('visitor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:510 docs/master/migrations.md:484
#, no-wrap
msgid "<a name=\"column-method-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:510 docs/master/migrations.md:484
#, no-wrap
msgid "`json()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:513 docs/master/migrations.md:487
msgid "The `json` method creates a `JSON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:515 docs/master/migrations.md:489
#, no-wrap
msgid "    $table->json('options');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:517 docs/master/migrations.md:491
#, no-wrap
msgid "<a name=\"column-method-jsonb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:517 docs/master/migrations.md:491
#, no-wrap
msgid "`jsonb()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:520 docs/master/migrations.md:494
msgid "The `jsonb` method creates a `JSONB` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:522 docs/master/migrations.md:496
#, no-wrap
msgid "    $table->jsonb('options');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:524 docs/master/migrations.md:498
#, no-wrap
msgid "<a name=\"column-method-lineString\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:524 docs/master/migrations.md:498
#, no-wrap
msgid "`lineString()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:527 docs/master/migrations.md:501
msgid "The `lineString` method creates a `LINESTRING` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:529 docs/master/migrations.md:503
#, no-wrap
msgid "    $table->lineString('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:531 docs/master/migrations.md:505
#, no-wrap
msgid "<a name=\"column-method-longText\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:531 docs/master/migrations.md:505
#, no-wrap
msgid "`longText()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:534 docs/master/migrations.md:508
msgid "The `longText` method creates a `LONGTEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:536 docs/master/migrations.md:510
#, no-wrap
msgid "    $table->longText('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:538 docs/master/migrations.md:512
#, no-wrap
msgid "<a name=\"column-method-macAddress\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:538 docs/master/migrations.md:512
#, no-wrap
msgid "`macAddress()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:541 docs/master/migrations.md:515
msgid "The `macAddress` method creates a column that is intended to hold a MAC address. Some database systems, such as PostgreSQL, have a dedicated column type for this type of data. Other database systems will use a string equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:543 docs/master/migrations.md:517
#, no-wrap
msgid "    $table->macAddress('device');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:545 docs/master/migrations.md:519
#, no-wrap
msgid "<a name=\"column-method-mediumIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:545 docs/master/migrations.md:519
#, no-wrap
msgid "`mediumIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:548 docs/master/migrations.md:522
msgid "The `mediumIncrements` method creates an auto-incrementing `UNSIGNED MEDIUMINT` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:550 docs/master/migrations.md:524
#, no-wrap
msgid "    $table->mediumIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:552 docs/master/migrations.md:526
#, no-wrap
msgid "<a name=\"column-method-mediumInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:552 docs/master/migrations.md:526
#, no-wrap
msgid "`mediumInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:555 docs/master/migrations.md:529
msgid "The `mediumInteger` method creates a `MEDIUMINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:557 docs/master/migrations.md:531
#, no-wrap
msgid "    $table->mediumInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:559 docs/master/migrations.md:533
#, no-wrap
msgid "<a name=\"column-method-mediumText\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:559 docs/master/migrations.md:533
#, no-wrap
msgid "`mediumText()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:562 docs/master/migrations.md:536
msgid "The `mediumText` method creates a `MEDIUMTEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:564 docs/master/migrations.md:538
#, no-wrap
msgid "    $table->mediumText('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:566 docs/master/migrations.md:540
#, no-wrap
msgid "<a name=\"column-method-morphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:566 docs/master/migrations.md:540
#, no-wrap
msgid "`morphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:569 docs/master/migrations.md:543
msgid "The `morphs` method is a convenience method that adds a `{column}_id` `UNSIGNED BIGINT` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:571 docs/master/migrations.md:545
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships). In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:573 docs/master/migrations.md:547
#, no-wrap
msgid "    $table->morphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:575 docs/master/migrations.md:549
#, no-wrap
msgid "<a name=\"column-method-multiLineString\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:575 docs/master/migrations.md:549
#, no-wrap
msgid "`multiLineString()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:578 docs/master/migrations.md:552
msgid "The `multiLineString` method creates a `MULTILINESTRING` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:580 docs/master/migrations.md:554
#, no-wrap
msgid "    $table->multiLineString('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:582 docs/master/migrations.md:556
#, no-wrap
msgid "<a name=\"column-method-multiPoint\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:582 docs/master/migrations.md:556
#, no-wrap
msgid "`multiPoint()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:585 docs/master/migrations.md:559
msgid "The `multiPoint` method creates a `MULTIPOINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:587 docs/master/migrations.md:561
#, no-wrap
msgid "    $table->multiPoint('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:589 docs/master/migrations.md:563
#, no-wrap
msgid "<a name=\"column-method-multiPolygon\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:589 docs/master/migrations.md:563
#, no-wrap
msgid "`multiPolygon()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:592 docs/master/migrations.md:566
msgid "The `multiPolygon` method creates a `MULTIPOLYGON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:594 docs/master/migrations.md:568
#, no-wrap
msgid "    $table->multiPolygon('positions');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:596 docs/master/migrations.md:570
#, no-wrap
msgid "<a name=\"column-method-nullableTimestamps\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:596 docs/master/migrations.md:570
#, no-wrap
msgid "`nullableTimestamps()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:599 docs/master/migrations.md:573
msgid "The method is similar to the [timestamps](#column-method-timestamps) method; however, the column that is created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:601 docs/master/migrations.md:575
#, no-wrap
msgid "    $table->nullableTimestamps(0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:603 docs/master/migrations.md:577
#, no-wrap
msgid "<a name=\"column-method-nullableMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:603 docs/master/migrations.md:577
#, no-wrap
msgid "`nullableMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:606 docs/master/migrations.md:580
msgid "The method is similar to the [morphs](#column-method-morphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:608 docs/master/migrations.md:582
#, no-wrap
msgid "    $table->nullableMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:610 docs/master/migrations.md:584
#, no-wrap
msgid "<a name=\"column-method-nullableUuidMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:610 docs/master/migrations.md:584
#, no-wrap
msgid "`nullableUuidMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:613 docs/master/migrations.md:587
msgid "The method is similar to the [uuidMorphs](#column-method-uuidMorphs) method; however, the columns that are created will be \"nullable\":"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:615 docs/master/migrations.md:589
#, no-wrap
msgid "    $table->nullableUuidMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:617 docs/master/migrations.md:591
#, no-wrap
msgid "<a name=\"column-method-point\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:617 docs/master/migrations.md:591
#, no-wrap
msgid "`point()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:620 docs/master/migrations.md:594
msgid "The `point` method creates a `POINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:622 docs/master/migrations.md:596
#, no-wrap
msgid "    $table->point('position');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:624 docs/master/migrations.md:598
#, no-wrap
msgid "<a name=\"column-method-polygon\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:624 docs/master/migrations.md:598
#, no-wrap
msgid "`polygon()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:627 docs/master/migrations.md:601
msgid "The `polygon` method creates a `POLYGON` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:629 docs/master/migrations.md:603
#, no-wrap
msgid "    $table->polygon('position');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:631 docs/master/migrations.md:605
#, no-wrap
msgid "<a name=\"column-method-rememberToken\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:631 docs/master/migrations.md:605
#, no-wrap
msgid "`rememberToken()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:634 docs/master/migrations.md:608
msgid "The `rememberToken` method creates a nullable, `VARCHAR(100)` equivalent column that is intended to store the current \"remember me\" [authentication token](/docs/{{version}}/authentication#remembering-users):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:636 docs/master/migrations.md:610
#, no-wrap
msgid "    $table->rememberToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:638 docs/master/migrations.md:612
#, no-wrap
msgid "<a name=\"column-method-set\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:638 docs/master/migrations.md:612
#, no-wrap
msgid "`set()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:641 docs/master/migrations.md:615
msgid "The `set` method creates a `SET` equivalent column with the given list of valid values:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:643 docs/master/migrations.md:617
#, no-wrap
msgid "    $table->set('flavors', ['strawberry', 'vanilla']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:645 docs/master/migrations.md:619
#, no-wrap
msgid "<a name=\"column-method-smallIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:645 docs/master/migrations.md:619
#, no-wrap
msgid "`smallIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:648 docs/master/migrations.md:622
msgid "The `smallIncrements` method creates an auto-incrementing `UNSIGNED SMALLINT` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:650 docs/master/migrations.md:624
#, no-wrap
msgid "    $table->smallIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:652 docs/master/migrations.md:626
#, no-wrap
msgid "<a name=\"column-method-smallInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:652 docs/master/migrations.md:626
#, no-wrap
msgid "`smallInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:655 docs/master/migrations.md:629
msgid "The `smallInteger` method creates a `SMALLINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:657 docs/master/migrations.md:631
#, no-wrap
msgid "    $table->smallInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:659 docs/master/migrations.md:633
#, no-wrap
msgid "<a name=\"column-method-softDeletesTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:659 docs/master/migrations.md:633
#, no-wrap
msgid "`softDeletesTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:662 docs/master/migrations.md:636
msgid "The `softDeletesTz` method adds a nullable `deleted_at` `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:664 docs/master/migrations.md:638
#, no-wrap
msgid "    $table->softDeletesTz($column = 'deleted_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:666 docs/master/migrations.md:640
#, no-wrap
msgid "<a name=\"column-method-softDeletes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:666 docs/master/migrations.md:640
#, no-wrap
msgid "`softDeletes()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:669 docs/master/migrations.md:643
msgid "The `softDeletes` method adds a nullable `deleted_at` `TIMESTAMP` equivalent column with an optional precision (total digits). This column is intended to store the `deleted_at` timestamp needed for Eloquent's \"soft delete\" functionality:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:671 docs/master/migrations.md:645
#, no-wrap
msgid "    $table->softDeletes($column = 'deleted_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:673 docs/master/migrations.md:647
#, no-wrap
msgid "<a name=\"column-method-string\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:673 docs/master/migrations.md:647
#, no-wrap
msgid "`string()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:676 docs/master/migrations.md:650
msgid "The `string` method creates a `VARCHAR` equivalent column of the given length:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:678 docs/master/migrations.md:652
#, no-wrap
msgid "    $table->string('name', 100);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:680 docs/master/migrations.md:654
#, no-wrap
msgid "<a name=\"column-method-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:680 docs/master/migrations.md:654
#, no-wrap
msgid "`text()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:683 docs/master/migrations.md:657
msgid "The `text` method creates a `TEXT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:685 docs/master/migrations.md:659
#, no-wrap
msgid "    $table->text('description');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:687 docs/master/migrations.md:661
#, no-wrap
msgid "<a name=\"column-method-timeTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:687 docs/master/migrations.md:661
#, no-wrap
msgid "`timeTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:690 docs/master/migrations.md:664
msgid "The `timeTz` method creates a `TIME` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:692 docs/master/migrations.md:666
#, no-wrap
msgid "    $table->timeTz('sunrise', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:694 docs/master/migrations.md:668
#, no-wrap
msgid "<a name=\"column-method-time\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:694 docs/master/migrations.md:668
#, no-wrap
msgid "`time()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:697 docs/master/migrations.md:671
msgid "The `time` method creates a `TIME` equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:699 docs/master/migrations.md:673
#, no-wrap
msgid "    $table->time('sunrise', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:701 docs/master/migrations.md:675
#, no-wrap
msgid "<a name=\"column-method-timestampTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:701 docs/master/migrations.md:675
#, no-wrap
msgid "`timestampTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:704 docs/master/migrations.md:678
msgid "The `timestampTz` method creates a `TIMESTAMP` (with timezone) equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:706 docs/master/migrations.md:680
#, no-wrap
msgid "    $table->timestampTz('added_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:708 docs/master/migrations.md:682
#, no-wrap
msgid "<a name=\"column-method-timestamp\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:708 docs/master/migrations.md:682
#, no-wrap
msgid "`timestamp()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:711 docs/master/migrations.md:685
msgid "The `timestamp` method creates a `TIMESTAMP` equivalent column with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:713 docs/master/migrations.md:687
#, no-wrap
msgid "    $table->timestamp('added_at', $precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:715 docs/master/migrations.md:689
#, no-wrap
msgid "<a name=\"column-method-timestampsTz\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:715 docs/master/migrations.md:689
#, no-wrap
msgid "`timestampsTz()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:718 docs/master/migrations.md:692
msgid "The `timestampsTz` method creates `created_at` and `updated_at` `TIMESTAMP` (with timezone) equivalent columns with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:720 docs/master/migrations.md:694
#, no-wrap
msgid "    $table->timestampsTz($precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:722 docs/master/migrations.md:696
#, no-wrap
msgid "<a name=\"column-method-timestamps\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:722 docs/master/migrations.md:696
#, no-wrap
msgid "`timestamps()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:725 docs/master/migrations.md:699
msgid "The `timestamps` method creates `created_at` and `updated_at` `TIMESTAMP` equivalent columns with an optional precision (total digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:727 docs/master/migrations.md:701
#, no-wrap
msgid "    $table->timestamps($precision = 0);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:729 docs/master/migrations.md:703
#, no-wrap
msgid "<a name=\"column-method-tinyIncrements\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:729 docs/master/migrations.md:703
#, no-wrap
msgid "`tinyIncrements()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:732 docs/master/migrations.md:706
msgid "The `tinyIncrements` method creates an auto-incrementing `UNSIGNED TINYINT` equivalent column as a primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:734 docs/master/migrations.md:708
#, no-wrap
msgid "    $table->tinyIncrements('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:736 docs/master/migrations.md:710
#, no-wrap
msgid "<a name=\"column-method-tinyInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:736 docs/master/migrations.md:710
#, no-wrap
msgid "`tinyInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:739 docs/master/migrations.md:713
msgid "The `tinyInteger` method creates a `TINYINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:741 docs/master/migrations.md:715
#, no-wrap
msgid "    $table->tinyInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:743 docs/master/migrations.md:717
#, no-wrap
msgid "<a name=\"column-method-unsignedBigInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:743 docs/master/migrations.md:717
#, no-wrap
msgid "`unsignedBigInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:746 docs/master/migrations.md:720
msgid "The `unsignedBigInteger` method creates an `UNSIGNED BIGINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:748 docs/master/migrations.md:722
#, no-wrap
msgid "    $table->unsignedBigInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:750 docs/master/migrations.md:724
#, no-wrap
msgid "<a name=\"column-method-unsignedDecimal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:750 docs/master/migrations.md:724
#, no-wrap
msgid "`unsignedDecimal()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:753 docs/master/migrations.md:727
msgid "The `unsignedDecimal` method creates an `UNSIGNED DECIMAL` equivalent column with an optional precision (total digits) and scale (decimal digits):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:755 docs/master/migrations.md:729
#, no-wrap
msgid "    $table->unsignedDecimal('amount', $precision = 8, $scale = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:757 docs/master/migrations.md:731
#, no-wrap
msgid "<a name=\"column-method-unsignedInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:757 docs/master/migrations.md:731
#, no-wrap
msgid "`unsignedInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:760 docs/master/migrations.md:734
msgid "The `unsignedInteger` method creates an `UNSIGNED INTEGER` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:762 docs/master/migrations.md:736
#, no-wrap
msgid "    $table->unsignedInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:764 docs/master/migrations.md:738
#, no-wrap
msgid "<a name=\"column-method-unsignedMediumInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:764 docs/master/migrations.md:738
#, no-wrap
msgid "`unsignedMediumInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:767 docs/master/migrations.md:741
msgid "The `unsignedMediumInteger` method creates an `UNSIGNED MEDIUMINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:769 docs/master/migrations.md:743
#, no-wrap
msgid "    $table->unsignedMediumInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:771 docs/master/migrations.md:745
#, no-wrap
msgid "<a name=\"column-method-unsignedSmallInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:771 docs/master/migrations.md:745
#, no-wrap
msgid "`unsignedSmallInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:774 docs/master/migrations.md:748
msgid "The `unsignedSmallInteger` method creates an `UNSIGNED SMALLINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:776 docs/master/migrations.md:750
#, no-wrap
msgid "    $table->unsignedSmallInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:778 docs/master/migrations.md:752
#, no-wrap
msgid "<a name=\"column-method-unsignedTinyInteger\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:778 docs/master/migrations.md:752
#, no-wrap
msgid "`unsignedTinyInteger()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:781 docs/master/migrations.md:755
msgid "The `unsignedTinyInteger` method creates an `UNSIGNED TINYINT` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:783 docs/master/migrations.md:757
#, no-wrap
msgid "    $table->unsignedTinyInteger('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:785 docs/master/migrations.md:759
#, no-wrap
msgid "<a name=\"column-method-uuidMorphs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:785 docs/master/migrations.md:759
#, no-wrap
msgid "`uuidMorphs()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:788 docs/master/migrations.md:762
msgid "The `uuidMorphs` method is a convenience method that adds a `{column}_id` `CHAR(36)` equivalent column and a `{column}_type` `VARCHAR` equivalent column."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:790 docs/master/migrations.md:764
msgid "This method is intended to be used when defining the columns necessary for a polymorphic [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that use UUID identifiers. In the following example, `taggable_id` and `taggable_type` columns would be created:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:792 docs/master/migrations.md:766
#, no-wrap
msgid "    $table->uuidMorphs('taggable');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:794 docs/master/migrations.md:768
#, no-wrap
msgid "<a name=\"column-method-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:794 docs/master/migrations.md:768
#, no-wrap
msgid "`uuid()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:797 docs/master/migrations.md:771
msgid "The `uuid` method creates a `UUID` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:799 docs/master/migrations.md:773
#, no-wrap
msgid "    $table->uuid('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:801 docs/master/migrations.md:775
#, no-wrap
msgid "<a name=\"column-method-year\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:801 docs/master/migrations.md:775
#, no-wrap
msgid "`year()` {#collection-method}"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:804 docs/master/migrations.md:778
msgid "The `year` method creates a `YEAR` equivalent column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:806 docs/master/migrations.md:780
#, no-wrap
msgid "    $table->year('birth_year');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:808 docs/master/migrations.md:782
#, no-wrap
msgid "<a name=\"column-modifiers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:808 docs/master/migrations.md:782
#, no-wrap
msgid "Column Modifiers"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:811 docs/master/migrations.md:785
msgid "In addition to the column types listed above, there are several column \"modifiers\" you may use when adding a column to a database table. For example, to make the column \"nullable\", you may use the `nullable` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:818 docs/master/migrations.md:792
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->nullable();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:820 docs/master/migrations.md:794
msgid "The following table contains all of the available column modifiers. This list does not include [index modifiers](#creating-indexes):"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:839 docs/master/migrations.md:813
#, no-wrap
msgid "Modifier  |  Description\n"
"--------  |  -----------\n"
"`->after('column')`  |  Place the column \"after\" another column (MySQL).\n"
"`->autoIncrement()`  |  Set INTEGER columns as auto-incrementing (primary key).\n"
"`->charset('utf8mb4')`  |  Specify a character set for the column (MySQL).\n"
"`->collation('utf8mb4_unicode_ci')`  |  Specify a collation for the column (MySQL/PostgreSQL/SQL Server).\n"
"`->comment('my comment')`  |  Add a comment to a column (MySQL/PostgreSQL).\n"
"`->default($value)`  |  Specify a \"default\" value for the column.\n"
"`->first()`  |  Place the column \"first\" in the table (MySQL).\n"
"`->from($integer)`  |  Set the starting value of an auto-incrementing field (MySQL / PostgreSQL).\n"
"`->nullable($value = true)`  |  Allow NULL values to be inserted into the column.\n"
"`->storedAs($expression)`  |  Create a stored generated column (MySQL).\n"
"`->unsigned()`  |  Set INTEGER columns as UNSIGNED (MySQL).\n"
"`->useCurrent()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value.\n"
"`->useCurrentOnUpdate()`  |  Set TIMESTAMP columns to use CURRENT_TIMESTAMP when a record is updated.\n"
"`->virtualAs($expression)`  |  Create a virtual generated column (MySQL).\n"
"`->generatedAs($expression)`  |  Create an identity column with specified sequence options (PostgreSQL).\n"
"`->always()`  |  Defines the precedence of sequence values over input for an identity column (PostgreSQL).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:841 docs/master/migrations.md:815
#, no-wrap
msgid "<a name=\"default-expressions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:841 docs/master/migrations.md:815
#, no-wrap
msgid "Default Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:844 docs/master/migrations.md:818
msgid "The `default` modifier accepts a value or an `Illuminate\\Database\\Query\\Expression` instance. Using an `Expression` instance will prevent Laravel from wrapping the value in quotes and allow you to use database specific functions. One situation where this is particularly useful is when you need to assign default values to JSON columns:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:851 docs/master/migrations.md:825
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Schema;\n"
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Database\\Query\\Expression;\n"
"    use Illuminate\\Database\\Migrations\\Migration;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:868 docs/master/migrations.md:842
#, no-wrap
msgid "    class CreateFlightsTable extends Migration\n"
"    {\n"
"        /**\n"
"         * Run the migrations.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function up()\n"
"        {\n"
"            Schema::create('flights', function (Blueprint $table) {\n"
"                $table->id();\n"
"                $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n"
"                $table->timestamps();\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:870 docs/master/migrations.md:844
#, no-wrap
msgid "> {note} Support for default expressions depends on your database driver, database version, and the field type. Please refer to your database's documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:872
#, no-wrap
msgid "<a name=\"column-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:872
#, no-wrap
msgid "Column Order"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:875
msgid "When using the MySQL database, the `after` method may be used to add columns after an existing column in the schema:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:881
#, no-wrap
msgid "    $table->after('password', function ($table) {\n"
"        $table->string('address_line1');\n"
"        $table->string('address_line2');\n"
"        $table->string('city');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:883 docs/master/migrations.md:846
#, no-wrap
msgid "<a name=\"modifying-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:883 docs/master/migrations.md:846
#, no-wrap
msgid "Modifying Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:886 docs/master/migrations.md:849
#, no-wrap
msgid "<a name=\"prerequisites\"></a>\n"
msgstr ""

#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  migrations.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/migrations.md:886 docs/8.x/notifications.md:652
#: docs/8.x/notifications.md:736 docs/8.x/notifications.md:829
#: docs/8.x/notifications.md:953 docs/master/migrations.md:849
#: docs/master/notifications.md:624 docs/master/notifications.md:708
#: docs/master/notifications.md:801 docs/master/notifications.md:925
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:889 docs/master/migrations.md:852
msgid "Before modifying a column, you must install the `doctrine/dbal` package using the Composer package manager. The Doctrine DBAL library is used to determine the current state of the column and to create the SQL queries needed to make the requested changes to your column:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:891 docs/master/migrations.md:854
#, no-wrap
msgid "    composer require doctrine/dbal\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:893 docs/master/migrations.md:856
msgid "If you plan to modify columns created using the `timestamp` method, you must also add the following configuration to your application's `config/database.php` configuration file:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/migrations.md:894 docs/master/migrations.md:857
#, no-wrap
msgid "use Illuminate\\Database\\DBAL\\TimestampType;\n\n"
"'dbal' => [\n"
"    'types' => [\n"
"        'timestamp' => TimestampType::class,\n"
"    ],\n"
"],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:905 docs/master/migrations.md:868
#, no-wrap
msgid "> {note} If your application is using Microsoft SQL Server, please ensure that you install `doctrine/dbal:^3.0`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:907 docs/master/migrations.md:870
#, no-wrap
msgid "<a name=\"updating-column-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:907 docs/master/migrations.md:870
#, no-wrap
msgid "Updating Column Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:910 docs/master/migrations.md:873
msgid "The `change` method allows you to modify the type and attributes of existing columns. For example, you may wish to increase the size of a `string` column. To see the `change` method in action, let's increase the size of the `name` column from 25 to 50. To accomplish this, we simply define the new state of the column and then call the `change` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:914 docs/master/migrations.md:877
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->change();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:916 docs/master/migrations.md:879
msgid "We could also modify a column to be nullable:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:920 docs/master/migrations.md:883
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('name', 50)->nullable()->change();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:922 docs/master/migrations.md:885
#, no-wrap
msgid "> {note} The following column types can be modified: `bigInteger`, `binary`, `boolean`, `date`, `dateTime`, `dateTimeTz`, `decimal`, `integer`, `json`, `longText`, `mediumText`, `smallInteger`, `string`, `text`, `time`, `unsignedBigInteger`, `unsignedInteger`, `unsignedSmallInteger`, and `uuid`.  To modify a `timestamp` column type a [Doctrine type must be registered](#prerequisites).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:924 docs/master/migrations.md:887
#, no-wrap
msgid "<a name=\"renaming-columns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:924 docs/master/migrations.md:887
#, no-wrap
msgid "Renaming Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:927 docs/master/migrations.md:890
msgid "To rename a column, you may use the `renameColumn` method provided by the schema builder blueprint. Before renaming a column, ensure that you have installed the `doctrine/dbal` library via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:931 docs/master/migrations.md:894
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->renameColumn('from', 'to');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:933 docs/master/migrations.md:896
#, no-wrap
msgid "> {note} Renaming an `enum` column is not currently supported.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:935 docs/master/migrations.md:898
#, no-wrap
msgid "<a name=\"dropping-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:935 docs/master/migrations.md:898
#, no-wrap
msgid "Dropping Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:938 docs/master/migrations.md:901
msgid "To drop a column, you may use the `dropColumn` method on the schema builder blueprint. If your application is utilizing an SQLite database, you must install the `doctrine/dbal` package via the Composer package manager before the `dropColumn` method may be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:942 docs/master/migrations.md:905
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn('votes');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:944 docs/master/migrations.md:907
msgid "You may drop multiple columns from a table by passing an array of column names to the `dropColumn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:948 docs/master/migrations.md:911
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->dropColumn(['votes', 'avatar', 'location']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:950 docs/master/migrations.md:913
#, no-wrap
msgid "> {note} Dropping or modifying multiple columns within a single migration while using an SQLite database is not supported.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:952 docs/master/migrations.md:915
#, no-wrap
msgid "<a name=\"available-command-aliases\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:952 docs/master/migrations.md:915
#, no-wrap
msgid "Available Command Aliases"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:955 docs/master/migrations.md:918
msgid "Laravel provides several convenient methods related to dropping common types of columns. Each of these methods is described in the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:964 docs/master/migrations.md:927
#, no-wrap
msgid "Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropMorphs('morphable');`  |  Drop the `morphable_id` and `morphable_type` columns.\n"
"`$table->dropRememberToken();`  |  Drop the `remember_token` column.\n"
"`$table->dropSoftDeletes();`  |  Drop the `deleted_at` column.\n"
"`$table->dropSoftDeletesTz();`  |  Alias of `dropSoftDeletes()` method.\n"
"`$table->dropTimestamps();`  |  Drop the `created_at` and `updated_at` columns.\n"
"`$table->dropTimestampsTz();` |  Alias of `dropTimestamps()` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:966 docs/master/migrations.md:929
#, no-wrap
msgid "<a name=\"indexes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/migrations.md:966 docs/master/migrations.md:929
#, no-wrap
msgid "Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:969 docs/master/migrations.md:932
#, no-wrap
msgid "<a name=\"creating-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:969 docs/master/migrations.md:932
#, no-wrap
msgid "Creating Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:972 docs/master/migrations.md:935
msgid "The Laravel schema builder supports several types of indexes. The following example creates a new `email` column and specifies that its values should be unique. To create the index, we can chain the `unique` method onto the column definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:979 docs/master/migrations.md:942
#, no-wrap
msgid "    Schema::table('users', function (Blueprint $table) {\n"
"        $table->string('email')->unique();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:981 docs/master/migrations.md:944
msgid "Alternatively, you may create the index after defining the column. To do so, you should call the `unique` method on the schema builder blueprint. This method accepts the name of the column that should receive a unique index:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:983 docs/master/migrations.md:946
#, no-wrap
msgid "    $table->unique('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:985 docs/master/migrations.md:948
msgid "You may even pass an array of columns to an index method to create a compound (or composite) index:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:987 docs/master/migrations.md:950
#, no-wrap
msgid "    $table->index(['account_id', 'created_at']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:989 docs/master/migrations.md:952
msgid "When creating an index, Laravel will automatically generate an index name based on the table, column names, and the index type, but you may pass a second argument to the method to specify the index name yourself:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:991 docs/master/migrations.md:954
#, no-wrap
msgid "    $table->unique('email', 'unique_email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:993 docs/master/migrations.md:956
#, no-wrap
msgid "<a name=\"available-index-types\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:993 docs/master/migrations.md:956
#, no-wrap
msgid "Available Index Types"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:996 docs/master/migrations.md:959
msgid "Laravel's schema builder blueprint class provides methods for creating each type of index supported by Laravel. Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s) used for the index, as well as the index type. Each of the available index methods is described in the table below:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1004 docs/master/migrations.md:967
#, no-wrap
msgid "Command  |  Description\n"
"-------  |  -----------\n"
"`$table->primary('id');`  |  Adds a primary key.\n"
"`$table->primary(['id', 'parent_id']);`  |  Adds composite keys.\n"
"`$table->unique('email');`  |  Adds a unique index.\n"
"`$table->index('state');`  |  Adds an index.\n"
"`$table->spatialIndex('location');`  |  Adds a spatial index (except SQLite).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1006 docs/master/migrations.md:969
#, no-wrap
msgid "<a name=\"index-lengths-mysql-mariadb\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1006 docs/master/migrations.md:969
#, no-wrap
msgid "Index Lengths & MySQL / MariaDB"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1009 docs/master/migrations.md:972
msgid "By default, Laravel uses the `utf8mb4` character set. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure the default string length by calling the `Schema::defaultStringLength` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1021 docs/master/migrations.md:984
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Schema::defaultStringLength(191);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1023 docs/master/migrations.md:986
msgid "Alternatively, you may enable the `innodb_large_prefix` option for your database. Refer to your database's documentation for instructions on how to properly enable this option."
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1025 docs/master/migrations.md:988
#, no-wrap
msgid "<a name=\"renaming-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1025 docs/master/migrations.md:988
#, no-wrap
msgid "Renaming Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1028 docs/master/migrations.md:991
msgid "To rename an index, you may use the `renameIndex` method provided by the schema builder blueprint. This method accepts the current index name as its first argument and the desired name as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1030 docs/master/migrations.md:993
#, no-wrap
msgid "    $table->renameIndex('from', 'to')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1032 docs/master/migrations.md:995
#, no-wrap
msgid "<a name=\"dropping-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1032 docs/master/migrations.md:995
#, no-wrap
msgid "Dropping Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1035 docs/master/migrations.md:998
msgid "To drop an index, you must specify the index's name. By default, Laravel automatically assigns an index name based on the table name, the name of the indexed column, and the index type. Here are some examples:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1042 docs/master/migrations.md:1005
#, no-wrap
msgid "Command  |  Description\n"
"-------  |  -----------\n"
"`$table->dropPrimary('users_id_primary');`  |  Drop a primary key from the \"users\" table.\n"
"`$table->dropUnique('users_email_unique');`  |  Drop a unique index from the \"users\" table.\n"
"`$table->dropIndex('geo_state_index');`  |  Drop a basic index from the \"geo\" table.\n"
"`$table->dropSpatialIndex('geo_location_spatialindex');`  |  Drop a spatial index from the \"geo\" table  (except SQLite).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1044 docs/master/migrations.md:1007
msgid "If you pass an array of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns, and index type:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1048 docs/master/migrations.md:1011
#, no-wrap
msgid "    Schema::table('geo', function (Blueprint $table) {\n"
"        $table->dropIndex(['state']); // Drops index 'geo_state_index'\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1050 docs/master/migrations.md:1013
#, no-wrap
msgid "<a name=\"foreign-key-constraints\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/migrations.md:1050 docs/master/migrations.md:1013
#, no-wrap
msgid "Foreign Key Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1053 docs/master/migrations.md:1016
msgid "Laravel also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let's define a `user_id` column on the `posts` table that references the `id` column on a `users` table:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1059 docs/master/migrations.md:1022
#, no-wrap
msgid "    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->unsignedBigInteger('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1062 docs/master/migrations.md:1025
#, no-wrap
msgid "        $table->foreign('user_id')->references('id')->on('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1064 docs/master/migrations.md:1027
msgid "Since this syntax is rather verbose, Laravel provides additional, terser methods that use conventions to provide a better developer experience. The example above can be rewritten like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1068 docs/master/migrations.md:1031
#, no-wrap
msgid "    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1070 docs/master/migrations.md:1033
msgid "The `foreignId` method is an alias for `unsignedBigInteger` while the `constrained` method will use conventions to determine the table and column name being referenced. If your table name does not match Laravel's conventions, you may specify the table name by passing it as an argument to the `constrained` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1074 docs/master/migrations.md:1037
#, no-wrap
msgid "    Schema::table('posts', function (Blueprint $table) {\n"
"        $table->foreignId('user_id')->constrained('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1077 docs/master/migrations.md:1040
msgid "You may also specify the desired action for the \"on delete\" and \"on update\" properties of the constraint:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1082 docs/master/migrations.md:1045
#, no-wrap
msgid "    $table->foreignId('user_id')\n"
"          ->constrained()\n"
"          ->onUpdate('cascade')\n"
"          ->onDelete('cascade');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1084 docs/master/migrations.md:1047
msgid "Any additional [column modifiers](#column-modifiers) must be called before the `constrained` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1088 docs/master/migrations.md:1051
#, no-wrap
msgid "    $table->foreignId('user_id')\n"
"          ->nullable()\n"
"          ->constrained();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1090 docs/master/migrations.md:1053
#, no-wrap
msgid "<a name=\"dropping-foreign-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1090 docs/master/migrations.md:1053
#, no-wrap
msgid "Dropping Foreign Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1093 docs/master/migrations.md:1056
msgid "To drop a foreign key, you may use the `dropForeign` method, passing the name of the foreign key constraint to be deleted as an argument. Foreign key constraints use the same naming convention as indexes. In other words, the foreign key constraint name is based on the name of the table and the columns in the constraint, followed by a \"\\_foreign\" suffix:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1095 docs/master/migrations.md:1058
#, no-wrap
msgid "    $table->dropForeign('posts_user_id_foreign');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1097 docs/master/migrations.md:1060
msgid "Alternatively, you may pass an array containing the column name that holds the foreign key to the `dropForeign` method. The array will be converted to a foreign key constraint name using Laravel's constraint naming conventions:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1099 docs/master/migrations.md:1062
#, no-wrap
msgid "    $table->dropForeign(['user_id']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1101 docs/master/migrations.md:1064
#, no-wrap
msgid "<a name=\"toggling-foreign-key-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/migrations.md:1101 docs/master/migrations.md:1064
#, no-wrap
msgid "Toggling Foreign Key Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1104 docs/master/migrations.md:1067
msgid "You may enable or disable foreign key constraints within your migrations by using the following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1106 docs/master/migrations.md:1069
#, no-wrap
msgid "    Schema::enableForeignKeyConstraints();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1108 docs/master/migrations.md:1071
#, no-wrap
msgid "    Schema::disableForeignKeyConstraints();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/migrations.md:1109 docs/master/migrations.md:1072
#, no-wrap
msgid "> {note} SQLite disables foreign key constraints by default. When using SQLite, make sure to [enable foreign key support](/docs/{{version}}/database#configuration) in your database configuration before attempting to create them in your migrations. In addition, SQLite only supports foreign keys upon creation of the table and [not when tables are altered](https://www.sqlite.org/omitted.html).\n"
msgstr ""

#. type: Title #
#: docs/8.x/mix.md:1 docs/master/mix.md:1
#, no-wrap
msgid "Compiling Assets (Mix)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/8.x/sail.md:24 docs/master/mix.md:21
#: docs/master/sail.md:23
msgid "[Installation & Setup](#installation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Running Mix](#running-mix)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Working With Stylesheets](#working-with-stylesheets)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Tailwind CSS](#tailwindcss)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[PostCSS](#postcss)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Sass](#sass)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[URL Processing](#url-processing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Source Maps](#css-source-maps)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Working With JavaScript](#working-with-scripts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Vue](#vue)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[React](#react)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Vendor Extraction](#vendor-extraction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Custom Webpack Configuration](#custom-webpack-configuration)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Versioning / Cache Busting](#versioning-and-cache-busting)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mix.md:21 docs/master/mix.md:21
msgid "[Browsersync Reloading](#browsersync-reloading)"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:26 docs/master/mix.md:26
msgid "[Laravel Mix](https://github.com/JeffreyWay/laravel-mix), a package developed by [Laracasts](https://laracasts.com) creator Jeffrey Way, provides a fluent API for defining [webpack](https://webpack.js.org) build steps for your Laravel application using several common CSS and JavaScript pre-processors."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:28 docs/master/mix.md:28
msgid "In other words, Mix makes it a cinch to compile and minify your application's CSS and JavaScript files. Through simple method chaining, you can fluently define your asset pipeline. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:31 docs/master/mix.md:31
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"        .postCss('resources/css/app.css', 'public/css');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:33 docs/master/mix.md:33
msgid "If you've ever been confused and overwhelmed about getting started with webpack and asset compilation, you will love Laravel Mix. However, you are not required to use it while developing your application; you are free to use any asset pipeline tool you wish, or even none at all."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:35 docs/master/mix.md:35
#, no-wrap
msgid "> {tip} If you need a head start building your application with Laravel and [Tailwind CSS](https://tailwindcss.com), check out one of our [application starter kits](/docs/{{version}}/starter-kits).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:40 docs/master/mix.md:40
#, no-wrap
msgid "<a name=\"installing-node\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mix.md:40 docs/master/mix.md:40
#, no-wrap
msgid "Installing Node"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:43 docs/master/mix.md:43
msgid "Before running Mix, you must first ensure that Node.js and NPM are installed on your machine:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:46 docs/master/mix.md:46
#, no-wrap
msgid "    node -v\n"
"    npm -v\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:48 docs/master/mix.md:48
msgid "You can easily install the latest version of Node and NPM using simple graphical installers from [the official Node website](https://nodejs.org/en/download/). Or, if you are using [Laravel Sail](/docs/{{version}}/sail), you may invoke Node and NPM through Sail:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:51 docs/master/mix.md:51
#, no-wrap
msgid "    ./sail node -v\n"
"    ./sail npm -v\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:53 docs/master/mix.md:53
#, no-wrap
msgid "<a name=\"installing-laravel-mix\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mix.md:53 docs/master/mix.md:53
#, no-wrap
msgid "Installing Laravel Mix"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:56 docs/master/mix.md:56
msgid "The only remaining step is to install Laravel Mix. Within a fresh installation of Laravel, you'll find a `package.json` file in the root of your directory structure. The default `package.json` file already includes everything you need to get started using Laravel Mix. Think of this file like your `composer.json` file, except it defines Node dependencies instead of PHP dependencies. You may install the dependencies it references by running:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:58 docs/8.x/mix.md:92 docs/master/mix.md:58
#: docs/master/mix.md:92
#, no-wrap
msgid "    npm install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:60 docs/master/mix.md:60
#, no-wrap
msgid "<a name=\"running-mix\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mix.md:60 docs/master/mix.md:60
#, no-wrap
msgid "Running Mix"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:63 docs/master/mix.md:63
msgid "Mix is a configuration layer on top of [webpack](https://webpack.js.org), so to run your Mix tasks you only need to execute one of the NPM scripts that are included in the default Laravel `package.json` file. When you run the `dev` or `production` scripts, all of your application's CSS and JavaScript assets will be compiled and placed in your application's `public` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:66 docs/master/mix.md:66
#, no-wrap
msgid "    // Run all Mix tasks...\n"
"    npm run dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:69 docs/master/mix.md:69
#, no-wrap
msgid "    // Run all Mix tasks and minify output...\n"
"    npm run prod\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:71 docs/master/mix.md:71
#, no-wrap
msgid "<a name=\"watching-assets-for-changes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mix.md:71 docs/master/mix.md:71
#, no-wrap
msgid "Watching Assets For Changes"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:74 docs/master/mix.md:74
msgid "The `npm run watch` command will continue running in your terminal and watch all relevant CSS and JavaScript files for changes. Webpack will automatically recompile your assets when it detects a change to one of these files:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:76 docs/master/mix.md:76
#, no-wrap
msgid "    npm run watch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:78 docs/master/mix.md:78
msgid "Webpack may not be able to detect your file changes in certain local development environments. If this is the case on your system, consider using the `watch-poll` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:80 docs/master/mix.md:80
#, no-wrap
msgid "    npm run watch-poll\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:82 docs/master/mix.md:82
#, no-wrap
msgid "<a name=\"working-with-stylesheets\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mix.md:82 docs/master/mix.md:82
#, no-wrap
msgid "Working With Stylesheets"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:85 docs/master/mix.md:85
msgid "Your application's `webpack.mix.js` file is your entry point for all asset compilation. Think of it as a light configuration wrapper around [webpack](https://webpack.js.org). Mix tasks can be chained together to define exactly how your assets should be compiled."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:87 docs/master/mix.md:87
#, no-wrap
msgid "<a name=\"tailwindcss\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:87 docs/master/mix.md:87
#, no-wrap
msgid "Tailwind CSS"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:90 docs/master/mix.md:90
msgid "[Tailwind CSS](https://tailwindcss.com) is a modern, utility-first framework for building amazing sites without ever leaving your HTML. Let's dig into how to start using it in a Laravel project with Laravel Mix. First, we should install Tailwind using NPM and generate our Tailwind configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:94 docs/master/mix.md:94
#, no-wrap
msgid "    npm install -D tailwindcss\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:96 docs/master/mix.md:96
#, no-wrap
msgid "    npx tailwindcss init\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:98 docs/master/mix.md:98
msgid "The `init` command will generate a `tailwind.config.js` file. Within this file, you may configure the paths to all of your application's templates and JavaScript so that Tailwind can tree-shake unused styles when optimizing your CSS for production:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/mix.md:99 docs/master/mix.md:99
#, no-wrap
msgid "purge: [\n"
"    './storage/framework/views/*.php',\n"
"    './resources/**/*.blade.php',\n"
"    './resources/**/*.js',\n"
"    './resources/**/*.vue',\n"
"],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:109 docs/master/mix.md:109
msgid "Next, you should add each of Tailwind's \"layers\" to your application's `resources/css/app.css` file:"
msgstr ""

#. type: Fenced code block (css)
#: docs/8.x/mix.md:110 docs/master/mix.md:110
#, no-wrap
msgid "@tailwind base;\n"
"@tailwind components;\n"
"@tailwind utilities;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:117 docs/master/mix.md:117
msgid "Once you have configured Tailwind's layers, you are ready to update your application's `webpack.mix.js` file to compile your Tailwind powered CSS:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/mix.md:118 docs/master/mix.md:118
#, no-wrap
msgid "mix.js('resources/js/app.js', 'public/js')\n"
"    .postCss('resources/css/app.css', 'public/css', [\n"
"        require('tailwindcss'),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:126 docs/master/mix.md:126
msgid "Finally, you should reference your stylesheet in your application's primary layout template. Many applications choose to store this template at `resources/views/layouts/app.blade.php`. In addition, ensure you add the responsive viewport `meta` tag if it's not already present:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/mix.md:127 docs/master/mix.md:127
#, no-wrap
msgid "<head>\n"
"    <meta charset=\"UTF-8\" />\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n"
"    <link href=\"/css/app.css\" rel=\"stylesheet\">\n"
"</head>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:136 docs/master/mix.md:136
#, no-wrap
msgid "<a name=\"postcss\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:136 docs/master/mix.md:136
#, no-wrap
msgid "PostCSS"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:139 docs/master/mix.md:139
msgid "[PostCSS](https://postcss.org/), a powerful tool for transforming your CSS, is included with Laravel Mix out of the box. By default, Mix leverages the popular [Autoprefixer](https://github.com/postcss/autoprefixer) plugin to automatically apply all necessary CSS3 vendor prefixes. However, you're free to add any additional plugins that are appropriate for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:141 docs/master/mix.md:141
msgid "First, install the desired plugin through NPM and include it in your array of plugins when calling Mix's `postCss` method. The `postCss` method accepts the path to your CSS file as its first argument and the directory where the compiled file should be placed as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:145 docs/master/mix.md:145
#, no-wrap
msgid "    mix.postCss('resources/css/app.css', 'public/css', [\n"
"        require('postcss-custom-properties')\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:147 docs/master/mix.md:147
msgid "Or, you may execute `postCss` with no additional plugins in order to achieve simple CSS compilation and minification:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:149 docs/master/mix.md:149
#, no-wrap
msgid "    mix.postCss('resources/css/app.css', 'public/css');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:151 docs/master/mix.md:151
#, no-wrap
msgid "<a name=\"sass\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:151 docs/master/mix.md:151
#, no-wrap
msgid "Sass"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:154 docs/master/mix.md:154
msgid "The `sass` method allows you to compile [Sass](https://sass-lang.com/) into CSS that can be understood by web browsers. The `sass` method accepts the path to your Sass file as its first argument and the directory where the compiled file should be placed as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:156 docs/master/mix.md:156
#, no-wrap
msgid "    mix.sass('resources/sass/app.scss', 'public/css');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:158 docs/master/mix.md:158
msgid "You may compile multiple Sass files into their own respective CSS files and even customize the output directory of the resulting CSS by calling the `sass` method multiple times:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:161 docs/master/mix.md:161
#, no-wrap
msgid "    mix.sass('resources/sass/app.sass', 'public/css')\n"
"        .sass('resources/sass/admin.sass', 'public/css/admin');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:163 docs/master/mix.md:163
#, no-wrap
msgid "<a name=\"url-processing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:163 docs/master/mix.md:163
#, no-wrap
msgid "URL Processing"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:166 docs/master/mix.md:166
msgid "Because Laravel Mix is built on top of webpack, it's important to understand a few webpack concepts. For CSS compilation, webpack will rewrite and optimize any `url()` calls within your stylesheets. While this might initially sound strange, it's an incredibly powerful piece of functionality. Imagine that we want to compile Sass that includes a relative URL to an image:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:170 docs/master/mix.md:170
#, no-wrap
msgid "    .example {\n"
"        background: url('../images/example.png');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:172 docs/master/mix.md:172
#, no-wrap
msgid "> {note} Absolute paths for any given `url()` will be excluded from URL-rewriting. For example, `url('/images/thing.png')` or `url('http://example.com/images/thing.png')` won't be modified.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:174 docs/master/mix.md:174
msgid "By default, Laravel Mix and webpack will find `example.png`, copy it to your `public/images` folder, and then rewrite the `url()` within your generated stylesheet. As such, your compiled CSS will be:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:178 docs/master/mix.md:178
#, no-wrap
msgid "    .example {\n"
"        background: url(/images/example.png?d41d8cd98f00b204e9800998ecf8427e);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:180 docs/master/mix.md:180
msgid "As useful as this feature may be, your existing folder structure may already be configured in a way you like. If this is the case, you may disable `url()` rewriting like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:184 docs/master/mix.md:184
#, no-wrap
msgid "    mix.sass('resources/sass/app.scss', 'public/css').options({\n"
"        processCssUrls: false\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:186 docs/master/mix.md:186
msgid "With this addition to your `webpack.mix.js` file, Mix will no longer match any `url()` or copy assets to your public directory. In other words, the compiled CSS will look just like how you originally typed it:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:190 docs/master/mix.md:190
#, no-wrap
msgid "    .example {\n"
"        background: url(\"../images/thing.png\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:192 docs/master/mix.md:192
#, no-wrap
msgid "<a name=\"css-source-maps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:192 docs/master/mix.md:192
#, no-wrap
msgid "Source Maps"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:195 docs/master/mix.md:195
msgid "Though disabled by default, source maps may be activated by calling the `mix.sourceMaps()` method in your `webpack.mix.js` file. Though it comes with a compile/performance cost, this will provide extra debugging information to your browser's developer tools when using compiled assets:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:198 docs/master/mix.md:198
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"        .sourceMaps();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:200 docs/master/mix.md:200
#, no-wrap
msgid "<a name=\"style-of-source-mapping\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mix.md:200 docs/master/mix.md:200
#, no-wrap
msgid "Style Of Source Mapping"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:203 docs/master/mix.md:203
msgid "Webpack offers a variety of [source mapping styles](https://webpack.js.org/configuration/devtool/#devtool). By default, Mix's source mapping style is set to `eval-source-map`, which provides a fast rebuild time. If you want to change the mapping style, you may do so using the `sourceMaps` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:205 docs/master/mix.md:205
#, no-wrap
msgid "    let productionSourceMaps = false;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:208 docs/master/mix.md:208
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"        .sourceMaps(productionSourceMaps, 'source-map');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:210 docs/master/mix.md:210
#, no-wrap
msgid "<a name=\"working-with-scripts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mix.md:210 docs/master/mix.md:210
#, no-wrap
msgid "Working With JavaScript"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:213 docs/master/mix.md:213
msgid "Mix provides several features to help you work with your JavaScript files, such as compiling modern ECMAScript, module bundling, minification, and concatenating plain JavaScript files. Even better, this all works seamlessly, without requiring an ounce of custom configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:215 docs/8.x/mix.md:316 docs/master/mix.md:215
#: docs/master/mix.md:316
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:217 docs/master/mix.md:217
msgid "With this single line of code, you may now take advantage of:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:223 docs/master/mix.md:223
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- The latest EcmaScript syntax.\n"
"- Modules\n"
"- Minification for production environments.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:225 docs/master/mix.md:225
#, no-wrap
msgid "<a name=\"vue\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:225 docs/master/mix.md:225
#, no-wrap
msgid "Vue"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:228 docs/master/mix.md:228
msgid "Mix will automatically install the Babel plugins necessary for Vue single-file component compilation support when using the `vue` method. No further configuration is required:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:231 docs/master/mix.md:231
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"       .vue();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:233 docs/master/mix.md:233
msgid "Once your JavaScript has been compiled, you can reference it in your application:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/mix.md:234 docs/8.x/mix.md:252 docs/master/mix.md:234
#: docs/master/mix.md:252
#, no-wrap
msgid "<head>\n"
"    <!-- ... -->\n\n"
"    <script src=\"/js/app.js\"></script>\n"
"</head>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:243 docs/master/mix.md:243
#, no-wrap
msgid "<a name=\"react\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:243 docs/master/mix.md:243
#, no-wrap
msgid "React"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:246 docs/master/mix.md:246
msgid "Mix can automatically install the Babel plugins necessary for React support. To get started, add a call to the `react` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:249 docs/master/mix.md:249
#, no-wrap
msgid "    mix.js('resources/js/app.jsx', 'public/js')\n"
"       .react();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:251 docs/master/mix.md:251
msgid "Behind the scenes, Mix will download and include the appropriate `babel-preset-react` Babel plugin. Once your JavaScript has been compiled, you can reference it in your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:261 docs/master/mix.md:261
#, no-wrap
msgid "<a name=\"vendor-extraction\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:261 docs/master/mix.md:261
#, no-wrap
msgid "Vendor Extraction"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:264 docs/master/mix.md:264
msgid "One potential downside to bundling all of your application-specific JavaScript with your vendor libraries such as React and Vue is that it makes long-term caching more difficult. For example, a single update to your application code will force the browser to re-download all of your vendor libraries even if they haven't changed."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:266 docs/master/mix.md:266
msgid "If you intend to make frequent updates to your application's JavaScript, you should consider extracting all of your vendor libraries into their own file. This way, a change to your application code will not affect the caching of your large `vendor.js` file. Mix's `extract` method makes this a breeze:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:269 docs/master/mix.md:269
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"        .extract(['vue'])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:271 docs/master/mix.md:271
msgid "The `extract` method accepts an array of all libraries or modules that you wish to extract into a `vendor.js` file. Using the snippet above as an example, Mix will generate the following files:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:277 docs/master/mix.md:277
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `public/js/manifest.js`: *The Webpack manifest runtime*\n"
"- `public/js/vendor.js`: *Your vendor libraries*\n"
"- `public/js/app.js`: *Your application code*\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:279 docs/master/mix.md:279
msgid "To avoid JavaScript errors, be sure to load these files in the proper order:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:283 docs/master/mix.md:283
#, no-wrap
msgid "    <script src=\"/js/manifest.js\"></script>\n"
"    <script src=\"/js/vendor.js\"></script>\n"
"    <script src=\"/js/app.js\"></script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:285 docs/master/mix.md:285
#, no-wrap
msgid "<a name=\"custom-webpack-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mix.md:285 docs/master/mix.md:285
#, no-wrap
msgid "Custom Webpack Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:288 docs/master/mix.md:288
msgid "Occasionally, you may need to manually modify the underlying Webpack configuration. For example, you might have a special loader or plugin that needs to be referenced."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:290 docs/master/mix.md:290
msgid "Mix provides a useful `webpackConfig` method that allows you to merge any short Webpack configuration overrides. This is particularly appealing, as it doesn't require you to copy and maintain your own copy of the `webpack.config.js` file. The `webpackConfig` method accepts an object, which should contain any [Webpack-specific configuration](https://webpack.js.org/configuration/) that you wish to apply."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:298 docs/master/mix.md:298
#, no-wrap
msgid "    mix.webpackConfig({\n"
"        resolve: {\n"
"            modules: [\n"
"                path.resolve(__dirname, 'vendor/laravel/spark/resources/assets/js')\n"
"            ]\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:300 docs/master/mix.md:300
#, no-wrap
msgid "<a name=\"versioning-and-cache-busting\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mix.md:300 docs/master/mix.md:300
#, no-wrap
msgid "Versioning / Cache Busting"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:303 docs/master/mix.md:303
msgid "Many developers suffix their compiled assets with a timestamp or unique token to force browsers to load the fresh assets instead of serving stale copies of the code. Mix can automatically handle this for you using the `version` method."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:305 docs/master/mix.md:305
msgid "The `version` method will append a unique hash to the filenames of all compiled files, allowing for more convenient cache busting:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:308 docs/master/mix.md:308
#, no-wrap
msgid "    mix.js('resources/js/app.js', 'public/js')\n"
"        .version();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:310 docs/master/mix.md:310
msgid "After generating the versioned file, you won't know the exact filename. So, you should use Laravel's global `mix` function within your [views](/docs/{{version}}/views) to load the appropriately hashed asset. The `mix` function will automatically determine the current name of the hashed file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:312 docs/master/mix.md:312
#, no-wrap
msgid "    <script src=\"{{ mix('/js/app.js') }}\"></script>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:314 docs/master/mix.md:314
msgid "Because versioned files are usually unnecessary in development, you may instruct the versioning process to only run during `npm run prod`:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:320 docs/master/mix.md:320
#, no-wrap
msgid "    if (mix.inProduction()) {\n"
"        mix.version();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:322 docs/master/mix.md:322
#, no-wrap
msgid "<a name=\"custom-mix-base-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mix.md:322 docs/master/mix.md:322
#, no-wrap
msgid "Custom Mix Base URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:325 docs/master/mix.md:325
msgid "If your Mix compiled assets are deployed to a CDN separate from your application, you will need to change the base URL generated by the `mix` function. You may do so by adding a `mix_url` configuration option to your application's `config/app.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:327 docs/master/mix.md:327
#, no-wrap
msgid "    'mix_url' => env('MIX_ASSET_URL', null)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:329 docs/master/mix.md:329
msgid "After configuring the Mix URL, The `mix` function will prefix the configured URL when generating URLs to assets:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/mix.md:330 docs/master/mix.md:330
#, no-wrap
msgid "https://cdn.example.com/js/app.js?id=1964becbdd96414518cd\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:335 docs/master/mix.md:335
#, no-wrap
msgid "<a name=\"browsersync-reloading\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mix.md:335 docs/master/mix.md:335
#, no-wrap
msgid "Browsersync Reloading"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:338 docs/master/mix.md:338
msgid "[BrowserSync](https://browsersync.io/) can automatically monitor your files for changes, and inject your changes into the browser without requiring a manual refresh. You may enable support for this by calling the `mix.browserSync()` method:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/mix.md:339 docs/master/mix.md:339
#, no-wrap
msgid "mix.browserSync('laravel.test');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:344 docs/master/mix.md:344
msgid "[BrowserSync options](https://browsersync.io/docs/options) may be specified by passing a JavaScript object to the `browserSync` method:"
msgstr ""

#. type: Fenced code block (js)
#: docs/8.x/mix.md:345 docs/master/mix.md:345
#, no-wrap
msgid "mix.browserSync({\n"
"    proxy: 'laravel.test'\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:352 docs/master/mix.md:352
msgid "Next, start webpack's development server using the `npm run watch` command. Now, when you modify a script or PHP file you can watch as the browser instantly refreshes the page to reflect your changes."
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:357 docs/master/mix.md:357
msgid "You may inject environment variables into your `webpack.mix.js` script by prefixing one of the environment variables in your `.env` file with `MIX_`:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:359 docs/master/mix.md:359
#, no-wrap
msgid "    MIX_SENTRY_DSN_PUBLIC=http://example.com\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:361 docs/master/mix.md:361
msgid "After the variable has been defined in your `.env` file, you may access it via the `process.env` object. However, you will need to restart the task if the environment variable's value changes while the task is running:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:363 docs/master/mix.md:363
#, no-wrap
msgid "    process.env.MIX_SENTRY_DSN_PUBLIC\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:368 docs/master/mix.md:368
msgid "When available, Mix will automatically display OS notifications when compiling, giving you instant feedback as to whether the compilation was successful or not. However, there may be instances when you would prefer to disable these notifications. One such example might be triggering Mix on your production server. Notifications may be deactivated using the `disableNotifications` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mix.md:369 docs/master/mix.md:369
#, no-wrap
msgid "    mix.disableNotifications();\n"
msgstr ""

#. type: Title #
#: docs/8.x/mocking.md:1 docs/master/mocking.md:1
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Mocking Objects](#mocking-objects)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Mocking Facades](#mocking-facades)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Facade Spies](#facade-spies)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Bus Fake](#bus-fake)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Job Chains](#bus-job-chains)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Job Batches](#job-batches)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Event Fake](#event-fake)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Scoped Event Fakes](#scoped-event-fakes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[HTTP Fake](#http-fake)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Mail Fake](#mail-fake)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Notification Fake](#notification-fake)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Queue Fake](#queue-fake)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Job Chains](#job-chains)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Storage Fake](#storage-fake)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19 docs/master/mocking.md:19
msgid "[Interacting With Time](#interacting-with-time)"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:24 docs/master/mocking.md:24
msgid "When testing Laravel applications, you may wish to \"mock\" certain aspects of your application so they are not actually executed during a given test. For example, when testing a controller that dispatches an event, you may wish to mock the event listeners so they are not actually executed during the test. This allows you to only test the controller's HTTP response without worrying about the execution of the event listeners since the event listeners can be tested in their own test case."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:26 docs/master/mocking.md:26
msgid "Laravel provides helpful methods for mocking events, jobs, and other facades out of the box. These helpers primarily provide a convenience layer over Mockery so you do not have to manually make complicated Mockery method calls."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:28 docs/master/mocking.md:28
#, no-wrap
msgid "<a name=\"mocking-objects\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:28 docs/master/mocking.md:28
#, no-wrap
msgid "Mocking Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:31 docs/master/mocking.md:31
msgid "When mocking an object that is going to be injected into your application via Laravel's [service container](/docs/{{version}}/container), you will need to bind your mocked instance into the container as an `instance` binding. This will instruct the container to use your mocked instance of the object instead of constructing the object itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:35 docs/master/mocking.md:35
#, no-wrap
msgid "    use App\\Service;\n"
"    use Mockery;\n"
"    use Mockery\\MockInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:45 docs/master/mocking.md:45
#, no-wrap
msgid "    public function test_something_can_be_mocked()\n"
"    {\n"
"        $this->instance(\n"
"            Service::class,\n"
"            Mockery::mock(Service::class, function (MockInterface $mock) {\n"
"                $mock->shouldReceive('process')->once();\n"
"            })\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:47 docs/master/mocking.md:47
msgid "In order to make this more convenient, you may use the `mock` method that is provided by Laravel's base test case class. For example, the following example is equivalent to the example above:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:50 docs/8.x/mocking.md:59 docs/master/mocking.md:50
#: docs/master/mocking.md:59
#, no-wrap
msgid "    use App\\Service;\n"
"    use Mockery\\MockInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:54 docs/master/mocking.md:54
#, no-wrap
msgid "    $mock = $this->mock(Service::class, function (MockInterface $mock) {\n"
"        $mock->shouldReceive('process')->once();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:56 docs/master/mocking.md:56
msgid "You may use the `partialMock` method when you only need to mock a few methods of an object. The methods that are not mocked will be executed normally when called:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:63 docs/master/mocking.md:63
#, no-wrap
msgid "    $mock = $this->partialMock(Service::class, function (MockInterface $mock) {\n"
"        $mock->shouldReceive('process')->once();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:65 docs/master/mocking.md:65
msgid "Similarly, if you want to [spy](http://docs.mockery.io/en/latest/reference/spies.html) on an object, Laravel's base test case class offers a `spy` method as a convenient wrapper around the `Mockery::spy` method. Spies are similar to mocks; however, spies record any interaction between the spy and the code being tested, allowing you to make assertions after the code is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:67 docs/master/mocking.md:67
#, no-wrap
msgid "    use App\\Service;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:69 docs/master/mocking.md:69
#, no-wrap
msgid "    $spy = $this->spy(Service::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:73 docs/master/mocking.md:73
#, no-wrap
msgid "    $spy->shouldHaveReceived('process');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:75 docs/master/mocking.md:75
#, no-wrap
msgid "<a name=\"mocking-facades\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:75 docs/master/mocking.md:75
#, no-wrap
msgid "Mocking Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:78 docs/master/mocking.md:78
msgid "Unlike traditional static method calls, [facades](/docs/{{version}}/facades) (including [real-time facades](/docs/{{version}}/facades#real-time-facades)) may be mocked. This provides a great advantage over traditional static methods and grants you the same testability that you would have if you were using traditional dependency injection. When testing, you may often want to mock a call to a Laravel facade that occurs in one of your controllers. For example, consider the following controller action:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:95 docs/master/mocking.md:95
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Retrieve a list of all users of the application.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:101 docs/master/mocking.md:101
msgid "We can mock the call to the `Cache` facade by using the `shouldReceive` method, which will return an instance of a [Mockery](https://github.com/padraic/mockery) mock. Since facades are actually resolved and managed by the Laravel [service container](/docs/{{version}}/container), they have much more testability than a typical static class. For example, let's mock our call to the `Cache` facade's `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:110 docs/master/mocking.md:110
#, no-wrap
msgid "    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Cache;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:119 docs/master/mocking.md:119
#, no-wrap
msgid "    class UserControllerTest extends TestCase\n"
"    {\n"
"        public function testGetIndex()\n"
"        {\n"
"            Cache::shouldReceive('get')\n"
"                        ->once()\n"
"                        ->with('key')\n"
"                        ->andReturn('value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:121 docs/master/mocking.md:121
#, no-wrap
msgid "            $response = $this->get('/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:127 docs/master/mocking.md:127
#, no-wrap
msgid "> {note} You should not mock the `Request` facade. Instead, pass the input you desire into the [HTTP testing methods](/docs/{{version}}/http-tests) such as `get` and `post` when running your test. Likewise, instead of mocking the `Config` facade, call the `Config::set` method in your tests.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:129 docs/master/mocking.md:129
#, no-wrap
msgid "<a name=\"facade-spies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:129 docs/master/mocking.md:129
#, no-wrap
msgid "Facade Spies"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:132 docs/master/mocking.md:132
msgid "If you would like to [spy](http://docs.mockery.io/en/latest/reference/spies.html) on a facade, you may call the `spy` method on the corresponding facade. Spies are similar to mocks; however, spies record any interaction between the spy and the code being tested, allowing you to make assertions after the code is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:138 docs/master/mocking.md:138
#, no-wrap
msgid "    public function test_values_are_be_stored_in_cache()\n"
"    {\n"
"        Cache::spy();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:140 docs/master/mocking.md:140
#, no-wrap
msgid "        $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:142 docs/master/mocking.md:142
#, no-wrap
msgid "        $response->assertStatus(200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:145 docs/master/mocking.md:145
#, no-wrap
msgid "        Cache::shouldHaveReceived('put')->once()->with('name', 'Taylor', 10);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:147 docs/master/mocking.md:147
#, no-wrap
msgid "<a name=\"bus-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:147 docs/master/mocking.md:147
#, no-wrap
msgid "Bus Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:150 docs/master/mocking.md:150
msgid "When testing code that dispatches jobs, you typically want to assert that a given job was dispatched but not actually queue or execute the job. This is because the job's execution can normally be tested in a separate test class."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:152 docs/master/mocking.md:152
msgid "You may use the `Bus` facade's `fake` method to prevent jobs from being dispatched to the queue. Then, after executing the code under test, you may inspect which jobs the application attempted to dispatch using the `assertDispatched` and `assertNotDispatched` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:162 docs/master/mocking.md:162
#, no-wrap
msgid "    use App\\Jobs\\ShipOrder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:168 docs/master/mocking.md:168
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Bus::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:170 docs/8.x/mocking.md:248 docs/8.x/mocking.md:358
#: docs/8.x/mocking.md:419 docs/8.x/mocking.md:491 docs/master/mocking.md:170
#: docs/master/mocking.md:248 docs/master/mocking.md:358
#: docs/master/mocking.md:419 docs/master/mocking.md:491
#, no-wrap
msgid "            // Perform order shipping...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:173 docs/master/mocking.md:173
#, no-wrap
msgid "            // Assert that a job was dispatched...\n"
"            Bus::assertDispatched(ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:178 docs/master/mocking.md:178
#, no-wrap
msgid "            // Assert a job was not dispatched...\n"
"            Bus::assertNotDispatched(AnotherJob::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:180 docs/master/mocking.md:180
msgid "You may pass a closure to the `assertDispatched` or `assertNotDispatched` methods in order to assert that a job was dispatched that passes a given \"truth test\". If at least one job was dispatched that passes the given truth test then the assertion will be successful. For example, you may wish to assert that a job was dispatched for a specific order:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:184 docs/master/mocking.md:184
#, no-wrap
msgid "    Bus::assertDispatched(function (ShipOrder $job) use ($order) {\n"
"        return $job->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:186 docs/master/mocking.md:186
#, no-wrap
msgid "<a name=\"bus-job-chains\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:186 docs/8.x/mocking.md:513 docs/master/mocking.md:186
#: docs/master/mocking.md:513
#, no-wrap
msgid "Job Chains"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:189 docs/master/mocking.md:189
msgid "The `Bus` facade's `assertChained` method may be used to assert that a [chain of jobs](/docs/{{version}}/queues#job-chaining) was dispatched. The `assertChained` method accepts an array of chained jobs as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:194 docs/master/mocking.md:194
#, no-wrap
msgid "    use App\\Jobs\\RecordShipment;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use App\\Jobs\\UpdateInventory;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:200 docs/master/mocking.md:200
#, no-wrap
msgid "    Bus::assertChained([\n"
"        ShipOrder::class,\n"
"        RecordShipment::class,\n"
"        UpdateInventory::class\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:202 docs/8.x/mocking.md:528 docs/master/mocking.md:202
#: docs/master/mocking.md:528
msgid "As you can see in the example above, the array of chained jobs may be an array of the job's class names. However, you may also provide an array of actual job instances. When doing so, Laravel will ensure that the job instances are of the same class and have the same property values of the chained jobs dispatched by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:208 docs/master/mocking.md:208
#, no-wrap
msgid "    Bus::assertChained([\n"
"        new ShipOrder,\n"
"        new RecordShipment,\n"
"        new UpdateInventory,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:210 docs/master/mocking.md:210
#, no-wrap
msgid "<a name=\"job-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:210 docs/master/mocking.md:210
#, no-wrap
msgid "Job Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:213 docs/master/mocking.md:213
msgid "The `Bus` facade's `assertBatched` method may be used to assert that a [batch of jobs](/docs/{{version}}/queues#job-batches) was dispatched. The closure given to the `assertBatched` method receives an instance of `Illuminate\\Bus\\PendingBatch`, which may be used to inspect the jobs within the batch:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:216 docs/master/mocking.md:216
#, no-wrap
msgid "    use Illuminate\\Bus\\PendingBatch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:221 docs/master/mocking.md:221
#, no-wrap
msgid "    Bus::assertBatched(function (PendingBatch $batch) {\n"
"        return $batch->name == 'import-csv' &&\n"
"               $batch->jobs->count() === 10;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:223 docs/master/mocking.md:223
#, no-wrap
msgid "<a name=\"event-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:223 docs/master/mocking.md:223
#, no-wrap
msgid "Event Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:226 docs/master/mocking.md:226
msgid "When testing code that dispatches events, you may wish to instruct Laravel to not actually execute the event's listeners. Using the `Event` facade's `fake` method, you may prevent listeners from executing, execute the code under test, and then assert which events were dispatched by your application using the `assertDispatched`, `assertNotDispatched`, and `assertNothingDispatched` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:237 docs/master/mocking.md:237
#, no-wrap
msgid "    use App\\Events\\OrderFailedToShip;\n"
"    use App\\Events\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:246 docs/master/mocking.md:246
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * Test order shipping.\n"
"         */\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Event::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:251 docs/master/mocking.md:251
#, no-wrap
msgid "            // Assert that an event was dispatched...\n"
"            Event::assertDispatched(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:254 docs/master/mocking.md:254
#, no-wrap
msgid "            // Assert an event was dispatched twice...\n"
"            Event::assertDispatched(OrderShipped::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:257 docs/master/mocking.md:257
#, no-wrap
msgid "            // Assert an event was not dispatched...\n"
"            Event::assertNotDispatched(OrderFailedToShip::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:262 docs/master/mocking.md:262
#, no-wrap
msgid "            // Assert that no events were dispatched...\n"
"            Event::assertNothingDispatched();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:264 docs/master/mocking.md:264
msgid "You may pass a closure to the `assertDispatched` or `assertNotDispatched` methods in order to assert that an event was dispatched that passes a given \"truth test\". If at least one event was dispatched that passes the given truth test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:268 docs/master/mocking.md:268
#, no-wrap
msgid "    Event::assertDispatched(function (OrderShipped $event) use ($order) {\n"
"        return $event->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:270 docs/master/mocking.md:270
#, no-wrap
msgid "> {note} After calling `Event::fake()`, no event listeners will be executed. So, if your tests use model factories that rely on events, such as creating a UUID during a model's `creating` event, you should call `Event::fake()` **after** using your factories.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:272 docs/master/mocking.md:272
#, no-wrap
msgid "<a name=\"faking-a-subset-of-events\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mocking.md:272 docs/master/mocking.md:272
#, no-wrap
msgid "Faking A Subset Of Events"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:275 docs/master/mocking.md:275
msgid "If you only want to fake event listeners for a specific set of events, you may pass them to the `fake` or `fakeFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:284 docs/master/mocking.md:284
#, no-wrap
msgid "    /**\n"
"     * Test order process.\n"
"     */\n"
"    public function test_orders_can_be_processed()\n"
"    {\n"
"        Event::fake([\n"
"            OrderCreated::class,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:286 docs/master/mocking.md:286
#, no-wrap
msgid "        $order = Order::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:288 docs/master/mocking.md:288
#, no-wrap
msgid "        Event::assertDispatched(OrderCreated::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:292 docs/master/mocking.md:292
#, no-wrap
msgid "        // Other events are dispatched as normal...\n"
"        $order->update([...]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:294 docs/master/mocking.md:294
#, no-wrap
msgid "<a name=\"scoped-event-fakes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:294 docs/master/mocking.md:294
#, no-wrap
msgid "Scoped Event Fakes"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:297 docs/master/mocking.md:297
msgid "If you only want to fake event listeners for a portion of your test, you may use the `fakeFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:308 docs/master/mocking.md:308
#, no-wrap
msgid "    use App\\Events\\OrderCreated;\n"
"    use App\\Models\\Order;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:318 docs/master/mocking.md:318
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * Test order process.\n"
"         */\n"
"        public function test_orders_can_be_processed()\n"
"        {\n"
"            $order = Event::fakeFor(function () {\n"
"                $order = Order::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:320 docs/master/mocking.md:320
#, no-wrap
msgid "                Event::assertDispatched(OrderCreated::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:323 docs/master/mocking.md:323
#, no-wrap
msgid "                return $order;\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:328 docs/master/mocking.md:328
#, no-wrap
msgid "            // Events are dispatched as normal and observers will run ...\n"
"            $order->update([...]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:330 docs/master/mocking.md:330
#, no-wrap
msgid "<a name=\"http-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:330 docs/master/mocking.md:330
#, no-wrap
msgid "HTTP Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:333 docs/master/mocking.md:333
msgid "The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made. For more information on faking outgoing HTTP requests, please consult the [HTTP Client testing documentation](/docs/{{version}}/http-client#testing)."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:335 docs/master/mocking.md:335
#, no-wrap
msgid "<a name=\"mail-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:335 docs/master/mocking.md:335
#, no-wrap
msgid "Mail Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:338 docs/master/mocking.md:338
msgid "You may use the `Mail` facade's `fake` method to prevent mail from being sent. Typically, sending mail is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given mailable."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:340 docs/master/mocking.md:340
msgid "After calling the `Mail` facade's `fake` method, you may then assert that [mailables](/docs/{{version}}/mail) were instructed to be sent to users and even inspect the data the mailables received:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:350 docs/master/mocking.md:350
#, no-wrap
msgid "    use App\\Mail\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Mail;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:356 docs/master/mocking.md:356
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Mail::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:361 docs/master/mocking.md:361
#, no-wrap
msgid "            // Assert that no mailables were sent...\n"
"            Mail::assertNothingSent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:364 docs/master/mocking.md:364
#, no-wrap
msgid "            // Assert that a mailable was sent...\n"
"            Mail::assertSent(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:367 docs/master/mocking.md:367
#, no-wrap
msgid "            // Assert a mailable was sent twice...\n"
"            Mail::assertSent(OrderShipped::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:372 docs/master/mocking.md:372
#, no-wrap
msgid "            // Assert a mailable was not sent...\n"
"            Mail::assertNotSent(AnotherMailable::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:374 docs/master/mocking.md:374
msgid "If you are queueing mailables for delivery in the background, you should use the `assertQueued` method instead of `assertSent`:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:376 docs/master/mocking.md:376
#, no-wrap
msgid "    Mail::assertQueued(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:378 docs/master/mocking.md:378
#, no-wrap
msgid "    Mail::assertNotQueued(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:380 docs/master/mocking.md:380
#, no-wrap
msgid "    Mail::assertNothingQueued();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:382 docs/master/mocking.md:382
msgid "You may pass a closure to the `assertSent` or `assertNotSent` methods in order to assert that a mailable was sent that passes a given \"truth test\". If at least one mailable was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:386 docs/master/mocking.md:386
#, no-wrap
msgid "    Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"        return $mail->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:388 docs/master/mocking.md:388
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the recipients of the mailable:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:394 docs/master/mocking.md:394
#, no-wrap
msgid "    Mail::assertSent(OrderShipped::class, function ($mail) use ($user) {\n"
"        return $mail->hasTo($user->email) &&\n"
"               $mail->hasCc('...') &&\n"
"               $mail->hasBcc('...');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:396 docs/master/mocking.md:396
#, no-wrap
msgid "<a name=\"notification-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:396 docs/master/mocking.md:396
#, no-wrap
msgid "Notification Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:399 docs/master/mocking.md:399
msgid "You may use the `Notification` facade's `fake` method to prevent notifications from being sent. Typically, sending notifications is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given notification."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:401 docs/master/mocking.md:401
msgid "After calling the `Notification` facade's `fake` method, you may then assert that [notifications](/docs/{{version}}/notifications) were instructed to be sent to users and even inspect the data the notifications received:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:411 docs/master/mocking.md:411
#, no-wrap
msgid "    use App\\Notifications\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Notification;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:417 docs/master/mocking.md:417
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Notification::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:422 docs/master/mocking.md:422
#, no-wrap
msgid "            // Assert that no notifications were sent...\n"
"            Notification::assertNothingSent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:427 docs/master/mocking.md:427
#, no-wrap
msgid "            // Assert a notification was sent to the given users...\n"
"            Notification::assertSentTo(\n"
"                [$user], OrderShipped::class\n"
"            );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:434 docs/master/mocking.md:434
#, no-wrap
msgid "            // Assert a notification was not sent...\n"
"            Notification::assertNotSentTo(\n"
"                [$user], AnotherNotification::class\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:436 docs/master/mocking.md:436
msgid "You may pass a closure to the `assertSentTo` or `assertNotSentTo` methods in order to assert that a notification was sent that passes a given \"truth test\". If at least one notification was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:443 docs/master/mocking.md:443
#, no-wrap
msgid "    Notification::assertSentTo(\n"
"        $user,\n"
"        function (OrderShipped $notification, $channels) use ($order) {\n"
"            return $notification->order->id === $order->id;\n"
"        }\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:445 docs/8.x/notifications.md:218
#: docs/master/mocking.md:445 docs/master/notifications.md:217
#, no-wrap
msgid "<a name=\"on-demand-notifications\"></a>\n"
msgstr ""

#. #-#-#-#-#  mocking.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  mocking.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  notifications.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/mocking.md:445 docs/8.x/notifications.md:218
#: docs/master/mocking.md:445 docs/master/notifications.md:217
#, no-wrap
msgid "On-Demand Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:448 docs/master/mocking.md:448
msgid "If the code you are testing sends [on-demand notifications](/docs/{{version}}/notifications#on-demand-notifications), you will need to assert that the notification was sent to an `Illuminate\\Notifications\\AnonymousNotifiable` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:450 docs/master/mocking.md:450
#, no-wrap
msgid "    use Illuminate\\Notifications\\AnonymousNotifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:454 docs/master/mocking.md:454
#, no-wrap
msgid "    Notification::assertSentTo(\n"
"        new AnonymousNotifiable, OrderShipped::class\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:456 docs/master/mocking.md:456
msgid "By passing a closure as the third argument to the notification assertion methods, you may determine if an on-demand notification was sent to the correct \"route\" address:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:464 docs/master/mocking.md:464
#, no-wrap
msgid "    Notification::assertSentTo(\n"
"        new AnonymousNotifiable,\n"
"        OrderShipped::class,\n"
"        function ($notification, $channels, $notifiable) use ($user) {\n"
"            return $notifiable->routes['mail'] === $user->email;\n"
"        }\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:466 docs/master/mocking.md:466
#, no-wrap
msgid "<a name=\"queue-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:466 docs/master/mocking.md:466
#, no-wrap
msgid "Queue Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:469 docs/master/mocking.md:469
msgid "You may use the `Queue` facade's `fake` method to prevent queued jobs from being pushed to the queue. Most likely, it is sufficient to simply assert that Laravel was instructed to push a given job to the queue since the queued jobs themselves may be tested in another test class."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:471 docs/master/mocking.md:471
msgid "After calling the `Queue` facade's `fake` method, you may then assert that the application attempted to push jobs to the queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:483 docs/master/mocking.md:483
#, no-wrap
msgid "    use App\\Jobs\\AnotherJob;\n"
"    use App\\Jobs\\FinalJob;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Queue;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:489 docs/master/mocking.md:489
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Queue::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:494 docs/master/mocking.md:494
#, no-wrap
msgid "            // Assert that no jobs were pushed...\n"
"            Queue::assertNothingPushed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:497 docs/master/mocking.md:497
#, no-wrap
msgid "            // Assert a job was pushed to a given queue...\n"
"            Queue::assertPushedOn('queue-name', ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:500 docs/master/mocking.md:500
#, no-wrap
msgid "            // Assert a job was pushed twice...\n"
"            Queue::assertPushed(ShipOrder::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:505 docs/master/mocking.md:505
#, no-wrap
msgid "            // Assert a job was not pushed...\n"
"            Queue::assertNotPushed(AnotherJob::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:507 docs/master/mocking.md:507
msgid "You may pass a closure to the `assertPushed` or `assertNotPushed` methods in order to assert that a job was pushed that passes a given \"truth test\". If at least one job was pushed that passes the given truth test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:511 docs/master/mocking.md:511
#, no-wrap
msgid "    Queue::assertPushed(function (ShipOrder $job) use ($order) {\n"
"        return $job->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:513 docs/master/mocking.md:513
#, no-wrap
msgid "<a name=\"job-chains\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:516 docs/master/mocking.md:516
msgid "The `Queue` facade's `assertPushedWithChain` and `assertPushedWithoutChain` methods may be used to inspect the job chain of a pushed job. The `assertPushedWithChain` method accepts the primary job as its first argument and an array of chained jobs as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:521 docs/master/mocking.md:521
#, no-wrap
msgid "    use App\\Jobs\\RecordShipment;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use App\\Jobs\\UpdateInventory;\n"
"    use Illuminate\\Support\\Facades\\Queue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:526 docs/master/mocking.md:526
#, no-wrap
msgid "    Queue::assertPushedWithChain(ShipOrder::class, [\n"
"        RecordShipment::class,\n"
"        UpdateInventory::class\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:533 docs/master/mocking.md:533
#, no-wrap
msgid "    Queue::assertPushedWithChain(ShipOrder::class, [\n"
"        new RecordShipment,\n"
"        new UpdateInventory,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:535 docs/master/mocking.md:535
msgid "You may use the `assertPushedWithoutChain` method to assert that a job was pushed without a chain of jobs:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:537 docs/master/mocking.md:537
#, no-wrap
msgid "    Queue::assertPushedWithoutChain(ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:539 docs/master/mocking.md:539
#, no-wrap
msgid "<a name=\"storage-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:539 docs/master/mocking.md:539
#, no-wrap
msgid "Storage Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:542 docs/master/mocking.md:542
msgid "The `Storage` facade's `fake` method allows you to easily generate a fake disk that, combined with the file generation utilities of the `Illuminate\\Http\\UploadedFile` class, greatly simplifies the testing of file uploads. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:558 docs/master/mocking.md:558
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_albums_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('photos');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:563 docs/master/mocking.md:563
#, no-wrap
msgid "            $response = $this->json('POST', '/photos', [\n"
"                UploadedFile::fake()->image('photo1.jpg'),\n"
"                UploadedFile::fake()->image('photo2.jpg')\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:567 docs/master/mocking.md:567
#, no-wrap
msgid "            // Assert one or more files were stored...\n"
"            Storage::disk('photos')->assertExists('photo1.jpg');\n"
"            Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:573 docs/master/mocking.md:573
#, no-wrap
msgid "            // Assert one or more files were not stored...\n"
"            Storage::disk('photos')->assertMissing('missing.jpg');\n"
"            Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:575 docs/master/mocking.md:575
msgid "For more information on testing file uploads, you may consult the [HTTP testing documentation's information on file uploads](/docs/{{version}}/http-tests#testing-file-uploads)."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:577 docs/master/mocking.md:577
#, no-wrap
msgid "> {tip} By default, the `fake` method will delete all files in its temporary directory. If you would like to keep these files, you may use the \"persistentFake\" method instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:579 docs/master/mocking.md:579
#, no-wrap
msgid "<a name=\"interacting-with-time\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:579 docs/master/mocking.md:579
#, no-wrap
msgid "Interacting With Time"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:582 docs/master/mocking.md:582
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Thankfully, Laravel's base feature test class includes helpers that allow you to manipulate the current time:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:593 docs/8.x/releases.md:341 docs/master/mocking.md:593
#: docs/master/releases.md:341
#, no-wrap
msgid "    public function testTimeCanBeManipulated()\n"
"    {\n"
"        // Travel into the future...\n"
"        $this->travel(5)->milliseconds();\n"
"        $this->travel(5)->seconds();\n"
"        $this->travel(5)->minutes();\n"
"        $this->travel(5)->hours();\n"
"        $this->travel(5)->days();\n"
"        $this->travel(5)->weeks();\n"
"        $this->travel(5)->years();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:596 docs/8.x/releases.md:344 docs/master/mocking.md:596
#: docs/master/releases.md:344
#, no-wrap
msgid "        // Travel into the past...\n"
"        $this->travel(-5)->hours();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:599 docs/8.x/releases.md:347 docs/master/mocking.md:599
#: docs/master/releases.md:347
#, no-wrap
msgid "        // Travel to an explicit time...\n"
"        $this->travelTo(now()->subHours(6));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:602 docs/8.x/releases.md:351 docs/master/mocking.md:602
#: docs/master/releases.md:351
#, no-wrap
msgid "        // Return back to the present time...\n"
"        $this->travelBack();\n"
"    }\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Generating Notifications](#generating-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Sending Notifications](#sending-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Using The Notifiable Trait](#using-the-notifiable-trait)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Using The Notification Facade](#using-the-notification-facade)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Specifying Delivery Channels](#specifying-delivery-channels)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Queueing Notifications](#queueing-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[On-Demand Notifications](#on-demand-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Mail Notifications](#mail-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting Mail Messages](#formatting-mail-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The Sender](#customizing-the-sender)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The Recipient](#customizing-the-recipient)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The Subject](#customizing-the-subject)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The Mailer](#customizing-the-mailer)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The Templates](#customizing-the-templates)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Attachments](#mail-attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48
msgid "[Using Mailables](#using-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Previewing Mail Notifications](#previewing-mail-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Markdown Mail Notifications](#markdown-mail-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Generating The Message](#generating-the-message)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Writing The Message](#writing-the-message)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Database Notifications](#database-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Prerequisites](#database-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting Database Notifications](#formatting-database-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Accessing The Notifications](#accessing-the-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Marking Notifications As Read](#marking-notifications-as-read)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Broadcast Notifications](#broadcast-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Prerequisites](#broadcast-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting Broadcast Notifications](#formatting-broadcast-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Listening For Notifications](#listening-for-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[SMS Notifications](#sms-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Prerequisites](#sms-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting SMS Notifications](#formatting-sms-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting Shortcode Notifications](#formatting-shortcode-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Customizing The \"From\" Number](#customizing-the-from-number)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Routing SMS Notifications](#routing-sms-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Slack Notifications](#slack-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Prerequisites](#slack-prerequisites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Formatting Slack Notifications](#formatting-slack-notifications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Slack Attachments](#slack-attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Routing Slack Notifications](#routing-slack-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Localizing Notifications](#localizing-notifications)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Notification Events](#notification-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/notifications.md:48 docs/master/notifications.md:47
msgid "[Custom Channels](#custom-channels)"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:53 docs/master/notifications.md:52
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notification over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:55 docs/master/notifications.md:54
msgid "Typically, notifications should be short, informational messages that notify users of something that occurred in your application. For example, if you are writing a billing application, you might send an \"Invoice Paid\" notification to your users via the email and SMS channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:57 docs/master/notifications.md:56
#, no-wrap
msgid "<a name=\"generating-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:57 docs/master/notifications.md:56
#, no-wrap
msgid "Generating Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:60 docs/master/notifications.md:59
msgid "In Laravel, each notification is represented by a single class that is typically stored in the `app/Notifications` directory. Don't worry if you don't see this directory in your application - it will be created for you when you run the `make:notification` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:62 docs/master/notifications.md:61
#, no-wrap
msgid "    php artisan make:notification InvoicePaid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:64 docs/master/notifications.md:63
msgid "This command will place a fresh notification class in your `app/Notifications` directory. Each notification class contains a `via` method and a variable number of message building methods, such as `toMail` or `toDatabase`, that convert the notification to a message tailored for that particular channel."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:66 docs/master/notifications.md:65
#, no-wrap
msgid "<a name=\"sending-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:66 docs/master/notifications.md:65
#, no-wrap
msgid "Sending Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:69 docs/master/notifications.md:68
#, no-wrap
msgid "<a name=\"using-the-notifiable-trait\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:69 docs/master/notifications.md:68
#, no-wrap
msgid "Using The Notifiable Trait"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:72 docs/master/notifications.md:71
msgid "Notifications may be sent in two ways: using the `notify` method of the `Notifiable` trait or using the `Notification` [facade](/docs/{{version}}/facades). The `Notifiable` trait is included on your application's `App\\Models\\User` model by default:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:79 docs/8.x/notifications.md:344
#: docs/8.x/notifications.md:932 docs/8.x/notifications.md:1099
#: docs/master/notifications.md:78 docs/master/notifications.md:359
#: docs/master/notifications.md:904 docs/master/notifications.md:1071
#, no-wrap
msgid "    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:84 docs/master/notifications.md:83
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:86 docs/master/notifications.md:85
msgid "The `notify` method that is provided by this trait expects to receive a notification instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:88 docs/master/notifications.md:87
#, no-wrap
msgid "    use App\\Notifications\\InvoicePaid;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:90 docs/8.x/notifications.md:147
#: docs/8.x/notifications.md:1154 docs/master/notifications.md:89
#: docs/master/notifications.md:146 docs/master/notifications.md:1126
#, no-wrap
msgid "    $user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:92 docs/master/notifications.md:91
#, no-wrap
msgid "> {tip} Remember, you may use the `Notifiable` trait on any of your models. You are not limited to only including it on your `User` model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:94 docs/master/notifications.md:93
#, no-wrap
msgid "<a name=\"using-the-notification-facade\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:94 docs/master/notifications.md:93
#, no-wrap
msgid "Using The Notification Facade"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:97 docs/master/notifications.md:96
msgid "Alternatively, you may send notifications via the `Notification` [facade](/docs/{{version}}/facades). This approach is useful when you need to send a notification to multiple notifiable entities such as a collection of users. To send notifications using the facade, pass all of the notifiable entities and the notification instance to the `send` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:99 docs/master/notifications.md:98
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:101 docs/master/notifications.md:100
#, no-wrap
msgid "    Notification::send($users, new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:103 docs/master/notifications.md:102
#, no-wrap
msgid "<a name=\"specifying-delivery-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:103 docs/master/notifications.md:102
#, no-wrap
msgid "Specifying Delivery Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:106 docs/master/notifications.md:105
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `nexmo`, and `slack` channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:108 docs/master/notifications.md:107
#, no-wrap
msgid "> {tip} If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven [Laravel Notification Channels website](http://laravel-notification-channels.com).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:110 docs/master/notifications.md:109
msgid "The `via` method receives a `$notifiable` instance, which will be an instance of the class to which the notification is being sent. You may use `$notifiable` to determine which channels the notification should be delivered on:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:121 docs/master/notifications.md:120
#, no-wrap
msgid "    /**\n"
"     * Get the notification's delivery channels.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function via($notifiable)\n"
"    {\n"
"        return $notifiable->prefers_sms ? ['nexmo'] : ['mail', 'database'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:123 docs/master/notifications.md:122
#, no-wrap
msgid "<a name=\"queueing-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:123 docs/master/notifications.md:122
#, no-wrap
msgid "Queueing Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:126 docs/master/notifications.md:125
#, no-wrap
msgid "> {note} Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:128 docs/master/notifications.md:127
msgid "Sending notifications can take time, especially if the channel needs to make an external API call to deliver the notification. To speed up your application's response time, let your notification be queued by adding the `ShouldQueue` interface and `Queueable` trait to your class. The interface and trait are already imported for all notifications generated using the `make:notification` command, so you may immediately add them to your notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:132 docs/8.x/notifications.md:203
#: docs/8.x/notifications.md:1224 docs/master/notifications.md:131
#: docs/master/notifications.md:202 docs/master/notifications.md:1196
#, no-wrap
msgid "    namespace App\\Notifications;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:136 docs/8.x/notifications.md:207
#: docs/master/notifications.md:135 docs/master/notifications.md:206
#, no-wrap
msgid "    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:140 docs/8.x/notifications.md:211
#: docs/master/notifications.md:139 docs/master/notifications.md:210
#, no-wrap
msgid "    class InvoicePaid extends Notification implements ShouldQueue\n"
"    {\n"
"        use Queueable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:145 docs/master/notifications.md:144
msgid "Once the `ShouldQueue` interface has been added to your notification, you may send the notification like normal. Laravel will detect the `ShouldQueue` interface on the class and automatically queue the delivery of the notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:149 docs/master/notifications.md:148
msgid "If you would like to delay the delivery of the notification, you may chain the `delay` method onto your notification instantiation:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:151 docs/master/notifications.md:150
#, no-wrap
msgid "    $delay = now()->addMinutes(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:153 docs/master/notifications.md:152
#, no-wrap
msgid "    $user->notify((new InvoicePaid($invoice))->delay($delay));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:155 docs/master/notifications.md:154
msgid "You may pass an array to the `delay` method to specify the delay amount for specific channels:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:160 docs/master/notifications.md:159
#, no-wrap
msgid "    $user->notify((new InvoicePaid($invoice))->delay([\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ]));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:162 docs/master/notifications.md:161
msgid "When queueing notifications, a queued job will be created for each recipient and channel combination. For example, six jobs will be dispatched to the queue if your notification has three recipients and two channels."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:164 docs/master/notifications.md:163
#, no-wrap
msgid "<a name=\"customizing-the-notification-queue-connection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:164 docs/master/notifications.md:163
#, no-wrap
msgid "Customizing The Notification Queue Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:167 docs/master/notifications.md:166
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may define a `$connection` property on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:174 docs/master/notifications.md:173
#, no-wrap
msgid "    /**\n"
"     * The name of the queue connection to use when queueing the notification.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $connection = 'redis';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:176 docs/master/notifications.md:175
#, no-wrap
msgid "<a name=\"customizing-notification-channel-queues\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:176 docs/master/notifications.md:175
#, no-wrap
msgid "Customizing Notification Channel Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:179 docs/master/notifications.md:178
msgid "If you would like to specify a specific queue that should be used for each notification channel supported by the notification, you may define a `viaQueues` method on your notification. This method should return an array of channel name / queue name pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:192 docs/master/notifications.md:191
#, no-wrap
msgid "    /**\n"
"     * Determine which queues should be used for each notification channel.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function viaQueues()\n"
"    {\n"
"        return [\n"
"            'mail' => 'mail-queue',\n"
"            'slack' => 'slack-queue',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:194 docs/master/notifications.md:193
#, no-wrap
msgid "<a name=\"queued-notifications-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:194 docs/master/notifications.md:193
#, no-wrap
msgid "Queued Notifications & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:197 docs/master/notifications.md:196
msgid "When queued notifications are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your notification depends on these models, unexpected errors can occur when the job that sends the queued notification is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:199 docs/master/notifications.md:198
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued notification should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:221 docs/master/notifications.md:220
msgid "Sometimes you may need to send a notification to someone who is not stored as a \"user\" of your application. Using the `Notification` facade's `route` method, you may specify ad-hoc notification routing information before sending the notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:226 docs/master/notifications.md:225
#, no-wrap
msgid "    Notification::route('mail', 'taylor@example.com')\n"
"                ->route('nexmo', '5555555555')\n"
"                ->route('slack', 'https://hooks.slack.com/services/...')\n"
"                ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:228 docs/master/notifications.md:227
#, no-wrap
msgid "<a name=\"mail-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:228 docs/master/notifications.md:227
#, no-wrap
msgid "Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:231 docs/master/notifications.md:230
#, no-wrap
msgid "<a name=\"formatting-mail-messages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:231 docs/master/notifications.md:230
#, no-wrap
msgid "Formatting Mail Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:234 docs/master/notifications.md:233
msgid "If a notification supports being sent as an email, you should define a `toMail` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\MailMessage` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:236 docs/master/notifications.md:235
msgid "The `MailMessage` class contains a few simple methods to help you build transactional email messages. Mail messages may contain lines of text as well as a \"call to action\". Let's take a look at an example `toMail` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:246 docs/8.x/notifications.md:562
#: docs/master/notifications.md:245 docs/master/notifications.md:534
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        $url = url('/invoice/'.$this->invoice->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:253 docs/master/notifications.md:252
#, no-wrap
msgid "        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->line('One of your invoices has been paid!')\n"
"                    ->action('View Invoice', $url)\n"
"                    ->line('Thank you for using our application!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:255 docs/master/notifications.md:254
#, no-wrap
msgid "> {tip} Note we are using `$this->invoice->id` in our `toMail` method. You may pass any data your notification needs to generate its message into the notification's constructor.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:257 docs/master/notifications.md:256
msgid "In this example, we register a greeting, a line of text, a call to action, and then another line of text. These methods provided by the `MailMessage` object make it simple and fast to format small transactional emails. The mail channel will then translate the message components into a beautiful, responsive HTML email template with a plain-text counterpart. Here is an example of an email generated by the `mail` channel:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:259 docs/master/notifications.md:258
#, no-wrap
msgid "<img src=\"https://laravel.com/img/docs/notification-example-2.png\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:261 docs/master/notifications.md:260
#, no-wrap
msgid "> {tip} When sending mail notifications, be sure to set the `name` configuration option in your `config/app.php` configuration file. This value will be used in the header and footer of your mail notification messages.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:263 docs/master/notifications.md:262
#, no-wrap
msgid "<a name=\"other-mail-notification-formatting-options\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:263 docs/master/notifications.md:262
#, no-wrap
msgid "Other Mail Notification Formatting Options"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:266 docs/master/notifications.md:265
msgid "Instead of defining the \"lines\" of text in the notification class, you may use the `view` method to specify a custom template that should be used to render the notification email:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:279 docs/master/notifications.md:278
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)->view(\n"
"            'emails.name', ['invoice' => $this->invoice]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:281 docs/master/notifications.md:280
msgid "You may specify a plain-text view for the mail message by passing the view name as the second element of an array that is given to the `view` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:295 docs/master/notifications.md:294
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)->view(\n"
"            ['emails.name.html', 'emails.name.plain'],\n"
"            ['invoice' => $this->invoice]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:297 docs/master/notifications.md:312
#, no-wrap
msgid "<a name=\"error-messages\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:297 docs/master/notifications.md:312
#, no-wrap
msgid "Error Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:300 docs/master/notifications.md:315
msgid "Some notifications inform users of errors, such as a failed invoice payment. You may indicate that a mail message is regarding an error by calling the `error` method when building your message. When using the `error` method on a mail message, the call to action button will be red instead of black:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:314 docs/master/notifications.md:329
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Message\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->error()\n"
"                    ->subject('Notification Subject')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:316 docs/master/notifications.md:331
#, no-wrap
msgid "<a name=\"customizing-the-sender\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:316 docs/master/notifications.md:331
#, no-wrap
msgid "Customizing The Sender"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:319 docs/master/notifications.md:334
msgid "By default, the email's sender / from address is defined in the `config/mail.php` configuration file. However, you may specify the from address for a specific notification using the `from` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:332 docs/master/notifications.md:347
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->from('barrett@example.com', 'Barrett Blair')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:334 docs/master/notifications.md:349
#, no-wrap
msgid "<a name=\"customizing-the-recipient\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:334 docs/master/notifications.md:349
#, no-wrap
msgid "Customizing The Recipient"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:337 docs/master/notifications.md:352
msgid "When sending notifications via the `mail` channel, the notification system will automatically look for an `email` property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a `routeNotificationForMail` method on the notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:359 docs/master/notifications.md:374
#, no-wrap
msgid "        /**\n"
"         * Route notifications for the mail channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"         * @return array|string\n"
"         */\n"
"        public function routeNotificationForMail($notification)\n"
"        {\n"
"            // Return email address only...\n"
"            return $this->email_address;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:364 docs/master/notifications.md:379
#, no-wrap
msgid "            // Return email address and name...\n"
"            return [$this->email_address => $this->name];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:366 docs/master/notifications.md:381
#, no-wrap
msgid "<a name=\"customizing-the-subject\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:366 docs/master/notifications.md:381
#, no-wrap
msgid "Customizing The Subject"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:369 docs/master/notifications.md:384
msgid "By default, the email's subject is the class name of the notification formatted to \"Title Case\". So, if your notification class is named `InvoicePaid`, the email's subject will be `Invoice Paid`. If you would like to specify a different subject for the message, you may call the `subject` method when building your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:382 docs/master/notifications.md:397
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->subject('Notification Subject')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:384 docs/master/notifications.md:399
#, no-wrap
msgid "<a name=\"customizing-the-mailer\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:384 docs/master/notifications.md:399
#, no-wrap
msgid "Customizing The Mailer"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:387 docs/master/notifications.md:402
msgid "By default, the email notification will be sent using the default mailer defined in the `config/mail.php` configuration file. However, you may specify a different mailer at runtime by calling the `mailer` method when building your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:400 docs/master/notifications.md:415
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->mailer('postmark')\n"
"                    ->line('...');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:402 docs/master/notifications.md:417
#, no-wrap
msgid "<a name=\"customizing-the-templates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:402 docs/master/notifications.md:417
#, no-wrap
msgid "Customizing The Templates"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:405 docs/master/notifications.md:420
msgid "You can modify the HTML and plain-text template used by mail notifications by publishing the notification package's resources. After running this command, the mail notification templates will be located in the `resources/views/vendor/notifications` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:407 docs/master/notifications.md:422
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-notifications\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:409 docs/master/notifications.md:424
#, no-wrap
msgid "<a name=\"mail-attachments\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:412 docs/master/notifications.md:427
msgid "To add attachments to an email notification, use the `attach` method while building your message. The `attach` method accepts the absolute path to the file as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:425 docs/master/notifications.md:440
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attach('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:443 docs/master/notifications.md:458
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attach('/path/to/file', [\n"
"                        'as' => 'name.pdf',\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:445 docs/master/notifications.md:460
msgid "Unlike attaching files in mailable objects, you may not attach a file directly from a storage disk using `attachFromStorage`. You should rather use the `attach` method with an absolute path to the file on the storage disk. Alternatively, you could return a [mailable](/docs/{{version}}/mail#generating-mailables) from the `toMail` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:447 docs/8.x/notifications.md:487
#: docs/master/notifications.md:298 docs/master/notifications.md:462
#, no-wrap
msgid "    use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:460 docs/master/notifications.md:475
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($notifiable->email)\n"
"                    ->attachFromStorage('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:465 docs/master/notifications.md:480
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. When calling the `attachData` method, you should provide the filename that should be assigned to the attachment:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:480 docs/master/notifications.md:495
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->greeting('Hello!')\n"
"                    ->attachData($this->pdf, 'name.pdf', [\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:482
#, no-wrap
msgid "<a name=\"using-mailables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:482
#, no-wrap
msgid "Using Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:485
msgid "If needed, you may return a full [mailable object](/docs/{{version}}/mail) from your notification's `toMail` method. When returning a `Mailable` instead of a `MailMessage`, you will need to specify the message recipient using the mailable object's `to` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:499 docs/master/notifications.md:310
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($notifiable->email);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:501
#, no-wrap
msgid "<a name=\"mailables-and-on-demand-notifications\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:501
#, no-wrap
msgid "Mailables & On-Demand Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:504
msgid "If you are sending an [on-demand notification](#on-demand-notifications), the `$notifiable` instance given to the `toMail` method will be an instance of `Illuminate\\Notifications\\AnonymousNotifiable`, which offers a `routeNotificationFor` method that may be used to retrieve the email address the on-demand notification should be sent to:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:507
#, no-wrap
msgid "    use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"    use Illuminate\\Notifications\\AnonymousNotifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:519
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return Mailable\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        $address = $notifiable instanceof AnonymousNotifiable\n"
"                ? $notifiable->routeNotificationFor('mail')\n"
"                : $notifiable->email;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:523
#, no-wrap
msgid "        return (new InvoicePaidMailable($this->invoice))\n"
"                    ->to($address);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:525 docs/master/notifications.md:497
#, no-wrap
msgid "<a name=\"previewing-mail-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:525 docs/master/notifications.md:497
#, no-wrap
msgid "Previewing Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:528 docs/master/notifications.md:500
msgid "When designing a mail notification template, it is convenient to quickly preview the rendered mail message in your browser like a typical Blade template. For this reason, Laravel allows you to return any mail message generated by a mail notification directly from a route closure or controller. When a `MailMessage` is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:531 docs/master/notifications.md:503
#, no-wrap
msgid "    use App\\Models\\Invoice;\n"
"    use App\\Notifications\\InvoicePaid;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:534 docs/master/notifications.md:506
#, no-wrap
msgid "    Route::get('/notification', function () {\n"
"        $invoice = Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:538 docs/master/notifications.md:510
#, no-wrap
msgid "        return (new InvoicePaid($invoice))\n"
"                    ->toMail($invoice->user);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:540 docs/master/notifications.md:512
#, no-wrap
msgid "<a name=\"markdown-mail-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:540 docs/master/notifications.md:512
#, no-wrap
msgid "Markdown Mail Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:543 docs/master/notifications.md:515
msgid "Markdown mail notifications allow you to take advantage of the pre-built templates of mail notifications, while giving you more freedom to write longer, customized messages. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:545 docs/master/notifications.md:517
#, no-wrap
msgid "<a name=\"generating-the-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:545 docs/master/notifications.md:517
#, no-wrap
msgid "Generating The Message"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:548 docs/master/notifications.md:520
msgid "To generate a notification with a corresponding Markdown template, you may use the `--markdown` option of the `make:notification` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:550 docs/master/notifications.md:522
#, no-wrap
msgid "    php artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:552 docs/master/notifications.md:524
msgid "Like all other mail notifications, notifications that use Markdown templates should define a `toMail` method on their notification class. However, instead of using the `line` and `action` methods to construct the notification, use the `markdown` method to specify the name of the Markdown template that should be used. An array of data you wish to make available to the template may be passed as the method's second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:567 docs/master/notifications.md:539
#, no-wrap
msgid "        return (new MailMessage)\n"
"                    ->subject('Invoice Paid')\n"
"                    ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:569 docs/master/notifications.md:541
#, no-wrap
msgid "<a name=\"writing-the-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:569 docs/master/notifications.md:541
#, no-wrap
msgid "Writing The Message"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:572 docs/master/notifications.md:544
msgid "Markdown mail notifications use a combination of Blade components and Markdown syntax which allow you to easily construct notifications while leveraging Laravel's pre-crafted notification components:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:575 docs/master/notifications.md:547
#, no-wrap
msgid "    @component('mail::message')\n"
"    # Invoice Paid\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:577 docs/master/notifications.md:549
#, no-wrap
msgid "    Your invoice has been paid!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:581 docs/master/notifications.md:553
#, no-wrap
msgid "    @component('mail::button', ['url' => $url])\n"
"    View Invoice\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:590 docs/master/notifications.md:562
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `green`, and `red`. You may add as many button components to a notification as you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:594 docs/master/notifications.md:566
#, no-wrap
msgid "    @component('mail::button', ['url' => $url, 'color' => 'green'])\n"
"    View Invoice\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:599 docs/master/notifications.md:571
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the notification. This allows you to draw attention to a given block of text:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:620 docs/master/notifications.md:592
msgid "You may export all of the Markdown notification components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:629 docs/master/notifications.md:601
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown notifications."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:631 docs/master/notifications.md:603
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of the `mail` configuration file to match the name of your new theme."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:633 docs/master/notifications.md:605
msgid "To customize the theme for an individual notification, you may call the `theme` method while building the notification's mail message. The `theme` method accepts the name of the theme that should be used when sending the notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:647 docs/master/notifications.md:619
#, no-wrap
msgid "    /**\n"
"     * Get the mail representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
"     */\n"
"    public function toMail($notifiable)\n"
"    {\n"
"        return (new MailMessage)\n"
"                    ->theme('invoice')\n"
"                    ->subject('Invoice Paid')\n"
"                    ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:649 docs/master/notifications.md:621
#, no-wrap
msgid "<a name=\"database-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:649 docs/master/notifications.md:621
#, no-wrap
msgid "Database Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:652 docs/master/notifications.md:624
#, no-wrap
msgid "<a name=\"database-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:655 docs/master/notifications.md:627
msgid "The `database` notification channel stores the notification information in a database table. This table will contain information such as the notification type as well as a JSON data structure that describes the notification."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:657 docs/master/notifications.md:629
msgid "You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the `notifications:table` command to generate a [migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:659 docs/master/notifications.md:631
#, no-wrap
msgid "    php artisan notifications:table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:663 docs/master/notifications.md:635
#, no-wrap
msgid "<a name=\"formatting-database-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:663 docs/master/notifications.md:635
#, no-wrap
msgid "Formatting Database Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:666 docs/master/notifications.md:638
msgid "If a notification supports being stored in a database table, you should define a `toDatabase` or `toArray` method on the notification class. This method will receive a `$notifiable` entity and should return a plain PHP array. The returned array will be encoded as JSON and stored in the `data` column of your `notifications` table. Let's take a look at an example `toArray` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:680 docs/master/notifications.md:652
#, no-wrap
msgid "    /**\n"
"     * Get the array representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function toArray($notifiable)\n"
"    {\n"
"        return [\n"
"            'invoice_id' => $this->invoice->id,\n"
"            'amount' => $this->invoice->amount,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:682 docs/master/notifications.md:654
#, no-wrap
msgid "<a name=\"todatabase-vs-toarray\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:682 docs/master/notifications.md:654
#, no-wrap
msgid "`toDatabase` Vs. `toArray`"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:685 docs/master/notifications.md:657
msgid "The `toArray` method is also used by the `broadcast` channel to determine which data to broadcast to your JavaScript powered frontend. If you would like to have two different array representations for the `database` and `broadcast` channels, you should define a `toDatabase` method instead of a `toArray` method."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:687 docs/master/notifications.md:659
#, no-wrap
msgid "<a name=\"accessing-the-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:687 docs/master/notifications.md:659
#, no-wrap
msgid "Accessing The Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:690 docs/master/notifications.md:662
msgid "Once notifications are stored in the database, you need a convenient way to access them from your notifiable entities. The `Illuminate\\Notifications\\Notifiable` trait, which is included on Laravel's default `App\\Models\\User` model, includes a `notifications` [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that returns the notifications for the entity. To fetch notifications, you may access this method like any other Eloquent relationship. By default, notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:696 docs/master/notifications.md:668
#, no-wrap
msgid "    foreach ($user->notifications as $notification) {\n"
"        echo $notification->type;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:698 docs/master/notifications.md:670
msgid "If you want to retrieve only the \"unread\" notifications, you may use the `unreadNotifications` relationship. Again, these notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:704 docs/master/notifications.md:676
#, no-wrap
msgid "    foreach ($user->unreadNotifications as $notification) {\n"
"        echo $notification->type;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:706 docs/master/notifications.md:678
#, no-wrap
msgid "> {tip} To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller's URL from your JavaScript client.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:708 docs/master/notifications.md:680
#, no-wrap
msgid "<a name=\"marking-notifications-as-read\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:708 docs/master/notifications.md:680
#, no-wrap
msgid "Marking Notifications As Read"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:711 docs/master/notifications.md:683
msgid "Typically, you will want to mark a notification as \"read\" when a user views it. The `Illuminate\\Notifications\\Notifiable` trait provides a `markAsRead` method, which updates the `read_at` column on the notification's database record:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:717 docs/master/notifications.md:689
#, no-wrap
msgid "    foreach ($user->unreadNotifications as $notification) {\n"
"        $notification->markAsRead();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:719 docs/master/notifications.md:691
msgid "However, instead of looping through each notification, you may use the `markAsRead` method directly on a collection of notifications:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:721 docs/master/notifications.md:693
#, no-wrap
msgid "    $user->unreadNotifications->markAsRead();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:723 docs/master/notifications.md:695
msgid "You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:727 docs/master/notifications.md:699
#, no-wrap
msgid "    $user->unreadNotifications()->update(['read_at' => now()]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:729 docs/master/notifications.md:701
msgid "You may `delete` the notifications to remove them from the table entirely:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:731 docs/master/notifications.md:703
#, no-wrap
msgid "    $user->notifications()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:733 docs/master/notifications.md:705
#, no-wrap
msgid "<a name=\"broadcast-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:733 docs/master/notifications.md:705
#, no-wrap
msgid "Broadcast Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:736 docs/master/notifications.md:708
#, no-wrap
msgid "<a name=\"broadcast-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:739 docs/master/notifications.md:711
msgid "Before broadcasting notifications, you should configure and be familiar with Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services. Event broadcasting provides a way to react to server-side Laravel events from your JavaScript powered frontend."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:741 docs/master/notifications.md:713
#, no-wrap
msgid "<a name=\"formatting-broadcast-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:741 docs/master/notifications.md:713
#, no-wrap
msgid "Formatting Broadcast Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:744 docs/master/notifications.md:716
msgid "The `broadcast` channel broadcasts notifications using Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services, allowing your JavaScript powered frontend to catch notifications in realtime. If a notification supports broadcasting, you can define a `toBroadcast` method on the notification class. This method will receive a `$notifiable` entity and should return a `BroadcastMessage` instance. If the `toBroadcast` method does not exist, the `toArray` method will be used to gather the data that should be broadcast. The returned data will be encoded as JSON and broadcast to your JavaScript powered frontend. Let's take a look at an example `toBroadcast` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:746 docs/8.x/notifications.md:776
#: docs/master/notifications.md:718 docs/master/notifications.md:748
#, no-wrap
msgid "    use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:760 docs/master/notifications.md:732
#, no-wrap
msgid "    /**\n"
"     * Get the broadcastable representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return BroadcastMessage\n"
"     */\n"
"    public function toBroadcast($notifiable)\n"
"    {\n"
"        return new BroadcastMessage([\n"
"            'invoice_id' => $this->invoice->id,\n"
"            'amount' => $this->invoice->amount,\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:762 docs/master/notifications.md:734
#, no-wrap
msgid "<a name=\"broadcast-queue-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:762 docs/master/notifications.md:734
#, no-wrap
msgid "Broadcast Queue Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:765 docs/master/notifications.md:737
msgid "All broadcast notifications are queued for broadcasting. If you would like to configure the queue connection or queue name that is used to queue the broadcast operation, you may use the `onConnection` and `onQueue` methods of the `BroadcastMessage`:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:769 docs/master/notifications.md:741
#, no-wrap
msgid "    return (new BroadcastMessage($data))\n"
"                    ->onConnection('sqs')\n"
"                    ->onQueue('broadcasts');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:771 docs/master/notifications.md:743
#, no-wrap
msgid "<a name=\"customizing-the-notification-type\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:771 docs/master/notifications.md:743
#, no-wrap
msgid "Customizing The Notification Type"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:774 docs/master/notifications.md:746
msgid "In addition to the data you specify, all broadcast notifications also have a `type` field containing the full class name of the notification. If you would like to customize the notification `type`, you may define a `broadcastType` method on the notification class:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:786 docs/master/notifications.md:758
#, no-wrap
msgid "    /**\n"
"     * Get the type of the notification being broadcast.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function broadcastType()\n"
"    {\n"
"        return 'broadcast.message';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:788 docs/master/notifications.md:760
#, no-wrap
msgid "<a name=\"listening-for-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:788 docs/master/notifications.md:760
#, no-wrap
msgid "Listening For Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:791 docs/master/notifications.md:763
msgid "Notifications will broadcast on a private channel formatted using a `{notifiable}.{id}` convention. So, if you are sending a notification to an `App\\Models\\User` instance with an ID of `1`, the notification will be broadcast on the `App.Models.User.1` private channel. When using [Laravel Echo](/docs/{{version}}/broadcasting), you may easily listen for notifications on a channel using the `notification` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:796 docs/master/notifications.md:768
#, no-wrap
msgid "    Echo.private('App.Models.User.' + userId)\n"
"        .notification((notification) => {\n"
"            console.log(notification.type);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:798 docs/master/notifications.md:770
#, no-wrap
msgid "<a name=\"customizing-the-notification-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:798 docs/master/notifications.md:770
#, no-wrap
msgid "Customizing The Notification Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:801 docs/master/notifications.md:773
msgid "If you would like to customize which channel that an entity's broadcast notifications are broadcast on, you may define a `receivesBroadcastNotificationsOn` method on the notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:809 docs/master/notifications.md:781
#, no-wrap
msgid "    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:824 docs/master/notifications.md:796
#, no-wrap
msgid "        /**\n"
"         * The channels the user receives notification broadcasts on.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function receivesBroadcastNotificationsOn()\n"
"        {\n"
"            return 'users.'.$this->id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:826 docs/master/notifications.md:798
#, no-wrap
msgid "<a name=\"sms-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:826 docs/master/notifications.md:798
#, no-wrap
msgid "SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:829 docs/master/notifications.md:801
#, no-wrap
msgid "<a name=\"sms-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:832 docs/master/notifications.md:804
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/nexmo-notification-channel` and `nexmo/laravel` Composer packages"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:834 docs/master/notifications.md:806
#, no-wrap
msgid "    composer require laravel/nexmo-notification-channel nexmo/laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:836 docs/master/notifications.md:808
msgid "The `nexmo/laravel` package includes [its own configuration file](https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php). However, you are not required to export this configuration file to your own application. You can simply use the `NEXMO_KEY` and `NEXMO_SECRET` environment variables to set your Vonage public and secret key."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:838 docs/master/notifications.md:810
msgid "Next, you will need to add a `nexmo` configuration entry to your `config/services.php` configuration file. You may copy the example configuration below to get started:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:842 docs/master/notifications.md:814
#, no-wrap
msgid "    'nexmo' => [\n"
"        'sms_from' => '15556666666',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:844 docs/master/notifications.md:816
msgid "The `sms_from` option is the phone number that your SMS messages will be sent from. You should generate a phone number for your application in the Vonage control panel."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:846 docs/master/notifications.md:818
#, no-wrap
msgid "<a name=\"formatting-sms-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:846 docs/master/notifications.md:818
#, no-wrap
msgid "Formatting SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:849 docs/master/notifications.md:821
msgid "If a notification supports being sent as an SMS, you should define a `toNexmo` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:861 docs/master/notifications.md:833
#, no-wrap
msgid "    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your SMS message content');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:863 docs/master/notifications.md:835
#, no-wrap
msgid "<a name=\"unicode-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:863 docs/master/notifications.md:835
#, no-wrap
msgid "Unicode Content"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:866 docs/master/notifications.md:838
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:879 docs/master/notifications.md:851
#, no-wrap
msgid "    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your unicode message')\n"
"                    ->unicode();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:881 docs/master/notifications.md:853
#, no-wrap
msgid "<a name=\"formatting-shortcode-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:881 docs/master/notifications.md:853
#, no-wrap
msgid "Formatting Shortcode Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:884 docs/master/notifications.md:856
msgid "Laravel also supports sending shortcode notifications, which are pre-defined message templates in your Vonage account. To send a shortcode SMS notification, you should define a `toShortcode` method on your notification class. From within this method, you may return an array specifying the type of notification (`alert`, `2fa`, or `marketing`) as well as the custom values that will populate the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:900 docs/master/notifications.md:872
#, no-wrap
msgid "    /**\n"
"     * Get the Vonage / Shortcode representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array\n"
"     */\n"
"    public function toShortcode($notifiable)\n"
"    {\n"
"        return [\n"
"            'type' => 'alert',\n"
"            'custom' => [\n"
"                'code' => 'ABC123',\n"
"            ];\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:902 docs/master/notifications.md:874
#, no-wrap
msgid "> {tip} Like [routing SMS Notifications](#routing-sms-notifications), you should implement the `routeNotificationForShortcode` method on your notifiable model.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:904 docs/master/notifications.md:876
#, no-wrap
msgid "<a name=\"customizing-the-from-number\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:904 docs/master/notifications.md:876
#, no-wrap
msgid "Customizing The \"From\" Number"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:907 docs/master/notifications.md:879
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified in your `config/services.php` file, you may call the `from` method on a `NexmoMessage` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:920 docs/master/notifications.md:892
#, no-wrap
msgid "    /**\n"
"     * Get the Vonage / SMS representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return NexmoMessage\n"
"     */\n"
"    public function toNexmo($notifiable)\n"
"    {\n"
"        return (new NexmoMessage)\n"
"                    ->content('Your SMS message content')\n"
"                    ->from('15554443333');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:922 docs/master/notifications.md:894
#, no-wrap
msgid "<a name=\"routing-sms-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:922 docs/master/notifications.md:894
#, no-wrap
msgid "Routing SMS Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:925 docs/master/notifications.md:897
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForNexmo` method on your notifiable entity:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:948 docs/master/notifications.md:920
#, no-wrap
msgid "        /**\n"
"         * Route notifications for the Nexmo channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"         * @return string\n"
"         */\n"
"        public function routeNotificationForNexmo($notification)\n"
"        {\n"
"            return $this->phone_number;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:950 docs/master/notifications.md:922
#, no-wrap
msgid "<a name=\"slack-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:950 docs/master/notifications.md:922
#, no-wrap
msgid "Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:953 docs/master/notifications.md:925
#, no-wrap
msgid "<a name=\"slack-prerequisites\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:956 docs/master/notifications.md:928
msgid "Before you can send notifications via Slack, you must install the Slack notification channel via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:958 docs/master/notifications.md:930
#, no-wrap
msgid "    composer require laravel/slack-notification-channel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:960 docs/master/notifications.md:932
msgid "You will also need to configure an [\"Incoming Webhook\"](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) integration for your Slack team. This integration will provide you with a URL you may use when [routing Slack notifications](#routing-slack-notifications)."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:962 docs/master/notifications.md:934
#, no-wrap
msgid "<a name=\"formatting-slack-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:962 docs/master/notifications.md:934
#, no-wrap
msgid "Formatting Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:965 docs/master/notifications.md:937
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\SlackMessage` instance. Slack messages may contain text content as well as an \"attachment\" that formats additional text or an array of fields. Let's take a look at a basic `toSlack` example:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:977
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->content('One of your invoices has been paid!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:979 docs/master/notifications.md:951
#, no-wrap
msgid "<a name=\"customizing-the-sender-recipient\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:979 docs/master/notifications.md:951
#, no-wrap
msgid "Customizing The Sender & Recipient"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:982 docs/master/notifications.md:954
msgid "You may use the `from` and `to` methods to customize the sender and recipient. The `from` method accepts a username and emoji identifier, while the `to` method accepts a channel or username:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:996 docs/master/notifications.md:968
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->from('Ghost', ':ghost:')\n"
"                    ->to('#bots')\n"
"                    ->content('This will be sent to #bots');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:998 docs/master/notifications.md:970
msgid "You may also use an image as your from \"logo\" instead of an emoji:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1012 docs/master/notifications.md:984
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->from('Laravel')\n"
"                    ->image('https://laravel.com/img/favicon/favicon.ico')\n"
"                    ->content('This will display the Laravel logo next to the message');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1014 docs/master/notifications.md:986
#, no-wrap
msgid "<a name=\"slack-attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:1014 docs/master/notifications.md:986
#, no-wrap
msgid "Slack Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1017 docs/master/notifications.md:989
msgid "You may also add \"attachments\" to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1027 docs/master/notifications.md:999
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/exceptions/'.$this->exception->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1036 docs/master/notifications.md:1008
#, no-wrap
msgid "        return (new SlackMessage)\n"
"                    ->error()\n"
"                    ->content('Whoops! Something went wrong.')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Exception: File Not Found', $url)\n"
"                                   ->content('File [background.jpg] was not found.');\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1038 docs/master/notifications.md:1010
msgid "Attachments also allow you to specify an array of data that should be presented to the user. The given data will be presented in a table-style format for easy reading:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1048 docs/master/notifications.md:1020
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/invoices/'.$this->invoice->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1062 docs/master/notifications.md:1034
#, no-wrap
msgid "        return (new SlackMessage)\n"
"                    ->success()\n"
"                    ->content('One of your invoices has been paid!')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Invoice 1322', $url)\n"
"                                   ->fields([\n"
"                                        'Title' => 'Server Expenses',\n"
"                                        'Amount' => '$1,234',\n"
"                                        'Via' => 'American Express',\n"
"                                        'Was Overdue' => ':-1:',\n"
"                                    ]);\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1064 docs/master/notifications.md:1036
#, no-wrap
msgid "<a name=\"markdown-attachment-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/notifications.md:1064 docs/master/notifications.md:1036
#, no-wrap
msgid "Markdown Attachment Content"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1067 docs/master/notifications.md:1039
msgid "If some of your attachment fields contain Markdown, you may use the `markdown` method to instruct Slack to parse and display the given attachment fields as Markdown formatted text. The values accepted by this method are: `pretext`, `text`, and / or `fields`. For more information about Slack attachment formatting, check out the [Slack API documentation](https://api.slack.com/docs/message-formatting#message_formatting):"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1077 docs/master/notifications.md:1049
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        $url = url('/exceptions/'.$this->exception->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1087 docs/master/notifications.md:1059
#, no-wrap
msgid "        return (new SlackMessage)\n"
"                    ->error()\n"
"                    ->content('Whoops! Something went wrong.')\n"
"                    ->attachment(function ($attachment) use ($url) {\n"
"                        $attachment->title('Exception: File Not Found', $url)\n"
"                                   ->content('File [background.jpg] was *not found*.')\n"
"                                   ->markdown(['text']);\n"
"                    });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1089 docs/master/notifications.md:1061
#, no-wrap
msgid "<a name=\"routing-slack-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/notifications.md:1089 docs/master/notifications.md:1061
#, no-wrap
msgid "Routing Slack Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1092 docs/master/notifications.md:1064
msgid "To route Slack notifications to the proper Slack team and channel, define a `routeNotificationForSlack` method on your notifiable entity. This should return the webhook URL to which the notification should be delivered. Webhook URLs may be generated by adding an \"Incoming Webhook\" service to your Slack team:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1115 docs/master/notifications.md:1087
#, no-wrap
msgid "        /**\n"
"         * Route notifications for the Slack channel.\n"
"         *\n"
"         * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"         * @return string\n"
"         */\n"
"        public function routeNotificationForSlack($notification)\n"
"        {\n"
"            return 'https://hooks.slack.com/services/...';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1117 docs/master/notifications.md:1089
#, no-wrap
msgid "<a name=\"localizing-notifications\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1117 docs/master/notifications.md:1089
#, no-wrap
msgid "Localizing Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1120 docs/master/notifications.md:1092
msgid "Laravel allows you to send notifications in a locale other than the HTTP request's current locale, and will even remember this locale if the notification is queued."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1122 docs/master/notifications.md:1094
msgid "To accomplish this, the `Illuminate\\Notifications\\Notification` class offers a `locale` method to set the desired language. The application will change into this locale when the notification is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1124 docs/master/notifications.md:1096
#, no-wrap
msgid "    $user->notify((new InvoicePaid($invoice))->locale('es'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1126 docs/master/notifications.md:1098
msgid "Localization of multiple notifiable entries may also be achieved via the `Notification` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1130 docs/master/notifications.md:1102
#, no-wrap
msgid "    Notification::locale('es')->send(\n"
"        $users, new InvoicePaid($invoice)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1135 docs/master/notifications.md:1107
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on your notifiable model, you may instruct Laravel to use this stored locale when sending a notification:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1152 docs/master/notifications.md:1124
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending notifications and mailables to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1156 docs/master/notifications.md:1128
#, no-wrap
msgid "<a name=\"notification-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1156 docs/master/notifications.md:1128
#, no-wrap
msgid "Notification Events"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1159 docs/master/notifications.md:1131
msgid "When a notification is sent, the `Illuminate\\Notifications\\Events\\NotificationSent` [event](/docs/{{version}}/events) is fired by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1170 docs/master/notifications.md:1142
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Notifications\\Events\\NotificationSent' => [\n"
"            'App\\Listeners\\LogNotification',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1172 docs/master/notifications.md:1144
#, no-wrap
msgid "> {tip} After registering listeners in your `EventServiceProvider`, use the `event:generate` Artisan command to quickly generate listener classes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1174 docs/master/notifications.md:1146
msgid "Within an event listener, you may access the `notifiable`, `notification`, and `channel` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1188 docs/master/notifications.md:1160
#, no-wrap
msgid "    /**\n"
"     * Handle the event.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(NotificationSent $event)\n"
"    {\n"
"        // $event->channel\n"
"        // $event->notifiable\n"
"        // $event->notification\n"
"        // $event->response\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1190 docs/master/notifications.md:1162
#, no-wrap
msgid "<a name=\"custom-channels\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/notifications.md:1190 docs/master/notifications.md:1162
#, no-wrap
msgid "Custom Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1193 docs/master/notifications.md:1165
msgid "Laravel ships with a handful of notification channels, but you may want to write your own drivers to deliver notifications via other channels. Laravel makes it simple. To get started, define a class that contains a `send` method. The method should receive two arguments: a `$notifiable` and a `$notification`."
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1195 docs/master/notifications.md:1167
msgid "Within the `send` method, you may call methods on the notification to retrieve a message object understood by your channel and then send the notification to the `$notifiable` instance however you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1199 docs/master/notifications.md:1171
#, no-wrap
msgid "    namespace App\\Channels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1201 docs/master/notifications.md:1173
#, no-wrap
msgid "    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1214 docs/master/notifications.md:1186
#, no-wrap
msgid "    class VoiceChannel\n"
"    {\n"
"        /**\n"
"         * Send the given notification.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"         * @return void\n"
"         */\n"
"        public function send($notifiable, Notification $notification)\n"
"        {\n"
"            $message = $notification->toVoice($notifiable);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1218 docs/master/notifications.md:1190
#, no-wrap
msgid "            // Send notification to the $notifiable instance...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1220 docs/master/notifications.md:1192
msgid "Once your notification channel class has been defined, you may return the class name from the `via` method of any of your notifications. In this example, the `toVoice` method of your notification can return whatever object you choose to represent voice messages. For example, you might define your own `VoiceMessage` class to represent these messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1230 docs/master/notifications.md:1202
#, no-wrap
msgid "    use App\\Channels\\Messages\\VoiceMessage;\n"
"    use App\\Channels\\VoiceChannel;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Notifications\\Notification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1234 docs/master/notifications.md:1206
#, no-wrap
msgid "    class InvoicePaid extends Notification\n"
"    {\n"
"        use Queueable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1245 docs/master/notifications.md:1217
#, no-wrap
msgid "        /**\n"
"         * Get the notification channels.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @return array|string\n"
"         */\n"
"        public function via($notifiable)\n"
"        {\n"
"            return [VoiceChannel::class];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/notifications.md:1256 docs/master/notifications.md:1228
#, no-wrap
msgid "        /**\n"
"         * Get the voice representation of the notification.\n"
"         *\n"
"         * @param  mixed  $notifiable\n"
"         * @return VoiceMessage\n"
"         */\n"
"        public function toVoice($notifiable)\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/packages.md:1 docs/master/packages.md:1
#, no-wrap
msgid "Package Development"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[A Note On Facades](#a-note-on-facades)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Package Discovery](#package-discovery)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Resources](#resources)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Migrations](#migrations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Routes](#routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Translations](#translations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Views](#views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[View Components](#view-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Commands](#commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Public Assets](#public-assets)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/packages.md:17 docs/master/packages.md:17
msgid "[Publishing File Groups](#publishing-file-groups)"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:22 docs/master/packages.md:22
msgid "Packages are the primary way of adding functionality to Laravel. Packages might be anything from a great way to work with dates like [Carbon](https://github.com/briannesbitt/Carbon) or a package that allows you to associate files with Eloquent models like Spatie's [Laravel Media Library](https://github.com/spatie/laravel-medialibrary)."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:24 docs/master/packages.md:24
msgid "There are different types of packages. Some packages are stand-alone, meaning they work with any PHP framework. Carbon and PHPUnit are examples of stand-alone packages. Any of these packages may be used with Laravel by requiring them in your `composer.json` file."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:26 docs/master/packages.md:26
msgid "On the other hand, other packages are specifically intended for use with Laravel. These packages may have routes, controllers, views, and configuration specifically intended to enhance a Laravel application. This guide primarily covers the development of those packages that are Laravel specific."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:28 docs/master/packages.md:28
#, no-wrap
msgid "<a name=\"a-note-on-facades\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:28 docs/master/packages.md:28
#, no-wrap
msgid "A Note On Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:31 docs/master/packages.md:31
msgid "When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel's testing helpers. If you would like to be able to write your package tests as if the package were installed inside a typical Laravel application, you may use the [Orchestral Testbench](https://github.com/orchestral/testbench) package."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:33 docs/master/packages.md:33
#, no-wrap
msgid "<a name=\"package-discovery\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/packages.md:33 docs/master/packages.md:33
#, no-wrap
msgid "Package Discovery"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:36 docs/master/packages.md:36
msgid "In a Laravel application's `config/app.php` configuration file, the `providers` option defines a list of service providers that should be loaded by Laravel. When someone installs your package, you will typically want your service provider to be included in this list. Instead of requiring users to manually add your service provider to the list, you may define the provider in the `extra` section of your package's `composer.json` file. In addition to service providers, you may also list any [facades](/docs/{{version}}/facades) you would like to be registered:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:47 docs/master/packages.md:47
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"providers\": [\n"
"                \"Barryvdh\\\\Debugbar\\\\ServiceProvider\"\n"
"            ],\n"
"            \"aliases\": {\n"
"                \"Debugbar\": \"Barryvdh\\\\Debugbar\\\\Facade\"\n"
"            }\n"
"        }\n"
"    },\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:49 docs/master/packages.md:49
msgid "Once your package has been configured for discovery, Laravel will automatically register its service providers and facades when it is installed, creating a convenient installation experience for your package's users."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:51 docs/master/packages.md:51
#, no-wrap
msgid "<a name=\"opting-out-of-package-discovery\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:51 docs/master/packages.md:51
#, no-wrap
msgid "Opting Out Of Package Discovery"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:54 docs/master/packages.md:54
msgid "If you are the consumer of a package and would like to disable package discovery for a package, you may list the package name in the `extra` section of your application's `composer.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:62 docs/master/packages.md:62
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"dont-discover\": [\n"
"                \"barryvdh/laravel-debugbar\"\n"
"            ]\n"
"        }\n"
"    },\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:64 docs/master/packages.md:64
msgid "You may disable package discovery for all packages using the `*` character inside of your application's `dont-discover` directive:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:72 docs/master/packages.md:72
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"dont-discover\": [\n"
"                \"*\"\n"
"            ]\n"
"        }\n"
"    },\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:77 docs/master/packages.md:77
msgid "[Service providers](/docs/{{version}}/providers) are the connection point between your package and Laravel. A service provider is responsible for binding things into Laravel's [service container](/docs/{{version}}/container) and informing Laravel where to load package resources such as views, configuration, and localization files."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:79 docs/master/packages.md:79
msgid "A service provider extends the `Illuminate\\Support\\ServiceProvider` class and contains two methods: `register` and `boot`. The base `ServiceProvider` class is located in the `illuminate/support` Composer package, which you should add to your own package's dependencies. To learn more about the structure and purpose of service providers, check out [their documentation](/docs/{{version}}/providers)."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:81 docs/master/packages.md:81
#, no-wrap
msgid "<a name=\"resources\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/packages.md:81 docs/master/packages.md:81
#, no-wrap
msgid "Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:87 docs/master/packages.md:87
msgid "Typically, you will need to publish your package's configuration file to the application's `config` directory. This will allow users of your package to easily override your default configuration options. To allow your configuration files to be published, call the `publishes` method from the `boot` method of your service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:99 docs/master/packages.md:99
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../config/courier.php' => config_path('courier.php'),\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:101 docs/master/packages.md:101
msgid "Now, when users of your package execute Laravel's `vendor:publish` command, your file will be copied to the specified publish location. Once your configuration has been published, its values may be accessed like any other configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:103 docs/master/packages.md:103
#, no-wrap
msgid "    $value = config('courier.option');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:105 docs/master/packages.md:105
#, no-wrap
msgid "> {note} You should not define closures in your configuration files. They can not be serialized correctly when users execute the `config:cache` Artisan command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:107 docs/master/packages.md:107
#, no-wrap
msgid "<a name=\"default-package-configuration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/packages.md:107 docs/master/packages.md:107
#, no-wrap
msgid "Default Package Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:110 docs/master/packages.md:110
msgid "You may also merge your own package configuration file with the application's published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration file. To merge the configuration file values, use the `mergeConfigFrom` method within your service provider's `register` method."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:112 docs/master/packages.md:112
msgid "The `mergeConfigFrom` method accepts the path to your package's configuration file as its first argument and the name of the application's copy of the configuration file as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:124 docs/master/packages.md:124
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->mergeConfigFrom(\n"
"            __DIR__.'/../config/courier.php', 'courier'\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:126 docs/master/packages.md:126
#, no-wrap
msgid "> {note} This method only merges the first level of the configuration array. If your users partially define a multi-dimensional configuration array, the missing options will not be merged.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:128 docs/master/packages.md:128
#, no-wrap
msgid "<a name=\"routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:128 docs/master/packages.md:128
#, no-wrap
msgid "Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:131 docs/master/packages.md:131
msgid "If your package contains routes, you may load them using the `loadRoutesFrom` method. This method will automatically determine if the application's routes are cached and will not load your routes file if the routes have already been cached:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:141 docs/master/packages.md:141
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n"
"    }\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:143 docs/master/packages.md:143
#, no-wrap
msgid "Migrations"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:146 docs/master/packages.md:146
msgid "If your package contains [database migrations](/docs/{{version}}/migrations), you may use the `loadMigrationsFrom` method to inform Laravel how to load them. The `loadMigrationsFrom` method accepts the path to your package's migrations as its only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:156 docs/master/packages.md:156
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadMigrationsFrom(__DIR__.'/../database/migrations');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:158 docs/master/packages.md:158
msgid "Once your package's migrations have been registered, they will automatically be run when the `php artisan migrate` command is executed. You do not need to export them to the application's `database/migrations` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:160 docs/master/packages.md:160
#, no-wrap
msgid "<a name=\"translations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:160 docs/master/packages.md:160
#, no-wrap
msgid "Translations"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:163 docs/master/packages.md:163
msgid "If your package contains [translation files](/docs/{{version}}/localization), you may use the `loadTranslationsFrom` method to inform Laravel how to load them. For example, if your package is named `courier`, you should add the following to your service provider's `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:173 docs/master/packages.md:173
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:175 docs/master/packages.md:175
msgid "Package translations are referenced using the `package::file.line` syntax convention. So, you may load the `courier` package's `welcome` line from the `messages` file like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:177 docs/master/packages.md:177
#, no-wrap
msgid "    echo trans('courier::messages.welcome');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:179 docs/master/packages.md:179
#, no-wrap
msgid "<a name=\"publishing-translations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/packages.md:179 docs/master/packages.md:179
#, no-wrap
msgid "Publishing Translations"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:182 docs/master/packages.md:182
msgid "If you would like to publish your package's translations to the application's `resources/lang/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the `courier` package, you may do the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:191 docs/master/packages.md:191
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'courier');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:196 docs/master/packages.md:196
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../resources/lang' => resource_path('lang/vendor/courier'),\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:198 docs/master/packages.md:198
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's translations will be published to the specified publish location."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:200 docs/master/packages.md:200
#, no-wrap
msgid "<a name=\"views\"></a>\n"
msgstr ""

#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  views.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  packages.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  views.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/packages.md:200 docs/8.x/views.md:1 docs/master/packages.md:200
#: docs/master/views.md:1
#, no-wrap
msgid "Views"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:203 docs/master/packages.md:203
msgid "To register your package's [views](/docs/{{version}}/views) with Laravel, you need to tell Laravel where the views are located. You may do this using the service provider's `loadViewsFrom` method. The `loadViewsFrom` method accepts two arguments: the path to your view templates and your package's name. For example, if your package's name is `courier`, you would add the following to your service provider's `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:213 docs/master/packages.md:213
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:215 docs/master/packages.md:215
msgid "Package views are referenced using the `package::view` syntax convention. So, once your view path is registered in a service provider, you may load the `admin` view from the `courier` package like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:219 docs/master/packages.md:219
#, no-wrap
msgid "    Route::get('/dashboard', function () {\n"
"        return view('courier::dashboard');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:221 docs/master/packages.md:221
#, no-wrap
msgid "<a name=\"overriding-package-views\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/packages.md:221 docs/master/packages.md:221
#, no-wrap
msgid "Overriding Package Views"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:224 docs/master/packages.md:224
msgid "When you use the `loadViewsFrom` method, Laravel actually registers two locations for your views: the application's `resources/views/vendor` directory and the directory you specify. So, using the `courier` package as an example, Laravel will first check if a custom version of the view has been placed in the `resources/views/vendor/courier` directory by the developer. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to `loadViewsFrom`. This makes it easy for package users to customize / override your package's views."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:226 docs/master/packages.md:226
#, no-wrap
msgid "<a name=\"publishing-views\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/packages.md:226 docs/master/packages.md:226
#, no-wrap
msgid "Publishing Views"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:229 docs/master/packages.md:229
msgid "If you would like to make your views available for publishing to the application's `resources/views/vendor` directory, you may use the service provider's `publishes` method. The `publishes` method accepts an array of package view paths and their desired publish locations:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:238 docs/master/packages.md:238
#, no-wrap
msgid "    /**\n"
"     * Bootstrap the package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:243 docs/master/packages.md:243
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../resources/views' => resource_path('views/vendor/courier'),\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:245 docs/master/packages.md:245
msgid "Now, when users of your package execute Laravel's `vendor:publish` Artisan command, your package's views will be copied to the specified publish location."
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:247 docs/master/packages.md:247
#, no-wrap
msgid "<a name=\"view-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/packages.md:247 docs/master/packages.md:247
#, no-wrap
msgid "View Components"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:250 docs/master/packages.md:250
msgid "If your package contains [view components](/docs/{{version}}/blade#components), you may use the `loadViewComponentsAs` method to inform Laravel how to load them. The `loadViewComponentsAs` method accepts two arguments: the tag prefix for your view components and an array of your view component class names. For example, if your package's prefix is `courier` and you have `Alert` and `Button` view components, you would add the following to your service provider's `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:253 docs/master/packages.md:253
#, no-wrap
msgid "    use Courier\\Components\\Alert;\n"
"    use Courier\\Components\\Button;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:266 docs/master/packages.md:266
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->loadViewComponentsAs('courier', [\n"
"            Alert::class,\n"
"            Button::class,\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:268 docs/master/packages.md:268
msgid "Once your view components are registered in a service provider, you may reference them in your view like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:270 docs/master/packages.md:270
#, no-wrap
msgid "    <x-courier-alert />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:272 docs/master/packages.md:272
#, no-wrap
msgid "    <x-courier-button />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:277 docs/master/packages.md:277
msgid "If your package contains anonymous components, they must be placed within a `components` directory of your package's \"views\" directory (as specified by `loadViewsFrom`). Then, you may render them by prefixing the component name with the package's view namespace:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:279 docs/master/packages.md:279
#, no-wrap
msgid "    <x-courier::alert />\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:281 docs/master/packages.md:281
#, no-wrap
msgid "<a name=\"commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/packages.md:281 docs/master/packages.md:281
#, no-wrap
msgid "Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:284 docs/master/packages.md:284
msgid "To register your package's Artisan commands with Laravel, you may use the `commands` method. This method expects an array of command class names. Once the commands have been registered, you may execute them using the [Artisan CLI](/docs/{{version}}/artisan):"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:287 docs/master/packages.md:287
#, no-wrap
msgid "    use Courier\\Console\\Commands\\InstallCommand;\n"
"    use Courier\\Console\\Commands\\NetworkCommand;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:302 docs/master/packages.md:302
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        if ($this->app->runningInConsole()) {\n"
"            $this->commands([\n"
"                InstallCommand::class,\n"
"                NetworkCommand::class,\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:304 docs/master/packages.md:304
#, no-wrap
msgid "<a name=\"public-assets\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/packages.md:304 docs/master/packages.md:304
#, no-wrap
msgid "Public Assets"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:307 docs/master/packages.md:307
msgid "Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application's `public` directory, use the service provider's `publishes` method. In this example, we will also add a `public` asset group tag, which may be used to easily publish groups of related assets:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:319 docs/master/packages.md:319
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../public' => public_path('vendor/courier'),\n"
"        ], 'public');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:321 docs/master/packages.md:321
msgid "Now, when your package's users execute the `vendor:publish` command, your assets will be copied to the specified publish location. Since users will typically need to overwrite the assets every time the package is updated, you may use the `--force` flag:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:323 docs/master/packages.md:323
#, no-wrap
msgid "    php artisan vendor:publish --tag=public --force\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:325 docs/master/packages.md:325
#, no-wrap
msgid "<a name=\"publishing-file-groups\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/packages.md:325 docs/master/packages.md:325
#, no-wrap
msgid "Publishing File Groups"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:328 docs/master/packages.md:328
msgid "You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package's configuration files without being forced to publish your package's assets. You may do this by \"tagging\" them when calling the `publishes` method from a package's service provider. For example, let's use tags to define two publish groups (`config` and `migrations`) in the `boot` method of a package's service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:339 docs/master/packages.md:339
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any package services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->publishes([\n"
"            __DIR__.'/../config/package.php' => config_path('package.php')\n"
"        ], 'config');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:344 docs/master/packages.md:344
#, no-wrap
msgid "        $this->publishes([\n"
"            __DIR__.'/../database/migrations/' => database_path('migrations')\n"
"        ], 'migrations');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:346 docs/master/packages.md:346
msgid "Now your users may publish these groups separately by referencing their tag when executing the `vendor:publish` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/packages.md:347 docs/master/packages.md:347
#, no-wrap
msgid "    php artisan vendor:publish --tag=config\n"
msgstr ""

#. type: Title #
#: docs/8.x/pagination.md:1 docs/master/pagination.md:1
#, no-wrap
msgid "Database: Pagination"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Paginating Query Builder Results](#paginating-query-builder-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Paginating Eloquent Results](#paginating-eloquent-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Manually Creating A Paginator](#manually-creating-a-paginator)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Customizing Pagination URLs](#customizing-pagination-urls)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Displaying Pagination Results](#displaying-pagination-results)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Adjusting The Pagination Link Window](#adjusting-the-pagination-link-window)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Converting Results To JSON](#converting-results-to-json)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Customizing The Pagination View](#customizing-the-pagination-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Using Bootstrap](#using-bootstrap)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/pagination.md:15 docs/master/pagination.md:15
msgid "[Paginator Instance Methods](#paginator-instance-methods)"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:20 docs/master/pagination.md:20
msgid "In other frameworks, pagination can be very painful. We hope Laravel's approach to pagination will be a breath of fresh air. Laravel's paginator is integrated with the [query builder](/docs/{{version}}/queries) and [Eloquent ORM](/docs/{{version}}/eloquent) and provides convenient, easy-to-use pagination of database records with zero configuration."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:22 docs/master/pagination.md:22
msgid "By default, the HTML generated by the paginator is compatible with the [Tailwind CSS framework](https://tailwindcss.com/); however, Bootstrap pagination support is also available."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:27 docs/master/pagination.md:27
#, no-wrap
msgid "<a name=\"paginating-query-builder-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:27 docs/master/pagination.md:27
#, no-wrap
msgid "Paginating Query Builder Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:30 docs/master/pagination.md:30
msgid "There are several ways to paginate items. The simplest is by using the `paginate` method on the [query builder](/docs/{{version}}/queries) or an [Eloquent query](/docs/{{version}}/eloquent). The `paginate` method automatically takes care of setting the query's \"limit\" and \"offset\" based on the current page being viewed by the user. By default, the current page is detected by the value of the `page` query string argument on the HTTP request. This value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:32 docs/master/pagination.md:32
msgid "In this example, the only argument passed to the `paginate` method is the number of items you would like displayed \"per page\". In this case, let's specify that we would like to display `15` items per page:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:54 docs/master/pagination.md:54
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show all of the users for the application.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            return view('user.index', [\n"
"                'users' => DB::table('users')->paginate(15)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:56 docs/master/pagination.md:56
#, no-wrap
msgid "<a name=\"simple-pagination\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:56 docs/master/pagination.md:56
#, no-wrap
msgid "\"Simple Pagination\""
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:59 docs/master/pagination.md:59
msgid "The `paginate` method counts the total number of records matched by the query before retrieving the records from the database. This is done so that the paginator knows how many pages of records there are in total. However, if you do not plan to show the total number of pages in your application's UI then the record count query is unnecessary."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:61 docs/master/pagination.md:61
msgid "Therefore, if you only need to display simple \"Next\" and \"Previous\" links in your application's UI, you may use the `simplePaginate` method to perform a single, efficient query:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:63 docs/master/pagination.md:63
#, no-wrap
msgid "    $users = DB::table('users')->simplePaginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:65 docs/master/pagination.md:65
#, no-wrap
msgid "<a name=\"paginating-eloquent-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:65 docs/master/pagination.md:65
#, no-wrap
msgid "Paginating Eloquent Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:68 docs/master/pagination.md:68
msgid "You may also paginate [Eloquent](/docs/{{version}}/eloquent) queries. In this example, we will paginate the `App\\Models\\User` model and indicate that we plan to display 15 records per page. As you can see, the syntax is nearly identical to paginating query builder results:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:72 docs/master/pagination.md:72
#, no-wrap
msgid "    $users = User::paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:74 docs/master/pagination.md:74
msgid "Of course, you may call the `paginate` method after setting other constraints on the query, such as `where` clauses:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:76 docs/master/pagination.md:76
#, no-wrap
msgid "    $users = User::where('votes', '>', 100)->paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:78 docs/master/pagination.md:78
msgid "You may also use the `simplePaginate` method when paginating Eloquent models:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:80 docs/master/pagination.md:80
#, no-wrap
msgid "    $users = User::where('votes', '>', 100)->simplePaginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:82 docs/master/pagination.md:82
#, no-wrap
msgid "<a name=\"manually-creating-a-paginator\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:82 docs/master/pagination.md:82
#, no-wrap
msgid "Manually Creating A Paginator"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:85 docs/master/pagination.md:85
msgid "Sometimes you may wish to create a pagination instance manually, passing it an array of items that you already have in memory. You may do so by creating either an `Illuminate\\Pagination\\Paginator` or `Illuminate\\Pagination\\LengthAwarePaginator` instance, depending on your needs."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:87 docs/master/pagination.md:87
msgid "The `Paginator` class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieving the index of the last page. The `LengthAwarePaginator` accepts almost the same arguments as the `Paginator`; however, it requires a count of the total number of items in the result set."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:89 docs/master/pagination.md:89
msgid "In other words, the `Paginator` corresponds to the `simplePaginate` method on the query builder, while the `LengthAwarePaginator` corresponds to the `paginate` method."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:91 docs/master/pagination.md:91
#, no-wrap
msgid "> {note} When manually creating a paginator instance, you should manually \"slice\" the array of results you pass to the paginator. If you're unsure how to do this, check out the [array_slice](https://secure.php.net/manual/en/function.array-slice.php) PHP function.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:93 docs/master/pagination.md:93
#, no-wrap
msgid "<a name=\"customizing-pagination-urls\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:93 docs/master/pagination.md:93
#, no-wrap
msgid "Customizing Pagination URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:96 docs/master/pagination.md:96
msgid "By default, links generated by the paginator will match the current request's URI. However, the paginator's `withPath` method allows you to customize the URI used by the paginator when generating links. For example, if you want the paginator to generate links like `http://example.com/admin/users?page=N`, you should pass `/admin/users` to the `withPath` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:101 docs/8.x/pagination.md:116
#: docs/master/pagination.md:101 docs/master/pagination.md:116
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        $users = User::paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:103 docs/master/pagination.md:103
#, no-wrap
msgid "        $users->withPath('/admin/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:108 docs/master/pagination.md:108
#, no-wrap
msgid "<a name=\"appending-query-string-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:108 docs/master/pagination.md:108
#, no-wrap
msgid "Appending Query String Values"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:111 docs/master/pagination.md:111
msgid "You may append to the query string of pagination links using the `appends` method. For example, to append `sort=votes` to each pagination link, you should make the following call to `appends`:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:118 docs/master/pagination.md:118
#, no-wrap
msgid "        $users->appends(['sort' => 'votes']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:123 docs/master/pagination.md:123
msgid "You may use the `withQueryString` method if you would like to append all of the current request's query string values to the pagination links:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:125 docs/master/pagination.md:125
#, no-wrap
msgid "    $users = User::paginate(15)->withQueryString();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:127 docs/master/pagination.md:127
#, no-wrap
msgid "<a name=\"appending-hash-fragments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/pagination.md:127 docs/master/pagination.md:127
#, no-wrap
msgid "Appending Hash Fragments"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:130 docs/master/pagination.md:130
msgid "If you need to append a \"hash fragment\" to URLs generated by the paginator, you may use the `fragment` method. For example, to append `#users` to the end of each pagination link, you should invoke the `fragment` method like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:132 docs/master/pagination.md:132
#, no-wrap
msgid "    $users = User::paginate(15)->fragment('users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:134 docs/master/pagination.md:134
#, no-wrap
msgid "<a name=\"displaying-pagination-results\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:134 docs/master/pagination.md:134
#, no-wrap
msgid "Displaying Pagination Results"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:137 docs/master/pagination.md:137
msgid "When calling the `paginate` method, you will receive an instance of `Illuminate\\Pagination\\LengthAwarePaginator`. When calling the `simplePaginate` method, you will receive an instance of `Illuminate\\Pagination\\Paginator`. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade):"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/pagination.md:138 docs/master/pagination.md:138
#, no-wrap
msgid "<div class=\"container\">\n"
"    @foreach ($users as $user)\n"
"        {{ $user->name }}\n"
"    @endforeach\n"
"</div>\n\n"
"{{ $users->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:149 docs/master/pagination.md:149
msgid "The `links` method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper `page` query string variable. Remember, the HTML generated by the `links` method is compatible with the [Tailwind CSS framework](https://tailwindcss.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:151 docs/master/pagination.md:151
#, no-wrap
msgid "<a name=\"adjusting-the-pagination-link-window\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:151 docs/master/pagination.md:151
#, no-wrap
msgid "Adjusting The Pagination Link Window"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:154 docs/master/pagination.md:154
msgid "When the paginator displays pagination links, the current page number is displayed as well as links for the three pages before and after the current page. If needed, you may control how many additional links are displayed on each side of the current page using the `onEachSide` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:156 docs/master/pagination.md:156
#, no-wrap
msgid "    {{ $users->onEachSide(5)->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:158 docs/master/pagination.md:158
#, no-wrap
msgid "<a name=\"converting-results-to-json\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:158 docs/master/pagination.md:158
#, no-wrap
msgid "Converting Results To JSON"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:161 docs/master/pagination.md:161
msgid "The Laravel paginator classes implement the `Illuminate\\Contracts\\Support\\Jsonable` Interface contract and expose the `toJson` method, so it's very easy to convert your pagination results to JSON. You may also convert a paginator instance to JSON by returning it from a route or controller action:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:167 docs/master/pagination.md:167
#, no-wrap
msgid "    Route::get('/users', function () {\n"
"        return User::paginate();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:169 docs/master/pagination.md:169
msgid "The JSON from the paginator will include meta information such as `total`, `current_page`, `last_page`, and more. The result records are available via the `data` key in the JSON array. Here is an example of the JSON created by returning a paginator instance from a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:191 docs/master/pagination.md:191
#, no-wrap
msgid "    {\n"
"       \"total\": 50,\n"
"       \"per_page\": 15,\n"
"       \"current_page\": 1,\n"
"       \"last_page\": 4,\n"
"       \"first_page_url\": \"http://laravel.app?page=1\",\n"
"       \"last_page_url\": \"http://laravel.app?page=4\",\n"
"       \"next_page_url\": \"http://laravel.app?page=2\",\n"
"       \"prev_page_url\": null,\n"
"       \"path\": \"http://laravel.app\",\n"
"       \"from\": 1,\n"
"       \"to\": 15,\n"
"       \"data\":[\n"
"            {\n"
"                // Record...\n"
"            },\n"
"            {\n"
"                // Record...\n"
"            }\n"
"       ]\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:193 docs/master/pagination.md:193
#, no-wrap
msgid "<a name=\"customizing-the-pagination-view\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:193 docs/master/pagination.md:193
#, no-wrap
msgid "Customizing The Pagination View"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:196 docs/master/pagination.md:196
msgid "By default, the views rendered to display the pagination links are compatible with the [Tailwind CSS](https://tailwindcss.com) framework. However, if you are not using Tailwind, you are free to define your own views to render these links. When calling the `links` method on a paginator instance, you may pass the view name as the first argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:198 docs/master/pagination.md:198
#, no-wrap
msgid "    {{ $paginator->links('view.name') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:201 docs/master/pagination.md:201
#, no-wrap
msgid "    // Passing additional data to the view...\n"
"    {{ $paginator->links('view.name', ['foo' => 'bar']) }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:203 docs/master/pagination.md:203
msgid "However, the easiest way to customize the pagination views is by exporting them to your `resources/views/vendor` directory using the `vendor:publish` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:205 docs/master/pagination.md:205
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-pagination\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:207 docs/master/pagination.md:207
msgid "This command will place the views in your application's `resources/views/vendor/pagination` directory. The `tailwind.blade.php` file within this directory corresponds to the default pagination view. You may edit this file to modify the pagination HTML."
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:209 docs/master/pagination.md:209
msgid "If you would like to designate a different file as the default pagination view, you may invoke the paginator's `defaultView` and `defaultSimpleView` methods within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:217 docs/master/pagination.md:217
#, no-wrap
msgid "    use Illuminate\\Pagination\\Paginator;\n"
"    use Illuminate\\Support\\Facades\\Blade;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:228 docs/master/pagination.md:228
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Paginator::defaultView('view-name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:232 docs/master/pagination.md:232
#, no-wrap
msgid "            Paginator::defaultSimpleView('view-name');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:234 docs/master/pagination.md:234
#, no-wrap
msgid "<a name=\"using-bootstrap\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/pagination.md:234 docs/master/pagination.md:234
#, no-wrap
msgid "Using Bootstrap"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:237 docs/master/pagination.md:237
msgid "Laravel includes pagination views built using [Bootstrap CSS](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrap` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:239 docs/8.x/upgrade.md:242
#: docs/master/pagination.md:239 docs/master/upgrade.md:242
#, no-wrap
msgid "    use Illuminate\\Pagination\\Paginator;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:249 docs/master/pagination.md:249
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Paginator::useBootstrap();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:251 docs/master/pagination.md:251
#, no-wrap
msgid "<a name=\"paginator-instance-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/pagination.md:251 docs/master/pagination.md:251
#, no-wrap
msgid "Paginator Instance Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:254 docs/master/pagination.md:254
msgid "Each paginator instance provides additional pagination information via the following methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/pagination.md:274 docs/master/pagination.md:274
#, no-wrap
msgid "Method  |  Description\n"
"-------  |  -----------\n"
"`$paginator->count()`  |  Get the number of items for the current page.\n"
"`$paginator->currentPage()`  |  Get the current page number.\n"
"`$paginator->firstItem()`  |  Get the result number of the first item in the results.\n"
"`$paginator->getOptions()`  |  Get the paginator options.\n"
"`$paginator->getUrlRange($start, $end)`  |  Create a range of pagination URLs.\n"
"`$paginator->hasPages()`  |  Determine if there are enough items to split into multiple pages.\n"
"`$paginator->hasMorePages()`  |  Determine if there are more items in the data store.\n"
"`$paginator->items()`  |  Get the items for the current page.\n"
"`$paginator->lastItem()`  |  Get the result number of the last item in the results.\n"
"`$paginator->lastPage()`  |  Get the page number of the last available page. (Not available when using `simplePaginate`).\n"
"`$paginator->nextPageUrl()`  |  Get the URL for the next page.\n"
"`$paginator->onFirstPage()`  |  Determine if the paginator is on the first page.\n"
"`$paginator->perPage()`  |  The number of items to be shown per page.\n"
"`$paginator->previousPageUrl()`  |  Get the URL for the previous page.\n"
"`$paginator->total()`  |  Determine the total number of matching items in the data store. (Not available when using `simplePaginate`).\n"
"`$paginator->url($page)`  |  Get the URL for a given page number.\n"
"`$paginator->getPageName()`  |  Get the query string variable used to store the page.\n"
"`$paginator->setPageName($name)`  |  Set the query string variable used to store the page.\n"
msgstr ""

#. type: Title #
#: docs/8.x/passport.md:1 docs/master/passport.md:1
#, no-wrap
msgid "Laravel Passport"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Passport Or Sanctum?](#passport-or-sanctum)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Deploying Passport](#deploying-passport)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Migration Customization](#migration-customization)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Upgrading Passport](#upgrading-passport)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Client Secret Hashing](#client-secret-hashing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Token Lifetimes](#token-lifetimes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Issuing Access Tokens](#issuing-access-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Managing Clients](#managing-clients)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Requesting Tokens](#requesting-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Refreshing Tokens](#refreshing-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/8.x/sanctum.md:23 docs/master/passport.md:45
#: docs/master/sanctum.md:23
msgid "[Revoking Tokens](#revoking-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Purging Tokens](#purging-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Authorization Code Grant with PKCE](#code-grant-pkce)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Creating The Client](#creating-a-auth-pkce-grant-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Requesting Tokens](#requesting-auth-pkce-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Password Grant Tokens](#password-grant-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Creating A Password Grant Client](#creating-a-password-grant-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Requesting Tokens](#requesting-password-grant-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Requesting All Scopes](#requesting-all-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Customizing The User Provider](#customizing-the-user-provider)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Customizing The Username Field](#customizing-the-username-field)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Customizing The Password Validation](#customizing-the-password-validation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Implicit Grant Tokens](#implicit-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Client Credentials Grant Tokens](#client-credentials-grant-tokens)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Personal Access Tokens](#personal-access-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Creating A Personal Access Client](#creating-a-personal-access-client)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Managing Personal Access Tokens](#managing-personal-access-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Passing The Access Token](#passing-the-access-token)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Token Scopes](#token-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Defining Scopes](#defining-scopes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Default Scope](#default-scope)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Assigning Scopes To Tokens](#assigning-scopes-to-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Checking Scopes](#checking-scopes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passport.md:45 docs/master/passport.md:45
msgid "[Consuming Your API With JavaScript](#consuming-your-api-with-javascript)"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:50 docs/master/passport.md:50
msgid "Laravel Passport provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the [League OAuth2 server](https://github.com/thephpleague/oauth2-server) that is maintained by Andy Millington and Simon Hamp."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:52 docs/master/passport.md:52
#, no-wrap
msgid "> {note} This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general [terminology](https://oauth2.thephpleague.com/terminology/) and features of OAuth2 before continuing.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:54 docs/master/passport.md:54
#, no-wrap
msgid "<a name=\"passport-or-sanctum\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:54 docs/master/passport.md:54
#, no-wrap
msgid "Passport Or Sanctum?"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:57 docs/master/passport.md:57
msgid "Before getting started, you may wish to determine if your application would be better served by Laravel Passport or [Laravel Sanctum](/docs/{{version}}/sanctum). If your application absolutely needs to support OAuth2, then you should use Laravel Passport."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:59 docs/master/passport.md:59
msgid "However, if you are attempting to authenticate a single-page application, mobile application, or issue API tokens, you should use [Laravel Sanctum](/docs/{{version}}/sanctum). Laravel Sanctum does not support OAuth2; however, it provides a much simpler API authentication development experience."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:64 docs/master/passport.md:64
msgid "To get started, install Passport via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:66 docs/master/passport.md:66
#, no-wrap
msgid "    composer require laravel/passport\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:68 docs/master/passport.md:68
msgid "Passport's [service provider](/docs/{{version}}/providers) registers its own database migration directory, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store OAuth2 clients and access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:72 docs/master/passport.md:72
msgid "Next, you should execute the `passport:install` Artisan command. This command will create the encryption keys needed to generate secure access tokens. In addition, the command will create \"personal access\" and \"password grant\" clients which will be used to generate access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:74 docs/master/passport.md:74
#, no-wrap
msgid "    php artisan passport:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:76 docs/master/passport.md:76
#, no-wrap
msgid "> {tip} If you would like to use UUIDs as the primary key value of the Passport `Client` model instead of auto-incrementing integers, please install Passport using [the `uuids` option](#client-uuids).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:78 docs/master/passport.md:78
msgid "After running the `passport:install` command, add the `Laravel\\Passport\\HasApiTokens` trait to your `App\\Models\\User` model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user's token and scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:87 docs/master/passport.md:87
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:92 docs/8.x/sanctum.md:128 docs/master/passport.md:92
#: docs/master/sanctum.md:128
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, HasFactory, Notifiable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:94 docs/master/passport.md:94
msgid "Next, you should call the `Passport::routes` method within the `boot` method of your `App\\Providers\\AuthServiceProvider`. This method will register the routes necessary to issue access tokens and revoke access tokens, clients, and personal access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:102 docs/master/passport.md:102
#, no-wrap
msgid "    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Gate;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:113 docs/master/passport.md:113
#, no-wrap
msgid "    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The policy mappings for the application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $policies = [\n"
"            'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:122 docs/master/passport.md:122
#, no-wrap
msgid "        /**\n"
"         * Register any authentication / authorization services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:128
#, no-wrap
msgid "            if (! $this->app->routesAreCached()) {\n"
"                Passport::routes();\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:130 docs/master/passport.md:128
msgid "Finally, in your application's `config/auth.php` configuration file, you should set the `driver` option of the `api` authentication guard to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:136 docs/master/passport.md:134
#, no-wrap
msgid "    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:142 docs/master/passport.md:140
#, no-wrap
msgid "        'api' => [\n"
"            'driver' => 'passport',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:144 docs/master/passport.md:142
#, no-wrap
msgid "<a name=\"client-uuids\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:144 docs/master/passport.md:142
#, no-wrap
msgid "Client UUIDs"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:147 docs/master/passport.md:145
msgid "You may also run the `passport:install` command with the `--uuids` option present. This option will instruct Passport that you would like to use UUIDs instead of auto-incrementing integers as the Passport `Client` model's primary key values. After running the `passport:install` command with the `--uuids` option, you will be given additional instructions regarding disabling Passport's default migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:149 docs/master/passport.md:147
#, no-wrap
msgid "    php artisan passport:install --uuids\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:151 docs/master/passport.md:149
#, no-wrap
msgid "<a name=\"deploying-passport\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:151 docs/master/passport.md:149
#, no-wrap
msgid "Deploying Passport"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:154 docs/master/passport.md:152
msgid "When deploying Passport to your application's servers for the first time, you will likely need to run the `passport:keys` command. This command generates the encryption keys Passport needs in order to generate access tokens. The generated keys are not typically kept in source control:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:156 docs/master/passport.md:154
#, no-wrap
msgid "    php artisan passport:keys\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:158 docs/master/passport.md:156
msgid "If necessary, you may define the path where Passport's keys should be loaded from. You may use the `Passport::loadKeysFrom` method to accomplish this. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:169 docs/8.x/passport.md:233 docs/8.x/passport.md:270
#: docs/8.x/passport.md:760 docs/8.x/passport.md:984 docs/8.x/passport.md:1130
#: docs/master/passport.md:167 docs/master/passport.md:231
#: docs/master/passport.md:268 docs/master/passport.md:758
#: docs/master/passport.md:982 docs/master/passport.md:1128
#, no-wrap
msgid "        Passport::routes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:172 docs/master/passport.md:170
#, no-wrap
msgid "        Passport::loadKeysFrom(__DIR__.'/../secrets/oauth');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:174 docs/master/passport.md:172
#, no-wrap
msgid "<a name=\"loading-keys-from-the-environment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:174 docs/master/passport.md:172
#, no-wrap
msgid "Loading Keys From The Environment"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:177 docs/master/passport.md:175
msgid "Alternatively, you may publish Passport's configuration file using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:179 docs/master/passport.md:177
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-config\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:181 docs/master/passport.md:179
msgid "After the configuration file has been published, you may load your application's encryption keys by defining them as environment variables:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:182 docs/master/passport.md:180
#, no-wrap
msgid "PASSPORT_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n"
"<private key here>\n"
"-----END RSA PRIVATE KEY-----\"\n\n"
"PASSPORT_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\n"
"<public key here>\n"
"-----END PUBLIC KEY-----\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:193 docs/8.x/sanctum.md:76 docs/8.x/telescope.md:55
#: docs/master/passport.md:191 docs/master/sanctum.md:76
#: docs/master/telescope.md:55
#, no-wrap
msgid "<a name=\"migration-customization\"></a>\n"
msgstr ""

#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  passport.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  sanctum.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#. #-#-#-#-#  telescope.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/passport.md:193 docs/8.x/sanctum.md:76 docs/8.x/telescope.md:55
#: docs/master/passport.md:191 docs/master/sanctum.md:76
#: docs/master/telescope.md:55
#, no-wrap
msgid "Migration Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:196 docs/master/passport.md:194
msgid "If you are not going to use Passport's default migrations, you should call the `Passport::ignoreMigrations` method in the `register` method of your `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:198 docs/master/passport.md:196
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-migrations\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:200 docs/master/passport.md:198
#, no-wrap
msgid "<a name=\"upgrading-passport\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:200 docs/master/passport.md:198
#, no-wrap
msgid "Upgrading Passport"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:203 docs/master/passport.md:201
msgid "When upgrading to a new major version of Passport, it's important that you carefully review [the upgrade guide](https://github.com/laravel/passport/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:208 docs/master/passport.md:206
#, no-wrap
msgid "<a name=\"client-secret-hashing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:208 docs/master/passport.md:206
#, no-wrap
msgid "Client Secret Hashing"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:211 docs/master/passport.md:209
msgid "If you would like your client's secrets to be hashed when stored in your database, you should call the `Passport::hashClientSecrets` method in the `boot` method of your `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:213 docs/8.x/passport.md:997 docs/8.x/passport.md:1079
#: docs/master/passport.md:211 docs/master/passport.md:995
#: docs/master/passport.md:1077
#, no-wrap
msgid "    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:215 docs/master/passport.md:213
#, no-wrap
msgid "    Passport::hashClientSecrets();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:217 docs/master/passport.md:215
msgid "Once enabled, all of your client secrets will only be displayable to the user immediately after they are created. Since the plain-text client secret value is never stored in the database, it is not possible to recover the secret's value if it is lost."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:219 docs/master/passport.md:217
#, no-wrap
msgid "<a name=\"token-lifetimes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:219 docs/master/passport.md:217
#, no-wrap
msgid "Token Lifetimes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:222 docs/master/passport.md:220
msgid "By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the `tokensExpireIn`, `refreshTokensExpireIn`, and `personalAccessTokensExpireIn` methods. These methods should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:238 docs/master/passport.md:236
#, no-wrap
msgid "        Passport::tokensExpireIn(now()->addDays(15));\n"
"        Passport::refreshTokensExpireIn(now()->addDays(30));\n"
"        Passport::personalAccessTokensExpireIn(now()->addMonths(6));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:240 docs/master/passport.md:238
#, no-wrap
msgid "> {note} The `expires_at` columns on Passport's database tables are read-only and for display purposes only. When issuing tokens, Passport stores the expiration information within the signed and encrypted tokens. If you need to invalidate a token you should [revoke it](#revoking-tokens).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:245 docs/master/passport.md:243
msgid "You are free to extend the models used internally by Passport by defining your own model and extending the corresponding Passport model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:247 docs/master/passport.md:245
#, no-wrap
msgid "    use Laravel\\Passport\\Client as PassportClient;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:252 docs/master/passport.md:250
#, no-wrap
msgid "    class Client extends PassportClient\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:254 docs/master/passport.md:252
msgid "After defining your model, you may instruct Passport to use your custom model via the `Laravel\\Passport\\Passport` class. Typically, you should inform Passport about your custom models in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:259 docs/master/passport.md:257
#, no-wrap
msgid "    use App\\Models\\Passport\\AuthCode;\n"
"    use App\\Models\\Passport\\Client;\n"
"    use App\\Models\\Passport\\PersonalAccessClient;\n"
"    use App\\Models\\Passport\\Token;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:276 docs/master/passport.md:274
#, no-wrap
msgid "        Passport::useTokenModel(Token::class);\n"
"        Passport::useClientModel(Client::class);\n"
"        Passport::useAuthCodeModel(AuthCode::class);\n"
"        Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:278 docs/master/passport.md:276
#, no-wrap
msgid "<a name=\"issuing-access-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:278 docs/master/passport.md:276
#, no-wrap
msgid "Issuing Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:281 docs/master/passport.md:279
msgid "Using OAuth2 via authorization codes is how most developers are familiar with OAuth2. When using authorization codes, a client application will redirect a user to your server where they will either approve or deny the request to issue an access token to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:283 docs/master/passport.md:281
#, no-wrap
msgid "<a name=\"managing-clients\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:283 docs/master/passport.md:281
#, no-wrap
msgid "Managing Clients"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:286 docs/master/passport.md:284
msgid "First, developers building applications that need to interact with your application's API will need to register their application with yours by creating a \"client\". Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:288 docs/master/passport.md:286
#, no-wrap
msgid "<a name=\"the-passportclient-command\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:288 docs/master/passport.md:286
#, no-wrap
msgid "The `passport:client` Command"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:291 docs/master/passport.md:289
msgid "The simplest way to create a client is using the `passport:client` Artisan command. This command may be used to create your own clients for testing your OAuth2 functionality. When you run the `client` command, Passport will prompt you for more information about your client and will provide you with a client ID and secret:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:293 docs/master/passport.md:291
#, no-wrap
msgid "    php artisan passport:client\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:295 docs/master/passport.md:293
#, no-wrap
msgid "**Redirect URLs**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:297 docs/master/passport.md:295
msgid "If you would like to allow multiple redirect URLs for your client, you may specify them using a comma-delimited list when prompted for the URL by the `passport:client` command. Any URLs which contain commas should be URL encoded:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:298 docs/master/passport.md:296
#, no-wrap
msgid "http://example.com/callback,http://examplefoo.com/callback\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:303 docs/master/passport.md:301
#, no-wrap
msgid "<a name=\"clients-json-api\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:303 docs/8.x/passport.md:458 docs/8.x/passport.md:864
#: docs/master/passport.md:301 docs/master/passport.md:456
#: docs/master/passport.md:862
#, no-wrap
msgid "JSON API"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:306 docs/master/passport.md:304
msgid "Since your application's users will not be able to utilize the `client` command, Passport provides a JSON API that you may use to create clients. This saves you the trouble of having to manually code controllers for creating, updating, and deleting clients."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:308 docs/master/passport.md:306
msgid "However, you will need to pair Passport's JSON API with your own frontend to provide a dashboard for your users to manage their clients. Below, we'll review all of the API endpoints for managing clients. For convenience, we'll use [Axios](https://github.com/axios/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:310 docs/8.x/passport.md:869
#: docs/master/passport.md:308 docs/master/passport.md:867
msgid "The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application. It is not able to be called from an external source."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:312 docs/master/passport.md:310
#, no-wrap
msgid "<a name=\"get-oauthclients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:312 docs/master/passport.md:310
#, no-wrap
msgid "`GET /oauth/clients`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:315 docs/master/passport.md:313
msgid "This route returns all of the clients for the authenticated user. This is primarily useful for listing all of the user's clients so that they may edit or delete them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:320 docs/master/passport.md:318
#, no-wrap
msgid "    axios.get('/oauth/clients')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:322 docs/master/passport.md:320
#, no-wrap
msgid "<a name=\"post-oauthclients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:322 docs/master/passport.md:320
#, no-wrap
msgid "`POST /oauth/clients`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:325 docs/master/passport.md:323
msgid "This route is used to create new clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:327 docs/master/passport.md:325
msgid "When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:332 docs/master/passport.md:330
#, no-wrap
msgid "    const data = {\n"
"        name: 'Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:340 docs/master/passport.md:338
#, no-wrap
msgid "    axios.post('/oauth/clients', data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:342 docs/master/passport.md:340
#, no-wrap
msgid "<a name=\"put-oauthclientsclient-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:342 docs/master/passport.md:340
#, no-wrap
msgid "`PUT /oauth/clients/{client-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:345 docs/master/passport.md:343
msgid "This route is used to update clients. It requires two pieces of data: the client's `name` and a `redirect` URL. The `redirect` URL is where the user will be redirected after approving or denying a request for authorization. The route will return the updated client instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:350 docs/master/passport.md:348
#, no-wrap
msgid "    const data = {\n"
"        name: 'New Client Name',\n"
"        redirect: 'http://example.com/callback'\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:358 docs/master/passport.md:356
#, no-wrap
msgid "    axios.put('/oauth/clients/' + clientId, data)\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:360 docs/master/passport.md:358
#, no-wrap
msgid "<a name=\"delete-oauthclientsclient-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:360 docs/master/passport.md:358
#, no-wrap
msgid "`DELETE /oauth/clients/{client-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:363 docs/master/passport.md:361
msgid "This route is used to delete clients:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:368 docs/master/passport.md:366
#, no-wrap
msgid "    axios.delete('/oauth/clients/' + clientId)\n"
"        .then(response => {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:370 docs/master/passport.md:368
#, no-wrap
msgid "<a name=\"requesting-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:370 docs/8.x/passport.md:555 docs/8.x/passport.md:646
#: docs/master/passport.md:368 docs/master/passport.md:553
#: docs/master/passport.md:644
#, no-wrap
msgid "Requesting Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:373 docs/master/passport.md:371
#, no-wrap
msgid "<a name=\"requesting-tokens-redirecting-for-authorization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:373 docs/8.x/passport.md:571
#: docs/master/passport.md:371 docs/master/passport.md:569
#, no-wrap
msgid "Redirecting For Authorization"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:376 docs/master/passport.md:374
msgid "Once a client has been created, developers may use their client ID and secret to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:379 docs/8.x/passport.md:577
#: docs/master/passport.md:377 docs/master/passport.md:575
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:382 docs/8.x/passport.md:580 docs/8.x/passport.md:770
#: docs/master/passport.md:380 docs/master/passport.md:578
#: docs/master/passport.md:768
#, no-wrap
msgid "    Route::get('/redirect', function (Request $request) {\n"
"        $request->session()->put('state', $state = Str::random(40));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:390 docs/master/passport.md:388
#, no-wrap
msgid "        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:393 docs/8.x/passport.md:601 docs/8.x/passport.md:781
#: docs/8.x/passport.md:1026 docs/master/passport.md:391
#: docs/master/passport.md:599 docs/master/passport.md:779
#: docs/master/passport.md:1024
#, no-wrap
msgid "        return redirect('http://passport-app.com/oauth/authorize?'.$query);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:395 docs/8.x/passport.md:783
#: docs/master/passport.md:393 docs/master/passport.md:781
#, no-wrap
msgid "> {tip} Remember, the `/oauth/authorize` route is already defined by the `Passport::routes` method. You do not need to manually define this route.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:397 docs/master/passport.md:395
#, no-wrap
msgid "<a name=\"approving-the-request\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:397 docs/master/passport.md:395
#, no-wrap
msgid "Approving The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:400 docs/master/passport.md:398
msgid "When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the `redirect_uri` that was specified by the consuming application. The `redirect_uri` must match the `redirect` URL that was specified when the client was created."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:402 docs/master/passport.md:400
msgid "If you would like to customize the authorization approval screen, you may publish Passport's views using the `vendor:publish` Artisan command. The published views will be placed in the `resources/views/vendor/passport` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:404 docs/master/passport.md:402
#, no-wrap
msgid "    php artisan vendor:publish --tag=passport-views\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:406 docs/master/passport.md:404
msgid "Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by [extending the `Client` model](#overriding-default-models) and defining a `skipsAuthorization` method. If `skipsAuthorization` returns `true` the client will be approved and the user will be redirected back to the `redirect_uri` immediately:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:410 docs/master/passport.md:408
#, no-wrap
msgid "    namespace App\\Models\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:412 docs/master/passport.md:410
#, no-wrap
msgid "    use Laravel\\Passport\\Client as BaseClient;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:425 docs/master/passport.md:423
#, no-wrap
msgid "    class Client extends BaseClient\n"
"    {\n"
"        /**\n"
"         * Determine if the client should skip the authorization prompt.\n"
"         *\n"
"         * @return bool\n"
"         */\n"
"        public function skipsAuthorization()\n"
"        {\n"
"            return $this->firstParty();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:427 docs/master/passport.md:425
#, no-wrap
msgid "<a name=\"requesting-tokens-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:427 docs/8.x/passport.md:603
#: docs/master/passport.md:425 docs/master/passport.md:601
#, no-wrap
msgid "Converting Authorization Codes To Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:430 docs/master/passport.md:428
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should first verify the `state` parameter against the value that was stored prior to the redirect. If the state parameter matches then the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:433 docs/8.x/passport.md:611
#: docs/master/passport.md:431 docs/master/passport.md:609
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:436 docs/8.x/passport.md:614
#: docs/master/passport.md:434 docs/master/passport.md:612
#, no-wrap
msgid "    Route::get('/callback', function (Request $request) {\n"
"        $state = $request->session()->pull('state');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:441 docs/8.x/passport.md:621
#: docs/master/passport.md:439 docs/master/passport.md:619
#, no-wrap
msgid "        throw_unless(\n"
"            strlen($state) > 0 && $state === $request->state,\n"
"            InvalidArgumentException::class\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:449 docs/master/passport.md:447
#, no-wrap
msgid "        $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'client_secret' => 'client-secret',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:452 docs/8.x/passport.md:632
#: docs/master/passport.md:450 docs/master/passport.md:630
#, no-wrap
msgid "        return $response->json();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:454 docs/8.x/passport.md:497
#: docs/master/passport.md:452 docs/master/passport.md:495
msgid "This `/oauth/token` route will return a JSON response containing `access_token`, `refresh_token`, and `expires_in` attributes. The `expires_in` attribute contains the number of seconds until the access token expires."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:456 docs/master/passport.md:454
#, no-wrap
msgid "> {tip} Like the `/oauth/authorize` route, the `/oauth/token` route is defined for you by the `Passport::routes` method. There is no need to manually define this route.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:458 docs/master/passport.md:456
#, no-wrap
msgid "<a name=\"tokens-json-api\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:461 docs/master/passport.md:459
msgid "Passport also includes a JSON API for managing authorized access tokens. You may pair this with your own frontend to offer your users a dashboard for managing access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints. The JSON API is guarded by the `web` and `auth` middleware; therefore, it may only be called from your own application."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:463 docs/master/passport.md:461
#, no-wrap
msgid "<a name=\"get-oauthtokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:463 docs/master/passport.md:461
#, no-wrap
msgid "`GET /oauth/tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:466 docs/master/passport.md:464
msgid "This route returns all of the authorized access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they can revoke them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:471 docs/master/passport.md:469
#, no-wrap
msgid "    axios.get('/oauth/tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:473 docs/master/passport.md:471
#, no-wrap
msgid "<a name=\"delete-oauthtokenstoken-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:473 docs/master/passport.md:471
#, no-wrap
msgid "`DELETE /oauth/tokens/{token-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:476 docs/master/passport.md:474
msgid "This route may be used to revoke authorized access tokens and their related refresh tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:478 docs/master/passport.md:476
#, no-wrap
msgid "    axios.delete('/oauth/tokens/' + tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:480 docs/master/passport.md:478
#, no-wrap
msgid "<a name=\"refreshing-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:480 docs/master/passport.md:478
#, no-wrap
msgid "Refreshing Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:483 docs/master/passport.md:481
msgid "If your application issues short-lived access tokens, users will need to refresh their access tokens via the refresh token that was provided to them when the access token was issued:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:493 docs/master/passport.md:491
#, no-wrap
msgid "    $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"        'grant_type' => 'refresh_token',\n"
"        'refresh_token' => 'the-refresh-token',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:495 docs/8.x/passport.md:662 docs/8.x/passport.md:963
#: docs/master/passport.md:493 docs/master/passport.md:660
#: docs/master/passport.md:961
#, no-wrap
msgid "    return $response->json();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:499 docs/8.x/sanctum.md:188 docs/master/passport.md:497
#: docs/master/sanctum.md:188
#, no-wrap
msgid "<a name=\"revoking-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:499 docs/8.x/sanctum.md:188 docs/8.x/sanctum.md:365
#: docs/master/passport.md:497 docs/master/sanctum.md:188
#: docs/master/sanctum.md:365
#, no-wrap
msgid "Revoking Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:502 docs/master/passport.md:500
msgid "You may revoke a token by using the `revokeAccessToken` method on the `Laravel\\Passport\\TokenRepository`. You may revoke a token's refresh tokens using the `revokeRefreshTokensByAccessTokenId` method on the `Laravel\\Passport\\RefreshTokenRepository`. These classes may be resolved using Laravel's [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:505 docs/master/passport.md:503
#, no-wrap
msgid "    use Laravel\\Passport\\TokenRepository;\n"
"    use Laravel\\Passport\\RefreshTokenRepository;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:508 docs/master/passport.md:506
#, no-wrap
msgid "    $tokenRepository = app(TokenRepository::class);\n"
"    $refreshTokenRepository = app(RefreshTokenRepository::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:511 docs/master/passport.md:509
#, no-wrap
msgid "    // Revoke an access token...\n"
"    $tokenRepository->revokeAccessToken($tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:514 docs/master/passport.md:512
#, no-wrap
msgid "    // Revoke all of the token's refresh tokens...\n"
"    $refreshTokenRepository->revokeRefreshTokensByAccessTokenId($tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:516 docs/master/passport.md:514
#, no-wrap
msgid "<a name=\"purging-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:516 docs/master/passport.md:514
#, no-wrap
msgid "Purging Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:519 docs/master/passport.md:517
msgid "When tokens have been revoked or expired, you might want to purge them from the database. Passport's included `passport:purge` Artisan command can do this for you:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:522 docs/master/passport.md:520
#, no-wrap
msgid "    # Purge revoked and expired tokens and auth codes...\n"
"    php artisan passport:purge\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:525 docs/master/passport.md:523
#, no-wrap
msgid "    # Only purge revoked tokens and auth codes...\n"
"    php artisan passport:purge --revoked\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:528 docs/master/passport.md:526
#, no-wrap
msgid "    # Only purge expired tokens and auth codes...\n"
"    php artisan passport:purge --expired\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:530 docs/master/passport.md:528
msgid "You may also configure a [scheduled job](/docs/{{version}}/scheduling) in your application's `App\\Console\\Kernel` class to automatically prune your tokens on a schedule:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:541 docs/master/passport.md:539
#, no-wrap
msgid "    /**\n"
"     * Define the application's command schedule.\n"
"     *\n"
"     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"     * @return void\n"
"     */\n"
"    protected function schedule(Schedule $schedule)\n"
"    {\n"
"        $schedule->command('passport:purge')->hourly();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:543 docs/master/passport.md:541
#, no-wrap
msgid "<a name=\"code-grant-pkce\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:543 docs/master/passport.md:541
#, no-wrap
msgid "Authorization Code Grant with PKCE"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:546 docs/master/passport.md:544
msgid "The Authorization Code grant with \"Proof Key for Code Exchange\" (PKCE) is a secure way to authenticate single page applications or native applications to access your API. This grant should be used when you can't guarantee that the client secret will be stored confidentially or in order to mitigate the threat of having the authorization code intercepted by an attacker. A combination of a \"code verifier\" and a \"code challenge\" replaces the client secret when exchanging the authorization code for an access token."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:548 docs/master/passport.md:546
#, no-wrap
msgid "<a name=\"creating-a-auth-pkce-grant-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:548 docs/master/passport.md:546
#, no-wrap
msgid "Creating The Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:551 docs/master/passport.md:549
msgid "Before your application can issue tokens via the authorization code grant with PKCE, you will need to create a PKCE-enabled client. You may do this using the `passport:client` Artisan command with the `--public` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:553 docs/master/passport.md:551
#, no-wrap
msgid "    php artisan passport:client --public\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:555 docs/master/passport.md:553
#, no-wrap
msgid "<a name=\"requesting-auth-pkce-grant-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:558 docs/master/passport.md:556
#, no-wrap
msgid "<a name=\"code-verifier-code-challenge\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:558 docs/master/passport.md:556
#, no-wrap
msgid "Code Verifier & Code Challenge"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:561 docs/master/passport.md:559
msgid "As this authorization grant does not provide a client secret, developers will need to generate a combination of a code verifier and a code challenge in order to request a token."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:563 docs/master/passport.md:561
msgid "The code verifier should be a random string of between 43 and 128 characters containing letters, numbers, and `\"-\"`, `\".\"`, `\"_\"`, `\"~\"` characters, as defined in the [RFC 7636 specification](https://tools.ietf.org/html/rfc7636)."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:565 docs/master/passport.md:563
msgid "The code challenge should be a Base64 encoded string with URL and filename-safe characters. The trailing `'='` characters should be removed and no line breaks, whitespace, or other additional characters should be present."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:567 docs/master/passport.md:565
#, no-wrap
msgid "    $encoded = base64_encode(hash('sha256', $code_verifier, true));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:569 docs/master/passport.md:567
#, no-wrap
msgid "    $codeChallenge = strtr(rtrim($encoded, '='), '+/', '-_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:571 docs/master/passport.md:569
#, no-wrap
msgid "<a name=\"code-grant-pkce-redirecting-for-authorization\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:574 docs/master/passport.md:572
msgid "Once a client has been created, you may use the client ID and the generated code verifier and code challenge to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application's `/oauth/authorize` route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:584 docs/master/passport.md:582
#, no-wrap
msgid "        $request->session()->put(\n"
"            'code_verifier', $code_verifier = Str::random(128)\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:588 docs/master/passport.md:586
#, no-wrap
msgid "        $codeChallenge = strtr(rtrim(\n"
"            base64_encode(hash('sha256', $code_verifier, true))\n"
"        , '='), '+/', '-_');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:598 docs/master/passport.md:596
#, no-wrap
msgid "        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"            'code_challenge' => $codeChallenge,\n"
"            'code_challenge_method' => 'S256',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:603 docs/master/passport.md:601
#, no-wrap
msgid "<a name=\"code-grant-pkce-converting-authorization-codes-to-access-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:606 docs/master/passport.md:604
msgid "If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should verify the `state` parameter against the value that was stored prior to the redirect, as in the standard Authorization Code Grant."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:608 docs/master/passport.md:606
msgid "If the state parameter matches, the consumer should issue a `POST` request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request along with the originally generated code verifier:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:616 docs/master/passport.md:614
#, no-wrap
msgid "        $codeVerifier = $request->session()->pull('code_verifier');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:629 docs/master/passport.md:627
#, no-wrap
msgid "        $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"            'grant_type' => 'authorization_code',\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'code_verifier' => $codeVerifier,\n"
"            'code' => $request->code,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:634 docs/master/passport.md:632
#, no-wrap
msgid "<a name=\"password-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:634 docs/master/passport.md:632
#, no-wrap
msgid "Password Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:637 docs/master/passport.md:635
msgid "The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an email address / username and password. This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:639 docs/master/passport.md:637
#, no-wrap
msgid "<a name=\"creating-a-password-grant-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:639 docs/master/passport.md:637
#, no-wrap
msgid "Creating A Password Grant Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:642 docs/master/passport.md:640
msgid "Before your application can issue tokens via the password grant, you will need to create a password grant client. You may do this using the `passport:client` Artisan command with the `--password` option. **If you have already run the `passport:install` command, you do not need to run this command:**"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:644 docs/master/passport.md:642
#, no-wrap
msgid "    php artisan passport:client --password\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:646 docs/master/passport.md:644
#, no-wrap
msgid "<a name=\"requesting-password-grant-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:649 docs/master/passport.md:647
msgid "Once you have created a password grant client, you may request an access token by issuing a `POST` request to the `/oauth/token` route with the user's email address and password. Remember, this route is already registered by the `Passport::routes` method so there is no need to define it manually. If the request is successful, you will receive an `access_token` and `refresh_token` in the JSON response from the server:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:660 docs/master/passport.md:658
#, no-wrap
msgid "    $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:664 docs/master/passport.md:662
#, no-wrap
msgid "> {tip} Remember, access tokens are long-lived by default. However, you are free to [configure your maximum access token lifetime](#configuration) if needed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:666 docs/master/passport.md:664
#, no-wrap
msgid "<a name=\"requesting-all-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:666 docs/master/passport.md:664
#, no-wrap
msgid "Requesting All Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:669 docs/master/passport.md:667
msgid "When using the password grant or client credentials grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the `*` scope. If you request the `*` scope, the `can` method on the token instance will always return `true`. This scope may only be assigned to a token that is issued using the `password` or `client_credentials` grant:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:680 docs/master/passport.md:678
#, no-wrap
msgid "    $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"        'grant_type' => 'password',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'username' => 'taylor@laravel.com',\n"
"        'password' => 'my-password',\n"
"        'scope' => '*',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:682 docs/master/passport.md:680
#, no-wrap
msgid "<a name=\"customizing-the-user-provider\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:682 docs/master/passport.md:680
#, no-wrap
msgid "Customizing The User Provider"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:685 docs/master/passport.md:683
msgid "If your application uses more than one [authentication user provider](/docs/{{version}}/authentication#introduction), you may specify which user provider the password grant client uses by providing a `--provider` option when creating the client via the `artisan passport:client --password` command. The given provider name should match a valid provider defined in your application's `config/auth.php` configuration file. You can then [protect your route using middleware](#via-middleware) to ensure that only users from the guard's specified provider are authorized."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:687 docs/master/passport.md:685
#, no-wrap
msgid "<a name=\"customizing-the-username-field\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:687 docs/master/passport.md:685
#, no-wrap
msgid "Customizing The Username Field"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:690 docs/master/passport.md:688
msgid "When authenticating using the password grant, Passport will use the `email` attribute of your authenticatable model as the \"username\". However, you may customize this behavior by defining a `findForPassport` method on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:698 docs/master/passport.md:696
#, no-wrap
msgid "    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:702 docs/8.x/passport.md:732
#: docs/master/passport.md:700 docs/master/passport.md:730
#, no-wrap
msgid "    class User extends Authenticatable\n"
"    {\n"
"        use HasApiTokens, Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:714 docs/master/passport.md:712
#, no-wrap
msgid "        /**\n"
"         * Find the user instance for the given username.\n"
"         *\n"
"         * @param  string  $username\n"
"         * @return \\App\\Models\\User\n"
"         */\n"
"        public function findForPassport($username)\n"
"        {\n"
"            return $this->where('username', $username)->first();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:716 docs/master/passport.md:714
#, no-wrap
msgid "<a name=\"customizing-the-password-validation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:716 docs/master/passport.md:714
#, no-wrap
msgid "Customizing The Password Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:719 docs/master/passport.md:717
msgid "When authenticating using the password grant, Passport will use the `password` attribute of your model to validate the given password. If your model does not have a `password` attribute or you wish to customize the password validation logic, you can define a `validateForPassportPasswordGrant` method on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:728 docs/master/passport.md:726
#, no-wrap
msgid "    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Laravel\\Passport\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:744 docs/master/passport.md:742
#, no-wrap
msgid "        /**\n"
"         * Validate the password of the user for the Passport password grant.\n"
"         *\n"
"         * @param  string  $password\n"
"         * @return bool\n"
"         */\n"
"        public function validateForPassportPasswordGrant($password)\n"
"        {\n"
"            return Hash::check($password, $this->password);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:746 docs/master/passport.md:744
#, no-wrap
msgid "<a name=\"implicit-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:746 docs/master/passport.md:744
#, no-wrap
msgid "Implicit Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:749 docs/master/passport.md:747
msgid "The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can't be securely stored. To enable the grant, call the `enableImplicitGrant` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:763 docs/master/passport.md:761
#, no-wrap
msgid "        Passport::enableImplicitGrant();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:765 docs/master/passport.md:763
msgid "Once the grant has been enabled, developers may use their client ID to request an access token from your application. The consuming application should make a redirect request to your application's `/oauth/authorize` route like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:778 docs/master/passport.md:776
#, no-wrap
msgid "        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://third-party-app.com/callback',\n"
"            'response_type' => 'token',\n"
"            'scope' => '',\n"
"            'state' => $state,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:785 docs/master/passport.md:783
#, no-wrap
msgid "<a name=\"client-credentials-grant-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:785 docs/master/passport.md:783
#, no-wrap
msgid "Client Credentials Grant Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:788 docs/master/passport.md:786
msgid "The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled job which is performing maintenance tasks over an API."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:790 docs/master/passport.md:788
msgid "Before your application can issue tokens via the client credentials grant, you will need to create a client credentials grant client. You may do this using the `--client` option of the `passport:client` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:792 docs/master/passport.md:790
#, no-wrap
msgid "    php artisan passport:client --client\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:794 docs/master/passport.md:792
msgid "Next, to use this grant type, you need to add the `CheckClientCredentials` middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:796 docs/master/passport.md:794
#, no-wrap
msgid "    use Laravel\\Passport\\Http\\Middleware\\CheckClientCredentials;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:800 docs/master/passport.md:798
#, no-wrap
msgid "    protected $routeMiddleware = [\n"
"        'client' => CheckClientCredentials::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:802 docs/master/passport.md:800
msgid "Then, attach the middleware to a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:806 docs/master/passport.md:804
#, no-wrap
msgid "    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:808 docs/master/passport.md:806
msgid "To restrict access to the route to specific scopes, you may provide a comma-delimited list of the required scopes when attaching the `client` middleware to the route:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:812 docs/master/passport.md:810
#, no-wrap
msgid "    Route::get('/orders', function (Request $request) {\n"
"        ...\n"
"    })->middleware('client:check-status,your-scope');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:814 docs/master/passport.md:812
#, no-wrap
msgid "<a name=\"retrieving-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:814 docs/master/passport.md:812
#, no-wrap
msgid "Retrieving Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:817 docs/master/passport.md:815
msgid "To retrieve a token using this grant type, make a request to the `oauth/token` endpoint:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:826 docs/master/passport.md:824
#, no-wrap
msgid "    $response = Http::asForm()->post('http://passport-app.com/oauth/token', [\n"
"        'grant_type' => 'client_credentials',\n"
"        'client_id' => 'client-id',\n"
"        'client_secret' => 'client-secret',\n"
"        'scope' => 'your-scope',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:828 docs/master/passport.md:826
#, no-wrap
msgid "    return $response->json()['access_token'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:830 docs/master/passport.md:828
#, no-wrap
msgid "<a name=\"personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:830 docs/master/passport.md:828
#, no-wrap
msgid "Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:833 docs/master/passport.md:831
msgid "Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:835 docs/master/passport.md:833
#, no-wrap
msgid "<a name=\"creating-a-personal-access-client\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:835 docs/master/passport.md:833
#, no-wrap
msgid "Creating A Personal Access Client"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:838 docs/master/passport.md:836
msgid "Before your application can issue personal access tokens, you will need to create a personal access client. You may do this by executing the `passport:client` Artisan command with the `--personal` option. If you have already run the `passport:install` command, you do not need to run this command:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:840 docs/master/passport.md:838
#, no-wrap
msgid "    php artisan passport:client --personal\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:842 docs/master/passport.md:840
msgid "After creating your personal access client, place the client's ID and plain-text secret value in your application's `.env` file:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/passport.md:843 docs/master/passport.md:841
#, no-wrap
msgid "PASSPORT_PERSONAL_ACCESS_CLIENT_ID=\"client-id-value\"\n"
"PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=\"unhashed-client-secret-value\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:849 docs/master/passport.md:847
#, no-wrap
msgid "<a name=\"managing-personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:849 docs/master/passport.md:847
#, no-wrap
msgid "Managing Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:852 docs/master/passport.md:850
msgid "Once you have created a personal access client, you may issue tokens for a given user using the `createToken` method on the `App\\Models\\User` model instance. The `createToken` method accepts the name of the token as its first argument and an optional array of [scopes](#token-scopes) as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:859 docs/master/passport.md:857
#, no-wrap
msgid "    // Creating a token without scopes...\n"
"    $token = $user->createToken('Token Name')->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:862 docs/master/passport.md:860
#, no-wrap
msgid "    // Creating a token with scopes...\n"
"    $token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:864 docs/master/passport.md:862
#, no-wrap
msgid "<a name=\"personal-access-tokens-json-api\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:867 docs/master/passport.md:865
msgid "Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens. For convenience, we'll use [Axios](https://github.com/mzabriskie/axios) to demonstrate making HTTP requests to the endpoints."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:871 docs/master/passport.md:869
#, no-wrap
msgid "<a name=\"get-oauthscopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:871 docs/master/passport.md:869
#, no-wrap
msgid "`GET /oauth/scopes`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:874 docs/master/passport.md:872
msgid "This route returns all of the [scopes](#token-scopes) defined for your application. You may use this route to list the scopes a user may assign to a personal access token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:879 docs/master/passport.md:877
#, no-wrap
msgid "    axios.get('/oauth/scopes')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:881 docs/master/passport.md:879
#, no-wrap
msgid "<a name=\"get-oauthpersonal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:881 docs/master/passport.md:879
#, no-wrap
msgid "`GET /oauth/personal-access-tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:884 docs/master/passport.md:882
msgid "This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing all of the user's tokens so that they may edit or revoke them:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:889 docs/master/passport.md:887
#, no-wrap
msgid "    axios.get('/oauth/personal-access-tokens')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:891 docs/master/passport.md:889
#, no-wrap
msgid "<a name=\"post-oauthpersonal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:891 docs/master/passport.md:889
#, no-wrap
msgid "`POST /oauth/personal-access-tokens`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:894 docs/master/passport.md:892
msgid "This route creates new personal access tokens. It requires two pieces of data: the token's `name` and the `scopes` that should be assigned to the token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:899 docs/master/passport.md:897
#, no-wrap
msgid "    const data = {\n"
"        name: 'Token Name',\n"
"        scopes: []\n"
"    };\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:907 docs/master/passport.md:905
#, no-wrap
msgid "    axios.post('/oauth/personal-access-tokens', data)\n"
"        .then(response => {\n"
"            console.log(response.data.accessToken);\n"
"        })\n"
"        .catch (response => {\n"
"            // List errors on response...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:909 docs/master/passport.md:907
#, no-wrap
msgid "<a name=\"delete-oauthpersonal-access-tokenstoken-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:909 docs/master/passport.md:907
#, no-wrap
msgid "`DELETE /oauth/personal-access-tokens/{token-id}`"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:912 docs/master/passport.md:910
msgid "This route may be used to revoke personal access tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:914 docs/master/passport.md:912
#, no-wrap
msgid "    axios.delete('/oauth/personal-access-tokens/' + tokenId);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:922 docs/master/passport.md:920
msgid "Passport includes an [authentication guard](/docs/{{version}}/authentication#adding-custom-guards) that will validate access tokens on incoming requests. Once you have configured the `api` guard to use the `passport` driver, you only need to specify the `auth:api` middleware on any routes that should require a valid access token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:926 docs/master/passport.md:924
#, no-wrap
msgid "    Route::get('/user', function () {\n"
"        //\n"
"    })->middleware('auth:api');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:928 docs/master/passport.md:926
#, no-wrap
msgid "<a name=\"multiple-authentication-guards\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:928 docs/master/passport.md:926
#, no-wrap
msgid "Multiple Authentication Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:931 docs/master/passport.md:929
msgid "If your application authenticates different types of users that perhaps use entirely different Eloquent models, you will likely need to define a guard configuration for each user provider type in your application. This allows you to protect requests intended for specific user providers. For example, given the following guard configuration the `config/auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:936 docs/master/passport.md:934
#, no-wrap
msgid "    'api' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'users',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:941 docs/master/passport.md:939
#, no-wrap
msgid "    'api-customers' => [\n"
"        'driver' => 'passport',\n"
"        'provider' => 'customers',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:943 docs/master/passport.md:941
msgid "The following route will utilize the `api-customers` guard, which uses the `customers` user provider, to authenticate incoming requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:947 docs/master/passport.md:945
#, no-wrap
msgid "    Route::get('/customer', function () {\n"
"        //\n"
"    })->middleware('auth:api-customers');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:949 docs/master/passport.md:947
#, no-wrap
msgid "> {tip} For more information on using multiple user providers with Passport, please consult the [password grant documentation](#customizing-the-user-provider).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:951 docs/master/passport.md:949
#, no-wrap
msgid "<a name=\"passing-the-access-token\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:951 docs/master/passport.md:949
#, no-wrap
msgid "Passing The Access Token"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:954 docs/master/passport.md:952
msgid "When calling routes that are protected by Passport, your application's API consumers should specify their access token as a `Bearer` token in the `Authorization` header of their request. For example, when using the Guzzle HTTP library:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:961 docs/master/passport.md:959
#, no-wrap
msgid "    $response = Http::withHeaders([\n"
"        'Accept' => 'application/json',\n"
"        'Authorization' => 'Bearer '.$accessToken,\n"
"    ])->get('https://passport-app.com/api/user');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:965 docs/master/passport.md:963
#, no-wrap
msgid "<a name=\"token-scopes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:965 docs/master/passport.md:963
#, no-wrap
msgid "Token Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:968 docs/master/passport.md:966
msgid "Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application's users to limit the actions a third-party application can perform on their behalf."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:970 docs/master/passport.md:968
#, no-wrap
msgid "<a name=\"defining-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:970 docs/master/passport.md:968
#, no-wrap
msgid "Defining Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:973 docs/master/passport.md:971
msgid "You may define your API's scopes using the `Passport::tokensCan` method in the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class. The `tokensCan` method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:990 docs/master/passport.md:988
#, no-wrap
msgid "        Passport::tokensCan([\n"
"            'place-orders' => 'Place orders',\n"
"            'check-status' => 'Check order status',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:992 docs/master/passport.md:990
#, no-wrap
msgid "<a name=\"default-scope\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:992 docs/master/passport.md:990
#, no-wrap
msgid "Default Scope"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:995 docs/master/passport.md:993
msgid "If a client does not request any specific scopes, you may configure your Passport server to attach default scope(s) to the token using the `setDefaultScope` method. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1002 docs/master/passport.md:1000
#, no-wrap
msgid "    Passport::tokensCan([\n"
"        'place-orders' => 'Place orders',\n"
"        'check-status' => 'Check order status',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1007 docs/master/passport.md:1005
#, no-wrap
msgid "    Passport::setDefaultScope([\n"
"        'check-status',\n"
"        'place-orders',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1009 docs/master/passport.md:1007
#, no-wrap
msgid "<a name=\"assigning-scopes-to-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:1009 docs/master/passport.md:1007
#, no-wrap
msgid "Assigning Scopes To Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1012 docs/master/passport.md:1010
#, no-wrap
msgid "<a name=\"when-requesting-authorization-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1012 docs/master/passport.md:1010
#, no-wrap
msgid "When Requesting Authorization Codes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1015 docs/master/passport.md:1013
msgid "When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the `scope` query string parameter. The `scope` parameter should be a space-delimited list of scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1023 docs/master/passport.md:1021
#, no-wrap
msgid "    Route::get('/redirect', function () {\n"
"        $query = http_build_query([\n"
"            'client_id' => 'client-id',\n"
"            'redirect_uri' => 'http://example.com/callback',\n"
"            'response_type' => 'code',\n"
"            'scope' => 'place-orders check-status',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1028 docs/master/passport.md:1026
#, no-wrap
msgid "<a name=\"when-issuing-personal-access-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1028 docs/master/passport.md:1026
#, no-wrap
msgid "When Issuing Personal Access Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1031 docs/master/passport.md:1029
msgid "If you are issuing personal access tokens using the `App\\Models\\User` model's `createToken` method, you may pass the array of desired scopes as the second argument to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1033 docs/master/passport.md:1031
#, no-wrap
msgid "    $token = $user->createToken('My Token', ['place-orders'])->accessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1035 docs/master/passport.md:1033
#, no-wrap
msgid "<a name=\"checking-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passport.md:1035 docs/master/passport.md:1033
#, no-wrap
msgid "Checking Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1038 docs/master/passport.md:1036
msgid "Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the `$routeMiddleware` property of your `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1041 docs/master/passport.md:1039
#, no-wrap
msgid "    'scopes' => \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::class,\n"
"    'scope' => \\Laravel\\Passport\\Http\\Middleware\\CheckForAnyScope::class,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1043 docs/master/passport.md:1041
#, no-wrap
msgid "<a name=\"check-for-all-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1043 docs/master/passport.md:1041
#, no-wrap
msgid "Check For All Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1046 docs/master/passport.md:1044
msgid "The `scopes` middleware may be assigned to a route to verify that the incoming request's access token has all of the listed scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1050 docs/master/passport.md:1048
#, no-wrap
msgid "    Route::get('/orders', function () {\n"
"        // Access token has both \"check-status\" and \"place-orders\" scopes...\n"
"    })->middleware(['auth:api', 'scopes:check-status,place-orders']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1052 docs/master/passport.md:1050
#, no-wrap
msgid "<a name=\"check-for-any-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1052 docs/master/passport.md:1050
#, no-wrap
msgid "Check For Any Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1055 docs/master/passport.md:1053
msgid "The `scope` middleware may be assigned to a route to verify that the incoming request's access token has *at least one* of the listed scopes:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1059 docs/master/passport.md:1057
#, no-wrap
msgid "    Route::get('/orders', function () {\n"
"        // Access token has either \"check-status\" or \"place-orders\" scope...\n"
"    })->middleware(['auth:api', 'scope:check-status,place-orders']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1061 docs/master/passport.md:1059
#, no-wrap
msgid "<a name=\"checking-scopes-on-a-token-instance\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1061 docs/master/passport.md:1059
#, no-wrap
msgid "Checking Scopes On A Token Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1064 docs/master/passport.md:1062
msgid "Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the `tokenCan` method on the authenticated `App\\Models\\User` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1072 docs/master/passport.md:1070
#, no-wrap
msgid "    Route::get('/orders', function (Request $request) {\n"
"        if ($request->user()->tokenCan('place-orders')) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1074 docs/master/passport.md:1072
#, no-wrap
msgid "<a name=\"additional-scope-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1074 docs/master/passport.md:1072
#, no-wrap
msgid "Additional Scope Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1077 docs/master/passport.md:1075
msgid "The `scopeIds` method will return an array of all defined IDs / names:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1081 docs/master/passport.md:1079
#, no-wrap
msgid "    Passport::scopeIds();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1083 docs/master/passport.md:1081
msgid "The `scopes` method will return an array of all defined scopes as instances of `Laravel\\Passport\\Scope`:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1085 docs/master/passport.md:1083
#, no-wrap
msgid "    Passport::scopes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1087 docs/master/passport.md:1085
msgid "The `scopesFor` method will return an array of `Laravel\\Passport\\Scope` instances matching the given IDs / names:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1089 docs/master/passport.md:1087
#, no-wrap
msgid "    Passport::scopesFor(['place-orders', 'check-status']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1091 docs/master/passport.md:1089
msgid "You may determine if a given scope has been defined using the `hasScope` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1093 docs/master/passport.md:1091
#, no-wrap
msgid "    Passport::hasScope('place-orders');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1095 docs/master/passport.md:1093
#, no-wrap
msgid "<a name=\"consuming-your-api-with-javascript\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passport.md:1095 docs/master/passport.md:1093
#, no-wrap
msgid "Consuming Your API With JavaScript"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1098 docs/master/passport.md:1096
msgid "When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1100 docs/master/passport.md:1098
msgid "Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is add the `CreateFreshApiToken` middleware to your `web` middleware group in your `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1105 docs/master/passport.md:1103
#, no-wrap
msgid "    'web' => [\n"
"        // Other middleware...\n"
"        \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1107 docs/master/passport.md:1105
#, no-wrap
msgid "> {note} You should ensure that the `CreateFreshApiToken` middleware is the last middleware listed in your middleware stack.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1109 docs/master/passport.md:1107
msgid "This middleware will attach a `laravel_token` cookie to your outgoing responses. This cookie contains an encrypted JWT that Passport will use to authenticate API requests from your JavaScript application. The JWT has a lifetime equal to your `session.lifetime` configuration value. Now, since the browser will automatically send the cookie with all subsequent requests, you may make requests to your application's API without explicitly passing an access token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1114 docs/master/passport.md:1112
#, no-wrap
msgid "    axios.get('/api/user')\n"
"        .then(response => {\n"
"            console.log(response.data);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1116 docs/master/passport.md:1114
#, no-wrap
msgid "<a name=\"customizing-the-cookie-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passport.md:1116 docs/master/passport.md:1114
#, no-wrap
msgid "Customizing The Cookie Name"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1119 docs/master/passport.md:1117
msgid "If needed, you can customize the `laravel_token` cookie's name using the `Passport::cookie` method. Typically, this method should be called from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1133 docs/master/passport.md:1131
#, no-wrap
msgid "        Passport::cookie('custom_name');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1135 docs/8.x/routing.md:86 docs/8.x/sanctum.md:252
#: docs/master/passport.md:1133 docs/master/routing.md:86
#: docs/master/sanctum.md:252
#, no-wrap
msgid "<a name=\"csrf-protection\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1138 docs/master/passport.md:1136
msgid "When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted `XSRF-TOKEN` cookie value to send an `X-XSRF-TOKEN` header on same-origin requests."
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1140 docs/master/passport.md:1138
#, no-wrap
msgid "> {tip} If you choose to send the `X-CSRF-TOKEN` header instead of `X-XSRF-TOKEN`, you will need to use the unencrypted token provided by `csrf_token()`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1145 docs/master/passport.md:1143
msgid "Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens in your database. If you would like, you may attach listeners to these events in your application's `App\\Providers\\EventServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1155 docs/master/passport.md:1153
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Laravel\\Passport\\Events\\AccessTokenCreated' => [\n"
"            'App\\Listeners\\RevokeOldTokens',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1160 docs/master/passport.md:1158
#, no-wrap
msgid "        'Laravel\\Passport\\Events\\RefreshTokenCreated' => [\n"
"            'App\\Listeners\\PruneOldTokens',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1165 docs/master/passport.md:1163
msgid "Passport's `actingAs` method may be used to specify the currently authenticated user as well as its scopes. The first argument given to the `actingAs` method is the user instance and the second is an array of scopes that should be granted to the user's token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1168 docs/master/passport.md:1166
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1175 docs/master/passport.md:1173
#, no-wrap
msgid "    public function test_servers_can_be_created()\n"
"    {\n"
"        Passport::actingAs(\n"
"            User::factory()->create(),\n"
"            ['create-servers']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1177 docs/master/passport.md:1175
#, no-wrap
msgid "        $response = $this->post('/api/create-server');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1180 docs/master/passport.md:1178
#, no-wrap
msgid "        $response->assertStatus(201);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1182 docs/master/passport.md:1180
msgid "Passport's `actingAsClient` method may be used to specify the currently authenticated client as well as its scopes. The first argument given to the `actingAsClient` method is the client instance and the second is an array of scopes that should be granted to the client's token:"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1185 docs/master/passport.md:1183
#, no-wrap
msgid "    use Laravel\\Passport\\Client;\n"
"    use Laravel\\Passport\\Passport;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1192 docs/master/passport.md:1190
#, no-wrap
msgid "    public function test_orders_can_be_retrieved()\n"
"    {\n"
"        Passport::actingAsClient(\n"
"            Client::factory()->create(),\n"
"            ['check-status']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1194 docs/master/passport.md:1192
#, no-wrap
msgid "        $response = $this->get('/api/orders');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passport.md:1196 docs/master/passport.md:1194
#, no-wrap
msgid "        $response->assertStatus(200);\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/passwords.md:1 docs/master/passwords.md:1
#, no-wrap
msgid "Resetting Passwords"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passwords.md:11 docs/8.x/verification.md:13
#: docs/master/passwords.md:10 docs/master/verification.md:13
msgid "[Model Preparation](#model-preparation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passwords.md:11 docs/8.x/verification.md:13
#: docs/master/passwords.md:10 docs/master/verification.md:13
msgid "[Database Preparation](#database-preparation)"
msgstr ""

#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  requests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/passwords.md:11 docs/8.x/requests.md:22
msgid "[Configuring Trusted Hosts](#configuring-trusted-hosts)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/passwords.md:11 docs/master/passwords.md:10
msgid "[Requesting The Password Reset Link](#requesting-the-password-reset-link)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/passwords.md:11 docs/master/passwords.md:10
msgid "[Customization](#password-customization)"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:16 docs/master/passwords.md:15
msgid "Most web applications provide a way for users to reset their forgotten passwords. Rather than forcing you to re-implement this by hand for every application you create, Laravel provides convenient services for sending password reset links and secure resetting passwords."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:18 docs/master/passwords.md:17
#, no-wrap
msgid "> {tip} Want to get started fast? Install a Laravel [application starter kit](/docs/{{version}}/starter-kits) in a fresh Laravel application. Laravel's starter kits will take care of scaffolding your entire authentication system, including resetting forgotten passwords.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:20 docs/8.x/verification.md:22
#: docs/master/passwords.md:19 docs/master/verification.md:22
#, no-wrap
msgid "<a name=\"model-preparation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passwords.md:20 docs/8.x/verification.md:22
#: docs/master/passwords.md:19 docs/master/verification.md:22
#, no-wrap
msgid "Model Preparation"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:23 docs/master/passwords.md:22
msgid "Before using the password reset features of Laravel, your application's `App\\Models\\User` model must use the `Illuminate\\Notifications\\Notifiable` trait. Typically, this trait is already included on the default `App\\Models\\User` model that is created with new Laravel applications."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:25 docs/master/passwords.md:24
msgid "Next, verify that your `App\\Models\\User` model implements the `Illuminate\\Contracts\\Auth\\CanResetPassword` contract. The `App\\Models\\User` model included with the framework already implements this interface, and uses the `Illuminate\\Auth\\Passwords\\CanResetPassword` trait to include the methods needed to implement the interface."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:27 docs/8.x/verification.md:50
#: docs/master/passwords.md:26 docs/master/verification.md:50
#, no-wrap
msgid "<a name=\"database-preparation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passwords.md:27 docs/8.x/verification.md:50
#: docs/master/passwords.md:26 docs/master/verification.md:50
#, no-wrap
msgid "Database Preparation"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:30 docs/master/passwords.md:29
msgid "A table must be created to store your application's password reset tokens. The migration for this table is included in the default Laravel application, so you only need to migrate your database to create this table:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:34 docs/8.x/requests.md:518
#, no-wrap
msgid "<a name=\"configuring-trusted-hosts\"></a>\n"
msgstr ""

#. #-#-#-#-#  passwords.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  requests.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/passwords.md:34 docs/8.x/requests.md:518
#, no-wrap
msgid "Configuring Trusted Hosts"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:37 docs/8.x/requests.md:521
msgid "By default, Laravel will respond to all requests it receives regardless of the content of the HTTP request's `Host` header. In addition, the `Host` header's value will be used when generating absolute URLs to your application during a web request."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:39
msgid "Typically, you should configure your web server, such as Nginx or Apache, to only send requests to your application that match a given host name. However, if you do not have the ability to customize your web server directly and need to instruct Laravel to only respond to certain host names, you may do so by enabling the `App\\Http\\Middleware\\TrustHosts` middleware for your application. This is particular important when your application offers password reset functionality."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:41
msgid "To learn more about this middleware, please consult the [`TrustHosts` middleware documentation](/docs/{{version}}/requests#configuring-trusted-hosts)."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:46 docs/master/passwords.md:36
msgid "To properly implement support for allowing users to reset their passwords, we will need to define several routes. First, we will need a pair of routes to handle allowing the user to request a password reset link via their email address. Second, we will need a pair of routes to handle actually resetting the password once the user visits the password reset link that is emailed to them and completes the password reset form."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:48 docs/master/passwords.md:38
#, no-wrap
msgid "<a name=\"requesting-the-password-reset-link\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/passwords.md:48 docs/master/passwords.md:38
#, no-wrap
msgid "Requesting The Password Reset Link"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:51 docs/master/passwords.md:41
#, no-wrap
msgid "<a name=\"the-password-reset-link-request-form\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passwords.md:51 docs/master/passwords.md:41
#, no-wrap
msgid "The Password Reset Link Request Form"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:54 docs/master/passwords.md:44
msgid "First, we will define the routes that are needed to request password reset links. To get started, we will define a route that returns a view with the password reset link request form:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:58 docs/master/passwords.md:48
#, no-wrap
msgid "    Route::get('/forgot-password', function () {\n"
"        return view('auth.forgot-password');\n"
"    })->middleware('guest')->name('password.request');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:60 docs/master/passwords.md:50
msgid "The view that is returned by this route should have a form containing an `email` field, which will allow the user to request a password reset link for a given email address."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:62 docs/master/passwords.md:52
#, no-wrap
msgid "<a name=\"password-reset-link-handling-the-form-submission\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passwords.md:62 docs/8.x/passwords.md:104
#: docs/master/passwords.md:52 docs/master/passwords.md:94
#, no-wrap
msgid "Handling The Form Submission"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:65 docs/master/passwords.md:55
msgid "Next, we will define a route that handles the form submission request from the \"forgot password\" view. This route will be responsible for validating the email address and sending the password reset request to the corresponding user:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:68 docs/master/passwords.md:58
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Password;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:71 docs/master/passwords.md:61
#, no-wrap
msgid "    Route::post('/forgot-password', function (Request $request) {\n"
"        $request->validate(['email' => 'required|email']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:75 docs/master/passwords.md:65
#, no-wrap
msgid "        $status = Password::sendResetLink(\n"
"            $request->only('email')\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:80 docs/master/passwords.md:70
#, no-wrap
msgid "        return $status === Password::RESET_LINK_SENT\n"
"                    ? back()->with(['status' => __($status)])\n"
"                    : back()->withErrors(['email' => __($status)]);\n"
"    })->middleware('guest')->name('password.email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:82 docs/master/passwords.md:72
msgid "Before moving on, let's examine this route in more detail. First, the request's `email` attribute is validated. Next, we will use Laravel's built-in \"password broker\" (via the `Password` facade) to send a password reset link to the user. The password broker will take care of retrieving the user by the given field (in this case, the email address) and sending the user a password reset link via Laravel's built-in [notification system](/docs/{{version}}/notifications)."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:84 docs/master/passwords.md:74
msgid "The `sendResetLink` method returns a \"status\" slug. This status may be translated using Laravel's [localization](/docs/{{version}}/localization) helpers in order to display a user-friendly message to the user regarding the status of their request. The translation of the password reset status is determined by your application's `resources/lang/{lang}/passwords.php` language file. An entry for each possible value of the status slug is located within the `passwords` language file."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:86
msgid "You may be wondering how Laravel knows how to retrieve the user record from your application's database when calling the `Password` facade's `sendResetLink` method. The Laravel password broker utilizes your authentication system's \"user providers\" to retrieve database records. The user provider used by the password broker is configured within the `passwords` configuration array of your `config/auth.php` configuration file. To learn more about writing custom user providers, consult the [authentication documentation](/docs/{{version}}/authentication#adding-custom-user-providers)."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:88 docs/master/passwords.md:78
#, no-wrap
msgid "> {tip} When manually implementing password resets, you are required to define the contents of the views and routes yourself. If you would like scaffolding that includes all necessary authentication and verification logic, check out the [Laravel application starter kits](/docs/{{version}}/starter-kits).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:93 docs/master/passwords.md:83
#, no-wrap
msgid "<a name=\"the-password-reset-form\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passwords.md:93 docs/master/passwords.md:83
#, no-wrap
msgid "The Password Reset Form"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:96 docs/master/passwords.md:86
msgid "Next, we will define the routes necessary to actually reset the password once the user clicks on the password reset link that has been emailed to them and provides a new password. First, let's define the route that will display the reset password form that is displayed when the user clicks the reset password link. This route will receive a `token` parameter that we will use later to verify the password reset request:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:100 docs/master/passwords.md:90
#, no-wrap
msgid "    Route::get('/reset-password/{token}', function ($token) {\n"
"        return view('auth.reset-password', ['token' => $token]);\n"
"    })->middleware('guest')->name('password.reset');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:102 docs/master/passwords.md:92
msgid "The view that is returned by this route should display a form containing an `email` field, a `password` field, a `password_confirmation` field, and a hidden `token` field, which should contain the value of the secret `$token` received by our route."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:104 docs/master/passwords.md:94
#, no-wrap
msgid "<a name=\"password-reset-handling-the-form-submission\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:107 docs/master/passwords.md:97
msgid "Of course, we need to define a route to actually handle the password reset form submission. This route will be responsible for validating the incoming request and updating the user's password in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:113 docs/master/passwords.md:103
#, no-wrap
msgid "    use Illuminate\\Auth\\Events\\PasswordReset;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Facades\\Password;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:120 docs/master/passwords.md:110
#, no-wrap
msgid "    Route::post('/reset-password', function (Request $request) {\n"
"        $request->validate([\n"
"            'token' => 'required',\n"
"            'email' => 'required|email',\n"
"            'password' => 'required|min:8|confirmed',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:127
#, no-wrap
msgid "        $status = Password::reset(\n"
"            $request->only('email', 'password', 'password_confirmation', 'token'),\n"
"            function ($user, $password) use ($request) {\n"
"                $user->forceFill([\n"
"                    'password' => Hash::make($password)\n"
"                ])->setRememberToken(Str::random(60));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:129
#, no-wrap
msgid "                $user->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:133 docs/master/passwords.md:123
#, no-wrap
msgid "                event(new PasswordReset($user));\n"
"            }\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:138 docs/master/passwords.md:128
#, no-wrap
msgid "        return $status == Password::PASSWORD_RESET\n"
"                    ? redirect()->route('login')->with('status', __($status))\n"
"                    : back()->withErrors(['email' => [__($status)]]);\n"
"    })->middleware('guest')->name('password.update');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:140 docs/master/passwords.md:130
msgid "Before moving on, let's examine this route in more detail. First, the request's `token`, `email`, and `password` attributes are validated. Next, we will use Laravel's built-in \"password broker\" (via the `Password` facade) to validate the password reset request credentials."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:142 docs/master/passwords.md:132
msgid "If the token, email address, and password given to the password broker are valid, the closure passed to the `reset` method will be invoked. Within this closure, which receives the user instance and the plain-text password provided to the password reset form, we may update the user's password in the database."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:144 docs/master/passwords.md:134
msgid "The `reset` method returns a \"status\" slug. This status may be translated using Laravel's [localization](/docs/{{version}}/localization) helpers in order to display a user-friendly message to the user regarding the status of their request. The translation of the password reset status is determined by your application's `resources/lang/{lang}/passwords.php` language file. An entry for each possible value of the status slug is located within the `passwords` language file."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:146
msgid "Before moving on, you may be wondering how Laravel knows how to retrieve the user record from your application's database when calling the `Password` facade's `reset` method. The Laravel password broker utilizes your authentication system's \"user providers\" to retrieve database records. The user provider used by the password broker is configured within the `passwords` configuration array of your `config/auth.php` configuration file. To learn more about writing custom user providers, consult the [authentication documentation](/docs/{{version}}/authentication#adding-custom-user-providers)."
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:148 docs/master/passwords.md:138
#, no-wrap
msgid "<a name=\"password-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/passwords.md:148 docs/8.x/sail.md:302 docs/8.x/verification.md:121
#: docs/master/passwords.md:138 docs/master/sail.md:294
#: docs/master/verification.md:121
#, no-wrap
msgid "Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:151 docs/master/passwords.md:141
#, no-wrap
msgid "<a name=\"reset-link-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passwords.md:151 docs/master/passwords.md:141
#, no-wrap
msgid "Reset Link Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:154 docs/master/passwords.md:144
msgid "You may customize the password reset link URL using the `createUrlUsing` method provided by the `ResetPassword` notification class. This method accepts a closure which receives the user instance that is receiving the notification as well as the password reset link token. Typically, you should call this method from your `App\\Providers\\AuthServiceProvider` service provider's `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:156 docs/master/passwords.md:146
#, no-wrap
msgid "    use Illuminate\\Auth\\Notifications\\ResetPassword;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:170 docs/master/passwords.md:160
#, no-wrap
msgid "        ResetPassword::createUrlUsing(function ($user, string $token) {\n"
"            return 'https://example.com/reset-password?token='.$token;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:172 docs/master/passwords.md:162
#, no-wrap
msgid "<a name=\"reset-email-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/passwords.md:172 docs/master/passwords.md:162
#, no-wrap
msgid "Reset Email Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:175 docs/master/passwords.md:165
msgid "You may easily modify the notification class used to send the password reset link to the user. To get started, override the `sendPasswordResetNotification` method on your `App\\Models\\User` model. Within this method, you may send the notification using any [notification class](/docs/{{version}}/notifications) of your own creation. The password reset `$token` is the first argument received by the method. You may use this `$token` to build the password reset URL of your choice and send your notification to the user:"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:177 docs/master/passwords.md:167
#, no-wrap
msgid "    use App\\Notifications\\ResetPasswordNotification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:187 docs/master/passwords.md:177
#, no-wrap
msgid "    /**\n"
"     * Send a password reset notification to the user.\n"
"     *\n"
"     * @param  string  $token\n"
"     * @return void\n"
"     */\n"
"    public function sendPasswordResetNotification($token)\n"
"    {\n"
"        $url = 'https://example.com/reset-password?token='.$token;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/passwords.md:189 docs/master/passwords.md:179
#, no-wrap
msgid "        $this->notify(new ResetPasswordNotification($url));\n"
"    }\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/providers.md:9 docs/master/providers.md:9
msgid "[Writing Service Providers](#writing-service-providers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/providers.md:9 docs/master/providers.md:9
msgid "[The Register Method](#the-register-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/providers.md:9 docs/master/providers.md:9
msgid "[The Boot Method](#the-boot-method)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/providers.md:9 docs/master/providers.md:9
msgid "[Registering Providers](#registering-providers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/providers.md:9 docs/master/providers.md:9
msgid "[Deferred Providers](#deferred-providers)"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:14 docs/master/providers.md:14
msgid "Service providers are the central place of all Laravel application bootstrapping. Your own application, as well as all of Laravel's core services, are bootstrapped via service providers."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:16 docs/master/providers.md:16
msgid "But, what do we mean by \"bootstrapped\"? In general, we mean **registering** things, including registering service container bindings, event listeners, middleware, and even routes. Service providers are the central place to configure your application."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:18 docs/master/providers.md:18
msgid "If you open the `config/app.php` file included with Laravel, you will see a `providers` array. These are all of the service provider classes that will be loaded for your application. By default, a set of Laravel core service providers are listed in this array. These providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others. Many of these providers are \"deferred\" providers, meaning they will not be loaded on every request, but only when the services they provide are actually needed."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:20 docs/master/providers.md:20
msgid "In this overview, you will learn how to write your own service providers and register them with your Laravel application."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:22 docs/master/providers.md:22
#, no-wrap
msgid "> {tip} If you would like to learn more about how Laravel handles requests and works internally, check out our documentation on the Laravel [request lifecycle](/docs/{{version}}/lifecycle).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:24 docs/master/providers.md:24
#, no-wrap
msgid "<a name=\"writing-service-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/providers.md:24 docs/master/providers.md:24
#, no-wrap
msgid "Writing Service Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:27 docs/master/providers.md:27
msgid "All service providers extend the `Illuminate\\Support\\ServiceProvider` class. Most service providers contain a `register` and a `boot` method. Within the `register` method, you should **only bind things into the [service container](/docs/{{version}}/container)**. You should never attempt to register any event listeners, routes, or any other piece of functionality within the `register` method."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:29 docs/master/providers.md:29
msgid "The Artisan CLI can generate a new provider via the `make:provider` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:31 docs/master/providers.md:31
#, no-wrap
msgid "    php artisan make:provider RiakServiceProvider\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:33 docs/master/providers.md:33
#, no-wrap
msgid "<a name=\"the-register-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/providers.md:33 docs/master/providers.md:33
#, no-wrap
msgid "The Register Method"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:36 docs/master/providers.md:36
msgid "As mentioned previously, within the `register` method, you should only bind things into the [service container](/docs/{{version}}/container). You should never attempt to register any event listeners, routes, or any other piece of functionality within the `register` method. Otherwise, you may accidentally use a service that is provided by a service provider which has not loaded yet."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:38 docs/master/providers.md:38
msgid "Let's take a look at a basic service provider. Within any of your service provider methods, you always have access to the `$app` property which provides access to the service container:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:45 docs/master/providers.md:45
#, no-wrap
msgid "    use App\\Services\\Riak\\Connection;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:60 docs/master/providers.md:60
#, no-wrap
msgid "    class RiakServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            $this->app->singleton(Connection::class, function ($app) {\n"
"                return new Connection(config('riak'));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:62 docs/master/providers.md:62
msgid "This service provider only defines a `register` method, and uses that method to define an implementation of `App\\Services\\Riak\\Connection` in the service container. If you're not yet familiar with Laravel's service container, check out [its documentation](/docs/{{version}}/container)."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:64 docs/master/providers.md:64
#, no-wrap
msgid "<a name=\"the-bindings-and-singletons-properties\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/providers.md:64 docs/master/providers.md:64
#, no-wrap
msgid "The `bindings` And `singletons` Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:67 docs/master/providers.md:67
msgid "If your service provider registers many simple bindings, you may wish to use the `bindings` and `singletons` properties instead of manually registering each container binding. When the service provider is loaded by the framework, it will automatically check for these properties and register their bindings:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:78 docs/master/providers.md:78
#, no-wrap
msgid "    use App\\Contracts\\DowntimeNotifier;\n"
"    use App\\Contracts\\ServerProvider;\n"
"    use App\\Services\\DigitalOceanServerProvider;\n"
"    use App\\Services\\PingdomDowntimeNotifier;\n"
"    use App\\Services\\ServerToolsProvider;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:89 docs/master/providers.md:89
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * All of the container bindings that should be registered.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        public $bindings = [\n"
"            ServerProvider::class => DigitalOceanServerProvider::class,\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:100 docs/master/providers.md:100
#, no-wrap
msgid "        /**\n"
"         * All of the container singletons that should be registered.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        public $singletons = [\n"
"            DowntimeNotifier::class => PingdomDowntimeNotifier::class,\n"
"            ServerProvider::class => ServerToolsProvider::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:102 docs/master/providers.md:102
#, no-wrap
msgid "<a name=\"the-boot-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/providers.md:102 docs/master/providers.md:102
#, no-wrap
msgid "The Boot Method"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:105 docs/master/providers.md:105
msgid "So, what if we need to register a [view composer](/docs/{{version}}/views#view-composers) within our service provider? This should be done within the `boot` method. **This method is called after all other service providers have been registered**, meaning you have access to all other services that have been registered by the framework:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:112 docs/master/providers.md:112
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:127 docs/master/providers.md:127
#, no-wrap
msgid "    class ComposerServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::composer('view', function () {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:129 docs/master/providers.md:129
#, no-wrap
msgid "<a name=\"boot-method-dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/providers.md:129 docs/master/providers.md:129
#, no-wrap
msgid "Boot Method Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:132 docs/master/providers.md:132
msgid "You may type-hint dependencies for your service provider's `boot` method. The [service container](/docs/{{version}}/container) will automatically inject any dependencies you need:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:134 docs/master/providers.md:134
#, no-wrap
msgid "    use Illuminate\\Contracts\\Routing\\ResponseFactory;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:147
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @param  \\Illuminate\\Contracts\\Routing\\ResponseFactory  $response\n"
"     * @return void\n"
"     */\n"
"    public function boot(ResponseFactory $response)\n"
"    {\n"
"        $response->macro('serialized', function ($value) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:149 docs/master/providers.md:149
#, no-wrap
msgid "<a name=\"registering-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/providers.md:149 docs/master/providers.md:149
#, no-wrap
msgid "Registering Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:152 docs/master/providers.md:152
msgid "All service providers are registered in the `config/app.php` configuration file. This file contains a `providers` array where you can list the class names of your service providers. By default, a set of Laravel core service providers are listed in this array. These providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:154 docs/master/providers.md:154
msgid "To register your provider, add it to the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:157 docs/master/providers.md:157
#, no-wrap
msgid "    'providers' => [\n"
"        // Other Service Providers\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:160 docs/master/providers.md:160
#, no-wrap
msgid "        App\\Providers\\ComposerServiceProvider::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:162 docs/master/providers.md:162
#, no-wrap
msgid "<a name=\"deferred-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/providers.md:162 docs/master/providers.md:162
#, no-wrap
msgid "Deferred Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:165 docs/master/providers.md:165
msgid "If your provider is **only** registering bindings in the [service container](/docs/{{version}}/container), you may choose to defer its registration until one of the registered bindings is actually needed. Deferring the loading of such a provider will improve the performance of your application, since it is not loaded from the filesystem on every request."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:167 docs/master/providers.md:167
msgid "Laravel compiles and stores a list of all of the services supplied by deferred service providers, along with the name of its service provider class. Then, only when you attempt to resolve one of these services does Laravel load the service provider."
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:169 docs/master/providers.md:169
msgid "To defer the loading of a provider, implement the `\\Illuminate\\Contracts\\Support\\DeferrableProvider` interface and define a `provides` method. The `provides` method should return the service container bindings registered by the provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:177 docs/master/providers.md:177
#, no-wrap
msgid "    use App\\Services\\Riak\\Connection;\n"
"    use Illuminate\\Contracts\\Support\\DeferrableProvider;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:191 docs/master/providers.md:191
#, no-wrap
msgid "    class RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            $this->app->singleton(Connection::class, function ($app) {\n"
"                return new Connection($app['config']['riak']);\n"
"            });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/providers.md:201 docs/master/providers.md:201
#, no-wrap
msgid "        /**\n"
"         * Get the services provided by the provider.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function provides()\n"
"        {\n"
"            return [Connection::class];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/queries.md:1 docs/master/queries.md:1
#, no-wrap
msgid "Database: Query Builder"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Running Database Queries](#running-database-queries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Aggregates](#aggregates)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Select Statements](#select-statements)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Raw Expressions](#raw-expressions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Joins](#joins)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Unions](#unions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Basic Where Clauses](#basic-where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/8.x/scout.md:26 docs/master/queries.md:33
#: docs/master/scout.md:26
msgid "[Where Clauses](#where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Or Where Clauses](#or-where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[JSON Where Clauses](#json-where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Additional Where Clauses](#additional-where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Logical Grouping](#logical-grouping)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Advanced Where Clauses](#advanced-where-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Where Exists Clauses](#where-exists-clauses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Subquery Where Clauses](#subquery-where-clauses)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Ordering, Grouping, Limit & Offset](#ordering-grouping-limit-and-offset)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Ordering](#ordering)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Grouping](#grouping)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Limit & Offset](#limit-and-offset)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Conditional Clauses](#conditional-clauses)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Insert Statements](#insert-statements)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Update Statements](#update-statements)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Updating JSON Columns](#updating-json-columns)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Increment & Decrement](#increment-and-decrement)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Delete Statements](#delete-statements)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Pessimistic Locking](#pessimistic-locking)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queries.md:33 docs/master/queries.md:33
msgid "[Debugging](#debugging)"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:38 docs/master/queries.md:38
msgid "Laravel's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application and works perfectly with all of Laravel's supported database systems."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:40 docs/master/queries.md:40
msgid "The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:42 docs/master/queries.md:42
#, no-wrap
msgid "> {note} PDO does not support binding column names. Therefore, you should never allow user input to dictate the column names referenced by your queries, including \"order by\" columns.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:44 docs/master/queries.md:44
#, no-wrap
msgid "<a name=\"running-database-queries\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:44 docs/master/queries.md:44
#, no-wrap
msgid "Running Database Queries"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:47 docs/master/queries.md:47
#, no-wrap
msgid "<a name=\"retrieving-all-rows-from-a-table\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:47 docs/master/queries.md:47
#, no-wrap
msgid "Retrieving All Rows From A Table"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:50 docs/master/queries.md:50
msgid "You may use the `table` method provided by the `DB` facade to begin a query. The `table` method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:68 docs/master/queries.md:68
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all of the application's users.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $users = DB::table('users')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:74
msgid "The `get` method returns an `Illuminate\\Support\\Collection` instance containing the results of the query where each result is an instance of the PHP `stdClass` object. You may access each column's value by accessing the column as a property of the object:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:78 docs/master/queries.md:78
#, no-wrap
msgid "    $users = DB::table('users')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:84 docs/master/queries.md:84
#, no-wrap
msgid "> {tip} Laravel collections provide a variety of extremely powerful methods for mapping and reducing data. For more information on Laravel collections, check out the [collection documentation](/docs/{{version}}/collections).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:86 docs/master/queries.md:86
#, no-wrap
msgid "<a name=\"retrieving-a-single-row-column-from-a-table\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:86 docs/master/queries.md:86
#, no-wrap
msgid "Retrieving A Single Row / Column From A Table"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:89 docs/master/queries.md:89
msgid "If you just need to retrieve a single row from a database table, you may use the `DB` facade's `first` method. This method will return a single `stdClass` object:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:91 docs/master/queries.md:91
#, no-wrap
msgid "    $user = DB::table('users')->where('name', 'John')->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:93 docs/master/queries.md:93
#, no-wrap
msgid "    return $user->email;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:95 docs/master/queries.md:95
msgid "If you don't need an entire row, you may extract a single value from a record using the `value` method. This method will return the value of the column directly:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:97 docs/master/queries.md:97
#, no-wrap
msgid "    $email = DB::table('users')->where('name', 'John')->value('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:99 docs/master/queries.md:99
msgid "To retrieve a single row by its `id` column value, use the `find` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:101 docs/master/queries.md:101
#, no-wrap
msgid "    $user = DB::table('users')->find(3);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:103 docs/master/queries.md:103
#, no-wrap
msgid "<a name=\"retrieving-a-list-of-column-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:103 docs/master/queries.md:103
#, no-wrap
msgid "Retrieving A List Of Column Values"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:106
msgid "If you would like to retrieve an `Illuminate\\Support\\Collection` instance containing the values of a single column, you may use the `pluck` method. In this example, we'll retrieve a collection of user titles:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:110 docs/master/queries.md:110
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:114 docs/master/queries.md:114
#, no-wrap
msgid "    foreach ($titles as $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:116 docs/master/queries.md:116
#, no-wrap
msgid " You may specify the column that the resulting collection should use as its keys by providing a second argument to the `pluck` method:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:118 docs/master/queries.md:118
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title', 'name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:122 docs/master/queries.md:122
#, no-wrap
msgid "    foreach ($titles as $name => $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:127 docs/master/queries.md:127
msgid "If you need to work with thousands of database records, consider using the `chunk` method provided by the `DB` facade. This method retrieves a small chunk of results at a time and feeds each chunk into a closure for processing. For example, let's retrieve the entire `users` table in chunks of 100 records at a time:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:135 docs/master/queries.md:135
#, no-wrap
msgid "    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        foreach ($users as $user) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:137 docs/master/queries.md:137
msgid "You may stop further chunks from being processed by returning `false` from the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:140 docs/master/queries.md:140
#, no-wrap
msgid "    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        // Process the records...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:143 docs/master/queries.md:143
#, no-wrap
msgid "        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:145 docs/master/queries.md:145
msgid "If you are updating database records while chunking results, your chunk results could change in unexpected ways. If you plan to update the retrieved records while chunking, it is always best to use the `chunkById` method instead. This method will automatically paginate the results based on the record's primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:154 docs/master/queries.md:154
#, no-wrap
msgid "    DB::table('users')->where('active', false)\n"
"        ->chunkById(100, function ($users) {\n"
"            foreach ($users as $user) {\n"
"                DB::table('users')\n"
"                    ->where('id', $user->id)\n"
"                    ->update(['active' => true]);\n"
"            }\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:156 docs/master/queries.md:156
#, no-wrap
msgid "> {note} When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:158 docs/master/queries.md:158
#, no-wrap
msgid "<a name=\"aggregates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:158 docs/master/queries.md:158
#, no-wrap
msgid "Aggregates"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:161 docs/master/queries.md:161
msgid "The query builder also provides a variety of methods for retrieving aggregate values like `count`, `max`, `min`, `avg`, and `sum`. You may call any of these methods after constructing your query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:165 docs/master/queries.md:165
#, no-wrap
msgid "    $users = DB::table('users')->count();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:167 docs/master/queries.md:167
#, no-wrap
msgid "    $price = DB::table('orders')->max('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:169 docs/master/queries.md:169
msgid "Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:173 docs/master/queries.md:173
#, no-wrap
msgid "    $price = DB::table('orders')\n"
"                    ->where('finalized', 1)\n"
"                    ->avg('price');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:175 docs/master/queries.md:175
#, no-wrap
msgid "<a name=\"determining-if-records-exist\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:175 docs/master/queries.md:175
#, no-wrap
msgid "Determining If Records Exist"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:178 docs/master/queries.md:178
msgid "Instead of using the `count` method to determine if any records exist that match your query's constraints, you may use the `exists` and `doesntExist` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:182 docs/master/queries.md:182
#, no-wrap
msgid "    if (DB::table('orders')->where('finalized', 1)->exists()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:186 docs/master/queries.md:186
#, no-wrap
msgid "    if (DB::table('orders')->where('finalized', 1)->doesntExist()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:188 docs/master/queries.md:188
#, no-wrap
msgid "<a name=\"select-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:188 docs/master/queries.md:188
#, no-wrap
msgid "Select Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:191 docs/master/queries.md:191
#, no-wrap
msgid "<a name=\"specifying-a-select-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:191 docs/master/queries.md:191
#, no-wrap
msgid "Specifying A Select Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:194 docs/master/queries.md:194
msgid "You may not always want to select all columns from a database table. Using the `select` method, you can specify a custom \"select\" clause for the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:200 docs/master/queries.md:200
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->select('name', 'email as user_email')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:202 docs/master/queries.md:202
msgid "The `distinct` method allows you to force the query to return distinct results:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:204 docs/master/queries.md:204
#, no-wrap
msgid "    $users = DB::table('users')->distinct()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:206 docs/master/queries.md:206
msgid "If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the `addSelect` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:208 docs/master/queries.md:208
#, no-wrap
msgid "    $query = DB::table('users')->select('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:210 docs/master/queries.md:210
#, no-wrap
msgid "    $users = $query->addSelect('age')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:212 docs/master/queries.md:212
#, no-wrap
msgid "<a name=\"raw-expressions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:212 docs/master/queries.md:212
#, no-wrap
msgid "Raw Expressions"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:215 docs/master/queries.md:215
msgid "Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may use the `raw` method provided by the `DB` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:221 docs/master/queries.md:221
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                 ->select(DB::raw('count(*) as user_count, status'))\n"
"                 ->where('status', '<>', 1)\n"
"                 ->groupBy('status')\n"
"                 ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:223 docs/master/queries.md:223
#, no-wrap
msgid "> {note} Raw statements will be injected into the query as strings, so you should be extremely careful to avoid creating SQL injection vulnerabilities.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:225 docs/master/queries.md:225
#, no-wrap
msgid "<a name=\"raw-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:225 docs/master/queries.md:225
#, no-wrap
msgid "Raw Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:228 docs/master/queries.md:228
msgid "Instead of using the `DB::raw` method, you may also use the following methods to insert a raw expression into various parts of your query. **Remember, Laravel can not guarantee that any query using raw expressions is protected against SQL injection vulnerabilities.**"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:230 docs/master/queries.md:230
#, no-wrap
msgid "<a name=\"selectraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:230 docs/master/queries.md:230
#, no-wrap
msgid "`selectRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:233 docs/master/queries.md:233
msgid "The `selectRaw` method can be used in place of `addSelect(DB::raw(...))`. This method accepts an optional array of bindings as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:237 docs/master/queries.md:237
#, no-wrap
msgid "    $orders = DB::table('orders')\n"
"                    ->selectRaw('price * ? as price_with_tax', [1.0825])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:239 docs/master/queries.md:239
#, no-wrap
msgid "<a name=\"whereraw-orwhereraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:239 docs/master/queries.md:239
#, no-wrap
msgid "`whereRaw / orWhereRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:242 docs/master/queries.md:242
msgid "The `whereRaw` and `orWhereRaw` methods can be used to inject a raw \"where\" clause into your query. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:246 docs/master/queries.md:246
#, no-wrap
msgid "    $orders = DB::table('orders')\n"
"                    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:248 docs/master/queries.md:248
#, no-wrap
msgid "<a name=\"havingraw-orhavingraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:248 docs/master/queries.md:248
#, no-wrap
msgid "`havingRaw / orHavingRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:251 docs/master/queries.md:251
msgid "The `havingRaw` and `orHavingRaw` methods may be used to provide a raw string as the value of the \"having\" clause. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:257 docs/master/queries.md:257
#, no-wrap
msgid "    $orders = DB::table('orders')\n"
"                    ->select('department', DB::raw('SUM(price) as total_sales'))\n"
"                    ->groupBy('department')\n"
"                    ->havingRaw('SUM(price) > ?', [2500])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:259 docs/master/queries.md:259
#, no-wrap
msgid "<a name=\"orderbyraw\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:259 docs/master/queries.md:259
#, no-wrap
msgid "`orderByRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:262 docs/master/queries.md:262
msgid "The `orderByRaw` method may be used to provide a raw string as the value of the \"order by\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:266 docs/master/queries.md:266
#, no-wrap
msgid "    $orders = DB::table('orders')\n"
"                    ->orderByRaw('updated_at - created_at DESC')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:268 docs/master/queries.md:268
#, no-wrap
msgid "<a name=\"groupbyraw\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:268 docs/master/queries.md:268
#, no-wrap
msgid "`groupByRaw`"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:271 docs/master/queries.md:271
msgid "The `groupByRaw` method may be used to provide a raw string as the value of the `group by` clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:276 docs/master/queries.md:276
#, no-wrap
msgid "    $orders = DB::table('orders')\n"
"                    ->select('city', 'state')\n"
"                    ->groupByRaw('city, state')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:278 docs/master/queries.md:278
#, no-wrap
msgid "<a name=\"joins\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:278 docs/master/queries.md:278
#, no-wrap
msgid "Joins"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:281 docs/master/queries.md:281
#, no-wrap
msgid "<a name=\"inner-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:281 docs/master/queries.md:281
#, no-wrap
msgid "Inner Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:284 docs/master/queries.md:284
msgid "The query builder may also be used to add join clauses to your queries. To perform a basic \"inner join\", you may use the `join` method on a query builder instance. The first argument passed to the `join` method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You may even join multiple tables in a single query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:292 docs/master/queries.md:292
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->join('contacts', 'users.id', '=', 'contacts.user_id')\n"
"                ->join('orders', 'users.id', '=', 'orders.user_id')\n"
"                ->select('users.*', 'contacts.phone', 'orders.price')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:294 docs/master/queries.md:294
#, no-wrap
msgid "<a name=\"left-join-right-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:294 docs/master/queries.md:294
#, no-wrap
msgid "Left Join / Right Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:297 docs/master/queries.md:297
msgid "If you would like to perform a \"left join\" or \"right join\" instead of an \"inner join\", use the `leftJoin` or `rightJoin` methods. These methods have the same signature as the `join` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:301 docs/master/queries.md:301
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:305 docs/master/queries.md:305
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:307 docs/master/queries.md:307
#, no-wrap
msgid "<a name=\"cross-join-clause\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:307 docs/master/queries.md:307
#, no-wrap
msgid "Cross Join Clause"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:310 docs/master/queries.md:310
msgid "You may use the `crossJoin` method to perform a \"cross join\". Cross joins generate a cartesian product between the first table and the joined table:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:314 docs/master/queries.md:314
#, no-wrap
msgid "    $sizes = DB::table('sizes')\n"
"                ->crossJoin('colors')\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:316 docs/master/queries.md:316
#, no-wrap
msgid "<a name=\"advanced-join-clauses\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:316 docs/master/queries.md:316
#, no-wrap
msgid "Advanced Join Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:319 docs/master/queries.md:319
msgid "You may also specify more advanced join clauses. To get started, pass a closure as the second argument to the `join` method. The closure will receive a `Illuminate\\Database\\Query\\JoinClause` instance which allows you to specify constraints on the \"join\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:325 docs/master/queries.md:325
#, no-wrap
msgid "    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:327 docs/master/queries.md:327
msgid "If you would like to use a \"where\" clause on your joins, you may use the `where` and `orWhere` methods provided by the `JoinClause` instance. Instead of comparing two columns, these methods will compare the column against a value:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:334 docs/master/queries.md:334
#, no-wrap
msgid "    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')\n"
"                     ->where('contacts.user_id', '>', 5);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:336 docs/master/queries.md:336
#, no-wrap
msgid "<a name=\"subquery-joins\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:336 docs/master/queries.md:336
#, no-wrap
msgid "Subquery Joins"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:339 docs/master/queries.md:339
msgid "You may use the `joinSub`, `leftJoinSub`, and `rightJoinSub` methods to join a query to a subquery. Each of these methods receives three arguments: the subquery, its table alias, and a closure that defines the related columns. In this example, we will retrieve a collection of users where each user record also contains the `created_at` timestamp of the user's most recently published blog post:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:344 docs/master/queries.md:344
#, no-wrap
msgid "    $latestPosts = DB::table('posts')\n"
"                       ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n"
"                       ->where('is_published', true)\n"
"                       ->groupBy('user_id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:349 docs/master/queries.md:349
#, no-wrap
msgid "    $users = DB::table('users')\n"
"            ->joinSub($latestPosts, 'latest_posts', function ($join) {\n"
"                $join->on('users.id', '=', 'latest_posts.user_id');\n"
"            })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:351 docs/master/queries.md:351
#, no-wrap
msgid "<a name=\"unions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:351 docs/master/queries.md:351
#, no-wrap
msgid "Unions"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:354 docs/master/queries.md:354
msgid "The query builder also provides a convenient method to \"union\" two or more queries together. For example, you may create an initial query and use the `union` method to union it with more queries:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:359 docs/master/queries.md:359
#, no-wrap
msgid "    $first = DB::table('users')\n"
"                ->whereNull('first_name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:364 docs/master/queries.md:364
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->whereNull('last_name')\n"
"                ->union($first)\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:366 docs/master/queries.md:366
msgid "In addition to the `union` method, the query builder provides a `unionAll` method. Queries that are combined using the `unionAll` method will not have their duplicate results removed. The `unionAll` method has the same method signature as the `union` method."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:368 docs/master/queries.md:368
#, no-wrap
msgid "<a name=\"basic-where-clauses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:368 docs/master/queries.md:368
#, no-wrap
msgid "Basic Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:371 docs/8.x/scout.md:360 docs/master/queries.md:371
#: docs/master/scout.md:355
#, no-wrap
msgid "<a name=\"where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:371 docs/8.x/scout.md:360 docs/master/queries.md:371
#: docs/master/scout.md:355
#, no-wrap
msgid "Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:374 docs/master/queries.md:374
msgid "You may use the query builder's `where` method to add \"where\" clauses to the query. The most basic call to the `where` method requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. The third argument is the value to compare against the column's value."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:376 docs/master/queries.md:376
msgid "For example, the following query retrieves users where the value of the `votes` column is equal to `100` and the value of the `age` column is greater than `35`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:381 docs/master/queries.md:381
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->where('votes', '=', 100)\n"
"                    ->where('age', '>', 35)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:383 docs/master/queries.md:383
msgid "For convenience, if you want to verify that a column is `=` to a given value, you may pass the value as the second argument to the `where` method. Laravel will assume you would like to use the `=` operator:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:385 docs/master/queries.md:385
#, no-wrap
msgid "    $users = DB::table('users')->where('votes', 100)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:387 docs/master/queries.md:387
msgid "As previously mentioned, you may use any operator that is supported by your database system:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:391 docs/master/queries.md:391
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->where('votes', '>=', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:395 docs/master/queries.md:395
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->where('votes', '<>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:399 docs/master/queries.md:399
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->where('name', 'like', 'T%')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:401 docs/master/queries.md:401
msgid "You may also pass an array of conditions to the `where` function. Each element of the array should be an array containing the three arguments typically passed to the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:406 docs/master/queries.md:406
#, no-wrap
msgid "    $users = DB::table('users')->where([\n"
"        ['status', '=', '1'],\n"
"        ['subscribed', '<>', '1'],\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:408 docs/master/queries.md:408
#, no-wrap
msgid "<a name=\"or-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:408 docs/master/queries.md:408
#, no-wrap
msgid "Or Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:411 docs/master/queries.md:411
msgid "When chaining together calls to the query builder's `where` method, the \"where\" clauses will be joined together using the `and` operator. However, you may use the `orWhere` method to join a clause to the query using the `or` operator. The `orWhere` method accepts the same arguments as the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:416 docs/master/queries.md:416
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                        ->where('votes', '>', 100)\n"
"                        ->orWhere('name', 'John')\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:418 docs/master/queries.md:418
msgid "If you need to group an \"or\" condition within parentheses, you may pass a closure as the first argument to the `orWhere` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:426 docs/master/queries.md:426
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                ->where('votes', '>', 100)\n"
"                ->orWhere(function($query) {\n"
"                    $query->where('name', 'Abigail')\n"
"                          ->where('votes', '>', 50);\n"
"                })\n"
"                ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:428 docs/master/queries.md:428
msgid "The example above will produce the following SQL:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/queries.md:429 docs/master/queries.md:429
#, no-wrap
msgid "select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:434 docs/8.x/queries.md:589 docs/master/queries.md:434
#: docs/master/queries.md:589
#, no-wrap
msgid "> {note} You should always group `orWhere` calls in order to avoid unexpected behavior when global scopes are applied.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:436 docs/master/queries.md:436
#, no-wrap
msgid "<a name=\"json-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:436 docs/master/queries.md:436
#, no-wrap
msgid "JSON Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:439 docs/master/queries.md:439
#, no-wrap
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7+, PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:443 docs/master/queries.md:443
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->where('preferences->dining->meal', 'salad')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:445 docs/master/queries.md:445
msgid "You may use `whereJsonContains` to query JSON arrays. This feature is not supported by the SQLite database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:449 docs/master/queries.md:449
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', 'en')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:451 docs/master/queries.md:451
msgid "If your application uses the MySQL or PostgreSQL databases, you may pass an array of values to the `whereJsonContains` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:455 docs/master/queries.md:455
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', ['en', 'de'])\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:457 docs/master/queries.md:457
msgid "You may use `whereJsonLength` method to query JSON arrays by their length:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:461 docs/master/queries.md:461
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', 0)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:465 docs/master/queries.md:465
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', '>', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:467 docs/master/queries.md:467
#, no-wrap
msgid "<a name=\"additional-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:467 docs/master/queries.md:467
#, no-wrap
msgid "Additional Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:470 docs/master/queries.md:470
#, no-wrap
msgid "**whereBetween / orWhereBetween**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:472 docs/master/queries.md:472
msgid "The `whereBetween` method verifies that a column's value is between two values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:476 docs/master/queries.md:476
#, no-wrap
msgid "    $users = DB::table('users')\n"
"               ->whereBetween('votes', [1, 100])\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:478 docs/master/queries.md:478
#, no-wrap
msgid "**whereNotBetween / orWhereNotBetween**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:480 docs/master/queries.md:480
msgid "The `whereNotBetween` method verifies that a column's value lies outside of two values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:484 docs/master/queries.md:484
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                        ->whereNotBetween('votes', [1, 100])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:486 docs/master/queries.md:486
#, no-wrap
msgid "**whereIn / whereNotIn / orWhereIn / orWhereNotIn**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:488 docs/master/queries.md:488
msgid "The `whereIn` method verifies that a given column's value is contained within the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:492 docs/master/queries.md:492
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                        ->whereIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:494 docs/master/queries.md:494
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:498 docs/master/queries.md:498
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                        ->whereNotIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:500 docs/master/queries.md:500
#, no-wrap
msgid "> {note} If you are adding a large array of integer bindings to your query, the `whereIntegerInRaw` or `whereIntegerNotInRaw` methods may be used to greatly reduce your memory usage.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:502 docs/master/queries.md:502
#, no-wrap
msgid "**whereNull / whereNotNull / orWhereNull / orWhereNotNull**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:504 docs/master/queries.md:504
msgid "The `whereNull` method verifies that the value of the given column is `NULL`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:508 docs/master/queries.md:508
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereNull('updated_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:510 docs/master/queries.md:510
msgid "The `whereNotNull` method verifies that the column's value is not `NULL`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:514 docs/master/queries.md:514
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereNotNull('updated_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:516 docs/master/queries.md:516
#, no-wrap
msgid "**whereDate / whereMonth / whereDay / whereYear / whereTime**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:518 docs/master/queries.md:518
msgid "The `whereDate` method may be used to compare a column's value against a date:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:522 docs/master/queries.md:522
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereDate('created_at', '2016-12-31')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:524 docs/master/queries.md:524
msgid "The `whereMonth` method may be used to compare a column's value against a specific month:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:528 docs/master/queries.md:528
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereMonth('created_at', '12')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:530 docs/master/queries.md:530
msgid "The `whereDay` method may be used to compare a column's value against a specific day of the month:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:534 docs/master/queries.md:534
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereDay('created_at', '31')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:536 docs/master/queries.md:536
msgid "The `whereYear` method may be used to compare a column's value against a specific year:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:540 docs/master/queries.md:540
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereYear('created_at', '2016')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:542 docs/master/queries.md:542
msgid "The `whereTime` method may be used to compare a column's value against a specific time:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:546 docs/master/queries.md:546
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereTime('created_at', '=', '11:20:45')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:548 docs/master/queries.md:548
#, no-wrap
msgid "**whereColumn / orWhereColumn**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:550 docs/master/queries.md:550
msgid "The `whereColumn` method may be used to verify that two columns are equal:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:554 docs/master/queries.md:554
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereColumn('first_name', 'last_name')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:556 docs/master/queries.md:556
msgid "You may also pass a comparison operator to the `whereColumn` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:560 docs/master/queries.md:560
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereColumn('updated_at', '>', 'created_at')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:562 docs/master/queries.md:562
msgid "You may also pass an array of column comparisons to the `whereColumn` method. These conditions will be joined using the `and` operator:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:568 docs/master/queries.md:568
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->whereColumn([\n"
"                        ['first_name', '=', 'last_name'],\n"
"                        ['updated_at', '>', 'created_at'],\n"
"                    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:570 docs/master/queries.md:570
#, no-wrap
msgid "<a name=\"logical-grouping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:570 docs/master/queries.md:570
#, no-wrap
msgid "Logical Grouping"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:573 docs/master/queries.md:573
msgid "Sometimes you may need to group several \"where\" clauses within parentheses in order to achieve your query's desired logical grouping. In fact, you should generally always group calls to the `orWhere` method in parentheses in order to avoid unexpected query behavior. To accomplish this, you may pass a closure to the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:581 docs/master/queries.md:581
#, no-wrap
msgid "    $users = DB::table('users')\n"
"               ->where('name', '=', 'John')\n"
"               ->where(function ($query) {\n"
"                   $query->where('votes', '>', 100)\n"
"                         ->orWhere('title', '=', 'Admin');\n"
"               })\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:583 docs/master/queries.md:583
msgid "As you can see, passing a closure into the `where` method instructs the query builder to begin a constraint group. The closure will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/queries.md:584 docs/master/queries.md:584
#, no-wrap
msgid "select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:591 docs/master/queries.md:591
#, no-wrap
msgid "<a name=\"advanced-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:591 docs/master/queries.md:591
#, no-wrap
msgid "Advanced Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:594 docs/master/queries.md:594
#, no-wrap
msgid "<a name=\"where-exists-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:594 docs/master/queries.md:594
#, no-wrap
msgid "Where Exists Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:597 docs/master/queries.md:597
msgid "The `whereExists` method allows you to write \"where exists\" SQL clauses. The `whereExists` method accepts a closure which will receive a query builder instance, allowing you to define the query that should be placed inside of the \"exists\" clause:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:605 docs/master/queries.md:605
#, no-wrap
msgid "    $users = DB::table('users')\n"
"               ->whereExists(function ($query) {\n"
"                   $query->select(DB::raw(1))\n"
"                         ->from('orders')\n"
"                         ->whereColumn('orders.user_id', 'users.id');\n"
"               })\n"
"               ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:607 docs/master/queries.md:607
msgid "The query above will produce the following SQL:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/8.x/queries.md:608 docs/master/queries.md:608
#, no-wrap
msgid "select * from users\n"
"where exists (\n"
"    select 1\n"
"    from orders\n"
"    where orders.user_id = users.id\n"
")\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:618 docs/master/queries.md:618
#, no-wrap
msgid "<a name=\"subquery-where-clauses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:618 docs/master/queries.md:618
#, no-wrap
msgid "Subquery Where Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:621 docs/master/queries.md:621
msgid "Sometimes you may need to construct a \"where\" clause that compares the results of a subquery to a given value. You may accomplish this by passing a closure and a value to the `where` method. For example, the following query will retrieve all users who have a recent \"membership\" of a given type;"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:631 docs/master/queries.md:631
#, no-wrap
msgid "    $users = User::where(function ($query) {\n"
"        $query->select('type')\n"
"            ->from('membership')\n"
"            ->whereColumn('membership.user_id', 'users.id')\n"
"            ->orderByDesc('membership.start_date')\n"
"            ->limit(1);\n"
"    }, 'Pro')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:633 docs/master/queries.md:633
msgid "Or, you may need to construct a \"where\" clause that compares a column to the results of a subquery. You may accomplish this by passing a column, operator, and closure to the `where` method. For example, the following query will retrieve all income records where the amount is less than average;"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:635 docs/master/queries.md:635
#, no-wrap
msgid "    use App\\Models\\Income;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:639 docs/master/queries.md:639
#, no-wrap
msgid "    $incomes = Income::where('amount', '<', function ($query) {\n"
"        $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:641 docs/master/queries.md:641
#, no-wrap
msgid "<a name=\"ordering-grouping-limit-and-offset\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:641 docs/master/queries.md:641
#, no-wrap
msgid "Ordering, Grouping, Limit & Offset"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:644 docs/master/queries.md:644
#, no-wrap
msgid "<a name=\"ordering\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:644 docs/master/queries.md:644
#, no-wrap
msgid "Ordering"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:647 docs/master/queries.md:647
#, no-wrap
msgid "<a name=\"orderby\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:647 docs/master/queries.md:647
#, no-wrap
msgid "The `orderBy` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:650 docs/master/queries.md:650
msgid "The `orderBy` method allows you to sort the results of the query by a given column. The first argument accepted by the `orderBy` method should be the column you wish to sort by, while the second argument determines the direction of the sort and may be either `asc` or `desc`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:654 docs/master/queries.md:654
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:656 docs/master/queries.md:656
msgid "To sort by multiple columns, you may simply invoke `orderBy` as many times as necessary:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:661 docs/master/queries.md:661
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->orderBy('email', 'asc')\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:663 docs/master/queries.md:663
#, no-wrap
msgid "<a name=\"latest-oldest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:663 docs/master/queries.md:663
#, no-wrap
msgid "The `latest` & `oldest` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:666 docs/master/queries.md:666
msgid "The `latest` and `oldest` methods allow you to easily order results by date. By default, the result will be ordered by the table's `created_at` column. Or, you may pass the column name that you wish to sort by:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:670 docs/master/queries.md:670
#, no-wrap
msgid "    $user = DB::table('users')\n"
"                    ->latest()\n"
"                    ->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:672 docs/master/queries.md:672
#, no-wrap
msgid "<a name=\"random-ordering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:672 docs/master/queries.md:672
#, no-wrap
msgid "Random Ordering"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:675 docs/master/queries.md:675
msgid "The `inRandomOrder` method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:679 docs/master/queries.md:679
#, no-wrap
msgid "    $randomUser = DB::table('users')\n"
"                    ->inRandomOrder()\n"
"                    ->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:681 docs/master/queries.md:681
#, no-wrap
msgid "<a name=\"removing-existing-orderings\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:681 docs/master/queries.md:681
#, no-wrap
msgid "Removing Existing Orderings"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:684 docs/master/queries.md:684
msgid "The `reorder` method removes all of the \"order by\" clauses that have previously been applied to the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:686 docs/8.x/queries.md:692 docs/master/queries.md:686
#: docs/master/queries.md:692
#, no-wrap
msgid "    $query = DB::table('users')->orderBy('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:688 docs/master/queries.md:688
#, no-wrap
msgid "    $unorderedUsers = $query->reorder()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:690
msgid "You may pass a column and direction when calling the `reorder` method in order to remove all existing \"order by\" clauses and apply an entirely new order to the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:694 docs/master/queries.md:694
#, no-wrap
msgid "    $usersOrderedByEmail = $query->reorder('email', 'desc')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:696 docs/master/queries.md:696
#, no-wrap
msgid "<a name=\"grouping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:696 docs/master/queries.md:696
#, no-wrap
msgid "Grouping"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:699 docs/master/queries.md:699
#, no-wrap
msgid "<a name=\"groupby-having\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:699 docs/master/queries.md:699
#, no-wrap
msgid "The `groupBy` & `having` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:702 docs/master/queries.md:702
msgid "As you might expect, the `groupBy` and `having` methods may be used to group the query results. The `having` method's signature is similar to that of the `where` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:707 docs/master/queries.md:707
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->groupBy('account_id')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:709 docs/master/queries.md:709
msgid "You may pass multiple arguments to the `groupBy` method to group by multiple columns:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:714 docs/master/queries.md:714
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->groupBy('first_name', 'status')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:716 docs/master/queries.md:716
msgid "To build more advanced `having` statements, see the [`havingRaw`](#raw-methods) method."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:718 docs/master/queries.md:718
#, no-wrap
msgid "<a name=\"limit-and-offset\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:718 docs/master/queries.md:718
#, no-wrap
msgid "Limit & Offset"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:721 docs/master/queries.md:721
#, no-wrap
msgid "<a name=\"skip-take\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:721 docs/master/queries.md:721
#, no-wrap
msgid "The `skip` & `take` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:724 docs/master/queries.md:724
msgid "You may use the `skip` and `take` methods to limit the number of results returned from the query or to skip a given number of results in the query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:726 docs/master/queries.md:726
#, no-wrap
msgid "    $users = DB::table('users')->skip(10)->take(5)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:728 docs/master/queries.md:728
msgid "Alternatively, you may use the `limit` and `offset` methods. These methods are functionally equivalent to the `take` and `skip` methods, respectively:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:733 docs/master/queries.md:733
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->offset(10)\n"
"                    ->limit(5)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:735 docs/master/queries.md:735
#, no-wrap
msgid "<a name=\"conditional-clauses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:735 docs/master/queries.md:735
#, no-wrap
msgid "Conditional Clauses"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:738 docs/master/queries.md:738
msgid "Sometimes you may want certain query clauses to apply to a query based on another condition. For instance, you may only want to apply a `where` statement if a given input value is present on the incoming HTTP request. You may accomplish this using the `when` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:740 docs/master/queries.md:740
#, no-wrap
msgid "    $role = $request->input('role');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:746 docs/master/queries.md:746
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->when($role, function ($query, $role) {\n"
"                        return $query->where('role_id', $role);\n"
"                    })\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:748 docs/master/queries.md:748
msgid "The `when` method only executes the given closure when the first argument is `true`. If the first argument is `false`, the closure will not be executed. So, in the example above, the closure given to the `when` method will only be invoked if the `role` field is present on the incoming request and evaluates to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:750 docs/master/queries.md:750
msgid "You may pass another closure as the third argument to the `when` method. This closure will only execute if the first argument evaluates as `false`. To illustrate how this feature may be used, we will use it to configure the default ordering of a query:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:752 docs/master/queries.md:752
#, no-wrap
msgid "    $sortByVotes = $request->input('sort_by_votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:760 docs/master/queries.md:760
#, no-wrap
msgid "    $users = DB::table('users')\n"
"                    ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                        return $query->orderBy('votes');\n"
"                    }, function ($query) {\n"
"                        return $query->orderBy('name');\n"
"                    })\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:762 docs/master/queries.md:762
#, no-wrap
msgid "<a name=\"insert-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:762 docs/master/queries.md:762
#, no-wrap
msgid "Insert Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:765 docs/master/queries.md:765
msgid "The query builder also provides an `insert` method that may be used to insert records into the database table. The `insert` method accepts an array of column names and values:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:770 docs/master/queries.md:770
#, no-wrap
msgid "    DB::table('users')->insert([\n"
"        'email' => 'kayla@example.com',\n"
"        'votes' => 0\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:772 docs/master/queries.md:772
msgid "You may insert several records at once by passing an array of arrays. Each array represents a record that should be inserted into the table:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:777 docs/master/queries.md:777
#, no-wrap
msgid "    DB::table('users')->insert([\n"
"        ['email' => 'picard@example.com', 'votes' => 0],\n"
"        ['email' => 'janeway@example.com', 'votes' => 0],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:779 docs/master/queries.md:779
msgid "The `insertOrIgnore` method will ignore duplicate record errors while inserting records into the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:784 docs/master/queries.md:784
#, no-wrap
msgid "    DB::table('users')->insertOrIgnore([\n"
"        ['id' => 1, 'email' => 'sisko@example.com'],\n"
"        ['id' => 2, 'email' => 'archer@example.com'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:786 docs/master/queries.md:786
#, no-wrap
msgid "<a name=\"auto-incrementing-ids\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:786 docs/master/queries.md:786
#, no-wrap
msgid "Auto-Incrementing IDs"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:789 docs/master/queries.md:789
msgid "If the table has an auto-incrementing id, use the `insertGetId` method to insert a record and then retrieve the ID:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:793 docs/master/queries.md:793
#, no-wrap
msgid "    $id = DB::table('users')->insertGetId(\n"
"        ['email' => 'john@example.com', 'votes' => 0]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:795 docs/master/queries.md:795
#, no-wrap
msgid "> {note} When using PostgreSQL the `insertGetId` method expects the auto-incrementing column to be named `id`. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the `insertGetId` method.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:800 docs/master/queries.md:800
msgid "The `upsert` method will insert records that do not exist and update the records that already exist with new values that you may specify. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of columns that should be updated if a matching record already exists in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:805 docs/master/queries.md:805
#, no-wrap
msgid "    DB::table('flights')->upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:807 docs/master/queries.md:807
msgid "In the example above, Laravel will attempt to insert two records. If a record already exists with the same `departure` and `destination` column values, Laravel will update that record's `price` column."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:809 docs/master/queries.md:809
#, no-wrap
msgid "> {note} All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:811 docs/master/queries.md:811
#, no-wrap
msgid "<a name=\"update-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:811 docs/master/queries.md:811
#, no-wrap
msgid "Update Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:814 docs/master/queries.md:814
msgid "In addition to inserting records into the database, the query builder can also update existing records using the `update` method. The `update` method, like the `insert` method, accepts an array of column and value pairs indicating the columns to be updated. You may constrain the `update` query using `where` clauses:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:818 docs/master/queries.md:818
#, no-wrap
msgid "    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['votes' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:820 docs/master/queries.md:820
#, no-wrap
msgid "<a name=\"update-or-insert\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:820 docs/master/queries.md:820
#, no-wrap
msgid "Update Or Insert"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:823 docs/master/queries.md:823
msgid "Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the `updateOrInsert` method may be used. The `updateOrInsert` method accepts two arguments: an array of conditions by which to find the record, and an array of column and value pairs indicating the columns to be updated."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:825 docs/master/queries.md:825
msgid "The `updateOrInsert` method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:831 docs/master/queries.md:831
#, no-wrap
msgid "    DB::table('users')\n"
"        ->updateOrInsert(\n"
"            ['email' => 'john@example.com', 'name' => 'John'],\n"
"            ['votes' => '2']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:833 docs/master/queries.md:833
#, no-wrap
msgid "<a name=\"updating-json-columns\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:833 docs/master/queries.md:833
#, no-wrap
msgid "Updating JSON Columns"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:836 docs/master/queries.md:836
#, no-wrap
msgid "When updating a JSON column, you should use `->` syntax to update the appropriate key in the JSON object. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:840 docs/master/queries.md:840
#, no-wrap
msgid "    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['options->enabled' => true]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:842 docs/master/queries.md:842
#, no-wrap
msgid "<a name=\"increment-and-decrement\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queries.md:842 docs/master/queries.md:842
#, no-wrap
msgid "Increment & Decrement"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:845 docs/master/queries.md:845
msgid "The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of these methods accept at least one argument: the column to modify. A second argument may be provided to specify the amount by which the column should be incremented or decremented:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:847 docs/master/queries.md:847
#, no-wrap
msgid "    DB::table('users')->increment('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:849 docs/master/queries.md:849
#, no-wrap
msgid "    DB::table('users')->increment('votes', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:851 docs/master/queries.md:851
#, no-wrap
msgid "    DB::table('users')->decrement('votes');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:853 docs/master/queries.md:853
#, no-wrap
msgid "    DB::table('users')->decrement('votes', 5);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:855 docs/master/queries.md:855
msgid "You may also specify additional columns to update during the operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:857 docs/master/queries.md:857
#, no-wrap
msgid "    DB::table('users')->increment('votes', 1, ['name' => 'John']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:859 docs/master/queries.md:859
#, no-wrap
msgid "<a name=\"delete-statements\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:859 docs/master/queries.md:859
#, no-wrap
msgid "Delete Statements"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:862 docs/master/queries.md:862
msgid "The query builder's `delete` method may be used to delete records from the table. You may constrain `delete` statements by adding \"where\" clauses before calling the `delete` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:864 docs/master/queries.md:864
#, no-wrap
msgid "    DB::table('users')->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:866 docs/master/queries.md:866
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:868 docs/master/queries.md:868
msgid "If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to zero, you may use the `truncate` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:870 docs/master/queries.md:870
#, no-wrap
msgid "    DB::table('users')->truncate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:872 docs/master/queries.md:872
#, no-wrap
msgid "<a name=\"table-truncation-and-postgresql\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queries.md:872 docs/master/queries.md:872
#, no-wrap
msgid "Table Truncation & PostgreSQL"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:875 docs/master/queries.md:875
msgid "When truncating a PostgreSQL database, the `CASCADE` behavior will be applied. This means that all foreign key related records in other tables will be deleted as well."
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:877 docs/master/queries.md:877
#, no-wrap
msgid "<a name=\"pessimistic-locking\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:877 docs/master/queries.md:877
#, no-wrap
msgid "Pessimistic Locking"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:880 docs/master/queries.md:880
msgid "The query builder also includes a few functions to help you achieve \"pessimistic locking\" when executing your `select` statements. To execute a statement with a \"shared lock\", you may call the `sharedLock` method. A shared lock prevents the selected rows from being modified until your transaction is committed:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:885 docs/master/queries.md:885
#, no-wrap
msgid "    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->sharedLock()\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:887 docs/master/queries.md:887
msgid "Alternatively, you may use the `lockForUpdate` method. A \"for update\" lock prevents the selected records from being modified or from being selected with another shared lock:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:892 docs/master/queries.md:892
#, no-wrap
msgid "    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->lockForUpdate()\n"
"            ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:894 docs/master/queries.md:894
#, no-wrap
msgid "<a name=\"debugging\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queries.md:894 docs/master/queries.md:894
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:897 docs/master/queries.md:897
msgid "You may use the `dd` and `dump` methods while building a query to dump the current query bindings and SQL. The `dd` method will display the debug information and then stop executing the request. The `dump` method will display the debug information but allow the request to continue executing:"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:899 docs/master/queries.md:899
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dd();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queries.md:900 docs/master/queries.md:900
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dump();\n"
msgstr ""

#. type: Title #
#: docs/8.x/queues.md:1 docs/master/queues.md:1
#, no-wrap
msgid "Queues"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Connections Vs. Queues](#connections-vs-queues)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Driver Notes & Prerequisites](#driver-prerequisites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Creating Jobs](#creating-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Generating Job Classes](#generating-job-classes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Class Structure](#class-structure)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Unique Jobs](#unique-jobs)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Job Middleware](#job-middleware)"
msgstr ""

#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '    - '
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/8.x/routing.md:27 docs/master/queues.md:43
#: docs/master/routing.md:27
msgid "[Rate Limiting](#rate-limiting)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Preventing Job Overlaps](#preventing-job-overlaps)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44
msgid "[Throttling Exceptions](#throttling-exceptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Dispatching Jobs](#dispatching-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Delayed Dispatching](#delayed-dispatching)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Synchronous Dispatching](#synchronous-dispatching)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Jobs & Database Transactions](#jobs-and-database-transactions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Job Chaining](#job-chaining)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Customizing The Queue & Connection](#customizing-the-queue-and-connection)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Specifying Max Job Attempts / Timeout Values](#max-job-attempts-and-timeout)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Job Batching](#job-batching)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Defining Batchable Jobs](#defining-batchable-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Dispatching Batches](#dispatching-batches)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Adding Jobs To Batches](#adding-jobs-to-batches)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Inspecting Batches](#inspecting-batches)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Cancelling Batches](#cancelling-batches)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Batch Failures](#batch-failures)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Pruning Batches](#pruning-batches)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Queueing Closures](#queueing-closures)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Running The Queue Worker](#running-the-queue-worker)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[The `queue:work` Command](#the-queue-work-command)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Queue Priorities](#queue-priorities)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Queue Workers & Deployment](#queue-workers-and-deployment)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Job Expirations & Timeouts](#job-expirations-and-timeouts)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Supervisor Configuration](#supervisor-configuration)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Dealing With Failed Jobs](#dealing-with-failed-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Cleaning Up After Failed Jobs](#cleaning-up-after-failed-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Retrying Failed Jobs](#retrying-failed-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Ignoring Missing Models](#ignoring-missing-models)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Failed Job Events](#failed-job-events)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/queues.md:44 docs/master/queues.md:43
msgid "[Job Events](#job-events)"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:49 docs/master/queues.md:48
msgid "While building your web application, you may have some tasks, such as parsing and storing an uploaded CSV file, that take too long to perform during a typical web request. Thankfully, Laravel allows you to easily create queued jobs that may be processed in the background. By moving time intensive tasks to a queue, your application can respond to web requests with blazing speed and provide a better user experience to your customers."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:51 docs/master/queues.md:50
msgid "Laravel queues provide a unified queueing API across a variety of different queue backends, such as [Amazon SQS](https://aws.amazon.com/sqs/), [Redis](https://redis.io), or even a relational database."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:53 docs/master/queues.md:52
msgid "Laravel's queue configuration options are stored in your application's `config/queue.php` configuration file. In this file, you will find connection configurations for each of the queue drivers that are included with the framework, including the database, [Amazon SQS](https://aws.amazon.com/sqs/), [Redis](https://redis.io), and [Beanstalkd](https://beanstalkd.github.io/) drivers, as well as a synchronous driver that will execute jobs immediately (for use during local development). A `null` queue driver is also included which discards queued jobs."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:55 docs/master/queues.md:54
#, no-wrap
msgid "> {tip} Laravel now offers Horizon, a beautiful dashboard and configuration system for your Redis powered queues. Check out the full [Horizon documentation](/docs/{{version}}/horizon) for more information.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:57 docs/master/queues.md:56
#, no-wrap
msgid "<a name=\"connections-vs-queues\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:57 docs/master/queues.md:56
#, no-wrap
msgid "Connections Vs. Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:60 docs/master/queues.md:59
msgid "Before getting started with Laravel queues, it is important to understand the distinction between \"connections\" and \"queues\". In your `config/queue.php` configuration file, there is a `connections` configuration array. This option defines the connections to backend queue services such as Amazon SQS, Beanstalk, or Redis. However, any given queue connection may have multiple \"queues\" which may be thought of as different stacks or piles of queued jobs."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:62 docs/master/queues.md:61
msgid "Note that each connection configuration example in the `queue` configuration file contains a `queue` attribute. This is the default queue that jobs will be dispatched to when they are sent to a given connection. In other words, if you dispatch a job without explicitly defining which queue it should be dispatched to, the job will be placed on the queue that is defined in the `queue` attribute of the connection configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:64 docs/8.x/queues.md:703 docs/master/queues.md:63
#: docs/master/queues.md:641
#, no-wrap
msgid "    use App\\Jobs\\ProcessPodcast;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:67 docs/master/queues.md:66
#, no-wrap
msgid "    // This job is sent to the default connection's default queue...\n"
"    ProcessPodcast::dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:70 docs/master/queues.md:69
#, no-wrap
msgid "    // This job is sent to the default connection's \"emails\" queue...\n"
"    ProcessPodcast::dispatch()->onQueue('emails');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:72 docs/master/queues.md:71
msgid "Some applications may not need to ever push jobs onto multiple queues, instead preferring to have one simple queue. However, pushing jobs to multiple queues can be especially useful for applications that wish to prioritize or segment how jobs are processed, since the Laravel queue worker allows you to specify which queues it should process by priority. For example, if you push jobs to a `high` queue, you may run a worker that gives them higher processing priority:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:74 docs/master/queues.md:73
#, no-wrap
msgid "    php artisan queue:work --queue=high,default\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:76 docs/master/queues.md:75
#, no-wrap
msgid "Driver Notes & Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:79 docs/8.x/session.md:46 docs/8.x/upgrade.md:89
#: docs/8.x/valet.md:101 docs/master/queues.md:78 docs/master/session.md:46
#: docs/master/upgrade.md:89 docs/master/valet.md:101
#, no-wrap
msgid "<a name=\"database\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:82 docs/master/queues.md:81
msgid "In order to use the `database` queue driver, you will need a database table to hold the jobs. To generate a migration that creates this table, run the `queue:table` Artisan command. Once the migration has been created, you may migrate your database using the `migrate` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:84 docs/master/queues.md:83
#, no-wrap
msgid "    php artisan queue:table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:91 docs/master/queues.md:90
msgid "In order to use the `redis` queue driver, you should configure a Redis database connection in your `config/database.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:93 docs/master/queues.md:92
#, no-wrap
msgid "**Redis Cluster**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:95 docs/master/queues.md:94
msgid "If your Redis queue connection uses a Redis Cluster, your queue names must contain a [key hash tag](https://redis.io/topics/cluster-spec#keys-hash-tags). This is required in order to ensure all of the Redis keys for a given queue are placed into the same hash slot:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:102 docs/master/queues.md:101
#, no-wrap
msgid "    'redis' => [\n"
"        'driver' => 'redis',\n"
"        'connection' => 'default',\n"
"        'queue' => '{default}',\n"
"        'retry_after' => 90,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:104 docs/master/queues.md:103
#, no-wrap
msgid "**Blocking**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:106 docs/master/queues.md:105
msgid "When using the Redis queue, you may use the `block_for` configuration option to specify how long the driver should wait for a job to become available before iterating through the worker loop and re-polling the Redis database."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:108 docs/master/queues.md:107
msgid "Adjusting this value based on your queue load can be more efficient than continually polling the Redis database for new jobs. For instance, you may set the value to `5` to indicate that the driver should block for five seconds while waiting for a job to become available:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:116 docs/master/queues.md:115
#, no-wrap
msgid "    'redis' => [\n"
"        'driver' => 'redis',\n"
"        'connection' => 'default',\n"
"        'queue' => 'default',\n"
"        'retry_after' => 90,\n"
"        'block_for' => 5,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:118 docs/master/queues.md:117
#, no-wrap
msgid "> {note} Setting `block_for` to `0` will cause queue workers to block indefinitely until a job is available. This will also prevent signals such as `SIGTERM` from being handled until the next job has been processed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:120 docs/master/queues.md:119
#, no-wrap
msgid "<a name=\"other-driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:120 docs/master/queues.md:119
#, no-wrap
msgid "Other Driver Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:123 docs/master/queues.md:122
msgid "The following dependencies are needed for the listed queue drivers. These dependencies may be installed via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:129 docs/master/queues.md:128
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- Amazon SQS: `aws/aws-sdk-php ~3.0`\n"
"- Beanstalkd: `pda/pheanstalk ~4.0`\n"
"- Redis: `predis/predis ~1.0` or phpredis PHP extension\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:131 docs/master/queues.md:130
#, no-wrap
msgid "<a name=\"creating-jobs\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:131 docs/master/queues.md:130
#, no-wrap
msgid "Creating Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:134 docs/master/queues.md:133
#, no-wrap
msgid "<a name=\"generating-job-classes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:134 docs/master/queues.md:133
#, no-wrap
msgid "Generating Job Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:137 docs/master/queues.md:136
msgid "By default, all of the queueable jobs for your application are stored in the `app/Jobs` directory. If the `app/Jobs` directory doesn't exist, it will be created when you run the `make:job` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:139 docs/master/queues.md:138
#, no-wrap
msgid "    php artisan make:job ProcessPodcast\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:141 docs/master/queues.md:140
msgid "The generated class will implement the `Illuminate\\Contracts\\Queue\\ShouldQueue` interface, indicating to Laravel that the job should be pushed onto the queue to run asynchronously."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:143
#, no-wrap
msgid "> {tip} Job stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:145 docs/master/queues.md:144
#, no-wrap
msgid "<a name=\"class-structure\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:145 docs/master/queues.md:144
#, no-wrap
msgid "Class Structure"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:148 docs/master/queues.md:147
msgid "Job classes are very simple, normally containing only a `handle` method that is invoked when the job is processed by the queue. To get started, let's take a look at an example job class. In this example, we'll pretend we manage a podcast publishing service and need to process the uploaded podcast files before they are published:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:160 docs/master/queues.md:159
#, no-wrap
msgid "    use App\\Models\\Podcast;\n"
"    use App\\Services\\AudioProcessor;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Foundation\\Bus\\Dispatchable;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:164 docs/8.x/queues.md:815 docs/8.x/queues.md:880
#: docs/master/queues.md:163 docs/master/queues.md:753
#: docs/master/queues.md:818
#, no-wrap
msgid "    class ProcessPodcast implements ShouldQueue\n"
"    {\n"
"        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:171 docs/master/queues.md:170
#, no-wrap
msgid "        /**\n"
"         * The podcast instance.\n"
"         *\n"
"         * @var \\App\\Models\\Podcast\n"
"         */\n"
"        protected $podcast;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:182 docs/master/queues.md:181
#, no-wrap
msgid "        /**\n"
"         * Create a new job instance.\n"
"         *\n"
"         * @param  App\\Models\\Podcast  $podcast\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Podcast $podcast)\n"
"        {\n"
"            $this->podcast = $podcast;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:194 docs/master/queues.md:193
#, no-wrap
msgid "        /**\n"
"         * Execute the job.\n"
"         *\n"
"         * @param  App\\Services\\AudioProcessor  $processor\n"
"         * @return void\n"
"         */\n"
"        public function handle(AudioProcessor $processor)\n"
"        {\n"
"            // Process uploaded podcast...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:196 docs/master/queues.md:195
msgid "In this example, note that we were able to pass an [Eloquent model](/docs/{{version}}/eloquent) directly into the queued job's constructor. Because of the `SerializesModels` trait that the job is using, Eloquent models and their loaded relationships will be gracefully serialized and unserialized when the job is processing."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:198 docs/master/queues.md:197
msgid "If your queued job accepts an Eloquent model in its constructor, only the identifier for the model will be serialized onto the queue. When the job is actually handled, the queue system will automatically re-retrieve the full model instance and its loaded relationships from the database. This approach to model serialization allows for much smaller job payloads to be sent to your queue driver."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:200 docs/master/queues.md:199
#, no-wrap
msgid "<a name=\"handle-method-dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:200 docs/master/queues.md:199
#, no-wrap
msgid "`handle` Method Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:203 docs/master/queues.md:202
msgid "The `handle` method is invoked when the job is processed by the queue. Note that we are able to type-hint dependencies on the `handle` method of the job. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:205 docs/master/queues.md:204
msgid "If you would like to take total control over how the container injects dependencies into the `handle` method, you may use the container's `bindMethod` method. The `bindMethod` method accepts a callback which receives the job and the container. Within the callback, you are free to invoke the `handle` method however you wish. Typically, you should call this method from the `boot` method of your `App\\Providers\\AppServiceProvider` [service provider](/docs/{{version}}/providers):"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:208 docs/master/queues.md:207
#, no-wrap
msgid "    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Services\\AudioProcessor;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:212 docs/master/queues.md:211
#, no-wrap
msgid "    $this->app->bindMethod([ProcessPodcast::class, 'handle'], function ($job, $app) {\n"
"        return $job->handle($app->make(AudioProcessor::class));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:214 docs/master/queues.md:213
#, no-wrap
msgid "> {note} Binary data, such as raw image contents, should be passed through the `base64_encode` function before being passed to a queued job. Otherwise, the job may not properly serialize to JSON when being placed on the queue.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:216 docs/master/queues.md:215
#, no-wrap
msgid "<a name=\"handling-relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:216 docs/master/queues.md:215
#, no-wrap
msgid "Handling Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:219 docs/master/queues.md:218
msgid "Because loaded relationships also get serialized, the serialized job string can sometimes become quite large. To prevent relations from being serialized, you can call the `withoutRelations` method on the model when setting a property value. This method will return an instance of the model without its loaded relationships:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:230 docs/master/queues.md:229
#, no-wrap
msgid "    /**\n"
"     * Create a new job instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Podcast  $podcast\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Podcast $podcast)\n"
"    {\n"
"        $this->podcast = $podcast->withoutRelations();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:232 docs/master/queues.md:231
#, no-wrap
msgid "<a name=\"unique-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:232 docs/master/queues.md:231
#, no-wrap
msgid "Unique Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:235 docs/master/queues.md:234
#, no-wrap
msgid "> {note} Unique jobs require a cache driver that supports [locks](/docs/{{version}}/cache#atomic-locks). Currently, the `memcached`, `redis`, `dynamodb`, `database`, `file`, and `array` cache drivers support atomic locks. In addition, unique job constraints do not apply to jobs within batches.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:237 docs/master/queues.md:236
msgid "Sometimes, you may want to ensure that only one instance of a specific job is on the queue at any point in time. You may do so by implementing the `ShouldBeUnique` interface on your job class. This interface does not require you to define any additional methods on your class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:242 docs/master/queues.md:241
#, no-wrap
msgid "    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldBeUnique;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:247 docs/master/queues.md:246
#, no-wrap
msgid "    class UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n"
"    {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:249 docs/master/queues.md:248
msgid "In the example above, the `UpdateSearchIndex` job is unique. So, the job will not be dispatched if another instance of the job is already on the queue and has not finished processing."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:251 docs/master/queues.md:250
msgid "In certain cases, you may want to define a specific \"key\" that makes the job unique or you may want to specify a timeout beyond which the job no longer stays unique. To accomplish this, you may define `uniqueId` and `uniqueFor` properties or methods on your job class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:257 docs/master/queues.md:256
#, no-wrap
msgid "    use App\\Product;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldBeUnique;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:266 docs/master/queues.md:265
#, no-wrap
msgid "    class UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n"
"    {\n"
"        /**\n"
"         * The product instance.\n"
"         *\n"
"         * @var \\App\\Product\n"
"         */\n"
"        public $product;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:273 docs/master/queues.md:272
#, no-wrap
msgid "        /**\n"
"        * The number of seconds after which the job's unique lock will be released.\n"
"        *\n"
"        * @var int\n"
"        */\n"
"        public $uniqueFor = 3600;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:284 docs/master/queues.md:283
#, no-wrap
msgid "        /**\n"
"        * The unique ID of the job.\n"
"        *\n"
"        * @return string\n"
"        */\n"
"        public function uniqueId()\n"
"        {\n"
"            return $this->product->id;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:286 docs/master/queues.md:285
msgid "In the example above, the `UpdateSearchIndex` job is unique by a product ID. So, any new dispatches of the job with the same product ID will be ignored until the existing job has completed processing. In addition, if the existing job is not processed within one hour, the unique lock will be released and another job with the same unique key can be dispatched to the queue."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:288 docs/master/queues.md:287
#, no-wrap
msgid "<a name=\"keeping-jobs-unique-until-processing-begins\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:288 docs/master/queues.md:287
#, no-wrap
msgid "Keeping Jobs Unique Until Processing Begins"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:291 docs/master/queues.md:290
msgid "By default, unique jobs are \"unlocked\" after a job completes processing or fails all of its retry attempts. However, there may be situations where you would like your job to unlock immediately before it is processed. To accomplish this, your job should implement the `ShouldBeUniqueUntilProcessing` contract instead of the `ShouldBeUnique` contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:297 docs/master/queues.md:296
#, no-wrap
msgid "    use App\\Product;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldBeUniqueUntilProcessing;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:302 docs/master/queues.md:301
#, no-wrap
msgid "    class UpdateSearchIndex implements ShouldQueue, ShouldBeUniqueUntilProcessing\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:304 docs/master/queues.md:303
#, no-wrap
msgid "<a name=\"unique-job-locks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:304 docs/master/queues.md:303
#, no-wrap
msgid "Unique Job Locks"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:307 docs/master/queues.md:306
msgid "Behind the scenes, when a `ShouldBeUnique` job is dispatched, Laravel attempts to acquire a [lock](/docs/{{version}}/cache#atomic-locks) with the `uniqueId` key. If the lock is not acquired, the job is not dispatched. This lock is released when the job completes processing or fails all of its retry attempts. By default, Laravel will use the default cache driver to obtain this lock. However, if you wish to use another driver for acquiring the lock, you may define a `uniqueVia` method that returns the cache driver that should be used:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:313 docs/master/queues.md:312
#, no-wrap
msgid "    class UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n"
"    {\n"
"        ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:324 docs/master/queues.md:323
#, no-wrap
msgid "        /**\n"
"        * Get the cache driver for the unique job lock.\n"
"        *\n"
"        * @return \\Illuminate\\Contracts\\Cache\\Repository\n"
"        */\n"
"        public function uniqueVia()\n"
"        {\n"
"            return Cache::driver('redis');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:326 docs/master/queues.md:325
#, no-wrap
msgid "> {tip} If you only need to limit the concurrent processing of a job, use the [`WithoutOverlapping`](/docs/{{version}}/queues#preventing-job-overlaps) job middleware instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:328 docs/master/queues.md:327
#, no-wrap
msgid "<a name=\"job-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:328 docs/master/queues.md:327
#, no-wrap
msgid "Job Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:331 docs/master/queues.md:330
msgid "Job middleware allow you to wrap custom logic around the execution of queued jobs, reducing boilerplate in the jobs themselves. For example, consider the following `handle` method which leverages Laravel's Redis rate limiting features to allow only one job to process every five seconds:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:333 docs/8.x/queues.md:361 docs/8.x/queues.md:949
#: docs/8.x/redis.md:210 docs/8.x/redis.md:236 docs/8.x/redis.md:270
#: docs/8.x/redis.md:323 docs/master/queues.md:332 docs/master/queues.md:360
#: docs/master/queues.md:887 docs/master/redis.md:210 docs/master/redis.md:236
#: docs/master/redis.md:270 docs/master/redis.md:323
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Redis;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:343 docs/master/queues.md:342
#, no-wrap
msgid "    /**\n"
"     * Execute the job.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        Redis::throttle('key')->block(0)->allow(1)->every(5)->then(function () {\n"
"            info('Lock obtained...');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:347 docs/master/queues.md:346
#, no-wrap
msgid "            // Handle job...\n"
"        }, function () {\n"
"            // Could not obtain lock...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:351 docs/master/queues.md:350
#, no-wrap
msgid "            return $this->release(5);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:353 docs/master/queues.md:352
msgid "While this code is valid, the implementation of the `handle` method becomes noisy since it is cluttered with Redis rate limiting logic. In addition, this rate limiting logic must be duplicated for any other jobs that we want to rate limit."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:355 docs/master/queues.md:354
msgid "Instead of rate limiting in the handle method, we could define a job middleware that handles rate limiting. Laravel does not have a default location for job middleware, so you are welcome to place job middleware anywhere in your application. In this example, we will place the middleware in an `app/Jobs/Middleware` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:359 docs/master/queues.md:358
#, no-wrap
msgid "    namespace App\\Jobs\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:377 docs/master/queues.md:376
#, no-wrap
msgid "    class RateLimited\n"
"    {\n"
"        /**\n"
"         * Process the queued job.\n"
"         *\n"
"         * @param  mixed  $job\n"
"         * @param  callable  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($job, $next)\n"
"        {\n"
"            Redis::throttle('key')\n"
"                    ->block(0)->allow(1)->every(5)\n"
"                    ->then(function () use ($job, $next) {\n"
"                        // Lock obtained...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:381 docs/master/queues.md:380
#, no-wrap
msgid "                        $next($job);\n"
"                    }, function () use ($job) {\n"
"                        // Could not obtain lock...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:386 docs/master/queues.md:385
#, no-wrap
msgid "                        $job->release(5);\n"
"                    });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:388 docs/master/queues.md:387
msgid "As you can see, like [route middleware](/docs/{{version}}/middleware), job middleware receive the job being processed and a callback that should be invoked to continue processing the job."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:390 docs/master/queues.md:389
msgid "After creating job middleware, they may be attached to a job by returning them from the job's `middleware` method. This method does not exist on jobs scaffolded by the `make:job` Artisan command, so you will need to manually add it to your job class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:392 docs/master/queues.md:391
#, no-wrap
msgid "    use App\\Jobs\\Middleware\\RateLimited;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:402 docs/master/queues.md:401
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [new RateLimited];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:404 docs/8.x/routing.md:539 docs/master/queues.md:403
#: docs/master/routing.md:538
#, no-wrap
msgid "<a name=\"rate-limiting\"></a>\n"
msgstr ""

#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  routing.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/queues.md:404 docs/8.x/routing.md:539 docs/master/queues.md:403
#: docs/master/routing.md:538
#, no-wrap
msgid "Rate Limiting"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:407 docs/master/queues.md:406
msgid "Although we just demonstrated how to write your own rate limiting job middleware, Laravel actually includes a rate limiting middleware that you may utilize to rate limit jobs. Like [route rate limiters](/docs/{{version}}/routing#defining-rate-limiters), job rate limiters are defined using the `RateLimiter` facade's `for` method."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:409 docs/master/queues.md:408
msgid "For example, you may wish to allow users to backup their data once per hour while imposing no such limit on premium customers. To accomplish this, you may define a `RateLimiter` in the `boot` method of your `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:412 docs/8.x/releases.md:194 docs/8.x/routing.md:550
#: docs/master/queues.md:411 docs/master/releases.md:194
#: docs/master/routing.md:549
#, no-wrap
msgid "    use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"    use Illuminate\\Support\\Facades\\RateLimiter;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:426 docs/master/queues.md:425
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        RateLimiter::for('backups', function ($job) {\n"
"            return $job->user->vipCustomer()\n"
"                        ? Limit::none()\n"
"                        : Limit::perHour(1)->by($job->user->id);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:428 docs/master/queues.md:427
msgid "In the example above, we defined an hourly rate limit; however, you may easily define a rate limit based on minutes using the `perMinute` method. In addition, you may pass any value you wish to the `by` method of the rate limit; however, this value is most often used to segment rate limits by customer:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:430 docs/master/queues.md:429
#, no-wrap
msgid "    return Limit::perMinute(50)->by($job->user->id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:432 docs/master/queues.md:431
msgid "Once you have defined your rate limit, you may attach the rate limiter to your backup job using the `Illuminate\\Queue\\Middleware\\RateLimited` middleware. Each time the job exceeds the rate limit, this middleware will release the job back to the queue with an appropriate delay based on the rate limit duration."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:434 docs/master/queues.md:433
#, no-wrap
msgid "    use Illuminate\\Queue\\Middleware\\RateLimited;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:444 docs/master/queues.md:443
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [new RateLimited('backups')];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:446 docs/master/queues.md:445
msgid "Releasing a rate limited job back onto the queue will still increment the job's total number of `attempts`. You may wish to tune your `tries` and `maxExceptions` properties on your job class accordingly. Or, you may wish to use the [`retryUntil` method](#time-based-attempts) to define the amount of time until the job should no longer be attempted."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:448 docs/master/queues.md:447
#, no-wrap
msgid "> {tip} If you are using Redis, you may use the `Illuminate\\Queue\\Middleware\\RateLimitedWithRedis` middleware, which is fine-tuned for Redis and more efficient than the basic rate limiting middleware.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:450 docs/master/queues.md:449
#, no-wrap
msgid "<a name=\"preventing-job-overlaps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:450 docs/master/queues.md:449
#, no-wrap
msgid "Preventing Job Overlaps"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:453 docs/master/queues.md:452
msgid "Laravel includes an `Illuminate\\Queue\\Middleware\\WithoutOverlapping` middleware that allows you to prevent job overlaps based on an arbitrary key. This can be helpful when a queued job is modifying a resource that should only be modified by one job at a time."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:455 docs/master/queues.md:454
msgid "For example, let's imagine you have a queued job that updates a user's credit score and you want to prevent credit score update job overlaps for the same user ID. To accomplish this, you can return the `WithoutOverlapping` middleware from your job's `middleware` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:457 docs/master/queues.md:456
#, no-wrap
msgid "    use Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:467 docs/master/queues.md:466
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [new WithoutOverlapping($this->user->id)];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:469 docs/master/queues.md:468
msgid "Any overlapping jobs will be released back to the queue. You may also specify the number of seconds that must elapse before the released job will be attempted again:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:479 docs/master/queues.md:478
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [(new WithoutOverlapping($this->order->id))->releaseAfter(60)];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:481 docs/master/queues.md:480
msgid "If you wish to immediately delete any overlapping jobs so that they will not be retried, you may use the `dontRelease` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:491 docs/master/queues.md:490
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [(new WithoutOverlapping($this->order->id))->dontRelease()];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:493 docs/master/queues.md:492
#, no-wrap
msgid "> {note} The `WithoutOverlapping` middleware requires a cache driver that supports [locks](/docs/{{version}}/cache#atomic-locks). Currently, the `memcached`, `redis`, `dynamodb`, `database`, `file`, and `array` cache drivers support atomic locks.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:495
#, no-wrap
msgid "<a name=\"throttling-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:495
#, no-wrap
msgid "Throttling Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:498
msgid "Laravel includes a `Illuminate\\Queue\\Middleware\\ThrottlesExceptions` middleware that allows you to throttle exceptions. Once the job throws a given number of exceptions, all further attempts to execute the job are delayed until a specified time interval lapses. This middleware is particularly useful for jobs that interact with third-party services that are unstable."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:500
msgid "For example, let's imagine a queued job that interacts with an third-party API that begins throwing exceptions. To throttle exceptions, you can return the `ThrottlesExceptions` middleware from your job's `middleware` method. Typically, this middleware should be paired with a job that implements [time based attempts](#time-based-attempts):"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:502 docs/8.x/queues.md:528 docs/8.x/queues.md:542
#, no-wrap
msgid "    use Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:512
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [new ThrottlesExceptions(10, 5)];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:522
#, no-wrap
msgid "    /**\n"
"     * Determine the time at which the job should timeout.\n"
"     *\n"
"     * @return \\DateTime\n"
"     */\n"
"    public function retryUntil()\n"
"    {\n"
"        return now()->addMinutes(30);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:524
msgid "The first constructor argument accepted by the middleware is the number of exceptions the job can throw before being throttled, while the second constructor argument is the number of minutes that should elapse before the job is attempted again once it has been throttled. In the code example above, if the job throws 10 exceptions within 5 minutes, we will wait 5 minutes before attempting the job again."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:526
msgid "When a job throws an exception but the exception threshold has not yet been reached, the job will typically be retried immediately. However, you may specify the number of seconds such a job should be delayed by calling the `backoff` method when attaching the middleware to the job:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:538
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [(new ThrottlesExceptions(10, 5))->backoff(5)];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:540
msgid "Internally, this middleware uses Laravel's cache system to implement rate limiting, and the job's class name is utilized as the cache \"key\". You may override this key by calling the `by` method when attaching the middleware to your job. This may be useful if you have multiple jobs interacting with the same third-party service and you would like them to share a common throttling \"bucket\":"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:552
#, no-wrap
msgid "    /**\n"
"     * Get the middleware the job should pass through.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function middleware()\n"
"    {\n"
"        return [(new ThrottlesExceptions(10, 10))->by('key')];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:554
#, no-wrap
msgid "> {tip} If you are using Redis, you may use the `Illuminate\\Queue\\Middleware\\ThrottlesExceptionsWithRedis` middleware, which is fine-tuned for Redis and more efficient than the basic exception throttling middleware.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:556 docs/master/queues.md:494
#, no-wrap
msgid "<a name=\"dispatching-jobs\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:556 docs/master/queues.md:494
#, no-wrap
msgid "Dispatching Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:559 docs/master/queues.md:497
msgid "Once you have written your job class, you may dispatch it using the `dispatch` method on the job itself. The arguments passed to the `dispatch` method will be given to the job's constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:568 docs/8.x/queues.md:606 docs/8.x/queues.md:659
#: docs/8.x/queues.md:781 docs/8.x/queues.md:840 docs/master/queues.md:506
#: docs/master/queues.md:544 docs/master/queues.md:597
#: docs/master/queues.md:719 docs/master/queues.md:778
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Models\\Podcast;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:580 docs/8.x/queues.md:618 docs/8.x/queues.md:671
#: docs/8.x/queues.md:793 docs/8.x/queues.md:852 docs/master/queues.md:518
#: docs/master/queues.md:556 docs/master/queues.md:609
#: docs/master/queues.md:731 docs/master/queues.md:790
#, no-wrap
msgid "    class PodcastController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new podcast.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $podcast = Podcast::create(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:582 docs/8.x/queues.md:620 docs/master/queues.md:520
#: docs/master/queues.md:558
#, no-wrap
msgid "            // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:586 docs/master/queues.md:524
#, no-wrap
msgid "            ProcessPodcast::dispatch($podcast);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:588 docs/master/queues.md:526
msgid "If you would like to conditionally dispatch a job, you may use the `dispatchIf` and `dispatchUnless` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:590 docs/master/queues.md:528
#, no-wrap
msgid "    ProcessPodcast::dispatchIf($accountActive, $podcast);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:592 docs/master/queues.md:530
#, no-wrap
msgid "    ProcessPodcast::dispatchUnless($accountSuspended, $podcast);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:594 docs/master/queues.md:532
#, no-wrap
msgid "<a name=\"delayed-dispatching\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:594 docs/master/queues.md:532
#, no-wrap
msgid "Delayed Dispatching"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:597 docs/master/queues.md:535
msgid "If you would like to specify that a job should not be immediately available for processing by a queue worker, you may use the `delay` method when dispatching the job. For example, let's specify that a job should not be available for processing until 10 minutes after it has been dispatched:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:625 docs/master/queues.md:563
#, no-wrap
msgid "            ProcessPodcast::dispatch($podcast)\n"
"                        ->delay(now()->addMinutes(10));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:627 docs/master/queues.md:565
#, no-wrap
msgid "> {note} The Amazon SQS queue service has a maximum delay time of 15 minutes.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:629 docs/master/queues.md:567
#, no-wrap
msgid "<a name=\"dispatching-after-the-response-is-sent-to-browser\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:629 docs/master/queues.md:567
#, no-wrap
msgid "Dispatching After The Response Is Sent To Browser"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:632 docs/master/queues.md:570
msgid "Alternatively, the `dispatchAfterResponse` method delays dispatching a job until after the HTTP response is sent to the user's browser. This will still allow the user to begin using the application even though a queued job is still executing. This should typically only be used for jobs that take about a second, such as sending an email. Since they are processed within the current HTTP request, jobs dispatched in this fashion do not require a queue worker to be running in order for them to be processed:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:634 docs/master/queues.md:572
#, no-wrap
msgid "    use App\\Jobs\\SendNotification;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:636 docs/master/queues.md:574
#, no-wrap
msgid "    SendNotification::dispatchAfterResponse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:638 docs/master/queues.md:576
msgid "You may also `dispatch` a closure and chain the `afterResponse` method onto the `dispatch` helper to execute a closure after the HTTP response has been sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:641 docs/master/queues.md:579
#, no-wrap
msgid "    use App\\Mail\\WelcomeMessage;\n"
"    use Illuminate\\Support\\Facades\\Mail;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:645 docs/master/queues.md:583
#, no-wrap
msgid "    dispatch(function () {\n"
"        Mail::to('taylor@example.com')->send(new WelcomeMessage);\n"
"    })->afterResponse();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:647 docs/master/queues.md:585
#, no-wrap
msgid "<a name=\"synchronous-dispatching\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:647 docs/master/queues.md:585
#, no-wrap
msgid "Synchronous Dispatching"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:650 docs/master/queues.md:588
msgid "If you would like to dispatch a job immediately (synchronously), you may use the `dispatchSync` method. When using this method, the job will not be queued and will be executed immediately within the current process:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:673 docs/8.x/queues.md:795 docs/8.x/queues.md:854
#: docs/master/queues.md:611 docs/master/queues.md:733
#: docs/master/queues.md:792
#, no-wrap
msgid "            // Create podcast...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:677 docs/master/queues.md:615
#, no-wrap
msgid "            ProcessPodcast::dispatchSync($podcast);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:679 docs/master/queues.md:617
#, no-wrap
msgid "<a name=\"jobs-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:679 docs/master/queues.md:617
#, no-wrap
msgid "Jobs & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:682 docs/master/queues.md:620
msgid "While it is perfectly fine to dispatch jobs within database transactions, you should take special care to ensure that your job will actually be able to execute successfully. When dispatching a job within a transaction, it is possible that the job will be processed by a worker before the transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:684 docs/master/queues.md:622
msgid "Thankfully, Laravel provides several methods of working around this problem. First, you may set the `after_commit` connection option in your queue connection's configuration array:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:690 docs/master/queues.md:628
#, no-wrap
msgid "    'redis' => [\n"
"        'driver' => 'redis',\n"
"        // ...\n"
"        'after_commit' => true,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:692 docs/master/queues.md:630
msgid "When the `after_commit` option is `true`, you may dispatch jobs within database transactions; however, Laravel will wait until all open database transactions have been committed before actually dispatching the job. Of course, if no database transactions are currently open, the job will be dispatched immediately."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:694 docs/master/queues.md:632
msgid "If a transaction is rolled back due to an exception that occurs during the transaction, the dispatched jobs that were dispatched during that transaction will be discarded."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:696 docs/master/queues.md:634
#, no-wrap
msgid "> {tip} Setting the `after_commit` configuration option to `true` will also cause any queued event listeners, mailables, notifications, and broadcast events to be dispatched after all open database transactions have been committed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:698 docs/master/queues.md:636
#, no-wrap
msgid "<a name=\"specifying-commit-dispatch-behavior-inline\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:698 docs/master/queues.md:636
#, no-wrap
msgid "Specifying Commit Dispatch Behavior Inline"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:701 docs/master/queues.md:639
msgid "If you do not set the `after_commit` queue connection configuration option to `true`, you may still indicate that a specific job should be dispatched after all open database transactions have been committed. To accomplish this, you may chain the `afterCommit` method onto your dispatch operation:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:705 docs/master/queues.md:643
#, no-wrap
msgid "    ProcessPodcast::dispatch($podcast)->afterCommit();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:707 docs/master/queues.md:645
msgid "Likewise, if the `after_commit` configuration option is set to `true`, you may indicate that a specific job should be dispatched immediately without waiting for any open database transactions to commit:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:709 docs/master/queues.md:647
#, no-wrap
msgid "    ProcessPodcast::dispatch($podcast)->beforeCommit();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:711 docs/master/queues.md:649
#, no-wrap
msgid "<a name=\"job-chaining\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:711 docs/master/queues.md:649
#, no-wrap
msgid "Job Chaining"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:714 docs/master/queues.md:652
msgid "Job chaining allows you to specify a list of queued jobs that should be run in sequence after the primary job has executed successfully. If one job in the sequence fails, the rest of the jobs will not be run. To execute a queued job chain, you may use the `chain` method provided by the `Bus` facade. Laravel's command bus is a lower level component that queued job dispatching is built on top of:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:719 docs/master/queues.md:657
#, no-wrap
msgid "    use App\\Jobs\\OptimizePodcast;\n"
"    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Jobs\\ReleasePodcast;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:725 docs/master/queues.md:663
#, no-wrap
msgid "    Bus::chain([\n"
"        new ProcessPodcast,\n"
"        new OptimizePodcast,\n"
"        new ReleasePodcast,\n"
"    ])->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:727 docs/master/queues.md:665
msgid "In addition to chaining job class instances, you may also chain closures:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:735 docs/master/queues.md:673
#, no-wrap
msgid "    Bus::chain([\n"
"        new ProcessPodcast,\n"
"        new OptimizePodcast,\n"
"        function () {\n"
"            Podcast::update(...);\n"
"        },\n"
"    ])->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:737 docs/master/queues.md:675
#, no-wrap
msgid "> {note} Deleting jobs using the `$this->delete()` method within the job will not prevent chained jobs from being processed. The chain will only stop executing if a job in the chain fails.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:739 docs/master/queues.md:677
#, no-wrap
msgid "<a name=\"chain-connection-queue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:739 docs/master/queues.md:677
#, no-wrap
msgid "Chain Connection & Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:742 docs/master/queues.md:680
msgid "If you would like to specify the connection and queue that should be used for the chained jobs, you may use the `onConnection` and `onQueue` methods. These methods specify the queue connection and queue name that should be used unless the queued job is explicitly assigned a different connection / queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:748 docs/master/queues.md:686
#, no-wrap
msgid "    Bus::chain([\n"
"        new ProcessPodcast,\n"
"        new OptimizePodcast,\n"
"        new ReleasePodcast,\n"
"    ])->onConnection('redis')->onQueue('podcasts')->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:750 docs/master/queues.md:688
#, no-wrap
msgid "<a name=\"chain-failures\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:750 docs/master/queues.md:688
#, no-wrap
msgid "Chain Failures"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:753 docs/master/queues.md:691
msgid "When chaining jobs, you may use the `catch` method to specify a closure that should be invoked if a job within the chain fails. The given callback will receive the `Throwable` instance that caused the job failure:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:756 docs/master/queues.md:694
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:764 docs/master/queues.md:702
#, no-wrap
msgid "    Bus::chain([\n"
"        new ProcessPodcast,\n"
"        new OptimizePodcast,\n"
"        new ReleasePodcast,\n"
"    ])->catch(function (Throwable $e) {\n"
"        // A job within the chain has failed...\n"
"    })->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:766 docs/master/queues.md:704
#, no-wrap
msgid "<a name=\"customizing-the-queue-and-connection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:766 docs/master/queues.md:704
#, no-wrap
msgid "Customizing The Queue & Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:769 docs/master/queues.md:707
#, no-wrap
msgid "<a name=\"dispatching-to-a-particular-queue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:769 docs/master/queues.md:707
#, no-wrap
msgid "Dispatching To A Particular Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:772 docs/master/queues.md:710
msgid "By pushing jobs to different queues, you may \"categorize\" your queued jobs and even prioritize how many workers you assign to various queues. Keep in mind, this does not push jobs to different queue \"connections\" as defined by your queue configuration file, but only to specific queues within a single connection. To specify the queue, use the `onQueue` method when dispatching the job:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:799 docs/master/queues.md:737
#, no-wrap
msgid "            ProcessPodcast::dispatch($podcast)->onQueue('processing');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:801 docs/master/queues.md:739
msgid "Alternatively, you may specify the job's queue by calling the `onQueue` method within the job's constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:811 docs/8.x/queues.md:876 docs/master/queues.md:749
#: docs/master/queues.md:814
#, no-wrap
msgid "     use Illuminate\\Bus\\Queueable;\n"
"     use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"     use Illuminate\\Foundation\\Bus\\Dispatchable;\n"
"     use Illuminate\\Queue\\InteractsWithQueue;\n"
"     use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:826 docs/master/queues.md:764
#, no-wrap
msgid "        /**\n"
"         * Create a new job instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->onQueue('processing');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:828 docs/master/queues.md:766
#, no-wrap
msgid "<a name=\"dispatching-to-a-particular-connection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:828 docs/master/queues.md:766
#, no-wrap
msgid "Dispatching To A Particular Connection"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:831 docs/master/queues.md:769
msgid "If your application interacts with multiple queue connections, you may specify which connection to push a job to using the `onConnection` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:858 docs/master/queues.md:796
#, no-wrap
msgid "            ProcessPodcast::dispatch($podcast)->onConnection('sqs');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:860 docs/master/queues.md:798
msgid "You may chain the `onConnection` and `onQueue` methods together to specify the connection and the queue for a job:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:864 docs/master/queues.md:802
#, no-wrap
msgid "    ProcessPodcast::dispatch($podcast)\n"
"                  ->onConnection('sqs')\n"
"                  ->onQueue('processing');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:866 docs/master/queues.md:804
msgid "Alternatively, you may specify the job's connection by calling the `onConnection` method within the job's constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:891 docs/master/queues.md:829
#, no-wrap
msgid "        /**\n"
"         * Create a new job instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->onConnection('sqs');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:893 docs/master/queues.md:831
#, no-wrap
msgid "<a name=\"max-job-attempts-and-timeout\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:893 docs/master/queues.md:831
#, no-wrap
msgid "Specifying Max Job Attempts / Timeout Values"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:896 docs/master/queues.md:834
#, no-wrap
msgid "<a name=\"max-attempts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:896 docs/master/queues.md:834
#, no-wrap
msgid "Max Attempts"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:899 docs/master/queues.md:837
msgid "If one of your queued jobs is encountering an error, you likely do not want it to keep retrying indefinitely. Therefore, Laravel provides various ways to specify how many times or for how long a job may be attempted."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:901 docs/master/queues.md:839
msgid "One approach to specifying the maximum number of times a job may be attempted is via the `--tries` switch on the Artisan command line. This will apply to all jobs processed by the worker unless the job being processed specifies a more specific number of times it may be attempted:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:903 docs/master/queues.md:841
#, no-wrap
msgid "    php artisan queue:work --tries=3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:905 docs/master/queues.md:843
msgid "If a job exceeds its maximum number of attempts, it will be considered a \"failed\" job. For more information on handling failed jobs, consult the [failed job documentation](#dealing-with-failed-jobs)."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:907 docs/master/queues.md:845
msgid "You may take a more granular approach by defining the maximum number of times a job may be attempted on the job class itself. If the maximum number of attempts is specified on the job, it will take precedence over the `--tries` value provided on the command line:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:921 docs/master/queues.md:859
#, no-wrap
msgid "    class ProcessPodcast implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * The number of times the job may be attempted.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $tries = 5;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:923 docs/master/queues.md:861
#, no-wrap
msgid "<a name=\"time-based-attempts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:923 docs/master/queues.md:861
#, no-wrap
msgid "Time Based Attempts"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:926 docs/master/queues.md:864
msgid "As an alternative to defining how many times a job may be attempted before it fails, you may define a time at which the job should no longer be attempted. This allows a job to be attempted any number of times within a given time frame. To define the time at which a job should no longer be attempted, add a `retryUntil` method to your job class. This method should return a `DateTime` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:936 docs/master/queues.md:874
#, no-wrap
msgid "    /**\n"
"     * Determine the time at which the job should timeout.\n"
"     *\n"
"     * @return \\DateTime\n"
"     */\n"
"    public function retryUntil()\n"
"    {\n"
"        return now()->addMinutes(10);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:938 docs/master/queues.md:876
#, no-wrap
msgid "> {tip} You may also define a `tries` property or `retryUntil` method on your [queued event listeners](/docs/{{version}}/events#queued-event-listeners).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:940 docs/master/queues.md:878
#, no-wrap
msgid "<a name=\"max-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:940 docs/master/queues.md:878
#, no-wrap
msgid "Max Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:943 docs/master/queues.md:881
msgid "Sometimes you may wish to specify that a job may be attempted many times, but should fail if the retries are triggered by a given number of unhandled exceptions (as opposed to being released by the `release` method directly). To accomplish this, you may define a `maxExceptions` property on your job class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:958 docs/master/queues.md:896
#, no-wrap
msgid "    class ProcessPodcast implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * The number of times the job may be attempted.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $tries = 25;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:965 docs/master/queues.md:903
#, no-wrap
msgid "        /**\n"
"         * The maximum number of unhandled exceptions to allow before failing.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $maxExceptions = 3;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:981 docs/master/queues.md:919
#, no-wrap
msgid "        /**\n"
"         * Execute the job.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function handle()\n"
"        {\n"
"            Redis::throttle('key')->allow(10)->every(60)->then(function () {\n"
"                // Lock obtained, process the podcast...\n"
"            }, function () {\n"
"                // Unable to obtain lock...\n"
"                return $this->release(10);\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:983 docs/master/queues.md:921
msgid "In this example, the job is released for ten seconds if the application is unable to obtain a Redis lock and will continue to be retried up to 25 times. However, the job will fail if three unhandled exceptions are thrown by the job."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:988 docs/master/queues.md:926
#, no-wrap
msgid "> {note} The `pcntl` PHP extension must be installed in order to specify job timeouts.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:990 docs/master/queues.md:928
msgid "Often, you know roughly how long you expect your queued jobs to take. For this reason, Laravel allows you to specify a \"timeout\" value. If a job is processing for longer than the number of seconds specified by the timeout value, the worker processing the job will exit with an error. Typically, the worker will be restarted automatically by a [process manager configured on your server](#supervisor-configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:992 docs/master/queues.md:930
msgid "The maximum number of seconds that jobs can run may be specified using the `--timeout` switch on the Artisan command line:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:994 docs/master/queues.md:932
#, no-wrap
msgid "    php artisan queue:work --timeout=30\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:996 docs/master/queues.md:934
msgid "If the job exceeds its maximum attempts by continually timing out, it will be marked as failed."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:998 docs/master/queues.md:936
msgid "You may also define the maximum number of seconds a job should be allowed to run on the job class itself. If the timeout is specified on the job, it will take precedence over any timeout specified on the command line:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1012 docs/master/queues.md:950
#, no-wrap
msgid "    class ProcessPodcast implements ShouldQueue\n"
"    {\n"
"        /**\n"
"         * The number of seconds the job can run before timing out.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        public $timeout = 120;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1014 docs/master/queues.md:952
msgid "Sometimes, IO blocking processes such as sockets or outgoing HTTP connections may not respect your specified timeout. Therefore, when using these features, you should always attempt to specify a timeout using their APIs as well. For example, when using Guzzle, you should always specify a connection and request timeout value."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1019 docs/master/queues.md:957
msgid "If an exception is thrown while the job is being processed, the job will automatically be released back onto the queue so it may be attempted again. The job will continue to be released until it has been attempted the maximum number of times allowed by your application. The maximum number of attempts is defined by the `--tries` switch used on the `queue:work` Artisan command. Alternatively, the maximum number of attempts may be defined on the job class itself. More information on running the queue worker [can be found below](#running-the-queue-worker)."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1021 docs/master/queues.md:959
#, no-wrap
msgid "<a name=\"manually-releasing-a-job\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1021 docs/master/queues.md:959
#, no-wrap
msgid "Manually Releasing A Job"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1024 docs/master/queues.md:962
msgid "Sometimes you may wish to manually release a job back onto the queue so that it can be attempted again at a later time. You may accomplish this by calling the `release` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1033 docs/8.x/queues.md:1054 docs/master/queues.md:971
#: docs/master/queues.md:992
#, no-wrap
msgid "    /**\n"
"     * Execute the job.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1036 docs/master/queues.md:974
#, no-wrap
msgid "        $this->release();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1038 docs/master/queues.md:976
msgid "By default, the `release` method will release the job back onto the queue for immediate processing. However, by passing an integer to the `release` method you may instruct the queue to not make the job available for processing until a given number of seconds has elapsed:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1040 docs/master/queues.md:978
#, no-wrap
msgid "    $this->release(10)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1042 docs/master/queues.md:980
#, no-wrap
msgid "<a name=\"manually-failing-a-job\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1042 docs/master/queues.md:980
#, no-wrap
msgid "Manually Failing A Job"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1045 docs/master/queues.md:983
msgid "Occasionally you may need to manually mark a job as \"failed\". To do so, you may call the `fail` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1057 docs/master/queues.md:995
#, no-wrap
msgid "        $this->fail();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1059 docs/master/queues.md:997
msgid "If you would like to mark your job as failed because of an exception that you have caught, you may pass the exception to the `fail` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1061 docs/master/queues.md:999
#, no-wrap
msgid "    $this->fail($exception);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1063 docs/master/queues.md:1001
#, no-wrap
msgid "> {tip} For more information on failed jobs, check out the [documentation on dealing with job failures](#dealing-with-failed-jobs).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1065 docs/8.x/releases.md:151 docs/master/queues.md:1003
#: docs/master/releases.md:151
#, no-wrap
msgid "<a name=\"job-batching\"></a>\n"
msgstr ""

#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  releases.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  queues.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  releases.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/queues.md:1065 docs/8.x/releases.md:151 docs/master/queues.md:1003
#: docs/master/releases.md:151
#, no-wrap
msgid "Job Batching"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1068 docs/master/queues.md:1006
msgid "Laravel's job batching feature allows you to easily execute a batch of jobs and then perform some action when the batch of jobs has completed executing. Before getting started, you should create a database migration to build a table to contain meta information about your job batches, such as their completion percentage. This migration may be generated using the `queue:batches-table` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1070 docs/master/queues.md:1008
#, no-wrap
msgid "    php artisan queue:batches-table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1074 docs/master/queues.md:1012
#, no-wrap
msgid "<a name=\"defining-batchable-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1074 docs/master/queues.md:1012
#, no-wrap
msgid "Defining Batchable Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1077 docs/master/queues.md:1015
msgid "To define a batchable job, you should [create a queueable job](#creating-jobs) as normal; however, you should add the `Illuminate\\Bus\\Batchable` trait to the job class. This trait provides access to a `batch` method which may be used to retrieve the current batch that the job is executing within:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1088 docs/master/queues.md:1026
#, no-wrap
msgid "    use Illuminate\\Bus\\Batchable;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Foundation\\Bus\\Dispatchable;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1092 docs/master/queues.md:1030
#, no-wrap
msgid "    class ImportCsv implements ShouldQueue\n"
"    {\n"
"        use Batchable, Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1102 docs/master/queues.md:1040
#, no-wrap
msgid "        /**\n"
"         * Execute the job.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function handle()\n"
"        {\n"
"            if ($this->batch()->cancelled()) {\n"
"                // Determine if the batch has been cancelled...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1105 docs/master/queues.md:1043
#, no-wrap
msgid "                return;\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1109 docs/master/queues.md:1047
#, no-wrap
msgid "            // Import a portion of the CSV file...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1111 docs/master/queues.md:1049
#, no-wrap
msgid "<a name=\"dispatching-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1111 docs/master/queues.md:1049
#, no-wrap
msgid "Dispatching Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1114 docs/master/queues.md:1052
msgid "To dispatch a batch of jobs, you should use the `batch` method of the `Bus` facade. Of course, batching is primarily useful when combined with completion callbacks. So, you may use the `then`, `catch`, and `finally` methods to define completion callbacks for the batch. Each of these callbacks will receive an `Illuminate\\Bus\\Batch` instance when they are invoked. In this example, we will imagine we are queueing a batch of jobs that each process a given number of rows from a CSV file:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1119 docs/master/queues.md:1057
#, no-wrap
msgid "    use App\\Jobs\\ImportCsv;\n"
"    use Illuminate\\Bus\\Batch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1133 docs/master/queues.md:1071
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        new ImportCsv(1, 100),\n"
"        new ImportCsv(101, 200),\n"
"        new ImportCsv(201, 300),\n"
"        new ImportCsv(301, 400),\n"
"        new ImportCsv(401, 500),\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->catch(function (Batch $batch, Throwable $e) {\n"
"        // First batch job failure detected...\n"
"    })->finally(function (Batch $batch) {\n"
"        // The batch has finished executing...\n"
"    })->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1135 docs/8.x/releases.md:180 docs/master/queues.md:1073
#: docs/master/releases.md:180
#, no-wrap
msgid "    return $batch->id;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1137 docs/master/queues.md:1075
#, no-wrap
msgid "The batch's ID, which may be accessed via the `$batch->id` property, may be used to [query the Laravel command bus](#inspecting-batches) for information about the batch after it has been dispatched.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1139 docs/master/queues.md:1077
#, no-wrap
msgid "<a name=\"naming-batches\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1139 docs/master/queues.md:1077
#, no-wrap
msgid "Naming Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1142 docs/master/queues.md:1080
msgid "Some tools such as Laravel Horizon and Laravel Telescope may provide more user-friendly debug information for batches if batches are named. To assign an arbitrary name to a batch, you may call the `name` method while defining the batch:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1148 docs/master/queues.md:1086
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        // ...\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->name('Import CSV')->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1150 docs/master/queues.md:1088
#, no-wrap
msgid "<a name=\"batch-connection-queue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1150 docs/master/queues.md:1088
#, no-wrap
msgid "Batch Connection & Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1153 docs/master/queues.md:1091
msgid "If you would like to specify the connection and queue that should be used for the batched jobs, you may use the `onConnection` and `onQueue` methods. All batched jobs must execute within the same connection and queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1159 docs/master/queues.md:1097
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        // ...\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->onConnection('redis')->onQueue('imports')->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1161 docs/master/queues.md:1099
#, no-wrap
msgid "<a name=\"chains-within-batches\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1161 docs/master/queues.md:1099
#, no-wrap
msgid "Chains Within Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1164 docs/master/queues.md:1102
msgid "You may define a set of [chained jobs](#job-chaining) within a batch by placing the chained jobs within an array. For example, we may execute two job chains in parallel and execute a callback when both job chains have finished processing:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1169 docs/master/queues.md:1107
#, no-wrap
msgid "    use App\\Jobs\\ReleasePodcast;\n"
"    use App\\Jobs\\SendPodcastReleaseNotification;\n"
"    use Illuminate\\Bus\\Batch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1182 docs/master/queues.md:1120
#, no-wrap
msgid "    Bus::batch([\n"
"        [\n"
"            new ReleasePodcast(1),\n"
"            new SendPodcastReleaseNotification(1),\n"
"        ],\n"
"        [\n"
"            new ReleasePodcast(2),\n"
"            new SendPodcastReleaseNotification(2),\n"
"        ],\n"
"    ])->then(function (Batch $batch) {\n"
"        // ...\n"
"    })->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1184 docs/master/queues.md:1122
#, no-wrap
msgid "<a name=\"adding-jobs-to-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1184 docs/master/queues.md:1122
#, no-wrap
msgid "Adding Jobs To Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1187 docs/master/queues.md:1125
msgid "Sometimes it may be useful to add additional jobs to a batch from within a batched job. This pattern can be useful when you need to batch thousands of jobs which may take too long to dispatch during a web request. So, instead, you may wish to dispatch an initial batch of \"loader\" jobs that hydrate the batch with even more jobs:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1195 docs/master/queues.md:1133
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        new LoadImportBatch,\n"
"        new LoadImportBatch,\n"
"        new LoadImportBatch,\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->name('Import Contacts')->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1197 docs/master/queues.md:1135
msgid "In this example, we will use the `LoadImportBatch` job to hydrate the batch with additional jobs. To accomplish this, we may use the `add` method on the batch instance that may be accessed via the job's `batch` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1200 docs/master/queues.md:1138
#, no-wrap
msgid "    use App\\Jobs\\ImportContacts;\n"
"    use Illuminate\\Support\\Collection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1211 docs/8.x/queues.md:1301 docs/master/queues.md:1149
#: docs/master/queues.md:1239
#, no-wrap
msgid "    /**\n"
"     * Execute the job.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        if ($this->batch()->cancelled()) {\n"
"            return;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1216 docs/master/queues.md:1154
#, no-wrap
msgid "        $this->batch()->add(Collection::times(1000, function () {\n"
"            return new ImportContacts;\n"
"        }));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1218 docs/master/queues.md:1156
#, no-wrap
msgid "> {note} You may only add jobs to a batch from within a job that belongs to the same batch.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1220 docs/master/queues.md:1158
#, no-wrap
msgid "<a name=\"inspecting-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1220 docs/master/queues.md:1158
#, no-wrap
msgid "Inspecting Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1223 docs/master/queues.md:1161
msgid "The `Illuminate\\Bus\\Batch` instance that is provided to batch completion callbacks has a variety of properties and methods to assist you in interacting with and inspecting a given batch of jobs:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1226 docs/master/queues.md:1164
#, no-wrap
msgid "    // The UUID of the batch...\n"
"    $batch->id;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1229 docs/master/queues.md:1167
#, no-wrap
msgid "    // The name of the batch (if applicable)...\n"
"    $batch->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1232 docs/master/queues.md:1170
#, no-wrap
msgid "    // The number of jobs assigned to the batch...\n"
"    $batch->totalJobs;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1235 docs/master/queues.md:1173
#, no-wrap
msgid "    // The number of jobs that have not been processed by the queue...\n"
"    $batch->pendingJobs;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1238 docs/master/queues.md:1176
#, no-wrap
msgid "    // The number of jobs that have failed...\n"
"    $batch->failedJobs;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1241 docs/master/queues.md:1179
#, no-wrap
msgid "    // The number of jobs that have been processed thus far...\n"
"    $batch->processedJobs();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1244 docs/master/queues.md:1182
#, no-wrap
msgid "    // The completion percentage of the batch (0-100)...\n"
"    $batch->progress();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1247 docs/master/queues.md:1185
#, no-wrap
msgid "    // Indicates if the batch has finished executing...\n"
"    $batch->finished();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1250 docs/master/queues.md:1188
#, no-wrap
msgid "    // Cancel the execution of the batch...\n"
"    $batch->cancel();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1253 docs/master/queues.md:1191
#, no-wrap
msgid "    // Indicates if the batch has been cancelled...\n"
"    $batch->cancelled();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1255 docs/master/queues.md:1193
#, no-wrap
msgid "<a name=\"returning-batches-from-routes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1255 docs/master/queues.md:1193
#, no-wrap
msgid "Returning Batches From Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1258 docs/master/queues.md:1196
msgid "All `Illuminate\\Bus\\Batch` instances are JSON serializable, meaning you can return them directly from one of your application's routes to retrieve a JSON payload containing information about the batch, including its completion progress. This makes it convenient to display information about the batch's completion progress in your application's UI."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1260 docs/master/queues.md:1198
msgid "To retrieve a batch by its ID, you may use the `Bus` facade's `findBatch` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1263 docs/master/queues.md:1201
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1267 docs/master/queues.md:1205
#, no-wrap
msgid "    Route::get('/batch/{batchId}', function (string $batchId) {\n"
"        return Bus::findBatch($batchId);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1269 docs/master/queues.md:1207
#, no-wrap
msgid "<a name=\"cancelling-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1269 docs/master/queues.md:1207
#, no-wrap
msgid "Cancelling Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1272 docs/master/queues.md:1210
msgid "Sometimes you may need to cancel a given batch's execution. This can be accomplished by calling the `cancel` method on the `Illuminate\\Bus\\Batch` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1283 docs/master/queues.md:1221
#, no-wrap
msgid "    /**\n"
"     * Execute the job.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        if ($this->user->exceedsImportLimit()) {\n"
"            return $this->batch()->cancel();\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1288 docs/master/queues.md:1226
#, no-wrap
msgid "        if ($this->batch()->cancelled()) {\n"
"            return;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1290 docs/master/queues.md:1228
msgid "As you may have noticed in previous examples, batched jobs should typically check to see if the batch has been cancelled at the beginning of their `handle` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1304 docs/master/queues.md:1242
#, no-wrap
msgid "        // Continue processing...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1306 docs/master/queues.md:1244
#, no-wrap
msgid "<a name=\"batch-failures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1306 docs/master/queues.md:1244
#, no-wrap
msgid "Batch Failures"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1309 docs/master/queues.md:1247
msgid "When a batched job fails, the `catch` callback (if assigned) will be invoked. This callback is only invoked for the first job that fails within the batch."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1311 docs/master/queues.md:1249
#, no-wrap
msgid "<a name=\"allowing-failures\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1311 docs/master/queues.md:1249
#, no-wrap
msgid "Allowing Failures"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1314 docs/master/queues.md:1252
msgid "When a job within a batch fails, Laravel will automatically mark the batch as \"cancelled\". If you wish, you may disable this behavior so that a job failure does not automatically mark the batch as cancelled. This may be accomplished by calling the `allowFailures` method while dispatching the batch:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1320 docs/master/queues.md:1258
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        // ...\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->allowFailures()->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1322 docs/master/queues.md:1260
#, no-wrap
msgid "<a name=\"retrying-failed-batch-jobs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1322 docs/master/queues.md:1260
#, no-wrap
msgid "Retrying Failed Batch Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1325 docs/master/queues.md:1263
msgid "For convenience, Laravel provides a `queue:retry-batch` Artisan command that allows you to easily retry all of the failed jobs for a given batch. The `queue:retry-batch` command accepts the UUID of the batch whose failed jobs should be retried:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/queues.md:1326 docs/master/queues.md:1264
#, no-wrap
msgid "php artisan queue:retry-batch 32dbc76c-4f82-4749-b610-a639fe0099b5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1331 docs/master/queues.md:1269
#, no-wrap
msgid "<a name=\"pruning-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1331 docs/master/queues.md:1269
#, no-wrap
msgid "Pruning Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1334 docs/master/queues.md:1272
msgid "Without pruning, the `job_batches` table can accumulate records very quickly. To mitigate this, you should [schedule](/docs/{{version}}/scheduling) the `queue:prune-batches` Artisan command to run daily:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1336 docs/master/queues.md:1274
#, no-wrap
msgid "    $schedule->command('queue:prune-batches')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1338 docs/master/queues.md:1276
msgid "By default, all finished batches that are more than 24 hours old will be pruned. You may use the `hours` option when calling the command to determine how long to retain batch data. For example, the following command will delete all batches that finished over 48 hours ago:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1340 docs/master/queues.md:1278
#, no-wrap
msgid "    $schedule->command('queue:prune-batches --hours=48')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1342 docs/master/queues.md:1280
#, no-wrap
msgid "<a name=\"queueing-closures\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:1342 docs/master/queues.md:1280
#, no-wrap
msgid "Queueing Closures"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1345 docs/master/queues.md:1283
msgid "Instead of dispatching a job class to the queue, you may also dispatch a closure. This is great for quick, simple tasks that need to be executed outside of the current request cycle. When dispatching closures to the queue, the closure's code content is cryptographically signed so that it can not be modified in transit:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1347 docs/master/queues.md:1285
#, no-wrap
msgid "    $podcast = App\\Podcast::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1351 docs/master/queues.md:1289
#, no-wrap
msgid "    dispatch(function () use ($podcast) {\n"
"        $podcast->publish();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1353 docs/master/queues.md:1291
msgid "Using the `catch` method, you may provide a closure that should be executed if the queued closure fails to complete successfully after exhausting all of your queue's [configured retry attempts](#max-job-attempts-and-timeout):"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1355 docs/8.x/releases.md:263 docs/master/queues.md:1293
#: docs/master/releases.md:263
#, no-wrap
msgid "    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1361 docs/8.x/releases.md:269 docs/master/queues.md:1299
#: docs/master/releases.md:269
#, no-wrap
msgid "    dispatch(function () use ($podcast) {\n"
"        $podcast->publish();\n"
"    })->catch(function (Throwable $e) {\n"
"        // This job has failed...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1363 docs/master/queues.md:1301
#, no-wrap
msgid "<a name=\"running-the-queue-worker\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:1363 docs/master/queues.md:1301
#, no-wrap
msgid "Running The Queue Worker"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1366 docs/master/queues.md:1304
#, no-wrap
msgid "<a name=\"the-queue-work-command\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1366 docs/master/queues.md:1304
#, no-wrap
msgid "The `queue:work` Command"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1369 docs/master/queues.md:1307
msgid "Laravel includes an Artisan command that will start a queue worker and process new jobs as they are pushed onto the queue. You may run the worker using the `queue:work` Artisan command. Note that once the `queue:work` command has started, it will continue to run until it is manually stopped or you close your terminal:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1371 docs/master/queues.md:1309
#, no-wrap
msgid "    php artisan queue:work\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1373 docs/master/queues.md:1311
#, no-wrap
msgid "> {tip} To keep the `queue:work` process running permanently in the background, you should use a process monitor such as [Supervisor](#supervisor-configuration) to ensure that the queue worker does not stop running.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1375 docs/master/queues.md:1313
msgid "Remember, queue workers, are long-lived processes and store the booted application state in memory. As a result, they will not notice changes in your code base after they have been started. So, during your deployment process, be sure to [restart your queue workers](#queue-workers-and-deployment). In addition, remember that any static state created or modified by your application will not be automatically reset between jobs."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1377 docs/master/queues.md:1315
msgid "Alternatively, you may run the `queue:listen` command. When using the `queue:listen` command, you don't have to manually restart the worker when you want to reload your updated code or reset the application state; however, this command is significantly less efficient than the `queue:work` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1379 docs/master/queues.md:1317
#, no-wrap
msgid "    php artisan queue:listen\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1381 docs/master/queues.md:1319
#, no-wrap
msgid "<a name=\"running-multiple-queue-workers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1381 docs/master/queues.md:1319
#, no-wrap
msgid "Running Multiple Queue Workers"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1384 docs/master/queues.md:1322
msgid "To assign multiple workers to a queue and process jobs concurrently, you should simply start multiple `queue:work` processes. This can either be done locally via multiple tabs in your terminal or in production using your process manager's configuration settings. [When using Supervisor](#supervisor-configuration), you may use the `numprocs` configuration value."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1386 docs/master/queues.md:1324
#, no-wrap
msgid "<a name=\"specifying-the-connection-queue\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1386 docs/master/queues.md:1324
#, no-wrap
msgid "Specifying The Connection & Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1389 docs/master/queues.md:1327
msgid "You may also specify which queue connection the worker should utilize. The connection name passed to the `work` command should correspond to one of the connections defined in your `config/queue.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1391 docs/master/queues.md:1329
#, no-wrap
msgid "    php artisan queue:work redis\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1393 docs/master/queues.md:1331
msgid "You may customize your queue worker even further by only processing particular queues for a given connection. For example, if all of your emails are processed in an `emails` queue on your `redis` queue connection, you may issue the following command to start a worker that only processes that queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1395 docs/master/queues.md:1333
#, no-wrap
msgid "    php artisan queue:work redis --queue=emails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1397 docs/master/queues.md:1335
#, no-wrap
msgid "<a name=\"processing-a-specified-number-of-jobs\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1397 docs/master/queues.md:1335
#, no-wrap
msgid "Processing A Specified Number Of Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1400 docs/master/queues.md:1338
msgid "The `--once` option may be used to instruct the worker to only process a single job from the queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1402 docs/master/queues.md:1340
#, no-wrap
msgid "    php artisan queue:work --once\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1404 docs/master/queues.md:1342
msgid "The `--max-jobs` option may be used to instruct the worker to process the given number of jobs and then exit. This option may be useful when combined with [Supervisor](#supervisor-configuration) so that your workers are automatically restarted after processing a given number of jobs, releasing any memory they may have accumulated:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1406 docs/master/queues.md:1344
#, no-wrap
msgid "    php artisan queue:work --max-jobs=1000\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1408 docs/master/queues.md:1346
#, no-wrap
msgid "<a name=\"processing-all-queued-jobs-then-exiting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1408 docs/master/queues.md:1346
#, no-wrap
msgid "Processing All Queued Jobs & Then Exiting"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1411 docs/master/queues.md:1349
msgid "The `--stop-when-empty` option may be used to instruct the worker to process all jobs and then exit gracefully. This option can be useful when processing Laravel queues within a Docker container if you wish to shutdown the container after the queue is empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1413 docs/master/queues.md:1351
#, no-wrap
msgid "    php artisan queue:work --stop-when-empty\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1415 docs/master/queues.md:1353
#, no-wrap
msgid "<a name=\"processing-jobs-for-a-given-number-of-seconds\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1415 docs/master/queues.md:1353
#, no-wrap
msgid "Processing Jobs For A Given Number Of Seconds"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1418 docs/master/queues.md:1356
msgid "The `--max-time` option may be used to instruct the worker to process jobs for the given number of seconds and then exit. This option may be useful when combined with [Supervisor](#supervisor-configuration) so that your workers are automatically restarted after processing jobs for a given amount of time, releasing any memory they may have accumulated:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1421 docs/master/queues.md:1359
#, no-wrap
msgid "    // Process jobs for one hour and then exit...\n"
"    php artisan queue:work --max-time=3600\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1423 docs/master/queues.md:1361
#, no-wrap
msgid "<a name=\"worker-sleep-duration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1423 docs/master/queues.md:1361
#, no-wrap
msgid "Worker Sleep Duration"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1426 docs/master/queues.md:1364
msgid "When jobs are available on the queue, the worker will keep processing jobs with no delay in between them. However, the `sleep` option determines how many seconds the worker will \"sleep\" if there are no new jobs available. While sleeping, the worker will not process any new jobs - the jobs will be processed after the worker wakes up again."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1428 docs/master/queues.md:1366
#, no-wrap
msgid "    php artisan queue:work --sleep=3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1430 docs/master/queues.md:1368
#, no-wrap
msgid "<a name=\"resource-considerations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1430 docs/master/queues.md:1368
#, no-wrap
msgid "Resource Considerations"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1433 docs/master/queues.md:1371
msgid "Daemon queue workers do not \"reboot\" the framework before processing each job. Therefore, you should release any heavy resources after each job completes. For example, if you are doing image manipulation with the GD library, you should free the memory with `imagedestroy` when you are done processing the image."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1435 docs/master/queues.md:1373
#, no-wrap
msgid "<a name=\"queue-priorities\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1435 docs/master/queues.md:1373
#, no-wrap
msgid "Queue Priorities"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1438 docs/master/queues.md:1376
msgid "Sometimes you may wish to prioritize how your queues are processed. For example, in your `config/queue.php` configuration file, you may set the default `queue` for your `redis` connection to `low`. However, occasionally you may wish to push a job to a `high` priority queue like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1440 docs/master/queues.md:1378
#, no-wrap
msgid "    dispatch((new Job)->onQueue('high'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1442 docs/master/queues.md:1380
msgid "To start a worker that verifies that all of the `high` queue jobs are processed before continuing to any jobs on the `low` queue, pass a comma-delimited list of queue names to the `work` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1444 docs/master/queues.md:1382
#, no-wrap
msgid "    php artisan queue:work --queue=high,low\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1446 docs/master/queues.md:1384
#, no-wrap
msgid "<a name=\"queue-workers-and-deployment\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1446 docs/master/queues.md:1384
#, no-wrap
msgid "Queue Workers & Deployment"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1449 docs/master/queues.md:1387
msgid "Since queue workers are long-lived processes, they will not notice changes to your code without being restarted. So, the simplest way to deploy an application using queue workers is to restart the workers during your deployment process. You may gracefully restart all of the workers by issuing the `queue:restart` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1451 docs/master/queues.md:1389
#, no-wrap
msgid "    php artisan queue:restart\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1453 docs/master/queues.md:1391
msgid "This command will instruct all queue workers to gracefully exit after they finish processing their current job so that no existing jobs are lost. Since the queue workers will exit when the `queue:restart` command is executed, you should be running a process manager such as [Supervisor](#supervisor-configuration) to automatically restart the queue workers."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1455 docs/master/queues.md:1393
#, no-wrap
msgid "> {tip} The queue uses the [cache](/docs/{{version}}/cache) to store restart signals, so you should verify that a cache driver is properly configured for your application before using this feature.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1457 docs/master/queues.md:1395
#, no-wrap
msgid "<a name=\"job-expirations-and-timeouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1457 docs/master/queues.md:1395
#, no-wrap
msgid "Job Expirations & Timeouts"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1460 docs/master/queues.md:1398
#, no-wrap
msgid "<a name=\"job-expiration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1460 docs/master/queues.md:1398
#, no-wrap
msgid "Job Expiration"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1463 docs/master/queues.md:1401
msgid "In your `config/queue.php` configuration file, each queue connection defines a `retry_after` option. This option specifies how many seconds the queue connection should wait before retrying a job that is being processed. For example, if the value of `retry_after` is set to `90`, the job will be released back onto the queue if it has been processing for 90 seconds without being released or deleted. Typically, you should set the `retry_after` value to the maximum number of seconds your jobs should reasonably take to complete processing."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1465 docs/master/queues.md:1403
#, no-wrap
msgid "> {note} The only queue connection which does not contain a `retry_after` value is Amazon SQS. SQS will retry the job based on the [Default Visibility Timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html) which is managed within the AWS console.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1467 docs/master/queues.md:1405
#, no-wrap
msgid "<a name=\"worker-timeouts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1467 docs/master/queues.md:1405
#, no-wrap
msgid "Worker Timeouts"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1470 docs/master/queues.md:1408
msgid "The `queue:work` Artisan command exposes a `--timeout` option. If a job is processing for longer than the number of seconds specified by the timeout value, the worker processing the job will exit with an error. Typically, the worker will be restarted automatically by a [process manager configured on your server](#supervisor-configuration):"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/queues.md:1471 docs/master/queues.md:1409
#, no-wrap
msgid "php artisan queue:work --timeout=60\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1476 docs/master/queues.md:1414
msgid "The `retry_after` configuration option and the `--timeout` CLI option are different, but work together to ensure that jobs are not lost and that jobs are only successfully processed once."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1478 docs/master/queues.md:1416
#, no-wrap
msgid "> {note} The `--timeout` value should always be at least several seconds shorter than your `retry_after` configuration value. This will ensure that a worker processing a frozen job is always terminated before the job is retried. If your `--timeout` option is longer than your `retry_after` configuration value, your jobs may be processed twice.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1483 docs/master/queues.md:1421
msgid "In production, you need a way to keep your `queue:work` processes running. A `queue:work` process may stop running for a variety of reasons, such as an exceeded worker timeout or the execution of the `queue:restart` command."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1485 docs/master/queues.md:1423
msgid "For this reason, you need to configure a process monitor that can detect when your `queue:work` processes exit and automatically restart them. In addition, process monitors can allow you to specify how many `queue:work` processes you would like to run concurrently. Supervisor is a process monitor commonly used in Linux environments and we will discuss how to configure it in the following documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1490 docs/master/queues.md:1428
msgid "Supervisor is a process monitor for the Linux operating system, and will automatically restart your `queue:work` processes if they fail. To install Supervisor on Ubuntu, you may use the following command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1494 docs/master/queues.md:1432
#, no-wrap
msgid "> {tip} If configuring and managing Supervisor yourself sounds overwhelming, consider using [Laravel Forge](https://forge.laravel.com), which will automatically install and configure Supervisor for your production Laravel projects.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1496 docs/master/queues.md:1434
#, no-wrap
msgid "<a name=\"configuring-supervisor\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/queues.md:1496 docs/master/queues.md:1434
#, no-wrap
msgid "Configuring Supervisor"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1499 docs/master/queues.md:1437
msgid "Supervisor configuration files are typically stored in the `/etc/supervisor/conf.d` directory. Within this directory, you may create any number of configuration files that instruct supervisor how your processes should be monitored. For example, let's create a `laravel-worker.conf` file that starts and monitors `queue:work` processes:"
msgstr ""

#. type: Fenced code block (ini)
#: docs/8.x/queues.md:1500 docs/master/queues.md:1438
#, no-wrap
msgid "[program:laravel-worker]\n"
"process_name=%(program_name)s_%(process_num)02d\n"
"command=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --max-time=3600\n"
"autostart=true\n"
"autorestart=true\n"
"stopasgroup=true\n"
"killasgroup=true\n"
"user=forge\n"
"numprocs=8\n"
"redirect_stderr=true\n"
"stdout_logfile=/home/forge/app.com/worker.log\n"
"stopwaitsecs=3600\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1516 docs/master/queues.md:1454
msgid "In this example, the `numprocs` directive will instruct Supervisor to run eight `queue:work` processes and monitor all of them, automatically restarting them if they fail. You should change the `command` directive of the configuration to reflect your desired queue connection and worker options."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1523 docs/master/queues.md:1461
msgid "Once the configuration file has been created, you may update the Supervisor configuration and start the processes using the following commands:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/queues.md:1524 docs/master/queues.md:1462
#, no-wrap
msgid "sudo supervisorctl reread\n\n"
"sudo supervisorctl update\n\n"
"sudo supervisorctl start laravel-worker:*\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1533 docs/master/queues.md:1471
msgid "For more information on Supervisor, consult the [Supervisor documentation](http://supervisord.org/index.html)."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1535 docs/master/queues.md:1473
#, no-wrap
msgid "<a name=\"dealing-with-failed-jobs\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:1535 docs/master/queues.md:1473
#, no-wrap
msgid "Dealing With Failed Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1538 docs/master/queues.md:1476
msgid "Sometimes your queued jobs will fail. Don't worry, things don't always go as planned! Laravel includes a convenient way to [specify the maximum number of times a job should be attempted](#max-job-attempts-and-timeout). After a job has exceeded this number of attempts, it will be inserted into the `failed_jobs` database table. Of course, we will need to create that table if it does not already exist. To create a migration for the `failed_jobs` table, you may use the `queue:failed-table` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1540 docs/master/queues.md:1478
#, no-wrap
msgid "    php artisan queue:failed-table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1544 docs/master/queues.md:1482
msgid "When running a [queue worker](#running-the-queue-worker) process, you may specify the maximum number of times a job should be attempted using the `--tries` switch on the `queue:work` command. If you do not specify a value for the `--tries` option, jobs will only be attempted once or as many times as specified by the job class' `$tries` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1546 docs/master/queues.md:1484
#, no-wrap
msgid "    php artisan queue:work redis --tries=3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1548 docs/master/queues.md:1486
msgid "Using the `--backoff` option, you may specify how many seconds Laravel should wait before retrying a job that has encountered an exception. By default, a job is immediately released back onto the queue so that it may be attempted again:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1550 docs/master/queues.md:1488
#, no-wrap
msgid "    php artisan queue:work redis --tries=3 --backoff=3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1552 docs/master/queues.md:1490
msgid "If you would like to configure how many seconds Laravel should wait before retrying a job that has encountered an exception on a per-job basis, you may do so by defining a `backoff` property on your job class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1559 docs/master/queues.md:1497
#, no-wrap
msgid "    /**\n"
"     * The number of seconds to wait before retrying the job.\n"
"     *\n"
"     * @var int\n"
"     */\n"
"    public $backoff = 3;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1561 docs/master/queues.md:1499
msgid "If you require more complex logic for determining the job's backoff time, you may define a `backoff` method on your job class:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1571 docs/master/queues.md:1509
#, no-wrap
msgid "    /**\n"
"    * Calculate the number of seconds to wait before retrying the job.\n"
"    *\n"
"    * @return int\n"
"    */\n"
"    public function backoff()\n"
"    {\n"
"        return 3;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1573 docs/master/queues.md:1511
msgid "You may easily configure \"exponential\" backoffs by returning an array of backoff values from the `backoff` method. In this example, the retry delay will be 1 second for the first retry, 5 seconds for the second retry, and 10 seconds for the third retry:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1583 docs/master/queues.md:1521
#, no-wrap
msgid "    /**\n"
"    * Calculate the number of seconds to wait before retrying the job.\n"
"    *\n"
"    * @return array\n"
"    */\n"
"    public function backoff()\n"
"    {\n"
"        return [1, 5, 10];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1585 docs/master/queues.md:1523
#, no-wrap
msgid "<a name=\"cleaning-up-after-failed-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1585 docs/master/queues.md:1523
#, no-wrap
msgid "Cleaning Up After Failed Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1588 docs/master/queues.md:1526
msgid "When a particular job fails, you may want to send an alert to your users or revert any actions that were partially completed by the job. To accomplish this, you may define a `failed` method on your job class. The `Throwable` instance that caused the job to fail will be passed to the `failed` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1600 docs/master/queues.md:1538
#, no-wrap
msgid "    use App\\Models\\Podcast;\n"
"    use App\\Services\\AudioProcessor;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"    use Illuminate\\Queue\\InteractsWithQueue;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
"    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1604 docs/master/queues.md:1542
#, no-wrap
msgid "    class ProcessPodcast implements ShouldQueue\n"
"    {\n"
"        use InteractsWithQueue, Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1611 docs/master/queues.md:1549
#, no-wrap
msgid "        /**\n"
"         * The podcast instance.\n"
"         *\n"
"         * @var \\App\\Podcast\n"
"         */\n"
"        protected $podcast;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1622 docs/master/queues.md:1560
#, no-wrap
msgid "        /**\n"
"         * Create a new job instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Podcast  $podcast\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Podcast $podcast)\n"
"        {\n"
"            $this->podcast = $podcast;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1633 docs/master/queues.md:1571
#, no-wrap
msgid "        /**\n"
"         * Execute the job.\n"
"         *\n"
"         * @param  \\App\\Services\\AudioProcessor  $processor\n"
"         * @return void\n"
"         */\n"
"        public function handle(AudioProcessor $processor)\n"
"        {\n"
"            // Process uploaded podcast...\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1645 docs/master/queues.md:1583
#, no-wrap
msgid "        /**\n"
"         * Handle a job failure.\n"
"         *\n"
"         * @param  \\Throwable  $exception\n"
"         * @return void\n"
"         */\n"
"        public function failed(Throwable $exception)\n"
"        {\n"
"            // Send user notification of failure, etc...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1647 docs/master/queues.md:1585
#, no-wrap
msgid "<a name=\"retrying-failed-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1647 docs/master/queues.md:1585
#, no-wrap
msgid "Retrying Failed Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1650 docs/master/queues.md:1588
msgid "To view all of the failed jobs that have been inserted into your `failed_jobs` database table, you may use the `queue:failed` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1652 docs/master/queues.md:1590
#, no-wrap
msgid "    php artisan queue:failed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1654 docs/master/queues.md:1592
msgid "The `queue:failed` command will list the job ID, connection, queue, failure time, and other information about the job. The job ID may be used to retry the failed job. For instance, to retry a failed job that has an ID of `5`, issue the following command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1656 docs/master/queues.md:1594
#, no-wrap
msgid "    php artisan queue:retry 5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1658 docs/master/queues.md:1596
msgid "If necessary, you may pass multiple IDs or an ID range (when using numeric IDs) to the command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1660 docs/master/queues.md:1598
#, no-wrap
msgid "    php artisan queue:retry 5 6 7 8 9 10\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1662 docs/master/queues.md:1600
#, no-wrap
msgid "    php artisan queue:retry --range=5-10\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1664 docs/master/queues.md:1602
msgid "To retry all of your failed jobs, execute the `queue:retry` command and pass `all` as the ID:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1666 docs/master/queues.md:1604
#, no-wrap
msgid "    php artisan queue:retry all\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1668 docs/master/queues.md:1606
msgid "If you would like to delete a failed job, you may use the `queue:forget` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1670 docs/master/queues.md:1608
#, no-wrap
msgid "    php artisan queue:forget 5\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1672 docs/master/queues.md:1610
#, no-wrap
msgid "> {tip} When using [Horizon](/docs/{{version}}/horizon), you should use the `horizon:forget` command to delete a failed job instead of the `queue:forget` command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1674 docs/master/queues.md:1612
msgid "To delete all of your failed jobs from the `failed_jobs` table, you may use the `queue:flush` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1676 docs/master/queues.md:1614
#, no-wrap
msgid "    php artisan queue:flush\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1678 docs/master/queues.md:1616
#, no-wrap
msgid "<a name=\"ignoring-missing-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1678 docs/master/queues.md:1616
#, no-wrap
msgid "Ignoring Missing Models"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1681 docs/master/queues.md:1619
msgid "When injecting an Eloquent model into a job, the model is automatically serialized before being placed on the queue and re-retrieved from the database when the job is processed. However, if the model has been deleted while the job was waiting to be processed by a worker, your job may fail with a `ModelNotFoundException`."
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1683 docs/master/queues.md:1621
msgid "For convenience, you may choose to automatically delete jobs with missing models by setting your job's `deleteWhenMissingModels` property to `true`. When this property is set to `true`, Laravel will quietly discard the job without raising an exception:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1690 docs/master/queues.md:1628
#, no-wrap
msgid "    /**\n"
"     * Delete the job if its models no longer exist.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $deleteWhenMissingModels = true;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1692 docs/master/queues.md:1630
#, no-wrap
msgid "<a name=\"failed-job-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/queues.md:1692 docs/master/queues.md:1630
#, no-wrap
msgid "Failed Job Events"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1695 docs/master/queues.md:1633
msgid "If you would like to register an event listener that will be invoked when a job fails, you may use the `Queue` facade's `failing` method. For example, we may attach a closure to this event from the `boot` method of the `AppServiceProvider` that is included with Laravel:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1703 docs/master/queues.md:1641
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Queue;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use Illuminate\\Queue\\Events\\JobFailed;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1730 docs/master/queues.md:1668
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Queue::failing(function (JobFailed $event) {\n"
"                // $event->connectionName\n"
"                // $event->job\n"
"                // $event->exception\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1735 docs/master/queues.md:1673
#, no-wrap
msgid "> {tip} When using [Horizon](/docs/{{version}}/horizon), you should use the `horizon:clear` command to clear jobs from the queue instead of the `queue:clear` command.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1737 docs/master/queues.md:1675
msgid "If you would like to delete all jobs from the default queue of the default connection, you may do so using the `queue:clear` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1739 docs/master/queues.md:1677
#, no-wrap
msgid "    php artisan queue:clear\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1741 docs/master/queues.md:1679
msgid "You may also provide the `connection` argument and `queue` option to delete jobs from a specific connection and queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1743 docs/master/queues.md:1681
#, no-wrap
msgid "    php artisan queue:clear redis --queue=emails\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1745 docs/master/queues.md:1683
#, no-wrap
msgid "> {note} Clearing jobs from queues is only available for the SQS, Redis, and database queue drivers. In addition, the SQS message deletion process takes up to 60 seconds, so jobs sent to the SQS queue up to 60 seconds after you clear the queue might also be deleted.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1747 docs/master/queues.md:1685
#, no-wrap
msgid "<a name=\"job-events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/queues.md:1747 docs/master/queues.md:1685
#, no-wrap
msgid "Job Events"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1750 docs/master/queues.md:1688
msgid "Using the `before` and `after` methods on the `Queue` [facade](/docs/{{version}}/facades), you may specify callbacks to be executed before or after a queued job is processed. These callbacks are a great opportunity to perform additional logging or increment statistics for a dashboard. Typically, you should call these methods from the `boot` method of a [service provider](/docs/{{version}}/providers). For example, we may use the `AppServiceProvider` that is included with Laravel:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1759 docs/master/queues.md:1697
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Queue;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use Illuminate\\Queue\\Events\\JobProcessed;\n"
"    use Illuminate\\Queue\\Events\\JobProcessing;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1784 docs/master/queues.md:1722
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Queue::before(function (JobProcessing $event) {\n"
"                // $event->connectionName\n"
"                // $event->job\n"
"                // $event->job->payload()\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1792 docs/master/queues.md:1730
#, no-wrap
msgid "            Queue::after(function (JobProcessed $event) {\n"
"                // $event->connectionName\n"
"                // $event->job\n"
"                // $event->job->payload()\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1794 docs/master/queues.md:1732
msgid "Using the `looping` method on the `Queue` [facade](/docs/{{version}}/facades), you may specify callbacks that execute before the worker attempts to fetch a job from a queue. For example, you might register a closure to rollback any transactions that were left open by a previously failed job:"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1797 docs/master/queues.md:1735
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
"    use Illuminate\\Support\\Facades\\Queue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/queues.md:1802 docs/master/queues.md:1740
#, no-wrap
msgid "    Queue::looping(function () {\n"
"        while (DB::transactionLevel() > 0) {\n"
"            DB::rollBack();\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Title #
#: docs/8.x/readme.md:1 docs/master/readme.md:1
#, no-wrap
msgid "Laravel Documentation"
msgstr ""

#. type: Plain text
#: docs/8.x/readme.md:4 docs/master/readme.md:4
msgid "You can find the online version of the Laravel documentation at [https://laravel.com/docs](https://laravel.com/docs)"
msgstr ""

#. type: Title ##
#: docs/8.x/readme.md:5 docs/master/readme.md:5
#, no-wrap
msgid "Contribution Guidelines"
msgstr ""

#. type: Plain text
#: docs/8.x/readme.md:7 docs/master/readme.md:7
msgid "If you are submitting documentation for the **current stable release**, submit it to the corresponding branch. For example, documentation for Laravel 8 would be submitted to the `8.x` branch. Documentation intended for the next release of Laravel should be submitted to the `master` branch."
msgstr ""

#. type: Title #
#: docs/8.x/redirects.md:1 docs/master/redirects.md:1
#, no-wrap
msgid "HTTP Redirects"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:7 docs/master/redirects.md:7
msgid "- [Creating Redirects](#creating-redirects)  - [Redirecting To Named Routes](#redirecting-named-routes)  - [Redirecting To Controller Actions](#redirecting-controller-actions)  - [Redirecting With Flashed Session Data](#redirecting-with-flashed-session-data)"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:9 docs/master/redirects.md:9
#, no-wrap
msgid "<a name=\"creating-redirects\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/redirects.md:9 docs/master/redirects.md:9
#, no-wrap
msgid "Creating Redirects"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:12 docs/8.x/responses.md:155
#: docs/master/redirects.md:12 docs/master/responses.md:155
msgid "Redirect responses are instances of the `Illuminate\\Http\\RedirectResponse` class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a `RedirectResponse` instance. The simplest method is to use the global `redirect` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:16 docs/master/redirects.md:16
#, no-wrap
msgid "    Route::get('/dashboard', function () {\n"
"        return redirect('/home/dashboard');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:18 docs/master/redirects.md:18
msgid "Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global `back` helper function. Since this feature utilizes the [session](/docs/{{version}}/session), make sure the route calling the `back` function is using the `web` middleware group or has all of the session middleware applied:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:21 docs/8.x/responses.md:164
#: docs/master/redirects.md:21 docs/master/responses.md:164
#, no-wrap
msgid "    Route::post('/user/profile', function () {\n"
"        // Validate the request...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:24 docs/8.x/responses.md:167
#: docs/master/redirects.md:24 docs/master/responses.md:167
#, no-wrap
msgid "        return back()->withInput();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:26 docs/8.x/responses.md:169
#: docs/master/redirects.md:26 docs/master/responses.md:169
#, no-wrap
msgid "<a name=\"redirecting-named-routes\"></a>\n"
msgstr ""

#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/redirects.md:26 docs/8.x/responses.md:169
#: docs/master/redirects.md:26 docs/master/responses.md:169
#, no-wrap
msgid "Redirecting To Named Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:29 docs/8.x/responses.md:172
#: docs/master/redirects.md:29 docs/master/responses.md:172
msgid "When you call the `redirect` helper with no parameters, an instance of `Illuminate\\Routing\\Redirector` is returned, allowing you to call any method on the `Redirector` instance. For example, to generate a `RedirectResponse` to a named route, you may use the `route` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:31 docs/8.x/responses.md:174
#: docs/master/redirects.md:31 docs/master/responses.md:174
#, no-wrap
msgid "    return redirect()->route('login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:33 docs/8.x/responses.md:176
#: docs/master/redirects.md:33 docs/master/responses.md:176
msgid "If your route has parameters, you may pass them as the second argument to the `route` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:35 docs/8.x/redirects.md:44
#: docs/master/redirects.md:35 docs/master/redirects.md:44
#, no-wrap
msgid "    // For a route with the following URI: profile/{id}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:37 docs/8.x/responses.md:180
#: docs/master/redirects.md:37 docs/master/responses.md:180
#, no-wrap
msgid "    return redirect()->route('profile', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:39 docs/8.x/responses.md:182
#: docs/master/redirects.md:39 docs/master/responses.md:182
#, no-wrap
msgid "<a name=\"populating-parameters-via-eloquent-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redirects.md:39 docs/8.x/responses.md:182
#: docs/master/redirects.md:39 docs/master/responses.md:182
#, no-wrap
msgid "Populating Parameters Via Eloquent Models"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:42 docs/8.x/responses.md:185
#: docs/master/redirects.md:42 docs/master/responses.md:185
msgid "If you are redirecting to a route with an \"ID\" parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:46 docs/8.x/responses.md:189
#: docs/master/redirects.md:46 docs/master/responses.md:189
#, no-wrap
msgid "    return redirect()->route('profile', [$user]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:48 docs/master/redirects.md:48
msgid "If you would like to customize the value that is placed in the route parameter, you should override the `getRouteKey` method on your Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:58 docs/8.x/responses.md:201
#: docs/master/redirects.md:58 docs/master/responses.md:201
#, no-wrap
msgid "    /**\n"
"     * Get the value of the model's route key.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getRouteKey()\n"
"    {\n"
"        return $this->slug;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:60 docs/8.x/responses.md:203
#: docs/master/redirects.md:60 docs/master/responses.md:203
#, no-wrap
msgid "<a name=\"redirecting-controller-actions\"></a>\n"
msgstr ""

#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/redirects.md:60 docs/8.x/responses.md:203
#: docs/master/redirects.md:60 docs/master/responses.md:203
#, no-wrap
msgid "Redirecting To Controller Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:63 docs/8.x/responses.md:206
#: docs/master/redirects.md:63 docs/master/responses.md:206
msgid "You may also generate redirects to [controller actions](/docs/{{version}}/controllers). To do so, pass the controller and action name to the `action` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:67 docs/master/redirects.md:67
#, no-wrap
msgid "    return redirect()->action([HomeController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:69 docs/8.x/responses.md:212
#: docs/master/redirects.md:69 docs/master/responses.md:212
msgid "If your controller route requires parameters, you may pass them as the second argument to the `action` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:73 docs/8.x/responses.md:216
#: docs/master/redirects.md:73 docs/master/responses.md:216
#, no-wrap
msgid "    return redirect()->action(\n"
"        [UserController::class, 'profile'], ['id' => 1]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:75 docs/8.x/responses.md:225
#: docs/master/redirects.md:75 docs/master/responses.md:225
#, no-wrap
msgid "<a name=\"redirecting-with-flashed-session-data\"></a>\n"
msgstr ""

#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  redirects.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  responses.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#: docs/8.x/redirects.md:75 docs/8.x/responses.md:225
#: docs/master/redirects.md:75 docs/master/responses.md:225
#, no-wrap
msgid "Redirecting With Flashed Session Data"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:78 docs/8.x/responses.md:228
#: docs/master/redirects.md:78 docs/master/responses.md:228
msgid "Redirecting to a new URL and [flashing data to the session](/docs/{{version}}/session#flash-data) are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a `RedirectResponse` instance and flash data to the session in a single, fluent method chain:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:81 docs/master/redirects.md:81
#, no-wrap
msgid "    Route::post('/user/profile', function () {\n"
"        // Update the user's profile...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:84 docs/master/redirects.md:84
#, no-wrap
msgid "        return redirect('/dashboard')->with('status', 'Profile updated!');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:86 docs/master/redirects.md:86
msgid "You may use the `withInput` method provided by the `RedirectResponse` instance to flash the current request's input data to the session before redirecting the user to a new location. Once the input has been flashed to the session, you may easily [retrieve it](/docs/{{version}}/requests#retrieving-old-input) during the next request:"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:88 docs/8.x/responses.md:249
#: docs/master/redirects.md:88 docs/master/responses.md:249
#, no-wrap
msgid "    return back()->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:90 docs/8.x/responses.md:236
#: docs/master/redirects.md:90 docs/master/responses.md:236
msgid "After the user is redirected, you may display the flashed message from the [session](/docs/{{version}}/session). For example, using [Blade syntax](/docs/{{version}}/blade):"
msgstr ""

#. type: Plain text
#: docs/8.x/redirects.md:95 docs/8.x/responses.md:242
#: docs/master/redirects.md:95 docs/master/responses.md:242
#, no-wrap
msgid "    @if (session('status'))\n"
"        <div class=\"alert alert-success\">\n"
"            {{ session('status') }}\n"
"        </div>\n"
"    @endif\n"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Clusters](#clusters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Predis](#predis)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[phpredis](#phpredis)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Interacting With Redis](#interacting-with-redis)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Transactions](#transactions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Pipelining Commands](#pipelining-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/redis.md:12 docs/master/redis.md:12
msgid "[Pub / Sub](#pubsub)"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:17 docs/master/redis.md:17
msgid "[Redis](https://redis.io) is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain [strings](https://redis.io/topics/data-types#strings), [hashes](https://redis.io/topics/data-types#hashes), [lists](https://redis.io/topics/data-types#lists), [sets](https://redis.io/topics/data-types#sets), and [sorted sets](https://redis.io/topics/data-types#sorted-sets)."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:19 docs/master/redis.md:19
msgid "Before using Redis with Laravel, we encourage you to install and use the [phpredis](https://github.com/phpredis/phpredis) PHP extension via PECL. The extension is more complex to install compared to \"user-land\" PHP packages but may yield better performance for applications that make heavy use of Redis. If you are using [Laravel Sail](/docs/{{version}}/sail), this extension is already installed in your application's Docker container."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:21 docs/master/redis.md:21
msgid "If you are unable to install the phpredis extension, you may install the `predis/predis` package via Composer. Predis is a Redis client written entirely in PHP and does not require any additional extensions:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/redis.md:22 docs/master/redis.md:22
#, no-wrap
msgid "composer require predis/predis\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:30 docs/master/redis.md:30
msgid "You may configure your application's Redis settings via the `config/database.php` configuration file. Within this file, you will see a `redis` array containing the Redis servers utilized by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:32 docs/8.x/redis.md:54 docs/8.x/redis.md:73
#: docs/8.x/redis.md:92 docs/8.x/redis.md:113 docs/8.x/redis.md:132
#: docs/8.x/redis.md:159 docs/master/redis.md:32 docs/master/redis.md:54
#: docs/master/redis.md:73 docs/master/redis.md:92 docs/master/redis.md:113
#: docs/master/redis.md:132 docs/master/redis.md:159
#, no-wrap
msgid "    'redis' => [\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:34 docs/8.x/redis.md:56 docs/8.x/redis.md:75
#: docs/8.x/redis.md:94 docs/8.x/redis.md:115 docs/8.x/redis.md:161
#: docs/master/redis.md:34 docs/master/redis.md:56 docs/master/redis.md:75
#: docs/master/redis.md:94 docs/master/redis.md:115 docs/master/redis.md:161
#, no-wrap
msgid "        'client' => env('REDIS_CLIENT', 'phpredis'),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:41 docs/master/redis.md:41
#, no-wrap
msgid "        'default' => [\n"
"            'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"            'password' => env('REDIS_PASSWORD', null),\n"
"            'port' => env('REDIS_PORT', 6379),\n"
"            'database' => env('REDIS_DB', 0),\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:48 docs/master/redis.md:48
#, no-wrap
msgid "        'cache' => [\n"
"            'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"            'password' => env('REDIS_PASSWORD', null),\n"
"            'port' => env('REDIS_PORT', 6379),\n"
"            'database' => env('REDIS_CACHE_DB', 1),\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:50 docs/8.x/redis.md:66 docs/8.x/redis.md:85
#: docs/8.x/redis.md:107 docs/8.x/redis.md:125 docs/master/redis.md:50
#: docs/master/redis.md:66 docs/master/redis.md:85 docs/master/redis.md:107
#: docs/master/redis.md:125
#, no-wrap
msgid "    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:52 docs/master/redis.md:52
msgid "Each Redis server defined in your configuration file is required to have a name, host, and a port unless you define a single URL to represent the Redis connection:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:60 docs/master/redis.md:60
#, no-wrap
msgid "        'default' => [\n"
"            'url' => 'tcp://127.0.0.1:6379?database=0',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:64 docs/master/redis.md:64
#, no-wrap
msgid "        'cache' => [\n"
"            'url' => 'tls://user:password@127.0.0.1:6380?database=1',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:68 docs/master/redis.md:68
#, no-wrap
msgid "<a name=\"configuring-the-connection-scheme\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redis.md:68 docs/master/redis.md:68
#, no-wrap
msgid "Configuring The Connection Scheme"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:71 docs/master/redis.md:71
msgid "By default, Redis clients will use the `tcp` scheme when connecting to your Redis servers; however, you may use TLS / SSL encryption by specifying a `scheme` configuration option in your Redis server's configuration array:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:83 docs/master/redis.md:83
#, no-wrap
msgid "        'default' => [\n"
"            'scheme' => 'tls',\n"
"            'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"            'password' => env('REDIS_PASSWORD', null),\n"
"            'port' => env('REDIS_PORT', 6379),\n"
"            'database' => env('REDIS_DB', 0),\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:87 docs/master/redis.md:87
#, no-wrap
msgid "<a name=\"clusters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/redis.md:87 docs/master/redis.md:87
#, no-wrap
msgid "Clusters"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:90 docs/master/redis.md:90
msgid "If your application is utilizing a cluster of Redis servers, you should define these clusters within a `clusters` key of your Redis configuration. This configuration key does not exist by default so you will need to create it within your application's `config/database.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:105 docs/master/redis.md:105
#, no-wrap
msgid "        'clusters' => [\n"
"            'default' => [\n"
"                [\n"
"                    'host' => env('REDIS_HOST', 'localhost'),\n"
"                    'password' => env('REDIS_PASSWORD', null),\n"
"                    'port' => env('REDIS_PORT', 6379),\n"
"                    'database' => 0,\n"
"                ],\n"
"            ],\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:109 docs/master/redis.md:109
msgid "By default, clusters will perform client-side sharding across your nodes, allowing you to pool nodes and create a large amount of available RAM. However, client-side sharding does not handle failover; therefore, it is primarily suited for transient cached data that is available from another primary data store."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:111 docs/master/redis.md:111
msgid "If you would like to use native Redis clustering instead of client-side sharding, you may specify this by setting the `options.cluster` configuration value to `redis` within your application's `config/database.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:119 docs/master/redis.md:119
#, no-wrap
msgid "        'options' => [\n"
"            'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:123 docs/master/redis.md:123
#, no-wrap
msgid "        'clusters' => [\n"
"            // ...\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:127 docs/master/redis.md:127
#, no-wrap
msgid "<a name=\"predis\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/redis.md:127 docs/master/redis.md:127
#, no-wrap
msgid "Predis"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:130 docs/master/redis.md:130
msgid "If you would like your application to interact with Redis via the Predis package, you should ensure the `REDIS_CLIENT` environment variable's value is `predis`:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:134 docs/master/redis.md:134
#, no-wrap
msgid "        'client' => env('REDIS_CLIENT', 'predis'),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:137 docs/8.x/redis.md:164 docs/master/redis.md:137
#: docs/master/redis.md:164
#, no-wrap
msgid "        // Rest of Redis configuration...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:139 docs/master/redis.md:139
msgid "In addition to the default `host`, `port`, `database`, and `password` server configuration options, Predis supports additional [connection parameters](https://github.com/nrk/predis/wiki/Connection-Parameters) that may be defined for each of your Redis servers. To utilize these additional configuration options, add them to your Redis server configuration in your application's `config/database.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:147 docs/master/redis.md:147
#, no-wrap
msgid "    'default' => [\n"
"        'host' => env('REDIS_HOST', 'localhost'),\n"
"        'password' => env('REDIS_PASSWORD', null),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => 0,\n"
"        'read_write_timeout' => 60,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:149 docs/master/redis.md:149
#, no-wrap
msgid "<a name=\"the-redis-facade-alias\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redis.md:149 docs/master/redis.md:149
#, no-wrap
msgid "The Redis Facade Alias"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:152 docs/master/redis.md:152
msgid "Laravel's `config/app.php` configuration file contains an `aliases` array which defines all of the class aliases that will be registered by the framework. For convenience, an alias entry is included for each [facade](/docs/{{version}}/facades) offered by Laravel; however, the `Redis` alias is disabled because it conflicts with the `Redis` class name provided by the phpredis extension. If you are using the Predis client and would like to enable this alias, you may un-comment the alias in your application's `config/app.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:154 docs/master/redis.md:154
#, no-wrap
msgid "<a name=\"phpredis\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/redis.md:154 docs/master/redis.md:154
#, no-wrap
msgid "phpredis"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:157 docs/master/redis.md:157
msgid "By default, Laravel will use the phpredis extension to communicate with Redis. The client that Laravel will use to communicate with Redis is dictated by the value of the `redis.client` configuration option, which typically reflects the value of the `REDIS_CLIENT` environment variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:166 docs/master/redis.md:166
msgid "In addition to the default `host`, `port`, `database`, and `password` server configuration options, phpredis supports the following additional connection parameters: `name`, `persistent`, `prefix`, `read_timeout`, `retry_interval`, `timeout`, and `context`. You may add any of these options to your Redis server configuration in the `config/database.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:178 docs/master/redis.md:178
#, no-wrap
msgid "    'default' => [\n"
"        'host' => env('REDIS_HOST', 'localhost'),\n"
"        'password' => env('REDIS_PASSWORD', null),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => 0,\n"
"        'read_timeout' => 60,\n"
"        'context' => [\n"
"            // 'auth' => ['username', 'secret'],\n"
"            // 'stream' => ['verify_peer' => false],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:180 docs/master/redis.md:180
#, no-wrap
msgid "<a name=\"interacting-with-redis\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/redis.md:180 docs/master/redis.md:180
#, no-wrap
msgid "Interacting With Redis"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:183 docs/master/redis.md:183
msgid "You may interact with Redis by calling various methods on the `Redis` [facade](/docs/{{version}}/facades). The `Redis` facade supports dynamic methods, meaning you may call any [Redis command](https://redis.io/commands) on the facade and the command will be passed directly to Redis. In this example, we will call the Redis `GET` command by calling the `get` method on the `Redis` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:190 docs/master/redis.md:190
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\Redis;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:206 docs/master/redis.md:206
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            return view('user.profile', [\n"
"                'user' => Redis::get('user:profile:'.$id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:208 docs/master/redis.md:208
msgid "As mentioned above, you may call any of Redis' commands on the `Redis` facade. Laravel uses magic methods to pass the commands to the Redis server. If a Redis command expects arguments, you should pass those to the facade's corresponding method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:212 docs/master/redis.md:212
#, no-wrap
msgid "    Redis::set('name', 'Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:214 docs/master/redis.md:214
#, no-wrap
msgid "    $values = Redis::lrange('names', 5, 10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:216 docs/master/redis.md:216
msgid "Alternatively, you may pass commands to the server using the `Redis` facade's `command` method, which accepts the name of the command as its first argument and an array of values as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:218 docs/master/redis.md:218
#, no-wrap
msgid "    $values = Redis::command('lrange', ['name', 5, 10]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:220 docs/master/redis.md:220
#, no-wrap
msgid "<a name=\"using-multiple-redis-connections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redis.md:220 docs/master/redis.md:220
#, no-wrap
msgid "Using Multiple Redis Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:223 docs/master/redis.md:223
msgid "Your application's `config/database.php` configuration file allows you to define multiple Redis connections / servers. You may obtain a connection to a specific Redis connection using the `Redis` facade's `connection` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:225 docs/master/redis.md:225
#, no-wrap
msgid "    $redis = Redis::connection('connection-name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:227 docs/master/redis.md:227
msgid "To obtain an instance of the default Redis connection, you may call the `connection` method without any additional arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:229 docs/master/redis.md:229
#, no-wrap
msgid "    $redis = Redis::connection();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:231 docs/master/redis.md:231
#, no-wrap
msgid "<a name=\"transactions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/redis.md:231 docs/master/redis.md:231
#, no-wrap
msgid "Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:234 docs/master/redis.md:234
msgid "The `Redis` facade's `transaction` method provides a convenient wrapper around Redis' native `MULTI` and `EXEC` commands. The `transaction` method accepts a closure as its only argument. This closure will receive a Redis connection instance and may issue any commands it would like to this instance. All of the Redis commands issued within the closure will be executed in a single, atomic transaction:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:241 docs/master/redis.md:241
#, no-wrap
msgid "    Redis::transaction(function ($redis) {\n"
"        $redis->incr('user_visits', 1);\n"
"        $redis->incr('total_visits', 1);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:243 docs/master/redis.md:243
#, no-wrap
msgid "> {note} When defining a Redis transaction, you may not retrieve any values from the Redis connection. Remember, your transaction is executed as a single, atomic operation and that operation is not executed until your entire closure has finished executing its commands.\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redis.md:244 docs/master/redis.md:244
#, no-wrap
msgid "Lua Scripts"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:247 docs/master/redis.md:247
msgid "The `eval` method provides another method of executing multiple Redis commands in a single, atomic operation. However, the `eval` method has the benefit of being able to interact with and inspect Redis key values during that operation. Redis scripts are written in the [Lua programming language](https://www.lua.org)."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:249 docs/master/redis.md:249
msgid "The `eval` method can be a bit scary at first, but we'll explore a basic example to break the ice. The `eval` method expects several arguments. First, you should pass the Lua script (as a string) to the method. Secondly, you should pass the number of keys (as an integer) that the script interacts with. Thirdly, you should pass the names of those keys. Finally, you may pass any other additional arguments that you need to access within your script."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:251 docs/master/redis.md:251
msgid "In this example, we will increment a counter, inspect its new value, and increment a second counter if the first counter's value is greater than five. Finally, we will return the value of the first counter:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:254 docs/master/redis.md:254
#, no-wrap
msgid "    $value = Redis::eval(<<<'LUA'\n"
"        local counter = redis.call(\"incr\", KEYS[1])\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:258 docs/master/redis.md:258
#, no-wrap
msgid "        if counter > 5 then\n"
"            redis.call(\"incr\", KEYS[2])\n"
"        end\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:261 docs/master/redis.md:261
#, no-wrap
msgid "        return counter\n"
"    LUA, 2, 'first-counter', 'second-counter');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:263 docs/master/redis.md:263
#, no-wrap
msgid "> {note} Please consult the [Redis documentation](https://redis.io/commands/eval) for more information on Redis scripting.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:265 docs/master/redis.md:265
#, no-wrap
msgid "<a name=\"pipelining-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/redis.md:265 docs/master/redis.md:265
#, no-wrap
msgid "Pipelining Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:268 docs/master/redis.md:268
msgid "Sometimes you may need to execute dozens of Redis commands. Instead of making a network trip to your Redis server for each command, you may use the `pipeline` method. The `pipeline` method accepts one argument: a closure that receives a Redis instance. You may issue all of your commands to this Redis instance and they will all be sent to the Redis server at the same time to reduce network trips to the server. The commands will still be executed in the order they were issued:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:276 docs/master/redis.md:276
#, no-wrap
msgid "    Redis::pipeline(function ($pipe) {\n"
"        for ($i = 0; $i < 1000; $i++) {\n"
"            $pipe->set(\"key:$i\", $i);\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:278 docs/master/redis.md:278
#, no-wrap
msgid "<a name=\"pubsub\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/redis.md:278 docs/master/redis.md:278
#, no-wrap
msgid "Pub / Sub"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:281 docs/master/redis.md:281
msgid "Laravel provides a convenient interface to the Redis `publish` and `subscribe` commands. These Redis commands allow you to listen for messages on a given \"channel\". You may publish messages to the channel from another application, or even using another programming language, allowing easy communication between applications and processes."
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:283 docs/master/redis.md:283
msgid "First, let's setup a channel listener using the `subscribe` method. We'll place this method call within an [Artisan command](/docs/{{version}}/artisan) since calling the `subscribe` method begins a long-running process:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:290 docs/master/redis.md:290
#, no-wrap
msgid "    use Illuminate\\Console\\Command;\n"
"    use Illuminate\\Support\\Facades\\Redis;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:299 docs/master/redis.md:299
#, no-wrap
msgid "    class RedisSubscribe extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'redis:subscribe';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:306 docs/master/redis.md:306
#, no-wrap
msgid "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Subscribe to a Redis channel';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:319 docs/master/redis.md:319
#, no-wrap
msgid "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        public function handle()\n"
"        {\n"
"            Redis::subscribe(['test-channel'], function ($message) {\n"
"                echo $message;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:321 docs/master/redis.md:321
msgid "Now we may publish messages to the channel using the `publish` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:326 docs/master/redis.md:326
#, no-wrap
msgid "    Route::get('/publish', function () {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:331 docs/master/redis.md:331
#, no-wrap
msgid "        Redis::publish('test-channel', json_encode([\n"
"            'name' => 'Adam Wathan'\n"
"        ]));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:333 docs/master/redis.md:333
#, no-wrap
msgid "<a name=\"wildcard-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/redis.md:333 docs/master/redis.md:333
#, no-wrap
msgid "Wildcard Subscriptions"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:336 docs/master/redis.md:336
msgid "Using the `psubscribe` method, you may subscribe to a wildcard channel, which may be useful for catching all messages on all channels. The channel name will be passed as the second argument to the provided closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:340 docs/master/redis.md:340
#, no-wrap
msgid "    Redis::psubscribe(['*'], function ($message, $channel) {\n"
"        echo $message;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/redis.md:343 docs/master/redis.md:343
#, no-wrap
msgid "    Redis::psubscribe(['users.*'], function ($message, $channel) {\n"
"        echo $message;\n"
"    });\n"
msgstr ""

#. type: Title #
#: docs/8.x/releases.md:1 docs/master/releases.md:1
#, no-wrap
msgid "Release Notes"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/releases.md:7 docs/master/releases.md:7
msgid "[Versioning Scheme](#versioning-scheme)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/releases.md:7 docs/master/releases.md:7
msgid "[Exceptions](#exceptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/releases.md:7 docs/master/releases.md:7
msgid "[Support Policy](#support-policy)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/releases.md:7 docs/master/releases.md:7
msgid "[Laravel 8](#laravel-8)"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:9 docs/master/releases.md:9
#, no-wrap
msgid "<a name=\"versioning-scheme\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/releases.md:9 docs/master/releases.md:9
#, no-wrap
msgid "Versioning Scheme"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:12 docs/master/releases.md:12
msgid "Laravel and its other first-party packages follow [Semantic Versioning](https://semver.org). Major framework releases are released every year (~September), while minor and patch releases may be released as often as every week. Minor and patch releases should **never** contain breaking changes."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:14 docs/master/releases.md:14
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^8.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:16 docs/master/releases.md:16
#, no-wrap
msgid "<a name=\"exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:16 docs/master/releases.md:16
#, no-wrap
msgid "Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:19 docs/master/releases.md:19
#, no-wrap
msgid "<a name=\"named-arguments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/releases.md:19 docs/master/releases.md:19
#, no-wrap
msgid "Named Arguments"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:22 docs/master/releases.md:22
msgid "At this time, PHP's [named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) functionality are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function parameters when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:24 docs/master/releases.md:24
#, no-wrap
msgid "<a name=\"support-policy\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/releases.md:24 docs/master/releases.md:24
#, no-wrap
msgid "Support Policy"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:27 docs/master/releases.md:27
msgid "For LTS releases, such as Laravel 6, bug fixes are provided for 2 years and security fixes are provided for 3 years. These releases provide the longest window of support and maintenance. For general releases, bug fixes are provided for 18 months and security fixes are provided for 2 years. For all additional libraries, including Lumen, only the latest release receives bug fixes. In addition, please review the database versions [supported by Laravel](/docs/{{version}}/database#introduction)."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:35 docs/master/releases.md:35
msgid "| Version | Release | Bug Fixes Until | Security Fixes Until | | --- | --- | --- | --- | | 6 (LTS) | September 3rd, 2019 | September 7th, 2021 | September 6th, 2022 | | 7 | March 3rd, 2020 | October 6th, 2020 | March 3rd, 2021 | | 8 | September 8th, 2020 | March 1st, 2022 | September 6th, 2022 | | 9 (LTS) | September, 2021 | September, 2023 | September, 2024 | | 10 | September, 2022 | March, 2024 | September, 2024 |"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:37 docs/master/releases.md:37
#, no-wrap
msgid "<a name=\"laravel-8\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/releases.md:37 docs/master/releases.md:37
#, no-wrap
msgid "Laravel 8"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:40 docs/master/releases.md:40
msgid "Laravel 8 continues the improvements made in Laravel 7.x by introducing Laravel Jetstream, model factory classes, migration squashing, job batching, improved rate limiting, queue improvements, dynamic Blade components, Tailwind pagination views, time testing helpers, improvements to `artisan serve`, event listener improvements, and a variety of other bug fixes and usability improvements."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:42 docs/8.x/starter-kits.md:71
#: docs/master/releases.md:42 docs/master/starter-kits.md:54
#, no-wrap
msgid "<a name=\"laravel-jetstream\"></a>\n"
msgstr ""

#. #-#-#-#-#  releases.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#. #-#-#-#-#  releases.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  starter-kits.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ##
#: docs/8.x/releases.md:42 docs/8.x/starter-kits.md:71
#: docs/master/releases.md:42 docs/master/starter-kits.md:54
#, no-wrap
msgid "Laravel Jetstream"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:45 docs/master/releases.md:45
msgid "_Laravel Jetstream was written by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:47 docs/master/releases.md:47
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a beautifully designed application scaffolding for Laravel. Jetstream provides the perfect starting point for your next project and includes login, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management. Laravel Jetstream replaces and improves upon the legacy authentication UI scaffolding available for previous versions of Laravel."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:49 docs/master/releases.md:49
msgid "Jetstream is designed using [Tailwind CSS](https://tailwindcss.com) and offers your choice of [Livewire](https://laravel-livewire.com) or [Inertia](https://inertiajs.com) scaffolding."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:51 docs/master/releases.md:51
#, no-wrap
msgid "<a name=\"models-directory\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:51 docs/master/releases.md:51
#, no-wrap
msgid "Models Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:54 docs/master/releases.md:54
msgid "By overwhelming community demand, the default Laravel application skeleton now contains an `app/Models` directory. We hope you enjoy this new home for your Eloquent models! All relevant generator commands have been updated to assume models exist within the `app/Models` directory if it exists. If the directory does not exist, the framework will assume your models should be placed within the `app` directory."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:56 docs/master/releases.md:56
#, no-wrap
msgid "<a name=\"model-factory-classes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:56 docs/master/releases.md:56
#, no-wrap
msgid "Model Factory Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:59 docs/master/releases.md:59
msgid "_Model factory classes were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:61 docs/master/releases.md:61
msgid "Eloquent [model factories](/docs/{{version}}/database-testing#defining-model-factories) have been entirely re-written as class based factories and improved to have first-class relationship support. For example, the `UserFactory` included with Laravel is written like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:97 docs/master/releases.md:97
msgid "Thanks to the new `HasFactory` trait available on generated models, the model factory may be used like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:101 docs/master/releases.md:101
#, no-wrap
msgid "    User::factory()->count(50)->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:103 docs/master/releases.md:103
msgid "Since model factories are now simple PHP classes, state transformations may be written as class methods. In addition, you may add any other helper classes to your Eloquent model factory as needed."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:105 docs/master/releases.md:105
msgid "For example, your `User` model might have a `suspended` state that modifies one of its default attribute values. You may define your state transformations using the base factory's `state` method. You may name your state method anything you like. After all, it's just a typical PHP method:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:117 docs/master/releases.md:117
#, no-wrap
msgid "    /**\n"
"     * Indicate that the user is suspended.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
"     */\n"
"    public function suspended()\n"
"    {\n"
"        return $this->state([\n"
"            'account_status' => 'suspended',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:119 docs/master/releases.md:119
msgid "After defining the state transformation method, we may use it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:123 docs/master/releases.md:123
#, no-wrap
msgid "    User::factory()->count(5)->suspended()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:125 docs/master/releases.md:125
msgid "As mentioned, Laravel 8's model factories contain first class support for relationships. So, assuming our `User` model has a `posts` relationship method, we may simply run the following code to generate a user with three posts:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:131 docs/master/releases.md:131
#, no-wrap
msgid "    $users = User::factory()\n"
"                ->hasPosts(3, [\n"
"                    'published' => false,\n"
"                ])\n"
"                ->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:133 docs/master/releases.md:133
msgid "To ease the upgrade process, the [laravel/legacy-factories](https://github.com/laravel/legacy-factories) package has been released to provide support for the previous iteration of model factories within Laravel 8.x."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:135 docs/master/releases.md:135
msgid "Laravel's re-written factories contain many more features that we think you will love. To learn more about model factories, please consult the [database testing documentation](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:137 docs/master/releases.md:137
#, no-wrap
msgid "<a name=\"migration-squashing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:137 docs/master/releases.md:137
#, no-wrap
msgid "Migration Squashing"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:140 docs/master/releases.md:140
msgid "_Migration squashing was contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:142 docs/master/releases.md:142
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your migration directory becoming bloated with potentially hundreds of migrations. If you're using MySQL or PostgreSQL, you may now \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:149 docs/master/releases.md:149
msgid "When you execute this command, Laravel will write a \"schema\" file to your `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL first. After executing the schema file's commands, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:154 docs/master/releases.md:154
msgid "_Job batching was contributed by [Taylor Otwell](https://github.com/taylorotwell) & [Mohamed Said](https://github.com/themsaid)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:156 docs/master/releases.md:156
msgid "Laravel's job batching feature allows you to easily execute a batch of jobs and then perform some action when the batch of jobs has completed executing."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:158 docs/master/releases.md:158
msgid "The new `batch` method of the `Bus` facade may be used to dispatch a batch of jobs. Of course, batching is primarily useful when combined with completion callbacks. So, you may use the `then`, `catch`, and `finally` methods to define completion callbacks for the batch. Each of these callbacks will receive an `Illuminate\\Bus\\Batch` instance when they are invoked:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:164 docs/master/releases.md:164
#, no-wrap
msgid "    use App\\Jobs\\ProcessPodcast;\n"
"    use App\\Podcast;\n"
"    use Illuminate\\Bus\\Batch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Throwable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:178 docs/master/releases.md:178
#, no-wrap
msgid "    $batch = Bus::batch([\n"
"        new ProcessPodcast(Podcast::find(1)),\n"
"        new ProcessPodcast(Podcast::find(2)),\n"
"        new ProcessPodcast(Podcast::find(3)),\n"
"        new ProcessPodcast(Podcast::find(4)),\n"
"        new ProcessPodcast(Podcast::find(5)),\n"
"    ])->then(function (Batch $batch) {\n"
"        // All jobs completed successfully...\n"
"    })->catch(function (Batch $batch, Throwable $e) {\n"
"        // First batch job failure detected...\n"
"    })->finally(function (Batch $batch) {\n"
"        // The batch has finished executing...\n"
"    })->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:182 docs/master/releases.md:182
msgid "To learn more about job batching, please consult the [queue documentation](/docs/{{version}}/queues#job-batching)."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:184 docs/master/releases.md:184
#, no-wrap
msgid "<a name=\"improved-rate-limiting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:184 docs/master/releases.md:184
#, no-wrap
msgid "Improved Rate Limiting"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:187 docs/master/releases.md:187
msgid "_Rate limiting improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:189 docs/master/releases.md:189
msgid "Laravel's request rate limiter feature has been augmented with more flexibility and power, while still maintaining backwards compatibility with previous release's `throttle` middleware API."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:191 docs/master/releases.md:191
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned this rate limiter:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:198 docs/master/releases.md:198
#, no-wrap
msgid "    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:200 docs/8.x/routing.md:572 docs/master/releases.md:200
#: docs/master/routing.md:571
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:206 docs/8.x/routing.md:578 docs/master/releases.md:206
#: docs/master/routing.md:577
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:208 docs/8.x/routing.md:583 docs/master/releases.md:208
#: docs/master/routing.md:582
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:214 docs/8.x/routing.md:589 docs/master/releases.md:214
#: docs/master/routing.md:588
#, no-wrap
msgid "    RateLimiter::for('uploads', function (Request $request) {\n"
"        return $request->user()->vipCustomer()\n"
"                    ? Limit::none()\n"
"                    : Limit::perMinute(100)->by($request->ip());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:216 docs/8.x/routing.md:606 docs/master/releases.md:216
#: docs/master/routing.md:605
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:221 docs/8.x/routing.md:611 docs/master/releases.md:221
#: docs/master/routing.md:610
#, no-wrap
msgid "    Route::middleware(['throttle:uploads'])->group(function () {\n"
"        Route::post('/audio', function () {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:226 docs/8.x/routing.md:616 docs/master/releases.md:226
#: docs/master/routing.md:615
#, no-wrap
msgid "        Route::post('/video', function () {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:228 docs/master/releases.md:228
msgid "To learn more about rate limiting, please consult the [routing documentation](/docs/{{version}}/routing#rate-limiting)."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:230 docs/master/releases.md:230
#, no-wrap
msgid "<a name=\"improved-maintenance-mode\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:230 docs/master/releases.md:230
#, no-wrap
msgid "Improved Maintenance Mode"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:233 docs/master/releases.md:233
msgid "_Maintenance mode improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from [Spatie](https://spatie.be)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:235 docs/master/releases.md:235
msgid "In previous releases of Laravel, the `php artisan down` maintenance mode feature may be bypassed using an \"allow list\" of IP addresses that were allowed to access the application. This feature has been removed in favor of a simpler \"secret\" / token solution."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:237 docs/master/releases.md:237
msgid "While in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:252 docs/master/releases.md:252
msgid "For this reason, Laravel now allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:256 docs/master/releases.md:256
#, no-wrap
msgid "<a name=\"closure-dispatch-chain-catch\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:256 docs/master/releases.md:256
#, no-wrap
msgid "Closure Dispatch / Chain `catch`"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:259 docs/master/releases.md:259
msgid "_Catch improvements were contributed by [Mohamed Said](https://github.com/themsaid)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:261 docs/master/releases.md:261
msgid "Using the new `catch` method, you may now provide a closure that should be executed if a queued closure fails to complete successfully after exhausting all of your queue's configured retry attempts:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:271 docs/master/releases.md:271
#, no-wrap
msgid "<a name=\"dynamic-blade-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:271 docs/master/releases.md:271
#, no-wrap
msgid "Dynamic Blade Components"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:274 docs/master/releases.md:274
msgid "_Dynamic Blade components were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:276 docs/master/releases.md:276
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may now use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:280 docs/master/releases.md:280
msgid "To learn more about Blade components, please consult the [Blade documentation](/docs/{{version}}/blade#components)."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:282 docs/master/releases.md:282
#, no-wrap
msgid "<a name=\"event-listener-improvements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:282 docs/master/releases.md:282
#, no-wrap
msgid "Event Listener Improvements"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:285 docs/master/releases.md:285
msgid "_Event listener improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:287 docs/master/releases.md:287
msgid "Closure based event listeners may now be registered by only passing the closure to the `Event::listen` method. Laravel will inspect the closure to determine which type of event the listener handles:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:290 docs/master/releases.md:290
#, no-wrap
msgid "    use App\\Events\\PodcastProcessed;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:294 docs/master/releases.md:294
#, no-wrap
msgid "    Event::listen(function (PodcastProcessed $event) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:296 docs/master/releases.md:296
msgid "In addition, closure based event listeners may now be marked as queueable using the `Illuminate\\Events\\queueable` function:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:304 docs/master/releases.md:304
#, no-wrap
msgid "    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    }));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:312 docs/master/releases.md:312
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:325 docs/master/releases.md:325
#, no-wrap
msgid "<a name=\"time-testing-helpers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:325 docs/master/releases.md:325
#, no-wrap
msgid "Time Testing Helpers"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:328 docs/master/releases.md:328
msgid "_Time testing helpers were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from Ruby on Rails_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:330 docs/master/releases.md:330
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Laravel's base feature test class now includes helpers that allow you to manipulate the current time:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:353 docs/master/releases.md:353
#, no-wrap
msgid "<a name=\"artisan-serve-improvements\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:353 docs/master/releases.md:353
#, no-wrap
msgid "Artisan `serve` Improvements"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:356 docs/master/releases.md:356
msgid "_Artisan `serve` improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)_."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:358 docs/master/releases.md:358
msgid "The Artisan `serve` command has been improved with automatic reloading when environment variable changes are detected within your local `.env` file. Previously, the command had to be manually stopped and restarted."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:360 docs/master/releases.md:360
#, no-wrap
msgid "<a name=\"tailwind-pagination-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:360 docs/master/releases.md:360
#, no-wrap
msgid "Tailwind Pagination Views"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:363 docs/master/releases.md:363
msgid "The Laravel paginator has been updated to use the [Tailwind CSS](https://tailwindcss.com) framework by default. Tailwind CSS is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override. Of course, Bootstrap 3 and 4 views remain available as well."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:365 docs/master/releases.md:365
#, no-wrap
msgid "<a name=\"routing-namespace-updates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/releases.md:365 docs/master/releases.md:365
#, no-wrap
msgid "Routing Namespace Updates"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:368 docs/master/releases.md:368
msgid "In previous releases of Laravel, the `RouteServiceProvider` contained a `$namespace` property. This property's value would automatically be prefixed onto controller route definitions and calls to the `action` helper / `URL::action` method. In Laravel 8.x, this property is `null` by default. This means that no automatic namespace prefixing will be done by Laravel. Therefore, in new Laravel 8.x applications, controller route definitions should be defined using standard PHP callable syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:372 docs/master/releases.md:372
#, no-wrap
msgid "    Route::get('/users', [UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:374 docs/master/releases.md:374
msgid "Calls to the `action` related methods should use the same callable syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:376 docs/master/releases.md:376
#, no-wrap
msgid "    action([UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:378 docs/master/releases.md:378
#, no-wrap
msgid "    return Redirect::action([UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:380 docs/master/releases.md:380
msgid "If you prefer Laravel 7.x style controller route prefixing, you may simply add the `$namespace` property into your application's `RouteServiceProvider`."
msgstr ""

#. type: Plain text
#: docs/8.x/releases.md:381 docs/master/releases.md:381
#, no-wrap
msgid "> {note} This change only affects new Laravel 8.x applications. Applications upgrading from Laravel 7.x will still have the `$namespace` property in their `RouteServiceProvider`.\n"
msgstr ""

#. type: Title #
#: docs/8.x/requests.md:1 docs/master/requests.md:1
#, no-wrap
msgid "HTTP Requests"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Interacting With The Request](#interacting-with-the-request)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Accessing The Request](#accessing-the-request)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Request Path & Method](#request-path-and-method)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Request Headers](#request-headers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Request IP Address](#request-ip-address)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Content Negotiation](#content-negotiation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[PSR-7 Requests](#psr7-requests)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Input](#input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Determining If Input Is Present](#determining-if-input-is-present)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Old Input](#old-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Input Trimming & Normalization](#input-trimming-and-normalization)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Files](#files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Retrieving Uploaded Files](#retrieving-uploaded-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Storing Uploaded Files](#storing-uploaded-files)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/requests.md:22 docs/master/requests.md:21
msgid "[Configuring Trusted Proxies](#configuring-trusted-proxies)"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:27 docs/master/requests.md:26
msgid "Laravel's `Illuminate\\Http\\Request` class provides an object-oriented way to interact with the current HTTP request being handled by your application as well as retrieve the input, cookies, and files that were submitted with the request."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:29 docs/master/requests.md:28
#, no-wrap
msgid "<a name=\"interacting-with-the-request\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:29 docs/master/requests.md:28
#, no-wrap
msgid "Interacting With The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:32 docs/master/requests.md:31
#, no-wrap
msgid "<a name=\"accessing-the-request\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:32 docs/master/requests.md:31
#, no-wrap
msgid "Accessing The Request"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:35 docs/master/requests.md:34
msgid "To obtain an instance of the current HTTP request via dependency injection, you should type-hint the `Illuminate\\Http\\Request` class on your route closure or controller method. The incoming request instance will automatically be injected by the Laravel [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:53 docs/master/requests.md:52
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $name = $request->input('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:59 docs/master/requests.md:58
msgid "As mentioned, you may also type-hint the `Illuminate\\Http\\Request` class on a route closure. The service container will automatically inject the incoming request into the closure when it is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:65 docs/master/requests.md:64
#, no-wrap
msgid "    Route::get('/', function (Request $request) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:67 docs/master/requests.md:66
#, no-wrap
msgid "<a name=\"dependency-injection-route-parameters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:67 docs/master/requests.md:66
#, no-wrap
msgid "Dependency Injection & Route Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:70 docs/master/requests.md:69
msgid "If your controller method is also expecting input from a route parameter you should list your route parameters after your other dependencies. For example, if your route is defined like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:76 docs/master/requests.md:75
msgid "You may still type-hint the `Illuminate\\Http\\Request` and access your `id` route parameter by defining your controller method as follows:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:97 docs/master/requests.md:96
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the specified user.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  string  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request, $id)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:99 docs/master/requests.md:98
#, no-wrap
msgid "<a name=\"request-path-and-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:99 docs/master/requests.md:98
#, no-wrap
msgid "Request Path & Method"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:102 docs/master/requests.md:101
msgid "The `Illuminate\\Http\\Request` instance provides a variety of methods for examining the incoming HTTP request and extends the `Symfony\\Component\\HttpFoundation\\Request` class. We will discuss a few of the most important methods below."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:104 docs/master/requests.md:103
#, no-wrap
msgid "<a name=\"retrieving-the-request-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:104 docs/master/requests.md:103
#, no-wrap
msgid "Retrieving The Request Path"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:107 docs/master/requests.md:106
msgid "The `path` method returns the request's path information. So, if the incoming request is targeted at `http://example.com/foo/bar`, the `path` method will return `foo/bar`:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:109 docs/master/requests.md:108
#, no-wrap
msgid "    $uri = $request->path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:111 docs/master/requests.md:110
#, no-wrap
msgid "<a name=\"inspecting-the-request-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:111 docs/master/requests.md:110
#, no-wrap
msgid "Inspecting The Request Path / Route"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:114 docs/master/requests.md:113
msgid "The `is` method allows you to verify that the incoming request path matches a given pattern. You may use the `*` character as a wildcard when utilizing this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:118 docs/master/requests.md:117
#, no-wrap
msgid "    if ($request->is('admin/*')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:120 docs/master/requests.md:119
msgid "Using the `routeIs` method, you may determine if the incoming request has matched a [named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:124 docs/master/requests.md:123
#, no-wrap
msgid "    if ($request->routeIs('admin.*')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:126 docs/master/requests.md:125
#, no-wrap
msgid "<a name=\"retrieving-the-request-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:126 docs/master/requests.md:125
#, no-wrap
msgid "Retrieving The Request URL"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:129 docs/master/requests.md:128
msgid "To retrieve the full URL for the incoming request you may use the `url` or `fullUrl` methods. The `url` method will return the URL without the query string, while the `fullUrl` method includes the query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:131 docs/master/requests.md:130
#, no-wrap
msgid "    $url = $request->url();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:133 docs/master/requests.md:132
#, no-wrap
msgid "    $urlWithQueryString = $request->fullUrl();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:135
msgid "If you would like to append query string data to the current URL, you may call the `fullUrlWithQuery` method. This method merges the given array of query string variables with the current query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:137
#, no-wrap
msgid "    $request->fullUrlWithQuery(['type' => 'phone']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:139 docs/master/requests.md:134
#, no-wrap
msgid "<a name=\"retrieving-the-request-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:139 docs/master/requests.md:134
#, no-wrap
msgid "Retrieving The Request Method"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:142 docs/master/requests.md:137
msgid "The `method` method will return the HTTP verb for the request. You may use the `isMethod` method to verify that the HTTP verb matches a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:144 docs/master/requests.md:139
#, no-wrap
msgid "    $method = $request->method();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:148 docs/master/requests.md:143
#, no-wrap
msgid "    if ($request->isMethod('post')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:150 docs/master/requests.md:145
#, no-wrap
msgid "<a name=\"request-headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:150 docs/master/requests.md:145
#, no-wrap
msgid "Request Headers"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:153 docs/master/requests.md:148
msgid "You may retrieve a request header from the `Illuminate\\Http\\Request` instance using the `header` method. If the header is not present on the request, `null` will be returned. However, the `header` method accepts an optional second argument that will be returned if the header is not present on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:155 docs/master/requests.md:150
#, no-wrap
msgid "    $value = $request->header('X-Header-Name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:157 docs/master/requests.md:152
#, no-wrap
msgid "    $value = $request->header('X-Header-Name', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:159 docs/master/requests.md:154
msgid "The `hasHeader` method may be used to determine if the request contains a given header:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:163 docs/master/requests.md:158
#, no-wrap
msgid "    if ($request->hasHeader('X-Header-Name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:165
msgid "For convenience, the `bearerToken` method may be used to retrieve a bearer token from the `Authorization` header. If no such header is present, an empty string will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:167 docs/master/requests.md:162
#, no-wrap
msgid "    $token = $request->bearerToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:169 docs/master/requests.md:164
#, no-wrap
msgid "<a name=\"request-ip-address\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:169 docs/master/requests.md:164
#, no-wrap
msgid "Request IP Address"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:172 docs/master/requests.md:167
msgid "The `ip` method may be used to retrieve the IP address of the client that made the request to your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:174 docs/master/requests.md:169
#, no-wrap
msgid "    $ipAddress = $request->ip();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:176 docs/master/requests.md:171
#, no-wrap
msgid "<a name=\"content-negotiation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:176 docs/master/requests.md:171
#, no-wrap
msgid "Content Negotiation"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:179 docs/master/requests.md:174
msgid "Laravel provides several methods for inspecting the incoming request's requested content types via the `Accept` header. First, the `getAcceptableContentTypes` method will return an array containing all of the content types accepted by the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:181 docs/master/requests.md:176
#, no-wrap
msgid "    $contentTypes = $request->getAcceptableContentTypes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:183 docs/master/requests.md:178
msgid "The `accepts` method accepts an array of content types and returns `true` if any of the content types are accepted by the request. Otherwise, `false` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:187 docs/master/requests.md:182
#, no-wrap
msgid "    if ($request->accepts(['text/html', 'application/json'])) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:189 docs/master/requests.md:184
msgid "You may use the `prefers` method to determine which content type out of a given array of content types is most preferred by the request. If none of the provided content types are accepted by the request, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:191 docs/master/requests.md:186
#, no-wrap
msgid "    $preferred = $request->prefers(['text/html', 'application/json']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:193 docs/master/requests.md:188
msgid "Since many applications only serve HTML or JSON, you may use the `expectsJson` method to quickly determine if the incoming request expects a JSON response:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:197 docs/master/requests.md:192
#, no-wrap
msgid "    if ($request->expectsJson()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:199 docs/master/requests.md:194
#, no-wrap
msgid "<a name=\"psr7-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:199 docs/master/requests.md:194
#, no-wrap
msgid "PSR-7 Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:202 docs/master/requests.md:197
msgid "The [PSR-7 standard](https://www.php-fig.org/psr/psr-7/) specifies interfaces for HTTP messages, including requests and responses. If you would like to obtain an instance of a PSR-7 request instead of a Laravel request, you will first need to install a few libraries. Laravel uses the *Symfony HTTP Message Bridge* component to convert typical Laravel requests and responses into PSR-7 compatible implementations:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:205 docs/master/requests.md:200
#, no-wrap
msgid "    composer require symfony/psr-http-message-bridge\n"
"    composer require nyholm/psr7\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:207 docs/master/requests.md:202
msgid "Once you have installed these libraries, you may obtain a PSR-7 request by type-hinting the request interface on your route closure or controller method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:209 docs/master/requests.md:204
#, no-wrap
msgid "    use Psr\\Http\\Message\\ServerRequestInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:213 docs/master/requests.md:208
#, no-wrap
msgid "    Route::get('/', function (ServerRequestInterface $request) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:215 docs/master/requests.md:210
#, no-wrap
msgid "> {tip} If you return a PSR-7 response instance from a route or controller, it will automatically be converted back to a Laravel response instance and be displayed by the framework.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:217 docs/master/requests.md:212
#, no-wrap
msgid "<a name=\"input\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:217 docs/master/requests.md:212
#, no-wrap
msgid "Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:223 docs/master/requests.md:218
#, no-wrap
msgid "<a name=\"retrieving-all-input-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:223 docs/master/requests.md:218
#, no-wrap
msgid "Retrieving All Input Data"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:226 docs/master/requests.md:221
msgid "You may retrieve all of the incoming request's input data as an `array` using the `all` method. This method may be used regardless of whether the incoming request is from an HTML form or is an XHR request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:228 docs/master/requests.md:223
#, no-wrap
msgid "    $input = $request->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:230 docs/master/requests.md:225
#, no-wrap
msgid "<a name=\"retrieving-an-input-value\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:230 docs/master/requests.md:225
#, no-wrap
msgid "Retrieving An Input Value"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:233 docs/master/requests.md:228
msgid "Using a few simple methods, you may access all of the user input from your `Illuminate\\Http\\Request` instance without worrying about which HTTP verb was used for the request. Regardless of the HTTP verb, the `input` method may be used to retrieve user input:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:235 docs/master/requests.md:230
#, no-wrap
msgid "    $name = $request->input('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:237 docs/master/requests.md:232
msgid "You may pass a default value as the second argument to the `input` method. This value will be returned if the requested input value is not present on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:239 docs/master/requests.md:234
#, no-wrap
msgid "    $name = $request->input('name', 'Sally');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:241 docs/master/requests.md:236
msgid "When working with forms that contain array inputs, use \"dot\" notation to access the arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:243 docs/master/requests.md:238
#, no-wrap
msgid "    $name = $request->input('products.0.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:245 docs/master/requests.md:240
#, no-wrap
msgid "    $names = $request->input('products.*.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:247 docs/master/requests.md:242
msgid "You may call the `input` method without any arguments in order to retrieve all of the input values as an associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:249 docs/master/requests.md:244
#, no-wrap
msgid "    $input = $request->input();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:251 docs/master/requests.md:246
#, no-wrap
msgid "<a name=\"retrieving-input-from-the-query-string\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:251 docs/master/requests.md:246
#, no-wrap
msgid "Retrieving Input From The Query String"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:254 docs/master/requests.md:249
msgid "While the `input` method retrieves values from the entire request payload (including the query string), the `query` method will only retrieve values from the query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:256 docs/master/requests.md:251
#, no-wrap
msgid "    $name = $request->query('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:258 docs/master/requests.md:253
msgid "If the requested query string value data is not present, the second argument to this method will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:260 docs/master/requests.md:255
#, no-wrap
msgid "    $name = $request->query('name', 'Helen');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:262 docs/master/requests.md:257
msgid "You may call the `query` method without any arguments in order to retrieve all of the query string values as an associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:264 docs/master/requests.md:259
#, no-wrap
msgid "    $query = $request->query();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:266 docs/master/requests.md:261
#, no-wrap
msgid "<a name=\"retrieving-json-input-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:266 docs/master/requests.md:261
#, no-wrap
msgid "Retrieving JSON Input Values"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:269 docs/master/requests.md:264
msgid "When sending JSON requests to your application, you may access the JSON data via the `input` method as long as the `Content-Type` header of the request is properly set to `application/json`. You may even use \"dot\" syntax to retrieve values that are nested within JSON arrays:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:271 docs/master/requests.md:266
#, no-wrap
msgid "    $name = $request->input('user.name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:273 docs/master/requests.md:268
#, no-wrap
msgid "<a name=\"retrieving-boolean-input-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:273 docs/master/requests.md:268
#, no-wrap
msgid "Retrieving Boolean Input Values"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:276 docs/master/requests.md:271
msgid "When dealing with HTML elements like checkboxes, your application may receive \"truthy\" values that are actually strings. For example, \"true\" or \"on\". For convenience, you may use the `boolean` method to retrieve these values as booleans. The `boolean` method returns `true` for 1, \"1\", true, \"true\", \"on\", and \"yes\". All other values will return `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:278 docs/master/requests.md:273
#, no-wrap
msgid "    $archived = $request->boolean('archived');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:280 docs/master/requests.md:275
#, no-wrap
msgid "<a name=\"retrieving-input-via-dynamic-properties\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:280 docs/master/requests.md:275
#, no-wrap
msgid "Retrieving Input Via Dynamic Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:283 docs/master/requests.md:278
msgid "You may also access user input using dynamic properties on the `Illuminate\\Http\\Request` instance. For example, if one of your application's forms contains a `name` field, you may access the value of the field like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:285 docs/master/requests.md:280
#, no-wrap
msgid "    $name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:287 docs/master/requests.md:282
msgid "When using dynamic properties, Laravel will first look for the parameter's value in the request payload. If it is not present, Laravel will search for the field in the matched route's parameters."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:289 docs/master/requests.md:284
#, no-wrap
msgid "<a name=\"retrieving-a-portion-of-the-input-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:289 docs/master/requests.md:284
#, no-wrap
msgid "Retrieving A Portion Of The Input Data"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:292 docs/master/requests.md:287
msgid "If you need to retrieve a subset of the input data, you may use the `only` and `except` methods. Both of these methods accept a single `array` or a dynamic list of arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:294 docs/master/requests.md:289
#, no-wrap
msgid "    $input = $request->only(['username', 'password']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:296 docs/master/requests.md:291
#, no-wrap
msgid "    $input = $request->only('username', 'password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:298 docs/master/requests.md:293
#, no-wrap
msgid "    $input = $request->except(['credit_card']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:300 docs/master/requests.md:295
#, no-wrap
msgid "    $input = $request->except('credit_card');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:302 docs/master/requests.md:297
#, no-wrap
msgid "> {note} The `only` method returns all of the key / value pairs that you request; however, it will not return key / value pairs that are not present on the request.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:304 docs/master/requests.md:299
#, no-wrap
msgid "<a name=\"determining-if-input-is-present\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:304 docs/master/requests.md:299
#, no-wrap
msgid "Determining If Input Is Present"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:307 docs/master/requests.md:302
msgid "You may use the `has` method to determine if a value is present on the request. The `has` method returns `true` if the value is present on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:311 docs/master/requests.md:306
#, no-wrap
msgid "    if ($request->has('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:313 docs/master/requests.md:308
msgid "When given an array, the `has` method will determine if all of the specified values are present:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:317 docs/master/requests.md:312
#, no-wrap
msgid "    if ($request->has(['name', 'email'])) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:319 docs/master/requests.md:314
msgid "The `whenHas` method will execute the given closure if a value is present on the request:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:323 docs/master/requests.md:318
#, no-wrap
msgid "    $request->whenHas('name', function ($input) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:325 docs/master/requests.md:320
msgid "The `hasAny` method returns `true` if any of the specified values are present:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:329 docs/master/requests.md:324
#, no-wrap
msgid "    if ($request->hasAny(['name', 'email'])) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:331 docs/master/requests.md:326
msgid "If you would like to determine if a value is present on the request and is not empty, you may use the `filled` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:335 docs/master/requests.md:330
#, no-wrap
msgid "    if ($request->filled('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:337 docs/master/requests.md:332
msgid "The `whenFilled` method will execute the given closure if a value is present on the request and is not empty:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:341 docs/master/requests.md:336
#, no-wrap
msgid "    $request->whenFilled('name', function ($input) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:343 docs/master/requests.md:338
msgid "To determine if a given key is absent from the request, you may use the `missing` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:347 docs/master/requests.md:342
#, no-wrap
msgid "    if ($request->missing('name')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:349 docs/master/requests.md:344
#, no-wrap
msgid "<a name=\"old-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:349 docs/master/requests.md:344
#, no-wrap
msgid "Old Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:352 docs/master/requests.md:347
msgid "Laravel allows you to keep input from one request during the next request. This feature is particularly useful for re-populating forms after detecting validation errors. However, if you are using Laravel's included [validation features](/docs/{{version}}/validation), it is possible that you will not need to manually use these session input flashing methods directly, as some of Laravel's built-in validation facilities will call them automatically."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:354 docs/master/requests.md:349
#, no-wrap
msgid "<a name=\"flashing-input-to-the-session\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:354 docs/master/requests.md:349
#, no-wrap
msgid "Flashing Input To The Session"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:357 docs/master/requests.md:352
msgid "The `flash` method on the `Illuminate\\Http\\Request` class will flash the current input to the [session](/docs/{{version}}/session) so that it is available during the user's next request to the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:359 docs/master/requests.md:354
#, no-wrap
msgid "    $request->flash();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:361 docs/master/requests.md:356
msgid "You may also use the `flashOnly` and `flashExcept` methods to flash a subset of the request data to the session. These methods are useful for keeping sensitive information such as passwords out of the session:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:363 docs/master/requests.md:358
#, no-wrap
msgid "    $request->flashOnly(['username', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:365 docs/master/requests.md:360
#, no-wrap
msgid "    $request->flashExcept('password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:367 docs/master/requests.md:362
#, no-wrap
msgid "<a name=\"flashing-input-then-redirecting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:367 docs/master/requests.md:362
#, no-wrap
msgid "Flashing Input Then Redirecting"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:370 docs/master/requests.md:365
msgid "Since you often will want to flash input to the session and then redirect to the previous page, you may easily chain input flashing onto a redirect using the `withInput` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:372 docs/master/requests.md:367
#, no-wrap
msgid "    return redirect('form')->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:374 docs/master/requests.md:369
#, no-wrap
msgid "    return redirect()->route('user.create')->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:378 docs/master/requests.md:373
#, no-wrap
msgid "    return redirect('form')->withInput(\n"
"        $request->except('password')\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:380 docs/master/requests.md:375
#, no-wrap
msgid "<a name=\"retrieving-old-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:380 docs/master/requests.md:375
#, no-wrap
msgid "Retrieving Old Input"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:383 docs/8.x/validation.md:226
#: docs/master/requests.md:378 docs/master/validation.md:226
msgid "To retrieve flashed input from the previous request, invoke the `old` method on an instance of `Illuminate\\Http\\Request`. The `old` method will pull the previously flashed input data from the [session](/docs/{{version}}/session):"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:385 docs/master/requests.md:380
#, no-wrap
msgid "    $username = $request->old('username');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:387 docs/8.x/validation.md:230
#: docs/master/requests.md:382 docs/master/validation.md:230
msgid "Laravel also provides a global `old` helper. If you are displaying old input within a [Blade template](/docs/{{version}}/blade), it is more convenient to use the `old` helper to repopulate the form. If no old input exists for the given field, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:389 docs/master/requests.md:384
#, no-wrap
msgid "    <input type=\"text\" name=\"username\" value=\"{{ old('username') }}\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:394 docs/master/requests.md:389
#, no-wrap
msgid "<a name=\"retrieving-cookies-from-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:394 docs/master/requests.md:389
#, no-wrap
msgid "Retrieving Cookies From Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:397 docs/master/requests.md:392
msgid "All cookies created by the Laravel framework are encrypted and signed with an authentication code, meaning they will be considered invalid if they have been changed by the client. To retrieve a cookie value from the request, use the `cookie` method on an `Illuminate\\Http\\Request` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:399 docs/master/requests.md:394
#, no-wrap
msgid "    $value = $request->cookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:401 docs/master/requests.md:396
#, no-wrap
msgid "<a name=\"input-trimming-and-normalization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:401 docs/master/requests.md:396
#, no-wrap
msgid "Input Trimming & Normalization"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:404 docs/master/requests.md:399
msgid "By default, Laravel includes the `App\\Http\\Middleware\\TrimStrings` and `App\\Http\\Middleware\\ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the global middleware stack by the `App\\Http\\Kernel` class. These middleware will automatically trim all incoming string fields on the request, as well as convert any empty string fields to `null`. This allows you to not have to worry about these normalization concerns in your routes and controllers."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:406 docs/master/requests.md:401
msgid "If you would like to disable this behavior, you may remove the two middleware from your application's middleware stack by removing them from the `$middleware` property of your `App\\Http\\Kernel` class."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:408 docs/master/requests.md:403
#, no-wrap
msgid "<a name=\"files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:408 docs/master/requests.md:403
#, no-wrap
msgid "Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:411 docs/master/requests.md:406
#, no-wrap
msgid "<a name=\"retrieving-uploaded-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:411 docs/master/requests.md:406
#, no-wrap
msgid "Retrieving Uploaded Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:414 docs/master/requests.md:409
msgid "You may retrieve uploaded files from an `Illuminate\\Http\\Request` instance using the `file` method or using dynamic properties. The `file` method returns an instance of the `Illuminate\\Http\\UploadedFile` class, which extends the PHP `SplFileInfo` class and provides a variety of methods for interacting with the file:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:416 docs/master/requests.md:411
#, no-wrap
msgid "    $file = $request->file('photo');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:418 docs/master/requests.md:413
#, no-wrap
msgid "    $file = $request->photo;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:420 docs/master/requests.md:415
msgid "You may determine if a file is present on the request using the `hasFile` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:424 docs/master/requests.md:419
#, no-wrap
msgid "    if ($request->hasFile('photo')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:426 docs/master/requests.md:421
#, no-wrap
msgid "<a name=\"validating-successful-uploads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:426 docs/master/requests.md:421
#, no-wrap
msgid "Validating Successful Uploads"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:429 docs/master/requests.md:424
msgid "In addition to checking if the file is present, you may verify that there were no problems uploading the file via the `isValid` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:433 docs/master/requests.md:428
#, no-wrap
msgid "    if ($request->file('photo')->isValid()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:435 docs/master/requests.md:430
#, no-wrap
msgid "<a name=\"file-paths-extensions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:435 docs/master/requests.md:430
#, no-wrap
msgid "File Paths & Extensions"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:438 docs/master/requests.md:433
msgid "The `UploadedFile` class also contains methods for accessing the file's fully-qualified path and its extension. The `extension` method will attempt to guess the file's extension based on its contents. This extension may be different from the extension that was supplied by the client:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:440 docs/master/requests.md:435
#, no-wrap
msgid "    $path = $request->photo->path();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:442 docs/master/requests.md:437
#, no-wrap
msgid "    $extension = $request->photo->extension();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:444 docs/master/requests.md:439
#, no-wrap
msgid "<a name=\"other-file-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:444 docs/master/requests.md:439
#, no-wrap
msgid "Other File Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:447 docs/master/requests.md:442
msgid "There are a variety of other methods available on `UploadedFile` instances. Check out the [API documentation for the class](https://api.symfony.com/master/Symfony/Component/HttpFoundation/File/UploadedFile.html) for more information regarding these methods."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:449 docs/master/requests.md:444
#, no-wrap
msgid "<a name=\"storing-uploaded-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/requests.md:449 docs/master/requests.md:444
#, no-wrap
msgid "Storing Uploaded Files"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:452 docs/master/requests.md:447
msgid "To store an uploaded file, you will typically use one of your configured [filesystems](/docs/{{version}}/filesystem). The `UploadedFile` class has a `store` method that will move an uploaded file to one of your disks, which may be a location on your local filesystem or a cloud storage location like Amazon S3."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:454 docs/master/requests.md:449
msgid "The `store` method accepts the path where the file should be stored relative to the filesystem's configured root directory. This path should not contain a filename, since a unique ID will automatically be generated to serve as the filename."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:456 docs/master/requests.md:451
msgid "The `store` method also accepts an optional second argument for the name of the disk that should be used to store the file. The method will return the path of the file relative to the disk's root:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:458 docs/master/requests.md:453
#, no-wrap
msgid "    $path = $request->photo->store('images');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:460 docs/master/requests.md:455
#, no-wrap
msgid "    $path = $request->photo->store('images', 's3');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:462 docs/master/requests.md:457
msgid "If you do not want a filename to be automatically generated, you may use the `storeAs` method, which accepts the path, filename, and disk name as its arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:464 docs/master/requests.md:459
#, no-wrap
msgid "    $path = $request->photo->storeAs('images', 'filename.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:466 docs/master/requests.md:461
#, no-wrap
msgid "    $path = $request->photo->storeAs('images', 'filename.jpg', 's3');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:468 docs/master/requests.md:463
#, no-wrap
msgid "> {tip} For more information about file storage in Laravel, check out the complete [file storage documentation](/docs/{{version}}/filesystem).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:470 docs/master/requests.md:465
#, no-wrap
msgid "<a name=\"configuring-trusted-proxies\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/requests.md:470 docs/master/requests.md:465
#, no-wrap
msgid "Configuring Trusted Proxies"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:473 docs/master/requests.md:468
msgid "When running your applications behind a load balancer that terminates TLS / SSL certificates, you may notice your application sometimes does not generate HTTPS links when using the `url` helper. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:475 docs/master/requests.md:470
msgid "To solve this, you may use the `App\\Http\\Middleware\\TrustProxies` middleware that is included in your Laravel application, which allows you to quickly customize the load balancers or proxies that should be trusted by your application. Your trusted proxies should be listed as an array on the `$proxies` property of this middleware. In addition to configuring the trusted proxies, you may configure the proxy `$headers` that should be trusted:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:482 docs/master/requests.md:477
#, no-wrap
msgid "    use Fideloper\\Proxy\\TrustProxies as Middleware;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:494 docs/master/requests.md:489
#, no-wrap
msgid "    class TrustProxies extends Middleware\n"
"    {\n"
"        /**\n"
"         * The trusted proxies for this application.\n"
"         *\n"
"         * @var string|array\n"
"         */\n"
"        protected $proxies = [\n"
"            '192.168.1.1',\n"
"            '192.168.1.2',\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:502 docs/master/requests.md:497
#, no-wrap
msgid "        /**\n"
"         * The headers that should be used to detect proxies.\n"
"         *\n"
"         * @var int\n"
"         */\n"
"        protected $headers = Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:504 docs/master/requests.md:499
#, no-wrap
msgid "> {tip} If you are using AWS Elastic Load Balancing, your `$headers` value should be `Request::HEADER_X_FORWARDED_AWS_ELB`. For more information on the constants that may be used in the `$headers` property, check out Symfony's documentation on [trusting proxies](https://symfony.com/doc/current/deployment/proxies.html).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:506 docs/master/requests.md:501
#, no-wrap
msgid "<a name=\"trusting-all-proxies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/requests.md:506 docs/master/requests.md:501
#, no-wrap
msgid "Trusting All Proxies"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:509 docs/master/requests.md:504
msgid "If you are using Amazon AWS or another \"cloud\" load balancer provider, you may not know the IP addresses of your actual balancers. In this case, you may use `*` to trust all proxies:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:516 docs/master/requests.md:510
#, no-wrap
msgid "    /**\n"
"     * The trusted proxies for this application.\n"
"     *\n"
"     * @var string|array\n"
"     */\n"
"    protected $proxies = '*';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:523
msgid "Typically, you should configure your web server, such as Nginx or Apache, to only send requests to your application that match a given host name. However, if you do not have the ability to customize your web server directly and need to instruct Laravel to only respond to certain host names, you may do so by enabling the `App\\Http\\Middleware\\TrustHosts` middleware for your application."
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:525
msgid "The `TrustHosts` middleware is already included in the `$middleware` stack of your application; however, you should uncomment it so that it becomes active. Within this middleware's `hosts` method, you may specify the host names that your application should respond to. Incoming requests with other `Host` value headers will be rejected:"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:538
#, no-wrap
msgid "    /**\n"
"     * Get the host patterns that should be trusted.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function hosts()\n"
"    {\n"
"        return [\n"
"            'laravel.test',\n"
"            $this->allSubdomainsOfApplicationUrl(),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/requests.md:539
msgid "The `allSubdomainsOfApplicationUrl` helper method will return a regular expression matching all subdomains of your application's `app.url` configuration value. This helper method provides a convenient way to allow all of your application's subdomains when building an application that utilizes wildcard subdomains."
msgstr ""

#. type: Title #
#: docs/8.x/responses.md:1 docs/master/responses.md:1
#, no-wrap
msgid "HTTP Responses"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Creating Responses](#creating-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Attaching Headers To Responses](#attaching-headers-to-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Attaching Cookies To Responses](#attaching-cookies-to-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Cookies & Encryption](#cookies-and-encryption)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Redirects](#redirects)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Redirecting To Named Routes](#redirecting-named-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Redirecting To Controller Actions](#redirecting-controller-actions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Redirecting To External Domains](#redirecting-external-domains)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Redirecting With Flashed Session Data](#redirecting-with-flashed-session-data)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Other Response Types](#other-response-types)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[View Responses](#view-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[JSON Responses](#json-responses)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[File Downloads](#file-downloads)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[File Responses](#file-responses)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/responses.md:18 docs/master/responses.md:18
msgid "[Response Macros](#response-macros)"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:20 docs/master/responses.md:20
#, no-wrap
msgid "<a name=\"creating-responses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:20 docs/master/responses.md:20
#, no-wrap
msgid "Creating Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:23 docs/master/responses.md:23
#, no-wrap
msgid "<a name=\"strings-arrays\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:23 docs/master/responses.md:23
#, no-wrap
msgid "Strings & Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:26 docs/master/responses.md:26
msgid "All routes and controllers should return a response to be sent back to the user's browser. Laravel provides several different ways to return responses. The most basic response is returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:30 docs/master/responses.md:30
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return 'Hello World';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:32 docs/master/responses.md:32
msgid "In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:36 docs/master/responses.md:36
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return [1, 2, 3];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:38 docs/master/responses.md:38
#, no-wrap
msgid "> {tip} Did you know you can also return [Eloquent collections](/docs/{{version}}/eloquent-collections) from your routes or controllers? They will automatically be converted to JSON. Give it a shot!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:40 docs/master/responses.md:40
#, no-wrap
msgid "<a name=\"response-objects\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:40 docs/master/responses.md:40
#, no-wrap
msgid "Response Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:43 docs/master/responses.md:43
msgid "Typically, you won't just be returning simple strings or arrays from your route actions. Instead, you will be returning full `Illuminate\\Http\\Response` instances or [views](/docs/{{version}}/views)."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:45 docs/master/responses.md:45
msgid "Returning a full `Response` instance allows you to customize the response's HTTP status code and headers. A `Response` instance inherits from the `Symfony\\Component\\HttpFoundation\\Response` class, which provides a variety of methods for building HTTP responses:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:50 docs/master/responses.md:50
#, no-wrap
msgid "    Route::get('/home', function () {\n"
"        return response('Hello World', 200)\n"
"                      ->header('Content-Type', 'text/plain');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:52 docs/master/responses.md:52
#, no-wrap
msgid "<a name=\"eloquent-models-and-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:52 docs/master/responses.md:52
#, no-wrap
msgid "Eloquent Models & Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:55 docs/master/responses.md:55
msgid "You may also return [Eloquent ORM](/docs/{{version}}/eloquent) models and collections directly from your routes and controllers. When you do, Laravel will automatically convert the models and collections to JSON responses while respecting the model's [hidden attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json):"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:61 docs/master/responses.md:61
#, no-wrap
msgid "    Route::get('/user/{user}', function (User $user) {\n"
"        return $user;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:63 docs/master/responses.md:63
#, no-wrap
msgid "<a name=\"attaching-headers-to-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:63 docs/master/responses.md:63
#, no-wrap
msgid "Attaching Headers To Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:66 docs/master/responses.md:66
msgid "Keep in mind that most response methods are chainable, allowing for the fluent construction of response instances. For example, you may use the `header` method to add a series of headers to the response before sending it back to the user:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:71 docs/master/responses.md:71
#, no-wrap
msgid "    return response($content)\n"
"                ->header('Content-Type', $type)\n"
"                ->header('X-Header-One', 'Header Value')\n"
"                ->header('X-Header-Two', 'Header Value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:73 docs/master/responses.md:73
msgid "Or, you may use the `withHeaders` method to specify an array of headers to be added to the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:80 docs/master/responses.md:80
#, no-wrap
msgid "    return response($content)\n"
"                ->withHeaders([\n"
"                    'Content-Type' => $type,\n"
"                    'X-Header-One' => 'Header Value',\n"
"                    'X-Header-Two' => 'Header Value',\n"
"                ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:82 docs/master/responses.md:82
#, no-wrap
msgid "<a name=\"cache-control-middleware\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:82 docs/master/responses.md:82
#, no-wrap
msgid "Cache Control Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:85 docs/master/responses.md:85
msgid "Laravel includes a `cache.headers` middleware, which may be used to quickly set the `Cache-Control` header for a group of routes. If `etag` is specified in the list of directives, an MD5 hash of the response content will automatically be set as the ETag identifier:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:90 docs/master/responses.md:90
#, no-wrap
msgid "    Route::middleware('cache.headers:public;max_age=2628000;etag')->group(function () {\n"
"        Route::get('/privacy', function () {\n"
"            // ...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:95 docs/master/responses.md:95
#, no-wrap
msgid "        Route::get('/terms', function () {\n"
"            // ...\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:97 docs/master/responses.md:97
#, no-wrap
msgid "<a name=\"attaching-cookies-to-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:97 docs/master/responses.md:97
#, no-wrap
msgid "Attaching Cookies To Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:100 docs/master/responses.md:100
msgid "You may attach a cookie to an outgoing `Illuminate\\Http\\Response` instance using the `cookie` method. You should pass the name, value, and the number of minutes the cookie should be considered valid to this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:104 docs/master/responses.md:104
#, no-wrap
msgid "    return response('Hello World')->cookie(\n"
"        'name', 'value', $minutes\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:106 docs/master/responses.md:106
msgid "The `cookie` method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP's native [setcookie](https://secure.php.net/manual/en/function.setcookie.php) method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:110 docs/master/responses.md:110
#, no-wrap
msgid "    return response('Hello World')->cookie(\n"
"        'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:112 docs/master/responses.md:112
msgid "If you would like to ensure that a cookie is sent with the outgoing response but you do not yet have an instance of that response, you can use the `Cookie` facade to \"queue\" cookies for attachment to the response when it is sent. The `queue` method accepts the arguments needed to create a cookie instance. These cookies will be attached to the outgoing response before it is sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:114 docs/master/responses.md:114
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cookie;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:116 docs/master/responses.md:116
#, no-wrap
msgid "    Cookie::queue('name', 'value', $minutes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:118 docs/master/responses.md:118
#, no-wrap
msgid "<a name=\"generating-cookie-instances\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:118 docs/master/responses.md:118
#, no-wrap
msgid "Generating Cookie Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:121 docs/master/responses.md:121
msgid "If you would like to generate a `Symfony\\Component\\HttpFoundation\\Cookie` instance that can be attached to a response instance at a later time, you may use the global `cookie` helper. This cookie will not be sent back to the client unless it is attached to a response instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:125 docs/master/responses.md:125
#, no-wrap
msgid "    return response('Hello World')->cookie($cookie);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:127 docs/master/responses.md:127
#, no-wrap
msgid "<a name=\"expiring-cookies-early\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:127 docs/master/responses.md:127
#, no-wrap
msgid "Expiring Cookies Early"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:130 docs/master/responses.md:130
msgid "You may remove a cookie by expiring it via the `withoutCookie` method of an outgoing response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:132 docs/master/responses.md:132
#, no-wrap
msgid "    return response('Hello World')->withoutCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:134 docs/master/responses.md:134
msgid "If you do not yet have an instance of the outgoing response, you may use the `Cookie` facade's `queue` method to expire a cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:136 docs/master/responses.md:136
#, no-wrap
msgid "    Cookie::queue(Cookie::forget('name'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:138 docs/master/responses.md:138
#, no-wrap
msgid "<a name=\"cookies-and-encryption\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:138 docs/master/responses.md:138
#, no-wrap
msgid "Cookies & Encryption"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:141 docs/master/responses.md:141
msgid "By default, all cookies generated by Laravel are encrypted and signed so that they can't be modified or read by the client. If you would like to disable encryption for a subset of cookies generated by your application, you may use the `$except` property of the `App\\Http\\Middleware\\EncryptCookies` middleware, which is located in the `app/Http/Middleware` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:150 docs/master/responses.md:150
#, no-wrap
msgid "    /**\n"
"     * The names of the cookies that should not be encrypted.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = [\n"
"        'cookie_name',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:152 docs/master/responses.md:152
#, no-wrap
msgid "<a name=\"redirects\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:152 docs/master/responses.md:152
#, no-wrap
msgid "Redirects"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:159 docs/master/responses.md:159
#, no-wrap
msgid "    Route::get('/dashboard', function () {\n"
"        return redirect('home/dashboard');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:161 docs/master/responses.md:161
msgid "Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global `back` helper function. Since this feature utilizes the [session](/docs/{{version}}/session), make sure the route calling the `back` function is using the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:178 docs/8.x/responses.md:187
#: docs/master/responses.md:178 docs/master/responses.md:187
#, no-wrap
msgid "    // For a route with the following URI: /profile/{id}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:191 docs/master/responses.md:191
msgid "If you would like to customize the value that is placed in the route parameter, you can specify the column in the route parameter definition (`/profile/{id:slug}`) or you can override the `getRouteKey` method on your Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:210 docs/master/responses.md:210
#, no-wrap
msgid "    return redirect()->action([UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:218 docs/master/responses.md:218
#, no-wrap
msgid "<a name=\"redirecting-external-domains\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:218 docs/master/responses.md:218
#, no-wrap
msgid "Redirecting To External Domains"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:221 docs/master/responses.md:221
msgid "Sometimes you may need to redirect to a domain outside of your application. You may do so by calling the `away` method, which creates a `RedirectResponse` without any additional URL encoding, validation, or verification:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:223 docs/master/responses.md:223
#, no-wrap
msgid "    return redirect()->away('https://www.google.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:231 docs/master/responses.md:231
#, no-wrap
msgid "    Route::post('/user/profile', function () {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:234 docs/master/responses.md:234
#, no-wrap
msgid "        return redirect('dashboard')->with('status', 'Profile updated!');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:244 docs/master/responses.md:244
#, no-wrap
msgid "<a name=\"redirecting-with-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:244 docs/master/responses.md:244
#, no-wrap
msgid "Redirecting With Input"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:247 docs/master/responses.md:247
msgid "You may use the `withInput` method provided by the `RedirectResponse` instance to flash the current request's input data to the session before redirecting the user to a new location. This is typically done if the user has encountered a validation error. Once the input has been flashed to the session, you may easily [retrieve it](/docs/{{version}}/requests#retrieving-old-input) during the next request to repopulate the form:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:251 docs/master/responses.md:251
#, no-wrap
msgid "<a name=\"other-response-types\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:251 docs/master/responses.md:251
#, no-wrap
msgid "Other Response Types"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:254 docs/master/responses.md:254
msgid "The `response` helper may be used to generate other types of response instances. When the `response` helper is called without arguments, an implementation of the `Illuminate\\Contracts\\Routing\\ResponseFactory` [contract](/docs/{{version}}/contracts) is returned. This contract provides several helpful methods for generating responses."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:256 docs/master/responses.md:256
#, no-wrap
msgid "<a name=\"view-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:256 docs/master/responses.md:256
#, no-wrap
msgid "View Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:259 docs/master/responses.md:259
msgid "If you need control over the response's status and headers but also need to return a [view](/docs/{{version}}/views) as the response's content, you should use the `view` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:263 docs/master/responses.md:263
#, no-wrap
msgid "    return response()\n"
"                ->view('hello', $data, 200)\n"
"                ->header('Content-Type', $type);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:265 docs/master/responses.md:265
msgid "Of course, if you do not need to pass a custom HTTP status code or custom headers, you may use the global `view` helper function."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:267 docs/master/responses.md:267
#, no-wrap
msgid "<a name=\"json-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:267 docs/master/responses.md:267
#, no-wrap
msgid "JSON Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:270 docs/master/responses.md:270
msgid "The `json` method will automatically set the `Content-Type` header to `application/json`, as well as convert the given array to JSON using the `json_encode` PHP function:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:275 docs/master/responses.md:275
#, no-wrap
msgid "    return response()->json([\n"
"        'name' => 'Abigail',\n"
"        'state' => 'CA',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:277 docs/master/responses.md:277
msgid "If you would like to create a JSONP response, you may use the `json` method in combination with the `withCallback` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:281 docs/master/responses.md:281
#, no-wrap
msgid "    return response()\n"
"                ->json(['name' => 'Abigail', 'state' => 'CA'])\n"
"                ->withCallback($request->input('callback'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:283 docs/master/responses.md:283
#, no-wrap
msgid "<a name=\"file-downloads\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:283 docs/master/responses.md:283
#, no-wrap
msgid "File Downloads"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:288 docs/master/responses.md:288
#, no-wrap
msgid "    return response()->download($pathToFile);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:290 docs/master/responses.md:290
#, no-wrap
msgid "    return response()->download($pathToFile, $name, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:292 docs/master/responses.md:292
#, no-wrap
msgid "> {note} Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII filename.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:294 docs/master/responses.md:294
#, no-wrap
msgid "<a name=\"streamed-downloads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:294 docs/master/responses.md:294
#, no-wrap
msgid "Streamed Downloads"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:297 docs/master/responses.md:297
msgid "Sometimes you may wish to turn the string response of a given operation into a downloadable response without having to write the contents of the operation to disk. You may use the `streamDownload` method in this scenario. This method accepts a callback, filename, and an optional array of headers as its arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:299 docs/master/responses.md:299
#, no-wrap
msgid "    use App\\Services\\GitHub;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:305 docs/master/responses.md:305
#, no-wrap
msgid "    return response()->streamDownload(function () {\n"
"        echo GitHub::api('repo')\n"
"                    ->contents()\n"
"                    ->readme('laravel', 'laravel')['contents'];\n"
"    }, 'laravel-readme.md');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:307 docs/master/responses.md:307
#, no-wrap
msgid "<a name=\"file-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:307 docs/master/responses.md:307
#, no-wrap
msgid "File Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:310 docs/master/responses.md:310
msgid "The `file` method may be used to display a file, such as an image or PDF, directly in the user's browser instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:312 docs/master/responses.md:312
#, no-wrap
msgid "    return response()->file($pathToFile);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:314 docs/master/responses.md:314
#, no-wrap
msgid "    return response()->file($pathToFile, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:316 docs/master/responses.md:316
#, no-wrap
msgid "<a name=\"response-macros\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:316 docs/master/responses.md:316
#, no-wrap
msgid "Response Macros"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:319 docs/master/responses.md:319
msgid "If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the `macro` method on the `Response` facade. Typically, you should call this method from the `boot` method of one of your application's [service providers](/docs/{{version}}/providers), such as the `App\\Providers\\AppServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:326 docs/master/responses.md:326
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Response;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:341 docs/master/responses.md:341
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Response::macro('caps', function ($value) {\n"
"                return Response::make(strtoupper($value));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:343 docs/master/responses.md:343
msgid "The `macro` function accepts a name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `ResponseFactory` implementation or the `response` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:344 docs/master/responses.md:344
#, no-wrap
msgid "    return response()->caps('foo');\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Basic Routing](#basic-routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Redirect Routes](#redirect-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[View Routes](#view-routes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Parameters](#route-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Required Parameters](#required-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Optional Parameters](#parameters-optional-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Regular Expression Constraints](#parameters-regular-expression-constraints)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Named Routes](#named-routes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Groups](#route-groups)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Middleware](#route-group-middleware)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Subdomain Routing](#route-group-subdomain-routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Prefixes](#route-group-prefixes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Name Prefixes](#route-group-name-prefixes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Model Binding](#route-model-binding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Implicit Binding](#implicit-binding)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Explicit Binding](#explicit-binding)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Fallback Routes](#fallback-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Defining Rate Limiters](#defining-rate-limiters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Attaching Rate Limiters To Routes](#attaching-rate-limiters-to-routes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Form Method Spoofing](#form-method-spoofing)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Accessing The Current Route](#accessing-the-current-route)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Cross-Origin Resource Sharing (CORS)](#cors)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/routing.md:27 docs/master/routing.md:27
msgid "[Route Caching](#route-caching)"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:29 docs/master/routing.md:29
#, no-wrap
msgid "<a name=\"basic-routing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:29 docs/master/routing.md:29
#, no-wrap
msgid "Basic Routing"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:32 docs/master/routing.md:32
msgid "The most basic Laravel routes accept a URI and a closure, providing a very simple and expressive method of defining routes and behavior without complicated routing configuration files:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:34 docs/8.x/routing.md:647 docs/master/routing.md:34
#: docs/master/routing.md:646
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:38 docs/master/routing.md:38
#, no-wrap
msgid "    Route::get('/greeting', function () {\n"
"        return 'Hello World';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:40 docs/master/routing.md:40
#, no-wrap
msgid "<a name=\"the-default-route-files\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:40 docs/master/routing.md:40
#, no-wrap
msgid "The Default Route Files"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:43 docs/master/routing.md:43
msgid "All Laravel routes are defined in your route files, which are located in the `routes` directory. These files are automatically loaded by your application's `App\\Providers\\RouteServiceProvider`. The `routes/web.php` file defines routes that are for your web interface. These routes are assigned the `web` middleware group, which provides features like session state and CSRF protection. The routes in `routes/api.php` are stateless and are assigned the `api` middleware group."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:45 docs/master/routing.md:45
msgid "For most applications, you will begin by defining routes in your `routes/web.php` file. The routes defined in `routes/web.php` may be accessed by entering the defined route's URL in your browser. For example, you may access the following route by navigating to `http://example.com/user` in your browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:49 docs/master/routing.md:49
#, no-wrap
msgid "    Route::get('/user', [UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:51 docs/master/routing.md:51
msgid "Routes defined in the `routes/api.php` file are nested within a route group by the `RouteServiceProvider`. Within this group, the `/api` URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your `RouteServiceProvider` class."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:53 docs/master/routing.md:53
#, no-wrap
msgid "<a name=\"available-router-methods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:53 docs/master/routing.md:53
#, no-wrap
msgid "Available Router Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:56 docs/master/routing.md:56
msgid "The router allows you to register routes that respond to any HTTP verb:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:63 docs/master/routing.md:63
#, no-wrap
msgid "    Route::get($uri, $callback);\n"
"    Route::post($uri, $callback);\n"
"    Route::put($uri, $callback);\n"
"    Route::patch($uri, $callback);\n"
"    Route::delete($uri, $callback);\n"
"    Route::options($uri, $callback);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:65 docs/master/routing.md:65
msgid "Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the `match` method. Or, you may even register a route that responds to all HTTP verbs using the `any` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:69 docs/master/routing.md:69
#, no-wrap
msgid "    Route::match(['get', 'post'], '/', function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:73 docs/master/routing.md:73
#, no-wrap
msgid "    Route::any('/', function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:75 docs/master/routing.md:75
#, no-wrap
msgid "<a name=\"dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:75 docs/master/routing.md:75
#, no-wrap
msgid "Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:78 docs/master/routing.md:78
msgid "You may type-hint any dependencies required by your route in your route's callback signature. The declared dependencies will automatically be resolved and injected into the callback by the Laravel [service container](/docs/{{version}}/container). For example, you may type-hint the `Illuminate\\Http\\Request` class to have the current HTTP request automatically injected into your route callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:84 docs/master/routing.md:84
#, no-wrap
msgid "    Route::get('/users', function (Request $request) {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:89 docs/master/routing.md:89
msgid "Remember, any HTML forms pointing to `POST`, `PUT`, `PATCH`, or `DELETE` routes that are defined in the `web` routes file should include a CSRF token field. Otherwise, the request will be rejected. You can read more about CSRF protection in the [CSRF documentation](/docs/{{version}}/csrf):"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:94 docs/master/routing.md:94
#, no-wrap
msgid "    <form method=\"POST\" action=\"/profile\">\n"
"        @csrf\n"
"        ...\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:96 docs/master/routing.md:96
#, no-wrap
msgid "<a name=\"redirect-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:96 docs/master/routing.md:96
#, no-wrap
msgid "Redirect Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:99 docs/master/routing.md:99
msgid "If you are defining a route that redirects to another URI, you may use the `Route::redirect` method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:101 docs/master/routing.md:101
#, no-wrap
msgid "    Route::redirect('/here', '/there');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:103 docs/master/routing.md:103
msgid "By default, `Route::redirect` returns a `302` status code. You may customize the status code using the optional third parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:105 docs/master/routing.md:105
#, no-wrap
msgid "    Route::redirect('/here', '/there', 301);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:107 docs/master/routing.md:107
msgid "Or, you may use the `Route::permanentRedirect` method to return a `301` status code:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:109 docs/master/routing.md:109
#, no-wrap
msgid "    Route::permanentRedirect('/here', '/there');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:111 docs/master/routing.md:111
#, no-wrap
msgid "> {note} When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: `destination` and `status`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:113 docs/master/routing.md:113
#, no-wrap
msgid "<a name=\"view-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:113 docs/master/routing.md:113
#, no-wrap
msgid "View Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:116 docs/master/routing.md:116
msgid "If your route only needs to return a [view](/docs/{{version}}/views), you may use the `Route::view` method. Like the `redirect` method, this method provides a simple shortcut so that you do not have to define a full route or controller. The `view` method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:118 docs/master/routing.md:118
#, no-wrap
msgid "    Route::view('/welcome', 'welcome');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:120 docs/master/routing.md:120
#, no-wrap
msgid "    Route::view('/welcome', 'welcome', ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:122 docs/master/routing.md:122
#, no-wrap
msgid "> {note} When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: `view`, `data`, `status`, and `headers`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:124 docs/master/routing.md:124
#, no-wrap
msgid "<a name=\"route-parameters\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:124 docs/master/routing.md:124
#, no-wrap
msgid "Route Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:127 docs/master/routing.md:127
#, no-wrap
msgid "<a name=\"required-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:127 docs/master/routing.md:127
#, no-wrap
msgid "Required Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:130 docs/master/routing.md:130
msgid "Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:134 docs/master/routing.md:134
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:136 docs/master/routing.md:136
msgid "You may define as many route parameters as required by your route:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:140 docs/master/routing.md:140
#, no-wrap
msgid "    Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:142 docs/master/routing.md:142
msgid "Route parameters are always encased within `{}` braces and should consist of alphabetic characters. Underscores (`_`) are also acceptable within route parameter names. Route parameters are injected into route callbacks / controllers based on their order - the names of the route callback / controller arguments do not matter."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:144 docs/master/routing.md:144
#, no-wrap
msgid "<a name=\"parameters-and-dependency-injection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:144 docs/master/routing.md:144
#, no-wrap
msgid "Parameters & Dependency Injection"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:147 docs/master/routing.md:147
msgid "If your route has dependencies that you would like the Laravel service container to automatically inject into your route's callback, you should list your route parameters after your dependencies:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:153 docs/master/routing.md:153
#, no-wrap
msgid "    Route::get('/user/{id}', function (Request $request, $id) {\n"
"        return 'User '.$id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:155 docs/master/routing.md:155
#, no-wrap
msgid "<a name=\"parameters-optional-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:155 docs/8.x/socialite.md:68 docs/master/routing.md:155
#: docs/master/socialite.md:68
#, no-wrap
msgid "Optional Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:158 docs/master/routing.md:158
msgid "Occasionally you may need to specify a route parameter that may not always be present in the URI. You may do so by placing a `?` mark after the parameter name. Make sure to give the route's corresponding variable a default value:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:162 docs/master/routing.md:162
#, no-wrap
msgid "    Route::get('/user/{name?}', function ($name = null) {\n"
"        return $name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:166 docs/master/routing.md:166
#, no-wrap
msgid "    Route::get('/user/{name?}', function ($name = 'John') {\n"
"        return $name;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:168 docs/master/routing.md:168
#, no-wrap
msgid "<a name=\"parameters-regular-expression-constraints\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:168 docs/master/routing.md:168
#, no-wrap
msgid "Regular Expression Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:171 docs/master/routing.md:171
msgid "You may constrain the format of your route parameters using the `where` method on a route instance. The `where` method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:175 docs/master/routing.md:175
#, no-wrap
msgid "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->where('name', '[A-Za-z]+');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:179 docs/master/routing.md:179
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->where('id', '[0-9]+');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:183 docs/master/routing.md:183
#, no-wrap
msgid "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:185 docs/master/routing.md:185
msgid "For convenience, some commonly used regular expression patterns have helper methods that allow you to quickly add pattern constraints to your routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:189 docs/master/routing.md:189
#, no-wrap
msgid "    Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"        //\n"
"    })->whereNumber('id')->whereAlpha('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:193 docs/master/routing.md:193
#, no-wrap
msgid "    Route::get('/user/{name}', function ($name) {\n"
"        //\n"
"    })->whereAlphaNumeric('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:197 docs/master/routing.md:197
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        //\n"
"    })->whereUuid('id');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:199 docs/master/routing.md:199
msgid "If the incoming request does not match the route pattern constraints, a 404 HTTP response will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:201 docs/master/routing.md:201
#, no-wrap
msgid "<a name=\"parameters-global-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:201 docs/master/routing.md:201
#, no-wrap
msgid "Global Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:204 docs/master/routing.md:204
msgid "If you would like a route parameter to always be constrained by a given regular expression, you may use the `pattern` method. You should define these patterns in the `boot` method of your `App\\Providers\\RouteServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:214 docs/master/routing.md:214
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::pattern('id', '[0-9]+');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:216 docs/master/routing.md:216
msgid "Once the pattern has been defined, it is automatically applied to all routes using that parameter name:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:220 docs/master/routing.md:220
#, no-wrap
msgid "    Route::get('/user/{id}', function ($id) {\n"
"        // Only executed if {id} is numeric...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:222 docs/master/routing.md:222
#, no-wrap
msgid "<a name=\"parameters-encoded-forward-slashes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:222 docs/master/routing.md:222
#, no-wrap
msgid "Encoded Forward Slashes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:225 docs/master/routing.md:225
msgid "The Laravel routing component allows all characters except `/` to be present within route parameter values. You must explicitly allow `/` to be part of your placeholder using a `where` condition regular expression:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:229 docs/master/routing.md:229
#, no-wrap
msgid "    Route::get('/search/{search}', function ($search) {\n"
"        return $search;\n"
"    })->where('search', '.*');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:231 docs/master/routing.md:231
#, no-wrap
msgid "> {note} Encoded forward slashes are only supported within the last route segment.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:233 docs/master/routing.md:233
#, no-wrap
msgid "<a name=\"named-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:233 docs/master/routing.md:233
#, no-wrap
msgid "Named Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:236 docs/master/routing.md:236
msgid "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the `name` method onto the route definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:240 docs/master/routing.md:240
#, no-wrap
msgid "    Route::get('/user/profile', function () {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:242 docs/master/routing.md:242
msgid "You may also specify route names for controller actions:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:247 docs/master/routing.md:247
#, no-wrap
msgid "    Route::get(\n"
"        '/user/profile',\n"
"        [UserProfileController::class, 'show']\n"
"    )->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:249 docs/master/routing.md:249
#, no-wrap
msgid "> {note} Route names should always be unique.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:251 docs/master/routing.md:251
#, no-wrap
msgid "<a name=\"generating-urls-to-named-routes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:251 docs/master/routing.md:251
#, no-wrap
msgid "Generating URLs To Named Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:254 docs/master/routing.md:254
msgid "Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via Laravel's `route` and `redirect` helper functions:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:257 docs/master/routing.md:257
#, no-wrap
msgid "    // Generating URLs...\n"
"    $url = route('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:260 docs/master/routing.md:260
#, no-wrap
msgid "    // Generating Redirects...\n"
"    return redirect()->route('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:262 docs/master/routing.md:262
msgid "If the named route defines parameters, you may pass the parameters as the second argument to the `route` function. The given parameters will automatically be inserted into the generated URL in their correct positions:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:266 docs/8.x/routing.md:274 docs/master/routing.md:266
#: docs/master/routing.md:274
#, no-wrap
msgid "    Route::get('/user/{id}/profile', function ($id) {\n"
"        //\n"
"    })->name('profile');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:268 docs/master/routing.md:268
#, no-wrap
msgid "    $url = route('profile', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:270 docs/master/routing.md:270
msgid "If you pass additional parameters in the array, those key / value pairs will automatically be added to the generated URL's query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:276 docs/master/routing.md:276
#, no-wrap
msgid "    $url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:278 docs/master/routing.md:278
#, no-wrap
msgid "    // /user/1/profile?photos=yes\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:280 docs/master/routing.md:280
#, no-wrap
msgid "> {tip} Sometimes, you may wish to specify request-wide default values for URL parameters, such as the current locale. To accomplish this, you may use the [`URL::defaults` method](/docs/{{version}}/urls#default-values).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:282 docs/master/routing.md:282
#, no-wrap
msgid "<a name=\"inspecting-the-current-route\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:282 docs/master/routing.md:282
#, no-wrap
msgid "Inspecting The Current Route"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:285 docs/master/routing.md:285
msgid "If you would like to determine if the current request was routed to a given named route, you may use the `named` method on a Route instance. For example, you may check the current route name from a route middleware:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:298 docs/master/routing.md:298
#, no-wrap
msgid "    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->route()->named('profile')) {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:301 docs/master/routing.md:301
#, no-wrap
msgid "        return $next($request);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:303 docs/master/routing.md:303
#, no-wrap
msgid "<a name=\"route-groups\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:303 docs/master/routing.md:303
#, no-wrap
msgid "Route Groups"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:306 docs/master/routing.md:306
msgid "Route groups allow you to share route attributes, such as middleware, across a large number of routes without needing to define those attributes on each individual route."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:308 docs/master/routing.md:308
msgid "Nested groups attempt to intelligently \"merge\" attributes with their parent group. Middleware and `where` conditions are merged while names and prefixes are appended. Namespace delimiters and slashes in URI prefixes are automatically added where appropriate."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:310 docs/master/routing.md:310
#, no-wrap
msgid "<a name=\"route-group-middleware\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:313 docs/master/routing.md:313
msgid "To assign [middleware](/docs/{{version}}/middleware) to all routes within a group, you may use the `middleware` method before defining the group. Middleware are executed in the order they are listed in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:318 docs/master/routing.md:318
#, no-wrap
msgid "    Route::middleware(['first', 'second'])->group(function () {\n"
"        Route::get('/', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:323 docs/master/routing.md:323
#, no-wrap
msgid "        Route::get('/user/profile', function () {\n"
"            // Uses first & second middleware...\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:325 docs/master/routing.md:325
#, no-wrap
msgid "<a name=\"route-group-subdomain-routing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:325 docs/master/routing.md:325
#, no-wrap
msgid "Subdomain Routing"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:328 docs/master/routing.md:328
msgid "Route groups may also be used to handle subdomain routing. Subdomains may be assigned route parameters just like route URIs, allowing you to capture a portion of the subdomain for usage in your route or controller. The subdomain may be specified by calling the `domain` method before defining the group:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:334 docs/master/routing.md:334
#, no-wrap
msgid "    Route::domain('{account}.example.com')->group(function () {\n"
"        Route::get('user/{id}', function ($account, $id) {\n"
"            //\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:336 docs/master/routing.md:336
#, no-wrap
msgid "> {note} In order to ensure your subdomain routes are reachable, you should register subdomain routes before registering root domain routes. This will prevent root domain routes from overwriting subdomain routes which have the same URI path.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:338 docs/master/routing.md:338
#, no-wrap
msgid "<a name=\"route-group-prefixes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:338 docs/master/routing.md:338
#, no-wrap
msgid "Route Prefixes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:341 docs/master/routing.md:341
msgid "The `prefix` method may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with `admin`:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:347 docs/master/routing.md:347
#, no-wrap
msgid "    Route::prefix('admin')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Matches The \"/admin/users\" URL\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:349 docs/master/routing.md:349
#, no-wrap
msgid "<a name=\"route-group-name-prefixes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:349 docs/master/routing.md:349
#, no-wrap
msgid "Route Name Prefixes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:352 docs/master/routing.md:352
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix all of the grouped route's names with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:358 docs/master/routing.md:358
#, no-wrap
msgid "    Route::name('admin.')->group(function () {\n"
"        Route::get('/users', function () {\n"
"            // Route assigned name \"admin.users\"...\n"
"        })->name('users');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:360 docs/master/routing.md:360
#, no-wrap
msgid "<a name=\"route-model-binding\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:360 docs/master/routing.md:360
#, no-wrap
msgid "Route Model Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:363 docs/master/routing.md:363
msgid "When injecting a model ID to a route or controller action, you will often query the database to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user's ID, you can inject the entire `User` model instance that matches the given ID."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:365 docs/master/routing.md:365
#, no-wrap
msgid "<a name=\"implicit-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:365 docs/master/routing.md:365
#, no-wrap
msgid "Implicit Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:368 docs/master/routing.md:368
msgid "Laravel automatically resolves Eloquent models defined in routes or controller actions whose type-hinted variable names match a route segment name. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:374 docs/master/routing.md:374
#, no-wrap
msgid "    Route::get('/users/{user}', function (User $user) {\n"
"        return $user->email;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:376 docs/master/routing.md:376
msgid "Since the `$user` variable is type-hinted as the `App\\Models\\User` Eloquent model and the variable name matches the `{user}` URI segment, Laravel will automatically inject the model instance that has an ID matching the corresponding value from the request URI. If a matching model instance is not found in the database, a 404 HTTP response will automatically be generated."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:378 docs/master/routing.md:378
msgid "Of course, implicit binding is also possible when using controller methods. Again, note the `{user}` URI segment matches the `$user` variable in the controller which contains an `App\\Models\\User` type-hint:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:381 docs/master/routing.md:381
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:384 docs/master/routing.md:384
#, no-wrap
msgid "    // Route definition...\n"
"    Route::get('/users/{user}', [UserController::class, 'show']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:390 docs/master/routing.md:390
#, no-wrap
msgid "    // Controller method definition...\n"
"    public function show(User $user)\n"
"    {\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:393 docs/master/routing.md:393
#, no-wrap
msgid "<a name=\"customizing-the-key\"></a>\n"
"<a name=\"customizing-the-default-key-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:393 docs/master/routing.md:393
#, no-wrap
msgid "Customizing The Key"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:396 docs/master/routing.md:396
msgid "Sometimes you may wish to resolve Eloquent models using a column other than `id`. To do so, you may specify the column in the route parameter definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:402 docs/master/routing.md:402
#, no-wrap
msgid "    Route::get('/posts/{post:slug}', function (Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:404 docs/master/routing.md:404
msgid "If you would like model binding to always use a database column other than `id` when retrieving a given model class, you may override the `getRouteKeyName` method on the Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:414 docs/master/routing.md:414
#, no-wrap
msgid "    /**\n"
"     * Get the route key for the model.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getRouteKeyName()\n"
"    {\n"
"        return 'slug';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:416 docs/master/routing.md:416
#, no-wrap
msgid "<a name=\"implicit-model-binding-scoping\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:416 docs/master/routing.md:416
#, no-wrap
msgid "Custom Keys & Scoping"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:419 docs/master/routing.md:419
msgid "When implicitly binding multiple Eloquent models in a single route definition, you may wish to scope the second Eloquent model such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:426 docs/master/routing.md:426
#, no-wrap
msgid "    Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:428 docs/master/routing.md:428
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `User` model has a relationship named `posts` (the plural form of the route parameter name) which can be used to retrieve the `Post` model."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:433
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:437
#, no-wrap
msgid "    use App\\Http\\Controllers\\LocationsController;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:443 docs/master/routing.md:442
#, no-wrap
msgid "    Route::get('/locations/{location:slug}', [LocationsController::class, 'show'])\n"
"            ->name('locations.view')\n"
"            ->missing(function (Request $request) {\n"
"                return Redirect::route('locations.index');\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:445 docs/master/routing.md:444
#, no-wrap
msgid "<a name=\"explicit-binding\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:445 docs/master/routing.md:444
#, no-wrap
msgid "Explicit Binding"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:448 docs/master/routing.md:447
msgid "You are not required to use Laravel's implicit, convention based model resolution in order to use model binding. You can also explicitly define how route parameters correspond to models. To register an explicit binding, use the router's `model` method to specify the class for a given parameter. You should define your explicit model bindings at the beginning of the `boot` method of your `RouteServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:451 docs/8.x/routing.md:483 docs/master/routing.md:450
#: docs/master/routing.md:482
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Route;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:460 docs/master/routing.md:459
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::model('user', User::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:465 docs/master/routing.md:464
msgid "Next, define a route that contains a `{user}` parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:471 docs/master/routing.md:470
#, no-wrap
msgid "    Route::get('/users/{user}', function (User $user) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:473 docs/master/routing.md:472
msgid "Since we have bound all `{user}` parameters to the `App\\Models\\User` model, an instance of that class will be injected into the route. So, for example, a request to `users/1` will inject the `User` instance from the database which has an ID of `1`."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:475 docs/master/routing.md:474
msgid "If a matching model instance is not found in the database, a 404 HTTP response will be automatically generated."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:477 docs/master/routing.md:476
#, no-wrap
msgid "<a name=\"customizing-the-resolution-logic\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:477 docs/master/routing.md:476
#, no-wrap
msgid "Customizing The Resolution Logic"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:480 docs/master/routing.md:479
msgid "If you wish to define your own model binding resolution logic, you may use the `Route::bind` method. The closure you pass to the `bind` method will receive the value of the URI segment and should return the instance of the class that should be injected into the route. Again, this customization should take place in the `boot` method of your application's `RouteServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:494 docs/master/routing.md:493
#, no-wrap
msgid "    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Route::bind('user', function ($value) {\n"
"            return User::where('name', $value)->firstOrFail();\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:499 docs/master/routing.md:498
msgid "Alternatively, you may override the `resolveRouteBinding` method on your Eloquent model. This method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:511 docs/master/routing.md:510
#, no-wrap
msgid "    /**\n"
"     * Retrieve the model for a bound value.\n"
"     *\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveRouteBinding($value, $field = null)\n"
"    {\n"
"        return $this->where('name', $value)->firstOrFail();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:513 docs/master/routing.md:512
msgid "If a route is utilizing [implicit binding scoping](#implicit-model-binding-scoping), the `resolveChildRouteBinding` method will be used to resolve the child binding of the parent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:526 docs/master/routing.md:525
#, no-wrap
msgid "    /**\n"
"     * Retrieve the child model for a bound value.\n"
"     *\n"
"     * @param  string  $childType\n"
"     * @param  mixed  $value\n"
"     * @param  string|null  $field\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
"     */\n"
"    public function resolveChildRouteBinding($childType, $value, $field)\n"
"    {\n"
"        return parent::resolveChildRouteBinding($childType, $value, $field);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:528 docs/master/routing.md:527
#, no-wrap
msgid "<a name=\"fallback-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:528 docs/master/routing.md:527
#, no-wrap
msgid "Fallback Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:531 docs/master/routing.md:530
msgid "Using the `Route::fallback` method, you may define a route that will be executed when no other route matches the incoming request. Typically, unhandled requests will automatically render a \"404\" page via your application's exception handler. However, since you would typically define the `fallback` route within your `routes/web.php` file, all middleware in the `web` middleware group will apply to the route. You are free to add additional middleware to this route as needed:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:535 docs/master/routing.md:534
#, no-wrap
msgid "    Route::fallback(function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:537 docs/master/routing.md:536
#, no-wrap
msgid "> {note} The fallback route should always be the last route registered by your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:542 docs/master/routing.md:541
#, no-wrap
msgid "<a name=\"defining-rate-limiters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:542 docs/master/routing.md:541
#, no-wrap
msgid "Defining Rate Limiters"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:545 docs/master/routing.md:544
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:547 docs/master/routing.md:546
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned to the rate limiter. Limit configuration are instances of the `Illuminate\\Cache\\RateLimiting\\Limit` class. This class contains helpful \"builder\" methods so that you can quickly define your limit. The rate limiter name may be any string you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:562 docs/master/routing.md:561
#, no-wrap
msgid "    /**\n"
"     * Configure the rate limiters for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function configureRateLimiting()\n"
"    {\n"
"        RateLimiter::for('global', function (Request $request) {\n"
"            return Limit::perMinute(1000);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:564 docs/master/routing.md:563
msgid "If the incoming request exceeds the specified rate limit, a response with a 429 HTTP status code will automatically be returned by Laravel. If you would like to define your own response that should be returned by a rate limit, you may use the `response` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:570 docs/master/routing.md:569
#, no-wrap
msgid "    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000)->response(function () {\n"
"            return response('Custom response...', 429);\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:580 docs/master/routing.md:579
#, no-wrap
msgid "<a name=\"segmenting-rate-limits\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:580 docs/master/routing.md:579
#, no-wrap
msgid "Segmenting Rate Limits"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:591 docs/master/routing.md:590
#, no-wrap
msgid "<a name=\"multiple-rate-limits\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:591 docs/master/routing.md:590
#, no-wrap
msgid "Multiple Rate Limits"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:594 docs/master/routing.md:593
msgid "If needed, you may return an array of rate limits for a given rate limiter configuration. Each rate limit will be evaluated for the route based on the order they are placed within the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:601 docs/master/routing.md:600
#, no-wrap
msgid "    RateLimiter::for('login', function (Request $request) {\n"
"        return [\n"
"            Limit::perMinute(500),\n"
"            Limit::perMinute(3)->by($request->input('email')),\n"
"        ];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:603 docs/master/routing.md:602
#, no-wrap
msgid "<a name=\"attaching-rate-limiters-to-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/routing.md:603 docs/master/routing.md:602
#, no-wrap
msgid "Attaching Rate Limiters To Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:618 docs/master/routing.md:617
#, no-wrap
msgid "<a name=\"throttling-with-redis\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/routing.md:618 docs/master/routing.md:617
#, no-wrap
msgid "Throttling With Redis"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:621 docs/master/routing.md:620
msgid "Typically, the `throttle` middleware is mapped to the `Illuminate\\Routing\\Middleware\\ThrottleRequests` class. This mapping is defined in your application's HTTP kernel (`App\\Http\\Kernel`). However, if you are using Redis as your application's cache driver, you may wish to change this mapping to use the `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` class. This class is more efficient at managing rate limiting using Redis:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:623 docs/master/routing.md:622
#, no-wrap
msgid "    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:625 docs/master/routing.md:624
#, no-wrap
msgid "<a name=\"form-method-spoofing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:625 docs/master/routing.md:624
#, no-wrap
msgid "Form Method Spoofing"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:628
msgid "HTML forms do not support `PUT`, `PATCH`, or `DELETE` actions. So, when defining `PUT`, `PATCH`, or `DELETE` routes that are called from an HTML form, you will need to add a hidden `_method` field to the form. The value sent with the `_method` field will be used as the HTTP request method:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:633 docs/master/routing.md:632
#, no-wrap
msgid "    <form action=\"/example\" method=\"POST\">\n"
"        <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n"
"        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:635 docs/master/routing.md:634
msgid "For convenience, you may use the `@method` [Blade directive](/docs/{{version}}/blade) to generate the `_method` input field:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:640 docs/master/routing.md:639
#, no-wrap
msgid "    <form action=\"/example\" method=\"POST\">\n"
"        @method('PUT')\n"
"        @csrf\n"
"    </form>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:642 docs/master/routing.md:641
#, no-wrap
msgid "<a name=\"accessing-the-current-route\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:642 docs/master/routing.md:641
#, no-wrap
msgid "Accessing The Current Route"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:645 docs/master/routing.md:644
msgid "You may use the `current`, `currentRouteName`, and `currentRouteAction` methods on the `Route` facade to access information about the route handling the incoming request:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:651 docs/master/routing.md:650
#, no-wrap
msgid "    $route = Route::current(); // Illuminate\\Routing\\Route\n"
"    $name = Route::currentRouteName(); // string\n"
"    $action = Route::currentRouteAction(); // string\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:653 docs/master/routing.md:652
msgid "You may refer to the API documentation for both the [underlying class of the Route facade](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html) and [Route instance](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html) to review all of the methods that are available on the router and route classes."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:655 docs/master/routing.md:654
#, no-wrap
msgid "<a name=\"cors\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:655 docs/master/routing.md:654
#, no-wrap
msgid "Cross-Origin Resource Sharing (CORS)"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:658 docs/master/routing.md:657
msgid "Laravel can automatically respond to CORS `OPTIONS` HTTP requests with values that you configure. All CORS settings may be configured in your application's `config/cors.php` configuration file. The `OPTIONS` requests will automatically be handled by the `HandleCors` [middleware](/docs/{{version}}/middleware) that is included by default in your global middleware stack. Your global middleware stack is located in your application's HTTP kernel (`App\\Http\\Kernel`)."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:660 docs/master/routing.md:659
#, no-wrap
msgid "> {tip} For more information on CORS and CORS headers, please consult the [MDN web documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:662 docs/master/routing.md:661
#, no-wrap
msgid "<a name=\"route-caching\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/routing.md:662 docs/master/routing.md:661
#, no-wrap
msgid "Route Caching"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:665 docs/master/routing.md:664
msgid "When deploying your application to production, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. To generate a route cache, execute the `route:cache` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:669 docs/master/routing.md:668
msgid "After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the `route:cache` command during your project's deployment."
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:671 docs/master/routing.md:670
msgid "You may use the `route:clear` command to clear the route cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/routing.md:672 docs/master/routing.md:671
#, no-wrap
msgid "    php artisan route:clear\n"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Installing Sail Into Existing Applications](#installing-sail-into-existing-applications)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Configuring A Bash Alias](#configuring-a-bash-alias)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Starting & Stopping Sail](#starting-and-stopping-sail)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Executing Commands](#executing-sail-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Executing PHP Commands](#executing-php-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Executing Composer Commands](#executing-composer-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Executing Artisan Commands](#executing-artisan-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Executing Node / NPM Commands](#executing-node-npm-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Interacting With Databases](#interacting-with-sail-databases)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[MySQL](#mysql)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Redis](#redis)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sail.md:24
msgid "[MeiliSearch](#meilisearch)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Previewing Emails](#previewing-emails)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Container CLI](#sail-container-cli)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[PHP Versions](#sail-php-versions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Sharing Your Site](#sharing-your-site)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sail.md:24 docs/master/sail.md:23
msgid "[Customization](#sail-customization)"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:29 docs/master/sail.md:28
msgid "Laravel Sail is a light-weight command-line interface for interacting with Laravel's default Docker development environment. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:31 docs/master/sail.md:30
msgid "At its heart, Sail is the `docker-compose.yml` file and the `sail` script that is stored at the root of your project. The `sail` script provides a CLI with convenient methods for interacting with the Docker containers defined by the `docker-compose.yml` file."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:33 docs/master/sail.md:32
msgid "Laravel Sail is supported on macOS, Linux, and Windows (via WSL2)."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:38
msgid "Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel's [installation documentation](/docs/{{version}}/installation) for your operating system. During installation, you will be asked to choose which Sail supported services your application will be interacting with."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:40 docs/master/sail.md:39
#, no-wrap
msgid "<a name=\"installing-sail-into-existing-applications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:40 docs/master/sail.md:39
#, no-wrap
msgid "Installing Sail Into Existing Applications"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:43 docs/master/sail.md:42
msgid "If you are interested in using Sail with an existing Laravel application, you may simply install Sail using the Composer package manager. Of course, these steps assume that your existing local development environment allows you to install Composer dependencies:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:45 docs/master/sail.md:44
#, no-wrap
msgid "    composer require laravel/sail --dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:47 docs/master/sail.md:46
msgid "After Sail has been installed, you may run the `sail:install` Artisan command. This command will publish Sail's `docker-compose.yml` file to the root of your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:49 docs/master/sail.md:48
#, no-wrap
msgid "    php artisan sail:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:51 docs/master/sail.md:50
msgid "Finally, you may start Sail. To continue learning how to use Sail, please continue reading the remainder of this documentation:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:53 docs/master/sail.md:52
#, no-wrap
msgid "    ./vendor/bin/sail up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:55 docs/master/sail.md:54
#, no-wrap
msgid "<a name=\"configuring-a-bash-alias\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:55 docs/master/sail.md:54
#, no-wrap
msgid "Configuring A Bash Alias"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:58 docs/master/sail.md:57
msgid "By default, Sail commands are invoked using the `vendor/bin/sail` script that is included with all new Laravel applications:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:59 docs/master/sail.md:58
#, no-wrap
msgid "./vendor/bin/sail up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:64 docs/master/sail.md:63
msgid "However, instead of repeatedly typing `vendor/bin/sail` to execute Sail commands, you may wish to configure a Bash alias that allows you to execute Sail's commands more easily:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:65 docs/master/sail.md:64
#, no-wrap
msgid "alias sail='bash vendor/bin/sail'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:70 docs/master/sail.md:69
msgid "Once the Bash alias has been configured, you may execute Sail commands by simply typing `sail`. The remainder of this documentation's examples will assume that you have configured this alias:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:71 docs/8.x/sail.md:82 docs/master/sail.md:70
#: docs/master/sail.md:81
#, no-wrap
msgid "sail up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:76 docs/master/sail.md:75
#, no-wrap
msgid "<a name=\"starting-and-stopping-sail\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:76 docs/master/sail.md:75
#, no-wrap
msgid "Starting & Stopping Sail"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:79 docs/master/sail.md:78
msgid "Laravel Sail's `docker-compose.yml` file defines a Docker variety of containers that work together to help you build Laravel applications. Each of these containers is an entry within the `services` configuration of your `docker-compose.yml` file. The `laravel.test` container is the primary application container that will be serving your application."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:81 docs/master/sail.md:80
msgid "Before starting Sail, you should ensure that no other web servers or databases are running on your local computer. To start all of the Docker containers defined in your application's `docker-compose.yml` file, you should execute the `up` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:87 docs/master/sail.md:86
msgid "To start all of the Docker containers in the background, you may start Sail in \"detached\" mode:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:88 docs/master/sail.md:87
#, no-wrap
msgid "sail up -d\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:93 docs/master/sail.md:92
msgid "Once the application's containers have been started, you may access the project in your web browser at: http://localhost."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:95 docs/master/sail.md:94
msgid "To stop all of the containers, you may simply press Control + C to stop the container's execution. Or, if the containers are running in the background, you may use the `down` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:96 docs/master/sail.md:95
#, no-wrap
msgid "sail down\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:101 docs/master/sail.md:100
#, no-wrap
msgid "<a name=\"executing-sail-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:101 docs/master/sail.md:100
#, no-wrap
msgid "Executing Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:104 docs/master/sail.md:103
msgid "When using Laravel Sail, your application is executing within a Docker container and is isolated from your local computer. However, Sail provides a convenient way to run various commands against your application such as arbitrary PHP commands, Artisan commands, Composer commands, and Node / NPM commands."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:106 docs/master/sail.md:105
#, no-wrap
msgid "**When reading the Laravel documentation, you will often see references to Composer, Artisan, and Node / NPM commands that do not reference Sail.** Those examples assume that these tools are installed on your local computer. If you are using Sail for your local Laravel development environment, you should execute those commands using Sail:\n"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:107 docs/master/sail.md:106
#, no-wrap
msgid "# Running Artisan commands locally...\n"
"php artisan queue:work\n\n"
"# Running Artisan commands within Laravel Sail...\n"
"sail artisan queue:work\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:116 docs/master/sail.md:115
#, no-wrap
msgid "<a name=\"executing-php-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:116 docs/master/sail.md:115
#, no-wrap
msgid "Executing PHP Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:119 docs/master/sail.md:118
msgid "PHP commands may be executed using the `php` command. Of course, these commands will execute using the PHP version that is configured for your application. To learn more about the PHP versions available to Laravel Sail, consult the [PHP version documentation](#sail-php-versions):"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:120 docs/master/sail.md:119
#, no-wrap
msgid "sail php --version\n\n"
"sail php script.php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:127 docs/master/sail.md:126
#, no-wrap
msgid "<a name=\"executing-composer-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:127 docs/master/sail.md:126
#, no-wrap
msgid "Executing Composer Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:130 docs/master/sail.md:129
msgid "Composer commands may be executed using the `composer` command. Laravel Sail's application container includes a Composer 2.x installation:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/sail.md:131 docs/master/sail.md:130
#, no-wrap
msgid "sail composer require laravel/sanctum\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:136 docs/master/sail.md:135
#, no-wrap
msgid "<a name=\"installing-composer-dependencies-for-existing-projects\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sail.md:136 docs/master/sail.md:135
#, no-wrap
msgid "Installing Composer Dependencies For Existing Applications"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:139 docs/master/sail.md:138
msgid "If you are developing an application with a team, you may not be the one that initially creates the Laravel application. Therefore, none of the application's Composer dependencies, including Sail, will be installed after you clone the application's repository to your local computer."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:141 docs/master/sail.md:140
msgid "You may install the application's dependencies by navigating to the application's directory and executing the following command. This command uses a small Docker container containing PHP and Composer to install the application's dependencies:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/sail.md:142 docs/master/sail.md:141
#, no-wrap
msgid "docker run --rm \\\n"
"    -v $(pwd):/opt \\\n"
"    -w /opt \\\n"
"    laravelsail/php80-composer:latest \\\n"
"    composer install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:151 docs/master/sail.md:150
#, no-wrap
msgid "<a name=\"executing-artisan-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:151 docs/master/sail.md:150
#, no-wrap
msgid "Executing Artisan Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:154 docs/master/sail.md:153
msgid "Laravel Artisan commands may be executed using the `artisan` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:155 docs/master/sail.md:154
#, no-wrap
msgid "sail artisan queue:work\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:160 docs/master/sail.md:159
#, no-wrap
msgid "<a name=\"executing-node-npm-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:160 docs/master/sail.md:159
#, no-wrap
msgid "Executing Node / NPM Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:163 docs/master/sail.md:162
msgid "Node commands may be executed using the `node` command while NPM commands may be executed using the `npm` command:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/sail.md:164 docs/master/sail.md:163
#, no-wrap
msgid "sail node --version\n\n"
"sail npm run prod\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:171 docs/master/sail.md:170
#, no-wrap
msgid "<a name=\"interacting-with-sail-databases\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:171 docs/master/sail.md:170
#, no-wrap
msgid "Interacting With Databases"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:174 docs/master/sail.md:173
#, no-wrap
msgid "<a name=\"mysql\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sail.md:174 docs/master/sail.md:173
#, no-wrap
msgid "MySQL"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:177 docs/master/sail.md:176
msgid "As you may have noticed, your application's `docker-compose.yml` file contains an entry for a MySQL container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your database is persisted even when stopping and restarting your containers. In addition, when the MySQL container is starting, it will ensure a database exists whose name matches the value of your `DB_DATABASE` environment variable."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:179 docs/master/sail.md:178
msgid "Once you have started your containers, you may connect to the MySQL instance within your application by setting your `DB_HOST` environment variable within your application's `.env` file to `mysql`."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:181 docs/master/sail.md:180
msgid "To connect to your application's MySQL database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the MySQL database is accessible at `localhost` port 3306."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:186 docs/master/sail.md:185
msgid "Your application's `docker-compose.yml` file also contains an entry for a [Redis](https://redis.io) container. This container uses a [Docker volume](https://docs.docker.com/storage/volumes/) so that the data stored in your Redis data is persisted even when stopping and restarting your containers. Once you have started your containers, you may connect to the Redis instance within your application by setting your `REDIS_HOST` environment variable within your application's `.env` file to `redis`."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:188 docs/master/sail.md:187
msgid "To connect to your application's Redis database from your local machine, you may use a graphical database management application such as [TablePlus](https://tableplus.com). By default, the Redis database is accessible at `localhost` port 6379."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:190 docs/8.x/scout.md:70
#, no-wrap
msgid "<a name=\"meilisearch\"></a>\n"
msgstr ""

#. #-#-#-#-#  sail.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  scout.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ####
#: docs/8.x/sail.md:190 docs/8.x/scout.md:70
#, no-wrap
msgid "MeiliSearch"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:193
msgid "If you chose to install the [MeiliSearch](https://www.meilisearch.com) service when installing Sail, your application's `docker-compose.yml` file will contain an entry for this powerful search-engine that is [compatible](https://github.com/meilisearch/meilisearch-laravel-scout) with [Laravel Scout](/docs/{{version}}/scout). Once you have started your containers, you may connect to the MeiliSearch instance within your application by setting your `MEILISEARCH_HOST` environment variable to `http://meilisearch:7700`."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:195
msgid "From your local machine, you may access MeiliSearch's web based administration panel by navigating to `http://localhost:7700` in your web browser."
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:200 docs/master/sail.md:192
msgid "Laravel provides amazing testing support out of the box, and you may use Sail's `test` command to run your applications [feature and unit tests](/docs/{{version}}/testing). Any CLI options that are accepted by PHPUnit may also be passed to the `test` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:202 docs/master/sail.md:194
#, no-wrap
msgid "    sail test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:204 docs/master/sail.md:196
#, no-wrap
msgid "    sail test --group orders\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:206 docs/master/sail.md:198
msgid "The Sail `test` command is equivalent to running the `test` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:208 docs/master/sail.md:200
#, no-wrap
msgid "    sail artisan test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:213 docs/master/sail.md:205
msgid "[Laravel Dusk](/docs/{{version}}/dusk) provides an expressive, easy-to-use browser automation and testing API. Thanks to Sail, you may run these tests without ever installing Selenium or other tools on your local computer. To get started, uncomment the Selenium service in your application's `docker-compose.yml` file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/sail.md:214 docs/master/sail.md:206
#, no-wrap
msgid "selenium:\n"
"    image: 'selenium/standalone-chrome'\n"
"    volumes:\n"
"        - '/dev/shm:/dev/shm'\n"
"    networks:\n"
"        - sail\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:224 docs/master/sail.md:216
msgid "Next, ensure that the `laravel.test` service in your application's `docker-compose.yml` file has a `depends_on` entry for `selenium`:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/sail.md:225 docs/master/sail.md:217
#, no-wrap
msgid "depends_on:\n"
"    - mysql\n"
"    - redis\n"
"    - selenium\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:233 docs/master/sail.md:225
msgid "Finally, you may run your Dusk test suite by starting Sail and running the `dusk` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:235 docs/master/sail.md:227
#, no-wrap
msgid "    sail dusk\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:237 docs/master/sail.md:229
#, no-wrap
msgid "<a name=\"previewing-emails\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:237 docs/master/sail.md:229
#, no-wrap
msgid "Previewing Emails"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:240 docs/master/sail.md:232
msgid "Laravel Sail's default `docker-compose.yml` file contains a service entry for [MailHog](https://github.com/mailhog/MailHog). MailHog intercepts emails sent by your application during local development and provides a convenient web interface so that you can preview your email messages in your browser. When using Sail, MailHog's default host is `mailhog` and is available via port 1025:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:241 docs/master/sail.md:233
#, no-wrap
msgid "MAIL_HOST=mailhog\n"
"MAIL_PORT=1025\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:247 docs/master/sail.md:239
msgid "When Sail is running, you may access the MailHog web interface at: http://localhost:8025"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:249 docs/master/sail.md:241
#, no-wrap
msgid "<a name=\"sail-container-cli\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:249 docs/master/sail.md:241
#, no-wrap
msgid "Container CLI"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:252 docs/master/sail.md:244
msgid "Sometimes you may wish to start a Bash session within your application's container. You may use the `shell` command to connect to your application's container, allowing you to inspect its files and installed services as well execute arbitrary shell commands within the container:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/sail.md:253 docs/master/sail.md:245
#, no-wrap
msgid "sail shell\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:258 docs/master/sail.md:250
msgid "To start a new [Laravel Tinker](https://github.com/laravel/tinker) session, you may execute the `tinker` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:259 docs/master/sail.md:251
#, no-wrap
msgid "sail tinker\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:264 docs/master/sail.md:256
#, no-wrap
msgid "<a name=\"sail-php-versions\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:267 docs/master/sail.md:259
msgid "Sail currently supports serving your application via PHP 8.0 or PHP 7.4. To change the PHP version that is used to serve your application, you should update the `build` definition of the `laravel.test` container in your application's `docker-compose.yml` file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/sail.md:268 docs/master/sail.md:260
#, no-wrap
msgid "# PHP 8.0\n"
"context: ./vendor/laravel/sail/runtimes/8.0\n\n"
"# PHP 7.4\n"
"context: ./vendor/laravel/sail/runtimes/7.4\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:277 docs/master/sail.md:269
msgid "In addition, you may wish to update your `image` name to reflect the version of PHP being used by your application. This option is also defined in your application's `docker-compose.yml` file:"
msgstr ""

#. type: Fenced code block (yaml)
#: docs/8.x/sail.md:278 docs/master/sail.md:270
#, no-wrap
msgid "image: sail-8.0/app\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:283 docs/master/sail.md:275
msgid "After updating your application's `docker-compose.yml` file, you should rebuild your container images:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:285 docs/master/sail.md:277
#, no-wrap
msgid "    sail build --no-cache\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:287 docs/master/sail.md:279
#, no-wrap
msgid "    sail up\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:289 docs/master/sail.md:281
#, no-wrap
msgid "<a name=\"sharing-your-site\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sail.md:289 docs/master/sail.md:281
#, no-wrap
msgid "Sharing Your Site"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:292 docs/master/sail.md:284
msgid "Sometimes you may need to share your site publicly in order to preview your site for a colleague or to test webhook integrations with your application. To share your site, you may use the `share` command. After executing this command, you will be issued a random `laravel-sail.site` URL that you may use to access your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:294 docs/master/sail.md:286
#, no-wrap
msgid "    sail share\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:296 docs/master/sail.md:288
msgid "If you would like to choose the subdomain for your shared site, you may provide the `subdomain` option when executing the `share` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:298 docs/master/sail.md:290
#, no-wrap
msgid "    sail share --subdomain=my-sail-site\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:300 docs/master/sail.md:292
#, no-wrap
msgid "> {tip} The `share` command is powered by [Expose](https://github.com/beyondcode/expose), an open source tunneling service by [BeyondCode](https://beyondco.de).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:302 docs/master/sail.md:294
#, no-wrap
msgid "<a name=\"sail-customization\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:305 docs/master/sail.md:297
msgid "Since Sail is just Docker, you are free to customize nearly everything about it. To publish Sail's own Dockerfiles, you may execute the `sail:publish` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:306
#, no-wrap
msgid "sail artisan sail:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sail.md:311 docs/master/sail.md:303
msgid "After running this command, the Dockerfiles and other configuration files used by Laravel Sail will be placed within a `docker` directory in your application's root directory. After customizing your Sail installation, you may rebuild your application's containers using the `build` command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/sail.md:312 docs/master/sail.md:304
#, no-wrap
msgid "sail build --no-cache\n"
msgstr ""

#. type: Title #
#: docs/8.x/sanctum.md:1 docs/master/sanctum.md:1
#, no-wrap
msgid "Laravel Sanctum"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[How It Works](#how-it-works)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[API Token Authentication](#api-token-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Issuing API Tokens](#issuing-api-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Token Abilities](#token-abilities)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[SPA Authentication](#spa-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Configuration](#spa-configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Authenticating](#spa-authenticating)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Protecting Routes](#protecting-spa-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Authorizing Private Broadcast Channels](#authorizing-private-broadcast-channels)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Mobile Application Authentication](#mobile-application-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Issuing API Tokens](#issuing-mobile-api-tokens)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Protecting Routes](#protecting-mobile-api-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/sanctum.md:23 docs/master/sanctum.md:23
msgid "[Revoking Tokens](#revoking-mobile-api-tokens)"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:28 docs/master/sanctum.md:28
msgid "Laravel Sanctum provides a featherweight authentication system for SPAs (single page applications), mobile applications, and simple, token based APIs. Sanctum allows each user of your application to generate multiple API tokens for their account. These tokens may be granted abilities / scopes which specify which actions the tokens are allowed to perform."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:30 docs/master/sanctum.md:30
#, no-wrap
msgid "<a name=\"how-it-works\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sanctum.md:30 docs/master/sanctum.md:30
#, no-wrap
msgid "How It Works"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:33 docs/master/sanctum.md:33
msgid "Laravel Sanctum exists to solve two separate problems. Let's discuss each before digging deeper into the library."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:35 docs/master/sanctum.md:35
#, no-wrap
msgid "<a name=\"how-it-works-api-tokens\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:35 docs/master/sanctum.md:35
#, no-wrap
msgid "API Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:38 docs/master/sanctum.md:38
msgid "First, Sanctum is a simple package you may use to issue API tokens to your users without the complication of OAuth. This feature is inspired by GitHub and other applications which issue \"personal access tokens\". For example, imagine the \"account settings\" of your application has a screen where a user may generate an API token for their account. You may use Sanctum to generate and manage those tokens. These tokens typically have a very long expiration time (years), but may be manually revoked by the user at anytime."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:40 docs/master/sanctum.md:40
msgid "Laravel Sanctum offers this feature by storing user API tokens in a single database table and authenticating incoming HTTP requests via the `Authorization` header which should contain a valid API token."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:42 docs/master/sanctum.md:42
#, no-wrap
msgid "<a name=\"how-it-works-spa-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sanctum.md:42 docs/8.x/sanctum.md:202 docs/master/sanctum.md:42
#: docs/master/sanctum.md:202
#, no-wrap
msgid "SPA Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:45 docs/master/sanctum.md:45
msgid "Second, Sanctum exists to offer a simple way to authenticate single page applications (SPAs) that need to communicate with a Laravel powered API. These SPAs might exist in the same repository as your Laravel application or might be an entirely separate repository, such as a SPA created using Vue CLI or a Next.js application."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:47 docs/master/sanctum.md:47
msgid "For this feature, Sanctum does not use tokens of any kind. Instead, Sanctum uses Laravel's built-in cookie based session authentication services. Typically, Sanctum utilizes Laravel's `web` authentication guard to accomplish this. This provides the benefits of CSRF protection, session authentication, as well as protects against leakage of the authentication credentials via XSS."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:49 docs/master/sanctum.md:49
msgid "Sanctum will only attempt to authenticate using cookies when the incoming request originates from your own SPA frontend. When Sanctum examines an incoming HTTP request, it will first check for an authentication cookie and, if none is present, Sanctum will then examine the `Authorization` header for a valid API token."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:51 docs/master/sanctum.md:51
#, no-wrap
msgid "> {tip} It is perfectly fine to use Sanctum only for API token authentication or only for SPA authentication. Just because you use Sanctum does not mean you are required to use both features it offers.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:56 docs/master/sanctum.md:56
msgid "You may install Laravel Sanctum via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:58 docs/master/sanctum.md:58
#, no-wrap
msgid "    composer require laravel/sanctum\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:60 docs/master/sanctum.md:60
msgid "Next, you should publish the Sanctum configuration and migration files using the `vendor:publish` Artisan command. The `sanctum` configuration file will be placed in your application's `config` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:62 docs/master/sanctum.md:62
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:64 docs/master/sanctum.md:64
msgid "Finally, you should run your database migrations. Sanctum will create one database table in which to store API tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:68 docs/master/sanctum.md:68
msgid "Next, if you plan to utilize Sanctum to authenticate an SPA, you should add Sanctum's middleware to your `api` middleware group within your application's `app/Http/Kernel.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:74 docs/master/sanctum.md:74
#, no-wrap
msgid "    'api' => [\n"
"        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:79 docs/master/sanctum.md:79
msgid "If you are not going to use Sanctum's default migrations, you should call the `Sanctum::ignoreMigrations` method in the `register` method of your `App\\Providers\\AppServiceProvider` class. You may export the default migrations by executing the following command: `php artisan vendor:publish --tag=sanctum-migrations`"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:87 docs/master/sanctum.md:87
msgid "Although not typically required, you are free to extend the `PersonalAccessToken` model used internally by Sanctum:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:89 docs/master/sanctum.md:89
#, no-wrap
msgid "    use Laravel\\Sanctum\\PersonalAccessToken as SanctumPersonalAccessToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:94 docs/master/sanctum.md:94
#, no-wrap
msgid "    class PersonalAccessToken extends SanctumPersonalAccessToken\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:96 docs/master/sanctum.md:96
msgid "Then, you may instruct Sanctum to use your custom model via the `usePersonalAccessTokenModel` method provided by Sanctum. Typically, you should call this method in the `boot` method of one of your application's service providers:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:99
#, no-wrap
msgid "    use App\\Models\\Sanctum\\PersonalAccessToken;\n"
"    use Laravel\\Sanctum\\Sanctum;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:109 docs/master/sanctum.md:109
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Sanctum::usePersonalAccessTokenModel(PersonalAccessToken::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:111 docs/master/sanctum.md:111
#, no-wrap
msgid "<a name=\"api-token-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sanctum.md:111 docs/master/sanctum.md:111
#, no-wrap
msgid "API Token Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:114 docs/master/sanctum.md:114
#, no-wrap
msgid "> {tip} You should not use API tokens to authenticate your own first-party SPA. Instead, use Sanctum's built-in [SPA authentication features](#spa-authentication).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:116 docs/master/sanctum.md:116
#, no-wrap
msgid "<a name=\"issuing-api-tokens\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sanctum.md:116 docs/8.x/sanctum.md:322 docs/master/sanctum.md:116
#: docs/master/sanctum.md:322
#, no-wrap
msgid "Issuing API Tokens"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:119 docs/master/sanctum.md:119
msgid "Sanctum allows you to issue API tokens / personal access tokens that may be used to authenticate API requests to your application. When making requests using API tokens, the token should be included in the `Authorization` header as a `Bearer` token."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:121 docs/master/sanctum.md:121
msgid "To begin issuing tokens for users, your User model should use the `Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:123 docs/master/sanctum.md:123
#, no-wrap
msgid "    use Laravel\\Sanctum\\HasApiTokens;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:130 docs/master/sanctum.md:130
msgid "To issue a token, you may use the `createToken` method. The `createToken` method returns a `Laravel\\Sanctum\\NewAccessToken` instance. API tokens are hashed using SHA-256 hashing before being stored in your database, but you may access the plain-text value of the token using the `plainTextToken` property of the `NewAccessToken` instance. You should display this value to the user immediately after the token has been created:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:135 docs/master/sanctum.md:135
#, no-wrap
msgid "    Route::post('/tokens/create', function (Request $request) {\n"
"        $token = $request->user()->createToken($request->token_name);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:138 docs/master/sanctum.md:138
#, no-wrap
msgid "        return ['token' => $token->plainTextToken];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:140 docs/master/sanctum.md:140
msgid "You may access all of the user's tokens using the `tokens` Eloquent relationship provided by the `HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:144 docs/master/sanctum.md:144
#, no-wrap
msgid "    foreach ($user->tokens as $token) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:146 docs/master/sanctum.md:146
#, no-wrap
msgid "<a name=\"token-abilities\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sanctum.md:146 docs/master/sanctum.md:146
#, no-wrap
msgid "Token Abilities"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:149 docs/master/sanctum.md:149
msgid "Sanctum allows you to assign \"abilities\" to tokens. Abilities serve a similar purpose as OAuth's \"scopes\". You may pass an array of string abilities as the second argument to the `createToken` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:151 docs/master/sanctum.md:151
#, no-wrap
msgid "    return $user->createToken('token-name', ['server:update'])->plainTextToken;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:153 docs/master/sanctum.md:153
msgid "When handling an incoming request authenticated by Sanctum, you may determine if the token has a given ability using the `tokenCan` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:157 docs/master/sanctum.md:157
#, no-wrap
msgid "    if ($user->tokenCan('server:update')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:159 docs/master/sanctum.md:159
#, no-wrap
msgid "<a name=\"first-party-ui-initiated-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:159 docs/master/sanctum.md:159
#, no-wrap
msgid "First-Party UI Initiated Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:162 docs/master/sanctum.md:162
msgid "For convenience, the `tokenCan` method will always return `true` if the incoming authenticated request was from your first-party SPA and you are using Sanctum's built-in [SPA authentication](#spa-authentication)."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:164 docs/master/sanctum.md:164
msgid "However, this does not necessarily mean that your application has to allow the user to perform the action. Typically, your application's [authorization policies](/docs/{{version}}/authorization#creating-policies) will determine if the token has been granted the permission to perform the abilities as well as check that the user instance itself should be allowed to perform the action."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:166 docs/master/sanctum.md:166
msgid "For example, if we imagine an application that manages servers, this might mean checking that token is authorized to update servers **and** that the server belongs to the user:"
msgstr ""

#. type: Fenced code block (php)
#: docs/8.x/sanctum.md:167 docs/master/sanctum.md:167
#, no-wrap
msgid "return $request->user()->id === $server->user_id &&\n"
"       $request->user()->tokenCan('server:update')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:173 docs/master/sanctum.md:173
msgid "At first, allowing the `tokenCan` method to be called and always return `true` for first-party UI initiated requests may seem strange; however, it is convenient to be able to always assume an API token is available and can be inspected via the `tokenCan` method. By taking this approach, you may always call the `tokenCan` method within your application's authorizations policies without worrying about whether the request was triggered from your application's UI or was initiated by one of your API's third-party consumers."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:178 docs/master/sanctum.md:178
msgid "To protect routes so that all incoming requests must be authenticated, you should attach the `sanctum` authentication guard to your protected routes within your `routes/web.php` and `routes/api.php` route files. This guard will ensure that incoming requests are authenticated as either stateful, cookie authenticated requests or contain a valid API token header if the request is from a third party."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:180 docs/master/sanctum.md:180
msgid "You may be wondering why we suggest that you authenticate the routes within your application's `routes/web.php` file using the `sanctum` guard. Remember, Sanctum will first attempt to authenticate incoming requests using Laravel's typical session authentication cookie. If that cookie is not present then Sanctum will attempt to authenticate the request using a token in the request's `Authorization` header. In addition, authenticating all requests using Sanctum ensures that we may always call the `tokenCan` method on the currently authenticated user instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:186 docs/8.x/sanctum.md:283 docs/8.x/sanctum.md:363
#: docs/master/sanctum.md:186 docs/master/sanctum.md:283
#: docs/master/sanctum.md:363
#, no-wrap
msgid "    Route::middleware('auth:sanctum')->get('/user', function (Request $request) {\n"
"        return $request->user();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:191 docs/master/sanctum.md:191
msgid "You may \"revoke\" tokens by deleting them from your database using the `tokens` relationship that is provided by the `Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:194 docs/8.x/sanctum.md:371 docs/master/sanctum.md:194
#: docs/master/sanctum.md:371
#, no-wrap
msgid "    // Revoke all tokens...\n"
"    $user->tokens()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:197 docs/master/sanctum.md:197
#, no-wrap
msgid "    // Revoke the token that was used to authenticate the current request...\n"
"    $request->user()->currentAccessToken()->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:200 docs/8.x/sanctum.md:374 docs/master/sanctum.md:200
#: docs/master/sanctum.md:374
#, no-wrap
msgid "    // Revoke a specific token...\n"
"    $user->tokens()->where('id', $tokenId)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:202 docs/master/sanctum.md:202
#, no-wrap
msgid "<a name=\"spa-authentication\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:205 docs/master/sanctum.md:205
msgid "Sanctum also exists to provide a simple method of authenticating single page applications (SPAs) that need to communicate with a Laravel powered API. These SPAs might exist in the same repository as your Laravel application or might be an entirely separate repository."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:207 docs/master/sanctum.md:207
msgid "For this feature, Sanctum does not use tokens of any kind. Instead, Sanctum uses Laravel's built-in cookie based session authentication services. This approach to authentication provides the benefits of CSRF protection, session authentication, as well as protects against leakage of the authentication credentials via XSS."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:209 docs/master/sanctum.md:209
#, no-wrap
msgid "> {note} In order to authenticate, your SPA and API must share the same top-level domain. However, they may be placed on different subdomains.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:211 docs/master/sanctum.md:211
#, no-wrap
msgid "<a name=\"spa-configuration\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:214 docs/master/sanctum.md:214
#, no-wrap
msgid "<a name=\"configuring-your-first-party-domains\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:214 docs/master/sanctum.md:214
#, no-wrap
msgid "Configuring Your First-Party Domains"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:217 docs/master/sanctum.md:217
msgid "First, you should configure which domains your SPA will be making requests from. You may configure these domains using the `stateful` configuration option in your `sanctum` configuration file. This configuration setting determines which domains will maintain \"stateful\" authentication using Laravel session cookies when making requests to your API."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:219 docs/master/sanctum.md:219
#, no-wrap
msgid "> {note} If you are accessing your application via a URL that includes a port (`127.0.0.1:8000`), you should ensure that you include the port number with the domain.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:221 docs/master/sanctum.md:221
#, no-wrap
msgid "<a name=\"sanctum-middleware\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:221 docs/master/sanctum.md:221
#, no-wrap
msgid "Sanctum Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:224 docs/master/sanctum.md:224
msgid "Next, you should add Sanctum's middleware to your `api` middleware group within your `app/Http/Kernel.php` file. This middleware is responsible for ensuring that incoming requests from your SPA can authenticate using Laravel's session cookies, while still allowing requests from third parties or mobile applications to authenticate using API tokens:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:226 docs/master/sanctum.md:226
#, no-wrap
msgid "    use Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:232 docs/master/sanctum.md:232
#, no-wrap
msgid "    'api' => [\n"
"        EnsureFrontendRequestsAreStateful::class,\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:234 docs/master/sanctum.md:234
#, no-wrap
msgid "<a name=\"cors-and-cookies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:234 docs/master/sanctum.md:234
#, no-wrap
msgid "CORS & Cookies"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:237 docs/master/sanctum.md:237
msgid "If you are having trouble authenticating with your application from an SPA that executes on a separate subdomain, you have likely misconfigured your CORS (Cross-Origin Resource Sharing) or session cookie settings."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:239 docs/master/sanctum.md:239
msgid "You should ensure that your application's CORS configuration is returning the `Access-Control-Allow-Credentials` header with a value of `True`. This may be accomplished by setting the `supports_credentials` option within your application's `config/cors.php` configuration file to `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:241 docs/master/sanctum.md:241
msgid "In addition, you should enable the `withCredentials` option on your application's global `axios` instance. Typically, this should be performed in your `resources/js/bootstrap.js` file. If you are not using Axios to make HTTP requests from your frontend, you should perform the equivalent configuration on your own HTTP client:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:243 docs/master/sanctum.md:243
#, no-wrap
msgid "    axios.defaults.withCredentials = true;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:245 docs/master/sanctum.md:245
msgid "Finally, you should ensure your application's session cookie domain configuration supports any subdomain of your root domain. You may accomplish this by prefixing the domain with a leading `.` within your application's `config/session.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:247 docs/master/sanctum.md:247
#, no-wrap
msgid "    'domain' => '.domain.com',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:249 docs/master/sanctum.md:249
#, no-wrap
msgid "<a name=\"spa-authenticating\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sanctum.md:249 docs/master/sanctum.md:249
#, no-wrap
msgid "Authenticating"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:255 docs/master/sanctum.md:255
msgid "To authenticate your SPA, your SPA's \"login\" page should first make a request to the `/sanctum/csrf-cookie` endpoint to initialize CSRF protection for the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:259 docs/master/sanctum.md:259
#, no-wrap
msgid "    axios.get('/sanctum/csrf-cookie').then(response => {\n"
"        // Login...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:261 docs/master/sanctum.md:261
msgid "During this request, Laravel will set an `XSRF-TOKEN` cookie containing the current CSRF token. This token should then be passed in an `X-XSRF-TOKEN` header on subsequent requests, which some HTTP client libraries like Axios and the Angular HttpClient will do automatically for you. If your JavaScript HTTP library does not set the value for you, you will need to manually set the `X-XSRF-TOKEN` header to match the value of the `XSRF-TOKEN` cookie that is set by this route."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:263 docs/master/sanctum.md:263
#, no-wrap
msgid "<a name=\"logging-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/sanctum.md:263 docs/master/sanctum.md:263
#, no-wrap
msgid "Logging In"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:266 docs/master/sanctum.md:266
msgid "Once CSRF protection has been initialized, you should make a `POST` request to your Laravel application's `/login` route. This `/login` route may be [implemented manually](/docs/{{version}}/authentication#authenticating-users) or using a headless authentication package like [Laravel Fortify](/docs/{{version}}/fortify)."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:268 docs/master/sanctum.md:268
msgid "If the login request is successful, you will be authenticated and subsequent requests to your application's routes will automatically be authenticated via the session cookie that the Laravel application issued to your client. In addition, since your application already made a request to the `/sanctum/csrf-cookie` route, subsequent requests should automatically receive CSRF protection as long as your JavaScript HTTP client sends the value of the `XSRF-TOKEN` cookie in the `X-XSRF-TOKEN` header."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:270 docs/master/sanctum.md:270
msgid "Of course, if your user's session expires due to lack of activity, subsequent requests to the Laravel application may receive 401 or 419 HTTP error response. In this case, you should redirect the user to your SPA's login page."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:272 docs/master/sanctum.md:272
#, no-wrap
msgid "> {note} You are free to write your own `/login` endpoint; however, you should ensure that it authenticates the user using the standard, [session based authentication services that Laravel provides](/docs/{{version}}/authentication#authenticating-users). Typically, this means using the `web` authentication guard.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:274 docs/master/sanctum.md:274
#, no-wrap
msgid "<a name=\"protecting-spa-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:277 docs/master/sanctum.md:277
msgid "To protect routes so that all incoming requests must be authenticated, you should attach the `sanctum` authentication guard to your API routes within your `routes/api.php` file. This guard will ensure that incoming requests are authenticated as either a stateful authenticated requests from your SPA or contain a valid API token header if the request is from a third party:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:285 docs/master/sanctum.md:285
#, no-wrap
msgid "<a name=\"authorizing-private-broadcast-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/sanctum.md:285 docs/master/sanctum.md:285
#, no-wrap
msgid "Authorizing Private Broadcast Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:288 docs/master/sanctum.md:288
msgid "If your SPA needs to authenticate with [private / presence broadcast channels](/docs/{{version}}/broadcasting#authorizing-channels), you should place the `Broadcast::routes` method call within your `routes/api.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:290 docs/master/sanctum.md:290
#, no-wrap
msgid "    Broadcast::routes(['middleware' => ['auth:sanctum']]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:292 docs/master/sanctum.md:292
msgid "Next, in order for Pusher's authorization requests to succeed, you will need to provide a custom Pusher `authorizer` when initializing [Laravel Echo](/docs/{{version}}/broadcasting#installing-laravel-echo). This allows your application to configure Pusher to use the `axios` instance that is [properly configured for cross-domain requests](#cors-and-cookies):"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:315 docs/master/sanctum.md:315
#, no-wrap
msgid "    window.Echo = new Echo({\n"
"        broadcaster: \"pusher\",\n"
"        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n"
"        encrypted: true,\n"
"        key: process.env.MIX_PUSHER_APP_KEY,\n"
"        authorizer: (channel, options) => {\n"
"            return {\n"
"                authorize: (socketId, callback) => {\n"
"                    axios.post('/api/broadcasting/auth', {\n"
"                        socket_id: socketId,\n"
"                        channel_name: channel.name\n"
"                    })\n"
"                    .then(response => {\n"
"                        callback(false, response.data);\n"
"                    })\n"
"                    .catch(error => {\n"
"                        callback(true, error);\n"
"                    });\n"
"                }\n"
"            };\n"
"        },\n"
"    })\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:317 docs/master/sanctum.md:317
#, no-wrap
msgid "<a name=\"mobile-application-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/sanctum.md:317 docs/master/sanctum.md:317
#, no-wrap
msgid "Mobile Application Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:320 docs/master/sanctum.md:320
msgid "You may also use Sanctum tokens to authenticate your mobile application's requests to your API. The process for authenticating mobile application requests is similar to authenticating third-party API requests; however, there are small differences in how you will issue the API tokens."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:322 docs/master/sanctum.md:322
#, no-wrap
msgid "<a name=\"issuing-mobile-api-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:325 docs/master/sanctum.md:325
msgid "To get started, create a route that accepts the user's email / username, password, and device name, then exchanges those credentials for a new Sanctum token. The \"device name\" given to this endpoint is for informational purposes and may be any value you wish. In general, the device name value should be a name the user would recognize, such as \"Nuno's iPhone 12\"."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:327 docs/master/sanctum.md:327
msgid "Typically, you will make a request to the token endpoint from your mobile application's \"login\" screen. The endpoint will return the plain-text API token which may then be stored on the mobile device and used to make additional API requests:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:332 docs/master/sanctum.md:332
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Validation\\ValidationException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:339 docs/master/sanctum.md:339
#, no-wrap
msgid "    Route::post('/sanctum/token', function (Request $request) {\n"
"        $request->validate([\n"
"            'email' => 'required|email',\n"
"            'password' => 'required',\n"
"            'device_name' => 'required',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:341 docs/master/sanctum.md:341
#, no-wrap
msgid "        $user = User::where('email', $request->email)->first();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:347 docs/master/sanctum.md:347
#, no-wrap
msgid "        if (! $user || ! Hash::check($request->password, $user->password)) {\n"
"            throw ValidationException::withMessages([\n"
"                'email' => ['The provided credentials are incorrect.'],\n"
"            ]);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:350 docs/master/sanctum.md:350
#, no-wrap
msgid "        return $user->createToken($request->device_name)->plainTextToken;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:352 docs/master/sanctum.md:352
msgid "When the mobile application uses the token to make an API request to your application, it should pass the token in the `Authorization` header as a `Bearer` token."
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:354
#, no-wrap
msgid "> {tip} When issuing tokens for a mobile application, you are also free to specify [token abilities](#token-abilities).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:356 docs/master/sanctum.md:356
#, no-wrap
msgid "<a name=\"protecting-mobile-api-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:359 docs/master/sanctum.md:359
msgid "As previously documented, you may protect routes so that all incoming requests must be authenticated by attaching the `sanctum` authentication guard to the routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:365 docs/master/sanctum.md:365
#, no-wrap
msgid "<a name=\"revoking-mobile-api-tokens\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:368 docs/master/sanctum.md:368
msgid "To allow users to revoke API tokens issued to mobile devices, you may list them by name, along with a \"Revoke\" button, within an \"account settings\" portion of your web application's UI. When the user clicks the \"Revoke\" button, you can delete the token from the database. Remember, you can access a user's API tokens via the `tokens` relationship provided by the `Laravel\\Sanctum\\HasApiTokens` trait:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:379 docs/master/sanctum.md:379
msgid "While testing, the `Sanctum::actingAs` method may be used to authenticate a user and specify which abilities should be granted to their token:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:382 docs/master/sanctum.md:382
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Laravel\\Sanctum\\Sanctum;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:389 docs/master/sanctum.md:389
#, no-wrap
msgid "    public function test_task_list_can_be_retrieved()\n"
"    {\n"
"        Sanctum::actingAs(\n"
"            User::factory()->create(),\n"
"            ['view-tasks']\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:391 docs/master/sanctum.md:391
#, no-wrap
msgid "        $response = $this->get('/api/task');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:394 docs/master/sanctum.md:394
#, no-wrap
msgid "        $response->assertOk();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:396 docs/master/sanctum.md:396
msgid "If you would like to grant all abilities to the token, you should include `*` in the ability list provided to the `actingAs` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/sanctum.md:400 docs/master/sanctum.md:400
#, no-wrap
msgid "    Sanctum::actingAs(\n"
"        User::factory()->create(),\n"
"        ['*']\n"
"    );\n"
msgstr ""

#. type: Title #
#: docs/8.x/scheduling.md:1 docs/master/scheduling.md:1
#, no-wrap
msgid "Task Scheduling"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Defining Schedules](#defining-schedules)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Scheduling Artisan Commands](#scheduling-artisan-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Scheduling Queued Jobs](#scheduling-queued-jobs)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Scheduling Shell Commands](#scheduling-shell-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Schedule Frequency Options](#schedule-frequency-options)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Timezones](#timezones)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Preventing Task Overlaps](#preventing-task-overlaps)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Running Tasks On One Server](#running-tasks-on-one-server)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Background Tasks](#background-tasks)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Running The Scheduler](#running-the-scheduler)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Running The Scheduler Locally](#running-the-scheduler-locally)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Task Output](#task-output)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scheduling.md:18 docs/master/scheduling.md:18
msgid "[Task Hooks](#task-hooks)"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:23 docs/master/scheduling.md:23
msgid "In the past, you may have written a cron configuration entry for each task you needed to schedule on your server. However, this can quickly become a pain because your task schedule is no longer in source control and you must SSH into your server to view your existing cron entries or add additional entries."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:25 docs/master/scheduling.md:25
msgid "Laravel's command scheduler offers a fresh approach to managing scheduled tasks on your server. The scheduler allows you to fluently and expressively define your command schedule within your Laravel application itself. When using the scheduler, only a single cron entry is needed on your server. Your task schedule is defined in the `app/Console/Kernel.php` file's `schedule` method. To help you get started, a simple example is defined within the method."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:27 docs/master/scheduling.md:27
#, no-wrap
msgid "<a name=\"defining-schedules\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scheduling.md:27 docs/master/scheduling.md:27
#, no-wrap
msgid "Defining Schedules"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:30 docs/master/scheduling.md:30
msgid "You may define all of your scheduled tasks in the `schedule` method of your application's `App\\Console\\Kernel` class. To get started, let's take a look at an example. In this example, we will schedule a closure to be called every day at midnight. Within the closure we will execute a database query to clear a table:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:34 docs/master/scheduling.md:34
#, no-wrap
msgid "    namespace App\\Console;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:38 docs/master/scheduling.md:38
#, no-wrap
msgid "    use Illuminate\\Console\\Scheduling\\Schedule;\n"
"    use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:49 docs/master/scheduling.md:49
#, no-wrap
msgid "    class Kernel extends ConsoleKernel\n"
"    {\n"
"        /**\n"
"         * The Artisan commands provided by your application.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $commands = [\n"
"            //\n"
"        ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:63 docs/master/scheduling.md:63
#, no-wrap
msgid "        /**\n"
"         * Define the application's command schedule.\n"
"         *\n"
"         * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n"
"         * @return void\n"
"         */\n"
"        protected function schedule(Schedule $schedule)\n"
"        {\n"
"            $schedule->call(function () {\n"
"                DB::table('recent_users')->delete();\n"
"            })->daily();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:65 docs/master/scheduling.md:65
msgid "In addition to scheduling using closures, you may also schedule [invokable objects](https://secure.php.net/manual/en/language.oop5.magic.php#object.invoke). Invokable objects are simple PHP classes that contain an `__invoke` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:67 docs/master/scheduling.md:67
#, no-wrap
msgid "    $schedule->call(new DeleteRecentUsers)->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:69 docs/master/scheduling.md:69
msgid "If you would like to view an overview of your scheduled tasks and the next time they are scheduled to run, you may use the `schedule:list` Artisan command:"
msgstr ""

#. type: Fenced code block (nothing)
#: docs/8.x/scheduling.md:70 docs/master/scheduling.md:70
#, no-wrap
msgid "php artisan schedule:list\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:75 docs/master/scheduling.md:75
#, no-wrap
msgid "<a name=\"scheduling-artisan-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:75 docs/master/scheduling.md:75
#, no-wrap
msgid "Scheduling Artisan Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:78 docs/master/scheduling.md:78
msgid "In addition to scheduling closures, you may also schedule [Artisan commands](/docs/{{version}}/artisan) and system commands. For example, you may use the `command` method to schedule an Artisan command using either the command's name or class."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:80 docs/master/scheduling.md:80
msgid "When scheduling Artisan commands using the command's class name, you may pass an array of additional command-line arguments that should be provided to the command when it is invoked:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:82 docs/master/scheduling.md:82
#, no-wrap
msgid "    use App\\Console\\Commands\\SendEmailsCommand;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:84 docs/master/scheduling.md:84
#, no-wrap
msgid "    $schedule->command('emails:send Taylor --force')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:86 docs/master/scheduling.md:86
#, no-wrap
msgid "    $schedule->command(SendEmailsCommand::class, ['Taylor', '--force'])->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:88 docs/master/scheduling.md:88
#, no-wrap
msgid "<a name=\"scheduling-queued-jobs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:88 docs/master/scheduling.md:88
#, no-wrap
msgid "Scheduling Queued Jobs"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:91 docs/master/scheduling.md:91
msgid "The `job` method may be used to schedule a [queued job](/docs/{{version}}/queues). This method provides a convenient way to schedule queued jobs without using the `call` method to define closures to queue the job:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:93 docs/8.x/scheduling.md:99
#: docs/master/scheduling.md:93 docs/master/scheduling.md:99
#, no-wrap
msgid "    use App\\Jobs\\Heartbeat;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:95 docs/master/scheduling.md:95
#, no-wrap
msgid "    $schedule->job(new Heartbeat)->everyFiveMinutes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:97 docs/master/scheduling.md:97
msgid "Optional second and third arguments may be provided to the `job` method which specifies the queue name and queue connection that should be used to queue the job:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:102 docs/master/scheduling.md:102
#, no-wrap
msgid "    // Dispatch the job to the \"heartbeats\" queue on the \"sqs\" connection...\n"
"    $schedule->job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:104 docs/master/scheduling.md:104
#, no-wrap
msgid "<a name=\"scheduling-shell-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:104 docs/master/scheduling.md:104
#, no-wrap
msgid "Scheduling Shell Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:107 docs/master/scheduling.md:107
msgid "The `exec` method may be used to issue a command to the operating system:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:109 docs/master/scheduling.md:109
#, no-wrap
msgid "    $schedule->exec('node /home/forge/script.js')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:111 docs/master/scheduling.md:111
#, no-wrap
msgid "<a name=\"schedule-frequency-options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:111 docs/master/scheduling.md:111
#, no-wrap
msgid "Schedule Frequency Options"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:114 docs/master/scheduling.md:114
msgid "We've already seen a few examples of how you may configure a task to run at specified intervals. However, there are many more task schedule frequencies that you may assign to a task:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:145 docs/master/scheduling.md:145
#, no-wrap
msgid "Method  | Description\n"
"------------- | -------------\n"
"`->cron('* * * * *');`  |  Run the task on a custom cron schedule\n"
"`->everyMinute();`  |  Run the task every minute\n"
"`->everyTwoMinutes();`  |  Run the task every two minutes\n"
"`->everyThreeMinutes();`  |  Run the task every three minutes\n"
"`->everyFourMinutes();`  |  Run the task every four minutes\n"
"`->everyFiveMinutes();`  |  Run the task every five minutes\n"
"`->everyTenMinutes();`  |  Run the task every ten minutes\n"
"`->everyFifteenMinutes();`  |  Run the task every fifteen minutes\n"
"`->everyThirtyMinutes();`  |  Run the task every thirty minutes\n"
"`->hourly();`  |  Run the task every hour\n"
"`->hourlyAt(17);`  |  Run the task every hour at 17 minutes past the hour\n"
"`->everyTwoHours();`  |  Run the task every two hours\n"
"`->everyThreeHours();`  |  Run the task every three hours\n"
"`->everyFourHours();`  |  Run the task every four hours\n"
"`->everySixHours();`  |  Run the task every six hours\n"
"`->daily();`  |  Run the task every day at midnight\n"
"`->dailyAt('13:00');`  |  Run the task every day at 13:00\n"
"`->twiceDaily(1, 13);`  |  Run the task daily at 1:00 & 13:00\n"
"`->weekly();`  |  Run the task every Sunday at 00:00\n"
"`->weeklyOn(1, '8:00');`  |  Run the task every week on Monday at 8:00\n"
"`->monthly();`  |  Run the task on the first day of every month at 00:00\n"
"`->monthlyOn(4, '15:00');`  |  Run the task every month on the 4th at 15:00\n"
"`->twiceMonthly(1, 16, '13:00');`  |  Run the task monthly on the 1st and 16th at 13:00\n"
"`->lastDayOfMonth('15:00');` | Run the task on the last day of the month at 15:00\n"
"`->quarterly();` |  Run the task on the first day of every quarter at 00:00\n"
"`->yearly();`  |  Run the task on the first day of every year at 00:00\n"
"`->yearlyOn(6, 1, '17:00');`  |  Run the task every year on June 1st at 17:00\n"
"`->timezone('America/New_York');` | Set the timezone for the task\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:147 docs/master/scheduling.md:147
msgid "These methods may be combined with additional constraints to create even more finely tuned schedules that only run on certain days of the week. For example, you may schedule a command to run weekly on Monday:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:152 docs/master/scheduling.md:152
#, no-wrap
msgid "    // Run once per week on Monday at 1 PM...\n"
"    $schedule->call(function () {\n"
"        //\n"
"    })->weekly()->mondays()->at('13:00');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:159 docs/master/scheduling.md:159
#, no-wrap
msgid "    // Run hourly from 8 AM to 5 PM on weekdays...\n"
"    $schedule->command('foo')\n"
"              ->weekdays()\n"
"              ->hourly()\n"
"              ->timezone('America/Chicago')\n"
"              ->between('8:00', '17:00');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:161 docs/master/scheduling.md:161
msgid "A list of additional schedule constraints may be found below:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:178 docs/master/scheduling.md:178
#, no-wrap
msgid "Method  | Description\n"
"------------- | -------------\n"
"`->weekdays();`  |  Limit the task to weekdays\n"
"`->weekends();`  |  Limit the task to weekends\n"
"`->sundays();`  |  Limit the task to Sunday\n"
"`->mondays();`  |  Limit the task to Monday\n"
"`->tuesdays();`  |  Limit the task to Tuesday\n"
"`->wednesdays();`  |  Limit the task to Wednesday\n"
"`->thursdays();`  |  Limit the task to Thursday\n"
"`->fridays();`  |  Limit the task to Friday\n"
"`->saturdays();`  |  Limit the task to Saturday\n"
"`->days(array|mixed);`  |  Limit the task to specific days\n"
"`->between($startTime, $endTime);`  |  Limit the task to run between start and end times\n"
"`->unlessBetween($startTime, $endTime);`  |  Limit the task to not run between start and end times\n"
"`->when(Closure);`  |  Limit the task based on a truth test\n"
"`->environments($env);`  |  Limit the task to specific environments\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:180 docs/master/scheduling.md:180
#, no-wrap
msgid "<a name=\"day-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scheduling.md:180 docs/master/scheduling.md:180
#, no-wrap
msgid "Day Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:183 docs/master/scheduling.md:183
msgid "The `days` method may be used to limit the execution of a task to specific days of the week. For example, you may schedule a command to run hourly on Sundays and Wednesdays:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:187 docs/master/scheduling.md:187
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->days([0, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:189 docs/master/scheduling.md:189
msgid "Alternatively, you may use the constants available on the `Illuminate\\Console\\Scheduling\\Schedule` class when defining the days on which a task should run:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:191 docs/master/scheduling.md:191
#, no-wrap
msgid "    use Illuminate\\Console\\Scheduling\\Schedule;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:195 docs/master/scheduling.md:195
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                    ->hourly()\n"
"                    ->days([Schedule::SUNDAY, Schedule::WEDNESDAY]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:197 docs/master/scheduling.md:197
#, no-wrap
msgid "<a name=\"between-time-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scheduling.md:197 docs/master/scheduling.md:197
#, no-wrap
msgid "Between Time Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:200 docs/master/scheduling.md:200
msgid "The `between` method may be used to limit the execution of a task based on the time of day:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:204 docs/master/scheduling.md:204
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                        ->hourly()\n"
"                        ->between('7:00', '22:00');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:206 docs/master/scheduling.md:206
msgid "Similarly, the `unlessBetween` method can be used to exclude the execution of a task for a period of time:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:210 docs/master/scheduling.md:210
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                        ->hourly()\n"
"                        ->unlessBetween('23:00', '4:00');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:212 docs/master/scheduling.md:212
#, no-wrap
msgid "<a name=\"truth-test-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scheduling.md:212 docs/master/scheduling.md:212
#, no-wrap
msgid "Truth Test Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:215 docs/master/scheduling.md:215
msgid "The `when` method may be used to limit the execution of a task based on the result of a given truth test. In other words, if the given closure returns `true`, the task will execute as long as no other constraining conditions prevent the task from running:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:219 docs/master/scheduling.md:219
#, no-wrap
msgid "    $schedule->command('emails:send')->daily()->when(function () {\n"
"        return true;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:221 docs/master/scheduling.md:221
msgid "The `skip` method may be seen as the inverse of `when`. If the `skip` method returns `true`, the scheduled task will not be executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:225 docs/master/scheduling.md:225
#, no-wrap
msgid "    $schedule->command('emails:send')->daily()->skip(function () {\n"
"        return true;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:227 docs/master/scheduling.md:227
msgid "When using chained `when` methods, the scheduled command will only execute if all `when` conditions return `true`."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:229 docs/master/scheduling.md:229
#, no-wrap
msgid "<a name=\"environment-constraints\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scheduling.md:229 docs/master/scheduling.md:229
#, no-wrap
msgid "Environment Constraints"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:232 docs/master/scheduling.md:232
msgid "The `environments` method may be used to execute tasks only on the given environments (as defined by the `APP_ENV` [environment variable](/docs/{{version}}/configuration#environment-configuration)):"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:236 docs/master/scheduling.md:236
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"                ->daily()\n"
"                ->environments(['staging', 'production']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:238 docs/master/scheduling.md:238
#, no-wrap
msgid "<a name=\"timezones\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:238 docs/master/scheduling.md:238
#, no-wrap
msgid "Timezones"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:241 docs/master/scheduling.md:241
msgid "Using the `timezone` method, you may specify that a scheduled task's time should be interpreted within a given timezone:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:245 docs/master/scheduling.md:245
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->timezone('America/New_York')\n"
"             ->at('2:00')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:247 docs/master/scheduling.md:247
msgid "If you are repeatedly assigning the same timezone to all of your scheduled tasks, you may wish to define a `scheduleTimezone` method in your `App\\Console\\Kernel` class. This method should return the default timezone that should be assigned to all scheduled tasks:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:257 docs/master/scheduling.md:257
#, no-wrap
msgid "    /**\n"
"     * Get the timezone that should be used by default for scheduled events.\n"
"     *\n"
"     * @return \\DateTimeZone|string|null\n"
"     */\n"
"    protected function scheduleTimezone()\n"
"    {\n"
"        return 'America/Chicago';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:259 docs/master/scheduling.md:259
#, no-wrap
msgid "> {note} Remember that some timezones utilize daylight savings time. When daylight saving time changes occur, your scheduled task may run twice or even not run at all. For this reason, we recommend avoiding timezone scheduling when possible.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:261 docs/master/scheduling.md:261
#, no-wrap
msgid "<a name=\"preventing-task-overlaps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:261 docs/master/scheduling.md:261
#, no-wrap
msgid "Preventing Task Overlaps"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:264 docs/master/scheduling.md:264
msgid "By default, scheduled tasks will be run even if the previous instance of the task is still running. To prevent this, you may use the `withoutOverlapping` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:266 docs/master/scheduling.md:266
#, no-wrap
msgid "    $schedule->command('emails:send')->withoutOverlapping();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:268 docs/master/scheduling.md:268
msgid "In this example, the `emails:send` [Artisan command](/docs/{{version}}/artisan) will be run every minute if it is not already running. The `withoutOverlapping` method is especially useful if you have tasks that vary drastically in their execution time, preventing you from predicting exactly how long a given task will take."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:270 docs/master/scheduling.md:270
msgid "If needed, you may specify how many minutes must pass before the \"without overlapping\" lock expires. By default, the lock will expire after 24 hours:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:272 docs/master/scheduling.md:272
#, no-wrap
msgid "    $schedule->command('emails:send')->withoutOverlapping(10);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:274 docs/master/scheduling.md:274
#, no-wrap
msgid "<a name=\"running-tasks-on-one-server\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:274 docs/master/scheduling.md:274
#, no-wrap
msgid "Running Tasks On One Server"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:277 docs/master/scheduling.md:277
#, no-wrap
msgid "> {note} To utilize this feature, your application must be using the `database`, `memcached`, `dynamodb`, or `redis` cache driver as your application's default cache driver. In addition, all servers must be communicating with the same central cache server.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:279 docs/master/scheduling.md:279
msgid "If your application's scheduler is running on multiple servers, you may limit a scheduled job to only execute on a single server. For instance, assume you have a scheduled task that generates a new report every Friday night. If the task scheduler is running on three worker servers, the scheduled task will run on all three servers and generate the report three times. Not good!"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:281 docs/master/scheduling.md:281
msgid "To indicate that the task should run on only one server, use the `onOneServer` method when defining the scheduled task. The first server to obtain the task will secure an atomic lock on the job to prevent other servers from running the same task at the same time:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:286 docs/master/scheduling.md:286
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"                    ->fridays()\n"
"                    ->at('17:00')\n"
"                    ->onOneServer();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:288 docs/master/scheduling.md:288
#, no-wrap
msgid "<a name=\"background-tasks\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scheduling.md:288 docs/master/scheduling.md:288
#, no-wrap
msgid "Background Tasks"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:291 docs/master/scheduling.md:291
msgid "By default, multiple tasks scheduled at the same time will execute sequentially based on the order they are defined in your `schedule` method. If you have long-running tasks, this may cause subsequent tasks to start much later than anticipated. If you would like to run tasks in the background so that they may all run simultaneously, you may use the `runInBackground` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:295 docs/master/scheduling.md:295
#, no-wrap
msgid "    $schedule->command('analytics:report')\n"
"             ->daily()\n"
"             ->runInBackground();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:297 docs/master/scheduling.md:297
#, no-wrap
msgid "> {note} The `runInBackground` method may only be used when scheduling tasks via the `command` and `exec` methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:302 docs/master/scheduling.md:302
msgid "Your application's scheduled tasks will not run when the application is in [maintenance mode](/docs/{{version}}/configuration#maintenance-mode), since we don't want your tasks to interfere with any unfinished maintenance you may be performing on your server. However, if you would like to force a task to run even in maintenance mode, you may call the `evenInMaintenanceMode` method when defining the task:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:304 docs/master/scheduling.md:304
#, no-wrap
msgid "    $schedule->command('emails:send')->evenInMaintenanceMode();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:306 docs/master/scheduling.md:306
#, no-wrap
msgid "<a name=\"running-the-scheduler\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scheduling.md:306 docs/master/scheduling.md:306
#, no-wrap
msgid "Running The Scheduler"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:309 docs/master/scheduling.md:309
msgid "Now that we have learned how to define scheduled tasks, let's discuss how to actually run them on our server. The `schedule:run` Artisan command will evaluate all of your scheduled tasks and determine if they need to run based on the server's current time."
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:311 docs/master/scheduling.md:311
msgid "So, when using Laravel's scheduler, we only need to add a single cron configuration entry to our server that runs the `schedule:run` command every minute. If you do not know how to add cron entries to your server, consider using a service such as [Laravel Forge](https://forge.laravel.com) which can manage the cron entries for you:"
msgstr ""

#. type: Bullet: '    * '
#: docs/8.x/scheduling.md:313 docs/master/scheduling.md:313
msgid "* * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:315 docs/master/scheduling.md:315
#, no-wrap
msgid "<a name=\"running-the-scheduler-locally\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scheduling.md:315 docs/master/scheduling.md:315
#, no-wrap
msgid "Running The Scheduler Locally"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:318 docs/master/scheduling.md:318
msgid "Typically, you would not add a scheduler cron entry to your local development machine. Instead, you may use the `schedule:work` Artisan command. This command will run in the foreground and invoke the scheduler every minute until you terminate the command:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:320 docs/master/scheduling.md:320
#, no-wrap
msgid "    php artisan schedule:work\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:322 docs/master/scheduling.md:322
#, no-wrap
msgid "<a name=\"task-output\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scheduling.md:322 docs/master/scheduling.md:322
#, no-wrap
msgid "Task Output"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:325 docs/master/scheduling.md:325
msgid "The Laravel scheduler provides several convenient methods for working with the output generated by scheduled tasks. First, using the `sendOutputTo` method, you may send the output to a file for later inspection:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:329 docs/master/scheduling.md:329
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->sendOutputTo($filePath);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:331 docs/master/scheduling.md:331
msgid "If you would like to append the output to a given file, you may use the `appendOutputTo` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:335 docs/master/scheduling.md:335
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->appendOutputTo($filePath);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:337 docs/master/scheduling.md:337
msgid "Using the `emailOutputTo` method, you may email the output to an email address of your choice. Before emailing the output of a task, you should configure Laravel's [email services](/docs/{{version}}/mail):"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:342 docs/master/scheduling.md:342
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->daily()\n"
"             ->sendOutputTo($filePath)\n"
"             ->emailOutputTo('taylor@example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:344 docs/master/scheduling.md:344
msgid "If you only want to email the output if the scheduled Artisan or system command terminates with a non-zero exit code, use the `emailOutputOnFailure` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:348 docs/master/scheduling.md:348
#, no-wrap
msgid "    $schedule->command('report:generate')\n"
"             ->daily()\n"
"             ->emailOutputOnFailure('taylor@example.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:350 docs/master/scheduling.md:350
#, no-wrap
msgid "> {note} The `emailOutputTo`, `emailOutputOnFailure`, `sendOutputTo`, and `appendOutputTo` methods are exclusive to the `command` and `exec` methods.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:352 docs/master/scheduling.md:352
#, no-wrap
msgid "<a name=\"task-hooks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scheduling.md:352 docs/master/scheduling.md:352
#, no-wrap
msgid "Task Hooks"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:355 docs/master/scheduling.md:355
msgid "Using the `before` and `after` methods, you may specify code to be executed before and after the scheduled task is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:364 docs/master/scheduling.md:364
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->before(function () {\n"
"                 // The task is about to execute...\n"
"             })\n"
"             ->after(function () {\n"
"                 // The task has executed...\n"
"             });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:366 docs/master/scheduling.md:366
msgid "The `onSuccess` and `onFailure` methods allow you to specify code to be executed if the scheduled task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:375 docs/master/scheduling.md:375
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->onSuccess(function () {\n"
"                 // The task succeeded...\n"
"             })\n"
"             ->onFailure(function () {\n"
"                 // The task failed...\n"
"             });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:377 docs/master/scheduling.md:377
msgid "If output is available from your command, you may access it in your `after`, `onSuccess` or `onFailure` hooks by type-hinting an `Illuminate\\Support\\Stringable` instance as the `$output` argument of your hook's closure definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:379 docs/master/scheduling.md:379
#, no-wrap
msgid "    use Illuminate\\Support\\Stringable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:388 docs/master/scheduling.md:388
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->onSuccess(function (Stringable $output) {\n"
"                 // The task succeeded...\n"
"             })\n"
"             ->onFailure(function (Stringable $output) {\n"
"                 // The task failed...\n"
"             });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:390 docs/master/scheduling.md:390
#, no-wrap
msgid "<a name=\"pinging-urls\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scheduling.md:390 docs/master/scheduling.md:390
#, no-wrap
msgid "Pinging URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:393 docs/master/scheduling.md:393
msgid "Using the `pingBefore` and `thenPing` methods, the scheduler can automatically ping a given URL before or after a task is executed. This method is useful for notifying an external service, such as [Envoyer](https://envoyer.io), that your scheduled task is beginning or has finished execution:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:398 docs/master/scheduling.md:398
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingBefore($url)\n"
"             ->thenPing($url);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:400 docs/master/scheduling.md:400
msgid "The `pingBeforeIf` and `thenPingIf` methods may be used to ping a given URL only if a given condition is `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:405 docs/master/scheduling.md:405
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingBeforeIf($condition, $url)\n"
"             ->thenPingIf($condition, $url);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:407 docs/master/scheduling.md:407
msgid "The `pingOnSuccess` and `pingOnFailure` methods may be used to ping a given URL only if the task succeeds or fails. A failure indicates that the scheduled Artisan or system command terminated with a non-zero exit code:"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:412 docs/master/scheduling.md:412
#, no-wrap
msgid "    $schedule->command('emails:send')\n"
"             ->daily()\n"
"             ->pingOnSuccess($successUrl)\n"
"             ->pingOnFailure($failureUrl);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scheduling.md:414 docs/master/scheduling.md:414
msgid "All of the ping methods require the Guzzle HTTP library. Guzzle is typically installed in all new Laravel projects by default, but, you may manually install Guzzle into your project using the Composer package manager if it has been accidentally removed:"
msgstr ""

#. type: Title #
#: docs/8.x/scout.md:1 docs/master/scout.md:1
#, no-wrap
msgid "Laravel Scout"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Queueing](#queueing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Configuring Model Indexes](#configuring-model-indexes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Configuring Searchable Data](#configuring-searchable-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Configuring The Model ID](#configuring-the-model-id)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Identifying Users](#identifying-users)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Indexing](#indexing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Batch Import](#batch-import)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Adding Records](#adding-records)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Updating Records](#updating-records)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Removing Records](#removing-records)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Pausing Indexing](#pausing-indexing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Conditionally Searchable Model Instances](#conditionally-searchable-model-instances)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Searching](#searching)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Customizing Engine Searches](#customizing-engine-searches)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Custom Engines](#custom-engines)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/scout.md:26 docs/master/scout.md:26
msgid "[Builder Macros](#builder-macros)"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:31 docs/master/scout.md:31
msgid "Laravel Scout provides a simple, driver based solution for adding full-text search to your [Eloquent models](/docs/{{version}}/eloquent). Using model observers, Scout will automatically keep your search indexes in sync with your Eloquent records."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:33 docs/master/scout.md:33
msgid "Currently, Scout ships with an [Algolia](https://www.algolia.com/) driver; however, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:38 docs/master/scout.md:38
msgid "First, install Scout via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:40 docs/master/scout.md:40
#, no-wrap
msgid "    composer require laravel/scout\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:42 docs/master/scout.md:42
msgid "After installing Scout, you should publish the Scout configuration file using the `vendor:publish` Artisan command. This command will publish the `scout.php` configuration file to your application's `config` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:44 docs/master/scout.md:44
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:46 docs/master/scout.md:46
msgid "Finally, add the `Laravel\\Scout\\Searchable` trait to the model you would like to make searchable. This trait will register a model observer that will automatically keep the model in sync with your search driver:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:53 docs/8.x/scout.md:97 docs/8.x/scout.md:124
#: docs/8.x/scout.md:155 docs/master/scout.md:53 docs/master/scout.md:92
#: docs/master/scout.md:119 docs/master/scout.md:150
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Laravel\\Scout\\Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:58 docs/master/scout.md:58
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        use Searchable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:63 docs/master/scout.md:63
#, no-wrap
msgid "<a name=\"algolia\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:63 docs/master/scout.md:63
#, no-wrap
msgid "Algolia"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:66 docs/master/scout.md:66
msgid "When using the Algolia driver, you should configure your Algolia `id` and `secret` credentials in your `config/scout.php` configuration file. Once your credentials have been configured, you will also need to install the Algolia PHP SDK via the Composer package manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:68 docs/master/scout.md:68
#, no-wrap
msgid "    composer require algolia/algoliasearch-client-php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:73
msgid "MeiliSearch is a powerful, open source search-engine that may be run locally using [Laravel Sail](/docs/{{version}}/sail). MeiliSearch provides and maintains an [official MeiliSearch driver for Laravel Scout](https://github.com/meilisearch/meilisearch-laravel-scout). Please consult this package's documentation to learn how to use MeiliSearch with Laravel Scout."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:75 docs/master/scout.md:70
#, no-wrap
msgid "<a name=\"queueing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:75 docs/master/scout.md:70
#, no-wrap
msgid "Queueing"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:78 docs/master/scout.md:73
msgid "While not strictly required to use Scout, you should strongly consider configuring a [queue driver](/docs/{{version}}/queues) before using the library. Running a queue worker will allow Scout to queue all operations that sync your model information to your search indexes, providing much better response times for your application's web interface."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:80 docs/master/scout.md:75
msgid "Once you have configured a queue driver, set the value of the `queue` option in your `config/scout.php` configuration file to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:82 docs/master/scout.md:77
#, no-wrap
msgid "    'queue' => true,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:87 docs/master/scout.md:82
#, no-wrap
msgid "<a name=\"configuring-model-indexes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:87 docs/master/scout.md:82
#, no-wrap
msgid "Configuring Model Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:90 docs/master/scout.md:85
msgid "Each Eloquent model is synced with a given search \"index\", which contains all of the searchable records for that model. In other words, you can think of each index like a MySQL table. By default, each model will be persisted to an index matching the model's typical \"table\" name. Typically, this is the plural form of the model name; however, you are free to customize the model's index by overriding the `searchableAs` method on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:101 docs/8.x/scout.md:128 docs/master/scout.md:96
#: docs/master/scout.md:123
#, no-wrap
msgid "    class Post extends Model\n"
"    {\n"
"        use Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:112 docs/master/scout.md:107
#, no-wrap
msgid "        /**\n"
"         * Get the name of the index associated with the model.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function searchableAs()\n"
"        {\n"
"            return 'posts_index';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:114 docs/master/scout.md:109
#, no-wrap
msgid "<a name=\"configuring-searchable-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:114 docs/master/scout.md:109
#, no-wrap
msgid "Configuring Searchable Data"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:117 docs/master/scout.md:112
msgid "By default, the entire `toArray` form of a given model will be persisted to its search index. If you would like to customize the data that is synchronized to the search index, you may override the `toSearchableArray` method on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:137 docs/master/scout.md:132
#, no-wrap
msgid "        /**\n"
"         * Get the indexable data array for the model.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function toSearchableArray()\n"
"        {\n"
"            $array = $this->toArray();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:139 docs/master/scout.md:134
#, no-wrap
msgid "            // Customize the data array...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:143 docs/master/scout.md:138
#, no-wrap
msgid "            return $array;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:145 docs/master/scout.md:140
#, no-wrap
msgid "<a name=\"configuring-the-model-id\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:145 docs/master/scout.md:140
#, no-wrap
msgid "Configuring The Model ID"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:148 docs/master/scout.md:143
msgid "By default, Scout will use the primary key of the model as model's unique ID / key that is stored in the search index. If you need to customize this behavior, you may override the `getScoutKey` and the `getScoutKeyName` methods on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:159 docs/master/scout.md:154
#, no-wrap
msgid "    class User extends Model\n"
"    {\n"
"        use Searchable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:169 docs/master/scout.md:164
#, no-wrap
msgid "        /**\n"
"         * Get the value used to index the model.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        public function getScoutKey()\n"
"        {\n"
"            return $this->email;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:180 docs/master/scout.md:175
#, no-wrap
msgid "        /**\n"
"         * Get the key name used to index the model.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        public function getScoutKeyName()\n"
"        {\n"
"            return 'email';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:182 docs/master/scout.md:177
#, no-wrap
msgid "<a name=\"identifying-users\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:182 docs/master/scout.md:177
#, no-wrap
msgid "Identifying Users"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:185 docs/master/scout.md:180
msgid "Scout also allows you to auto identify users when using [Algolia](https://algolia.com). Associating the authenticated user with search operations may be helpful when viewing your search analytics within Algolia's dashboard. You can enable user identification by defining a `SCOUT_IDENTIFY` environment variable as `true` in your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:187 docs/master/scout.md:182
#, no-wrap
msgid "    SCOUT_IDENTIFY=true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:189 docs/master/scout.md:184
msgid "Enabling this feature this will also pass the request's IP address and your authenticated user's primary identifier to Algolia so this data is associated with any search request that is made by the user."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:191 docs/master/scout.md:186
#, no-wrap
msgid "<a name=\"indexing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scout.md:191 docs/master/scout.md:186
#, no-wrap
msgid "Indexing"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:194 docs/master/scout.md:189
#, no-wrap
msgid "<a name=\"batch-import\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:194 docs/master/scout.md:189
#, no-wrap
msgid "Batch Import"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:197 docs/master/scout.md:192
msgid "If you are installing Scout into an existing project, you may already have database records you need to import into your indexes. Scout provides a `scout:import` Artisan command that you may use to import all of your existing records into your search indexes:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:199 docs/master/scout.md:194
#, no-wrap
msgid "    php artisan scout:import \"App\\Models\\Post\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:201 docs/master/scout.md:196
msgid "The `flush` command may be used to remove all of a model's records from your search indexes:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:203 docs/master/scout.md:198
#, no-wrap
msgid "    php artisan scout:flush \"App\\Models\\Post\"\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:205 docs/master/scout.md:200
#, no-wrap
msgid "<a name=\"modifying-the-import-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:205 docs/master/scout.md:200
#, no-wrap
msgid "Modifying The Import Query"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:208 docs/master/scout.md:203
msgid "If you would like to modify the query that is used to retrieve all of your models for batch importing, you may define a `makeAllSearchableUsing` method on your model. This is a great place to add any eager relationship loading that may be necessary before importing your models:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:219 docs/master/scout.md:214
#, no-wrap
msgid "    /**\n"
"     * Modify the query used to retrieve models when making all of the models searchable.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"     */\n"
"    protected function makeAllSearchableUsing($query)\n"
"    {\n"
"        return $query->with('author');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:221 docs/master/scout.md:216
#, no-wrap
msgid "<a name=\"adding-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:221 docs/master/scout.md:216
#, no-wrap
msgid "Adding Records"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:224 docs/master/scout.md:219
msgid "Once you have added the `Laravel\\Scout\\Searchable` trait to a model, all you need to do is `save` or `create` a model instance and it will automatically be added to your search index. If you have configured Scout to [use queues](#queueing) this operation will be performed in the background by your queue worker:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:228 docs/master/scout.md:223
#, no-wrap
msgid "    $order = new Order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:232 docs/8.x/scout.md:264 docs/master/scout.md:227
#: docs/master/scout.md:259
#, no-wrap
msgid "    $order->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:234 docs/master/scout.md:229
#, no-wrap
msgid "<a name=\"adding-records-via-query\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:234 docs/master/scout.md:229
#, no-wrap
msgid "Adding Records Via Query"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:237 docs/master/scout.md:232
msgid "If you would like to add a collection of models to your search index via an Eloquent query, you may chain the `searchable` method onto the Eloquent query. The `searchable` method will [chunk the results](/docs/{{version}}/eloquent#chunking-results) of the query and add the records to your search index. Again, if you have configured Scout to use queues, all of the chunks will be imported in the background by your queue workers:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:241 docs/8.x/scout.md:268 docs/master/scout.md:236
#: docs/master/scout.md:263
#, no-wrap
msgid "    Order::where('price', '>', 100)->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:243 docs/master/scout.md:238
msgid "You may also call the `searchable` method on an Eloquent relationship instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:245 docs/8.x/scout.md:272 docs/master/scout.md:240
#: docs/master/scout.md:267
#, no-wrap
msgid "    $user->orders()->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:247 docs/master/scout.md:242
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to add the model instances to their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:249 docs/8.x/scout.md:276 docs/master/scout.md:244
#: docs/master/scout.md:271
#, no-wrap
msgid "    $orders->searchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:251 docs/master/scout.md:246
#, no-wrap
msgid "> {tip} The `searchable` method can be considered an \"upsert\" operation. In other words, if the model record is already in your index, it will be updated. If it does not exist in the search index, it will be added to the index.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:253 docs/master/scout.md:248
#, no-wrap
msgid "<a name=\"updating-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:253 docs/master/scout.md:248
#, no-wrap
msgid "Updating Records"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:256 docs/master/scout.md:251
msgid "To update a searchable model, you only need to update the model instance's properties and `save` the model to your database. Scout will automatically persist the changes to your search index:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:260 docs/8.x/scout.md:285 docs/master/scout.md:255
#: docs/master/scout.md:280
#, no-wrap
msgid "    $order = Order::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:262 docs/master/scout.md:257
#, no-wrap
msgid "    // Update the order...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:266 docs/master/scout.md:261
msgid "You may also invoke the `searchable` method on an Eloquent query instance to update a collection of models. If the models do not exist in your search index, they will be created:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:270 docs/master/scout.md:265
msgid "If you would like to update the search index records for all of the models in a relationship, you may invoke the `searchable` on the relationship instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:274 docs/master/scout.md:269
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to update the model instances in their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:278 docs/master/scout.md:273
#, no-wrap
msgid "<a name=\"removing-records\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:278 docs/master/scout.md:273
#, no-wrap
msgid "Removing Records"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:281 docs/master/scout.md:276
msgid "To remove a record from your index you may simply `delete` the model from the database. This may be done even if you are using [soft deleted](/docs/{{version}}/eloquent#soft-deleting) models:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:287 docs/master/scout.md:282
#, no-wrap
msgid "    $order->delete();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:289 docs/master/scout.md:284
msgid "If you do not want to retrieve the model before deleting the record, you may use the `unsearchable` method on an Eloquent query instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:291 docs/master/scout.md:286
#, no-wrap
msgid "    Order::where('price', '>', 100)->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:293 docs/master/scout.md:288
msgid "If you would like to remove the search index records for all of the models in a relationship, you may invoke the `unsearchable` on the relationship instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:295 docs/master/scout.md:290
#, no-wrap
msgid "    $user->orders()->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:297 docs/master/scout.md:292
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `unsearchable` method on the collection instance to remove the model instances from their corresponding index:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:299 docs/master/scout.md:294
#, no-wrap
msgid "    $orders->unsearchable();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:301 docs/master/scout.md:296
#, no-wrap
msgid "<a name=\"pausing-indexing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:301 docs/master/scout.md:296
#, no-wrap
msgid "Pausing Indexing"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:304 docs/master/scout.md:299
msgid "Sometimes you may need to perform a batch of Eloquent operations on a model without syncing the model data to your search index. You may do this using the `withoutSyncingToSearch` method. This method accepts a single closure which will be immediately executed. Any model operations that occur within the closure will not be synced to the model's index:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:310 docs/master/scout.md:305
#, no-wrap
msgid "    Order::withoutSyncingToSearch(function () {\n"
"        // Perform model actions...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:312 docs/master/scout.md:307
#, no-wrap
msgid "<a name=\"conditionally-searchable-model-instances\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:312 docs/master/scout.md:307
#, no-wrap
msgid "Conditionally Searchable Model Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:315 docs/master/scout.md:310
msgid "Sometimes you may need to only make a model searchable under certain conditions. For example, imagine you have `App\\Models\\Post` model that may be in one of two states: \"draft\" and \"published\". You may only want to allow \"published\" posts to be searchable. To accomplish this, you may define a `shouldBeSearchable` method on your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:325 docs/master/scout.md:320
#, no-wrap
msgid "    /**\n"
"     * Determine if the model should be searchable.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function shouldBeSearchable()\n"
"    {\n"
"        return $this->isPublished();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:327 docs/master/scout.md:322
msgid "The `shouldBeSearchable` method is only applied when manipulating models through the `save` and `create` methods, queries, or relationships. Directly making models or collections searchable using the `searchable` method will override the result of the `shouldBeSearchable` method."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:329 docs/master/scout.md:324
#, no-wrap
msgid "<a name=\"searching\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scout.md:329 docs/master/scout.md:324
#, no-wrap
msgid "Searching"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:332 docs/master/scout.md:327
msgid "You may begin searching a model using the `search` method. The search method accepts a single string that will be used to search your models. You should then chain the `get` method onto the search query to retrieve the Eloquent models that match the given search query:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:336 docs/master/scout.md:331
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:338 docs/master/scout.md:333
msgid "Since Scout searches return a collection of Eloquent models, you may even return the results directly from a route or controller and they will automatically be converted to JSON:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:341 docs/8.x/scout.md:397 docs/master/scout.md:336
#: docs/master/scout.md:392
#, no-wrap
msgid "    use App\\Models\\Order;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:345 docs/master/scout.md:340
#, no-wrap
msgid "    Route::get('/search', function (Request $request) {\n"
"        return Order::search($request->search)->get();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:347 docs/master/scout.md:342
msgid "If you would like to get the raw search results before they are converted to Eloquent models, you may use the `raw` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:349 docs/master/scout.md:344
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->raw();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:351 docs/master/scout.md:346
#, no-wrap
msgid "<a name=\"custom-indexes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:351 docs/master/scout.md:346
#, no-wrap
msgid "Custom Indexes"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:354 docs/master/scout.md:349
msgid "Search queries will typically be performed on the index specified by the model's [`searchableAs`](#configuring-model-indexes) method. However, you may use the `within` method to specify a custom index that should be searched instead:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:358 docs/master/scout.md:353
#, no-wrap
msgid "    $orders = Order::search('Star Trek')\n"
"        ->within('tv_shows_popularity_desc')\n"
"        ->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:363 docs/master/scout.md:358
msgid "Scout allows you to add simple \"where\" clauses to your search queries. Currently, these clauses only support basic numeric equality checks and are primarily useful for scoping search queries by an owner ID. Since a search index is not a relational database, more advanced \"where\" clauses are not currently supported:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:367 docs/master/scout.md:362
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->where('user_id', 1)->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:372 docs/master/scout.md:367
msgid "In addition to retrieving a collection of models, you may paginate your search results using the `paginate` method. This method will return an `Illuminate\\Pagination\\LengthAwarePaginator` instance just as if you had [paginated a traditional Eloquent query](/docs/{{version}}/pagination):"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:376 docs/master/scout.md:371
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->paginate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:378 docs/master/scout.md:373
msgid "You may specify how many models to retrieve per page by passing the amount as the first argument to the `paginate` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:380 docs/master/scout.md:375
#, no-wrap
msgid "    $orders = Order::search('Star Trek')->paginate(15);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:382 docs/master/scout.md:377
msgid "Once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade) just as if you had paginated a traditional Eloquent query:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/scout.md:383 docs/master/scout.md:378
#, no-wrap
msgid "<div class=\"container\">\n"
"    @foreach ($orders as $order)\n"
"        {{ $order->price }}\n"
"    @endforeach\n"
"</div>\n\n"
"{{ $orders->links() }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:394 docs/master/scout.md:389
msgid "Of course, if you would like to retrieve the pagination results as JSON, you may return the paginator instance directly from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:401 docs/master/scout.md:396
#, no-wrap
msgid "    Route::get('/orders', function (Request $request) {\n"
"        return Order::search($request->input('query'))->paginate(15);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:406 docs/master/scout.md:401
msgid "If your indexed models are [soft deleting](/docs/{{version}}/eloquent#soft-deleting) and you need to search your soft deleted models, set the `soft_delete` option of the `config/scout.php` configuration file to `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:408 docs/master/scout.md:403
#, no-wrap
msgid "    'soft_delete' => true,\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:410 docs/master/scout.md:405
msgid "When this configuration option is `true`, Scout will not remove soft deleted models from the search index. Instead, it will set a hidden `__soft_deleted` attribute on the indexed record. Then, you may use the `withTrashed` or `onlyTrashed` methods to retrieve the soft deleted records when searching:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:415 docs/master/scout.md:410
#, no-wrap
msgid "    // Include trashed records when retrieving results...\n"
"    $orders = Order::search('Star Trek')->withTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:418 docs/master/scout.md:413
#, no-wrap
msgid "    // Only include trashed records when retrieving results...\n"
"    $orders = Order::search('Star Trek')->onlyTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:420 docs/master/scout.md:415
#, no-wrap
msgid "> {tip} When a soft deleted model is permanently deleted using `forceDelete`, Scout will remove it from the search index automatically.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:422 docs/master/scout.md:417
#, no-wrap
msgid "<a name=\"customizing-engine-searches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/scout.md:422 docs/master/scout.md:417
#, no-wrap
msgid "Customizing Engine Searches"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:425 docs/master/scout.md:420
msgid "If you need to perform advanced customization of the search behavior of an engine you may pass a closure as the second argument to the `search` method. For example, you could use this callback to add geo-location data to your search options before the search query is passed to Algolia:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:428 docs/master/scout.md:423
#, no-wrap
msgid "    use Algolia\\AlgoliaSearch\\SearchIndex;\n"
"    use App\\Models\\Order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:436 docs/master/scout.md:431
#, no-wrap
msgid "    Order::search(\n"
"        'Star Trek',\n"
"        function (SearchIndex $algolia, string $query, array $options) {\n"
"            $options['body']['query']['bool']['filter']['geo_distance'] = [\n"
"                'distance' => '1000km',\n"
"                'location' => ['lat' => 36, 'lon' => 111],\n"
"            ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:440 docs/master/scout.md:435
#, no-wrap
msgid "            return $algolia->search($query, $options);\n"
"        }\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:442 docs/master/scout.md:437
#, no-wrap
msgid "<a name=\"custom-engines\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scout.md:442 docs/master/scout.md:437
#, no-wrap
msgid "Custom Engines"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:445 docs/master/scout.md:440
#, no-wrap
msgid "<a name=\"writing-the-engine\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:445 docs/master/scout.md:440
#, no-wrap
msgid "Writing The Engine"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:448 docs/master/scout.md:443
msgid "If one of the built-in Scout search engines doesn't fit your needs, you may write your own custom engine and register it with Scout. Your engine should extend the `Laravel\\Scout\\Engines\\Engine` abstract class. This abstract class contains eight methods your custom engine must implement:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:450 docs/master/scout.md:445
#, no-wrap
msgid "    use Laravel\\Scout\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:459 docs/master/scout.md:454
#, no-wrap
msgid "    abstract public function update($models);\n"
"    abstract public function delete($models);\n"
"    abstract public function search(Builder $builder);\n"
"    abstract public function paginate(Builder $builder, $perPage, $page);\n"
"    abstract public function mapIds($results);\n"
"    abstract public function map(Builder $builder, $results, $model);\n"
"    abstract public function getTotalCount($results);\n"
"    abstract public function flush($model);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:461 docs/master/scout.md:456
msgid "You may find it helpful to review the implementations of these methods on the `Laravel\\Scout\\Engines\\AlgoliaEngine` class. This class will provide you with a good starting point for learning how to implement each of these methods in your own engine."
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:463 docs/master/scout.md:458
#, no-wrap
msgid "<a name=\"registering-the-engine\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/scout.md:463 docs/master/scout.md:458
#, no-wrap
msgid "Registering The Engine"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:466 docs/master/scout.md:461
msgid "Once you have written your custom engine, you may register it with Scout using the `extend` method of the Scout engine manager. Scout's engine manager may be resolved from the Laravel service container. You should call the `extend` method from the `boot` method of your `App\\Providers\\AppServiceProvider` class or any other service provider used by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:469 docs/master/scout.md:464
#, no-wrap
msgid "    use App\\ScoutExtensions\\MySqlSearchEngine\n"
"    use Laravel\\Scout\\EngineManager;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:481 docs/master/scout.md:476
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        resolve(EngineManager::class)->extend('mysql', function () {\n"
"            return new MySqlSearchEngine;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:483 docs/master/scout.md:478
msgid "Once your engine has been registered, you may specify it as your default Scout `driver` in your application's `config/scout.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:485 docs/master/scout.md:480
#, no-wrap
msgid "    'driver' => 'mysql',\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:487 docs/master/scout.md:482
#, no-wrap
msgid "<a name=\"builder-macros\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/scout.md:487 docs/master/scout.md:482
#, no-wrap
msgid "Builder Macros"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:490 docs/master/scout.md:485
msgid "If you would like to define a custom Scout search builder method, you may use the `macro` method on the `Laravel\\Scout\\Builder` class. Typically, \"macros\" should be defined within a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:494 docs/master/scout.md:489
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Response;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
"    use Laravel\\Scout\\Builder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:508 docs/master/scout.md:503
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Builder::macro('count', function () {\n"
"            return $this->engine()->getTotalCount(\n"
"                $this->engine()->search($this)\n"
"            );\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:510 docs/master/scout.md:505
msgid "The `macro` function accepts a macro name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `Laravel\\Scout\\Builder` implementation:"
msgstr ""

#. type: Plain text
#: docs/8.x/scout.md:513 docs/master/scout.md:508
#, no-wrap
msgid "    Order::search('Star Trek')->count();\n"
msgstr ""

#. type: Title #
#: docs/8.x/seeding.md:1 docs/master/seeding.md:1
#, no-wrap
msgid "Database: Seeding"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/seeding.md:8 docs/master/seeding.md:8
msgid "[Writing Seeders](#writing-seeders)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/seeding.md:8 docs/master/seeding.md:8
msgid "[Using Model Factories](#using-model-factories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/seeding.md:8 docs/master/seeding.md:8
msgid "[Calling Additional Seeders](#calling-additional-seeders)"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:13 docs/master/seeding.md:13
msgid "Laravel includes the ability to seed your database with test data using seed classes. All seed classes are stored in the `database/seeders` directory. By default, a `DatabaseSeeder` class is defined for you. From this class, you may use the `call` method to run other seed classes, allowing you to control the seeding order."
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:15 docs/master/seeding.md:15
#, no-wrap
msgid "> {tip} [Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled during database seeding.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:17 docs/master/seeding.md:17
#, no-wrap
msgid "<a name=\"writing-seeders\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/seeding.md:17 docs/master/seeding.md:17
#, no-wrap
msgid "Writing Seeders"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:20 docs/master/seeding.md:20
msgid "To generate a seeder, execute the `make:seeder` [Artisan command](/docs/{{version}}/artisan). All seeders generated by the framework will be placed in the `database/seeders` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:22 docs/master/seeding.md:22
#, no-wrap
msgid "    php artisan make:seeder UserSeeder\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:24 docs/master/seeding.md:24
msgid "A seeder class only contains one method by default: `run`. This method is called when the `db:seed` [Artisan command](/docs/{{version}}/artisan) is executed. Within the `run` method, you may insert data into your database however you wish. You may use the [query builder](/docs/{{version}}/queries) to manually insert data or you may use [Eloquent model factories](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:26 docs/master/seeding.md:26
msgid "As an example, let's modify the default `DatabaseSeeder` class and add a database insert statement to the `run` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:30 docs/8.x/upgrade.md:101 docs/master/seeding.md:30
#: docs/master/upgrade.md:101
#, no-wrap
msgid "    namespace Database\\Seeders;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:35 docs/master/seeding.md:35
#, no-wrap
msgid "    use Illuminate\\Database\\Seeder;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:52 docs/master/seeding.md:52
#, no-wrap
msgid "    class DatabaseSeeder extends Seeder\n"
"    {\n"
"        /**\n"
"         * Run the database seeders.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function run()\n"
"        {\n"
"            DB::table('users')->insert([\n"
"                'name' => Str::random(10),\n"
"                'email' => Str::random(10).'@gmail.com',\n"
"                'password' => Hash::make('password'),\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:54 docs/master/seeding.md:54
#, no-wrap
msgid "> {tip} You may type-hint any dependencies you need within the `run` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:56 docs/master/seeding.md:56
#, no-wrap
msgid "<a name=\"using-model-factories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/seeding.md:56 docs/master/seeding.md:56
#, no-wrap
msgid "Using Model Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:59 docs/master/seeding.md:59
msgid "Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use [model factories](/docs/{{version}}/database-testing#defining-model-factories) to conveniently generate large amounts of database records. First, review the [model factory documentation](/docs/{{version}}/database-testing#defining-model-factories) to learn how to define your factories."
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:61 docs/master/seeding.md:61
msgid "For example, let's create 50 users that each has one related post:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:76 docs/master/seeding.md:76
#, no-wrap
msgid "    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        User::factory()\n"
"                ->count(50)\n"
"                ->hasPosts(1)\n"
"                ->create();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:78 docs/master/seeding.md:78
#, no-wrap
msgid "<a name=\"calling-additional-seeders\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/seeding.md:78 docs/master/seeding.md:78
#, no-wrap
msgid "Calling Additional Seeders"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:81 docs/master/seeding.md:81
msgid "Within the `DatabaseSeeder` class, you may use the `call` method to execute additional seed classes. Using the `call` method allows you to break up your database seeding into multiple files so that no single seeder class becomes too large. The `call` method accepts an array of seeder classes that should be executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:95 docs/master/seeding.md:95
#, no-wrap
msgid "    /**\n"
"     * Run the database seeders.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        $this->call([\n"
"            UserSeeder::class,\n"
"            PostSeeder::class,\n"
"            CommentSeeder::class,\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:100 docs/master/seeding.md:100
msgid "You may execute the `db:seed` Artisan command to seed your database. By default, the `db:seed` command runs the `Database\\Seeders\\DatabaseSeeder` class, which may in turn invoke other seed classes. However, you may use the `--class` option to specify a specific seeder class to run individually:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:102 docs/master/seeding.md:102
#, no-wrap
msgid "    php artisan db:seed\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:104 docs/master/seeding.md:104
#, no-wrap
msgid "    php artisan db:seed --class=UserSeeder\n"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:106 docs/master/seeding.md:106
msgid "You may also seed your database using the `migrate:fresh` command in combination with the `--seed` option, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:110 docs/master/seeding.md:110
#, no-wrap
msgid "<a name=\"forcing-seeding-production\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/seeding.md:110 docs/master/seeding.md:110
#, no-wrap
msgid "Forcing Seeders To Run In Production"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:113 docs/master/seeding.md:113
msgid "Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed in the `production` environment. To force the seeders to run without a prompt, use the `--force` flag:"
msgstr ""

#. type: Plain text
#: docs/8.x/seeding.md:114 docs/master/seeding.md:114
#, no-wrap
msgid "    php artisan db:seed --force\n"
msgstr ""

#. type: Title #
#: docs/8.x/session.md:1 docs/master/session.md:1
#, no-wrap
msgid "HTTP Session"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Interacting With The Session](#interacting-with-the-session)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Retrieving Data](#retrieving-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Storing Data](#storing-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Flash Data](#flash-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Deleting Data](#deleting-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Regenerating The Session ID](#regenerating-the-session-id)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Session Blocking](#session-blocking)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Adding Custom Session Drivers](#adding-custom-session-drivers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/session.md:16 docs/master/session.md:16
msgid "[Implementing The Driver](#implementing-the-driver)"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:21 docs/master/session.md:21
msgid "Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests. That user information is typically placed in a persistent store / backend that can be accessed from subsequent requests."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:23 docs/master/session.md:23
msgid "Laravel ships with a variety of session backends that are accessed through an expressive, unified API. Support for popular backends such as [Memcached](https://memcached.org), [Redis](https://redis.io), and databases is included."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:28 docs/master/session.md:28
msgid "Your application's session configuration file is stored at `config/session.php`. Be sure to review the options available to you in this file. By default, Laravel is configured to use the `file` session driver, which will work well for many applications. If your application will be load balanced across multiple web servers, you should choose a centralized store that all servers can access, such as Redis or a database."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:30 docs/master/session.md:30
msgid "The session `driver` configuration option defines where session data will be stored for each request. Laravel ships with several great drivers out of the box:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:39 docs/master/session.md:39
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `file` - sessions are stored in `storage/framework/sessions`.\n"
"- `cookie` - sessions are stored in secure, encrypted cookies.\n"
"- `database` - sessions are stored in a relational database.\n"
"- `memcached` / `redis` - sessions are stored in one of these fast, cache based stores.\n"
"- `dynamodb` - sessions are stored in AWS DynamoDB.\n"
"- `array` - sessions are stored in a PHP array and will not be persisted.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:41 docs/master/session.md:41
#, no-wrap
msgid "> {tip} The array driver is primarily used during [testing](/docs/{{version}}/testing) and prevents the data stored in the session from being persisted.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:49 docs/master/session.md:49
msgid "When using the `database` session driver, you will need to create a table to contain the session records. An example `Schema` declaration for the table may be found below:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:58 docs/master/session.md:58
#, no-wrap
msgid "    Schema::create('sessions', function ($table) {\n"
"        $table->string('id')->primary();\n"
"        $table->foreignId('user_id')->nullable()->index();\n"
"        $table->string('ip_address', 45)->nullable();\n"
"        $table->text('user_agent')->nullable();\n"
"        $table->text('payload');\n"
"        $table->integer('last_activity')->index();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:60 docs/master/session.md:60
msgid "You may use the `session:table` Artisan command to generate this migration. To learn more about database migrations, you may consult the complete [migration documentation](/docs/{{version}}/migrations):"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:62 docs/master/session.md:62
#, no-wrap
msgid "    php artisan session:table\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:69 docs/master/session.md:69
msgid "Before using Redis sessions with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the `predis/predis` package (~1.0) via Composer. For more information on configuring Redis, consult Laravel's [Redis documentation](/docs/{{version}}/redis#configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:71 docs/master/session.md:71
#, no-wrap
msgid "> {tip} In the `session` configuration file, the `connection` option may be used to specify which Redis connection is used by the session.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:73 docs/master/session.md:73
#, no-wrap
msgid "<a name=\"interacting-with-the-session\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/session.md:73 docs/master/session.md:73
#, no-wrap
msgid "Interacting With The Session"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:76 docs/master/session.md:76
#, no-wrap
msgid "<a name=\"retrieving-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/session.md:76 docs/master/session.md:76
#, no-wrap
msgid "Retrieving Data"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:79 docs/master/session.md:79
msgid "There are two primary ways of working with session data in Laravel: the global `session` helper and via a `Request` instance. First, let's look at accessing the session via a `Request` instance, which can be type-hinted on a route closure or controller method. Remember, controller method dependencies are automatically injected via the Laravel [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:99 docs/master/session.md:99
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  Request  $request\n"
"         * @param  int  $id\n"
"         * @return Response\n"
"         */\n"
"        public function show(Request $request, $id)\n"
"        {\n"
"            $value = $request->session()->get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:105 docs/master/session.md:105
msgid "When you retrieve an item from the session, you may also pass a default value as the second argument to the `get` method. This default value will be returned if the specified key does not exist in the session. If you pass a closure as the default value to the `get` method and the requested key does not exist, the closure will be executed and its result returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:107 docs/master/session.md:107
#, no-wrap
msgid "    $value = $request->session()->get('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:111 docs/master/session.md:111
#, no-wrap
msgid "    $value = $request->session()->get('key', function () {\n"
"        return 'default';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:113 docs/master/session.md:113
#, no-wrap
msgid "<a name=\"the-global-session-helper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:113 docs/master/session.md:113
#, no-wrap
msgid "The Global Session Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:116 docs/master/session.md:116
msgid "You may also use the global `session` PHP function to retrieve and store data in the session. When the `session` helper is called with a single, string argument, it will return the value of that session key. When the helper is called with an array of key / value pairs, those values will be stored in the session:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:120 docs/master/session.md:120
#, no-wrap
msgid "    Route::get('/home', function () {\n"
"        // Retrieve a piece of data from the session...\n"
"        $value = session('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:123 docs/master/session.md:123
#, no-wrap
msgid "        // Specifying a default value...\n"
"        $value = session('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:127 docs/master/session.md:127
#, no-wrap
msgid "        // Store a piece of data in the session...\n"
"        session(['key' => 'value']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:129 docs/master/session.md:129
#, no-wrap
msgid "> {tip} There is little practical difference between using the session via an HTTP request instance versus using the global `session` helper. Both methods are [testable](/docs/{{version}}/testing) via the `assertSessionHas` method which is available in all of your test cases.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:131 docs/master/session.md:131
#, no-wrap
msgid "<a name=\"retrieving-all-session-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:131 docs/master/session.md:131
#, no-wrap
msgid "Retrieving All Session Data"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:134 docs/master/session.md:134
msgid "If you would like to retrieve all the data in the session, you may use the `all` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:136 docs/master/session.md:136
#, no-wrap
msgid "    $data = $request->session()->all();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:138 docs/master/session.md:138
#, no-wrap
msgid "<a name=\"determining-if-an-item-exists-in-the-session\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:138 docs/master/session.md:138
#, no-wrap
msgid "Determining If An Item Exists In The Session"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:141 docs/master/session.md:141
msgid "To determine if an item is present in the session, you may use the `has` method. The `has` method returns `true` if the item is present and is not `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:145 docs/master/session.md:145
#, no-wrap
msgid "    if ($request->session()->has('users')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:147 docs/master/session.md:147
msgid "To determine if an item is present in the session, even if its value is `null`, you may use the `exists` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:151 docs/master/session.md:151
#, no-wrap
msgid "    if ($request->session()->exists('users')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:153 docs/master/session.md:153
#, no-wrap
msgid "<a name=\"storing-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/session.md:153 docs/master/session.md:153
#, no-wrap
msgid "Storing Data"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:156 docs/master/session.md:156
msgid "To store data in the session, you will typically use the request instance's `put` method or the `session` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:159 docs/master/session.md:159
#, no-wrap
msgid "    // Via a request instance...\n"
"    $request->session()->put('key', 'value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:162 docs/master/session.md:162
#, no-wrap
msgid "    // Via the global \"session\" helper...\n"
"    session(['key' => 'value']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:164 docs/master/session.md:164
#, no-wrap
msgid "<a name=\"pushing-to-array-session-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:164 docs/master/session.md:164
#, no-wrap
msgid "Pushing To Array Session Values"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:167 docs/master/session.md:167
msgid "The `push` method may be used to push a new value onto a session value that is an array. For example, if the `user.teams` key contains an array of team names, you may push a new value onto the array like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:169 docs/master/session.md:169
#, no-wrap
msgid "    $request->session()->push('user.teams', 'developers');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:171 docs/master/session.md:171
#, no-wrap
msgid "<a name=\"retrieving-deleting-an-item\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:171 docs/master/session.md:171
#, no-wrap
msgid "Retrieving & Deleting An Item"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:174 docs/master/session.md:174
msgid "The `pull` method will retrieve and delete an item from the session in a single statement:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:176 docs/master/session.md:176
#, no-wrap
msgid "    $value = $request->session()->pull('key', 'default');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:178 docs/master/session.md:178
#, no-wrap
msgid "<a name=\"#incrementing-and-decrementing-session-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:178 docs/master/session.md:178
#, no-wrap
msgid "Incrementing & Decrementing Session Values"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:181 docs/master/session.md:181
msgid "If your session data contains an integer you wish to increment or decrement, you may use the `increment` and `decrement` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:183 docs/master/session.md:183
#, no-wrap
msgid "    $request->session()->increment('count'); \n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:185 docs/master/session.md:185
#, no-wrap
msgid "    $request->session()->increment('count', $incrementBy = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:187 docs/master/session.md:187
#, no-wrap
msgid "    $request->session()->decrement('count');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:189 docs/master/session.md:189
#, no-wrap
msgid "    $request->session()->decrement('count', $decrementBy = 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:191 docs/master/session.md:191
#, no-wrap
msgid "<a name=\"flash-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/session.md:191 docs/master/session.md:191
#, no-wrap
msgid "Flash Data"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:194 docs/master/session.md:194
msgid "Sometimes you may wish to store items in the session for the next request. You may do so using the `flash` method. Data stored in the session using this method will be available immediately and during the subsequent HTTP request. After the subsequent HTTP request, the flashed data will be deleted. Flash data is primarily useful for short-lived status messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:196 docs/master/session.md:196
#, no-wrap
msgid "    $request->session()->flash('status', 'Task was successful!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:198 docs/master/session.md:198
msgid "If you need to persist your flash data for several requests, you may use the `reflash` method, which will keep all of the flash data for an additional request. If you only need to keep specific flash data, you may use the `keep` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:200 docs/master/session.md:200
#, no-wrap
msgid "    $request->session()->reflash();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:202 docs/master/session.md:202
#, no-wrap
msgid "    $request->session()->keep(['username', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:204 docs/master/session.md:204
msgid "To persist your flash data only for the current request, you may use the `now` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:206 docs/master/session.md:206
#, no-wrap
msgid "    $request->session()->now('status', 'Task was successful!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:208 docs/master/session.md:208
#, no-wrap
msgid "<a name=\"deleting-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/session.md:208 docs/master/session.md:208
#, no-wrap
msgid "Deleting Data"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:211 docs/master/session.md:211
msgid "The `forget` method will remove a piece of data from the session. If you would like to remove all data from the session, you may use the `flush` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:214 docs/master/session.md:214
#, no-wrap
msgid "    // Forget a single key...\n"
"    $request->session()->forget('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:217 docs/master/session.md:217
#, no-wrap
msgid "    // Forget multiple keys...\n"
"    $request->session()->forget(['name', 'status']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:219 docs/master/session.md:219
#, no-wrap
msgid "    $request->session()->flush();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:221 docs/master/session.md:221
#, no-wrap
msgid "<a name=\"regenerating-the-session-id\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/session.md:221 docs/master/session.md:221
#, no-wrap
msgid "Regenerating The Session ID"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:224 docs/master/session.md:224
msgid "Regenerating the session ID is often done in order to prevent malicious users from exploiting a [session fixation](https://owasp.org/www-community/attacks/Session_fixation) attack on your application."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:226 docs/master/session.md:226
msgid "Laravel automatically regenerates the session ID during authentication if you are using one of the Laravel [application starter kits](/docs/{{version}}/starter-kits) or [Laravel Fortify](/docs/{{version}}/fortify); however, if you need to manually regenerate the session ID, you may use the `regenerate` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:228 docs/master/session.md:228
#, no-wrap
msgid "    $request->session()->regenerate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:230 docs/master/session.md:230
msgid "If you need to regenerate the session ID and remove all data from the session in a single statement, you may use the `invalidate` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:232 docs/master/session.md:232
#, no-wrap
msgid "    $request->session()->invalidate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:234 docs/master/session.md:234
#, no-wrap
msgid "<a name=\"session-blocking\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/session.md:234 docs/master/session.md:234
#, no-wrap
msgid "Session Blocking"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:237 docs/master/session.md:237
#, no-wrap
msgid "> {note} To utilize session blocking, your application must be using a cache driver that supports [atomic locks](/docs/{{version}}/cache#atomic-locks). Currently, those cache drivers include the `memcached`, `dynamodb`, `redis`, and `database` drivers. In addition, you may not use the `cookie` session driver.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:239 docs/master/session.md:239
msgid "By default, Laravel allows requests using the same session to execute concurrently. So, for example, if you use a JavaScript HTTP library to make two HTTP requests to your application, they will both execute at the same time. For many applications, this is not a problem; however, session data loss can occur in a small subset of applications that make concurrent requests to two different application endpoints which both write data to the session."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:241 docs/master/session.md:241
msgid "To mitigate this, Laravel provides functionality that allows you to limit concurrent requests for a given session. To get started, you may simply chain the `block` method onto your route definition. In this example, an incoming request to the `/profile` endpoint would acquire a session lock. While this lock is being held, any incoming requests to the `/profile` or `/order` endpoints which share the same session ID will wait for the first request to finish executing before continuing their execution:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:245 docs/master/session.md:245
#, no-wrap
msgid "    Route::post('/profile', function () {\n"
"        //\n"
"    })->block($lockSeconds = 10, $waitSeconds = 10)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:249 docs/master/session.md:249
#, no-wrap
msgid "    Route::post('/order', function () {\n"
"        //\n"
"    })->block($lockSeconds = 10, $waitSeconds = 10)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:251 docs/master/session.md:251
msgid "The `block` method accepts two optional arguments. The first argument accepted by the `block` method is the maximum number of seconds the session lock should be held for before it is released. Of course, if the request finishes executing before this time the lock will be released earlier."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:253 docs/master/session.md:253
msgid "The second argument accepted by the `block` method is the number of seconds a request should wait while attempting to obtain a session lock. An `Illuminate\\Contracts\\Cache\\LockTimeoutException` will be thrown if the request is unable to obtain a session lock within the given number of seconds."
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:255 docs/master/session.md:255
msgid "If neither of these arguments is passed, the lock will be obtained for a maximum of 10 seconds and requests will wait a maximum of 10 seconds while attempting to obtain a lock:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:259 docs/master/session.md:259
#, no-wrap
msgid "    Route::post('/profile', function () {\n"
"        //\n"
"    })->block()\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:261 docs/master/session.md:261
#, no-wrap
msgid "<a name=\"adding-custom-session-drivers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/session.md:261 docs/master/session.md:261
#, no-wrap
msgid "Adding Custom Session Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:264 docs/master/session.md:264
#, no-wrap
msgid "<a name=\"implementing-the-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/session.md:264 docs/master/session.md:264
#, no-wrap
msgid "Implementing The Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:267 docs/master/session.md:267
msgid "If none of the existing session drivers fit your application's needs, Laravel makes it possible to write your own session handler. Your custom session driver should implement PHP's built-in `SessionHandlerInterface`. This interface contains just a few simple methods. A stubbed MongoDB implementation looks like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:281 docs/master/session.md:281
#, no-wrap
msgid "    class MongoSessionHandler implements \\SessionHandlerInterface\n"
"    {\n"
"        public function open($savePath, $sessionName) {}\n"
"        public function close() {}\n"
"        public function read($sessionId) {}\n"
"        public function write($sessionId, $data) {}\n"
"        public function destroy($sessionId) {}\n"
"        public function gc($lifetime) {}\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:283 docs/master/session.md:283
#, no-wrap
msgid "> {tip} Laravel does not ship with a directory to contain your extensions. You are free to place them anywhere you like. In this example, we have created an `Extensions` directory to house the `MongoSessionHandler`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:285 docs/master/session.md:285
msgid "Since the purpose of these methods is not readily understandable, let's quickly cover what each of the methods do:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:294 docs/master/session.md:294
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- The `open` method would typically be used in file based session store systems. Since Laravel ships with a `file` session driver, you will rarely need to put anything in this method. You can simply leave this method empty.\n"
"- The `close` method, like the `open` method, can also usually be disregarded. For most drivers, it is not needed.\n"
"- The `read` method should return the string version of the session data associated with the given `$sessionId`. There is no need to do any serialization or other encoding when retrieving or storing session data in your driver, as Laravel will perform the serialization for you.\n"
"- The `write` method should write the given `$data` string associated with the `$sessionId` to some persistent storage system, such as MongoDB or another storage system of your choice.  Again, you should not perform any serialization - Laravel will have already handled that for you.\n"
"- The `destroy` method should remove the data associated with the `$sessionId` from persistent storage.\n"
"- The `gc` method should destroy all session data that is older than the given `$lifetime`, which is a UNIX timestamp. For self-expiring systems like Memcached and Redis, this method may be left empty.\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:299 docs/master/session.md:299
msgid "Once your driver has been implemented, you are ready to register it with Laravel. To add additional drivers to Laravel's session backend, you may use the `extend` method provided by the `Session` [facade](/docs/{{version}}/facades). You should call the `extend` method from the `boot` method of a [service provider](/docs/{{version}}/providers). You may do this from the existing `App\\Providers\\AppServiceProvider` or create an entirely new provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:307 docs/master/session.md:307
#, no-wrap
msgid "    use App\\Extensions\\MongoSessionHandler;\n"
"    use Illuminate\\Support\\Facades\\Session;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:319 docs/master/session.md:319
#, no-wrap
msgid "    class SessionServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:333 docs/master/session.md:333
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Session::extend('mongo', function ($app) {\n"
"                // Return an implementation of SessionHandlerInterface...\n"
"                return new MongoSessionHandler;\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/session.md:334 docs/master/session.md:334
msgid "Once the session driver has been registered, you may use the `mongo` driver in your `config/session.php` configuration file."
msgstr ""

#. type: Title #
#: docs/8.x/socialite.md:1 docs/master/socialite.md:1
#, no-wrap
msgid "Laravel Socialite"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/socialite.md:12 docs/master/socialite.md:12
msgid "[Upgrading Socialite](#upgrading-socialite)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/socialite.md:12 docs/master/socialite.md:12
msgid "[Optional Parameters](#optional-parameters)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/socialite.md:12 docs/master/socialite.md:12
msgid "[Access Scopes](#access-scopes)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/socialite.md:12 docs/master/socialite.md:12
msgid "[Retrieving User Details](#retrieving-user-details)"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:17 docs/master/socialite.md:17
msgid "In addition to typical, form based authentication, Laravel also provides a simple, convenient way to authenticate with OAuth providers using [Laravel Socialite](https://github.com/laravel/socialite). Socialite currently supports authentication with Facebook, Twitter, LinkedIn, Google, GitHub, GitLab, and Bitbucket."
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:19 docs/master/socialite.md:19
#, no-wrap
msgid "> {tip} Adapters for other platforms are listed at the community driven [Socialite Providers](https://socialiteproviders.com/) website.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:24 docs/master/socialite.md:24
msgid "To get started with Socialite, use the Composer package manager to add the package to your project's dependencies:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:26 docs/master/socialite.md:26
#, no-wrap
msgid "    composer require laravel/socialite\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:28 docs/master/socialite.md:28
#, no-wrap
msgid "<a name=\"upgrading-socialite\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/socialite.md:28 docs/master/socialite.md:28
#, no-wrap
msgid "Upgrading Socialite"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:31 docs/master/socialite.md:31
msgid "When upgrading to a new major version of Socialite, it's important that you carefully review [the upgrade guide](https://github.com/laravel/socialite/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:36 docs/master/socialite.md:36
msgid "Before using Socialite, you will need to add credentials for the OAuth providers your application utilizes. These credentials should be placed in your application's `config/services.php` configuration file, and should use the key `facebook`, `twitter`, `linkedin`, `google`, `github`, `gitlab`, or `bitbucket`, depending on the providers your application requires:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:42 docs/master/socialite.md:42
#, no-wrap
msgid "    'github' => [\n"
"        'client_id' => env('GITHUB_CLIENT_ID'),\n"
"        'client_secret' => env('GITHUB_CLIENT_SECRET'),\n"
"        'redirect' => 'http://example.com/callback-url',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:44 docs/master/socialite.md:44
#, no-wrap
msgid "> {tip} If the `redirect` option contains a relative path, it will automatically be resolved to a fully qualified URL.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:52 docs/master/socialite.md:52
msgid "To authenticate users using an OAuth provider, you will need two routes: one for redirecting the user to the OAuth provider, and another for receiving the callback from the provider after authentication. The example controller below demonstrates the implementation of both routes:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:54 docs/8.x/socialite.md:73 docs/8.x/socialite.md:86
#: docs/8.x/socialite.md:128 docs/8.x/socialite.md:137
#: docs/8.x/socialite.md:146 docs/master/socialite.md:54
#: docs/master/socialite.md:73 docs/master/socialite.md:86
#: docs/master/socialite.md:128 docs/master/socialite.md:137
#: docs/master/socialite.md:146
#, no-wrap
msgid "    use Laravel\\Socialite\\Facades\\Socialite;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:58 docs/master/socialite.md:58
#, no-wrap
msgid "    Route::get('/auth/redirect', function () {\n"
"        return Socialite::driver('github')->redirect();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:61 docs/8.x/socialite.md:104
#: docs/master/socialite.md:61 docs/master/socialite.md:104
#, no-wrap
msgid "    Route::get('/auth/callback', function () {\n"
"        $user = Socialite::driver('github')->user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:64 docs/master/socialite.md:64
#, no-wrap
msgid "        // $user->token\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:66 docs/master/socialite.md:66
msgid "The `redirect` method provided by the `Socialite` facade takes care of redirecting the user to the OAuth provider, while the `user` method will read the incoming request and retrieve the user's information from the provider after they are authenticated."
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:68 docs/master/socialite.md:68
#, no-wrap
msgid "<a name=\"optional-parameters\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:71 docs/master/socialite.md:71
msgid "A number of OAuth providers support optional parameters in the redirect request. To include any optional parameters in the request, call the `with` method with an associative array:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:77 docs/master/socialite.md:77
#, no-wrap
msgid "    return Socialite::driver('google')\n"
"        ->with(['hd' => 'example.com'])\n"
"        ->redirect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:79 docs/master/socialite.md:79
#, no-wrap
msgid "> {note} When using the `with` method, be careful not to pass any reserved keywords such as `state` or `response_type`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:81 docs/master/socialite.md:81
#, no-wrap
msgid "<a name=\"access-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/socialite.md:81 docs/master/socialite.md:81
#, no-wrap
msgid "Access Scopes"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:84 docs/master/socialite.md:84
msgid "Before redirecting the user, you may also add additional \"scopes\" to the authentication request using the `scopes` method. This method will merge all existing scopes with the scopes that you supply:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:90 docs/master/socialite.md:90
#, no-wrap
msgid "    return Socialite::driver('github')\n"
"        ->scopes(['read:user', 'public_repo'])\n"
"        ->redirect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:92 docs/master/socialite.md:92
msgid "You can overwrite all existing scopes on the authentication request using the `setScopes` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:96 docs/master/socialite.md:96
#, no-wrap
msgid "    return Socialite::driver('github')\n"
"        ->setScopes(['read:user', 'public_repo'])\n"
"        ->redirect();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:98 docs/master/socialite.md:98
#, no-wrap
msgid "<a name=\"retrieving-user-details\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/socialite.md:98 docs/master/socialite.md:98
#, no-wrap
msgid "Retrieving User Details"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:101 docs/master/socialite.md:101
msgid "After the user is redirected back to your authentication callback route, you may retrieve the user's details using Socialite's `user` method. The user object returned by the `user` method provides a variety of properties and methods you may use to store information about the user in your own database. Different properties and methods may be available depending on whether the OAuth provider you are authenticating with supports OAuth 1.0 or OAuth 2.0:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:109 docs/master/socialite.md:109
#, no-wrap
msgid "        // OAuth 2.0 providers...\n"
"        $token = $user->token;\n"
"        $refreshToken = $user->refreshToken;\n"
"        $expiresIn = $user->expiresIn;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:113 docs/master/socialite.md:113
#, no-wrap
msgid "        // OAuth 1.0 providers...\n"
"        $token = $user->token;\n"
"        $tokenSecret = $user->tokenSecret;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:121 docs/master/socialite.md:121
#, no-wrap
msgid "        // All providers...\n"
"        $user->getId();\n"
"        $user->getNickname();\n"
"        $user->getName();\n"
"        $user->getEmail();\n"
"        $user->getAvatar();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:123 docs/master/socialite.md:123
#, no-wrap
msgid "<a name=\"retrieving-user-details-from-a-token-oauth2\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/socialite.md:123 docs/master/socialite.md:123
#, no-wrap
msgid "Retrieving User Details From A Token (OAuth2)"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:126 docs/master/socialite.md:126
msgid "If you already have a valid access token for a user, you can retrieve their details using Socialite's `userFromToken` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:130 docs/master/socialite.md:130
#, no-wrap
msgid "    $user = Socialite::driver('github')->userFromToken($token);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:132 docs/master/socialite.md:132
#, no-wrap
msgid "<a name=\"retrieving-user-details-from-a-token-and-secret-oauth1\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/socialite.md:132 docs/master/socialite.md:132
#, no-wrap
msgid "Retrieving User Details From A Token And Secret (OAuth1)"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:135 docs/master/socialite.md:135
msgid "If you already have a valid token and secret for a user, you can retrieve their details using Socialite's `userFromTokenAndSecret` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:139 docs/master/socialite.md:139
#, no-wrap
msgid "    $user = Socialite::driver('twitter')->userFromTokenAndSecret($token, $secret);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:141 docs/master/socialite.md:141
#, no-wrap
msgid "<a name=\"stateless-authentication\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/socialite.md:141 docs/master/socialite.md:141
#, no-wrap
msgid "Stateless Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:144 docs/master/socialite.md:144
msgid "The `stateless` method may be used to disable session state verification. This is useful when adding social authentication to an API:"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:148 docs/master/socialite.md:148
#, no-wrap
msgid "    return Socialite::driver('google')->stateless()->user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/socialite.md:149 docs/master/socialite.md:149
#, no-wrap
msgid "> {note} Stateless authentication is not available for the Twitter driver, which uses OAuth 1.0 for authentication.\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/starter-kits.md:7 docs/master/starter-kits.md:7
msgid "[Laravel Breeze](#laravel-breeze)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/starter-kits.md:7 docs/master/starter-kits.md:7
msgid "[Installation](#laravel-breeze-installation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/starter-kits.md:7 docs/master/starter-kits.md:7
msgid "[Laravel Jetstream](#laravel-jetstream)"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:12 docs/master/starter-kits.md:12
msgid "To give you a head start building your new Laravel application, we are happy to offer authentication and application starter kits. These kits automatically scaffold your application with the routes, controllers, and views you need to register and authenticate your application's users."
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:14 docs/master/starter-kits.md:14
msgid "While you are welcome to use these starter kits, they are not required. You are free to build your own application from the ground up by simply installing a fresh copy of Laravel. Either way, we know you will build something great!"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:16 docs/master/starter-kits.md:16
#, no-wrap
msgid "<a name=\"laravel-breeze\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/starter-kits.md:16 docs/master/starter-kits.md:16
#, no-wrap
msgid "Laravel Breeze"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:19
msgid "Laravel Breeze is a minimal, simple implementation of all of Laravel's [authentication features](/docs/{{version}}/authentication), including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's default view layer is made up of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com). Breeze provides a wonderful starting point for beginning a fresh Laravel application."
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:21 docs/master/starter-kits.md:21
#, no-wrap
msgid "<a name=\"laravel-breeze-installation\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:24 docs/master/starter-kits.md:24
msgid "First, you should [create a new Laravel application](/docs/{{version}}/installation), configure your database, and run your [database migrations](/docs/{{version}}/migrations):"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/starter-kits.md:25 docs/master/starter-kits.md:25
#, no-wrap
msgid "curl -s https://laravel.build/example-app | bash\n\n"
"cd example-app\n\n"
"php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:34 docs/master/starter-kits.md:34
msgid "Once you have created a new Laravel application, you may install Laravel Breeze using Composer:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/starter-kits.md:35 docs/master/starter-kits.md:35
#, no-wrap
msgid "composer require laravel/breeze --dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:40 docs/master/starter-kits.md:40
msgid "After Composer has installed the Laravel Breeze package, you may run the `breeze:install` Artisan command. This command publishes the authentication views, routes, controllers, and other resources to your application. Laravel Breeze publishes all of its code to your application so that you have full control and visibility over its features and implementation. After Breeze is installed, you should also compile your assets so that your application's CSS file is available:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/starter-kits.md:41
#, no-wrap
msgid "php artisan breeze:install\n\n"
"npm install\n\n"
"npm run dev\n\n"
"php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:52 docs/master/starter-kits.md:50
msgid "Next, you may navigate to your application's `/login` or `/register` URLs in your web browser. All of Breeze's routes are defined within the `routes/auth.php` file."
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:54 docs/master/starter-kits.md:52
#, no-wrap
msgid "> {tip} To learn more about compiling your application's CSS and JavaScript, check out the [Laravel Mix documentation](/docs/{{version}}/mix#running-mix).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:56
#, no-wrap
msgid "<a name=\"breeze-and-inertia\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/starter-kits.md:56
#, no-wrap
msgid "Breeze & Inertia"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:59
msgid "Laravel Breeze also offers an [Inertia.js](https://inertiajs.com) frontend implementation powered by Vue. To use the Inertia stack, pass the `--inertia` option when executing the `breeze:install` Artisan command:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/starter-kits.md:60
#, no-wrap
msgid "php artisan breeze:install --inertia\n\n"
"npm install\n\n"
"npm run dev\n\n"
"php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:74 docs/master/starter-kits.md:57
msgid "While Laravel Breeze provides a simple and minimal starting point for building a Laravel application, Jetstream augments that functionality with more robust features and additional frontend technology stacks. **For those brand new to Laravel, we recommend learning the ropes with Laravel Breeze before graduating to Laravel Jetstream.**"
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:76 docs/master/starter-kits.md:59
msgid "Jetstream provides a beautifully designed application scaffolding for Laravel and includes login, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management. Jetstream is designed using [Tailwind CSS](https://tailwindcss.com) and offers your choice of [Livewire](https://laravel-livewire.com) or [Inertia.js](https://inertiajs.com) driven frontend scaffolding."
msgstr ""

#. type: Plain text
#: docs/8.x/starter-kits.md:77 docs/master/starter-kits.md:60
msgid "Complete documentation for installing Laravel Jetstream can be found within the [official Jetstream documentation](https://jetstream.laravel.com/2.x/introduction.html)."
msgstr ""

#. type: Title #
#: docs/8.x/structure.md:1 docs/master/structure.md:1
#, no-wrap
msgid "Directory Structure"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The Root Directory](#the-root-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `app` Directory](#the-root-app-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `bootstrap` Directory](#the-bootstrap-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `config` Directory](#the-config-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `database` Directory](#the-database-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `public` Directory](#the-public-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `resources` Directory](#the-resources-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `routes` Directory](#the-routes-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `storage` Directory](#the-storage-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `tests` Directory](#the-tests-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `vendor` Directory](#the-vendor-directory)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The App Directory](#the-app-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Broadcasting` Directory](#the-broadcasting-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Console` Directory](#the-console-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Events` Directory](#the-events-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Exceptions` Directory](#the-exceptions-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Http` Directory](#the-http-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Jobs` Directory](#the-jobs-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Listeners` Directory](#the-listeners-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Mail` Directory](#the-mail-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Models` Directory](#the-models-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Notifications` Directory](#the-notifications-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Policies` Directory](#the-policies-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Providers` Directory](#the-providers-directory)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/structure.md:29 docs/master/structure.md:29
msgid "[The `Rules` Directory](#the-rules-directory)"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:34 docs/master/structure.md:34
msgid "The default Laravel application structure is intended to provide a great starting point for both large and small applications. But you are free to organize your application however you like. Laravel imposes almost no restrictions on where any given class is located - as long as Composer can autoload the class."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:36 docs/master/structure.md:36
#, no-wrap
msgid "<a name=\"the-root-directory\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/structure.md:36 docs/master/structure.md:36
#, no-wrap
msgid "The Root Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:39 docs/master/structure.md:39
#, no-wrap
msgid "<a name=\"the-root-app-directory\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/structure.md:39 docs/8.x/structure.md:99
#: docs/master/structure.md:39 docs/master/structure.md:99
#, no-wrap
msgid "The App Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:42 docs/master/structure.md:42
msgid "The `app` directory contains the core code of your application. We'll explore this directory in more detail soon; however, almost all of the classes in your application will be in this directory."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:44 docs/master/structure.md:44
#, no-wrap
msgid "<a name=\"the-bootstrap-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:44 docs/master/structure.md:44
#, no-wrap
msgid "The Bootstrap Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:47 docs/master/structure.md:47
msgid "The `bootstrap` directory contains the `app.php` file which bootstraps the framework. This directory also houses a `cache` directory which contains framework generated files for performance optimization such as the route and services cache files. You should not typically need to modify any files within this directory."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:49 docs/master/structure.md:49
#, no-wrap
msgid "<a name=\"the-config-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:49 docs/master/structure.md:49
#, no-wrap
msgid "The Config Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:52 docs/master/structure.md:52
msgid "The `config` directory, as the name implies, contains all of your application's configuration files. It's a great idea to read through all of these files and familiarize yourself with all of the options available to you."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:54 docs/master/structure.md:54
#, no-wrap
msgid "<a name=\"the-database-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:54 docs/master/structure.md:54
#, no-wrap
msgid "The Database Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:57 docs/master/structure.md:57
msgid "The `database` directory contains your database migrations, model factories, and seeds. If you wish, you may also use this directory to hold an SQLite database."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:59 docs/master/structure.md:59
#, no-wrap
msgid "<a name=\"the-public-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:59 docs/master/structure.md:59
#, no-wrap
msgid "The Public Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:62 docs/master/structure.md:62
msgid "The `public` directory contains the `index.php` file, which is the entry point for all requests entering your application and configures autoloading. This directory also houses your assets such as images, JavaScript, and CSS."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:64 docs/master/structure.md:64
#, no-wrap
msgid "<a name=\"the-resources-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:64 docs/master/structure.md:64
#, no-wrap
msgid "The Resources Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:67 docs/master/structure.md:67
msgid "The `resources` directory contains your [views](/docs/{{version}}/views) as well as your raw, un-compiled assets such as CSS or JavaScript. This directory also houses all of your language files."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:69 docs/master/structure.md:69
#, no-wrap
msgid "<a name=\"the-routes-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:69 docs/master/structure.md:69
#, no-wrap
msgid "The Routes Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:72 docs/master/structure.md:72
msgid "The `routes` directory contains all of the route definitions for your application. By default, several route files are included with Laravel: `web.php`, `api.php`, `console.php`, and `channels.php`."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:74 docs/master/structure.md:74
msgid "The `web.php` file contains routes that the `RouteServiceProvider` places in the `web` middleware group, which provides session state, CSRF protection, and cookie encryption. If your application does not offer a stateless, RESTful API then it is likely that all of your routes will most likely be defined in the `web.php` file."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:76 docs/master/structure.md:76
msgid "The `api.php` file contains routes that the `RouteServiceProvider` places in the `api` middleware group. These routes are intended to be stateless, so requests entering the application through these routes are intended to be authenticated [via tokens](/docs/{{version}}/sanctum) and will not have access to session state."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:78 docs/master/structure.md:78
msgid "The `console.php` file is where you may define all of your closure based console commands. Each closure is bound to a command instance allowing a simple approach to interacting with each command's IO methods. Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:80 docs/master/structure.md:80
msgid "The `channels.php` file is where you may register all of the [event broadcasting](/docs/{{version}}/broadcasting) channels that your application supports."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:82 docs/master/structure.md:82
#, no-wrap
msgid "<a name=\"the-storage-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:82 docs/master/structure.md:82
#, no-wrap
msgid "The Storage Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:85 docs/master/structure.md:85
msgid "The `storage` directory contains your logs, compiled Blade templates, file based sessions, file caches, and other files generated by the framework. This directory is segregated into `app`, `framework`, and `logs` directories. The `app` directory may be used to store any files generated by your application. The `framework` directory is used to store framework generated files and caches. Finally, the `logs` directory contains your application's log files."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:87 docs/master/structure.md:87
msgid "The `storage/app/public` directory may be used to store user-generated files, such as profile avatars, that should be publicly accessible. You should create a symbolic link at `public/storage` which points to this directory. You may create the link using the `php artisan storage:link` Artisan command."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:89 docs/master/structure.md:89
#, no-wrap
msgid "<a name=\"the-tests-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:89 docs/master/structure.md:89
#, no-wrap
msgid "The Tests Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:92 docs/master/structure.md:92
msgid "The `tests` directory contains your automated tests. Example [PHPUnit](https://phpunit.de/) unit tests and feature tests are provided out of the box. Each test class should be suffixed with the word `Test`. You may run your tests using the `phpunit` or `php vendor/bin/phpunit` commands. Or, if you would like a more detailed and beautiful representation of your test results, you may run your tests using the `php artisan test` Artisan command."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:94 docs/master/structure.md:94
#, no-wrap
msgid "<a name=\"the-vendor-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:94 docs/master/structure.md:94
#, no-wrap
msgid "The Vendor Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:97 docs/master/structure.md:97
msgid "The `vendor` directory contains your [Composer](https://getcomposer.org) dependencies."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:99 docs/master/structure.md:99
#, no-wrap
msgid "<a name=\"the-app-directory\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:102 docs/master/structure.md:102
msgid "The majority of your application is housed in the `app` directory. By default, this directory is namespaced under `App` and is autoloaded by Composer using the [PSR-4 autoloading standard](https://www.php-fig.org/psr/psr-4/)."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:104 docs/master/structure.md:104
msgid "The `app` directory contains a variety of additional directories such as `Console`, `Http`, and `Providers`. Think of the `Console` and `Http` directories as providing an API into the core of your application. The HTTP protocol and CLI are both mechanisms to interact with your application, but do not actually contain application logic. In other words, they are two ways of issuing commands to your application. The `Console` directory contains all of your Artisan commands, while the `Http` directory contains your controllers, middleware, and requests."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:106 docs/master/structure.md:106
msgid "A variety of other directories will be generated inside the `app` directory as you use the `make` Artisan commands to generate classes. So, for example, the `app/Jobs` directory will not exist until you execute the `make:job` Artisan command to generate a job class."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:108 docs/master/structure.md:108
#, no-wrap
msgid "> {tip} Many of the classes in the `app` directory can be generated by Artisan via commands. To review the available commands, run the `php artisan list make` command in your terminal.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:110 docs/master/structure.md:110
#, no-wrap
msgid "<a name=\"the-broadcasting-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:110 docs/master/structure.md:110
#, no-wrap
msgid "The Broadcasting Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:113 docs/master/structure.md:113
msgid "The `Broadcasting` directory contains all of the broadcast channel classes for your application. These classes are generated using the `make:channel` command. This directory does not exist by default, but will be created for you when you create your first channel. To learn more about channels, check out the documentation on [event broadcasting](/docs/{{version}}/broadcasting)."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:115 docs/master/structure.md:115
#, no-wrap
msgid "<a name=\"the-console-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:115 docs/master/structure.md:115
#, no-wrap
msgid "The Console Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:118 docs/master/structure.md:118
msgid "The `Console` directory contains all of the custom Artisan commands for your application. These commands may be generated using the `make:command` command. This directory also houses your console kernel, which is where your custom Artisan commands are registered and your [scheduled tasks](/docs/{{version}}/scheduling) are defined."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:120 docs/master/structure.md:120
#, no-wrap
msgid "<a name=\"the-events-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:120 docs/master/structure.md:120
#, no-wrap
msgid "The Events Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:123 docs/master/structure.md:123
msgid "This directory does not exist by default, but will be created for you by the `event:generate` and `make:event` Artisan commands. The `Events` directory houses [event classes](/docs/{{version}}/events). Events may be used to alert other parts of your application that a given action has occurred, providing a great deal of flexibility and decoupling."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:125 docs/master/structure.md:125
#, no-wrap
msgid "<a name=\"the-exceptions-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:125 docs/master/structure.md:125
#, no-wrap
msgid "The Exceptions Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:128 docs/master/structure.md:128
msgid "The `Exceptions` directory contains your application's exception handler and is also a good place to place any exceptions thrown by your application. If you would like to customize how your exceptions are logged or rendered, you should modify the `Handler` class in this directory."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:130 docs/master/structure.md:130
#, no-wrap
msgid "<a name=\"the-http-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:130 docs/master/structure.md:130
#, no-wrap
msgid "The Http Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:133 docs/master/structure.md:133
msgid "The `Http` directory contains your controllers, middleware, and form requests. Almost all of the logic to handle requests entering your application will be placed in this directory."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:135 docs/master/structure.md:135
#, no-wrap
msgid "<a name=\"the-jobs-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:135 docs/master/structure.md:135
#, no-wrap
msgid "The Jobs Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:138 docs/master/structure.md:138
msgid "This directory does not exist by default, but will be created for you if you execute the `make:job` Artisan command. The `Jobs` directory houses the [queueable jobs](/docs/{{version}}/queues) for your application. Jobs may be queued by your application or run synchronously within the current request lifecycle. Jobs that run synchronously during the current request are sometimes referred to as \"commands\" since they are an implementation of the [command pattern](https://en.wikipedia.org/wiki/Command_pattern)."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:140 docs/master/structure.md:140
#, no-wrap
msgid "<a name=\"the-listeners-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:140 docs/master/structure.md:140
#, no-wrap
msgid "The Listeners Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:143 docs/master/structure.md:143
msgid "This directory does not exist by default, but will be created for you if you execute the `event:generate` or `make:listener` Artisan commands. The `Listeners` directory contains the classes that handle your [events](/docs/{{version}}/events). Event listeners receive an event instance and perform logic in response to the event being fired. For example, a `UserRegistered` event might be handled by a `SendWelcomeEmail` listener."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:145 docs/master/structure.md:145
#, no-wrap
msgid "<a name=\"the-mail-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:145 docs/master/structure.md:145
#, no-wrap
msgid "The Mail Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:148 docs/master/structure.md:148
msgid "This directory does not exist by default, but will be created for you if you execute the `make:mail` Artisan command. The `Mail` directory contains all of your [classes that represent emails](/docs/{{version}}/mail) sent by your application. Mail objects allow you to encapsulate all of the logic of building an email in a single, simple class that may be sent using the `Mail::send` method."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:150 docs/master/structure.md:150
#, no-wrap
msgid "<a name=\"the-models-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:150 docs/master/structure.md:150
#, no-wrap
msgid "The Models Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:153 docs/master/structure.md:153
msgid "The `Models` directory contains all of your [Eloquent model classes](/docs/{{version}}/eloquent). The Eloquent ORM included with Laravel provides a beautiful, simple ActiveRecord implementation for working with your database. Each database table has a corresponding \"Model\" which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:155 docs/master/structure.md:155
#, no-wrap
msgid "<a name=\"the-notifications-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:155 docs/master/structure.md:155
#, no-wrap
msgid "The Notifications Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:158
msgid "This directory does not exist by default, but will be created for you if you execute the `make:notification` Artisan command. The `Notifications` directory contains all of the \"transactional\" [notifications](/docs/{{version}}/notifications) that are sent by your application, such as simple notifications about events that happen within your application. Laravel's notification feature abstracts sending notifications over a variety of drivers such as email, Slack, SMS, or stored in a database."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:160 docs/master/structure.md:160
#, no-wrap
msgid "<a name=\"the-policies-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:160 docs/master/structure.md:160
#, no-wrap
msgid "The Policies Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:163 docs/master/structure.md:163
msgid "This directory does not exist by default, but will be created for you if you execute the `make:policy` Artisan command. The `Policies` directory contains the [authorization policy classes](/docs/{{version}}/authorization) for your application. Policies are used to determine if a user can perform a given action against a resource."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:165 docs/master/structure.md:165
#, no-wrap
msgid "<a name=\"the-providers-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:165 docs/master/structure.md:165
#, no-wrap
msgid "The Providers Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:168 docs/master/structure.md:168
msgid "The `Providers` directory contains all of the [service providers](/docs/{{version}}/providers) for your application. Service providers bootstrap your application by binding services in the service container, registering events, or performing any other tasks to prepare your application for incoming requests."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:170 docs/master/structure.md:170
msgid "In a fresh Laravel application, this directory will already contain several providers. You are free to add your own providers to this directory as needed."
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:172 docs/master/structure.md:172
#, no-wrap
msgid "<a name=\"the-rules-directory\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/structure.md:172 docs/master/structure.md:172
#, no-wrap
msgid "The Rules Directory"
msgstr ""

#. type: Plain text
#: docs/8.x/structure.md:174 docs/master/structure.md:174
msgid "This directory does not exist by default, but will be created for you if you execute the `make:rule` Artisan command. The `Rules` directory contains the custom validation rule objects for your application. Rules are used to encapsulate complicated validation logic in a simple object. For more information, check out the [validation documentation](/docs/{{version}}/validation)."
msgstr ""

#. type: Title #
#: docs/8.x/telescope.md:1 docs/master/telescope.md:1
#, no-wrap
msgid "Laravel Telescope"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Local Only Installation](#local-only-installation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Data Pruning](#data-pruning)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Upgrading Telescope](#upgrading-telescope)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Filtering](#filtering)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Entries](#filtering-entries)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Batches](#filtering-batches)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Available Watchers](#available-watchers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Batch Watcher](#batch-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Cache Watcher](#cache-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Command Watcher](#command-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Dump Watcher](#dump-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Event Watcher](#event-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Exception Watcher](#exception-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Gate Watcher](#gate-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Job Watcher](#job-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Log Watcher](#log-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Mail Watcher](#mail-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Model Watcher](#model-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Notification Watcher](#notification-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Query Watcher](#query-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Redis Watcher](#redis-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Request Watcher](#request-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Schedule Watcher](#schedule-watcher)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[View Watcher](#view-watcher)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/telescope.md:33 docs/master/telescope.md:33
msgid "[Displaying User Avatars](#displaying-user-avatars)"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:38 docs/master/telescope.md:38
msgid "Telescope makes a wonderful companion to your local Laravel development environment. Telescope provides insight into the requests coming into your application, exceptions, log entries, database queries, queued jobs, mail, notifications, cache operations, scheduled tasks, variable dumps, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:40 docs/master/telescope.md:40
#, no-wrap
msgid "<img src=\"https://laravel.com/img/docs/telescope-example.png\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:45 docs/master/telescope.md:45
msgid "You may use the Composer package manager to install Telescope into your Laravel project:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:47 docs/master/telescope.md:47
#, no-wrap
msgid "    composer require laravel/telescope\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:49 docs/master/telescope.md:49
msgid "After installing Telescope, publish its assets using the `telescope:install` Artisan command. After installing Telescope, you should also run the `migrate` command in order to create the tables needed to store Telescope's data:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:51 docs/8.x/telescope.md:67
#: docs/master/telescope.md:51 docs/master/telescope.md:67
#, no-wrap
msgid "    php artisan telescope:install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:58 docs/master/telescope.md:58
msgid "If you are not going to use Telescope's default migrations, you should call the `Telescope::ignoreMigrations` method in the `register` method of your application's `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the following command: `php artisan vendor:publish --tag=telescope-migrations`"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:60 docs/master/telescope.md:60
#, no-wrap
msgid "<a name=\"local-only-installation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:60 docs/master/telescope.md:60
#, no-wrap
msgid "Local Only Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:63 docs/master/telescope.md:63
msgid "If you plan to only use Telescope to assist your local development, you may install Telescope using the `--dev` flag:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:65 docs/master/telescope.md:65
#, no-wrap
msgid "    composer require laravel/telescope --dev\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:71 docs/master/telescope.md:71
msgid "After running `telescope:install`, you should remove the `TelescopeServiceProvider` service provider registration from your application's `config/app.php` configuration file. Instead, manually register Telescope's service providers in the `register` method of your `App\\Providers\\AppServiceProvider` class. We will ensure the current environment is `local` before registering the providers:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:84 docs/master/telescope.md:84
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        if ($this->app->environment('local')) {\n"
"            $this->app->register(\\Laravel\\Telescope\\TelescopeServiceProvider::class);\n"
"            $this->app->register(TelescopeServiceProvider::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:86 docs/master/telescope.md:86
msgid "Finally, you should also prevent the Telescope package from being [auto-discovered](/docs/{{version}}/packages#package-discovery) by adding the following to your `composer.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:94 docs/master/telescope.md:94
#, no-wrap
msgid "    \"extra\": {\n"
"        \"laravel\": {\n"
"            \"dont-discover\": [\n"
"                \"laravel/telescope\"\n"
"            ]\n"
"        }\n"
"    },\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:99 docs/master/telescope.md:99
msgid "After publishing Telescope's assets, its primary configuration file will be located at `config/telescope.php`. This configuration file allows you to configure your [watcher options](#available-watchers). Each configuration option includes a description of its purpose, so be sure to thoroughly explore this file."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:101 docs/master/telescope.md:101
msgid "If desired, you may disable Telescope's data collection entirely using the `enabled` configuration option:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:103 docs/master/telescope.md:103
#, no-wrap
msgid "    'enabled' => env('TELESCOPE_ENABLED', true),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:105 docs/master/telescope.md:105
#, no-wrap
msgid "<a name=\"data-pruning\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:105 docs/master/telescope.md:105
#, no-wrap
msgid "Data Pruning"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:108 docs/master/telescope.md:108
msgid "Without pruning, the `telescope_entries` table can accumulate records very quickly. To mitigate this, you should [schedule](/docs/{{version}}/scheduling) the `telescope:prune` Artisan command to run daily:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:110 docs/master/telescope.md:110
#, no-wrap
msgid "    $schedule->command('telescope:prune')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:112 docs/master/telescope.md:112
msgid "By default, all entries older than 24 hours will be pruned. You may use the `hours` option when calling the command to determine how long to retain Telescope data. For example, the following command will delete all records created over 48 hours ago:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:114 docs/master/telescope.md:114
#, no-wrap
msgid "    $schedule->command('telescope:prune --hours=48')->daily();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:119 docs/master/telescope.md:119
msgid "The Telescope dashboard may be accessed at the `/telescope` route. By default, you will only be able to access this dashboard in the `local` environment. Within your `app/Providers/TelescopeServiceProvider.php` file, there is an [authorization gate](/docs/{{version}}/authorization#gates) definition. This authorization gate controls access to Telescope in **non-local** environments. You are free to modify this gate as needed to restrict access to your Telescope installation:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:135 docs/master/telescope.md:135
#, no-wrap
msgid "    /**\n"
"     * Register the Telescope gate.\n"
"     *\n"
"     * This gate determines who can access Telescope in non-local environments.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function gate()\n"
"    {\n"
"        Gate::define('viewTelescope', function ($user) {\n"
"            return in_array($user->email, [\n"
"                'taylor@laravel.com',\n"
"            ]);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:137 docs/master/telescope.md:137
#, no-wrap
msgid "> {note} You should ensure you change your `APP_ENV` environment variable to `production` in your production environment. Otherwise, your Telescope installation will be publicly available.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:139 docs/master/telescope.md:139
#, no-wrap
msgid "<a name=\"upgrading-telescope\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/telescope.md:139 docs/master/telescope.md:139
#, no-wrap
msgid "Upgrading Telescope"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:142 docs/master/telescope.md:142
msgid "When upgrading to a new major version of Telescope, it's important that you carefully review [the upgrade guide](https://github.com/laravel/telescope/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:144 docs/master/telescope.md:144
msgid "In addition, when upgrading to any new Telescope version, you should re-publish Telescope's assets:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:146 docs/master/telescope.md:146
#, no-wrap
msgid "    php artisan telescope:publish\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:148 docs/master/telescope.md:148
msgid "To keep the assets up-to-date and avoid issues in future updates, you may add the `telescope:publish` command to the `post-update-cmd` scripts in your application's `composer.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:156 docs/master/telescope.md:156
#, no-wrap
msgid "    {\n"
"        \"scripts\": {\n"
"            \"post-update-cmd\": [\n"
"                \"@php artisan telescope:publish --ansi\"\n"
"            ]\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:158 docs/master/telescope.md:158
#, no-wrap
msgid "<a name=\"filtering\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/telescope.md:158 docs/master/telescope.md:158
#, no-wrap
msgid "Filtering"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:161 docs/master/telescope.md:161
#, no-wrap
msgid "<a name=\"filtering-entries\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:161 docs/master/telescope.md:161
#, no-wrap
msgid "Entries"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:164 docs/master/telescope.md:164
msgid "You may filter the data that is recorded by Telescope via the `filter` closure that is defined in your `App\\Providers\\TelescopeServiceProvider` class. By default, this closure records all data in the `local` environment and exceptions, failed jobs, scheduled tasks, and data with monitored tags in all other environments:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:167 docs/8.x/telescope.md:227
#: docs/master/telescope.md:167 docs/master/telescope.md:227
#, no-wrap
msgid "    use Laravel\\Telescope\\IncomingEntry;\n"
"    use Laravel\\Telescope\\Telescope;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:176 docs/8.x/telescope.md:205
#: docs/8.x/telescope.md:236 docs/master/telescope.md:176
#: docs/master/telescope.md:205 docs/master/telescope.md:236
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->hideSensitiveRequestDetails();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:181 docs/master/telescope.md:181
#, no-wrap
msgid "        Telescope::filter(function (IncomingEntry $entry) {\n"
"            if ($this->app->environment('local')) {\n"
"                return true;\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:188 docs/master/telescope.md:188
#, no-wrap
msgid "            return $entry->isReportableException() ||\n"
"                $entry->isFailedJob() ||\n"
"                $entry->isScheduledTask() ||\n"
"                $entry->hasMonitoredTag();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:190 docs/master/telescope.md:190
#, no-wrap
msgid "<a name=\"filtering-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:190 docs/master/telescope.md:190
#, no-wrap
msgid "Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:193 docs/master/telescope.md:193
msgid "While the `filter` closure filters data for individual entries, you may use the `filterBatch` method to register a closure that filters all data for a given request or console command. If the closure returns `true`, all of the entries are recorded by Telescope:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:196 docs/master/telescope.md:196
#, no-wrap
msgid "    use Illuminate\\Support\\Collection;\n"
"    use Laravel\\Telescope\\Telescope;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:210 docs/master/telescope.md:210
#, no-wrap
msgid "        Telescope::filterBatch(function (Collection $entries) {\n"
"            if ($this->app->environment('local')) {\n"
"                return true;\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:219 docs/master/telescope.md:219
#, no-wrap
msgid "            return $entries->contains(function ($entry) {\n"
"                return $entry->isReportableException() ||\n"
"                    $entry->isFailedJob() ||\n"
"                    $entry->isScheduledTask() ||\n"
"                    $entry->hasMonitoredTag();\n"
"                });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:224 docs/master/telescope.md:224
msgid "Telescope allows you to search entries by \"tag\". Often, tags are Eloquent model class names or authenticated user IDs which Telescope automatically adds to entries. Occasionally, you may want to attach your own custom tags to entries. To accomplish this, you may use the `Telescope::tag` method. The `tag` method accepts a closure which should return an array of tags. The tags returned by the closure will be merged with any tags Telescope would automatically attach to the entry. Typically, you should call the `tag` method within the `register` method of your `App\\Providers\\TelescopeServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:243 docs/master/telescope.md:243
#, no-wrap
msgid "        Telescope::tag(function (IncomingEntry $entry) {\n"
"            return $entry->type === 'request'\n"
"                        ? ['status:'.$entry->content['response_status']]\n"
"                        : [];\n"
"        });\n"
"     }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:245 docs/master/telescope.md:245
#, no-wrap
msgid "<a name=\"available-watchers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/telescope.md:245 docs/master/telescope.md:245
#, no-wrap
msgid "Available Watchers"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:248 docs/master/telescope.md:248
msgid "Telescope \"watchers\" gather application data when a request or console command is executed. You may customize the list of watchers that you would like to enable within your `config/telescope.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:254 docs/master/telescope.md:254
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\CacheWatcher::class => true,\n"
"        Watchers\\CommandWatcher::class => true,\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:256 docs/master/telescope.md:256
msgid "Some watchers also allow you to provide additional customization options:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:264 docs/master/telescope.md:264
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\QueryWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_QUERY_WATCHER', true),\n"
"            'slow' => 100,\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:266 docs/master/telescope.md:266
#, no-wrap
msgid "<a name=\"batch-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:266 docs/master/telescope.md:266
#, no-wrap
msgid "Batch Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:269 docs/master/telescope.md:269
msgid "The batch watcher records information about queued [batches](/docs/{{version}}/queues#job-batching), including the job and connection information."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:271 docs/master/telescope.md:271
#, no-wrap
msgid "<a name=\"cache-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:271 docs/master/telescope.md:271
#, no-wrap
msgid "Cache Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:274 docs/master/telescope.md:274
msgid "The cache watcher records data when a cache key is hit, missed, updated and forgotten."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:276 docs/master/telescope.md:276
#, no-wrap
msgid "<a name=\"command-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:276 docs/master/telescope.md:276
#, no-wrap
msgid "Command Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:279 docs/master/telescope.md:279
msgid "The command watcher records the arguments, options, exit code, and output whenever an Artisan command is executed. If you would like to exclude certain commands from being recorded by the watcher, you may specify the command in the `ignore` option within your `config/telescope.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:287 docs/master/telescope.md:287
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\CommandWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_COMMAND_WATCHER', true),\n"
"            'ignore' => ['key:generate'],\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:289 docs/master/telescope.md:289
#, no-wrap
msgid "<a name=\"dump-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:289 docs/master/telescope.md:289
#, no-wrap
msgid "Dump Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:292 docs/master/telescope.md:292
msgid "The dump watcher records and displays your variable dumps in Telescope. When using Laravel, variables may be dumped using the global `dump` function. The dump watcher tab must be open in a browser for the dump to be recorded, otherwise, the dumps will be ignored by the watcher."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:294 docs/master/telescope.md:294
#, no-wrap
msgid "<a name=\"event-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:294 docs/master/telescope.md:294
#, no-wrap
msgid "Event Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:297 docs/master/telescope.md:297
msgid "The event watcher records the payload, listeners, and broadcast data for any [events](/docs/{{version}}/events) dispatched by your application. The Laravel framework's internal events are ignored by the Event watcher."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:299 docs/master/telescope.md:299
#, no-wrap
msgid "<a name=\"exception-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:299 docs/master/telescope.md:299
#, no-wrap
msgid "Exception Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:302 docs/master/telescope.md:302
msgid "The exception watcher records the data and stack trace for any reportable exceptions that are thrown by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:304 docs/master/telescope.md:304
#, no-wrap
msgid "<a name=\"gate-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:304 docs/master/telescope.md:304
#, no-wrap
msgid "Gate Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:307 docs/master/telescope.md:307
msgid "The gate watcher records the data and result of [gate and policy](/docs/{{version}}/authorization) checks by your application. If you would like to exclude certain abilities from being recorded by the watcher, you may specify those in the `ignore_abilities` option in your `config/telescope.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:315 docs/master/telescope.md:315
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\GateWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_GATE_WATCHER', true),\n"
"            'ignore_abilities' => ['viewNova'],\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:317 docs/master/telescope.md:317
#, no-wrap
msgid "<a name=\"job-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:317 docs/master/telescope.md:317
#, no-wrap
msgid "Job Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:320 docs/master/telescope.md:320
msgid "The job watcher records the data and status of any [jobs](/docs/{{version}}/queues) dispatched by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:322 docs/master/telescope.md:322
#, no-wrap
msgid "<a name=\"log-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:322 docs/master/telescope.md:322
#, no-wrap
msgid "Log Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:325 docs/master/telescope.md:325
msgid "The log watcher records the [log data](/docs/{{version}}/logging) for any logs written by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:327 docs/master/telescope.md:327
#, no-wrap
msgid "<a name=\"mail-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:327 docs/master/telescope.md:327
#, no-wrap
msgid "Mail Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:330 docs/master/telescope.md:330
msgid "The mail watcher allows you to view an in-browser preview of [emails](/docs/{{version}}/mail) sent by your application along with their associated data. You may also download the email as an `.eml` file."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:332 docs/master/telescope.md:332
#, no-wrap
msgid "<a name=\"model-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:332 docs/master/telescope.md:332
#, no-wrap
msgid "Model Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:335 docs/master/telescope.md:335
msgid "The model watcher records model changes whenever an Eloquent [model event](/docs/{{version}}/eloquent#events) is dispatched. You may specify which model events should be recorded via the watcher's `events` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:343 docs/master/telescope.md:343
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\ModelWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_MODEL_WATCHER', true),\n"
"            'events' => ['eloquent.created*', 'eloquent.updated*'],\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:345 docs/master/telescope.md:345
msgid "If you would like to record the number of models hydrated during a given request, enable the `hydrations` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:354 docs/master/telescope.md:354
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\ModelWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_MODEL_WATCHER', true),\n"
"            'events' => ['eloquent.created*', 'eloquent.updated*'],\n"
"            'hydrations' => true,\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:356 docs/master/telescope.md:356
#, no-wrap
msgid "<a name=\"notification-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:356 docs/master/telescope.md:356
#, no-wrap
msgid "Notification Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:359 docs/master/telescope.md:359
msgid "The notification watcher records all [notifications](/docs/{{version}}/notifications) sent by your application. If the notification triggers an email and you have the mail watcher enabled, the email will also be available for preview on the mail watcher screen."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:361 docs/master/telescope.md:361
#, no-wrap
msgid "<a name=\"query-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:361 docs/master/telescope.md:361
#, no-wrap
msgid "Query Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:364 docs/master/telescope.md:364
msgid "The query watcher records the raw SQL, bindings, and execution time for all queries that are executed by your application. The watcher also tags any queries slower than 100 milliseconds as `slow`. You may customize the slow query threshold using the watcher's `slow` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:372 docs/master/telescope.md:372
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\QueryWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_QUERY_WATCHER', true),\n"
"            'slow' => 50,\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:374 docs/master/telescope.md:374
#, no-wrap
msgid "<a name=\"redis-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:374 docs/master/telescope.md:374
#, no-wrap
msgid "Redis Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:377 docs/master/telescope.md:377
msgid "The Redis watcher records all [Redis](/docs/{{version}}/redis) commands executed by your application. If you are using Redis for caching, cache commands will also be recorded by the Redis watcher."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:379 docs/master/telescope.md:379
#, no-wrap
msgid "<a name=\"request-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:379 docs/master/telescope.md:379
#, no-wrap
msgid "Request Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:382 docs/master/telescope.md:382
msgid "The request watcher records the request, headers, session, and response data associated with any requests handled by the application. You may limit your recorded response data via the `size_limit` (in kilobytes) option:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:390 docs/master/telescope.md:390
#, no-wrap
msgid "    'watchers' => [\n"
"        Watchers\\RequestWatcher::class => [\n"
"            'enabled' => env('TELESCOPE_REQUEST_WATCHER', true),\n"
"            'size_limit' => env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),\n"
"        ],\n"
"        ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:392 docs/master/telescope.md:392
#, no-wrap
msgid "<a name=\"schedule-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:392 docs/master/telescope.md:392
#, no-wrap
msgid "Schedule Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:395 docs/master/telescope.md:395
msgid "The schedule watcher records the command and output of any [scheduled tasks](/docs/{{version}}/scheduling) run by your application."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:397 docs/master/telescope.md:397
#, no-wrap
msgid "<a name=\"view-watcher\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/telescope.md:397 docs/master/telescope.md:397
#, no-wrap
msgid "View Watcher"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:400 docs/master/telescope.md:400
msgid "The view watcher records the [view](/docs/{{version}}/views) name, path, data, and \"composers\" used when rendering views."
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:402 docs/master/telescope.md:402
#, no-wrap
msgid "<a name=\"displaying-user-avatars\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/telescope.md:402 docs/master/telescope.md:402
#, no-wrap
msgid "Displaying User Avatars"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:405 docs/master/telescope.md:405
msgid "The Telescope dashboard displays the user avatar for the user that was authenticated when a given entry was saved. By default, Telescope will retrieve avatars using the Gravatar web service. However, you may customize the avatar URL by registering a callback in your `App\\Providers\\TelescopeServiceProvider` class. The callback will receive the user's ID and email address and should return the user's avatar image URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:408 docs/master/telescope.md:408
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Laravel\\Telescope\\Telescope;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:417 docs/master/telescope.md:417
#, no-wrap
msgid "    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/telescope.md:421 docs/master/telescope.md:421
#, no-wrap
msgid "        Telescope::avatar(function ($id, $email) {\n"
"            return '/avatars/'.User::find($id)->avatar_path;\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Title #
#: docs/8.x/testing.md:1 docs/master/testing.md:1
#, no-wrap
msgid "Testing: Getting Started"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/testing.md:8 docs/master/testing.md:8
msgid "[Environment](#environment)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/testing.md:8 docs/master/testing.md:8
msgid "[Creating Tests](#creating-tests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/testing.md:8 docs/master/testing.md:8
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:13 docs/master/testing.md:13
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:15 docs/master/testing.md:15
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:17 docs/master/testing.md:17
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:19 docs/master/testing.md:19
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:21 docs/master/testing.md:21
#, no-wrap
msgid "<a name=\"environment\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/testing.md:21 docs/master/testing.md:21
#, no-wrap
msgid "Environment"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:24 docs/master/testing.md:24
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:26 docs/master/testing.md:26
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:28 docs/master/testing.md:28
#, no-wrap
msgid "<a name=\"the-env-testing-environment-file\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/testing.md:28 docs/master/testing.md:28
#, no-wrap
msgid "The `.env.testing` Environment File"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:31 docs/master/testing.md:31
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:33 docs/master/testing.md:33
#, no-wrap
msgid "<a name=\"the-creates-application-trait\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/testing.md:33 docs/master/testing.md:33
#, no-wrap
msgid "The `CreatesApplication` Trait"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:36 docs/master/testing.md:36
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:38 docs/master/testing.md:38
#, no-wrap
msgid "<a name=\"creating-tests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/testing.md:38 docs/master/testing.md:38
#, no-wrap
msgid "Creating Tests"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:41 docs/master/testing.md:41
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:43 docs/master/testing.md:43
#, no-wrap
msgid "    php artisan make:test UserTest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:45 docs/master/testing.md:45
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:47 docs/master/testing.md:47
#, no-wrap
msgid "    php artisan make:test UserTest --unit\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:49
#, no-wrap
msgid "> {tip} Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:51 docs/master/testing.md:51
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:55 docs/master/testing.md:55
#, no-wrap
msgid "    namespace Tests\\Unit;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:57 docs/master/testing.md:57
#, no-wrap
msgid "    use PHPUnit\\Framework\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:70 docs/master/testing.md:70
#, no-wrap
msgid "    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $this->assertTrue(true);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:72 docs/master/testing.md:72
#, no-wrap
msgid "> {note} If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:77 docs/master/testing.md:77
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:79 docs/master/testing.md:79
#, no-wrap
msgid "    ./vendor/bin/phpunit\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:81 docs/master/testing.md:81
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:83 docs/master/testing.md:83
#, no-wrap
msgid "    php artisan test\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:85 docs/master/testing.md:85
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:87 docs/master/testing.md:87
#, no-wrap
msgid "    php artisan test --testsuite=Feature --stop-on-failure\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:90 docs/master/testing.md:90
#, no-wrap
msgid "<a name=\"running-tests-in-parallel\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/testing.md:90 docs/master/testing.md:90
#, no-wrap
msgid "Running Tests In Parallel"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:93 docs/master/testing.md:93
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:95 docs/master/testing.md:95
#, no-wrap
msgid "    php artisan test --parallel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:97 docs/master/testing.md:97
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:99 docs/master/testing.md:99
#, no-wrap
msgid "    php artisan test --parallel --processes=4\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:101
#, no-wrap
msgid "> {note} When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:103 docs/master/testing.md:101
#, no-wrap
msgid "<a name=\"parallel-testing-and-databases\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/testing.md:103 docs/master/testing.md:101
#, no-wrap
msgid "Parallel Testing & Databases"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:106 docs/master/testing.md:104
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:108 docs/master/testing.md:106
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:110 docs/master/testing.md:108
#, no-wrap
msgid "    php artisan test --parallel --recreate-databases\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:112 docs/master/testing.md:110
#, no-wrap
msgid "<a name=\"parallel-testing-hooks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/testing.md:112 docs/master/testing.md:110
#, no-wrap
msgid "Parallel Testing Hooks"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:115 docs/master/testing.md:113
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:117 docs/master/testing.md:115
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:125
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
"    use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:138
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            ParallelTesting::setUpProcess(function ($token) {\n"
"                // ...\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:142
#, no-wrap
msgid "            ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"                // ...\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:147
#, no-wrap
msgid "            // Executed when a test database is created...\n"
"            ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"                Artisan::call('db:seed');\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:151
#, no-wrap
msgid "            ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"                // ...\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:157
#, no-wrap
msgid "            ParallelTesting::tearDownProcess(function ($token) {\n"
"                // ...\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:159
#, no-wrap
msgid "<a name=\"accessing-the-parallel-testing-token\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/testing.md:159
#, no-wrap
msgid "Accessing The Parallel Testing Token"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:162
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, integer identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr ""

#. type: Plain text
#: docs/8.x/testing.md:163 docs/master/testing.md:152
#, no-wrap
msgid "    $token = ParallelTesting::token();\n"
msgstr ""

#. type: Title #
#: docs/8.x/upgrade.md:1 docs/master/upgrade.md:1
#, no-wrap
msgid "Upgrade Guide"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:4 docs/master/upgrade.md:4
msgid "- [Upgrading To 8.0 From 7.x](#upgrade-8.0)"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:6 docs/master/upgrade.md:6
#, no-wrap
msgid "<a name=\"high-impact-changes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/upgrade.md:6 docs/master/upgrade.md:6
#, no-wrap
msgid "High Impact Changes"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:16 docs/master/upgrade.md:16
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [Model Factories](#model-factories)\n"
"- [Queue `retryAfter` Method](#queue-retry-after-method)\n"
"- [Queue `timeoutAt` Property](#queue-timeout-at-property)\n"
"- [Queue `allOnQueue` and `allOnConnection`](#queue-allOnQueue-allOnConnection)\n"
"- [Pagination Defaults](#pagination-defaults)\n"
"- [Seeder & Factory Namespaces](#seeder-factory-namespaces)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:18 docs/master/upgrade.md:18
#, no-wrap
msgid "<a name=\"medium-impact-changes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/upgrade.md:18 docs/master/upgrade.md:18
#, no-wrap
msgid "Medium Impact Changes"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:27 docs/master/upgrade.md:27
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [PHP 7.3.0 Required](#php-7.3.0-required)\n"
"- [Failed Jobs Table Batch Support](#failed-jobs-table-batch-support)\n"
"- [Maintenance Mode Updates](#maintenance-mode-updates)\n"
"- [The `php artisan down --message` Option](#artisan-down-message)\n"
"- [The `assertExactJson` Method](#assert-exact-json-method)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:29 docs/master/upgrade.md:29
#, no-wrap
msgid "<a name=\"upgrade-8.0\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/upgrade.md:29 docs/master/upgrade.md:29
#, no-wrap
msgid "Upgrading To 8.0 From 7.x"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:32 docs/master/upgrade.md:32
#, no-wrap
msgid "<a name=\"estimated-upgrade-time-15-minutes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:32 docs/master/upgrade.md:32
#, no-wrap
msgid "Estimated Upgrade Time: 15 Minutes"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:35 docs/master/upgrade.md:35
#, no-wrap
msgid "> {note} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:37 docs/master/upgrade.md:37
#, no-wrap
msgid "<a name=\"php-7.3.0-required\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:37 docs/master/upgrade.md:37
#, no-wrap
msgid "PHP 7.3.0 Required"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:40 docs/8.x/upgrade.md:197 docs/8.x/upgrade.md:421
#: docs/master/upgrade.md:40 docs/master/upgrade.md:197
#: docs/master/upgrade.md:421
#, no-wrap
msgid "**Likelihood Of Impact: Medium**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:42 docs/master/upgrade.md:42
msgid "The new minimum PHP version is now 7.3.0."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:44 docs/master/upgrade.md:44
#, no-wrap
msgid "<a name=\"updating-dependencies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:44 docs/master/upgrade.md:44
#, no-wrap
msgid "Updating Dependencies"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:47 docs/master/upgrade.md:47
msgid "Update the following dependencies in your `composer.json` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:56 docs/master/upgrade.md:56
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `guzzlehttp/guzzle` to `^7.0.1`\n"
"- `facade/ignition` to `^2.3.6`\n"
"- `laravel/framework` to `^8.0`\n"
"- `laravel/ui` to `^3.0`\n"
"- `nunomaduro/collision` to `^5.0`\n"
"- `phpunit/phpunit` to `^9.0`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:58 docs/master/upgrade.md:58
msgid "The following first-party packages have new major releases to support Laravel 8. If applicable, you should read their individual upgrade guides before upgrading:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:65 docs/master/upgrade.md:65
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [Horizon v5.0](https://github.com/laravel/horizon/blob/master/UPGRADE.md)\n"
"- [Passport v10.0](https://github.com/laravel/passport/blob/master/UPGRADE.md)\n"
"- [Socialite v5.0](https://github.com/laravel/socialite/blob/master/UPGRADE.md)\n"
"- [Telescope v4.0](https://github.com/laravel/telescope/blob/master/UPGRADE.md)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:67 docs/master/upgrade.md:67
msgid "In addition, the Laravel installer has been updated to support `composer create-project` and Laravel Jetstream. Any installer older than 4.0 will cease to work after October 2020. You should upgrade your global installer to `^4.0` as soon as possible."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:69 docs/master/upgrade.md:69
msgid "Finally, examine any other third-party packages consumed by your application and verify you are using the proper version for Laravel 8 support."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:74 docs/master/upgrade.md:74
#, no-wrap
msgid "<a name=\"the-isset-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:74 docs/master/upgrade.md:74
#, no-wrap
msgid "The `isset` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:77 docs/8.x/upgrade.md:146 docs/8.x/upgrade.md:155
#: docs/8.x/upgrade.md:165 docs/8.x/upgrade.md:172 docs/8.x/upgrade.md:204
#: docs/8.x/upgrade.md:211 docs/8.x/upgrade.md:218 docs/8.x/upgrade.md:228
#: docs/8.x/upgrade.md:385 docs/8.x/upgrade.md:395 docs/8.x/upgrade.md:414
#: docs/8.x/upgrade.md:431 docs/master/upgrade.md:77 docs/master/upgrade.md:146
#: docs/master/upgrade.md:155 docs/master/upgrade.md:165
#: docs/master/upgrade.md:172 docs/master/upgrade.md:204
#: docs/master/upgrade.md:211 docs/master/upgrade.md:218
#: docs/master/upgrade.md:228 docs/master/upgrade.md:385
#: docs/master/upgrade.md:395 docs/master/upgrade.md:414
#: docs/master/upgrade.md:431
#, no-wrap
msgid "**Likelihood Of Impact: Low**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:79 docs/master/upgrade.md:79
msgid "To be consistent with typical PHP behavior, the `offsetExists` method of `Illuminate\\Support\\Collection` has been updated to use `isset` instead of `array_key_exists`. This may present a change in behavior when dealing with collection items that have a value of `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:81 docs/master/upgrade.md:81
#, no-wrap
msgid "    $collection = collect([null]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:84 docs/master/upgrade.md:84
#, no-wrap
msgid "    // Laravel 7.x - true\n"
"    isset($collection[0]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:87 docs/master/upgrade.md:87
#, no-wrap
msgid "    // Laravel 8.x - false\n"
"    isset($collection[0]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:92 docs/master/upgrade.md:92
#, no-wrap
msgid "<a name=\"seeder-factory-namespaces\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:92 docs/master/upgrade.md:92
#, no-wrap
msgid "Seeder & Factory Namespaces"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:95 docs/8.x/upgrade.md:137 docs/8.x/upgrade.md:238
#: docs/8.x/upgrade.md:252 docs/8.x/upgrade.md:259 docs/8.x/upgrade.md:266
#: docs/master/upgrade.md:95 docs/master/upgrade.md:137
#: docs/master/upgrade.md:238 docs/master/upgrade.md:252
#: docs/master/upgrade.md:259 docs/master/upgrade.md:266
#, no-wrap
msgid "**Likelihood Of Impact: High**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:97 docs/master/upgrade.md:97
msgid "Seeders and factories are now namespaced. To accommodate for these changes, add the `Database\\Seeders` namespace to your seeder classes. In addition, the previous `database/seeds` directory should be renamed to `database/seeders`:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:104 docs/master/upgrade.md:104
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use Illuminate\\Database\\Seeder;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:117 docs/master/upgrade.md:117
#, no-wrap
msgid "    class DatabaseSeeder extends Seeder\n"
"    {\n"
"        /**\n"
"         * Seed the application's database.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function run()\n"
"        {\n"
"            ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:119 docs/master/upgrade.md:119
msgid "If you are choosing to use the `laravel/legacy-factories` package, no changes to your factory classes are required. However, if you are upgrading your factories, you should add the `Database\\Factories` namespace to those classes."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:121 docs/master/upgrade.md:121
msgid "Next, in your `composer.json` file, remove `classmap` block from the `autoload` section and add the new namespaced class directory mappings:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:129 docs/master/upgrade.md:129
#, no-wrap
msgid "    \"autoload\": {\n"
"        \"psr-4\": {\n"
"            \"App\\\\\": \"app/\",\n"
"            \"Database\\\\Factories\\\\\": \"database/factories/\",\n"
"            \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n"
"        }\n"
"    },\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:131 docs/master/upgrade.md:131
#, no-wrap
msgid "<a name=\"eloquent\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:131 docs/master/upgrade.md:131
#, no-wrap
msgid "Eloquent"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:134 docs/master/upgrade.md:134
#, no-wrap
msgid "<a name=\"model-factories\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:134 docs/master/upgrade.md:134
#, no-wrap
msgid "Model Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:139 docs/master/upgrade.md:139
msgid "Laravel's [model factories](/docs/{{version}}/database-testing#defining-model-factories) feature has been totally rewritten to support classes and is not compatible with Laravel 7.x style factories. However, to ease the upgrade process, a new `laravel/legacy-factories` package has been created to continue using your existing factories with Laravel 8.x. You may install this package via Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:141 docs/master/upgrade.md:141
#, no-wrap
msgid "    composer require laravel/legacy-factories\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:143 docs/master/upgrade.md:143
#, no-wrap
msgid "<a name=\"the-castable-interface\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:143 docs/master/upgrade.md:143
#, no-wrap
msgid "The `Castable` Interface"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:148 docs/master/upgrade.md:148
msgid "The `castUsing` method of the `Castable` interface has been updated to accept an array of arguments. If you are implementing this interface you should update your implementation accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:150 docs/master/upgrade.md:150
#, no-wrap
msgid "    public static function castUsing(array $arguments);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:152 docs/master/upgrade.md:152
#, no-wrap
msgid "<a name=\"increment-decrement-events\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:152 docs/master/upgrade.md:152
#, no-wrap
msgid "Increment / Decrement Events"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:157 docs/master/upgrade.md:157
msgid "Proper \"update\" and \"save\" related model events will now be dispatched when executing the `increment` or `decrement` methods on Eloquent model instances."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:162 docs/master/upgrade.md:162
#, no-wrap
msgid "<a name=\"the-event-service-provider-class\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:162 docs/master/upgrade.md:162
#, no-wrap
msgid "The `EventServiceProvider` Class"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:167 docs/master/upgrade.md:167
msgid "If your `App\\Providers\\EventServiceProvider` class contains a `register` function, you should ensure that you call `parent::register` at the beginning of this method. Otherwise, your application's events will not be registered."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:169 docs/master/upgrade.md:169
#, no-wrap
msgid "<a name=\"the-dispatcher-contract\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:169 docs/master/upgrade.md:169
#, no-wrap
msgid "The `Dispatcher` Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:174 docs/master/upgrade.md:174
msgid "The `listen` method of the `Illuminate\\Contracts\\Events\\Dispatcher` contract has been updated to make the `$listener` property optional. This change was made to support automatic detection of handled event types via reflection. If you are manually implementing this interface, you should update your implementation accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:176 docs/master/upgrade.md:176
#, no-wrap
msgid "    public function listen($events, $listener = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:178 docs/master/upgrade.md:178
#, no-wrap
msgid "<a name=\"framework\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:178 docs/master/upgrade.md:178
#, no-wrap
msgid "Framework"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:181 docs/master/upgrade.md:181
#, no-wrap
msgid "<a name=\"maintenance-mode-updates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:181 docs/master/upgrade.md:181
#, no-wrap
msgid "Maintenance Mode Updates"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:184 docs/8.x/upgrade.md:280 docs/8.x/upgrade.md:307
#: docs/master/upgrade.md:184 docs/master/upgrade.md:280
#: docs/master/upgrade.md:307
#, no-wrap
msgid "**Likelihood Of Impact: Optional**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:186 docs/master/upgrade.md:186
msgid "The [maintenance mode](/docs/{{version}}/configuration#maintenance-mode) feature of Laravel has been improved in Laravel 8.x. Pre-rendering the maintenance mode template is now supported and eliminates the chances of end users encountering errors during maintenance mode. However, to support this, the following lines must be added to your `public/index.php` file. These lines should be placed directly under the existing `LARAVEL_START` constant definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:188 docs/master/upgrade.md:188
#, no-wrap
msgid "    define('LARAVEL_START', microtime(true));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:192 docs/master/upgrade.md:192
#, no-wrap
msgid "    if (file_exists(__DIR__.'/../storage/framework/maintenance.php')) {\n"
"        require __DIR__.'/../storage/framework/maintenance.php';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:194 docs/master/upgrade.md:194
#, no-wrap
msgid "<a name=\"artisan-down-message\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:194 docs/master/upgrade.md:194
#, no-wrap
msgid "The `php artisan down --message` Option"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:199 docs/master/upgrade.md:199
msgid "The `--message` option of the `php artisan down` command has been removed. As an alternative, consider [pre-rendering your maintenance mode views](/docs/{{version}}/configuration#maintenance-mode) with the message of your choice."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:201 docs/master/upgrade.md:201
#, no-wrap
msgid "<a name=\"php-artisan-serve-no-reload-option\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:201 docs/master/upgrade.md:201
#, no-wrap
msgid "The `php artisan serve --no-reload` Option"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:206 docs/master/upgrade.md:206
msgid "A `--no-reload` option has been added to the `php artisan serve` command. This will instruct the built-in server to not reload the server when environment file changes are detected. This option is primarily helpful when running Laravel Dusk tests in a CI environment."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:208 docs/master/upgrade.md:208
#, no-wrap
msgid "<a name=\"manager-app-property\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:208 docs/master/upgrade.md:208
#, no-wrap
msgid "Manager `$app` Property"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:213 docs/master/upgrade.md:213
msgid "The previously deprecated `$app` property of the `Illuminate\\Support\\Manager` class has been removed. If you were relying on this property, you should use the `$container` property instead."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:215 docs/master/upgrade.md:215
#, no-wrap
msgid "<a name=\"the-elixir-helper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:215 docs/master/upgrade.md:215
#, no-wrap
msgid "The `elixir` Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:220 docs/master/upgrade.md:220
msgid "The previously deprecated `elixir` helper has been removed. Applications still using this method are encouraged to upgrade to [Laravel Mix](https://github.com/JeffreyWay/laravel-mix)."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:222 docs/master/upgrade.md:222
#, no-wrap
msgid "<a name=\"mail\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:225 docs/master/upgrade.md:225
#, no-wrap
msgid "<a name=\"the-sendnow-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:225 docs/master/upgrade.md:225
#, no-wrap
msgid "The `sendNow` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:230 docs/master/upgrade.md:230
msgid "The previously deprecated `sendNow` method has been removed. Instead, please use the `send` method."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:235 docs/master/upgrade.md:235
#, no-wrap
msgid "<a name=\"pagination-defaults\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:235 docs/master/upgrade.md:235
#, no-wrap
msgid "Pagination Defaults"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:240 docs/master/upgrade.md:240
msgid "The paginator now uses the [Tailwind CSS framework](https://tailwindcss.com) for its default styling. In order to keep using Bootstrap, you should add the following method call to the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:244 docs/master/upgrade.md:244
#, no-wrap
msgid "    Paginator::useBootstrap();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:246 docs/master/upgrade.md:246
#, no-wrap
msgid "<a name=\"queue\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:246 docs/master/upgrade.md:246
#, no-wrap
msgid "Queue"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:249 docs/master/upgrade.md:249
#, no-wrap
msgid "<a name=\"queue-retry-after-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:249 docs/master/upgrade.md:249
#, no-wrap
msgid "The `retryAfter` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:254 docs/master/upgrade.md:254
msgid "For consistency with other features of Laravel, the `retryAfter` method and `retryAfter` property of queued jobs, mailers, notifications, and listeners have been renamed to `backoff`. You should update the name of this method / property in the relevant classes in your application."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:256 docs/master/upgrade.md:256
#, no-wrap
msgid "<a name=\"queue-timeout-at-property\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:256 docs/master/upgrade.md:256
#, no-wrap
msgid "The `timeoutAt` Property"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:261 docs/master/upgrade.md:261
msgid "The `timeoutAt` property of queued jobs, notifications, and listeners has been renamed to `retryUntil`. You should update the name of this property in the relevant classes in your application."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:263 docs/master/upgrade.md:263
#, no-wrap
msgid "<a name=\"queue-allOnQueue-allOnConnection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:263 docs/master/upgrade.md:263
#, no-wrap
msgid "The `allOnQueue()` / `allOnConnection()` Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:268 docs/master/upgrade.md:268
msgid "For consistency with other dispatching methods, the `allOnQueue()` and `allOnConnection()` methods used with job chaining have been removed. You may use the `onQueue()` and `onConnection()` methods instead. These methods should be called before calling the `dispatch` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:273 docs/master/upgrade.md:273
#, no-wrap
msgid "    ProcessPodcast::withChain([\n"
"        new OptimizePodcast,\n"
"        new ReleasePodcast\n"
"    ])->onConnection('redis')->onQueue('podcasts')->dispatch();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:275 docs/master/upgrade.md:275
msgid "Note that this change only affects code using the `withChain` method. The `allOnQueue()` and `allOnConnection()` are still available when using the global `dispatch()` helper."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:277 docs/master/upgrade.md:277
#, no-wrap
msgid "<a name=\"failed-jobs-table-batch-support\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:277 docs/master/upgrade.md:277
#, no-wrap
msgid "Failed Jobs Table Batch Support"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:282 docs/master/upgrade.md:282
msgid "If you plan to use the [job batching](/docs/{{version}}/queues#job-batching) features of Laravel 8.x, your `failed_jobs` database table will need to be updated. First, a new `uuid` column should be added to your table:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:289 docs/master/upgrade.md:289
#, no-wrap
msgid "    Schema::table('failed_jobs', function (Blueprint $table) {\n"
"        $table->string('uuid')->after('id')->nullable()->unique();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:291 docs/master/upgrade.md:291
msgid "Next, the `failed.driver` configuration option within your `queue` configuration file should be updated to `database-uuids`."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:293 docs/master/upgrade.md:293
msgid "In addition, you may wish to generate UUIDs for your existing failed jobs:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:299 docs/master/upgrade.md:299
#, no-wrap
msgid "    DB::table('failed_jobs')->whereNull('uuid')->cursor()->each(function ($job) {\n"
"        DB::table('failed_jobs')\n"
"            ->where('id', $job->id)\n"
"            ->update(['uuid' => (string) Illuminate\\Support\\Str::uuid()]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:304 docs/master/upgrade.md:304
#, no-wrap
msgid "<a name=\"automatic-controller-namespace-prefixing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:304 docs/master/upgrade.md:304
#, no-wrap
msgid "Automatic Controller Namespace Prefixing"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:309 docs/master/upgrade.md:309
msgid "In previous releases of Laravel, the `RouteServiceProvider` class contained a `$namespace` property with a value of `App\\Http\\Controllers`. This value of this property was used to automatically prefix controller route declarations and controller route URL generation such as when calling the `action` helper."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:311 docs/master/upgrade.md:311
msgid "In Laravel 8, this property is set to `null` by default. This allows your controller route declarations to use the standard PHP callable syntax, which provides better support for jumping to the controller class in many IDEs:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:316 docs/master/upgrade.md:316
#, no-wrap
msgid "    // Using PHP callable syntax...\n"
"    Route::get('/users', [UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:319 docs/master/upgrade.md:319
#, no-wrap
msgid "    // Using string syntax...\n"
"    Route::get('/users', 'App\\Http\\Controllers\\UserController@index');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:321 docs/master/upgrade.md:321
msgid "In most cases, this won't impact applications that are being upgraded because your `RouteServiceProvider` will still contain the `$namespace` property with its previous value. However, if you upgrade your application by creating a brand new Laravel project, you may encounter this as a breaking change."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:323 docs/master/upgrade.md:323
msgid "If you would like to continue using the original auto-prefixed controller routing, you can simply set the value of the `$namespace` property within your `RouteServiceProvider` and update the route registrations within the `boot` method to use the `$namespace` property:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:334 docs/master/upgrade.md:334
#, no-wrap
msgid "    class RouteServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * The path to the \"home\" route for your application.\n"
"         *\n"
"         * This is used by Laravel authentication to redirect users after login.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public const HOME = '/home';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:343 docs/master/upgrade.md:343
#, no-wrap
msgid "        /**\n"
"         * If specified, this namespace is automatically applied to your controller routes.\n"
"         *\n"
"         * In addition, it is set as the URL generator's root namespace.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $namespace = 'App\\Http\\Controllers';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:352 docs/master/upgrade.md:352
#, no-wrap
msgid "        /**\n"
"         * Define your route model bindings, pattern filters, etc.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->configureRateLimiting();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:357 docs/master/upgrade.md:357
#, no-wrap
msgid "            $this->routes(function () {\n"
"                Route::middleware('web')\n"
"                    ->namespace($this->namespace)\n"
"                    ->group(base_path('routes/web.php'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:364 docs/master/upgrade.md:364
#, no-wrap
msgid "                Route::prefix('api')\n"
"                    ->middleware('api')\n"
"                    ->namespace($this->namespace)\n"
"                    ->group(base_path('routes/api.php'));\n"
"            });\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:377 docs/master/upgrade.md:377
#, no-wrap
msgid "        /**\n"
"         * Configure the rate limiters for the application.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected function configureRateLimiting()\n"
"        {\n"
"            RateLimiter::for('api', function (Request $request) {\n"
"                return Limit::perMinute(60)->by(optional($request->user())->id ?: $request->ip());\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:379 docs/master/upgrade.md:379
#, no-wrap
msgid "<a name=\"scheduling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:379 docs/master/upgrade.md:379
#, no-wrap
msgid "Scheduling"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:382 docs/master/upgrade.md:382
#, no-wrap
msgid "<a name=\"the-cron-expression-library\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:382 docs/master/upgrade.md:382
#, no-wrap
msgid "The `cron-expression` Library"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:387 docs/master/upgrade.md:387
msgid "Laravel's dependency on `dragonmantank/cron-expression` has been updated from `2.x` to `3.x`. This should not cause any breaking change in your application unless you are interacting with the `cron-expression` library directly. If you are interacting with this library directly, please review its [change log](https://github.com/dragonmantank/cron-expression/blob/master/CHANGELOG.md)."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:389 docs/master/upgrade.md:389
#, no-wrap
msgid "<a name=\"session\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:389 docs/master/upgrade.md:389
#, no-wrap
msgid "Session"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:392 docs/master/upgrade.md:392
#, no-wrap
msgid "<a name=\"the-session-contract\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:392 docs/master/upgrade.md:392
#, no-wrap
msgid "The `Session` Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:397 docs/master/upgrade.md:397
msgid "The `Illuminate\\Contracts\\Session\\Session` contract has received a new `pull` method. If you are implementing this contract manually, you should update your implementation accordingly:"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:406 docs/master/upgrade.md:406
#, no-wrap
msgid "    /**\n"
"     * Get the value of a given key and then forget it.\n"
"     *\n"
"     * @param  string  $key\n"
"     * @param  mixed  $default\n"
"     * @return mixed\n"
"     */\n"
"    public function pull($key, $default = null);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:411 docs/master/upgrade.md:411
#, no-wrap
msgid "<a name=\"decode-response-json-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:411 docs/master/upgrade.md:411
#, no-wrap
msgid "The `decodeResponseJson` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:416 docs/master/upgrade.md:416
msgid "The `decodeResponseJson` method that belongs to the `Illuminate\\Testing\\TestResponse` class no longer accepts any arguments. Please consider using the `json` method instead."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:418 docs/master/upgrade.md:418
#, no-wrap
msgid "<a name=\"assert-exact-json-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/upgrade.md:418 docs/master/upgrade.md:418
#, no-wrap
msgid "The `assertExactJson` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:423 docs/master/upgrade.md:423
msgid "The `assertExactJson` method now requires numeric keys of compared arrays to match and be in the same order. If you would like to compare JSON against an array without requiring numerically keyed arrays to have the same order, you may use the `assertSimilarJson` method instead."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:425 docs/master/upgrade.md:425
#, no-wrap
msgid "<a name=\"validation\"></a>\n"
msgstr ""

#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  validation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#. #-#-#-#-#  upgrade.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title ###
#. #-#-#-#-#  validation.pot (PACKAGE VERSION)  #-#-#-#-#
#. type: Title #
#: docs/8.x/upgrade.md:425 docs/8.x/validation.md:1 docs/master/upgrade.md:425
#: docs/master/validation.md:1
#, no-wrap
msgid "Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:428 docs/master/upgrade.md:428
#, no-wrap
msgid "<a name=\"database-rule-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/upgrade.md:428 docs/master/upgrade.md:428
#, no-wrap
msgid "Database Rule Connections"
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:433 docs/master/upgrade.md:433
msgid "The `unique` and `exists` rules will now respect the specified connection name (accessed via the model's `getConnectionName` method) of Eloquent models when performing queries."
msgstr ""

#. type: Plain text
#: docs/8.x/upgrade.md:437 docs/master/upgrade.md:437
msgid "We also encourage you to view the changes in the `laravel/laravel` [GitHub repository](https://github.com/laravel/laravel). While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the [GitHub comparison tool](https://github.com/laravel/laravel/compare/7.x...8.x) and choose which updates are important to you."
msgstr ""

#. type: Title #
#: docs/8.x/urls.md:1 docs/master/urls.md:1
#, no-wrap
msgid "URL Generation"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[The Basics](#the-basics)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[Generating URLs](#generating-urls)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[Accessing The Current URL](#accessing-the-current-url)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[URLs For Named Routes](#urls-for-named-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[Signed URLs](#signed-urls)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[URLs For Controller Actions](#urls-for-controller-actions)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/urls.md:11 docs/master/urls.md:11
msgid "[Default Values](#default-values)"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:16 docs/master/urls.md:16
msgid "Laravel provides several helpers to assist you in generating URLs for your application. These helpers are primarily helpful when building links in your templates and API responses, or when generating redirect responses to another part of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:18 docs/master/urls.md:18
#, no-wrap
msgid "<a name=\"the-basics\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/urls.md:18 docs/master/urls.md:18
#, no-wrap
msgid "The Basics"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:21 docs/master/urls.md:21
#, no-wrap
msgid "<a name=\"generating-urls\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/urls.md:21 docs/master/urls.md:21
#, no-wrap
msgid "Generating URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:24 docs/master/urls.md:24
msgid "The `url` helper may be used to generate arbitrary URLs for your application. The generated URL will automatically use the scheme (HTTP or HTTPS) and host from the current request being handled by the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:26 docs/master/urls.md:26
#, no-wrap
msgid "    $post = App\\Models\\Post::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:28 docs/master/urls.md:28
#, no-wrap
msgid "    echo url(\"/posts/{$post->id}\");\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:30 docs/master/urls.md:30
#, no-wrap
msgid "    // http://example.com/posts/1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:32 docs/master/urls.md:32
#, no-wrap
msgid "<a name=\"accessing-the-current-url\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/urls.md:32 docs/master/urls.md:32
#, no-wrap
msgid "Accessing The Current URL"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:35 docs/master/urls.md:35
msgid "If no path is provided to the `url` helper, an `Illuminate\\Routing\\UrlGenerator` instance is returned, allowing you to access information about the current URL:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:38 docs/master/urls.md:38
#, no-wrap
msgid "    // Get the current URL without the query string...\n"
"    echo url()->current();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:41 docs/master/urls.md:41
#, no-wrap
msgid "    // Get the current URL including the query string...\n"
"    echo url()->full();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:44 docs/master/urls.md:44
#, no-wrap
msgid "    // Get the full URL for the previous request...\n"
"    echo url()->previous();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:46 docs/master/urls.md:46
msgid "Each of these methods may also be accessed via the `URL` [facade](/docs/{{version}}/facades):"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:48 docs/8.x/urls.md:97 docs/8.x/urls.md:103
#: docs/master/urls.md:48 docs/master/urls.md:97 docs/master/urls.md:103
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\URL;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:50 docs/master/urls.md:50
#, no-wrap
msgid "    echo URL::current();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:52 docs/master/urls.md:52
#, no-wrap
msgid "<a name=\"urls-for-named-routes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/urls.md:52 docs/master/urls.md:52
#, no-wrap
msgid "URLs For Named Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:55 docs/master/urls.md:55
msgid "The `route` helper may be used to generate URLs to [named routes](/docs/{{version}}/routing#named-routes). Named routes allow you to generate URLs without being coupled to the actual URL defined on the route. Therefore, if the route's URL changes, no changes need to be made to your calls to the `route` function. For example, imagine your application contains a route defined like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:59 docs/master/urls.md:59
#, no-wrap
msgid "    Route::get('/post/{post}', function () {\n"
"        //\n"
"    })->name('post.show');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:61 docs/master/urls.md:61
msgid "To generate a URL to this route, you may use the `route` helper like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:63 docs/master/urls.md:63
#, no-wrap
msgid "    echo route('post.show', ['post' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:65 docs/master/urls.md:65
#, no-wrap
msgid "    // http://example.com/post/1\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:67 docs/master/urls.md:67
msgid "Of course, the `route` helper may also be used to generate URLs for routes with multiple parameters:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:71 docs/master/urls.md:71
#, no-wrap
msgid "    Route::get('/post/{post}/comment/{comment}', function () {\n"
"        //\n"
"    })->name('comment.show');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:73 docs/master/urls.md:73
#, no-wrap
msgid "    echo route('comment.show', ['post' => 1, 'comment' => 3]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:75 docs/master/urls.md:75
#, no-wrap
msgid "    // http://example.com/post/1/comment/3\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:77 docs/master/urls.md:77
msgid "Any additional array elements that do not correspond to the route's definition parameters will be added to the URL's query string:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:79 docs/master/urls.md:79
#, no-wrap
msgid "    echo route('post.show', ['post' => 1, 'search' => 'rocket']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:81 docs/master/urls.md:81
#, no-wrap
msgid "    // http://example.com/post/1?search=rocket\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:83 docs/master/urls.md:83
#, no-wrap
msgid "<a name=\"eloquent-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/urls.md:83 docs/master/urls.md:83
#, no-wrap
msgid "Eloquent Models"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:86 docs/master/urls.md:86
msgid "You will often be generating URLs using the primary key of [Eloquent models](/docs/{{version}}/eloquent). For this reason, you may pass Eloquent models as parameter values. The `route` helper will automatically extract the model's primary key:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:88 docs/master/urls.md:88
#, no-wrap
msgid "    echo route('post.show', ['post' => $post]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:90 docs/master/urls.md:90
#, no-wrap
msgid "<a name=\"signed-urls\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/urls.md:90 docs/master/urls.md:90
#, no-wrap
msgid "Signed URLs"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:93 docs/master/urls.md:93
msgid "Laravel allows you to easily create \"signed\" URLs to named routes. These URLs have a \"signature\" hash appended to the query string which allows Laravel to verify that the URL has not been modified since it was created. Signed URLs are especially useful for routes that are publicly accessible yet need a layer of protection against URL manipulation."
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:95 docs/master/urls.md:95
msgid "For example, you might use signed URLs to implement a public \"unsubscribe\" link that is emailed to your customers. To create a signed URL to a named route, use the `signedRoute` method of the `URL` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:99 docs/master/urls.md:99
#, no-wrap
msgid "    return URL::signedRoute('unsubscribe', ['user' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:101 docs/master/urls.md:101
msgid "If you would like to generate a temporary signed route URL that expires after a specified amount of time, you may use the `temporarySignedRoute` method. When Laravel validates a temporary signed route URL, it will ensure that the expiration timestamp that is encoded into the signed URL has not elapsed:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:107 docs/master/urls.md:107
#, no-wrap
msgid "    return URL::temporarySignedRoute(\n"
"        'unsubscribe', now()->addMinutes(30), ['user' => 1]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:109 docs/master/urls.md:109
#, no-wrap
msgid "<a name=\"validating-signed-route-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/urls.md:109 docs/master/urls.md:109
#, no-wrap
msgid "Validating Signed Route Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:112 docs/master/urls.md:112
msgid "To verify that an incoming request has a valid signature, you should call the `hasValidSignature` method on the incoming `Request`:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:119 docs/master/urls.md:119
#, no-wrap
msgid "    Route::get('/unsubscribe/{user}', function (Request $request) {\n"
"        if (! $request->hasValidSignature()) {\n"
"            abort(401);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:122 docs/master/urls.md:122
#, no-wrap
msgid "        // ...\n"
"    })->name('unsubscribe');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:124 docs/master/urls.md:124
msgid "Alternatively, you may assign the `Illuminate\\Routing\\Middleware\\ValidateSignature` [middleware](/docs/{{version}}/middleware) to the route. If it is not already present, you should assign this middleware a key in your HTTP kernel's `routeMiddleware` array:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:135 docs/master/urls.md:135
#, no-wrap
msgid "    /**\n"
"     * The application's route middleware.\n"
"     *\n"
"     * These middleware may be assigned to groups or used individually.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $routeMiddleware = [\n"
"        'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:137 docs/master/urls.md:137
msgid "Once you have registered the middleware in your kernel, you may attach it to a route. If the incoming request does not have a valid signature, the middleware will automatically return a `403` HTTP response:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:141 docs/master/urls.md:141
#, no-wrap
msgid "    Route::post('/unsubscribe/{user}', function (Request $request) {\n"
"        // ...\n"
"    })->name('unsubscribe')->middleware('signed');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:143 docs/master/urls.md:143
#, no-wrap
msgid "<a name=\"urls-for-controller-actions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/urls.md:143 docs/master/urls.md:143
#, no-wrap
msgid "URLs For Controller Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:152 docs/master/urls.md:152
msgid "If the controller method accepts route parameters, you may pass an associative array of route parameters as the second argument to the function:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:159 docs/master/urls.md:159
msgid "For some applications, you may wish to specify request-wide default values for certain URL parameters. For example, imagine many of your routes define a `{locale}` parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:163 docs/master/urls.md:163
#, no-wrap
msgid "    Route::get('/{locale}/posts', function () {\n"
"        //\n"
"    })->name('post.index');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:165 docs/master/urls.md:165
msgid "It is cumbersome to always pass the `locale` every time you call the `route` helper. So, you may use the `URL::defaults` method to define a default value for this parameter that will always be applied during the current request. You may wish to call this method from a [route middleware](/docs/{{version}}/middleware#assigning-middleware-to-routes) so that you have access to the current request:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:172 docs/master/urls.md:172
#, no-wrap
msgid "    use Closure;\n"
"    use Illuminate\\Support\\Facades\\URL;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:185 docs/master/urls.md:185
#, no-wrap
msgid "    class SetDefaultLocaleForUrls\n"
"    {\n"
"        /**\n"
"         * Handle the incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            URL::defaults(['locale' => $request->user()->locale]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:191 docs/master/urls.md:191
msgid "Once the default value for the `locale` parameter has been set, you are no longer required to pass its value when generating URLs via the `route` helper."
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:193 docs/master/urls.md:193
#, no-wrap
msgid "<a name=\"url-defaults-middleware-priority\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/urls.md:193 docs/master/urls.md:193
#, no-wrap
msgid "URL Defaults & Middleware Priority"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:196 docs/master/urls.md:196
msgid "Setting URL default values can interfere with Laravel's handling of implicit model bindings. Therefore, you should [prioritize your middleware](https://laravel.com/docs/{{version}}/middleware#sorting-middleware) that set URL defaults to be executed before Laravel's own `SubstituteBindings` middleware. You can accomplish this by making sure your middleware occurs before the `SubstituteBindings` middleware within the `$middlewarePriority` property of your application's HTTP kernel."
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:198 docs/master/urls.md:198
msgid "The `$middlewarePriority` property is defined in the base `Illuminate\\Foundation\\Http\\Kernel` class. You may copy its definition from that class and overwrite it in your application's HTTP kernel in order to modify it:"
msgstr ""

#. type: Plain text
#: docs/8.x/urls.md:211 docs/master/urls.md:211
#, no-wrap
msgid "    /**\n"
"     * The priority-sorted list of middleware.\n"
"     *\n"
"     * This forces non-global middleware to always be in the given order.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewarePriority = [\n"
"        // ...\n"
"         \\App\\Http\\Middleware\\SetDefaultLocaleForUrls::class,\n"
"         \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"         // ...\n"
"    ];\n"
msgstr ""

#. type: Title #
#: docs/8.x/valet.md:1 docs/master/valet.md:1
#, no-wrap
msgid "Laravel Valet"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Upgrading Valet](#upgrading-valet)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Serving Sites](#serving-sites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[The \"Park\" Command](#the-park-command)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[The \"Link\" Command](#the-link-command)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Securing Sites With TLS](#securing-sites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Sharing Sites](#sharing-sites)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Sharing Sites Via Ngrok](#sharing-sites-via-ngrok)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Sharing Sites Via Expose](#sharing-sites-via-expose)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Sharing Sites On Your Local Network](#sharing-sites-on-your-local-network)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Site Specific Environment Variables](#site-specific-environment-variables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Proxying Services](#proxying-services)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Custom Valet Drivers](#custom-valet-drivers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Local Drivers](#local-drivers)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Other Valet Commands](#other-valet-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/valet.md:20 docs/master/valet.md:20
msgid "[Valet Directories & Files](#valet-directories-and-files)"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:25 docs/master/valet.md:25
msgid "Valet is a Laravel development environment for macOS minimalists. Laravel Valet configures your Mac to always run [Nginx](https://www.nginx.com/) in the background when your machine starts. Then, using [DnsMasq](https://en.wikipedia.org/wiki/Dnsmasq), Valet proxies all requests on the `*.test` domain to point to sites installed on your local machine."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:27 docs/master/valet.md:27
msgid "In other words, Valet is a blazing fast Laravel development environment that uses roughly 7 MB of RAM. Valet isn't a complete replacement for [Sail](/docs/{{version}}/sail) or [Homestead](/docs/{{version}}/homestead), but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:29 docs/master/valet.md:29
msgid "Out of the box, Valet support includes, but is not limited to:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:36 docs/master/valet.md:36
#, no-wrap
msgid "<style>\n"
"    #valet-support > ul {\n"
"        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n"
"        line-height: 1.9;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:61 docs/master/valet.md:61
#, no-wrap
msgid "<div id=\"valet-support\" markdown=\"1\">\n"
"- [Laravel](https://laravel.com)\n"
"- [Lumen](https://lumen.laravel.com)\n"
"- [Bedrock](https://roots.io/bedrock/)\n"
"- [CakePHP 3](https://cakephp.org)\n"
"- [Concrete5](https://www.concrete5.org/)\n"
"- [Contao](https://contao.org/en/)\n"
"- [Craft](https://craftcms.com)\n"
"- [Drupal](https://www.drupal.org/)\n"
"- [ExpressionEngine](https://www.expressionengine.com/)\n"
"- [Jigsaw](https://jigsaw.tighten.co)\n"
"- [Joomla](https://www.joomla.org/)\n"
"- [Katana](https://github.com/themsaid/katana)\n"
"- [Kirby](https://getkirby.com/)\n"
"- [Magento](https://magento.com/)\n"
"- [OctoberCMS](https://octobercms.com/)\n"
"- [Sculpin](https://sculpin.io/)\n"
"- [Slim](https://www.slimframework.com)\n"
"- [Statamic](https://statamic.com)\n"
"- Static HTML\n"
"- [Symfony](https://symfony.com)\n"
"- [WordPress](https://wordpress.org)\n"
"- [Zend](https://framework.zend.com)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:63 docs/master/valet.md:63
msgid "However, you may extend Valet with your own [custom drivers](#custom-valet-drivers)."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:68 docs/master/valet.md:68
#, no-wrap
msgid "> {note} Valet requires macOS and [Homebrew](https://brew.sh/). Before installation, you should make sure that no other programs such as Apache or Nginx are binding to your local machine's port 80.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:70 docs/master/valet.md:70
msgid "To get started, you first need to ensure that Homebrew is up to date using the `update` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:72 docs/master/valet.md:72
#, no-wrap
msgid "    brew update\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:74 docs/master/valet.md:74
msgid "Next, you should use Homebrew to install PHP:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:76 docs/master/valet.md:76
#, no-wrap
msgid "    brew install php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:78 docs/master/valet.md:78
msgid "After installing PHP, you are ready to install the [Composer package manager](https://getcomposer.org). In addition, you should make sure the `~/.composer/vendor/bin` directory is in your system's \"PATH\". After Composer has been installed, you may install Laravel Valet as a global Composer package:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:80 docs/master/valet.md:80
#, no-wrap
msgid "    composer global require laravel/valet\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:82 docs/master/valet.md:82
msgid "Finally, you may execute Valet's `install` command. This will configure and install Valet and DnsMasq. In addition, the daemons Valet depends on will be configured to launch when your system starts:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:84 docs/master/valet.md:84
#, no-wrap
msgid "    valet install\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:86 docs/master/valet.md:86
msgid "Once Valet is installed, try pinging any `*.test` domain on your terminal using a command such as `ping foobar.test`. If Valet is installed correctly you should see this domain responding on `127.0.0.1`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:88 docs/master/valet.md:88
msgid "Valet will automatically start its required services each time your machine boots."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:93 docs/master/valet.md:93
msgid "Valet allows you to switch PHP versions using the `valet use php@version` command. Valet will install the specified PHP version via Homebrew if it is not already installed:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:95 docs/master/valet.md:95
#, no-wrap
msgid "    valet use php@7.2\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:97 docs/master/valet.md:97
#, no-wrap
msgid "    valet use php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:99 docs/master/valet.md:99
#, no-wrap
msgid "> {note} Valet only serves one PHP version at a time, even if you have multiple PHP versions installed.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:104 docs/master/valet.md:104
msgid "If your application needs a database, check out [DBngin](https://dbngin.com). DBngin provides a free, all-in-one database management tool that includes MySQL, PostgreSQL, and Redis. After DBngin has been installed, you can connect to your database at `127.0.0.1` using the `root` username and an empty string for the password."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:106 docs/master/valet.md:106
#, no-wrap
msgid "<a name=\"resetting-your-installation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:106 docs/master/valet.md:106
#, no-wrap
msgid "Resetting Your Installation"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:109 docs/master/valet.md:109
msgid "If you are having trouble getting your Valet installation to run properly, executing the `composer global update` command followed by `valet install` will reset your installation and can solve a variety of problems. In rare cases, it may be necessary to \"hard reset\" Valet by executing `valet uninstall --force` followed by `valet install`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:111 docs/master/valet.md:111
#, no-wrap
msgid "<a name=\"upgrading-valet\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:111 docs/master/valet.md:111
#, no-wrap
msgid "Upgrading Valet"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:114 docs/master/valet.md:114
msgid "You may update your Valet installation by executing the `composer global update` command in your terminal. After upgrading, it is good practice to run the `valet install` command so Valet can make additional upgrades to your configuration files if necessary."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:116 docs/master/valet.md:116
#, no-wrap
msgid "<a name=\"serving-sites\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:116 docs/master/valet.md:116
#, no-wrap
msgid "Serving Sites"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:119 docs/master/valet.md:119
msgid "Once Valet is installed, you're ready to start serving your Laravel applications. Valet provides two commands to help you serve your applications: `park` and `link`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:121 docs/master/valet.md:121
#, no-wrap
msgid "<a name=\"the-park-command\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:121 docs/master/valet.md:121
#, no-wrap
msgid "The `park` Command"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:124 docs/master/valet.md:124
#, no-wrap
msgid "The `park` command registers a directory on your machine that contains your applications. Once the directory has been \"parked\" with Valet, all of the directories within that directory will be accessible in your web browser at `http://<directory-name>.test`:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:126 docs/master/valet.md:126
#, no-wrap
msgid "    cd ~/Sites\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:128 docs/master/valet.md:128
#, no-wrap
msgid "    valet park\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:130
#, no-wrap
msgid "That's all there is to it. Now, any application you create within your \"parked\" directory will automatically be served using the `http://<directory-name>.test` convention. So, if your parked directory contains a directory named \"laravel\", the application within that directory will be accessible at `http://laravel.test`. In addition, Valet automatically allows you to access the site using wildcard subdomains (`http://foo.laravel.test`).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:132 docs/master/valet.md:132
#, no-wrap
msgid "<a name=\"the-link-command\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:132 docs/master/valet.md:132
#, no-wrap
msgid "The `link` Command"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:135 docs/master/valet.md:135
msgid "The `link` command can also be used to serve your Laravel applications. This command is useful if you want to serve a single site in a directory and not the entire directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:137 docs/8.x/valet.md:145 docs/8.x/valet.md:155
#: docs/8.x/valet.md:180 docs/8.x/valet.md:193 docs/master/valet.md:137
#: docs/master/valet.md:145 docs/master/valet.md:155 docs/master/valet.md:180
#: docs/master/valet.md:193
#, no-wrap
msgid "    cd ~/Sites/laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:139 docs/master/valet.md:139
#, no-wrap
msgid "    valet link\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:141
msgid "Once an application has been linked to Valet using the `link` command, you may access the application using its directory name. So, the site that was linked in the example above may be accessed at `http://laravel.test`. In addition, Valet automatically allows you to access the site using wildcard sub-domains (`http://foo.laravel.test`)."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:143 docs/master/valet.md:143
msgid "If you would like to serve the application at a different hostname, you may pass the hostname to the `link` command. For example, you may run the following command to make an application available at `http://application.test`:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:147 docs/master/valet.md:147
#, no-wrap
msgid "    valet link application\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:149 docs/master/valet.md:149
msgid "You may execute the `links` command to display a list of all of your linked directories:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:151 docs/master/valet.md:151
#, no-wrap
msgid "    valet links\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:153 docs/master/valet.md:153
msgid "The `unlink` command may be used to destroy the symbolic link for a site:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:157 docs/master/valet.md:157
#, no-wrap
msgid "    valet unlink\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:159 docs/master/valet.md:159
#, no-wrap
msgid "<a name=\"securing-sites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:159 docs/master/valet.md:159
#, no-wrap
msgid "Securing Sites With TLS"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:162 docs/master/valet.md:162
msgid "By default, Valet serves sites over HTTP. However, if you would like to serve a site over encrypted TLS using HTTP/2, you may use the `secure` command. For example, if your site is being served by Valet on the `laravel.test` domain, you should run the following command to secure it:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:164 docs/master/valet.md:164
#, no-wrap
msgid "    valet secure laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:166 docs/master/valet.md:166
msgid "To \"unsecure\" a site and revert back to serving its traffic over plain HTTP, use the `unsecure` command. Like the `secure` command, this command accepts the hostname that you wish to unsecure:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:168 docs/master/valet.md:168
#, no-wrap
msgid "    valet unsecure laravel\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:170 docs/master/valet.md:170
#, no-wrap
msgid "<a name=\"sharing-sites\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:170 docs/master/valet.md:170
#, no-wrap
msgid "Sharing Sites"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:173 docs/master/valet.md:173
msgid "Valet even includes a command to share your local sites with the world, providing an easy way to test your site on mobile devices or share it with team members and clients."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:175 docs/master/valet.md:175
#, no-wrap
msgid "<a name=\"sharing-sites-via-ngrok\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:175 docs/master/valet.md:175
#, no-wrap
msgid "Sharing Sites Via Ngrok"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:178 docs/master/valet.md:178
msgid "To share a site, navigate to the site's directory in your terminal and run Valet's `share` command. A publicly accessible URL will be inserted into your clipboard and is ready to paste directly into your browser or share with your team:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:182 docs/master/valet.md:182
#, no-wrap
msgid "    valet share\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:184 docs/8.x/valet.md:197 docs/master/valet.md:184
#: docs/master/valet.md:197
msgid "To stop sharing your site, you may press `Control + C`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:186 docs/master/valet.md:186
#, no-wrap
msgid "> {tip} You may pass additional Ngrok parameters to the share command, such as `valet share --region=eu`. For more information, consult the [ngrok documentation](https://ngrok.com/docs).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:188 docs/master/valet.md:188
#, no-wrap
msgid "<a name=\"sharing-sites-via-expose\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:188 docs/master/valet.md:188
#, no-wrap
msgid "Sharing Sites Via Expose"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:191 docs/master/valet.md:191
msgid "If you have [Expose](https://beyondco.de/docs/expose) installed, you can share your site by navigating to the site's directory in your terminal and running the `expose` command. Consult the [Expose documentation](https://beyondco.de/docs/expose/introduction) for information regarding the additional command-line parameters it supports. After sharing the site, Expose will display the sharable URL that you may use on your other devices or amongst team members:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:195 docs/master/valet.md:195
#, no-wrap
msgid "    valet expose\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:199 docs/master/valet.md:199
#, no-wrap
msgid "<a name=\"sharing-sites-on-your-local-network\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:199 docs/master/valet.md:199
#, no-wrap
msgid "Sharing Sites On Your Local Network"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:202 docs/master/valet.md:202
msgid "Valet restricts incoming traffic to the internal `127.0.0.1` interface by default so that your development machine isn't exposed to security risks from the Internet."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:204 docs/master/valet.md:204
msgid "If you wish to allow other devices on your local network to access the Valet sites on your machine via your machine's IP address (eg: `192.168.1.10/application.test`), you will need to manually edit the appropriate Nginx configuration file for that site to remove the restriction on the `listen` directive. You should remove the `127.0.0.1:` prefix on the `listen` directive for ports 80 and 443."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:206 docs/master/valet.md:206
msgid "If you have not run `valet secure` on the project, you can open up network access for all non-HTTPS sites by editing the `/usr/local/etc/nginx/valet/valet.conf` file. However, if you're serving the project site over HTTPS (you have run `valet secure` for the site) then you should edit the `~/.config/valet/Nginx/app-name.test` file."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:208 docs/master/valet.md:208
msgid "Once you have updated your Nginx configuration, run the `valet restart` command to apply the configuration changes."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:210 docs/master/valet.md:210
#, no-wrap
msgid "<a name=\"site-specific-environment-variables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:210 docs/master/valet.md:210
#, no-wrap
msgid "Site Specific Environment Variables"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:213 docs/master/valet.md:213
msgid "Some applications using other frameworks may depend on server environment variables but do not provide a way for those variables to be configured within your project. Valet allows you to configure site specific environment variables by adding a `.valet-env.php` file within the root of your project. This file should return an array of site / environment variable pairs which will be added to the global `$_SERVER` array for each site specified in the array:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:221 docs/master/valet.md:221
#, no-wrap
msgid "    return [\n"
"        // Set $_SERVER['key'] to \"value\" for the laravel.test site...\n"
"        'laravel' => [\n"
"            'key' => 'value',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:227 docs/master/valet.md:227
#, no-wrap
msgid "        // Set $_SERVER['key'] to \"value\" for all sites...\n"
"        '*' => [\n"
"            'key' => 'value',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:229 docs/master/valet.md:229
#, no-wrap
msgid "<a name=\"proxying-services\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:229 docs/master/valet.md:229
#, no-wrap
msgid "Proxying Services"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:232 docs/master/valet.md:232
msgid "Sometimes you may wish to proxy a Valet domain to another service on your local machine. For example, you may occasionally need to run Valet while also running a separate site in Docker; however, Valet and Docker can't both bind to port 80 at the same time."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:234 docs/master/valet.md:234
msgid "To solve this, you may use the `proxy` command to generate a proxy. For example, you may proxy all traffic from `http://elasticsearch.test` to `http://127.0.0.1:9200`:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/valet.md:235 docs/master/valet.md:235
#, no-wrap
msgid "valet proxy elasticsearch http://127.0.0.1:9200\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:240 docs/master/valet.md:240
msgid "You may remove a proxy using the `unproxy` command:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:242 docs/master/valet.md:242
#, no-wrap
msgid "    valet unproxy elasticsearch\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:244 docs/master/valet.md:244
msgid "You may use the `proxies` command to list all site configurations that are proxied:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:246 docs/master/valet.md:246
#, no-wrap
msgid "    valet proxies\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:248 docs/master/valet.md:248
#, no-wrap
msgid "<a name=\"custom-valet-drivers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:248 docs/master/valet.md:248
#, no-wrap
msgid "Custom Valet Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:251 docs/master/valet.md:251
msgid "You can write your own Valet \"driver\" to serve PHP applications running on a framework or CMS that is not natively supported by Valet. When you install Valet, a `~/.config/valet/Drivers` directory is created which contains a `SampleValetDriver.php` file. This file contains a sample driver implementation to demonstrate how to write a custom driver. Writing a driver only requires you to implement three methods: `serves`, `isStaticFile`, and `frontControllerPath`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:253 docs/master/valet.md:253
msgid "All three methods receive the `$sitePath`, `$siteName`, and `$uri` values as their arguments. The `$sitePath` is the fully qualified path to the site being served on your machine, such as `/Users/Lisa/Sites/my-project`. The `$siteName` is the \"host\" / \"site name\" portion of the domain (`my-project`). The `$uri` is the incoming request URI (`/foo/bar`)."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:255 docs/master/valet.md:255
msgid "Once you have completed your custom Valet driver, place it in the `~/.config/valet/Drivers` directory using the `FrameworkValetDriver.php` naming convention. For example, if you are writing a custom valet driver for WordPress, your filename should be `WordPressValetDriver.php`."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:257 docs/master/valet.md:257
msgid "Let's take a look at a sample implementation of each method your custom Valet driver should implement."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:259 docs/master/valet.md:259
#, no-wrap
msgid "<a name=\"the-serves-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:259 docs/master/valet.md:259
#, no-wrap
msgid "The `serves` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:262 docs/master/valet.md:262
msgid "The `serves` method should return `true` if your driver should handle the incoming request. Otherwise, the method should return `false`. So, within this method, you should attempt to determine if the given `$sitePath` contains a project of the type you are trying to serve."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:264 docs/master/valet.md:264
msgid "For example, let's imagine we are writing a `WordPressValetDriver`. Our `serves` method might look something like this:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:277 docs/master/valet.md:277
#, no-wrap
msgid "    /**\n"
"     * Determine if the driver serves the request.\n"
"     *\n"
"     * @param  string  $sitePath\n"
"     * @param  string  $siteName\n"
"     * @param  string  $uri\n"
"     * @return bool\n"
"     */\n"
"    public function serves($sitePath, $siteName, $uri)\n"
"    {\n"
"        return is_dir($sitePath.'/wp-admin');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:279 docs/master/valet.md:279
#, no-wrap
msgid "<a name=\"the-isstaticfile-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:279 docs/master/valet.md:279
#, no-wrap
msgid "The `isStaticFile` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:282 docs/master/valet.md:282
msgid "The `isStaticFile` should determine if the incoming request is for a file that is \"static\", such as an image or a stylesheet. If the file is static, the method should return the fully qualified path to the static file on disk. If the incoming request is not for a static file, the method should return `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:296 docs/master/valet.md:296
#, no-wrap
msgid "    /**\n"
"     * Determine if the incoming request is for a static file.\n"
"     *\n"
"     * @param  string  $sitePath\n"
"     * @param  string  $siteName\n"
"     * @param  string  $uri\n"
"     * @return string|false\n"
"     */\n"
"    public function isStaticFile($sitePath, $siteName, $uri)\n"
"    {\n"
"        if (file_exists($staticFilePath = $sitePath.'/public/'.$uri)) {\n"
"            return $staticFilePath;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:301 docs/master/valet.md:301
#, no-wrap
msgid "> {note} The `isStaticFile` method will only be called if the `serves` method returns `true` for the incoming request and the request URI is not `/`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:303 docs/master/valet.md:303
#, no-wrap
msgid "<a name=\"the-frontcontrollerpath-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:303 docs/master/valet.md:303
#, no-wrap
msgid "The `frontControllerPath` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:306 docs/master/valet.md:306
msgid "The `frontControllerPath` method should return the fully qualified path to your application's \"front controller\", which is typically an \"index.php\" file or equivalent:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:319 docs/master/valet.md:319
#, no-wrap
msgid "    /**\n"
"     * Get the fully resolved path to the application's front controller.\n"
"     *\n"
"     * @param  string  $sitePath\n"
"     * @param  string  $siteName\n"
"     * @param  string  $uri\n"
"     * @return string\n"
"     */\n"
"    public function frontControllerPath($sitePath, $siteName, $uri)\n"
"    {\n"
"        return $sitePath.'/public/index.php';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:321 docs/master/valet.md:321
#, no-wrap
msgid "<a name=\"local-drivers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/valet.md:321 docs/master/valet.md:321
#, no-wrap
msgid "Local Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:324 docs/master/valet.md:324
msgid "If you would like to define a custom Valet driver for a single application, create a `LocalValetDriver.php` file in the application's root directory. Your custom driver may extend the base `ValetDriver` class or extend an existing application specific driver such as the `LaravelValetDriver`:"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:339 docs/master/valet.md:339
#, no-wrap
msgid "    class LocalValetDriver extends LaravelValetDriver\n"
"    {\n"
"        /**\n"
"         * Determine if the driver serves the request.\n"
"         *\n"
"         * @param  string  $sitePath\n"
"         * @param  string  $siteName\n"
"         * @param  string  $uri\n"
"         * @return bool\n"
"         */\n"
"        public function serves($sitePath, $siteName, $uri)\n"
"        {\n"
"            return true;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:353 docs/master/valet.md:353
#, no-wrap
msgid "        /**\n"
"         * Get the fully resolved path to the application's front controller.\n"
"         *\n"
"         * @param  string  $sitePath\n"
"         * @param  string  $siteName\n"
"         * @param  string  $uri\n"
"         * @return string\n"
"         */\n"
"        public function frontControllerPath($sitePath, $siteName, $uri)\n"
"        {\n"
"            return $sitePath.'/public_html/index.php';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:355 docs/master/valet.md:355
#, no-wrap
msgid "<a name=\"other-valet-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:355 docs/master/valet.md:355
#, no-wrap
msgid "Other Valet Commands"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:367 docs/master/valet.md:367
msgid "Command | Description ------------- | ------------- `valet forget` | Run this command from a \"parked\" directory to remove it from the parked directory list.  `valet log` | View a list of logs which are written by Valet's services.  `valet paths` | View all of your \"parked\" paths.  `valet restart` | Restart the Valet daemons.  `valet start` | Start the Valet daemons.  `valet stop` | Stop the Valet daemons.  `valet trust` | Add sudoers files for Brew and Valet to allow Valet commands to be run without prompting for your password.  `valet uninstall` | Uninstall Valet: shows instructions for manual uninstall. Pass the `--force` option to aggressively delete all of Valet's resources."
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:369 docs/master/valet.md:369
#, no-wrap
msgid "<a name=\"valet-directories-and-files\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/valet.md:369 docs/master/valet.md:369
#, no-wrap
msgid "Valet Directories & Files"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:372 docs/master/valet.md:372
msgid "You may find the following directory and file information helpful while troubleshooting issues with your Valet environment:"
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:373 docs/master/valet.md:373
#, no-wrap
msgid "`~/.config/valet`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:376 docs/master/valet.md:376
msgid "Contains all of Valet's configuration. You may wish to maintain a backup of this directory."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:377 docs/master/valet.md:377
#, no-wrap
msgid "`~/.config/valet/dnsmasq.d/`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:380 docs/master/valet.md:380
msgid "This directory contains DNSMasq's configuration."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:381 docs/master/valet.md:381
#, no-wrap
msgid "`~/.config/valet/Drivers/`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:384 docs/master/valet.md:384
msgid "This directory contains Valet's drivers. Drivers determine how a particular framework / CMS is served."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:385 docs/master/valet.md:385
#, no-wrap
msgid "`~/.config/valet/Extensions/`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:388 docs/master/valet.md:388
msgid "This directory contains custom Valet extensions / commands."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:389 docs/master/valet.md:389
#, no-wrap
msgid "`~/.config/valet/Nginx/`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:392 docs/master/valet.md:392
msgid "This directory contains all of Valet's Nginx site configurations. These files are rebuilt when running the `install`, `secure`, and `tld` commands."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:393 docs/master/valet.md:393
#, no-wrap
msgid "`~/.config/valet/Sites/`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:396 docs/master/valet.md:396
msgid "This directory contains all of the symbolic links for your [linked projects](#the-link-command)."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:397 docs/master/valet.md:397
#, no-wrap
msgid "`~/.config/valet/config.json`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:400 docs/master/valet.md:400
msgid "This file is Valet's master configuration file."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:401 docs/master/valet.md:401
#, no-wrap
msgid "`~/.config/valet/valet.sock`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:404 docs/master/valet.md:404
msgid "This file is the PHP-FPM socket used by Valet's Nginx installation. This will only exist if PHP is running properly."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:405 docs/master/valet.md:405
#, no-wrap
msgid "`~/.config/valet/Log/fpm-php.www.log`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:408 docs/master/valet.md:408
msgid "This file is the user log for PHP errors."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:409 docs/master/valet.md:409
#, no-wrap
msgid "`~/.config/valet/Log/nginx-error.log`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:412 docs/master/valet.md:412
msgid "This file is the user log for Nginx errors."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:413 docs/master/valet.md:413
#, no-wrap
msgid "`/usr/local/var/log/php-fpm.log`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:416 docs/master/valet.md:416
msgid "This file is the system log for PHP-FPM errors."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:417 docs/master/valet.md:417
#, no-wrap
msgid "`/usr/local/var/log/nginx`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:420 docs/master/valet.md:420
msgid "This directory contains the Nginx access and error logs."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:421 docs/master/valet.md:421
#, no-wrap
msgid "`/usr/local/etc/php/X.X/conf.d`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:424 docs/master/valet.md:424
msgid "This directory contains the `*.ini` files for various PHP configuration settings."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:425 docs/master/valet.md:425
#, no-wrap
msgid "`/usr/local/etc/php/X.X/php-fpm.d/valet-fpm.conf`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:428 docs/master/valet.md:428
msgid "This file is the PHP-FPM pool configuration file."
msgstr ""

#. type: Title ####
#: docs/8.x/valet.md:429 docs/master/valet.md:429
#, no-wrap
msgid "`~/.composer/vendor/laravel/valet/cli/stubs/secure.valet.conf`"
msgstr ""

#. type: Plain text
#: docs/8.x/valet.md:431 docs/master/valet.md:431
msgid "This file is the default Nginx configuration used for building SSL certificates for your sites."
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Validation Quickstart](#validation-quickstart)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Defining The Routes](#quick-defining-the-routes)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Creating The Controller](#quick-creating-the-controller)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Writing The Validation Logic](#quick-writing-the-validation-logic)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Displaying The Validation Errors](#quick-displaying-the-validation-errors)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Repopulating Forms](#repopulating-forms)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[A Note On Optional Fields](#a-note-on-optional-fields)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Form Request Validation](#form-request-validation)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Creating Form Requests](#creating-form-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Authorizing Form Requests](#authorizing-form-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Customizing The Error Messages](#customizing-the-error-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Preparing Input For Validation](#preparing-input-for-validation)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Manually Creating Validators](#manually-creating-validators)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Automatic Redirection](#automatic-redirection)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Named Error Bags](#named-error-bags)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Customizing The Error Messages](#manual-customizing-the-error-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[After Validation Hook](#after-validation-hook)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Working With Error Messages](#working-with-error-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Specifying Custom Messages In Language Files](#specifying-custom-messages-in-language-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Specifying Attributes In Language Files](#specifying-attribute-in-language-files)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Specifying Values In Language Files](#specifying-values-in-language-files)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Available Validation Rules](#available-validation-rules)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Conditionally Adding Rules](#conditionally-adding-rules)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Validating Arrays](#validating-arrays)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Custom Validation Rules](#custom-validation-rules)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Using Rule Objects](#using-rule-objects)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Using Closures](#using-closures)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/validation.md:32 docs/master/validation.md:32
msgid "[Implicit Rules](#implicit-rules)"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:37 docs/master/validation.md:37
msgid "Laravel provides several different approaches to validate your application's incoming data. It is most common to use the `validate` method available on all incoming HTTP requests. However, we will discuss other approaches to validation as well."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:39 docs/master/validation.md:39
msgid "Laravel includes a wide variety of convenient validation rules that you may apply to data, even providing the ability to validate if values are unique in a given database table. We'll cover each of these validation rules in detail so that you are familiar with all of Laravel's validation features."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:41 docs/master/validation.md:41
#, no-wrap
msgid "<a name=\"validation-quickstart\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:41 docs/master/validation.md:41
#, no-wrap
msgid "Validation Quickstart"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:44 docs/master/validation.md:44
msgid "To learn about Laravel's powerful validation features, let's look at a complete example of validating a form and displaying the error messages back to the user. By reading this high-level overview, you'll be able to gain a good general understanding of how to validate incoming request data using Laravel:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:46 docs/master/validation.md:46
#, no-wrap
msgid "<a name=\"quick-defining-the-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:46 docs/master/validation.md:46
#, no-wrap
msgid "Defining The Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:49 docs/master/validation.md:49
msgid "First, let's assume we have the following routes defined in our `routes/web.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:51 docs/master/validation.md:51
#, no-wrap
msgid "    use App\\Http\\Controllers\\PostController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:54 docs/master/validation.md:54
#, no-wrap
msgid "    Route::get('/post/create', [PostController::class, 'create']);\n"
"    Route::post('/post', [PostController::class, 'store']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:56 docs/master/validation.md:56
msgid "The `GET` route will display a form for the user to create a new blog post, while the `POST` route will store the new blog post in the database."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:58 docs/master/validation.md:58
#, no-wrap
msgid "<a name=\"quick-creating-the-controller\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:58 docs/master/validation.md:58
#, no-wrap
msgid "Creating The Controller"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:61 docs/master/validation.md:61
msgid "Next, let's take a look at a simple controller that handles incoming requests to these routes. We'll leave the `store` method empty for now:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:80 docs/master/validation.md:80
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the form to create a new blog post.\n"
"         *\n"
"         * @return \\Illuminate\\View\\View\n"
"         */\n"
"        public function create()\n"
"        {\n"
"            return view('post.create');\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:92 docs/master/validation.md:92
#, no-wrap
msgid "        /**\n"
"         * Store a new blog post.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            // Validate and store the blog post...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:94 docs/master/validation.md:94
#, no-wrap
msgid "<a name=\"quick-writing-the-validation-logic\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:94 docs/master/validation.md:94
#, no-wrap
msgid "Writing The Validation Logic"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:97 docs/master/validation.md:97
msgid "Now we are ready to fill in our `store` method with the logic to validate the new blog post. To do this, we will use the `validate` method provided by the `Illuminate\\Http\\Request` object. If the validation rules pass, your code will keep executing normally; however, if validation fails, an exception will be thrown and the proper error response will automatically be sent back to the user."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:99 docs/master/validation.md:99
msgid "If validation fails during a traditional HTTP request, a redirect response to the previous URL will be generated. If the incoming request is an XHR request, a JSON response containing the validation error messages will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:101 docs/master/validation.md:101
msgid "To get a better understanding of the `validate` method, let's jump back into the `store` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:114 docs/master/validation.md:114
#, no-wrap
msgid "    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $validated = $request->validate([\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:117 docs/master/validation.md:117
#, no-wrap
msgid "        // The blog post is valid...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:119 docs/master/validation.md:119
msgid "As you can see, the validation rules are passed into the `validate` method. Don't worry - all available validation rules are [documented](#available-validation-rules). Again, if the validation fails, the proper response will automatically be generated. If the validation passes, our controller will continue executing normally."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:121 docs/master/validation.md:121
msgid "Alternatively, validation rules may be specified as arrays of rules instead of a single `|` delimited string:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:126 docs/master/validation.md:126
#, no-wrap
msgid "    $validatedData = $request->validate([\n"
"        'title' => ['required', 'unique:posts', 'max:255'],\n"
"        'body' => ['required'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:128 docs/master/validation.md:128
msgid "In addition, you may use the `validateWithBag` method to validate a request and store any error messages within a [named error bag](#named-error-bags):"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:133 docs/master/validation.md:133
#, no-wrap
msgid "    $validatedData = $request->validateWithBag('post', [\n"
"        'title' => ['required', 'unique:posts', 'max:255'],\n"
"        'body' => ['required'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:135 docs/master/validation.md:135
#, no-wrap
msgid "<a name=\"stopping-on-first-validation-failure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:135 docs/8.x/validation.md:461
#: docs/master/validation.md:135
#, no-wrap
msgid "Stopping On First Validation Failure"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:138 docs/master/validation.md:138
msgid "Sometimes you may wish to stop running validation rules on an attribute after the first validation failure. To do so, assign the `bail` rule to the attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:143 docs/master/validation.md:143
#, no-wrap
msgid "    $request->validate([\n"
"        'title' => 'bail|required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:145 docs/master/validation.md:145
msgid "In this example, if the `unique` rule on the `title` attribute fails, the `max` rule will not be checked. Rules will be validated in the order they are assigned."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:147 docs/master/validation.md:147
#, no-wrap
msgid "<a name=\"a-note-on-nested-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:147 docs/master/validation.md:147
#, no-wrap
msgid "A Note On Nested Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:150 docs/master/validation.md:150
msgid "If the incoming HTTP request contains \"nested\" field data, you may specify these fields in your validation rules using \"dot\" syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:156 docs/master/validation.md:156
#, no-wrap
msgid "    $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'author.name' => 'required',\n"
"        'author.description' => 'required',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:158 docs/master/validation.md:158
msgid "On the other hand, if your field name contains a literal period, you can explicitly prevent this from being interpreted as \"dot\" syntax by escaping the period with a backslash:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:163 docs/master/validation.md:163
#, no-wrap
msgid "    $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'v1\\.0' => 'required',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:165 docs/master/validation.md:165
#, no-wrap
msgid "<a name=\"quick-displaying-the-validation-errors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:165 docs/master/validation.md:165
#, no-wrap
msgid "Displaying The Validation Errors"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:168 docs/master/validation.md:168
msgid "So, what if the incoming request fields do not pass the given validation rules? As mentioned previously, Laravel will automatically redirect the user back to their previous location. In addition, all of the validation errors and [request input](/docs/{{version}}/requests#retrieving-old-input) will automatically be [flashed to the session](/docs/{{version}}/session#flash-data)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:170 docs/master/validation.md:170
msgid "An `$errors` variable is shared with all of your application's views by the `Illuminate\\View\\Middleware\\ShareErrorsFromSession` middleware, which is provided by the `web` middleware group. When this middleware is applied an `$errors` variable will always be available in your views, allowing you to conveniently assume the `$errors` variable is always defined and can be safely used. The `$errors` variable will be an instance of `Illuminate\\Support\\MessageBag`. For more information on working with this object, [check out its documentation](#working-with-error-messages)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:172 docs/master/validation.md:172
msgid "So, in our example, the user will be redirected to our controller's `create` method when validation fails, allowing us to display the error messages in the view:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/validation.md:173 docs/master/validation.md:173
#, no-wrap
msgid "<!-- /resources/views/post/create.blade.php -->\n\n"
"<h1>Create Post</h1>\n\n"
"@if ($errors->any())\n"
"    <div class=\"alert alert-danger\">\n"
"        <ul>\n"
"            @foreach ($errors->all() as $error)\n"
"                <li>{{ $error }}</li>\n"
"            @endforeach\n"
"        </ul>\n"
"    </div>\n"
"@endif\n\n"
"<!-- Create Post Form -->\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:192 docs/master/validation.md:192
#, no-wrap
msgid "<a name=\"quick-customizing-the-error-messages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:192 docs/8.x/validation.md:366
#: docs/8.x/validation.md:498 docs/master/validation.md:192
#: docs/master/validation.md:353 docs/master/validation.md:477
#, no-wrap
msgid "Customizing The Error Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:195 docs/8.x/validation.md:603
#: docs/master/validation.md:195 docs/master/validation.md:582
msgid "Laravel's built-in validation rules each has an error message that is located in your application's `resources/lang/en/validation.php` file. Within this file, you will find a translation entry for each validation rule. You are free to change or modify these messages based on the needs of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:197 docs/8.x/validation.md:605
#: docs/master/validation.md:197 docs/master/validation.md:584
msgid "In addition, you may copy this file to another translation language directory to translate the messages for your application's language. To learn more about Laravel localization, check out the complete [localization documentation](/docs/{{version}}/localization)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:199 docs/master/validation.md:199
#, no-wrap
msgid "<a name=\"quick-xhr-requests-and-validation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:199 docs/master/validation.md:199
#, no-wrap
msgid "XHR Requests & Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:202 docs/master/validation.md:202
msgid "In this example, we used a traditional form to send data to the application. However, many applications receive XHR requests from a JavaScript powered frontend. When using the `validate` method during an XHR request, Laravel will not generate a redirect response. Instead, Laravel generates a JSON response containing all of the validation errors. This JSON response will be sent with a 422 HTTP status code."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:204 docs/master/validation.md:204
#, no-wrap
msgid "<a name=\"the-at-error-directive\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:204 docs/master/validation.md:204
#, no-wrap
msgid "The `@error` Directive"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:207 docs/master/validation.md:207
msgid "You may use the `@error` [Blade](/docs/{{version}}/blade) directive to quickly determine if validation error messages exist for a given attribute. Within an `@error` directive, you may echo the `$message` variable to display the error message:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:221 docs/master/validation.md:221
#, no-wrap
msgid "<a name=\"repopulating-forms\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:221 docs/master/validation.md:221
#, no-wrap
msgid "Repopulating Forms"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:224 docs/master/validation.md:224
msgid "When Laravel generates a redirect response due to a validation error, the framework will automatically [flash all of the request's input to the session](/docs/{{version}}/session#flash-data). This is done so that you may conveniently access the input during the next request and repopulate the form that the user attempted to submit."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:228 docs/master/validation.md:228
#, no-wrap
msgid "    $title = $request->old('title');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:232 docs/master/validation.md:232
#, no-wrap
msgid "    <input type=\"text\" name=\"title\" value=\"{{ old('title') }}\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:234 docs/master/validation.md:234
#, no-wrap
msgid "<a name=\"a-note-on-optional-fields\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:234 docs/master/validation.md:234
#, no-wrap
msgid "A Note On Optional Fields"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:237 docs/master/validation.md:237
msgid "By default, Laravel includes the `TrimStrings` and `ConvertEmptyStringsToNull` middleware in your application's global middleware stack. These middleware are listed in the stack by the `App\\Http\\Kernel` class. Because of this, you will often need to mark your \"optional\" request fields as `nullable` if you do not want the validator to consider `null` values as invalid. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:243 docs/master/validation.md:243
#, no-wrap
msgid "    $request->validate([\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"        'publish_at' => 'nullable|date',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:245 docs/master/validation.md:245
msgid "In this example, we are specifying that the `publish_at` field may be either `null` or a valid date representation. If the `nullable` modifier is not added to the rule definition, the validator would consider `null` an invalid date."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:247 docs/master/validation.md:247
#, no-wrap
msgid "<a name=\"form-request-validation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:247 docs/master/validation.md:247
#, no-wrap
msgid "Form Request Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:250 docs/master/validation.md:250
#, no-wrap
msgid "<a name=\"creating-form-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:250 docs/master/validation.md:250
#, no-wrap
msgid "Creating Form Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:253 docs/master/validation.md:253
msgid "For more complex validation scenarios, you may wish to create a \"form request\". Form requests are custom request classes that encapsulate their own validation and authorization logic. To create a form request class, you may use the `make:request` Artisan CLI command:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:255 docs/master/validation.md:255
#, no-wrap
msgid "    php artisan make:request StorePostRequest\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:257 docs/master/validation.md:257
msgid "The generated form request class will be placed in the `app/Http/Requests` directory. If this directory does not exist, it will be created when you run the `make:request` command. Each form request generated by Laravel has two methods: `authorize` and `rules`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:259 docs/master/validation.md:259
msgid "As you might have guessed, the `authorize` method is responsible for determining if the currently authenticated user can perform the action represented by the request, while the `rules` method returns the validation rules that should apply to the request's data:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:272 docs/master/validation.md:272
#, no-wrap
msgid "    /**\n"
"     * Get the validation rules that apply to the request.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function rules()\n"
"    {\n"
"        return [\n"
"            'title' => 'required|unique:posts|max:255',\n"
"            'body' => 'required',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:274 docs/master/validation.md:274
#, no-wrap
msgid "> {tip} You may type-hint any dependencies you require within the `rules` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:276 docs/master/validation.md:276
msgid "So, how are the validation rules evaluated? All you need to do is type-hint the request on your controller method. The incoming form request is validated before the controller method is called, meaning you do not need to clutter your controller with any validation logic:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:286 docs/master/validation.md:286
#, no-wrap
msgid "    /**\n"
"     * Store a new blog post.\n"
"     *\n"
"     * @param  \\App\\Http\\Requests\\StorePostRequest  $request\n"
"     * @return Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(StorePostRequest $request)\n"
"    {\n"
"        // The incoming request is valid...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:290 docs/master/validation.md:290
#, no-wrap
msgid "        // Retrieve the validated input data...\n"
"        $validated = $request->validated();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:292 docs/master/validation.md:292
msgid "If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an XHR request, an HTTP response with a 422 status code will be returned to the user including a JSON representation of the validation errors."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:294 docs/master/validation.md:294
#, no-wrap
msgid "<a name=\"adding-after-hooks-to-form-requests\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:294 docs/master/validation.md:294
#, no-wrap
msgid "Adding After Hooks To Form Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:297 docs/master/validation.md:297
msgid "If you would like to add an \"after\" validation hook to a form request, you may use the `withValidator` method. This method receives the fully constructed validator, allowing you to call any of its methods before the validation rules are actually evaluated:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:312 docs/master/validation.md:312
#, no-wrap
msgid "    /**\n"
"     * Configure the validator instance.\n"
"     *\n"
"     * @param  \\Illuminate\\Validation\\Validator  $validator\n"
"     * @return void\n"
"     */\n"
"    public function withValidator($validator)\n"
"    {\n"
"        $validator->after(function ($validator) {\n"
"            if ($this->somethingElseIsInvalid()) {\n"
"                $validator->errors()->add('field', 'Something is wrong with this field!');\n"
"            }\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:315
#, no-wrap
msgid "<a name=\"request-stopping-on-first-validation-rule-failure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:315
#, no-wrap
msgid "Stopping On First Validation Failure Attribute"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:318
msgid "By adding a `stopOnFirstFailure` property to your request class, you may inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:325
#, no-wrap
msgid "    /**\n"
"     * Indicates if the validator should stop on the first rule failure.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $stopOnFirstFailure = true;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:327 docs/master/validation.md:314
#, no-wrap
msgid "<a name=\"authorizing-form-requests\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:327 docs/master/validation.md:314
#, no-wrap
msgid "Authorizing Form Requests"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:330 docs/master/validation.md:317
msgid "The form request class also contains an `authorize` method. Within this method, you may determine if the authenticated user actually has the authority to update a given resource. For example, you may determine if a user actually owns a blog comment they are attempting to update. Most likely, you will interact with your [authorization gates and policies](/docs/{{version}}/authorization) within this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:341 docs/master/validation.md:328
#, no-wrap
msgid "    /**\n"
"     * Determine if the user is authorized to make this request.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function authorize()\n"
"    {\n"
"        $comment = Comment::find($this->route('comment'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:344 docs/master/validation.md:331
#, no-wrap
msgid "        return $comment && $this->user()->can('update', $comment);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:346 docs/master/validation.md:333
msgid "Since all form requests extend the base Laravel request class, we may use the `user` method to access the currently authenticated user. Also, note the call to the `route` method in the example above. This method grants you access to the URI parameters defined on the route being called, such as the `{comment}` parameter in the example below:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:348 docs/master/validation.md:335
#, no-wrap
msgid "    Route::post('/comment/{comment}');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:350 docs/master/validation.md:337
msgid "If the `authorize` method returns `false`, an HTTP response with a 403 status code will automatically be returned and your controller method will not execute."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:352 docs/master/validation.md:339
msgid "If you plan to handle authorization logic for the request in another part of your application, you may simply return `true` from the `authorize` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:362 docs/master/validation.md:349
#, no-wrap
msgid "    /**\n"
"     * Determine if the user is authorized to make this request.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function authorize()\n"
"    {\n"
"        return true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:364 docs/master/validation.md:351
#, no-wrap
msgid "> {tip} You may type-hint any dependencies you need within the `authorize` method's signature. They will automatically be resolved via the Laravel [service container](/docs/{{version}}/container).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:366 docs/master/validation.md:353
#, no-wrap
msgid "<a name=\"customizing-the-error-messages\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:369 docs/master/validation.md:356
msgid "You may customize the error messages used by the form request by overriding the `messages` method. This method should return an array of attribute / rule pairs and their corresponding error messages:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:382 docs/master/validation.md:369
#, no-wrap
msgid "    /**\n"
"     * Get the error messages for the defined validation rules.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function messages()\n"
"    {\n"
"        return [\n"
"            'title.required' => 'A title is required',\n"
"            'body.required' => 'A message is required',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:384 docs/master/validation.md:371
#, no-wrap
msgid "<a name=\"customizing-the-validation-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:384 docs/master/validation.md:371
#, no-wrap
msgid "Customizing The Validation Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:387 docs/master/validation.md:374
msgid "Many of Laravel's built-in validation rule error messages contain an `:attribute` placeholder. If you would like the `:attribute` placeholder of your validation message to be replaced with a custom attribute name, you may specify the custom names by overriding the `attributes` method. This method should return an array of attribute / name pairs:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:399 docs/master/validation.md:386
#, no-wrap
msgid "    /**\n"
"     * Get custom attributes for validator errors.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function attributes()\n"
"    {\n"
"        return [\n"
"            'email' => 'email address',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:401 docs/master/validation.md:388
#, no-wrap
msgid "<a name=\"preparing-input-for-validation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:401 docs/master/validation.md:388
#, no-wrap
msgid "Preparing Input For Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:404 docs/master/validation.md:391
msgid "If you need to prepare or sanitize any data from the request before you apply your validation rules, you may use the `prepareForValidation` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:418 docs/master/validation.md:405
#, no-wrap
msgid "    /**\n"
"     * Prepare the data for validation.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function prepareForValidation()\n"
"    {\n"
"        $this->merge([\n"
"            'slug' => Str::slug($this->slug),\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:420 docs/master/validation.md:407
#, no-wrap
msgid "<a name=\"manually-creating-validators\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:420 docs/master/validation.md:407
#, no-wrap
msgid "Manually Creating Validators"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:423 docs/master/validation.md:410
msgid "If you do not want to use the `validate` method on the request, you may create a validator instance manually using the `Validator` [facade](/docs/{{version}}/facades). The `make` method on the facade generates a new validator instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:431 docs/master/validation.md:418
#, no-wrap
msgid "    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Validator;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:446 docs/master/validation.md:433
#, no-wrap
msgid "    class PostController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new blog post.\n"
"         *\n"
"         * @param  Request  $request\n"
"         * @return Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $validator = Validator::make($request->all(), [\n"
"                'title' => 'required|unique:posts|max:255',\n"
"                'body' => 'required',\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:452 docs/master/validation.md:439
#, no-wrap
msgid "            if ($validator->fails()) {\n"
"                return redirect('post/create')\n"
"                            ->withErrors($validator)\n"
"                            ->withInput();\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:456 docs/master/validation.md:443
#, no-wrap
msgid "            // Store the blog post...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:458 docs/master/validation.md:445
msgid "The first argument passed to the `make` method is the data under validation. The second argument is an array of the validation rules that should be applied to the data."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:460 docs/master/validation.md:447
msgid "After determining whether the request validation failed, you may use the `withErrors` method to flash the error messages to the session. When using this method, the `$errors` variable will automatically be shared with your views after redirection, allowing you to easily display them back to the user. The `withErrors` method accepts a validator, a `MessageBag`, or a PHP `array`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:464
msgid "The `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:468 docs/8.x/validation.md:798
#, no-wrap
msgid "    if ($validator->stopOnFirstFailure()->fails()) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:470 docs/master/validation.md:449
#, no-wrap
msgid "<a name=\"automatic-redirection\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:470 docs/master/validation.md:449
#, no-wrap
msgid "Automatic Redirection"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:473 docs/master/validation.md:452
msgid "If you would like to create a validator instance manually but still take advantage of the automatic redirection offered by the HTTP request's `validate` method, you may call the `validate` method on an existing validator instance. If validation fails, the user will automatically be redirected or, in the case of an XHR request, a JSON response will be returned:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:478 docs/master/validation.md:457
#, no-wrap
msgid "    Validator::make($request->all(), [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ])->validate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:480 docs/master/validation.md:459
msgid "You may use the `validateWithBag` method to store the error messages in a [named error bag](#named-error-bags) if validation fails:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:485 docs/master/validation.md:464
#, no-wrap
msgid "    Validator::make($request->all(), [\n"
"        'title' => 'required|unique:posts|max:255',\n"
"        'body' => 'required',\n"
"    ])->validateWithBag('post');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:487 docs/master/validation.md:466
#, no-wrap
msgid "<a name=\"named-error-bags\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:487 docs/master/validation.md:466
#, no-wrap
msgid "Named Error Bags"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:490 docs/master/validation.md:469
msgid "If you have multiple forms on a single page, you may wish to name the `MessageBag` containing the validation errors, allowing you to retrieve the error messages for a specific form. To achieve this, pass a name as the second argument to `withErrors`:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:492 docs/master/validation.md:471
#, no-wrap
msgid "    return redirect('register')->withErrors($validator, 'login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:494 docs/master/validation.md:473
msgid "You may then access the named `MessageBag` instance from the `$errors` variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:496 docs/master/validation.md:475
#, no-wrap
msgid "    {{ $errors->login->first('email') }}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:498 docs/master/validation.md:477
#, no-wrap
msgid "<a name=\"manual-customizing-the-error-messages\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:501 docs/master/validation.md:480
msgid "If needed, you may provide custom error messages that a validator instance should use instead of the default error messages provided by Laravel. There are several ways to specify custom messages. First, you may pass the custom messages as the third argument to the `Validator::make` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:505 docs/master/validation.md:484
#, no-wrap
msgid "    $validator = Validator::make($input, $rules, $messages = [\n"
"        'required' => 'The :attribute field is required.',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:507 docs/master/validation.md:486
msgid "In this example, the `:attribute` placeholder will be replaced by the actual name of the field under validation. You may also utilize other placeholders in validation messages. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:514 docs/master/validation.md:493
#, no-wrap
msgid "    $messages = [\n"
"        'same' => 'The :attribute and :other must match.',\n"
"        'size' => 'The :attribute must be exactly :size.',\n"
"        'between' => 'The :attribute value :input is not between :min - :max.',\n"
"        'in' => 'The :attribute must be one of the following types: :values',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:516 docs/master/validation.md:495
#, no-wrap
msgid "<a name=\"specifying-a-custom-message-for-a-given-attribute\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:516 docs/master/validation.md:495
#, no-wrap
msgid "Specifying A Custom Message For A Given Attribute"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:519 docs/master/validation.md:498
msgid "Sometimes you may wish to specify a custom error message only for a specific attribute. You may do so using \"dot\" notation. Specify the attribute's name first, followed by the rule:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:523 docs/master/validation.md:502
#, no-wrap
msgid "    $messages = [\n"
"        'email.required' => 'We need to know your email address!',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:525 docs/master/validation.md:504
#, no-wrap
msgid "<a name=\"specifying-custom-attribute-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:525 docs/master/validation.md:504
#, no-wrap
msgid "Specifying Custom Attribute Values"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:528 docs/master/validation.md:507
msgid "Many of Laravel's built-in error messages include an `:attribute:` placeholder that is replaced with the name of the field or attribute under validation. To customize the values used to replace these placeholders for specific fields, you may pass an array of custom attributes as the fourth argument to the `Validator::make` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:532 docs/master/validation.md:511
#, no-wrap
msgid "    $validator = Validator::make($input, $rules, $messages, [\n"
"        'email' => 'email address',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:534 docs/master/validation.md:513
#, no-wrap
msgid "<a name=\"after-validation-hook\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:534 docs/master/validation.md:513
#, no-wrap
msgid "After Validation Hook"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:537 docs/master/validation.md:516
msgid "You may also attach callbacks to be run after validation is completed. This allows you to easily perform further validation and even add more error messages to the message collection. To get started, call the `after` method on a validator instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:539 docs/master/validation.md:518
#, no-wrap
msgid "    $validator = Validator::make(...);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:547 docs/master/validation.md:526
#, no-wrap
msgid "    $validator->after(function ($validator) {\n"
"        if ($this->somethingElseIsInvalid()) {\n"
"            $validator->errors()->add(\n"
"                'field', 'Something is wrong with this field!'\n"
"            );\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:551 docs/master/validation.md:530
#, no-wrap
msgid "    if ($validator->fails()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:553 docs/master/validation.md:532
#, no-wrap
msgid "<a name=\"working-with-error-messages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:553 docs/master/validation.md:532
#, no-wrap
msgid "Working With Error Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:556 docs/master/validation.md:535
msgid "After calling the `errors` method on a `Validator` instance, you will receive an `Illuminate\\Support\\MessageBag` instance, which has a variety of convenient methods for working with error messages. The `$errors` variable that is automatically made available to all views is also an instance of the `MessageBag` class."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:558 docs/master/validation.md:537
#, no-wrap
msgid "<a name=\"retrieving-the-first-error-message-for-a-field\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:558 docs/master/validation.md:537
#, no-wrap
msgid "Retrieving The First Error Message For A Field"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:561 docs/master/validation.md:540
msgid "To retrieve the first error message for a given field, use the `first` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:563 docs/master/validation.md:542
#, no-wrap
msgid "    $errors = $validator->errors();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:565 docs/master/validation.md:544
#, no-wrap
msgid "    echo $errors->first('email');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:567 docs/master/validation.md:546
#, no-wrap
msgid "<a name=\"retrieving-all-error-messages-for-a-field\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:567 docs/master/validation.md:546
#, no-wrap
msgid "Retrieving All Error Messages For A Field"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:570 docs/master/validation.md:549
msgid "If you need to retrieve an array of all the messages for a given field, use the `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:574 docs/master/validation.md:553
#, no-wrap
msgid "    foreach ($errors->get('email') as $message) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:576 docs/master/validation.md:555
msgid "If you are validating an array form field, you may retrieve all of the messages for each of the array elements using the `*` character:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:580 docs/master/validation.md:559
#, no-wrap
msgid "    foreach ($errors->get('attachments.*') as $message) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:582 docs/master/validation.md:561
#, no-wrap
msgid "<a name=\"retrieving-all-error-messages-for-all-fields\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:582 docs/master/validation.md:561
#, no-wrap
msgid "Retrieving All Error Messages For All Fields"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:585 docs/master/validation.md:564
msgid "To retrieve an array of all messages for all fields, use the `all` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:589 docs/master/validation.md:568
#, no-wrap
msgid "    foreach ($errors->all() as $message) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:591 docs/master/validation.md:570
#, no-wrap
msgid "<a name=\"determining-if-messages-exist-for-a-field\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:591 docs/master/validation.md:570
#, no-wrap
msgid "Determining If Messages Exist For A Field"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:594 docs/master/validation.md:573
msgid "The `has` method may be used to determine if any error messages exist for a given field:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:598 docs/master/validation.md:577
#, no-wrap
msgid "    if ($errors->has('email')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:600 docs/master/validation.md:579
#, no-wrap
msgid "<a name=\"specifying-custom-messages-in-language-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:600 docs/master/validation.md:579
#, no-wrap
msgid "Specifying Custom Messages In Language Files"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:607 docs/master/validation.md:586
#, no-wrap
msgid "<a name=\"custom-messages-for-specific-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:607 docs/master/validation.md:586
#, no-wrap
msgid "Custom Messages For Specific Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:610 docs/master/validation.md:589
msgid "You may customize the error messages used for specified attribute and rule combinations within your application's validation language files. To do so, add your message customizations to the `custom` array of your application's `resources/lang/xx/validation.php` language file:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:617 docs/master/validation.md:596
#, no-wrap
msgid "    'custom' => [\n"
"        'email' => [\n"
"            'required' => 'We need to know your email address!',\n"
"            'max' => 'Your email address is too long!'\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:619 docs/master/validation.md:598
#, no-wrap
msgid "<a name=\"specifying-attribute-in-language-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:619 docs/master/validation.md:598
#, no-wrap
msgid "Specifying Attributes In Language Files"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:622 docs/master/validation.md:601
msgid "Many of Laravel's built-in error messages include an `:attribute:` placeholder that is replaced with the name of the field or attribute under validation. If you would like the `:attribute` portion of your validation message to be replaced with a custom value, you may specify the custom attribute name in the `attributes` array of your `resources/lang/xx/validation.php` language file:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:626 docs/master/validation.md:605
#, no-wrap
msgid "    'attributes' => [\n"
"        'email' => 'email address',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:628 docs/master/validation.md:607
#, no-wrap
msgid "<a name=\"specifying-values-in-language-files\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:628 docs/master/validation.md:607
#, no-wrap
msgid "Specifying Values In Language Files"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:631 docs/master/validation.md:610
msgid "Some of Laravel's built-in validation rule error messages contain a `:value` placeholder that is replaced with the current value of the request attribute. However, you may occasionally need the `:value` portion of your validation message to be replaced with a custom representation of the value. For example, consider the following rule that specifies that a credit card number is required if the `payment_type` has a value of `cc`:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:635 docs/master/validation.md:614
#, no-wrap
msgid "    Validator::make($request->all(), [\n"
"        'credit_card_number' => 'required_if:payment_type,cc'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:637 docs/master/validation.md:616
msgid "If this validation rule fails, it will produce the following error message:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:639 docs/master/validation.md:618
#, no-wrap
msgid "    The credit card number field is required when payment type is cc.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:641 docs/master/validation.md:620
msgid "Instead of displaying `cc` as the payment type value, you may specify a more user-friendly value representation in your `resources/lang/xx/validation.php` language file by defining a `values` array:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:647 docs/master/validation.md:626
#, no-wrap
msgid "    'values' => [\n"
"        'payment_type' => [\n"
"            'cc' => 'credit card'\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:649 docs/master/validation.md:628
msgid "After defining this value, the validation rule will produce the following error message:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:651 docs/master/validation.md:630
#, no-wrap
msgid "    The credit card number field is required when payment type is credit card.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:653 docs/master/validation.md:632
#, no-wrap
msgid "<a name=\"available-validation-rules\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:653 docs/master/validation.md:632
#, no-wrap
msgid "Available Validation Rules"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:656 docs/master/validation.md:635
msgid "Below is a list of all available validation rules and their function:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:739
msgid "[Accepted](#rule-accepted)  [Active URL](#rule-active-url)  [After (Date)](#rule-after)  [After Or Equal (Date)](#rule-after-or-equal)  [Alpha](#rule-alpha)  [Alpha Dash](#rule-alpha-dash)  [Alpha Numeric](#rule-alpha-num)  [Array](#rule-array)  [Bail](#rule-bail)  [Before (Date)](#rule-before)  [Before Or Equal (Date)](#rule-before-or-equal)  [Between](#rule-between)  [Boolean](#rule-boolean)  [Confirmed](#rule-confirmed)  [Date](#rule-date)  [Date Equals](#rule-date-equals)  [Date Format](#rule-date-format)  [Different](#rule-different)  [Digits](#rule-digits)  [Digits Between](#rule-digits-between)  [Dimensions (Image Files)](#rule-dimensions)  [Distinct](#rule-distinct)  [Email](#rule-email)  [Ends With](#rule-ends-with)  [Exclude If](#rule-exclude-if)  [Exclude Unless](#rule-exclude-unless)  [Exists (Database)](#rule-exists)  [File](#rule-file)  [Filled](#rule-filled)  [Greater Than](#rule-gt)  [Greater Than Or Equal](#rule-gte)  [Image (File)](#rule-image)  [In](#rule-in)  [In Array](#rule-in-array)  [Integer](#rule-integer)  [IP Address](#rule-ip)  [JSON](#rule-json)  [Less Than](#rule-lt)  [Less Than Or Equal](#rule-lte)  [Max](#rule-max)  [MIME Types](#rule-mimetypes)  [MIME Type By File Extension](#rule-mimes)  [Min](#rule-min)  [Multiple Of](#multiple-of)  [Not In](#rule-not-in)  [Not Regex](#rule-not-regex)  [Nullable](#rule-nullable)  [Numeric](#rule-numeric)  [Password](#rule-password)  [Present](#rule-present)  [Prohibited If](#rule-prohibited-if)  [Prohibited Unless](#rule-prohibited-unless)  [Regular Expression](#rule-regex)  [Required](#rule-required)  [Required If](#rule-required-if)  [Required Unless](#rule-required-unless)  [Required With](#rule-required-with)  [Required With All](#rule-required-with-all)  [Required Without](#rule-required-without)  [Required Without All](#rule-required-without-all)  [Same](#rule-same)  [Size](#rule-size)  [Sometimes](#conditionally-adding-rules)  [Starts With](#rule-starts-with)  [String](#rule-string)  [Timezone](#rule-timezone)  [Unique (Database)](#rule-unique)  [URL](#rule-url)  [UUID](#rule-uuid)"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:743 docs/master/validation.md:720
#, no-wrap
msgid "<a name=\"rule-accepted\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:743 docs/master/validation.md:720
#, no-wrap
msgid "accepted"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:746 docs/master/validation.md:723
msgid "The field under validation must be `\"yes\"`, `\"on\"`, `1`, or `true`. This is useful for validating \"Terms of Service\" acceptance or similar fields."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:748 docs/master/validation.md:725
#, no-wrap
msgid "<a name=\"rule-active-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:748 docs/master/validation.md:725
#, no-wrap
msgid "active_url"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:751 docs/master/validation.md:728
msgid "The field under validation must have a valid A or AAAA record according to the `dns_get_record` PHP function. The hostname of the provided URL is extracted using the `parse_url` PHP function before being passed to `dns_get_record`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:753 docs/master/validation.md:730
#, no-wrap
msgid "<a name=\"rule-after\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:753 docs/master/validation.md:730
#, no-wrap
msgid "after:_date_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:756 docs/master/validation.md:733
msgid "The field under validation must be a value after a given date. The dates will be passed into the `strtotime` PHP function in order to be converted to a valid `DateTime` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:758 docs/master/validation.md:735
#, no-wrap
msgid "    'start_date' => 'required|date|after:tomorrow'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:760 docs/master/validation.md:737
msgid "Instead of passing a date string to be evaluated by `strtotime`, you may specify another field to compare against the date:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:762 docs/master/validation.md:739
#, no-wrap
msgid "    'finish_date' => 'required|date|after:start_date'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:764 docs/master/validation.md:741
#, no-wrap
msgid "<a name=\"rule-after-or-equal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:764 docs/master/validation.md:741
#, no-wrap
msgid "after\\_or\\_equal:_date_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:767 docs/master/validation.md:744
msgid "The field under validation must be a value after or equal to the given date. For more information, see the [after](#rule-after) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:769 docs/master/validation.md:746
#, no-wrap
msgid "<a name=\"rule-alpha\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:769 docs/master/validation.md:746
#, no-wrap
msgid "alpha"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:772 docs/master/validation.md:749
msgid "The field under validation must be entirely alphabetic characters."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:774 docs/master/validation.md:751
#, no-wrap
msgid "<a name=\"rule-alpha-dash\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:774 docs/master/validation.md:751
#, no-wrap
msgid "alpha_dash"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:777 docs/master/validation.md:754
msgid "The field under validation may have alpha-numeric characters, as well as dashes and underscores."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:779 docs/master/validation.md:756
#, no-wrap
msgid "<a name=\"rule-alpha-num\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:779 docs/master/validation.md:756
#, no-wrap
msgid "alpha_num"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:782 docs/master/validation.md:759
msgid "The field under validation must be entirely alpha-numeric characters."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:784 docs/master/validation.md:761
#, no-wrap
msgid "<a name=\"rule-array\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:784 docs/master/validation.md:761
#, no-wrap
msgid "array"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:787 docs/master/validation.md:764
msgid "The field under validation must be a PHP `array`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:789 docs/master/validation.md:766
#, no-wrap
msgid "<a name=\"rule-bail\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:789 docs/master/validation.md:766
#, no-wrap
msgid "bail"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:792
msgid "Stop running validation rules for the field after the first validation failure."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:794
msgid "While the `bail` rule will only stop validating a specific field when it encounters a validation failure, the `stopOnFirstFailure` method will inform the validator that it should stop validating all attributes once a single validation failure has occurred:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:800 docs/master/validation.md:771
#, no-wrap
msgid "<a name=\"rule-before\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:800 docs/master/validation.md:771
#, no-wrap
msgid "before:_date_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:803 docs/master/validation.md:774
msgid "The field under validation must be a value preceding the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:805 docs/master/validation.md:776
#, no-wrap
msgid "<a name=\"rule-before-or-equal\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:805 docs/master/validation.md:776
#, no-wrap
msgid "before\\_or\\_equal:_date_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:808 docs/master/validation.md:779
msgid "The field under validation must be a value preceding or equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance. In addition, like the [`after`](#rule-after) rule, the name of another field under validation may be supplied as the value of `date`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:810 docs/master/validation.md:781
#, no-wrap
msgid "<a name=\"rule-between\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:810 docs/master/validation.md:781
#, no-wrap
msgid "between:_min_,_max_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:813 docs/master/validation.md:784
msgid "The field under validation must have a size between the given _min_ and _max_. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:815 docs/master/validation.md:786
#, no-wrap
msgid "<a name=\"rule-boolean\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:815 docs/master/validation.md:786
#, no-wrap
msgid "boolean"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:818 docs/master/validation.md:789
msgid "The field under validation must be able to be cast as a boolean. Accepted input are `true`, `false`, `1`, `0`, `\"1\"`, and `\"0\"`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:820 docs/master/validation.md:791
#, no-wrap
msgid "<a name=\"rule-confirmed\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:820 docs/master/validation.md:791
#, no-wrap
msgid "confirmed"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:823 docs/master/validation.md:794
msgid "The field under validation must have a matching field of `{field}_confirmation`. For example, if the field under validation is `password`, a matching `password_confirmation` field must be present in the input."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:825 docs/master/validation.md:796
#, no-wrap
msgid "<a name=\"rule-date\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:825 docs/master/validation.md:796
#, no-wrap
msgid "date"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:828 docs/master/validation.md:799
msgid "The field under validation must be a valid, non-relative date according to the `strtotime` PHP function."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:830 docs/master/validation.md:801
#, no-wrap
msgid "<a name=\"rule-date-equals\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:830 docs/master/validation.md:801
#, no-wrap
msgid "date_equals:_date_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:833 docs/master/validation.md:804
msgid "The field under validation must be equal to the given date. The dates will be passed into the PHP `strtotime` function in order to be converted into a valid `DateTime` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:835 docs/master/validation.md:806
#, no-wrap
msgid "<a name=\"rule-date-format\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:835 docs/master/validation.md:806
#, no-wrap
msgid "date_format:_format_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:838 docs/master/validation.md:809
msgid "The field under validation must match the given _format_. You should use **either** `date` or `date_format` when validating a field, not both. This validation rule supports all formats supported by PHP's [DateTime](https://www.php.net/manual/en/class.datetime.php) class."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:840 docs/master/validation.md:811
#, no-wrap
msgid "<a name=\"rule-different\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:840 docs/master/validation.md:811
#, no-wrap
msgid "different:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:843 docs/master/validation.md:814
msgid "The field under validation must have a different value than _field_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:845 docs/master/validation.md:816
#, no-wrap
msgid "<a name=\"rule-digits\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:845 docs/master/validation.md:816
#, no-wrap
msgid "digits:_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:848 docs/master/validation.md:819
msgid "The field under validation must be _numeric_ and must have an exact length of _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:850 docs/master/validation.md:821
#, no-wrap
msgid "<a name=\"rule-digits-between\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:850 docs/master/validation.md:821
#, no-wrap
msgid "digits_between:_min_,_max_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:853 docs/master/validation.md:824
msgid "The field under validation must be _numeric_ and must have a length between the given _min_ and _max_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:855 docs/master/validation.md:826
#, no-wrap
msgid "<a name=\"rule-dimensions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:855 docs/master/validation.md:826
#, no-wrap
msgid "dimensions"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:858 docs/master/validation.md:829
msgid "The file under validation must be an image meeting the dimension constraints as specified by the rule's parameters:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:860 docs/master/validation.md:831
#, no-wrap
msgid "    'avatar' => 'dimensions:min_width=100,min_height=200'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:862 docs/master/validation.md:833
msgid "Available constraints are: _min\\_width_, _max\\_width_, _min\\_height_, _max\\_height_, _width_, _height_, _ratio_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:864 docs/master/validation.md:835
msgid "A _ratio_ constraint should be represented as width divided by height. This can be specified either by a fraction like `3/2` or a float like `1.5`:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:866 docs/master/validation.md:837
#, no-wrap
msgid "    'avatar' => 'dimensions:ratio=3/2'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:868 docs/master/validation.md:839
msgid "Since this rule requires several arguments, you may use the `Rule::dimensions` method to fluently construct the rule:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:871 docs/8.x/validation.md:957
#: docs/8.x/validation.md:999 docs/8.x/validation.md:1174
#: docs/8.x/validation.md:1276 docs/master/validation.md:842
#: docs/master/validation.md:928 docs/master/validation.md:970
#: docs/master/validation.md:1135 docs/master/validation.md:1237
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Validator;\n"
"    use Illuminate\\Validation\\Rule;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:878 docs/master/validation.md:849
#, no-wrap
msgid "    Validator::make($data, [\n"
"        'avatar' => [\n"
"            'required',\n"
"            Rule::dimensions()->maxWidth(1000)->maxHeight(500)->ratio(3 / 2),\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:880 docs/master/validation.md:851
#, no-wrap
msgid "<a name=\"rule-distinct\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:880 docs/master/validation.md:851
#, no-wrap
msgid "distinct"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:883 docs/master/validation.md:854
msgid "When validating arrays, the field under validation must not have any duplicate values:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:885 docs/master/validation.md:856
#, no-wrap
msgid "    'foo.*.id' => 'distinct'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:887 docs/master/validation.md:858
msgid "You may add `ignore_case` to the validation rule's arguments to make the rule ignore capitalization differences:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:889 docs/master/validation.md:860
#, no-wrap
msgid "    'foo.*.id' => 'distinct:ignore_case'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:891 docs/master/validation.md:862
#, no-wrap
msgid "<a name=\"rule-email\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:891 docs/master/validation.md:862
#, no-wrap
msgid "email"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:894 docs/master/validation.md:865
msgid "The field under validation must be formatted as an email address. This validation rule utilizes the [`egulias/email-validator`](https://github.com/egulias/EmailValidator) package for validating the email address. By default, the `RFCValidation` validator is applied, but you can apply other validation styles as well:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:896 docs/master/validation.md:867
#, no-wrap
msgid "    'email' => 'email:rfc,dns'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:898 docs/master/validation.md:869
msgid "The example above will apply the `RFCValidation` and `DNSCheckValidation` validations. Here's a full list of validation styles you can apply:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:906 docs/master/validation.md:877
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- `rfc`: `RFCValidation`\n"
"- `strict`: `NoRFCWarningsValidation`\n"
"- `dns`: `DNSCheckValidation`\n"
"- `spoof`: `SpoofCheckValidation`\n"
"- `filter`: `FilterEmailValidation`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:908 docs/master/validation.md:879
msgid "The `filter` validator, which uses PHP's `filter_var` function, ships with Laravel and was Laravel's default email validation behavior prior to Laravel version 5.8."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:910 docs/master/validation.md:881
#, no-wrap
msgid "> {note} The `dns` and `spoof` validators require the PHP `intl` extension.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:912 docs/master/validation.md:883
#, no-wrap
msgid "<a name=\"rule-ends-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:912 docs/master/validation.md:883
#, no-wrap
msgid "ends_with:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:915 docs/master/validation.md:886
msgid "The field under validation must end with one of the given values."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:917 docs/master/validation.md:888
#, no-wrap
msgid "<a name=\"rule-exclude-if\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:917 docs/master/validation.md:888
#, no-wrap
msgid "exclude_if:_anotherfield_,_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:920 docs/master/validation.md:891
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods if the _anotherfield_ field is equal to _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:922 docs/master/validation.md:893
#, no-wrap
msgid "<a name=\"rule-exclude-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:922 docs/master/validation.md:893
#, no-wrap
msgid "exclude_unless:_anotherfield_,_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:925 docs/master/validation.md:896
msgid "The field under validation will be excluded from the request data returned by the `validate` and `validated` methods unless _anotherfield_'s field is equal to _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:927 docs/master/validation.md:898
#, no-wrap
msgid "<a name=\"rule-exists\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:927 docs/master/validation.md:898
#, no-wrap
msgid "exists:_table_,_column_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:930 docs/master/validation.md:901
msgid "The field under validation must exist in a given database table."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:932 docs/master/validation.md:903
#, no-wrap
msgid "<a name=\"basic-usage-of-exists-rule\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:932 docs/master/validation.md:903
#, no-wrap
msgid "Basic Usage Of Exists Rule"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:935 docs/master/validation.md:906
#, no-wrap
msgid "    'state' => 'exists:states'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:937 docs/master/validation.md:908
msgid "If the `column` option is not specified, the field name will be used. So, in this case, the rule will validate that the `states` database table contains a record with a `state` column value matching the request's `state` attribute value."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:939 docs/master/validation.md:910
#, no-wrap
msgid "<a name=\"specifying-a-custom-column-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:939 docs/master/validation.md:910
#, no-wrap
msgid "Specifying A Custom Column Name"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:942 docs/master/validation.md:913
msgid "You may explicitly specify the database column name that should be used by the validation rule by placing it after the database table name:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:944 docs/master/validation.md:915
#, no-wrap
msgid "    'state' => 'exists:states,abbreviation'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:946 docs/master/validation.md:917
msgid "Occasionally, you may need to specify a specific database connection to be used for the `exists` query. You can accomplish this by prepending the connection name to the table name:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:948 docs/master/validation.md:919
#, no-wrap
msgid "    'email' => 'exists:connection.staff,email'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:950 docs/8.x/validation.md:1255
#: docs/master/validation.md:921 docs/master/validation.md:1216
msgid "Instead of specifying the table name directly, you may specify the Eloquent model which should be used to determine the table name:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:952 docs/master/validation.md:923
#, no-wrap
msgid "    'user_id' => 'exists:App\\Models\\User,id'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:954 docs/master/validation.md:925
msgid "If you would like to customize the query executed by the validation rule, you may use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit them:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:966 docs/master/validation.md:937
#, no-wrap
msgid "    Validator::make($data, [\n"
"        'email' => [\n"
"            'required',\n"
"            Rule::exists('staff')->where(function ($query) {\n"
"                return $query->where('account_id', 1);\n"
"            }),\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:968 docs/master/validation.md:939
#, no-wrap
msgid "<a name=\"rule-file\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:968 docs/master/validation.md:939
#, no-wrap
msgid "file"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:971 docs/master/validation.md:942
msgid "The field under validation must be a successfully uploaded file."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:973 docs/master/validation.md:944
#, no-wrap
msgid "<a name=\"rule-filled\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:973 docs/master/validation.md:944
#, no-wrap
msgid "filled"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:976 docs/master/validation.md:947
msgid "The field under validation must not be empty when it is present."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:978 docs/master/validation.md:949
#, no-wrap
msgid "<a name=\"rule-gt\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:978 docs/master/validation.md:949
#, no-wrap
msgid "gt:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:981 docs/master/validation.md:952
msgid "The field under validation must be greater than the given _field_. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:983 docs/master/validation.md:954
#, no-wrap
msgid "<a name=\"rule-gte\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:983 docs/master/validation.md:954
#, no-wrap
msgid "gte:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:986 docs/master/validation.md:957
msgid "The field under validation must be greater than or equal to the given _field_. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:988 docs/master/validation.md:959
#, no-wrap
msgid "<a name=\"rule-image\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:988 docs/master/validation.md:959
#, no-wrap
msgid "image"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:991 docs/master/validation.md:962
msgid "The file under validation must be an image (jpg, jpeg, png, bmp, gif, svg, or webp)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:993 docs/master/validation.md:964
#, no-wrap
msgid "<a name=\"rule-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:993 docs/master/validation.md:964
#, no-wrap
msgid "in:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:996 docs/master/validation.md:967
msgid "The field under validation must be included in the given list of values. Since this rule often requires you to `implode` an array, the `Rule::in` method may be used to fluently construct the rule:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1006 docs/master/validation.md:977
#, no-wrap
msgid "    Validator::make($data, [\n"
"        'zones' => [\n"
"            'required',\n"
"            Rule::in(['first-zone', 'second-zone']),\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1008 docs/master/validation.md:979
#, no-wrap
msgid "<a name=\"rule-in-array\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1008 docs/master/validation.md:979
#, no-wrap
msgid "in_array:_anotherfield_.*"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1011 docs/master/validation.md:982
msgid "The field under validation must exist in _anotherfield_'s values."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1013 docs/master/validation.md:984
#, no-wrap
msgid "<a name=\"rule-integer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1013 docs/master/validation.md:984
#, no-wrap
msgid "integer"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1016 docs/master/validation.md:987
msgid "The field under validation must be an integer."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1018
#, no-wrap
msgid "> {note} This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is of a type accepted by PHP's `FILTER_VALIDATE_INT` rule. If you need to validate the input as being a number please use this rule in combination with [the `numeric` validation rule](#rule-numeric).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1020 docs/master/validation.md:991
#, no-wrap
msgid "<a name=\"rule-ip\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1020 docs/master/validation.md:991
#, no-wrap
msgid "ip"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1023 docs/master/validation.md:994
msgid "The field under validation must be an IP address."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1025 docs/master/validation.md:996
#, no-wrap
msgid "<a name=\"ipv4\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1025 docs/master/validation.md:996
#, no-wrap
msgid "ipv4"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1028 docs/master/validation.md:999
msgid "The field under validation must be an IPv4 address."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1030 docs/master/validation.md:1001
#, no-wrap
msgid "<a name=\"ipv6\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1030 docs/master/validation.md:1001
#, no-wrap
msgid "ipv6"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1033 docs/master/validation.md:1004
msgid "The field under validation must be an IPv6 address."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1035 docs/master/validation.md:1006
#, no-wrap
msgid "<a name=\"rule-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1035 docs/master/validation.md:1006
#, no-wrap
msgid "json"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1038 docs/master/validation.md:1009
msgid "The field under validation must be a valid JSON string."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1040 docs/master/validation.md:1011
#, no-wrap
msgid "<a name=\"rule-lt\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1040 docs/master/validation.md:1011
#, no-wrap
msgid "lt:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1043 docs/master/validation.md:1014
msgid "The field under validation must be less than the given _field_. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1045 docs/master/validation.md:1016
#, no-wrap
msgid "<a name=\"rule-lte\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1045 docs/master/validation.md:1016
#, no-wrap
msgid "lte:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1048 docs/master/validation.md:1019
msgid "The field under validation must be less than or equal to the given _field_. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1050 docs/master/validation.md:1021
#, no-wrap
msgid "<a name=\"rule-max\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1050 docs/master/validation.md:1021
#, no-wrap
msgid "max:_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1053 docs/master/validation.md:1024
msgid "The field under validation must be less than or equal to a maximum _value_. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1055 docs/master/validation.md:1026
#, no-wrap
msgid "<a name=\"rule-mimetypes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1055 docs/master/validation.md:1026
#, no-wrap
msgid "mimetypes:_text/plain_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1058 docs/master/validation.md:1029
msgid "The file under validation must match one of the given MIME types:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1060 docs/master/validation.md:1031
#, no-wrap
msgid "    'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1062 docs/master/validation.md:1033
msgid "To determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client's provided MIME type."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1064 docs/master/validation.md:1035
#, no-wrap
msgid "<a name=\"rule-mimes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1064 docs/master/validation.md:1035
#, no-wrap
msgid "mimes:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1067 docs/master/validation.md:1038
msgid "The file under validation must have a MIME type corresponding to one of the listed extensions."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1069 docs/master/validation.md:1040
#, no-wrap
msgid "<a name=\"basic-usage-of-mime-rule\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1069 docs/master/validation.md:1040
#, no-wrap
msgid "Basic Usage Of MIME Rule"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1072 docs/master/validation.md:1043
#, no-wrap
msgid "    'photo' => 'mimes:jpg,bmp,png'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1074 docs/master/validation.md:1045
msgid "Even though you only need to specify the extensions, this rule actually validates the MIME type of the file by reading the file's contents and guessing its MIME type. A full listing of MIME types and their corresponding extensions may be found at the following location:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1076 docs/master/validation.md:1047
msgid "[https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types](https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1078 docs/master/validation.md:1049
#, no-wrap
msgid "<a name=\"rule-min\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1078 docs/master/validation.md:1049
#, no-wrap
msgid "min:_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1081 docs/master/validation.md:1052
msgid "The field under validation must have a minimum _value_. Strings, numerics, arrays, and files are evaluated in the same fashion as the [`size`](#rule-size) rule."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1083 docs/master/validation.md:1054
#, no-wrap
msgid "<a name=\"multiple-of\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1083 docs/master/validation.md:1054
#, no-wrap
msgid "multiple_of:_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1086 docs/master/validation.md:1057
msgid "The field under validation must be a multiple of _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1088 docs/master/validation.md:1059
#, no-wrap
msgid "<a name=\"rule-not-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1088 docs/master/validation.md:1059
#, no-wrap
msgid "not_in:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1091 docs/master/validation.md:1062
msgid "The field under validation must not be included in the given list of values. The `Rule::notIn` method may be used to fluently construct the rule:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1093 docs/master/validation.md:1064
#, no-wrap
msgid "    use Illuminate\\Validation\\Rule;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1100 docs/master/validation.md:1071
#, no-wrap
msgid "    Validator::make($data, [\n"
"        'toppings' => [\n"
"            'required',\n"
"            Rule::notIn(['sprinkles', 'cherries']),\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1102 docs/master/validation.md:1073
#, no-wrap
msgid "<a name=\"rule-not-regex\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1102 docs/master/validation.md:1073
#, no-wrap
msgid "not_regex:_pattern_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1105 docs/master/validation.md:1076
msgid "The field under validation must not match the given regular expression."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1107 docs/master/validation.md:1078
#, no-wrap
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'not_regex:/^.+$/i'`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1109 docs/master/validation.md:1080
#, no-wrap
msgid "> {note} When using the `regex` / `not_regex` patterns, it may be necessary to specify your validation rules using an array instead of using `|` delimiters, especially if the regular expression contains a `|` character.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1111 docs/master/validation.md:1082
#, no-wrap
msgid "<a name=\"rule-nullable\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1111 docs/master/validation.md:1082
#, no-wrap
msgid "nullable"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1114 docs/master/validation.md:1085
msgid "The field under validation may be `null`."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1116 docs/master/validation.md:1087
#, no-wrap
msgid "<a name=\"rule-numeric\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1116 docs/master/validation.md:1087
#, no-wrap
msgid "numeric"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1119 docs/master/validation.md:1090
msgid "The field under validation must be [numeric](https://www.php.net/manual/en/function.is-numeric.php)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1121 docs/master/validation.md:1092
#, no-wrap
msgid "<a name=\"rule-password\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1121 docs/master/validation.md:1092
#, no-wrap
msgid "password"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1124 docs/master/validation.md:1095
msgid "The field under validation must match the authenticated user's password. You may specify an [authentication guard](/docs/{{version}}/authentication) using the rule's first parameter:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1126 docs/master/validation.md:1097
#, no-wrap
msgid "    'password' => 'password:api'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1128 docs/master/validation.md:1099
#, no-wrap
msgid "<a name=\"rule-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1128 docs/master/validation.md:1099
#, no-wrap
msgid "present"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1131 docs/master/validation.md:1102
msgid "The field under validation must be present in the input data but can be empty."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1133
#, no-wrap
msgid "<a name=\"rule-prohibited-if\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1133
#, no-wrap
msgid "prohibited_if:_anotherfield_,_value_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1136
msgid "The field under validation must be empty or not present if the _anotherfield_ field is equal to any _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1138
#, no-wrap
msgid "<a name=\"rule-prohibited-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1138
#, no-wrap
msgid "prohibited_unless:_anotherfield_,_value_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1141
msgid "The field under validation must be empty or not present unless the _anotherfield_ field is equal to any _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1143 docs/master/validation.md:1104
#, no-wrap
msgid "<a name=\"rule-regex\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1143 docs/master/validation.md:1104
#, no-wrap
msgid "regex:_pattern_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1146 docs/master/validation.md:1107
msgid "The field under validation must match the given regular expression."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1148 docs/master/validation.md:1109
#, no-wrap
msgid "Internally, this rule uses the PHP `preg_match` function. The pattern specified should obey the same formatting required by `preg_match` and thus also include valid delimiters. For example: `'email' => 'regex:/^.+@.+$/i'`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1150 docs/master/validation.md:1111
#, no-wrap
msgid "> {note} When using the `regex` / `not_regex` patterns, it may be necessary to specify rules in an array instead of using `|` delimiters, especially if the regular expression contains a `|` character.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1152 docs/master/validation.md:1113
#, no-wrap
msgid "<a name=\"rule-required\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1152 docs/master/validation.md:1113
#, no-wrap
msgid "required"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1155 docs/master/validation.md:1116
msgid "The field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1157 docs/master/validation.md:1118
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1162 docs/master/validation.md:1123
msgid "- The value is `null`.  - The value is an empty string.  - The value is an empty array or empty `Countable` object.  - The value is an uploaded file with no path."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1166 docs/master/validation.md:1127
#, no-wrap
msgid "<a name=\"rule-required-if\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1166 docs/master/validation.md:1127
#, no-wrap
msgid "required_if:_anotherfield_,_value_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1169 docs/master/validation.md:1130
msgid "The field under validation must be present and not empty if the _anotherfield_ field is equal to any _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1171 docs/master/validation.md:1132
msgid "If you would like to construct a more complex condition for the `required_if` rule, you may use the `Rule::requiredIf` method. This method accepts a boolean or a closure. When passed a closure, the closure should return `true` or `false` to indicate if the field under validation is required:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1178 docs/master/validation.md:1139
#, no-wrap
msgid "    Validator::make($request->all(), [\n"
"        'role_id' => Rule::requiredIf($request->user()->is_admin),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1184 docs/master/validation.md:1145
#, no-wrap
msgid "    Validator::make($request->all(), [\n"
"        'role_id' => Rule::requiredIf(function () use ($request) {\n"
"            return $request->user()->is_admin;\n"
"        }),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1186 docs/master/validation.md:1147
#, no-wrap
msgid "<a name=\"rule-required-unless\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1186 docs/master/validation.md:1147
#, no-wrap
msgid "required_unless:_anotherfield_,_value_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1189 docs/master/validation.md:1150
msgid "The field under validation must be present and not empty unless the _anotherfield_ field is equal to any _value_."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1191 docs/master/validation.md:1152
#, no-wrap
msgid "<a name=\"rule-required-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1191 docs/master/validation.md:1152
#, no-wrap
msgid "required_with:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1194
msgid "The field under validation must be present and not empty _only if_ any of the other specified fields are present and not empty."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1196 docs/master/validation.md:1157
#, no-wrap
msgid "<a name=\"rule-required-with-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1196 docs/master/validation.md:1157
#, no-wrap
msgid "required_with_all:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1199
msgid "The field under validation must be present and not empty _only if_ all of the other specified fields are present and not empty."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1201 docs/master/validation.md:1162
#, no-wrap
msgid "<a name=\"rule-required-without\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1201 docs/master/validation.md:1162
#, no-wrap
msgid "required_without:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1204
msgid "The field under validation must be present and not empty _only when_ any of the other specified fields are empty or not present."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1206 docs/master/validation.md:1167
#, no-wrap
msgid "<a name=\"rule-required-without-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1206 docs/master/validation.md:1167
#, no-wrap
msgid "required_without_all:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1209
msgid "The field under validation must be present and not empty _only when_ all of the other specified fields are empty or not present."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1211 docs/master/validation.md:1172
#, no-wrap
msgid "<a name=\"rule-same\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1211 docs/master/validation.md:1172
#, no-wrap
msgid "same:_field_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1214 docs/master/validation.md:1175
msgid "The given _field_ must match the field under validation."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1216 docs/master/validation.md:1177
#, no-wrap
msgid "<a name=\"rule-size\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1216 docs/master/validation.md:1177
#, no-wrap
msgid "size:_value_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1219 docs/master/validation.md:1180
msgid "The field under validation must have a size matching the given _value_. For string data, _value_ corresponds to the number of characters. For numeric data, _value_ corresponds to a given integer value (the attribute must also have the `numeric` or `integer` rule). For an array, _size_ corresponds to the `count` of the array. For files, _size_ corresponds to the file size in kilobytes. Let's look at some examples:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1222 docs/master/validation.md:1183
#, no-wrap
msgid "    // Validate that a string is exactly 12 characters long...\n"
"    'title' => 'size:12';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1225 docs/master/validation.md:1186
#, no-wrap
msgid "    // Validate that a provided integer equals 10...\n"
"    'seats' => 'integer|size:10';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1228 docs/master/validation.md:1189
#, no-wrap
msgid "    // Validate that an array has exactly 5 elements...\n"
"    'tags' => 'array|size:5';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1231 docs/master/validation.md:1192
#, no-wrap
msgid "    // Validate that an uploaded file is exactly 512 kilobytes...\n"
"    'image' => 'file|size:512';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1233 docs/master/validation.md:1194
#, no-wrap
msgid "<a name=\"rule-starts-with\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1233 docs/master/validation.md:1194
#, no-wrap
msgid "starts_with:_foo_,_bar_,..."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1236 docs/master/validation.md:1197
msgid "The field under validation must start with one of the given values."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1238 docs/master/validation.md:1199
#, no-wrap
msgid "<a name=\"rule-string\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1238 docs/master/validation.md:1199
#, no-wrap
msgid "string"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1241 docs/master/validation.md:1202
msgid "The field under validation must be a string. If you would like to allow the field to also be `null`, you should assign the `nullable` rule to the field."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1243 docs/master/validation.md:1204
#, no-wrap
msgid "<a name=\"rule-timezone\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1243 docs/master/validation.md:1204
#, no-wrap
msgid "timezone"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1246 docs/master/validation.md:1207
msgid "The field under validation must be a valid timezone identifier according to the `timezone_identifiers_list` PHP function."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1248 docs/master/validation.md:1209
#, no-wrap
msgid "<a name=\"rule-unique\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1248 docs/master/validation.md:1209
#, no-wrap
msgid "unique:_table_,_column_,_except_,_idColumn_"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1251 docs/master/validation.md:1212
msgid "The field under validation must not exist within the given database table."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1253 docs/master/validation.md:1214
#, no-wrap
msgid "**Specifying A Custom Table / Column Name:**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1257 docs/master/validation.md:1218
#, no-wrap
msgid "    'email' => 'unique:App\\Models\\User,email_address'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1259 docs/master/validation.md:1220
msgid "The `column` option may be used to specify the field's corresponding database column. If the `column` option is not specified, the name of the field under validation will be used."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1261 docs/master/validation.md:1222
#, no-wrap
msgid "    'email' => 'unique:users,email_address'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1263 docs/master/validation.md:1224
#, no-wrap
msgid "**Specifying A Custom Database Connection**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1265 docs/master/validation.md:1226
msgid "Occasionally, you may need to set a custom connection for database queries made by the Validator. To accomplish this, you may prepend the connection name to the table name:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1267 docs/master/validation.md:1228
#, no-wrap
msgid "    'email' => 'unique:connection.users,email_address'\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1269 docs/master/validation.md:1230
#, no-wrap
msgid "**Forcing A Unique Rule To Ignore A Given ID:**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1271 docs/master/validation.md:1232
msgid "Sometimes, you may wish to ignore a given ID during unique validation. For example, consider an \"update profile\" screen that includes the user's name, email address, and location. You will probably want to verify that the email address is unique. However, if the user only changes the name field and not the email field, you do not want a validation error to be thrown because the user is already the owner of the email address in question."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1273 docs/master/validation.md:1234
msgid "To instruct the validator to ignore the user's ID, we'll use the `Rule` class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the `|` character to delimit the rules:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1283 docs/master/validation.md:1244
#, no-wrap
msgid "    Validator::make($data, [\n"
"        'email' => [\n"
"            'required',\n"
"            Rule::unique('users')->ignore($user->id),\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1285 docs/master/validation.md:1246
#, no-wrap
msgid "> {note} You should never pass any user controlled request input into the `ignore` method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1287 docs/master/validation.md:1248
msgid "Instead of passing the model key's value to the `ignore` method, you may also pass the entire model instance. Laravel will automatically extract the key from the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1289 docs/master/validation.md:1250
#, no-wrap
msgid "    Rule::unique('users')->ignore($user)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1291 docs/master/validation.md:1252
msgid "If your table uses a primary key column name other than `id`, you may specify the name of the column when calling the `ignore` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1293 docs/master/validation.md:1254
#, no-wrap
msgid "    Rule::unique('users')->ignore($user->id, 'user_id')\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1295 docs/master/validation.md:1256
msgid "By default, the `unique` rule will check the uniqueness of the column matching the name of the attribute being validated. However, you may pass a different column name as the second argument to the `unique` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1297 docs/master/validation.md:1258
#, no-wrap
msgid "    Rule::unique('users', 'email_address')->ignore($user->id),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1299 docs/master/validation.md:1260
#, no-wrap
msgid "**Adding Additional Where Clauses:**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1301 docs/master/validation.md:1262
msgid "You may specify additional query conditions by customizing the query using the `where` method. For example, let's add a query condition that scopes the query to only search records that have an `account_id` column value of `1`:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1305 docs/master/validation.md:1266
#, no-wrap
msgid "    'email' => Rule::unique('users')->where(function ($query) {\n"
"        return $query->where('account_id', 1);\n"
"    })\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1307 docs/master/validation.md:1268
#, no-wrap
msgid "<a name=\"rule-url\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1307 docs/master/validation.md:1268
#, no-wrap
msgid "url"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1310 docs/master/validation.md:1271
msgid "The field under validation must be a valid URL."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1312 docs/master/validation.md:1273
#, no-wrap
msgid "<a name=\"rule-uuid\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1312 docs/master/validation.md:1273
#, no-wrap
msgid "uuid"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1315 docs/master/validation.md:1276
msgid "The field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID)."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1317 docs/master/validation.md:1278
#, no-wrap
msgid "<a name=\"conditionally-adding-rules\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:1317 docs/master/validation.md:1278
#, no-wrap
msgid "Conditionally Adding Rules"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1320 docs/master/validation.md:1281
#, no-wrap
msgid "<a name=\"skipping-validation-when-fields-have-certain-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1320 docs/master/validation.md:1281
#, no-wrap
msgid "Skipping Validation When Fields Have Certain Values"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1323 docs/master/validation.md:1284
msgid "You may occasionally wish to not validate a given field if another field has a given value. You may accomplish this using the `exclude_if` validation rule. In this example, the `appointment_date` and `doctor_name` fields will not be validated if the `has_appointment` field has a value of `false`:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1325 docs/8.x/validation.md:1359
#: docs/8.x/validation.md:1385 docs/8.x/validation.md:1474
#: docs/8.x/validation.md:1493 docs/master/validation.md:1286
#: docs/master/validation.md:1320 docs/master/validation.md:1346
#: docs/master/validation.md:1435 docs/master/validation.md:1454
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Validator;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1331
#, no-wrap
msgid "    $validator = Validator::make($data, [\n"
"        'has_appointment' => 'required|boolean',\n"
"        'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n"
"        'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1333 docs/master/validation.md:1294
msgid "Alternatively, you may use the `exclude_unless` rule to not validate a given field unless another field has a given value:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1339
#, no-wrap
msgid "    $validator = Validator::make($data, [\n"
"        'has_appointment' => 'required|boolean',\n"
"        'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n"
"        'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1341 docs/master/validation.md:1302
#, no-wrap
msgid "<a name=\"validating-when-present\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1341 docs/master/validation.md:1302
#, no-wrap
msgid "Validating When Present"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1344 docs/master/validation.md:1305
msgid "In some situations, you may wish to run validation checks against a field **only** if that field is present in the data being validated. To quickly accomplish this, add the `sometimes` rule to your rule list:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1348 docs/master/validation.md:1309
#, no-wrap
msgid "    $v = Validator::make($request->all(), [\n"
"        'email' => 'sometimes|required|email',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1350 docs/master/validation.md:1311
msgid "In the example above, the `email` field will only be validated if it is present in the `$data` array."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1352
#, no-wrap
msgid "> {tip} If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1354 docs/master/validation.md:1315
#, no-wrap
msgid "<a name=\"complex-conditional-validation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/validation.md:1354 docs/master/validation.md:1315
#, no-wrap
msgid "Complex Conditional Validation"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1357 docs/master/validation.md:1318
msgid "Sometimes you may wish to add validation rules based on more complex conditional logic. For example, you may wish to require a given field only if another field has a greater value than 100. Or, you may need two fields to have a given value only when another field is present. Adding these validation rules doesn't have to be a pain. First, create a `Validator` instance with your _static rules_ that never change:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1364 docs/master/validation.md:1325
#, no-wrap
msgid "    $validator = Validator::make($request->all(), [\n"
"        'email' => 'required|email',\n"
"        'games' => 'required|numeric',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1366 docs/master/validation.md:1327
msgid "Let's assume our web application is for game collectors. If a game collector registers with our application and they own more than 100 games, we want them to explain why they own so many games. For example, perhaps they run a game resale shop, or maybe they just enjoy collecting games. To conditionally add this requirement, we can use the `sometimes` method on the `Validator` instance."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1370 docs/master/validation.md:1331
#, no-wrap
msgid "    $v->sometimes('reason', 'required|max:500', function ($input) {\n"
"        return $input->games >= 100;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1372 docs/master/validation.md:1333
msgid "The first argument passed to the `sometimes` method is the name of the field we are conditionally validating. The second argument is a list of the rules we want to add. If the closure passed as the third argument returns `true`, the rules will be added. This method makes it a breeze to build complex conditional validations. You may even add conditional validations for several fields at once:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1376 docs/master/validation.md:1337
#, no-wrap
msgid "    $v->sometimes(['reason', 'cost'], 'required', function ($input) {\n"
"        return $input->games >= 100;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1378 docs/master/validation.md:1339
#, no-wrap
msgid "> {tip} The `$input` parameter passed to your closure will be an instance of `Illuminate\\Support\\Fluent` and may be used to access your input and files under validation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1380 docs/master/validation.md:1341
#, no-wrap
msgid "<a name=\"validating-arrays\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:1380 docs/master/validation.md:1341
#, no-wrap
msgid "Validating Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1383 docs/master/validation.md:1344
msgid "Validating array based form input fields doesn't have to be a pain. You may use \"dot notation\" to validate attributes within an array. For example, if the incoming HTTP request contains a `photos[profile]` field, you may validate it like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1389 docs/master/validation.md:1350
#, no-wrap
msgid "    $validator = Validator::make($request->all(), [\n"
"        'photos.profile' => 'required|image',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1391 docs/master/validation.md:1352
msgid "You may also validate each element of an array. For example, to validate that each email in a given array input field is unique, you may do the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1396 docs/master/validation.md:1357
#, no-wrap
msgid "    $validator = Validator::make($request->all(), [\n"
"        'person.*.email' => 'email|unique:users',\n"
"        'person.*.first_name' => 'required_with:person.*.last_name',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1398 docs/master/validation.md:1359
msgid "Likewise, you may use the `*` character when specifying [custom validation messages in your language files](#custom-messages-for-specific-attributes), making it a breeze to use a single validation message for array based fields:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1404 docs/master/validation.md:1365
#, no-wrap
msgid "    'custom' => [\n"
"        'person.*.email' => [\n"
"            'unique' => 'Each person must have a unique email address',\n"
"        ]\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1406 docs/master/validation.md:1367
#, no-wrap
msgid "<a name=\"custom-validation-rules\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/validation.md:1406 docs/master/validation.md:1367
#, no-wrap
msgid "Custom Validation Rules"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1409 docs/master/validation.md:1370
#, no-wrap
msgid "<a name=\"using-rule-objects\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:1409 docs/master/validation.md:1370
#, no-wrap
msgid "Using Rule Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1412 docs/master/validation.md:1373
msgid "Laravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using rule objects. To generate a new rule object, you may use the `make:rule` Artisan command. Let's use this command to generate a rule that verifies a string is uppercase. Laravel will place the new rule in the `app/Rules` directory. If this directory does not exist, Laravel will create it when you execute the Artisan command to create your rule:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1414 docs/master/validation.md:1375
#, no-wrap
msgid "    php artisan make:rule Uppercase\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1416 docs/master/validation.md:1377
msgid "Once the rule has been created, we are ready to define its behavior. A rule object contains two methods: `passes` and `message`. The `passes` method receives the attribute value and name, and should return `true` or `false` depending on whether the attribute value is valid or not. The `message` method should return the validation error message that should be used when validation fails:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1420 docs/master/validation.md:1381
#, no-wrap
msgid "    namespace App\\Rules;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1422 docs/master/validation.md:1383
#, no-wrap
msgid "    use Illuminate\\Contracts\\Validation\\Rule;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1436 docs/master/validation.md:1397
#, no-wrap
msgid "    class Uppercase implements Rule\n"
"    {\n"
"        /**\n"
"         * Determine if the validation rule passes.\n"
"         *\n"
"         * @param  string  $attribute\n"
"         * @param  mixed  $value\n"
"         * @return bool\n"
"         */\n"
"        public function passes($attribute, $value)\n"
"        {\n"
"            return strtoupper($value) === $value;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1447 docs/master/validation.md:1408
#, no-wrap
msgid "        /**\n"
"         * Get the validation error message.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function message()\n"
"        {\n"
"            return 'The :attribute must be uppercase.';\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1449 docs/master/validation.md:1410
msgid "You may call the `trans` helper from your `message` method if you would like to return an error message from your translation files:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1459 docs/master/validation.md:1420
#, no-wrap
msgid "    /**\n"
"     * Get the validation error message.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function message()\n"
"    {\n"
"        return trans('validation.uppercase');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1461 docs/master/validation.md:1422
msgid "Once the rule has been defined, you may attach it to a validator by passing an instance of the rule object with your other validation rules:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1463 docs/master/validation.md:1424
#, no-wrap
msgid "    use App\\Rules\\Uppercase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1467 docs/master/validation.md:1428
#, no-wrap
msgid "    $request->validate([\n"
"        'name' => ['required', 'string', new Uppercase],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1469 docs/master/validation.md:1430
#, no-wrap
msgid "<a name=\"using-closures\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1472 docs/master/validation.md:1433
msgid "If you only need the functionality of a custom rule once throughout your application, you may use a closure instead of a rule object. The closure receives the attribute's name, the attribute's value, and a `$fail` callback that should be called if validation fails:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1486 docs/master/validation.md:1447
#, no-wrap
msgid "    $validator = Validator::make($request->all(), [\n"
"        'title' => [\n"
"            'required',\n"
"            'max:255',\n"
"            function ($attribute, $value, $fail) {\n"
"                if ($value === 'foo') {\n"
"                    $fail('The '.$attribute.' is invalid.');\n"
"                }\n"
"            },\n"
"        ],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1488 docs/master/validation.md:1449
#, no-wrap
msgid "<a name=\"implicit-rules\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/validation.md:1488 docs/master/validation.md:1449
#, no-wrap
msgid "Implicit Rules"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1491 docs/master/validation.md:1452
msgid "By default, when an attribute being validated is not present or contains an empty string, normal validation rules, including custom rules, are not run. For example, the [`unique`](#rule-unique) rule will not be run against an empty string:"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1495 docs/master/validation.md:1456
#, no-wrap
msgid "    $rules = ['name' => 'unique:users,name'];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1497 docs/master/validation.md:1458
#, no-wrap
msgid "    $input = ['name' => ''];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1499 docs/master/validation.md:1460
#, no-wrap
msgid "    Validator::make($input, $rules)->passes(); // true\n"
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1501 docs/master/validation.md:1462
msgid "For a custom rule to run even when an attribute is empty, the rule must imply that the attribute is required. To create an \"implicit\" rule, implement the `Illuminate\\Contracts\\Validation\\ImplicitRule` interface. This interface serves as a \"marker interface\" for the validator; therefore, it does not contain any additional methods you need to implement beyond the methods required by the typical `Rule` interface."
msgstr ""

#. type: Plain text
#: docs/8.x/validation.md:1502 docs/master/validation.md:1463
#, no-wrap
msgid "> {note} An \"implicit\" rule only _implies_ that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you.\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/verification.md:13 docs/master/verification.md:13
msgid "[Routing](#verification-routing)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/verification.md:13 docs/master/verification.md:13
msgid "[The Email Verification Notice](#the-email-verification-notice)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/verification.md:13 docs/master/verification.md:13
msgid "[The Email Verification Handler](#the-email-verification-handler)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/verification.md:13 docs/master/verification.md:13
msgid "[Resending The Verification Email](#resending-the-verification-email)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/verification.md:13 docs/master/verification.md:13
msgid "[Customization](#customization)"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:18 docs/master/verification.md:18
msgid "Many web applications require users to verify their email addresses before using the application. Rather than forcing you to re-implement this feature by hand for each application you create, Laravel provides convenient built-in services for sending and verifying email verification requests."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:20 docs/master/verification.md:20
#, no-wrap
msgid "> {tip} Want to get started fast? Install one of the [Laravel application starter kits](/docs/{{version}}/starter-kits) in a fresh Laravel application. The starter kits will take care of scaffolding your entire authentication system, including email verification support.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:25 docs/master/verification.md:25
msgid "Before getting started, verify that your `App\\Models\\User` model implements the `Illuminate\\Contracts\\Auth\\MustVerifyEmail` contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:33 docs/master/verification.md:33
#, no-wrap
msgid "    use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"    use Illuminate\\Notifications\\Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:37 docs/master/verification.md:37
#, no-wrap
msgid "    class User extends Authenticatable implements MustVerifyEmail\n"
"    {\n"
"        use Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:42 docs/master/verification.md:42
msgid "Once this interface has been added to your model, newly registered users will automatically be sent an email containing an email verification link. As you can see by examining your application's `App\\Providers\\EventServiceProvider`, Laravel already contains a `SendEmailVerificationNotification` [listener](/docs/{{version}}/events) that is attached to the `Illuminate\\Auth\\Events\\Registered` event. This event listener will send the email verification link to the user."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:44 docs/master/verification.md:44
msgid "If you are manually implementing registration within your application instead of using [a starter kit](/docs/{{version}}/starter-kits), you should ensure that you are dispatching the `Illuminate\\Auth\\Events\\Registered` event after a user's registration is successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:46 docs/master/verification.md:46
#, no-wrap
msgid "    use Illuminate\\Auth\\Events\\Registered;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:48 docs/master/verification.md:48
#, no-wrap
msgid "    event(new Registered($user));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:53
msgid "Next, your `users` table must contain an `email_verified_at` column to store the date and time that the user's email address was verified. By default, the `users` table migration included with the Laravel framework already includes this column. So, all you need to do is run your database migrations:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:57 docs/master/verification.md:57
#, no-wrap
msgid "<a name=\"verification-routing\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:60 docs/master/verification.md:60
msgid "To properly implement email verification, three routes will need to be defined. First, a route will be needed to display a notice to the user that they should click the email verification link in the verification email that Laravel sent them after registration."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:62 docs/master/verification.md:62
msgid "Second, a route will be needed to handle requests generated when the user clicks the email verification link in the email."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:64 docs/master/verification.md:64
msgid "Third, a route will be needed to resend a verification link if the user accidentally loses the first verification link."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:66 docs/master/verification.md:66
#, no-wrap
msgid "<a name=\"the-email-verification-notice\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/verification.md:66 docs/master/verification.md:66
#, no-wrap
msgid "The Email Verification Notice"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:69 docs/master/verification.md:69
msgid "As mentioned previously, a route should be defined that will return a view instructing the user to click the email verification link that was emailed to them by Laravel after registration. This view will be displayed to users when they try to access other parts of the application without verifying their email address first. Remember, the link is automatically emailed to the user as long as your `App\\Models\\User` model implements the `MustVerifyEmail` interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:73 docs/master/verification.md:73
#, no-wrap
msgid "    Route::get('/email/verify', function () {\n"
"        return view('auth.verify-email');\n"
"    })->middleware('auth')->name('verification.notice');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:75 docs/master/verification.md:75
msgid "The route that returns the email verification notice should be named `verification.notice`. It is important that the route is assigned this exact name since the `verified` middleware [included with Laravel](#protecting-routes) will automatically redirect to this route name if a user has not verified their email address."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:77 docs/master/verification.md:77
#, no-wrap
msgid "> {tip} When manually implementing email verification, you are required to define the contents of the verification notice view yourself. If you would like scaffolding that includes all necessary authentication and verification views, check out the [Laravel application starter kits](/docs/{{version}}/starter-kits).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:79 docs/master/verification.md:79
#, no-wrap
msgid "<a name=\"the-email-verification-handler\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/verification.md:79 docs/master/verification.md:79
#, no-wrap
msgid "The Email Verification Handler"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:82 docs/master/verification.md:82
msgid "Next, we need to define a route that will handle requests generated when the user clicks the email verification link that was emailed to them. This route should be named `verification.verify` and be assigned the `auth` and `signed` middlewares:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:85 docs/master/verification.md:85
#, no-wrap
msgid "    use Illuminate\\Foundation\\Auth\\EmailVerificationRequest;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:88 docs/master/verification.md:88
#, no-wrap
msgid "    Route::get('/email/verify/{id}/{hash}', function (EmailVerificationRequest $request) {\n"
"        $request->fulfill();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:91 docs/master/verification.md:91
#, no-wrap
msgid "        return redirect('/home');\n"
"    })->middleware(['auth', 'signed'])->name('verification.verify');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:93 docs/master/verification.md:93
msgid "Before moving on, let's take a closer look at this route. First, you'll notice we are using an `EmailVerificationRequest` request type instead of the typical `Illuminate\\Http\\Request` instance. The `EmailVerificationRequest` is a [form request](/docs/{{version}}/validation#form-request-validation) that is included with Laravel. This request will automatically take care of validating the request's `id` and `hash` parameters."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:95 docs/master/verification.md:95
msgid "Next, we can proceed directly to calling the `fulfill` method on the request. This method will call the `markEmailAsVerified` method on the authenticated user and dispatch the `Illuminate\\Auth\\Events\\Verified` event. The `markEmailAsVerified` method is available to the default `App\\Models\\User` model via the `Illuminate\\Foundation\\Auth\\User` base class. Once the user's email address has been verified, you may redirect them wherever you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:97 docs/master/verification.md:97
#, no-wrap
msgid "<a name=\"resending-the-verification-email\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/verification.md:97 docs/master/verification.md:97
#, no-wrap
msgid "Resending The Verification Email"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:100 docs/master/verification.md:100
msgid "Sometimes a user may misplace or accidentally delete the email address verification email. To accommodate this, you may wish to define a route to allow the user to request that the verification email be resent. You may then make a request to this route by placing a simple form submission button within your [verification notice view](#the-email-verification-notice):"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:105 docs/master/verification.md:105
#, no-wrap
msgid "    Route::post('/email/verification-notification', function (Request $request) {\n"
"        $request->user()->sendEmailVerificationNotification();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:108 docs/master/verification.md:108
#, no-wrap
msgid "        return back()->with('message', 'Verification link sent!');\n"
"    })->middleware(['auth', 'throttle:6,1'])->name('verification.send');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:113 docs/master/verification.md:113
msgid "[Route middleware](/docs/{{version}}/middleware) may be used to only allow verified users to access a given route. Laravel ships with a `verified` middleware, which references the `Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified` class. Since this middleware is already registered in your application's HTTP kernel, all you need to do is attach the middleware to a route definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:117 docs/master/verification.md:117
#, no-wrap
msgid "    Route::get('/profile', function () {\n"
"        // Only verified users may access this route...\n"
"    })->middleware('verified');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:119 docs/master/verification.md:119
msgid "If an unverified user attempts to access a route that has been assigned this middleware, they will automatically be redirected to the `verification.notice` [named route](/docs/{{version}}/routing#named-routes)."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:121 docs/master/verification.md:121
#, no-wrap
msgid "<a name=\"customization\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:124 docs/master/verification.md:124
#, no-wrap
msgid "<a name=\"verification-email-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/verification.md:124 docs/master/verification.md:124
#, no-wrap
msgid "Verification Email Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:127 docs/master/verification.md:127
msgid "Although the default email verification notification should satisfy the requirements of most applications, Laravel allows you to customize how the email verification mail message is constructed."
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:129 docs/master/verification.md:129
msgid "To get started, pass a closure to the `toMailUsing` method provided by the `Illuminate\\Auth\\Notifications\\VerifyEmail` notification. The closure will receive the notifiable model instance that is receiving the notification as well as the signed email verification URL that the user must visit to verify their email address. The closure should return an instance of `Illuminate\\Notifications\\Messages\\MailMessage`. Typically, you should call the `toMailUsing` method from the `boot` method of your application's `App\\Providers\\AuthServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:132 docs/master/verification.md:132
#, no-wrap
msgid "    use Illuminate\\Auth\\Notifications\\VerifyEmail;\n"
"    use Illuminate\\Notifications\\Messages\\MailMessage;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:141 docs/master/verification.md:141
#, no-wrap
msgid "    /**\n"
"     * Register any authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:149 docs/master/verification.md:149
#, no-wrap
msgid "        VerifyEmail::toMailUsing(function ($notifiable, $url) {\n"
"            return (new MailMessage)\n"
"                ->subject('Verify Email Address')\n"
"                ->line('Click the button below to verify your email address.')\n"
"                ->action('Verify Email Address', $url);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:151 docs/master/verification.md:151
#, no-wrap
msgid "> {tip} To learn more about mail notifications, please consult the [mail notification documentation](/docs/{{version}}/notifications#mail-notifications).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:156 docs/master/verification.md:156
msgid "When using the [Laravel application starter kits](/docs/{{version}}/starter-kits), Laravel dispatches [events](/docs/{{version}}/events) during the email verification process. If you are manually handling email verification for your application, you may wish to manually dispatch these events after verification is completed. You may attach listeners to these events in your application's `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/verification.md:166 docs/master/verification.md:166
#, no-wrap
msgid "    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Auth\\Events\\Verified' => [\n"
"            'App\\Listeners\\LogVerifiedUser',\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Creating & Rendering Views](#creating-and-rendering-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Nested View Directories](#nested-view-directories)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Creating The First Available View](#creating-the-first-available-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Determining If A View Exists](#determining-if-a-view-exists)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Passing Data To Views](#passing-data-to-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Sharing Data With All Views](#sharing-data-with-all-views)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[View Composers](#view-composers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[View Creators](#view-creators)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/views.md:13 docs/master/views.md:13
msgid "[Optimizing Views](#optimizing-views)"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:18 docs/master/views.md:18
msgid "Of course, it's not practical to return entire HTML documents strings directly from your routes and controllers. Thankfully, views provide a convenient way to place all of our HTML in separate files. Views separate your controller / application logic from your presentation logic and are stored in the `resources/views` directory. A simple view might look something like this:"
msgstr ""

#. type: Fenced code block (html)
#: docs/8.x/views.md:19 docs/master/views.md:19
#, no-wrap
msgid "<!-- View stored in resources/views/greeting.blade.php -->\n\n"
"<html>\n"
"    <body>\n"
"        <h1>Hello, {{ $name }}</h1>\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:30 docs/master/views.md:30
msgid "Since this view is stored at `resources/views/greeting.blade.php`, we may return it using the global `view` helper like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:34 docs/8.x/views.md:47 docs/master/views.md:34
#: docs/master/views.md:47
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'James']);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:36 docs/master/views.md:36
#, no-wrap
msgid "> {tip} Looking for more information on how to write Blade templates? Check out the full [Blade documentation](/docs/{{version}}/blade) to get started.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:38 docs/master/views.md:38
#, no-wrap
msgid "<a name=\"creating-and-rendering-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:38 docs/master/views.md:38
#, no-wrap
msgid "Creating & Rendering Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:41 docs/master/views.md:41
msgid "You may create a view by placing a file with the `.blade.php` extension in your application's `resources/views` directory. The `.blade.php` extension informs the framework that the file contains a [Blade template](/docs/{{version}}/blade). Blade templates contain HTML as well as Blade directives that allow you to easily echo values, create \"if\" statements, iterate over data, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:43 docs/master/views.md:43
msgid "Once you have created a view, you may return it from one of your application's routes or controllers using the global `view` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:49 docs/master/views.md:49
msgid "Views may also be returned using the `View` facade:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:51 docs/8.x/views.md:71 docs/8.x/views.md:80
#: docs/8.x/views.md:110 docs/master/views.md:51 docs/master/views.md:71
#: docs/master/views.md:80 docs/master/views.md:110
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:53 docs/master/views.md:53
#, no-wrap
msgid "    return View::make('greeting', ['name' => 'James']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:55 docs/master/views.md:55
msgid "As you can see, the first argument passed to the `view` helper corresponds to the name of the view file in the `resources/views` directory. The second argument is an array of data that should be made available to the view. In this case, we are passing the `name` variable, which is displayed in the view using [Blade syntax](/docs/{{version}}/blade)."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:57 docs/master/views.md:57
#, no-wrap
msgid "<a name=\"nested-view-directories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:57 docs/master/views.md:57
#, no-wrap
msgid "Nested View Directories"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:60 docs/master/views.md:60
msgid "Views may also be nested within subdirectories of the `resources/views` directory. \"Dot\" notation may be used to reference nested views. For example, if your view is stored at `resources/views/admin/profile.blade.php`, you may return it from one of your application's routes / controllers like so:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:62 docs/master/views.md:62
#, no-wrap
msgid "    return view('admin.profile', $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:64 docs/master/views.md:64
#, no-wrap
msgid "> {note} View directory names should not contain the `.` character.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:66 docs/master/views.md:66
#, no-wrap
msgid "<a name=\"creating-the-first-available-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:66 docs/master/views.md:66
#, no-wrap
msgid "Creating The First Available View"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:69 docs/master/views.md:69
msgid "Using the `View` facade's `first` method, you may create the first view that exists in a given array of views. This may be useful if your application or package allows views to be customized or overwritten:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:73 docs/master/views.md:73
#, no-wrap
msgid "    return View::first(['custom.admin', 'admin'], $data);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:75 docs/master/views.md:75
#, no-wrap
msgid "<a name=\"determining-if-a-view-exists\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:75 docs/master/views.md:75
#, no-wrap
msgid "Determining If A View Exists"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:78 docs/master/views.md:78
msgid "If you need to determine if a view exists, you may use the `View` facade. The `exists` method will return `true` if the view exists:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:84 docs/master/views.md:84
#, no-wrap
msgid "    if (View::exists('emails.customer')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:86 docs/master/views.md:86
#, no-wrap
msgid "<a name=\"passing-data-to-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:86 docs/master/views.md:86
#, no-wrap
msgid "Passing Data To Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:89 docs/master/views.md:89
msgid "As you saw in the previous examples, you may pass an array of data to views to make that data available to the view:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:91 docs/master/views.md:91
#, no-wrap
msgid "    return view('greetings', ['name' => 'Victoria']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:93 docs/master/views.md:93
#, no-wrap
msgid "When passing information in this manner, the data should be an array with key / value pairs. After providing data to a view, you can then access each value within your view using the data's keys, such as `<?php echo $name; ?>`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:95 docs/master/views.md:95
msgid "As an alternative to passing a complete array of data to the `view` helper function, you may use the `with` method to add individual pieces of data to the view. The `with` method returns an instance of the view object so that you can continue chaining methods before returning the view:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:99 docs/master/views.md:99
#, no-wrap
msgid "    return view('greeting')\n"
"                ->with('name', 'Victoria')\n"
"                ->with('occupation', 'Astronaut');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:101 docs/master/views.md:101
#, no-wrap
msgid "<a name=\"sharing-data-with-all-views\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:101 docs/master/views.md:101
#, no-wrap
msgid "Sharing Data With All Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:104 docs/master/views.md:104
msgid "Occasionally, you may need to share data with all views that are rendered by your application. You may do so using the `View` facade's `share` method. Typically, you should place calls to the `share` method within a service provider's `boot` method. You are free to add them to the `App\\Providers\\AppServiceProvider` class or generate a separate service provider to house them:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:133 docs/master/views.md:133
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::share('key', 'value');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:135 docs/master/views.md:135
#, no-wrap
msgid "<a name=\"view-composers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:135 docs/master/views.md:135
#, no-wrap
msgid "View Composers"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:138 docs/master/views.md:138
msgid "View composers are callbacks or class methods that are called when a view is rendered. If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location. View composers may prove particularly useful if the same view is returned by multiple routes or controllers within your application and always needs a particular piece of data."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:140 docs/master/views.md:140
msgid "Typically, view composers will be registered within one of your application's [service providers](/docs/{{version}}/providers). In this example, we'll assume that we have created a new `App\\Providers\\ViewServiceProvider` to house this logic."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:142 docs/master/views.md:142
msgid "We'll use the `View` facade's `composer` method to register the view composer. Laravel does not include a default directory for class based view composers, so you are free to organize them however you wish. For example, you could create an `app/Http/View/Composers` directory to house all of your application's view composers:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:150 docs/master/views.md:150
#, no-wrap
msgid "    use App\\Http\\View\\Composers\\ProfileComposer;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:162 docs/master/views.md:162
#, no-wrap
msgid "    class ViewServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:172 docs/master/views.md:172
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            // Using class based composers...\n"
"            View::composer('profile', ProfileComposer::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:179 docs/master/views.md:179
#, no-wrap
msgid "            // Using closure based composers...\n"
"            View::composer('dashboard', function ($view) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:181 docs/master/views.md:181
#, no-wrap
msgid "> {note} Remember, if you create a new service provider to contain your view composer registrations, you will need to add the service provider to the `providers` array in the `config/app.php` configuration file.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:183 docs/master/views.md:183
msgid "Now that we have registered the composer, the `compose` method of the `App\\Http\\View\\Composers\\ProfileComposer` class will be executed each time the `profile` view is being rendered. Let's take a look at an example of the composer class:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:187 docs/master/views.md:187
#, no-wrap
msgid "    namespace App\\Http\\View\\Composers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:190 docs/master/views.md:190
#, no-wrap
msgid "    use App\\Repositories\\UserRepository;\n"
"    use Illuminate\\View\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:199 docs/master/views.md:199
#, no-wrap
msgid "    class ProfileComposer\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:211
#, no-wrap
msgid "        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies are automatically resolved by the service container...\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:223 docs/master/views.md:223
#, no-wrap
msgid "        /**\n"
"         * Bind data to the view.\n"
"         *\n"
"         * @param  \\Illuminate\\View\\View  $view\n"
"         * @return void\n"
"         */\n"
"        public function compose(View $view)\n"
"        {\n"
"            $view->with('count', $this->users->count());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:225 docs/master/views.md:225
msgid "As you can see, all view composers are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a composer's constructor."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:227 docs/master/views.md:227
#, no-wrap
msgid "<a name=\"attaching-a-composer-to-multiple-views\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/views.md:227 docs/master/views.md:227
#, no-wrap
msgid "Attaching A Composer To Multiple Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:230 docs/master/views.md:230
msgid "You may attach a view composer to multiple views at once by passing an array of views as the first argument to the `composer` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:232 docs/master/views.md:232
#, no-wrap
msgid "    use App\\Http\\Views\\Composers\\MultiComposer;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:237 docs/master/views.md:237
#, no-wrap
msgid "    View::composer(\n"
"        ['profile', 'dashboard'],\n"
"        MultiComposer::class\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:239 docs/master/views.md:239
msgid "The `composer` method also accepts the `*` character as a wildcard, allowing you to attach a composer to all views:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:243 docs/master/views.md:243
#, no-wrap
msgid "    View::composer('*', function ($view) {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:245 docs/master/views.md:245
#, no-wrap
msgid "<a name=\"view-creators\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/views.md:245 docs/master/views.md:245
#, no-wrap
msgid "View Creators"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:248 docs/master/views.md:248
msgid "View \"creators\" are very similar to view composers; however, they are executed immediately after the view is instantiated instead of waiting until the view is about to render. To register a view creator, use the `creator` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:251 docs/master/views.md:251
#, no-wrap
msgid "    use App\\Http\\View\\Creators\\ProfileCreator;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:253 docs/master/views.md:253
#, no-wrap
msgid "    View::creator('profile', ProfileCreator::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:255 docs/master/views.md:255
#, no-wrap
msgid "<a name=\"optimizing-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/views.md:255 docs/master/views.md:255
#, no-wrap
msgid "Optimizing Views"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:258 docs/master/views.md:258
msgid "By default, Blade template views are compiled on demand. When a request is executed that renders a view, Laravel will determine if a compiled version of the view exists. If the file exists, Laravel will then determine if the uncompiled view has been modified more recently than the compiled view. If the compiled view either does not exist, or the uncompiled view has been modified, Laravel will recompile the view."
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:260 docs/master/views.md:260
msgid "Compiling views during the request may have a small negative impact on performance, so Laravel provides the `view:cache` Artisan command to precompile all of the views utilized by your application. For increased performance, you may wish to run this command as part of your deployment process:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:264 docs/master/views.md:264
msgid "You may use the `view:clear` command to clear the view cache:"
msgstr ""

#. type: Plain text
#: docs/8.x/views.md:265 docs/master/views.md:265
#, no-wrap
msgid "    php artisan view:clear\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:590
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr ""

#. type: Plain text
#: docs/master/authentication.md:256
msgid "The `attempt` method accepts an array of key / value pairs as its first argument. The values in the array will be used to find the user in your database table. So, in the example above, the user will be retrieved by the value of the `email` column. If the user is found, the hashed password stored in the database will be compared with the `password` value passed to the method via the array. You should not hash the incoming request's `password` value, since the framework will automatically hash the value before comparing it to the hashed password in the database. If the two hashed passwords match an authenticated session will be started for the user."
msgstr ""

#. type: Plain text
#: docs/master/authorization.md:45
msgid "In this example, we'll define a gate to determine if a user can update a given `App\\Models\\Post` model. The gate will accomplish this may comparing the user's `id` against the `user_id` of the user that created the post:"
msgstr ""

#. type: Fenced code block (html)
#: docs/master/authorization.md:634
#, no-wrap
msgid "@can('update', $post)\n"
"    <!-- The current user can update the post... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create new posts... -->\n"
"@endcan\n\n"
"@cannot('update', $post)\n"
"    <!-- The current user cannot update the post... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can now create new posts... -->\n"
"@endcannot\n"
msgstr ""

#. type: Plain text
#: docs/master/broadcasting.md:81
#, no-wrap
msgid "    composer require pusher/pusher-php-server \"~4.0\"\n"
msgstr ""

#. type: Plain text
#: docs/master/broadcasting.md:585
#, no-wrap
msgid "    OrderShipmentStatusUpdated::dispatch($order));\n"
msgstr ""

#. type: Plain text
#: docs/master/cashier-paddle.md:123
#, no-wrap
msgid "    PADDLE_VENDOR_ID=your-paddle-vendor-id\n"
"    PADDLE_VENDOR_AUTH_CODE=your-paddle-vendor-auth-code\n"
"    PADDLE_PUBLIC_KEY=\"your-paddle-public-key\"\n"
msgstr ""

#. type: Plain text
#: docs/master/cashier-paddle.md:922
#, no-wrap
msgid "    class WebhookController extends CashierController\n"
"    {\n"
"        /**\n"
"         * Handle payment succeeded.\n"
"         *\n"
"         * @param  array  $payload\n"
"         * @return void\n"
"         */\n"
"        public function handlePaymentSucceeded($payload)\n"
"        {\n"
"            // Handle the event...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/cashier-paddle.md:1051
msgid "You may easily retrieve an array of a billable model's receipts using the `receipts` method:"
msgstr ""

#. type: Plain text
#: docs/master/cashier-paddle.md:1057
#, no-wrap
msgid "    $receipts = $user->receipts();\n"
msgstr ""

#. type: Plain text
#: docs/master/cashier-paddle.md:1120
msgid "Paddle currently lacks a proper CRUD API so you will need to manually test your billing flow. Paddle also lacks a sandboxed developer environment so any card charges you make are live charges. In order to work around this, we recommend you use coupons with a 100% discount or free products during testing."
msgstr ""

#. type: Plain text
#: docs/master/collections.md:1522
#, no-wrap
msgid "        /**\n"
"         * Create a new ResourceCollection instance.\n"
"         *\n"
"         * @param  Collection  $resource\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Collection $collection)\n"
"        {\n"
"            $this->collection = $collection;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/container.md:232
msgid "Occasionally you may have a class that receives an array of typed objects using a variadic constructor argument:"
msgstr ""

#. type: Plain text
#: docs/master/container.md:368
#, no-wrap
msgid "    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\Illuminate\\Container\\Container\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Container $container)\n"
"    {\n"
"        $this->container = $container;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/contributions.md:46
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- [Laravel Application](https://github.com/laravel/laravel)\n"
"- [Laravel Art](https://github.com/laravel/art)\n"
"- [Laravel Documentation](https://github.com/laravel/docs)\n"
"- [Laravel Dusk](https://github.com/laravel/dusk)\n"
"- [Laravel Cashier Stripe](https://github.com/laravel/cashier)\n"
"- [Laravel Cashier Paddle](https://github.com/laravel/cashier-paddle)\n"
"- [Laravel Echo](https://github.com/laravel/echo)\n"
"- [Laravel Envoy](https://github.com/laravel/envoy)\n"
"- [Laravel Framework](https://github.com/laravel/framework)\n"
"- [Laravel Homestead](https://github.com/laravel/homestead)\n"
"- [Laravel Homestead Build Scripts](https://github.com/laravel/settler)\n"
"- [Laravel Horizon](https://github.com/laravel/horizon)\n"
"- [Laravel Jetstream](https://github.com/laravel/jetstream)\n"
"- [Laravel Passport](https://github.com/laravel/passport)\n"
"- [Laravel Sanctum](https://github.com/laravel/sanctum)\n"
"- [Laravel Scout](https://github.com/laravel/scout)\n"
"- [Laravel Socialite](https://github.com/laravel/socialite)\n"
"- [Laravel Telescope](https://github.com/laravel/telescope)\n"
"- [Laravel Website](https://github.com/laravel/laravel.com-next)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/controllers.md:89
#, no-wrap
msgid "    class ProvisionServer extends Controller\n"
"    {\n"
"        /**\n"
"         * Provision a new web server.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function __invoke()\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/controllers.md:101
#, no-wrap
msgid "> {tip} Controller stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)\n"
msgstr ""

#. type: Plain text
#: docs/master/controllers.md:148
msgid "This single route declaration creates multiple routes to handle a variety of actions on the resource. The generated controller will already have methods stubbed for each of these actions. Remember, you can always get a quick overview of your application's by running the `route:list` Artisan command."
msgstr ""

#. type: Plain text
#: docs/master/controllers.md:389
#, no-wrap
msgid "    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new user.\n"
"         *\n"
"         * @param  Request  $request\n"
"         * @return Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/master/database.md:23
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
"- MySQL 5.6+ ([Version Policy](https://en.wikipedia.org/wiki/MySQL#Release_history))\n"
"- PostgreSQL 9.4+ ([Version Policy](https://www.postgresql.org/support/versioning/))\n"
"- SQLite 3.8.8+\n"
"- SQL Server 2017+ ([Version Policy](https://support.microsoft.com/en-us/lifecycle/search))\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/database.md:262
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            DB::listen(function ($query) {\n"
"                // $query->sql\n"
"                // $query->bindings\n"
"                // $query->time\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/deployment.md:56
#, no-wrap
msgid "        add_header X-Frame-Options \"SAMEORIGIN\";\n"
"        add_header X-XSS-Protection \"1; mode=block\";\n"
"        add_header X-Content-Type-Options \"nosniff\";\n"
msgstr ""

#. type: Bullet: '- '
#: docs/master/documentation.md:92
msgid "[API Documentation](/api/9.x)"
msgstr ""

#. type: Plain text
#: docs/master/dusk.md:923
#, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
"[assertTitle](#assert-title)\n"
"[assertTitleContains](#assert-title-contains)\n"
"[assertUrlIs](#assert-url-is)\n"
"[assertSchemeIs](#assert-scheme-is)\n"
"[assertSchemeIsNot](#assert-scheme-is-not)\n"
"[assertHostIs](#assert-host-is)\n"
"[assertHostIsNot](#assert-host-is-not)\n"
"[assertPortIs](#assert-port-is)\n"
"[assertPortIsNot](#assert-port-is-not)\n"
"[assertPathBeginsWith](#assert-path-begins-with)\n"
"[assertPathIs](#assert-path-is)\n"
"[assertPathIsNot](#assert-path-is-not)\n"
"[assertRouteIs](#assert-route-is)\n"
"[assertQueryStringHas](#assert-query-string-has)\n"
"[assertQueryStringMissing](#assert-query-string-missing)\n"
"[assertFragmentIs](#assert-fragment-is)\n"
"[assertFragmentBeginsWith](#assert-fragment-begins-with)\n"
"[assertFragmentIsNot](#assert-fragment-is-not)\n"
"[assertHasCookie](#assert-has-cookie)\n"
"[assertHasPlainCookie](#assert-has-plain-cookie)\n"
"[assertCookieMissing](#assert-cookie-missing)\n"
"[assertPlainCookieMissing](#assert-plain-cookie-missing)\n"
"[assertCookieValue](#assert-cookie-value)\n"
"[assertPlainCookieValue](#assert-plain-cookie-value)\n"
"[assertSee](#assert-see)\n"
"[assertDontSee](#assert-dont-see)\n"
"[assertSeeIn](#assert-see-in)\n"
"[assertDontSeeIn](#assert-dont-see-in)\n"
"[assertSeeAnythingIn](#assert-see-anything-in)\n"
"[assertSeeNothingIn](#assert-see-nothing-in)\n"
"[assertScript](#assert-script)\n"
"[assertSourceHas](#assert-source-has)\n"
"[assertSourceMissing](#assert-source-missing)\n"
"[assertSeeLink](#assert-see-link)\n"
"[assertDontSeeLink](#assert-dont-see-link)\n"
"[assertInputValue](#assert-input-value)\n"
"[assertInputValueIsNot](#assert-input-value-is-not)\n"
"[assertChecked](#assert-checked)\n"
"[assertNotChecked](#assert-not-checked)\n"
"[assertRadioSelected](#assert-radio-selected)\n"
"[assertRadioNotSelected](#assert-radio-not-selected)\n"
"[assertSelected](#assert-selected)\n"
"[assertNotSelected](#assert-not-selected)\n"
"[assertSelectHasOptions](#assert-select-has-options)\n"
"[assertSelectMissingOptions](#assert-select-missing-options)\n"
"[assertSelectHasOption](#assert-select-has-option)\n"
"[assertSelectMissingOption](#assert-select-missing-option)\n"
"[assertValue](#assert-value)\n"
"[assertAttribute](#assert-attribute)\n"
"[assertAriaAttribute](#assert-aria-attribute)\n"
"[assertDataAttribute](#assert-data-attribute)\n"
"[assertVisible](#assert-visible)\n"
"[assertPresent](#assert-present)\n"
"[assertMissing](#assert-missing)\n"
"[assertDialogOpened](#assert-dialog-opened)\n"
"[assertEnabled](#assert-enabled)\n"
"[assertDisabled](#assert-disabled)\n"
"[assertButtonEnabled](#assert-button-enabled)\n"
"[assertButtonDisabled](#assert-button-disabled)\n"
"[assertFocused](#assert-focused)\n"
"[assertNotFocused](#assert-not-focused)\n"
"[assertAuthenticated](#assert-authenticated)\n"
"[assertGuest](#assert-guest)\n"
"[assertAuthenticatedAs](#assert-authenticated-as)\n"
"[assertVue](#assert-vue)\n"
"[assertVueIsNot](#assert-vue-is-not)\n"
"[assertVueContains](#assert-vue-contains)\n"
"[assertVueDoesNotContain](#assert-vue-does-not-contain)\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent-relationships.md:609
msgid "A polymorphic relationship allows the child model to belong to more than one type of model using a single association. For example, imagine you are building an application that allows users to share blog posts and videos. a `Comment` model might belong to both the `Post` and `Video` models."
msgstr ""

#. type: Plain text
#: docs/master/eloquent-relationships.md:945
msgid "The `resolveRelationshipUsing` method accepts the desired relationship name as its first argument. The second argument passed to the method should be a closure that accepts the model instance and returns a valid Eloquent relationship definition. Typically, you should configure dynamic relationships within the boot method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#. type: Plain text
#: docs/master/eloquent-relationships.md:1331
msgid "To eager a relationship's relationships, you may use \"dot\" syntax. For example, let's eager load all of the book's authors and all of the author's personal contacts:"
msgstr ""

#. type: Fenced code block (sql)
#: docs/master/eloquent.md:923
#, no-wrap
msgid "select * from `users` where `age` > 200\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1066
msgid "Sometimes you may need to determine if two models are the \"same\". The `is` method may be used to quickly verify two models have the same primary key, table, and database connection:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1072
msgid "The `is` method is also available when using the `belongsTo`, `hasOne`, `morphTo`, and `morphOne` [relationships](/docs/{{version}}/eloquent-relationships). This method is particularly helpful when you would like to compare a related model without issuing a query to retrieve that model:"
msgstr ""

#. type: Plain text
#: docs/master/errors.md:60
#, no-wrap
msgid "> {tip} To customize the exception reporting for a given exception, you may also consider using [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)\n"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/events.md:18
msgid "[Manually Interacting The Queue](#manually-interacting-the-queue)"
msgstr ""

#. type: Plain text
#: docs/master/events.md:157
#, no-wrap
msgid "    class SendPodcastNotification\n"
"    {\n"
"        /**\n"
"         * Handle the given event.\n"
"         *\n"
"         * @param  \\App\\Events\\PodcastProcessed\n"
"         * @return void\n"
"         */\n"
"        public function handle(PodcastProcessed $event)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/events.md:377
#, no-wrap
msgid "<a name=\"manually-interacting-the-queue\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/events.md:377
#, no-wrap
msgid "Manually Interacting The Queue"
msgstr ""

#. type: Plain text
#: docs/master/facades.md:174
msgid "Using real-time facades, you may treat any class in your application as if it were a facade. To illustrate how this can be used, let's first examine some code that does not use real-time facades. For example, let's assume our `Podcast` model has a `publish` method. However, in order to publish the podcast, we need to inject a `Publisher` instance:"
msgstr ""

#. type: Plain text
#: docs/master/facades.md:304
msgid "Facade | Class | Service Container Binding ------------- | ------------- | ------------- App | [Illuminate\\Foundation\\Application](https://laravel.com/api/{{version}}/Illuminate/Foundation/Application.html)  | `app` Artisan | [Illuminate\\Contracts\\Console\\Kernel](https://laravel.com/api/{{version}}/Illuminate/Contracts/Console/Kernel.html)  | `artisan` Auth | [Illuminate\\Auth\\AuthManager](https://laravel.com/api/{{version}}/Illuminate/Auth/AuthManager.html)  | `auth` Auth (Instance)  | [Illuminate\\Contracts\\Auth\\Guard](https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Guard.html)  | `auth.driver` Blade | [Illuminate\\View\\Compilers\\BladeCompiler](https://laravel.com/api/{{version}}/Illuminate/View/Compilers/BladeCompiler.html)  | `blade.compiler` Broadcast | [Illuminate\\Contracts\\Broadcasting\\Factory](https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Factory.html)  | &nbsp; Broadcast (Instance)  | [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Broadcaster.html)  | &nbsp; Bus | [Illuminate\\Contracts\\Bus\\Dispatcher](https://laravel.com/api/{{version}}/Illuminate/Contracts/Bus/Dispatcher.html)  | &nbsp; Cache | [Illuminate\\Cache\\CacheManager](https://laravel.com/api/{{version}}/Illuminate/Cache/CacheManager.html)  | `cache` Cache (Instance)  | [Illuminate\\Cache\\Repository](https://laravel.com/api/{{version}}/Illuminate/Cache/Repository.html)  | `cache.store` Config | [Illuminate\\Config\\Repository](https://laravel.com/api/{{version}}/Illuminate/Config/Repository.html)  | `config` Cookie | [Illuminate\\Cookie\\CookieJar](https://laravel.com/api/{{version}}/Illuminate/Cookie/CookieJar.html)  | `cookie` Crypt | [Illuminate\\Encryption\\Encrypter](https://laravel.com/api/{{version}}/Illuminate/Encryption/Encrypter.html)  | `encrypter` DB | [Illuminate\\Database\\DatabaseManager](https://laravel.com/api/{{version}}/Illuminate/Database/DatabaseManager.html)  | `db` DB (Instance)  | [Illuminate\\Database\\Connection](https://laravel.com/api/{{version}}/Illuminate/Database/Connection.html)  | `db.connection` Event | [Illuminate\\Events\\Dispatcher](https://laravel.com/api/{{version}}/Illuminate/Events/Dispatcher.html)  | `events` File | [Illuminate\\Filesystem\\Filesystem](https://laravel.com/api/{{version}}/Illuminate/Filesystem/Filesystem.html)  | `files` Gate | [Illuminate\\Contracts\\Auth\\Access\\Gate](https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Access/Gate.html)  | &nbsp; Hash | [Illuminate\\Contracts\\Hashing\\Hasher](https://laravel.com/api/{{version}}/Illuminate/Contracts/Hashing/Hasher.html)  | `hash` Http | [Illuminate\\Http\\Client\\Factory](https://laravel.com/api/{{version}}/Illuminate/Http/Client/Factory.html)  | &nbsp; Lang | [Illuminate\\Translation\\Translator](https://laravel.com/api/{{version}}/Illuminate/Translation/Translator.html)  | `translator` Log | [Illuminate\\Log\\LogManager](https://laravel.com/api/{{version}}/Illuminate/Log/LogManager.html)  | `log` Mail | [Illuminate\\Mail\\Mailer](https://laravel.com/api/{{version}}/Illuminate/Mail/Mailer.html)  | `mailer` Notification | [Illuminate\\Notifications\\ChannelManager](https://laravel.com/api/{{version}}/Illuminate/Notifications/ChannelManager.html)  | &nbsp; Password | [Illuminate\\Auth\\Passwords\\PasswordBrokerManager](https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBrokerManager.html)  | `auth.password` Password (Instance)  | [Illuminate\\Auth\\Passwords\\PasswordBroker](https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBroker.html)  | `auth.password.broker` Queue | [Illuminate\\Queue\\QueueManager](https://laravel.com/api/{{version}}/Illuminate/Queue/QueueManager.html)  | `queue` Queue (Instance)  | [Illuminate\\Contracts\\Queue\\Queue](https://laravel.com/api/{{version}}/Illuminate/Contracts/Queue/Queue.html)  | `queue.connection` Queue (Base Class)  | [Illuminate\\Queue\\Queue](https://laravel.com/api/{{version}}/Illuminate/Queue/Queue.html)  | &nbsp; Redirect | [Illuminate\\Routing\\Redirector](https://laravel.com/api/{{version}}/Illuminate/Routing/Redirector.html)  | `redirect` Redis | [Illuminate\\Redis\\RedisManager](https://laravel.com/api/{{version}}/Illuminate/Redis/RedisManager.html)  | `redis` Redis (Instance)  | [Illuminate\\Redis\\Connections\\Connection](https://laravel.com/api/{{version}}/Illuminate/Redis/Connections/Connection.html)  | `redis.connection` Request | [Illuminate\\Http\\Request](https://laravel.com/api/{{version}}/Illuminate/Http/Request.html)  | `request` Response | [Illuminate\\Contracts\\Routing\\ResponseFactory](https://laravel.com/api/{{version}}/Illuminate/Contracts/Routing/ResponseFactory.html)  | &nbsp; Response (Instance)  | [Illuminate\\Http\\Response](https://laravel.com/api/{{version}}/Illuminate/Http/Response.html)  | &nbsp; Route | [Illuminate\\Routing\\Router](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html)  | `router` Schema | [Illuminate\\Database\\Schema\\Builder](https://laravel.com/api/{{version}}/Illuminate/Database/Schema/Builder.html)  | &nbsp; Session | [Illuminate\\Session\\SessionManager](https://laravel.com/api/{{version}}/Illuminate/Session/SessionManager.html)  | `session` Session (Instance)  | [Illuminate\\Session\\Store](https://laravel.com/api/{{version}}/Illuminate/Session/Store.html)  | `session.store` Storage | [Illuminate\\Filesystem\\FilesystemManager](https://laravel.com/api/{{version}}/Illuminate/Filesystem/FilesystemManager.html)  | `filesystem` Storage (Instance)  | [Illuminate\\Contracts\\Filesystem\\Filesystem](https://laravel.com/api/{{version}}/Illuminate/Contracts/Filesystem/Filesystem.html)  | `filesystem.disk` URL | [Illuminate\\Routing\\UrlGenerator](https://laravel.com/api/{{version}}/Illuminate/Routing/UrlGenerator.html)  | `url` Validator | [Illuminate\\Validation\\Factory](https://laravel.com/api/{{version}}/Illuminate/Validation/Factory.html)  | `validator` Validator (Instance)  | [Illuminate\\Validation\\Validator](https://laravel.com/api/{{version}}/Illuminate/Validation/Validator.html)  | &nbsp; View | [Illuminate\\View\\Factory](https://laravel.com/api/{{version}}/Illuminate/View/Factory.html)  | `view` View (Instance)  | [Illuminate\\View\\View](https://laravel.com/api/{{version}}/Illuminate/View/View.html)  | &nbsp;"
msgstr ""

#. type: Fenced code block (php)
#: docs/master/fortify.md:240
#, no-wrap
msgid "(array) $request->user()->two_factor_recovery_codes\n"
msgstr ""

#. type: Plain text
#: docs/master/helpers.md:197
msgid "[after](#method-fluent-str-after)  [afterLast](#method-fluent-str-after-last)  [append](#method-fluent-str-append)  [ascii](#method-fluent-str-ascii)  [basename](#method-fluent-str-basename)  [before](#method-fluent-str-before)  [beforeLast](#method-fluent-str-before-last)  [camel](#method-fluent-str-camel)  [contains](#method-fluent-str-contains)  [containsAll](#method-fluent-str-contains-all)  [dirname](#method-fluent-str-dirname)  [endsWith](#method-fluent-str-ends-with)  [exactly](#method-fluent-str-exactly)  [explode](#method-fluent-str-explode)  [finish](#method-fluent-str-finish)  [is](#method-fluent-str-is)  [isAscii](#method-fluent-str-is-ascii)  [isEmpty](#method-fluent-str-is-empty)  [isNotEmpty](#method-fluent-str-is-not-empty)  [kebab](#method-fluent-str-kebab)  [length](#method-fluent-str-length)  [limit](#method-fluent-str-limit)  [lower](#method-fluent-str-lower)  [ltrim](#method-fluent-str-ltrim)  [markdown](#method-fluent-str-markdown)  [match](#method-fluent-str-match)  [matchAll](#method-fluent-str-match-all)  [padBoth](#method-fluent-str-padboth)  [padLeft](#method-fluent-str-padleft)  [padRight](#method-fluent-str-padright)  [pipe](#method-fluent-str-pipe)  [plural](#method-fluent-str-plural)  [prepend](#method-fluent-str-prepend)  [replace](#method-fluent-str-replace)  [replaceArray](#method-fluent-str-replace-array)  [replaceFirst](#method-fluent-str-replace-first)  [replaceLast](#method-fluent-str-replace-last)  [replaceMatches](#method-fluent-str-replace-matches)  [rtrim](#method-fluent-str-rtrim)  [singular](#method-fluent-str-singular)  [slug](#method-fluent-str-slug)  [snake](#method-fluent-str-snake)  [split](#method-fluent-str-split)  [start](#method-fluent-str-start)  [startsWith](#method-fluent-str-starts-with)  [studly](#method-fluent-str-studly)  [substr](#method-fluent-str-substr)  [tap](#method-fluent-str-tap)  [title](#method-fluent-str-title)  [trim](#method-fluent-str-trim)  [ucfirst](#method-fluent-str-ucfirst)  [upper](#method-fluent-str-upper)  [when](#method-fluent-str-when)  [whenEmpty](#method-fluent-str-when-empty)  [words](#method-fluent-str-words)"
msgstr ""

#. type: Plain text
#: docs/master/helpers.md:790
msgid "The `Arr::wrap` method wraps the given value in an array. If the given value is already an array it be returned without modification:"
msgstr ""

#. type: Plain text
#: docs/master/http-client.md:46
#, no-wrap
msgid "    $response->body() : string;\n"
"    $response->json() : array|mixed;\n"
"    $response->status() : int;\n"
"    $response->ok() : bool;\n"
"    $response->successful() : bool;\n"
"    $response->failed() : bool;\n"
"    $response->serverError() : bool;\n"
"    $response->clientError() : bool;\n"
"    $response->header($header) : string;\n"
"    $response->headers() : array;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:619
#, no-wrap
msgid "    $response->assertJsonPath($path, array $data, $strict = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:774
msgid "For example, to assert that the `name` and `email` field have validation error messages that were flashed to the session, you may invoke the `assertSessionHasErrors` method like so:"
msgstr ""

#. type: Title ####
#: docs/master/mail.md:338
#, no-wrap
msgid "Attaching Files from Disk"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:171
msgid "Out of the box, Laravel comes with `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware group are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr ""

#. type: Plain text
#: docs/master/migrations.md:44
#, no-wrap
msgid "> {tip} Migration stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)\n"
msgstr ""

#. type: Title ####
#: docs/master/migrations.md:351
#, no-wrap
msgid "`bigIncrements()` {#collection-method .first-collection-method}"
msgstr ""

#. type: Plain text
#: docs/master/notifications.md:296
msgid "In addition, you may return a full [mailable object](/docs/{{version}}/mail) from the `toMail` method:"
msgstr ""

#. type: Plain text
#: docs/master/notifications.md:949
#, no-wrap
msgid "    /**\n"
"     * Get the Slack representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return \\Illuminate\\Notifications\\Message\\SlackMessage\n"
"     */\n"
"    public function toSlack($notifiable)\n"
"    {\n"
"        return (new SlackMessage)\n"
"                    ->content('One of your invoices has been paid!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/passport.md:126
#, no-wrap
msgid "            Passport::routes();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/passwords.md:76
msgid "You may be wondering how Laravel knows how to retrieve the user record from your application's database when calling the `Password` facade's `sendResetLink` method. The Laravel password broker utilizes your authentication system's \"user providers\" to retrieve database records. The user provider used by the password broker is configured within the `passwords` configuration array of your `config/auth.php` configuration file. To learn more about writing custom user providers, consult the [authentication documentation](/docs/{{version}}/authentication#adding-custom-user-providers)"
msgstr ""

#. type: Plain text
#: docs/master/passwords.md:117
#, no-wrap
msgid "        $status = Password::reset(\n"
"            $request->only('email', 'password', 'password_confirmation', 'token'),\n"
"            function ($user, $password) use ($request) {\n"
"                $user->forceFill([\n"
"                    'password' => Hash::make($password)\n"
"                ])->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/passwords.md:119
#, no-wrap
msgid "                $user->setRememberToken(Str::random(60));\n"
msgstr ""

#. type: Plain text
#: docs/master/passwords.md:136
msgid "Before moving on, you may be wondering how Laravel knows how to retrieve the user record from your application's database when calling the `Password` facade's `reset` method. The Laravel password broker utilizes your authentication system's \"user providers\" to retrieve database records. The user provider used by the password broker is configured within the `passwords` configuration array of your `config/auth.php` configuration file. To learn more about writing custom user providers, consult the [authentication documentation](/docs/{{version}}/authentication#adding-custom-user-providers)"
msgstr ""

#. type: Plain text
#: docs/master/providers.md:147
#, no-wrap
msgid "    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @param  \\Illuminate\\Contracts\\Routing\\ResponseFactory\n"
"     * @return void\n"
"     */\n"
"    public function boot(ResponseFactory $response)\n"
"    {\n"
"        $response->macro('serialized', function ($value) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/queries.md:74
msgid "The `get` method returns an `Illuminate\\Support\\Collection` containing the results of the query where each result is an instance of the PHP `stdClass` object. You may access each column's value by accessing the column as a property of the object:"
msgstr ""

#. type: Plain text
#: docs/master/queries.md:106
msgid "If you would like to retrieve an `Illuminate\\Support\\Collection` instance containing the values of a single column, you may use the `pluck` method. In this example, we'll retrieve a collection of role titles:"
msgstr ""

#. type: Plain text
#: docs/master/queries.md:690
msgid "You may pass a column and direction when calling the `reorder` method in order to remove all existing \"order by \"clauses\" and apply an entirely new order to the query:"
msgstr ""

#. type: Plain text
#: docs/master/queues.md:142
#, no-wrap
msgid "> {tip} Job stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)\n"
msgstr ""

#. type: Plain text
#: docs/master/requests.md:160
msgid "For convenience, the `bearerToken` may be used to a bearer token from the `Authorization` header. If no such header is present, an empty string will be returned:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:433
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` methods accepts a closure that will be invoked if an implicitly bound model can not be found:"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:436
#, no-wrap
msgid "    use App\\Http\\Controllers\\LocationsController;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/routing.md:627
msgid "HTML forms do not support `PUT`, `PATCH` or `DELETE` actions. So, when defining `PUT`, `PATCH` or `DELETE` routes that are called from an HTML form, you will need to add a hidden `_method` field to the form. The value sent with the `_method` field will be used as the HTTP request method:"
msgstr ""

#. type: Plain text
#: docs/master/sail.md:37
msgid "Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel's [installation documentation](/docs/{{version}}/installation) for your operating system."
msgstr ""

#. type: Fenced code block (bash)
#: docs/master/sail.md:298
#, no-wrap
msgid "php artisan sail:publish\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:99
#, no-wrap
msgid "    use App\\Models\\Passport\\PersonalAccessToken;\n"
"    use Laravel\\Sanctum\\Sanctum;\n"
msgstr ""

#. type: Plain text
#: docs/master/sanctum.md:354
#, no-wrap
msgid "> {tip} When issuing tokens for a mobile application, you are also free to specify [token abilities](#token-abilities)\n"
msgstr ""

#. type: Plain text
#: docs/master/starter-kits.md:19
msgid "Laravel Breeze is a minimal, simple implementation of all of Laravel's [authentication features](/docs/{{version}}/authentication), including login, registration, password reset, email verification, and password confirmation. Laravel Breeze's view layer is made up of simple [Blade templates](/docs/{{version}}/blade) styled with [Tailwind CSS](https://tailwindcss.com). Breeze provides a wonderful starting point for beginning a fresh Laravel application."
msgstr ""

#. type: Fenced code block (bash)
#: docs/master/starter-kits.md:41
#, no-wrap
msgid "php artisan breeze:install\n\n"
"npm install\n\n"
"npm run dev\n"
msgstr ""

#. type: Plain text
#: docs/master/structure.md:158
msgid "This directory does not exist by default, but will be created for you if you execute the `make:notification` Artisan command. The `Notifications` directory contains all of the \"transactional\" [notifications](/docs/{{version}}/notifications) that are sent by your application, such as simple notifications about events that happen within your application. Laravel's notification features abstracts sending notifications over a variety of drivers such as email, Slack, SMS, or stored in a database."
msgstr ""

#. type: Plain text
#: docs/master/testing.md:49
#, no-wrap
msgid "> {tip} Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:122
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:135
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            ParallelTesting::setUpProcess(function ($token) {\n"
"                // ..\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:139
#, no-wrap
msgid "            ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"                // ..\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:143
#, no-wrap
msgid "            ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"                // ..\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:149
#, no-wrap
msgid "            ParallelTesting::tearDownProcess(function ($token) {\n"
"                // ..\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/testing.md:151
msgid "If you would like to access to current process token from any other place in your application's test code, you may use the `token` method:"
msgstr ""

#. type: Plain text
#: docs/master/valet.md:130
#, no-wrap
msgid "That's all there is to it. Now, any application you create within your \"parked\" directory will automatically be served using the `http://<directory-name>.test` convention. So, if your parked directory contains a directory named \"laravel\", the application within that directory will be accessible at `http://laravel.test`.\n"
msgstr ""

#. type: Plain text
#: docs/master/valet.md:141
msgid "Once an application has been linked to Valet using the `link` command, you may access the application using its directory name. So, the site that was linked in the example above may be accessed at `http://laravel.test`."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:716
msgid "[Accepted](#rule-accepted)  [Active URL](#rule-active-url)  [After (Date)](#rule-after)  [After Or Equal (Date)](#rule-after-or-equal)  [Alpha](#rule-alpha)  [Alpha Dash](#rule-alpha-dash)  [Alpha Numeric](#rule-alpha-num)  [Array](#rule-array)  [Bail](#rule-bail)  [Before (Date)](#rule-before)  [Before Or Equal (Date)](#rule-before-or-equal)  [Between](#rule-between)  [Boolean](#rule-boolean)  [Confirmed](#rule-confirmed)  [Date](#rule-date)  [Date Equals](#rule-date-equals)  [Date Format](#rule-date-format)  [Different](#rule-different)  [Digits](#rule-digits)  [Digits Between](#rule-digits-between)  [Dimensions (Image Files)](#rule-dimensions)  [Distinct](#rule-distinct)  [Email](#rule-email)  [Ends With](#rule-ends-with)  [Exclude If](#rule-exclude-if)  [Exclude Unless](#rule-exclude-unless)  [Exists (Database)](#rule-exists)  [File](#rule-file)  [Filled](#rule-filled)  [Greater Than](#rule-gt)  [Greater Than Or Equal](#rule-gte)  [Image (File)](#rule-image)  [In](#rule-in)  [In Array](#rule-in-array)  [Integer](#rule-integer)  [IP Address](#rule-ip)  [JSON](#rule-json)  [Less Than](#rule-lt)  [Less Than Or Equal](#rule-lte)  [Max](#rule-max)  [MIME Types](#rule-mimetypes)  [MIME Type By File Extension](#rule-mimes)  [Min](#rule-min)  [Multiple Of](#multiple-of)  [Not In](#rule-not-in)  [Not Regex](#rule-not-regex)  [Nullable](#rule-nullable)  [Numeric](#rule-numeric)  [Password](#rule-password)  [Present](#rule-present)  [Regular Expression](#rule-regex)  [Required](#rule-required)  [Required If](#rule-required-if)  [Required Unless](#rule-required-unless)  [Required With](#rule-required-with)  [Required With All](#rule-required-with-all)  [Required Without](#rule-required-without)  [Required Without All](#rule-required-without-all)  [Same](#rule-same)  [Size](#rule-size)  [Sometimes](#conditionally-adding-rules)  [Starts With](#rule-starts-with)  [String](#rule-string)  [Timezone](#rule-timezone)  [Unique (Database)](#rule-unique)  [URL](#rule-url)  [UUID](#rule-uuid)"
msgstr ""

#. type: Plain text
#: docs/master/validation.md:769
msgid "Stop running validation rules after the first validation failure."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:989
#, no-wrap
msgid "> {note} This validation rule does not verify that the input is of the \"integer\" variable type, only that the input is a string or numeric value that contains an integer.\n"
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1155
msgid "The field under validation must be present and not empty _only if_ any of the other specified fields are present."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1160
msgid "The field under validation must be present and not empty _only if_ all of the other specified fields are present."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1165
msgid "The field under validation must be present and not empty _only when_ any of the other specified fields are not present."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1170
msgid "The field under validation must be present and not empty _only when_ all of the other specified fields are not present."
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1292
#, no-wrap
msgid "    $validator = Validator::make($data, [\n"
"        'has_appointment' => 'required|bool',\n"
"        'appointment_date' => 'exclude_if:has_appointment,false|required|date',\n"
"        'doctor_name' => 'exclude_if:has_appointment,false|required|string',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1300
#, no-wrap
msgid "    $validator = Validator::make($data, [\n"
"        'has_appointment' => 'required|bool',\n"
"        'appointment_date' => 'exclude_unless:has_appointment,true|required|date',\n"
"        'doctor_name' => 'exclude_unless:has_appointment,true|required|string',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/validation.md:1313
#, no-wrap
msgid "> {tip} If you are attempting to validate a field that should always be present but may be empty, check out [this note on optional fields](#a-note-on-optional-fields)\n"
msgstr ""

#. type: Plain text
#: docs/master/verification.md:53
msgid "Next, your `user` table must contain an `email_verified_at` column to store the date and time that the user's email address was verified. By default, the `users` table migration included with the Laravel framework already includes this column. So, all you need to do is run your database migrations:"
msgstr ""

#. type: Plain text
#: docs/master/views.md:211
#, no-wrap
msgid "        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies automatically resolved by service container...\n"
"            $this->users = $users;\n"
"        }\n"
msgstr ""

