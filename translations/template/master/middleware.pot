# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-27 11:56+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/middleware.md:1
#, no-wrap
msgid "Middleware"
msgstr ""

#. type: Bullet: '- '
#: docs/master/middleware.md:12
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/middleware.md:12
msgid "[Defining Middleware](#defining-middleware)"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:12
#, no-wrap
msgid ""
"- [Registering Middleware](#registering-middleware)\n"
"    - [Global Middleware](#global-middleware)\n"
"    - [Assigning Middleware To Routes](#assigning-middleware-to-routes)\n"
"    - [Middleware Groups](#middleware-groups)\n"
"    - [Sorting Middleware](#sorting-middleware)\n"
"- [Middleware Parameters](#middleware-parameters)\n"
"- [Terminable Middleware](#terminable-middleware)\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:14
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/middleware.md:14
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:17
msgid ""
"Middleware provide a convenient mechanism for inspecting and filtering HTTP "
"requests entering your application. For example, Laravel includes a "
"middleware that verifies the user of your application is authenticated. If "
"the user is not authenticated, the middleware will redirect the user to your "
"application's login screen. However, if the user is authenticated, the "
"middleware will allow the request to proceed further into the application."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:19
msgid ""
"Additional middleware can be written to perform a variety of tasks besides "
"authentication. For example, a logging middleware might log all incoming "
"requests to your application. There are several middleware included in the "
"Laravel framework, including middleware for authentication and CSRF "
"protection. All of these middleware are located in the `app/Http/Middleware` "
"directory."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:21
#, no-wrap
msgid "<a name=\"defining-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/middleware.md:21
#, no-wrap
msgid "Defining Middleware"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:24
msgid "To create a new middleware, use the `make:middleware` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:26
#, no-wrap
msgid "    php artisan make:middleware EnsureTokenIsValid\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:28
msgid ""
"This command will place a new `EnsureTokenIsValid` class within your "
"`app/Http/Middleware` directory. In this middleware, we will only allow "
"access to the route if the supplied `token` input matches a specified "
"value. Otherwise, we will redirect the users back to the `home` URI:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:30 docs/master/middleware.md:67 docs/master/middleware.md:85 docs/master/middleware.md:237 docs/master/middleware.md:275
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:32 docs/master/middleware.md:69 docs/master/middleware.md:87 docs/master/middleware.md:239
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:34 docs/master/middleware.md:71 docs/master/middleware.md:89 docs/master/middleware.md:241 docs/master/middleware.md:279
#, no-wrap
msgid "    use Closure;\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:49
#, no-wrap
msgid ""
"    class EnsureTokenIsValid\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->input('token') !== 'my-secret-token') {\n"
"                return redirect('home');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:53 docs/master/middleware.md:81
#, no-wrap
msgid ""
"            return $next($request);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:55
msgid ""
"As you can see, if the given `token` does not match our secret token, the "
"middleware will return an HTTP redirect to the client; otherwise, the "
"request will be passed further into the application. To pass the request "
"deeper into the application (allowing the middleware to \"pass\"), you "
"should call the `$next` callback with the `$request`."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:57
msgid ""
"It's best to envision middleware as a series of \"layers\" HTTP requests "
"must pass through before they hit your application. Each layer can examine "
"the request and even reject it entirely."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:59
#, no-wrap
msgid ""
"> {tip} All middleware are resolved via the [service "
"container](/docs/{{version}}/container), so you may type-hint any "
"dependencies you need within a middleware's constructor.\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:62
#, no-wrap
msgid ""
"<a name=\"before-after-middleware\"></a>\n"
"<a name=\"middleware-and-responses\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/middleware.md:62
#, no-wrap
msgid "Middleware & Responses"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:65
msgid ""
"Of course, a middleware can perform tasks before or after passing the "
"request deeper into the application. For example, the following middleware "
"would perform some task **before** the request is handled by the "
"application:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:77
#, no-wrap
msgid ""
"    class BeforeMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            // Perform action\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:83
msgid ""
"However, this middleware would perform its task **after** the request is "
"handled by the application:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:95
#, no-wrap
msgid ""
"    class AfterMiddleware\n"
"    {\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            $response = $next($request);\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:97
#, no-wrap
msgid "            // Perform action\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:101
#, no-wrap
msgid ""
"            return $response;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:103
#, no-wrap
msgid "<a name=\"registering-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/middleware.md:103
#, no-wrap
msgid "Registering Middleware"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:106
#, no-wrap
msgid "<a name=\"global-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/middleware.md:106
#, no-wrap
msgid "Global Middleware"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:109
msgid ""
"If you want a middleware to run during every HTTP request to your "
"application, list the middleware class in the `$middleware` property of your "
"`app/Http/Kernel.php` class."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:111
#, no-wrap
msgid "<a name=\"assigning-middleware-to-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/middleware.md:111
#, no-wrap
msgid "Assigning Middleware To Routes"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:114
msgid ""
"If you would like to assign middleware to specific routes, you should first "
"assign the middleware a key in your application's `app/Http/Kernel.php` "
"file. By default, the `$routeMiddleware` property of this class contains "
"entries for the middleware included with Laravel. You may add your own "
"middleware to this list and assign it a key of your choosing:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:116
#, no-wrap
msgid "    // Within App\\Http\\Kernel class...\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:128
#, no-wrap
msgid ""
"    protected $routeMiddleware = [\n"
"        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"        'auth.basic' => "
"\\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"        'bindings' => "
"\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        'cache.headers' => "
"\\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"        'guest' => "
"\\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"        'signed' => "
"\\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"        'throttle' => "
"\\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        'verified' => "
"\\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:130
msgid ""
"Once the middleware has been defined in the HTTP kernel, you may use the "
"`middleware` method to assign middleware to a route:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:134
#, no-wrap
msgid ""
"    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:136
msgid ""
"You may assign multiple middleware to the route by passing an array of "
"middleware names to the `middleware` method:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:140
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        //\n"
"    })->middleware(['first', 'second']);\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:142
msgid "When assigning middleware, you may also pass the fully qualified class name:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:144 docs/master/middleware.md:152
#, no-wrap
msgid "    use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:148
#, no-wrap
msgid ""
"    Route::get('/profile', function () {\n"
"        //\n"
"    })->middleware(EnsureTokenIsValid::class);\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:150
msgid ""
"When assigning middleware to a group of routes, you may occasionally need to "
"prevent the middleware from being applied to an individual route within the "
"group. You may accomplish this using the `withoutMiddleware` method:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:157
#, no-wrap
msgid ""
"    Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"        Route::get('/', function () {\n"
"            //\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:162
#, no-wrap
msgid ""
"        Route::get('/profile', function () {\n"
"            //\n"
"        })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:164
msgid ""
"The `withoutMiddleware` method can only remove route middleware and does not "
"apply to [global middleware](#global-middleware)."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:166
#, no-wrap
msgid "<a name=\"middleware-groups\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/middleware.md:166
#, no-wrap
msgid "Middleware Groups"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:169
msgid ""
"Sometimes you may want to group several middleware under a single key to "
"make them easier to assign to routes. You may accomplish this using the "
"`$middlewareGroups` property of your HTTP kernel."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:171
msgid ""
"Out of the box, Laravel comes with `web` and `api` middleware groups that "
"contain common middleware you may want to apply to your web and API "
"routes. Remember, these middleware group are automatically applied by your "
"application's `App\\Providers\\RouteServiceProvider` service provider to "
"routes within your corresponding `web` and `api` route files:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:187
#, no-wrap
msgid ""
"    /**\n"
"     * The application's route middleware groups.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewareGroups = [\n"
"        'web' => [\n"
"            \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"            "
"\\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"            \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"            // "
"\\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:193
#, no-wrap
msgid ""
"        'api' => [\n"
"            'throttle:api',\n"
"            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        ],\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:195
msgid ""
"Middleware groups may be assigned to routes and controller actions using the "
"same syntax as individual middleware. Again, middleware groups make it more "
"convenient to assign many middleware to a route at once:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:199
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        //\n"
"    })->middleware('web');\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:203
#, no-wrap
msgid ""
"    Route::middleware(['web'])->group(function () {\n"
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:205
#, no-wrap
msgid ""
"> {tip} Out of the box, the `web` and `api` middleware groups are "
"automatically applied to your application's corresponding `routes/web.php` "
"and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`.\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:207
#, no-wrap
msgid "<a name=\"sorting-middleware\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/middleware.md:207
#, no-wrap
msgid "Sorting Middleware"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:210
msgid ""
"Rarely, you may need your middleware to execute in a specific order but not "
"have control over their order when they are assigned to the route. In this "
"case, you may specify your middleware priority using the "
"`$middlewarePriority` property of your `app/Http/Kernel.php` file. This "
"property may not exist in your HTTP kernel by default. If it does not exist, "
"you may copy its default definition below:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:228
#, no-wrap
msgid ""
"    /**\n"
"     * The priority-sorted list of middleware.\n"
"     *\n"
"     * This forces non-global middleware to always be in the given order.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $middlewarePriority = [\n"
"        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        "
"\\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:230
#, no-wrap
msgid "<a name=\"middleware-parameters\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/middleware.md:230
#, no-wrap
msgid "Middleware Parameters"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:233
msgid ""
"Middleware can also receive additional parameters. For example, if your "
"application needs to verify that the authenticated user has a given \"role\" "
"before performing a given action, you could create an `EnsureUserHasRole` "
"middleware that receives a role name as an additional argument."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:235
msgid ""
"Additional middleware parameters will be passed to the middleware after the "
"`$next` argument:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:257
#, no-wrap
msgid ""
"    class EnsureUserHasRole\n"
"    {\n"
"        /**\n"
"         * Handle the incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @param  string  $role\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next, $role)\n"
"        {\n"
"            if (! $request->user()->hasRole($role)) {\n"
"                // Redirect...\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:260
#, no-wrap
msgid ""
"            return $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:262
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:264
msgid ""
"Middleware parameters may be specified when defining the route by separating "
"the middleware name and parameters with a `:`. Multiple parameters should be "
"delimited by commas:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:268
#, no-wrap
msgid ""
"    Route::put('/post/{id}', function ($id) {\n"
"        //\n"
"    })->middleware('role:editor');\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:270
#, no-wrap
msgid "<a name=\"terminable-middleware\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/middleware.md:270
#, no-wrap
msgid "Terminable Middleware"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:273
msgid ""
"Sometimes a middleware may need to do some work after the HTTP response has "
"been sent to the browser. If you define a `terminate` method on your "
"middleware and your web server is using FastCGI, the `terminate` method will "
"automatically be called after the response is sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:277
#, no-wrap
msgid "    namespace Illuminate\\Session\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:293
#, no-wrap
msgid ""
"    class TerminatingMiddleware\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            return $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:306
#, no-wrap
msgid ""
"        /**\n"
"         * Handle tasks after the response has been sent to the browser.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Illuminate\\Http\\Response  $response\n"
"         * @return void\n"
"         */\n"
"        public function terminate($request, $response)\n"
"        {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:308
msgid ""
"The `terminate` method should receive both the request and the "
"response. Once you have defined a terminable middleware, you should add it "
"to the list of routes or global middleware in the `app/Http/Kernel.php` "
"file."
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:310
msgid ""
"When calling the `terminate` method on your middleware, Laravel will resolve "
"a fresh instance of the middleware from the [service "
"container](/docs/{{version}}/container). If you would like to use the same "
"middleware instance when the `handle` and `terminate` methods are called, "
"register the middleware with the container using the container's `singleton` "
"method. Typically this should be done in the `register` method of your "
"`AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:312
#, no-wrap
msgid "    use App\\Http\\Middleware\\TerminatingMiddleware;\n"
msgstr ""

#. type: Plain text
#: docs/master/middleware.md:321
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->app->singleton(TerminatingMiddleware::class);\n"
"    }\n"
msgstr ""
