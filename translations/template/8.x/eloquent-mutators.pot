# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 05:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/eloquent-mutators.md:1
#, no-wrap
msgid "Eloquent: Mutators & Casting"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-mutators.md:18
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:18
#, no-wrap
msgid ""
"- [Accessors & Mutators](#accessors-and-mutators)\n"
"    - [Defining An Accessor](#defining-an-accessor)\n"
"    - [Defining A Mutator](#defining-a-mutator)\n"
"- [Attribute Casting](#attribute-casting)\n"
"    - [Array & JSON Casting](#array-and-json-casting)\n"
"    - [Date Casting](#date-casting)\n"
"    - [Encrypted Casting](#encrypted-casting)\n"
"    - [Query Time Casting](#query-time-casting)\n"
"- [Custom Casts](#custom-casts)\n"
"    - [Value Object Casting](#value-object-casting)\n"
"    - [Array / JSON Serialization](#array-json-serialization)\n"
"    - [Inbound Casting](#inbound-casting)\n"
"    - [Cast Parameters](#cast-parameters)\n"
"    - [Castables](#castables)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:20
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:20
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:23
msgid ""
"Accessors, mutators, and attribute casting allow you to transform Eloquent "
"attribute values when you retrieve or set them on model instances. For "
"example, you may want to use the [Laravel "
"encrypter](/docs/{{version}}/encryption) to encrypt a value while it is "
"stored in the database, and then automatically decrypt the attribute when "
"you access it on an Eloquent model. Or, you may want to convert a JSON "
"string that is stored in your database to an array when it is accessed via "
"your Eloquent model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:25
#, no-wrap
msgid "<a name=\"accessors-and-mutators\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:25
#, no-wrap
msgid "Accessors & Mutators"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:28
#, no-wrap
msgid "<a name=\"defining-an-accessor\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:28
#, no-wrap
msgid "Defining An Accessor"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:31
msgid ""
"An accessor transforms an Eloquent attribute value when it is accessed. To "
"define an accessor, create a `get{Attribute}Attribute` method on your model "
"where `{Attribute}` is the \"studly\" cased name of the column you wish to "
"access."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:33
msgid ""
"In this example, we'll define an accessor for the `first_name` "
"attribute. The accessor will automatically be called by Eloquent when "
"attempting to retrieve the value of the `first_name` attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:35 docs/8.x/eloquent-mutators.md:84 docs/8.x/eloquent-mutators.md:145 docs/8.x/eloquent-mutators.md:185 docs/8.x/eloquent-mutators.md:343 docs/8.x/eloquent-mutators.md:382 docs/8.x/eloquent-mutators.md:408 docs/8.x/eloquent-mutators.md:495 docs/8.x/eloquent-mutators.md:565 docs/8.x/eloquent-mutators.md:599
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:37 docs/8.x/eloquent-mutators.md:86 docs/8.x/eloquent-mutators.md:147 docs/8.x/eloquent-mutators.md:187 docs/8.x/eloquent-mutators.md:384 docs/8.x/eloquent-mutators.md:567 docs/8.x/eloquent-mutators.md:601
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:39 docs/8.x/eloquent-mutators.md:88 docs/8.x/eloquent-mutators.md:149 docs/8.x/eloquent-mutators.md:189
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:53
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return string\n"
"         */\n"
"        public function getFirstNameAttribute($value)\n"
"        {\n"
"            return ucfirst($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:55
msgid ""
"As you can see, the original value of the column is passed to the accessor, "
"allowing you to manipulate and return the value. To access the value of the "
"accessor, you may simply access the `first_name` attribute on a model "
"instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:57 docs/8.x/eloquent-mutators.md:106 docs/8.x/eloquent-mutators.md:205 docs/8.x/eloquent-mutators.md:459
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:59 docs/8.x/eloquent-mutators.md:108 docs/8.x/eloquent-mutators.md:207 docs/8.x/eloquent-mutators.md:219 docs/8.x/eloquent-mutators.md:228 docs/8.x/eloquent-mutators.md:461
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:61
#, no-wrap
msgid "    $firstName = $user->first_name;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:63
msgid ""
"You are not limited to interacting with a single attribute within your "
"accessor. You may also use accessors to return new, computed values from "
"existing attributes:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:73
#, no-wrap
msgid ""
"    /**\n"
"     * Get the user's full name.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getFullNameAttribute()\n"
"    {\n"
"        return \"{$this->first_name} {$this->last_name}\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:75
#, no-wrap
msgid ""
"> {tip} If you would like these computed values to be added to the array / "
"JSON representations of your model, [you will need to append "
"them](/docs/{{version}}/eloquent-serialization#appending-values-to-json).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:77
#, no-wrap
msgid "<a name=\"defining-a-mutator\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:77
#, no-wrap
msgid "Defining A Mutator"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:80
msgid ""
"A mutator transforms an Eloquent attribute value when it is set. To define a "
"mutator, define a `set{Attribute}Attribute` method on your model where "
"`{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:82
msgid ""
"Let's define a mutator for the `first_name` attribute. This mutator will be "
"automatically called when we attempt to set the value of the `first_name` "
"attribute on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:102
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Set the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return void\n"
"         */\n"
"        public function setFirstNameAttribute($value)\n"
"        {\n"
"            $this->attributes['first_name'] = strtolower($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:104
msgid ""
"The mutator will receive the value that is being set on the attribute, "
"allowing you to manipulate the value and set the manipulated value on the "
"Eloquent model's internal `$attributes` property. To use our mutator, we "
"only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:110
#, no-wrap
msgid "    $user->first_name = 'Sally';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:112
msgid ""
"In this example, the `setFirstNameAttribute` function will be called with "
"the value `Sally`. The mutator will then apply the `strtolower` function to "
"the name and set its resulting value in the internal `$attributes` array."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:114
#, no-wrap
msgid "<a name=\"attribute-casting\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:114
#, no-wrap
msgid "Attribute Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:117
msgid ""
"Attribute casting provides functionality similar to accessors and mutators "
"without requiring you to define any additional methods on your "
"model. Instead, your model's `$casts` property provides a convenient method "
"of converting attributes to common data types."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:119
msgid ""
"The `$casts` property should be an array where the key is the name of the "
"attribute being cast and the value is the type you wish to cast the column "
"to. The supported cast types are:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:141
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- `array`\n"
"- `boolean`\n"
"- `collection`\n"
"- `date`\n"
"- `datetime`\n"
"- `immutable_date`\n"
"- `immutable_datetime`\n"
"- `decimal:<digits>`\n"
"- `double`\n"
"- `encrypted`\n"
"- `encrypted:array`\n"
"- `encrypted:collection`\n"
"- `encrypted:object`\n"
"- `float`\n"
"- `integer`\n"
"- `object`\n"
"- `real`\n"
"- `string`\n"
"- `timestamp`\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:143
msgid ""
"To demonstrate attribute casting, let's cast the `is_admin` attribute, which "
"is stored in our database as an integer (`0` or `1`) to a boolean value:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:161
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'is_admin' => 'boolean',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:163
msgid ""
"After defining the cast, the `is_admin` attribute will always be cast to a "
"boolean when you access it, even if the underlying value is stored in the "
"database as an integer:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:165
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:169
#, no-wrap
msgid ""
"    if ($user->is_admin) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:171
msgid ""
"If you need to add a new, temporary cast at runtime, you may use the "
"`mergeCasts` method. These cast definitions will be added to any of the "
"casts already defined on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:176
#, no-wrap
msgid ""
"    $user->mergeCasts([\n"
"        'is_admin' => 'integer',\n"
"        'options' => 'object',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:178
#, no-wrap
msgid ""
"> {note} Attributes that are `null` will not be cast. In addition, you "
"should never define a cast (or an attribute) that has the same name as a "
"relationship.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:180
#, no-wrap
msgid "<a name=\"array-and-json-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:180
#, no-wrap
msgid "Array & JSON Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:183
msgid ""
"The `array` cast is particularly useful when working with columns that are "
"stored as serialized JSON. For example, if your database has a `JSON` or "
"`TEXT` field type that contains serialized JSON, adding the `array` cast to "
"that attribute will automatically deserialize the attribute to a PHP array "
"when you access it on your Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:201
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => 'array',\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:203
msgid ""
"Once the cast is defined, you may access the `options` attribute and it will "
"automatically be deserialized from JSON into a PHP array. When you set the "
"value of the `options` attribute, the given array will automatically be "
"serialized back into JSON for storage:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:209
#, no-wrap
msgid "    $options = $user->options;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:211
#, no-wrap
msgid "    $options['key'] = 'value';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:213
#, no-wrap
msgid "    $user->options = $options;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:215 docs/8.x/eloquent-mutators.md:465
#, no-wrap
msgid "    $user->save();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:217
#, no-wrap
msgid ""
"To update a single field of a JSON attribute with a more terse syntax, you "
"may use the `->` operator when calling the `update` method:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:221
#, no-wrap
msgid "    $user->update(['options->key' => 'value']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:223
#, no-wrap
msgid "<a name=\"array-object-and-collection-casting\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-mutators.md:223
#, no-wrap
msgid "Array Object & Collection Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:226
msgid ""
"Although the standard `array` cast is sufficient for many applications, it "
"does have some disadvantages. Since the `array` cast returns a primitive "
"type, it is not possible to mutate an offset of the array directly. For "
"example, the following code will trigger a PHP error:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:230
#, no-wrap
msgid "    $user->options['key'] = $value;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:232
msgid ""
"To solve this, Laravel offers an `AsArrayObject` cast that casts your JSON "
"attribute to an "
"[ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) "
"class. This feature is implemented using Laravel's [custom "
"cast](#custom-casts) implementation, which allows Laravel to intelligently "
"cache and transform the mutated object such that individual offsets may be "
"modified without triggering a PHP error. To use the `AsArrayObject` cast, "
"simply assign it to an attribute:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:234
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:243
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsArrayObject::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:245
msgid ""
"Similarly, Laravel offers an `AsCollection` cast that casts your JSON "
"attribute to a Laravel [Collection](/docs/{{version}}/collections) instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:247
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:256
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsCollection::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:258
#, no-wrap
msgid "<a name=\"date-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:258
#, no-wrap
msgid "Date Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:261
msgid ""
"By default, Eloquent will cast the `created_at` and `updated_at` columns to "
"instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends "
"the PHP `DateTime` class and provides an assortment of helpful methods. You "
"may cast additional date attributes by defining additional date casts within "
"your model's `$cast` property array. Typically, dates should be cast using "
"the `datetime` or `immutable_datetime` cast types."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:263
msgid ""
"When defining a `date` or `datetime` cast, you may also specify the date's "
"format. This format will be used when the [model is serialized to an array "
"or JSON](/docs/{{version}}/eloquent-serialization):"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:272
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'created_at' => 'datetime:Y-m-d',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:274
msgid ""
"When a column is cast as a date, you may set the corresponding model "
"attribute value to a UNIX timestamp, date string (`Y-m-d`), date-time "
"string, or a `DateTime` / `Carbon` instance. The date's value will be "
"correctly converted and stored in your database."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:276
msgid ""
"You may customize the default serialization format for all of your model's "
"dates by defining a `serializeDate` method on your model. This method does "
"not affect how your dates are formatted for storage in the database:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:287
#, no-wrap
msgid ""
"    /**\n"
"     * Prepare a date for array / JSON serialization.\n"
"     *\n"
"     * @param  \\DateTimeInterface  $date\n"
"     * @return string\n"
"     */\n"
"    protected function serializeDate(DateTimeInterface $date)\n"
"    {\n"
"        return $date->format('Y-m-d');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:289
msgid ""
"To specify the format that should be used when actually storing a model's "
"dates within your database, you should define a `$dateFormat` property on "
"your model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:296
#, no-wrap
msgid ""
"    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:298
#, no-wrap
msgid "<a name=\"date-casting-and-timezones\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-mutators.md:298
#, no-wrap
msgid "Date Casting, Serialization, & Timezones"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:301
msgid ""
"By default, the `date` and `datetime` casts will serialize dates to a UTC "
"ISO-8601 date string (`1986-05-28T21:05:54.000000Z`), regardless of the "
"timezone specified in your application's `timezone` configuration "
"option. You are strongly encouraged to always use this serialization format, "
"as well as to store your application's dates in the UTC timezone by not "
"changing your application's `timezone` configuration option from its default "
"`UTC` value. Consistently using the UTC timezone throughout your application "
"will provide the maximum level of interoperability with other date "
"manipulation libraries written in PHP and JavaScript."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:303
msgid ""
"If a custom format is applied to the `date` or `datetime` cast, such as "
"`datetime:Y-m-d H:i:s`, the inner timezone of the Carbon instance will be "
"used during date serialization. Typically, this will be the timezone "
"specified in your application's `timezone` configuration option."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:305
#, no-wrap
msgid "<a name=\"encrypted-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:305
#, no-wrap
msgid "Encrypted Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:308
msgid ""
"The `encrypted` cast will encrypt a model's attribute value using Laravel's "
"built-in [encryption](/docs/{{version}}/encryption) features. In addition, "
"the `encrypted:array`, `encrypted:collection`, and `encrypted:object` casts "
"work like their unencrypted counterparts; however, as you might expect, the "
"underlying value is encrypted when stored in your database."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:310
msgid ""
"As the final length of the encrypted text is not predictable and is longer "
"than its plain text counterpart, make sure the associated database column is "
"of `TEXT` type or larger. In addition, since the values are encrypted in the "
"database, you will not be able to query or search encrypted attribute "
"values."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:312
#, no-wrap
msgid "<a name=\"query-time-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:312
#, no-wrap
msgid "Query Time Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:315
msgid ""
"Sometimes you may need to apply casts while executing a query, such as when "
"selecting a raw value from a table. For example, consider the following "
"query:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:318
#, no-wrap
msgid ""
"    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:324
#, no-wrap
msgid ""
"    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:326
msgid ""
"The `last_posted_at` attribute on the results of this query will be a simple "
"string. It would be wonderful if we could apply a `datetime` cast to this "
"attribute when executing the query. Thankfully, we may accomplish this using "
"the `withCasts` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:334
#, no-wrap
msgid ""
"    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->withCasts([\n"
"        'last_posted_at' => 'datetime'\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:336
#, no-wrap
msgid "<a name=\"custom-casts\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-mutators.md:336
#, no-wrap
msgid "Custom Casts"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:339
msgid ""
"Laravel has a variety of built-in, helpful cast types; however, you may "
"occasionally need to define your own cast types. You may accomplish this by "
"defining a class that implements the `CastsAttributes` interface."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:341
msgid ""
"Classes that implement this interface must define a `get` and `set` "
"method. The `get` method is responsible for transforming a raw value from "
"the database into a cast value, while the `set` method should transform a "
"cast value into a raw value that can be stored in the database. As an "
"example, we will re-implement the built-in `json` cast type as a custom cast "
"type:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:345 docs/8.x/eloquent-mutators.md:410 docs/8.x/eloquent-mutators.md:497
#, no-wrap
msgid "    namespace App\\Casts;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:347
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:363
#, no-wrap
msgid ""
"    class Json implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_decode($value, true);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:378
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_encode($value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:380
msgid ""
"Once you have defined a custom cast type, you may attach it to a model "
"attribute using its class name:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:387
#, no-wrap
msgid ""
"    use App\\Casts\\Json;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:399
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => Json::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:401
#, no-wrap
msgid "<a name=\"value-object-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:401
#, no-wrap
msgid "Value Object Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:404
msgid ""
"You are not limited to casting values to primitive types. You may also cast "
"values to objects. Defining custom casts that cast values to objects is very "
"similar to casting to primitive types; however, the `set` method should "
"return an array of key / value pairs that will be used to set raw, storable "
"values on the model."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:406
msgid ""
"As an example, we will define a custom cast class that casts multiple model "
"values into a single `Address` value object. We will assume the `Address` "
"value has two public properties: `lineOne` and `lineTwo`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:414
#, no-wrap
msgid ""
"    use App\\Models\\Address as AddressModel;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"    use InvalidArgumentException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:433
#, no-wrap
msgid ""
"    class Address implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return \\App\\Models\\Address\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return new AddressModel(\n"
"                $attributes['address_line_one'],\n"
"                $attributes['address_line_two']\n"
"            );\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:448
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  \\App\\Models\\Address  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            if (! $value instanceof AddressModel) {\n"
"                throw new InvalidArgumentException('The given value is not "
"an Address instance.');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:455
#, no-wrap
msgid ""
"            return [\n"
"                'address_line_one' => $value->lineOne,\n"
"                'address_line_two' => $value->lineTwo,\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:457
msgid ""
"When casting to value objects, any changes made to the value object will "
"automatically be synced back to the model before the model is saved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:463
#, no-wrap
msgid "    $user->address->lineOne = 'Updated Address Value';\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:467
#, no-wrap
msgid ""
"> {tip} If you plan to serialize your Eloquent models containing value "
"objects to JSON or arrays, you should implement the "
"`Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` "
"interfaces on the value object.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:469
#, no-wrap
msgid "<a name=\"array-json-serialization\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:469
#, no-wrap
msgid "Array / JSON Serialization"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:472
msgid ""
"When an Eloquent model is converted to an array or JSON using the `toArray` "
"and `toJson` methods, your custom cast value objects will typically be "
"serialized as well as long as they implement the "
"`Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` "
"interfaces. However, when using value objects provided by third-party "
"libraries, you may not have the ability to add these interfaces to the "
"object."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:474
msgid ""
"Therefore, you may specify that your custom cast class will be responsible "
"for serializing the value object. To do so, your custom cast class should "
"implement the "
"`Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` "
"interface. This interface states that your class should contain a "
"`serialize` method which should return the serialized form of your value "
"object:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:488
#, no-wrap
msgid ""
"    /**\n"
"     * Get the serialized representation of the value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return mixed\n"
"     */\n"
"    public function serialize($model, string $key, $value, array "
"$attributes)\n"
"    {\n"
"        return (string) $value;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:490
#, no-wrap
msgid "<a name=\"inbound-casting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:490
#, no-wrap
msgid "Inbound Casting"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:493
msgid ""
"Occasionally, you may need to write a custom cast that only transforms "
"values that are being set on the model and does not perform any operations "
"when attributes are being retrieved from the model. A classic example of an "
"inbound only cast is a \"hashing\" cast. Inbound only custom casts should "
"implement the `CastsInboundAttributes` interface, which only requires a "
"`set` method to be defined."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:499
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:508
#, no-wrap
msgid ""
"    class Hash implements CastsInboundAttributes\n"
"    {\n"
"        /**\n"
"         * The hashing algorithm.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $algorithm;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:519
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new cast class instance.\n"
"         *\n"
"         * @param  string|null  $algorithm\n"
"         * @return void\n"
"         */\n"
"        public function __construct($algorithm = null)\n"
"        {\n"
"            $this->algorithm = $algorithm;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:536
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return is_null($this->algorithm)\n"
"                        ? bcrypt($value)\n"
"                        : hash($this->algorithm, $value);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:538
#, no-wrap
msgid "<a name=\"cast-parameters\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:538
#, no-wrap
msgid "Cast Parameters"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:541
msgid ""
"When attaching a custom cast to a model, cast parameters may be specified by "
"separating them from the class name using a `:` character and "
"comma-delimiting multiple parameters. The parameters will be passed to the "
"constructor of the cast class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:550
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'secret' => Hash::class.':sha256',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:552
#, no-wrap
msgid "<a name=\"castables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-mutators.md:552
#, no-wrap
msgid "Castables"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:555
msgid ""
"You may want to allow your application's value objects to define their own "
"custom cast classes. Instead of attaching the custom cast class to your "
"model, you may alternatively attach a value object class that implements the "
"`Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:557 docs/8.x/eloquent-mutators.md:588
#, no-wrap
msgid "    use App\\Models\\Address;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:561
#, no-wrap
msgid ""
"    protected $casts = [\n"
"        'address' => Address::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:563
msgid ""
"Objects that implement the `Castable` interface must define a `castUsing` "
"method that returns the class name of the custom caster class that is "
"responsible for casting to and from the `Castable` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:570
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use App\\Casts\\Address as AddressCast;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:584
#, no-wrap
msgid ""
"    class Address implements Castable\n"
"    {\n"
"        /**\n"
"         * Get the name of the caster class to use when casting from / to "
"this cast target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return AddressCast::class;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:586
msgid ""
"When using `Castable` classes, you may still provide arguments in the "
"`$casts` definition. The arguments will be passed to the `castUsing` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:592
#, no-wrap
msgid ""
"    protected $casts = [\n"
"        'address' => Address::class.':argument',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:594
#, no-wrap
msgid "<a name=\"anonymous-cast-classes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-mutators.md:594
#, no-wrap
msgid "Castables & Anonymous Cast Classes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:597
msgid ""
"By combining \"castables\" with PHP's [anonymous "
"classes](https://www.php.net/manual/en/language.oop5.anonymous.php), you may "
"define a value object and its casting logic as a single castable object. To "
"accomplish this, return an anonymous class from your value object's "
"`castUsing` method. The anonymous class should implement the "
"`CastsAttributes` interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:604
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:608
#, no-wrap
msgid ""
"    class Address implements Castable\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:626
#, no-wrap
msgid ""
"        /**\n"
"         * Get the caster class to use when casting from / to this cast "
"target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return object|string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return new class implements CastsAttributes\n"
"            {\n"
"                public function get($model, $key, $value, $attributes)\n"
"                {\n"
"                    return new Address(\n"
"                        $attributes['address_line_one'],\n"
"                        $attributes['address_line_two']\n"
"                    );\n"
"                }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-mutators.md:636
#, no-wrap
msgid ""
"                public function set($model, $key, $value, $attributes)\n"
"                {\n"
"                    return [\n"
"                        'address_line_one' => $value->lineOne,\n"
"                        'address_line_two' => $value->lineTwo,\n"
"                    ];\n"
"                }\n"
"            };\n"
"        }\n"
"    }\n"
msgstr ""
