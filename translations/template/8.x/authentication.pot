# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 14:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/authentication.md:1
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:30
#, no-wrap
msgid ""
"- [Introduction](#introduction)\n"
"    - [Starter Kits](#starter-kits)\n"
"    - [Database Considerations](#introduction-database-considerations)\n"
"    - [Ecosystem Overview](#ecosystem-overview)\n"
"- [Authentication Quickstart](#authentication-quickstart)\n"
"    - [Install A Starter Kit](#install-a-starter-kit)\n"
"    - [Retrieving The Authenticated "
"User](#retrieving-the-authenticated-user)\n"
"    - [Protecting Routes](#protecting-routes)\n"
"    - [Login Throttling](#login-throttling)\n"
"- [Manually Authenticating Users](#authenticating-users)\n"
"    - [Remembering Users](#remembering-users)\n"
"    - [Other Authentication Methods](#other-authentication-methods)\n"
"- [HTTP Basic Authentication](#http-basic-authentication)\n"
"    - [Stateless HTTP Basic "
"Authentication](#stateless-http-basic-authentication)\n"
"- [Logging Out](#logging-out)\n"
"    - [Invalidating Sessions On Other "
"Devices](#invalidating-sessions-on-other-devices)\n"
"- [Password Confirmation](#password-confirmation)\n"
"    - [Configuration](#password-confirmation-configuration)\n"
"    - [Routing](#password-confirmation-routing)\n"
"    - [Protecting Routes](#password-confirmation-protecting-routes)\n"
"- [Adding Custom Guards](#adding-custom-guards)\n"
"    - [Closure Request Guards](#closure-request-guards)\n"
"- [Adding Custom User Providers](#adding-custom-user-providers)\n"
"    - [The User Provider Contract](#the-user-provider-contract)\n"
"    - [The Authenticatable Contract](#the-authenticatable-contract)\n"
"- [Social Authentication](/docs/{{version}}/socialite)\n"
"- [Events](#events)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:32
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:32
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:35
msgid ""
"Many web applications provide a way for their users to authenticate with the "
"application and \"login\". Implementing this feature in web applications can "
"be a complex and potentially risky endeavor. For this reason, Laravel "
"strives to give you the tools you need to implement authentication quickly, "
"securely, and easily."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:37
msgid ""
"At its core, Laravel's authentication facilities are made up of \"guards\" "
"and \"providers\". Guards define how users are authenticated for each "
"request. For example, Laravel ships with a `session` guard which maintains "
"state using session storage and cookies."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:39
msgid ""
"Providers define how users are retrieved from your persistent "
"storage. Laravel ships with support for retrieving users using "
"[Eloquent](/docs/{{version}}/eloquent) and the database query "
"builder. However, you are free to define additional providers as needed for "
"your application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:41
msgid ""
"Your application's authentication configuration file is located at "
"`config/auth.php`. This file contains several well documented options for "
"tweaking the behavior of Laravel's authentication services."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:43
#, no-wrap
msgid ""
"> {tip} Guards and providers should not be confused with \"roles\" and "
"\"permissions\". To learn more about authorizing user actions via "
"permissions, please refer to the "
"[authorization](/docs/{{version}}/authorization) documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:45
#, no-wrap
msgid "<a name=\"starter-kits\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:45
#, no-wrap
msgid "Starter Kits"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:48
msgid ""
"Want to get started fast? Install a [Laravel application starter "
"kit](/docs/{{version}}/starter-kits) in a fresh Laravel application. After "
"migrating your database, navigate your browser to `/register` or any other "
"URL that is assigned to your application. The starter kits will take care of "
"scaffolding your entire authentication system!"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:50
#, no-wrap
msgid ""
"**Even if you choose to not use a starter kit in your final Laravel "
"application, installing the [Laravel "
"Breeze](/docs/{{version}}/starter-kits#laravel-breeze) starter kit can be a "
"wonderful opportunity to learn how to implement all of Laravel's "
"authentication functionality in an actual Laravel project.** Since Laravel "
"Breeze creates authentication controllers, routes, and views for you, you "
"can examine the code within these files to learn how Laravel's "
"authentication features may be implemented.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:52
#, no-wrap
msgid "<a name=\"introduction-database-considerations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:52
#, no-wrap
msgid "Database Considerations"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:55
msgid ""
"By default, Laravel includes an `App\\Models\\User` [Eloquent "
"model](/docs/{{version}}/eloquent) in your `app/Models` directory. This "
"model may be used with the default Eloquent authentication driver. If your "
"application is not using Eloquent, you may use the `database` authentication "
"provider which uses the Laravel query builder."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:57
msgid ""
"When building the database schema for the `App\\Models\\User` model, make "
"sure the password column is at least 60 characters in length. Of course, the "
"`users` table migration that is included in new Laravel applications already "
"creates a column that exceeds this length."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:59
msgid ""
"Also, you should verify that your `users` (or equivalent) table contains a "
"nullable, string `remember_token` column of 100 characters. This column will "
"be used to store a token for users that select the \"remember me\" option "
"when logging into your application. Again, the default `users` table "
"migration that is included in new Laravel applications already contains this "
"column."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:61
#, no-wrap
msgid "<a name=\"ecosystem-overview\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:61
#, no-wrap
msgid "Ecosystem Overview"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:64
msgid ""
"Laravel offers several packages related to authentication. Before "
"continuing, we'll review the general authentication ecosystem in Laravel and "
"discuss each package's intended purpose."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:66
msgid ""
"First, consider how authentication works. When using a web browser, a user "
"will provide their username and password via a login form. If these "
"credentials are correct, the application will store information about the "
"authenticated user in the user's [session](/docs/{{version}}/session). A "
"cookie issued to the browser contains the session ID so that subsequent "
"requests to the application can associate the user with the correct "
"session. After the session cookie is received, the application will retrieve "
"the session data based on the session ID, note that the authentication "
"information has been stored in the session, and will consider the user as "
"\"authenticated\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:68
msgid ""
"When a remote service needs to authenticate to access an API, cookies are "
"not typically used for authentication because there is no web "
"browser. Instead, the remote service sends an API token to the API on each "
"request. The application may validate the incoming token against a table of "
"valid API tokens and \"authenticate\" the request as being performed by the "
"user associated with that API token."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:70
#, no-wrap
msgid "<a name=\"laravels-built-in-browser-authentication-services\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:70
#, no-wrap
msgid "Laravel's Built-in Browser Authentication Services"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:73
msgid ""
"Laravel includes built-in authentication and session services which are "
"typically accessed via the `Auth` and `Session` facades. These features "
"provide cookie based authentication for requests that are initiated from web "
"browsers. They provide methods that allow you to verify a user's credentials "
"and authenticate the user. In addition, these services will automatically "
"store the proper authentication data in the user's session and issue the "
"user's session cookie. A discussion of how to use these services is "
"contained within this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:75
#, no-wrap
msgid "**Application Starter Kits**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:77
msgid ""
"As discussed in this documentation, you can interact with these "
"authentication services manually to build your application's own "
"authentication layer. However, to help you get started more quickly, we have "
"released [free packages](/docs/{{version}}/starter-kits) that provide "
"robust, modern scaffolding of the entire authentication layer. These "
"packages are [Laravel "
"Breeze](/docs/{{version}}/starter-kits#laravel-breeze), [Laravel "
"Jetstream](/docs/{{version}}/starter-kits#laravel-jetstream), and [Laravel "
"Fortify](/docs/{{version}}/fortify)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:79
msgid ""
"_Laravel Breeze_ is a simple, minimal implementation of all of Laravel's "
"authentication features, including login, registration, password reset, "
"email verification, and password confirmation. Laravel Breeze's view layer "
"is comprised of simple [Blade templates](/docs/{{version}}/blade) styled "
"with [Tailwind CSS](https://tailwindcss.com). To get started, check out the "
"documentation on Laravel's [application starter "
"kits](/docs/{{version}}/starter-kits)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:81
msgid ""
"_Laravel Fortify_ is a headless authentication backend for Laravel that "
"implements many of the features found in this documentation, including "
"cookie-based authentication as well as other features such as two-factor "
"authentication and email verification. Fortify provides the authentication "
"backend for Laravel Jetstream or may be used independently in combination "
"with [Laravel Sanctum](/docs/{{version}}/sanctum) to provide authentication "
"for an SPA that needs to authenticate with Laravel."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:83
msgid ""
"_[Laravel Jetstream](https://jetstream.laravel.com)_ is a robust application "
"starter kit that consumes and exposes Laravel Fortify's authentication "
"services with a beautiful, modern UI powered by [Tailwind "
"CSS](https://tailwindcss.com), [Livewire](https://laravel-livewire.com), and "
"/ or [Inertia.js](https://inertiajs.com). Laravel Jetstream includes "
"optional support for two-factor authentication, team support, browser "
"session management, profile management, and built-in integration with "
"[Laravel Sanctum](/docs/{{version}}/sanctum) to offer API token "
"authentication. Laravel's API authentication offerings are discussed below."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:85
#, no-wrap
msgid "<a name=\"laravels-api-authentication-services\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:85
#, no-wrap
msgid "Laravel's API Authentication Services"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:88
msgid ""
"Laravel provides two optional packages to assist you in managing API tokens "
"and authenticating requests made with API tokens: "
"[Passport](/docs/{{version}}/passport) and "
"[Sanctum](/docs/{{version}}/sanctum). Please note that these libraries and "
"Laravel's built-in cookie based authentication libraries are not mutually "
"exclusive. These libraries primarily focus on API token authentication while "
"the built-in authentication services focus on cookie based browser "
"authentication. Many applications will use both Laravel's built-in cookie "
"based authentication services and one of Laravel's API authentication "
"packages."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:90
#, no-wrap
msgid "**Passport**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:92
msgid ""
"Passport is an OAuth2 authentication provider, offering a variety of OAuth2 "
"\"grant types\" which allow you to issue various types of tokens. In "
"general, this is a robust and complex package for API "
"authentication. However, most applications do not require the complex "
"features offered by the OAuth2 spec, which can be confusing for both users "
"and developers. In addition, developers have been historically confused "
"about how to authenticate SPA applications or mobile applications using "
"OAuth2 authentication providers like Passport."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:94
#, no-wrap
msgid "**Sanctum**\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:96
msgid ""
"In response to the complexity of OAuth2 and developer confusion, we set out "
"to build a simpler, more streamlined authentication package that could "
"handle both first-party web requests from a web browser and API requests via "
"tokens. This goal was realized with the release of [Laravel "
"Sanctum](/docs/{{version}}/sanctum), which should be considered the "
"preferred and recommended authentication package for applications that will "
"be offering a first-party web UI in addition to an API, or will be powered "
"by a single-page application (SPA) that exists separately from the backend "
"Laravel application, or applications that offer a mobile client."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:98
msgid ""
"Laravel Sanctum is a hybrid web / API authentication package that can manage "
"your application's entire authentication process. This is possible because "
"when Sanctum based applications receive a request, Sanctum will first "
"determine if the request includes a session cookie that references an "
"authenticated session. Sanctum accomplishes this by calling Laravel's "
"built-in authentication services which we discussed earlier. If the request "
"is not being authenticated via a session cookie, Sanctum will inspect the "
"request for an API token. If an API token is present, Sanctum will "
"authenticate the request using that token. To learn more about this process, "
"please consult Sanctum's [\"how it "
"works\"](/docs/{{version}}/sanctum#how-it-works) documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:100
msgid ""
"Laravel Sanctum is the API package we have chosen to include with the "
"[Laravel Jetstream](https://jetstream.laravel.com) application starter kit "
"because we believe it is the best fit for the majority of web application's "
"authentication needs."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:102
#, no-wrap
msgid "<a name=\"summary-choosing-your-stack\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:102
#, no-wrap
msgid "Summary & Choosing Your Stack"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:105
msgid ""
"In summary, if your application will be accessed using a browser and you are "
"building a monolithic Laravel application, your application will use "
"Laravel's built-in authentication services."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:107
msgid ""
"Next, if your application offers an API that will be consumed by third "
"parties, you will choose between [Passport](/docs/{{version}}/passport) or "
"[Sanctum](/docs/{{version}}/sanctum) to provide API token authentication for "
"your application. In general, Sanctum should be preferred when possible "
"since it is a simple, complete solution for API authentication, SPA "
"authentication, and mobile authentication, including support for \"scopes\" "
"or \"abilities\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:109
msgid ""
"If you are building a single-page application (SPA) that will be powered by "
"a Laravel backend, you should use [Laravel "
"Sanctum](/docs/{{version}}/sanctum). When using Sanctum, you will either "
"need to [manually implement your own backend authentication "
"routes](#authenticating-users) or utilize [Laravel "
"Fortify](/docs/{{version}}/fortify) as a headless authentication backend "
"service that provides routes and controllers for features such as "
"registration, password reset, email verification, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:111
msgid ""
"Passport may be chosen when your application absolutely needs all of the "
"features provided by the OAuth2 specification."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:113
msgid ""
"And, if you would like to get started quickly, we are pleased to recommend "
"[Laravel Jetstream](https://jetstream.laravel.com) as a quick way to start a "
"new Laravel application that already uses our preferred authentication stack "
"of Laravel's built-in authentication services and Laravel Sanctum."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:115
#, no-wrap
msgid "<a name=\"authentication-quickstart\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:115
#, no-wrap
msgid "Authentication Quickstart"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:118
#, no-wrap
msgid ""
"> {note} This portion of the documentation discusses authenticating users "
"via the [Laravel application starter kits](/docs/{{version}}/starter-kits), "
"which includes UI scaffolding to help you get started quickly. If you would "
"like to integrate with Laravel's authentication systems directly, check out "
"the documentation on [manually authenticating "
"users](#authenticating-users).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:120
#, no-wrap
msgid "<a name=\"install-a-starter-kit\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:120
#, no-wrap
msgid "Install A Starter Kit"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:123
msgid ""
"First, you should [install a Laravel application starter "
"kit](/docs/{{version}}/starter-kits). Our current starter kits, Laravel "
"Breeze and Laravel Jetstream, offer beautifully designed starting points for "
"incorporating authentication into your fresh Laravel application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:125
msgid ""
"Laravel Breeze is a minimal, simple implementation of all of Laravel's "
"authentication features, including login, registration, password reset, "
"email verification, and password confirmation. Laravel Breeze's view layer "
"is made up of simple [Blade templates](/docs/{{version}}/blade) styled with "
"[Tailwind CSS](https://tailwindcss.com)."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:127
msgid ""
"[Laravel Jetstream](https://jetstream.laravel.com) is a more robust "
"application starter kit that includes support for scaffolding your "
"application with [Livewire](https://laravel-livewire.com) or [Inertia.js and "
"Vue](https://inertiajs.com). In addition, Jetstream features optional "
"support for two-factor authentication, teams, profile management, browser "
"session management, API support via [Laravel "
"Sanctum](/docs/{{version}}/sanctum), account deletion, and more."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:129
#, no-wrap
msgid "<a name=\"retrieving-the-authenticated-user\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:129
#, no-wrap
msgid "Retrieving The Authenticated User"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:132
msgid ""
"After installing an authentication starter kit and allowing users to "
"register and authenticate with your application, you will often need to "
"interact with the currently authenticated user. While handling an incoming "
"request, you may access the authenticated user via the `Auth` facade's "
"`user` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:134 docs/8.x/authentication.md:169 docs/8.x/authentication.md:293 docs/8.x/authentication.md:307 docs/8.x/authentication.md:367 docs/8.x/authentication.md:433
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:137
#, no-wrap
msgid ""
"    // Retrieve the currently authenticated user...\n"
"    $user = Auth::user();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:140
#, no-wrap
msgid ""
"    // Retrieve the currently authenticated user's ID...\n"
"    $id = Auth::id();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:142
msgid ""
"Alternatively, once a user is authenticated, you may access the "
"authenticated user via an `Illuminate\\Http\\Request` instance. Remember, "
"type-hinted classes will automatically be injected into your controller "
"methods. By type-hinting the `Illuminate\\Http\\Request` object, you may "
"gain convenient access to the authenticated user from any controller method "
"in your application via the request's `user` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:144 docs/8.x/authentication.md:225 docs/8.x/authentication.md:363 docs/8.x/authentication.md:506 docs/8.x/authentication.md:580 docs/8.x/authentication.md:631 docs/8.x/authentication.md:659
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:146 docs/8.x/authentication.md:227
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:148
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:162
#, no-wrap
msgid ""
"    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Update the flight information for an existing flight.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function update(Request $request)\n"
"        {\n"
"            // $request->user()\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:164
#, no-wrap
msgid "<a name=\"determining-if-the-current-user-is-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:164
#, no-wrap
msgid "Determining If The Current User Is Authenticated"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:167
msgid ""
"To determine if the user making the incoming HTTP request is authenticated, "
"you may use the `check` method on the `Auth` facade. This method will return "
"`true` if the user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:173
#, no-wrap
msgid ""
"    if (Auth::check()) {\n"
"        // The user is logged in...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:175
#, no-wrap
msgid ""
"> {tip} Even though it is possible to determine if a user is authenticated "
"using the `check` method, you will typically use a middleware to verify that "
"the user is authenticated before allowing the user access to certain routes "
"/ controllers. To learn more about this, check out the documentation on "
"[protecting routes](/docs/{{version}}/authentication#protecting-routes).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:177
#, no-wrap
msgid "<a name=\"protecting-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:177 docs/8.x/authentication.md:488
#, no-wrap
msgid "Protecting Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:180
msgid ""
"[Route middleware](/docs/{{version}}/middleware) can be used to only allow "
"authenticated users to access a given route. Laravel ships with an `auth` "
"middleware, which references the "
"`Illuminate\\Auth\\Middleware\\Authenticate` class. Since this middleware is "
"already registered in your application's HTTP kernel, all you need to do is "
"attach the middleware to a route definition:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:184
#, no-wrap
msgid ""
"    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:186
#, no-wrap
msgid "<a name=\"redirecting-unauthenticated-users\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:186
#, no-wrap
msgid "Redirecting Unauthenticated Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:189
msgid ""
"When the `auth` middleware detects an unauthenticated user, it will redirect "
"the user to the `login` [named "
"route](/docs/{{version}}/routing#named-routes). You may modify this behavior "
"by updating the `redirectTo` function in your application's "
"`app/Http/Middleware/Authenticate.php` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:200
#, no-wrap
msgid ""
"    /**\n"
"     * Get the path the user should be redirected to.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return string\n"
"     */\n"
"    protected function redirectTo($request)\n"
"    {\n"
"        return route('login');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:202
#, no-wrap
msgid "<a name=\"specifying-a-guard\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:202
#, no-wrap
msgid "Specifying A Guard"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:205
msgid ""
"When attaching the `auth` middleware to a route, you may also specify which "
"\"guard\" should be used to authenticate the user. The guard specified "
"should correspond to one of the keys in the `guards` array of your "
"`auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:209
#, no-wrap
msgid ""
"    Route::get('/flights', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth:admin');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:211
#, no-wrap
msgid "<a name=\"login-throttling\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:211
#, no-wrap
msgid "Login Throttling"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:214
msgid ""
"If you are using the Laravel Breeze or Laravel Jetstream [starter "
"kits](/docs/{{version}}/starter-kits), rate limiting will automatically be "
"applied to login attempts. By default, the user will not be able to login "
"for one minute if they fail to provide the correct credentials after several "
"attempts. The throttling is unique to the user's username / email address "
"and their IP address."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:216
#, no-wrap
msgid ""
"> {tip} If you would like to rate limit other routes in your application, "
"check out the [rate limiting "
"documentation](/docs/{{version}}/routing#rate-limiting).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:218
#, no-wrap
msgid "<a name=\"authenticating-users\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:218
#, no-wrap
msgid "Manually Authenticating Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:221
msgid ""
"You are not required to use the authentication scaffolding included with "
"Laravel's [application starter kits](/docs/{{version}}/starter-kits). If you "
"choose to not use this scaffolding, you will need to manage user "
"authentication using the Laravel authentication classes directly. Don't "
"worry, it's a cinch!"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:223
msgid ""
"We will access Laravel's authentication services via the `Auth` "
"[facade](/docs/{{version}}/facades), so we'll need to make sure to import "
"the `Auth` facade at the top of the class. Next, let's check out the "
"`attempt` method. The `attempt` method is normally used to handle "
"authentication attempt's from your application's \"login\" form. If "
"authentication is successful, you should regenerate the user's "
"[session](/docs/{{version}}/session) to prevent [session "
"fixation](https://en.wikipedia.org/wiki/Session_fixation):"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:230 docs/8.x/authentication.md:399
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:242
#, no-wrap
msgid ""
"    class LoginController extends Controller\n"
"    {\n"
"        /**\n"
"         * Handle an authentication attempt.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function authenticate(Request $request)\n"
"        {\n"
"            $credentials = $request->only('email', 'password');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:245
#, no-wrap
msgid ""
"            if (Auth::attempt($credentials)) {\n"
"                $request->session()->regenerate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:248
#, no-wrap
msgid ""
"                return redirect()->intended('dashboard');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:254
#, no-wrap
msgid ""
"            return back()->withErrors([\n"
"                'email' => 'The provided credentials do not match our "
"records.',\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:256
msgid ""
"The `attempt` method accepts an array of key / value pairs as its first "
"argument. The values in the array will be used to find the user in your "
"database table. So, in the example above, the user will be retrieved by the "
"value of the `email` column. If the user is found, the hashed password "
"stored in the database will be compared with the `password` value passed to "
"the method via the array. You should not hash the incoming request's "
"`password` value, since the framework will automatically hash the value "
"before comparing it to the hashed password in the database. An authenticated "
"session will be started for the user if the two hashed passwords match."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:258
msgid ""
"Remember, Laravel's authentication services will retrieve users from your "
"database based on your authentication guard's \"provider\" configuration. In "
"the default `config/auth.php` configuration file, the Eloquent user provider "
"is specified and it is instructed to use the `App\\Models\\User` model when "
"retrieving users. You may change these values within your configuration file "
"based on the needs of your application."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:260
msgid ""
"The `attempt` method will return `true` if authentication was "
"successful. Otherwise, `false` will be returned."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:262
msgid ""
"The `intended` method provided by Laravel's redirector will redirect the "
"user to the URL they were attempting to access before being intercepted by "
"the authentication middleware. A fallback URI may be given to this method in "
"case the intended destination is not available."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:264
#, no-wrap
msgid "<a name=\"specifying-additional-conditions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:264
#, no-wrap
msgid "Specifying Additional Conditions"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:267
msgid ""
"If you wish, you may also add extra query conditions to the authentication "
"query in addition to the user's email and password. To accomplish this, we "
"may simply add the query conditions to the array passed to the `attempt` "
"method. For example, we may verify that the user is marked as \"active\":"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:271
#, no-wrap
msgid ""
"    if (Auth::attempt(['email' => $email, 'password' => $password, 'active' "
"=> 1])) {\n"
"        // Authentication was successful...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:273
#, no-wrap
msgid ""
"> {note} In these examples, `email` is not a required option, it is merely "
"used as an example. You should use whatever column name corresponds to a "
"\"username\" in your database table.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:275
#, no-wrap
msgid "<a name=\"accessing-specific-guard-instances\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:275
#, no-wrap
msgid "Accessing Specific Guard Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:278
msgid ""
"Via the `Auth` facade's `guard` method, you may specify which guard instance "
"you would like to utilize when authenticating the user. This allows you to "
"manage authentication for separate parts of your application using entirely "
"separate authenticatable models or user tables."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:280
msgid ""
"The guard name passed to the `guard` method should correspond to one of the "
"guards configured in your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:284
#, no-wrap
msgid ""
"    if (Auth::guard('admin')->attempt($credentials)) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:286
#, no-wrap
msgid "<a name=\"remembering-users\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:286
#, no-wrap
msgid "Remembering Users"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:289
msgid ""
"Many web applications provide a \"remember me\" checkbox on their login "
"form. If you would like to provide \"remember me\" functionality in your "
"application, you may pass a boolean value as the second argument to the "
"`attempt` method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:291
msgid ""
"When this value is `true`, Laravel will keep the user authenticated "
"indefinitely or until they manually logout. Your `users` table must include "
"the string `remember_token` column, which will be used to store the "
"\"remember me\" token. The `users` table migration included with new Laravel "
"applications already includes this column:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:297
#, no-wrap
msgid ""
"    if (Auth::attempt(['email' => $email, 'password' => $password], "
"$remember)) {\n"
"        // The user is being remembered...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:299
#, no-wrap
msgid "<a name=\"other-authentication-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:299
#, no-wrap
msgid "Other Authentication Methods"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:302
#, no-wrap
msgid "<a name=\"authenticate-a-user-instance\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:302
#, no-wrap
msgid "Authenticate A User Instance"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:305
msgid ""
"If you need to set an existing user instance as the currently authenticated "
"user, you may pass the user instance to the `Auth` facade's `login` "
"method. The given user instance must be an implementation of the "
"`Illuminate\\Contracts\\Auth\\Authenticatable` "
"[contract](/docs/{{version}}/contracts). The `App\\Models\\User` model "
"included with Laravel already implements this interface. This method of "
"authentication is useful when you already have a valid user instance, such "
"as directly after a user registers with your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:309
#, no-wrap
msgid "    Auth::login($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:311
msgid ""
"You may pass a boolean value as the second argument to the `login` "
"method. This value indicates if \"remember me\" functionality is desired for "
"the authenticated session. Remember, this means that the session will be "
"authenticated indefinitely or until the user manually logs out of the "
"application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:313
#, no-wrap
msgid "    Auth::login($user, $remember = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:315
msgid ""
"If needed, you may specify an authentication guard before calling the "
"`login` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:317
#, no-wrap
msgid "    Auth::guard('admin')->login($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:319
#, no-wrap
msgid "<a name=\"authenticate-a-user-by-id\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:319
#, no-wrap
msgid "Authenticate A User By ID"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:322
msgid ""
"To authenticate a user using their database record's primary key, you may "
"use the `loginUsingId` method. This method accepts the primary key of the "
"user you wish to authenticate:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:324
#, no-wrap
msgid "    Auth::loginUsingId(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:326
msgid ""
"You may pass a boolean value as the second argument to the `loginUsingId` "
"method. This value indicates if \"remember me\" functionality is desired for "
"the authenticated session. Remember, this means that the session will be "
"authenticated indefinitely or until the user manually logs out of the "
"application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:328
#, no-wrap
msgid "    Auth::loginUsingId(1, $remember = true);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:330
#, no-wrap
msgid "<a name=\"authenticate-a-user-once\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:330
#, no-wrap
msgid "Authenticate A User Once"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:333
msgid ""
"You may use the `once` method to authenticate a user with the application "
"for a single request. No sessions or cookies will be utilized when calling "
"this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:337
#, no-wrap
msgid ""
"    if (Auth::once($credentials)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:339
#, no-wrap
msgid "<a name=\"http-basic-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:339
#, no-wrap
msgid "HTTP Basic Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:342
msgid ""
"[HTTP Basic "
"Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) "
"provides a quick way to authenticate users of your application without "
"setting up a dedicated \"login\" page. To get started, attach the "
"`auth.basic` [middleware](/docs/{{version}}/middleware) to a route. The "
"`auth.basic` middleware is included with the Laravel framework, so you do "
"not need to define it:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:346
#, no-wrap
msgid ""
"    Route::get('/profile', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:348
msgid ""
"Once the middleware has been attached to the route, you will automatically "
"be prompted for credentials when accessing the route in your browser. By "
"default, the `auth.basic` middleware will assume the `email` column on your "
"`users` database table is the user's \"username\"."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:350
#, no-wrap
msgid "<a name=\"a-note-on-fastcgi\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:350
#, no-wrap
msgid "A Note On FastCGI"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:353
msgid ""
"If you are using PHP FastCGI and Apache to serve your Laravel application, "
"HTTP Basic authentication may not work correctly. To correct these problems, "
"the following lines may be added to your application's `.htaccess` file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:356
#, no-wrap
msgid ""
"    RewriteCond %{HTTP:Authorization} ^(.+)$\n"
"    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:358
#, no-wrap
msgid "<a name=\"stateless-http-basic-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:358
#, no-wrap
msgid "Stateless HTTP Basic Authentication"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:361
msgid ""
"You may also use HTTP Basic Authentication without setting a user identifier "
"cookie in the session. This is primarily helpful if you choose to use HTTP "
"Authentication to authenticate requests to your application's API. To "
"accomplish this, [define a middleware](/docs/{{version}}/middleware) that "
"calls the `onceBasic` method. If no response is returned by the `onceBasic` "
"method, the request may be passed further into the application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:365
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:381
#, no-wrap
msgid ""
"    class AuthenticateOnceWithBasicAuth\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, $next)\n"
"        {\n"
"            return Auth::onceBasic() ?: $next($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:383
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:385
msgid ""
"Next, [register the route "
"middleware](/docs/{{version}}/middleware#registering-middleware) and attach "
"it to a route:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:389
#, no-wrap
msgid ""
"    Route::get('/api/user', function () {\n"
"        // Only authenticated users may access this route...\n"
"    })->middleware('auth.basic.once');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:391
#, no-wrap
msgid "<a name=\"logging-out\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:391
#, no-wrap
msgid "Logging Out"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:394
msgid ""
"To manually log users out of your application, you may use the `logout` "
"method provided by the `Auth` facade. This will remove the authentication "
"information from the user's session so that subsequent requests are not "
"authenticated."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:396
msgid ""
"In addition to calling the `logout` method, it is recommended that you "
"invalidate the user's session and regenerate their [CSRF "
"token](/docs/{{version}}/csrf). After logging the user out, you would "
"typically redirect the user to the root of your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:409
#, no-wrap
msgid ""
"    /**\n"
"     * Log the user out of the application.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function logout(Request $request)\n"
"    {\n"
"        Auth::logout();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:411
#, no-wrap
msgid "        $request->session()->invalidate();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:413
#, no-wrap
msgid "        $request->session()->regenerateToken();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:416
#, no-wrap
msgid ""
"        return redirect('/');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:418
#, no-wrap
msgid "<a name=\"invalidating-sessions-on-other-devices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:418
#, no-wrap
msgid "Invalidating Sessions On Other Devices"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:421
msgid ""
"Laravel also provides a mechanism for invalidating and \"logging out\" a "
"user's sessions that are active on other devices without invalidating the "
"session on their current device. This feature is typically utilized when a "
"user is changing or updating their password and you would like to invalidate "
"sessions on other devices while keeping the current device authenticated."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:423
msgid ""
"Before getting started, you should make sure that the "
"`Illuminate\\Session\\Middleware\\AuthenticateSession` middleware is present "
"and un-commented in your `App\\Http\\Kernel` class' `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:429
#, no-wrap
msgid ""
"    'web' => [\n"
"        // ...\n"
"        \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        // ...\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:431
msgid ""
"Then, you may use the `logoutOtherDevices` method provided by the `Auth` "
"facade. This method requires the user to confirm their current password, "
"which your application should accept through an input form:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:435
#, no-wrap
msgid "    Auth::logoutOtherDevices($currentPassword);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:437
msgid ""
"When the `logoutOtherDevices` method is invoked, the user's other sessions "
"will be invalidated entirely, meaning they will be \"logged out\" of all "
"guards they were previously authenticated by."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:439
#, no-wrap
msgid "<a name=\"password-confirmation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:439
#, no-wrap
msgid "Password Confirmation"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:442
msgid ""
"While building your application, you may occasionally have actions that "
"should require the user to confirm their password before the action is "
"performed or before the user is redirected to a sensitive area of the "
"application. Laravel includes built-in middleware to make this process a "
"breeze. Implementing this feature will require you to define two routes: one "
"route to display a view asking the user to confirm their password and "
"another route to confirm that the password is valid and redirect the user to "
"their intended destination."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:444
#, no-wrap
msgid ""
"> {tip} The following documentation discusses how to integrate with "
"Laravel's password confirmation features directly; however, if you would "
"like to get started more quickly, the [Laravel application starter "
"kits](/docs/{{version}}/starter-kits) include support for this feature!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:446
#, no-wrap
msgid "<a name=\"password-confirmation-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:446
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:449
msgid ""
"After confirming their password, a user will not be asked to confirm their "
"password again for three hours. However, you may configure the length of "
"time before the user is re-prompted for their password by changing the value "
"of the `password_timeout` configuration value within your application's "
"`config/auth.php` configuration file."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:451
#, no-wrap
msgid "<a name=\"password-confirmation-routing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:451
#, no-wrap
msgid "Routing"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:454
#, no-wrap
msgid "<a name=\"the-password-confirmation-form\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:454
#, no-wrap
msgid "The Password Confirmation Form"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:457
msgid ""
"First, we will define a route to display a view that requests that the user "
"confirm their password:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:461
#, no-wrap
msgid ""
"    Route::get('/confirm-password', function () {\n"
"        return view('auth.confirm-password');\n"
"    })->middleware('auth')->name('password.confirm');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:463
msgid ""
"As you might expect, the view that is returned by this route should have a "
"form containing a `password` field. In addition, feel free to include text "
"within the view that explains that the user is entering a protected area of "
"the application and must confirm their password."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:465
#, no-wrap
msgid "<a name=\"confirming-the-password\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/authentication.md:465
#, no-wrap
msgid "Confirming The Password"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:468
msgid ""
"Next, we will define a route that will handle the form request from the "
"\"confirm password\" view. This route will be responsible for validating the "
"password and redirecting the user to their intended destination:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:472
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Hash;\n"
"    use Illuminate\\Support\\Facades\\Redirect;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:479
#, no-wrap
msgid ""
"    Route::post('/confirm-password', function (Request $request) {\n"
"        if (! Hash::check($request->password, $request->user()->password)) "
"{\n"
"            return back()->withErrors([\n"
"                'password' => ['The provided password does not match our "
"records.']\n"
"            ]);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:481
#, no-wrap
msgid "        $request->session()->passwordConfirmed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:484
#, no-wrap
msgid ""
"        return redirect()->intended();\n"
"    })->middleware(['auth', 'throttle:6,1'])->name('password.confirm');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:486
msgid ""
"Before moving on, let's examine this route in more detail. First, the "
"request's `password` field is determined to actually match the authenticated "
"user's password. If the password is valid, we need to inform Laravel's "
"session that the user has confirmed their password. The `passwordConfirmed` "
"method will set a timestamp in the user's session that Laravel can use to "
"determine when the user last confirmed their password. Finally, we can "
"redirect the user to their intended destination."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:488
#, no-wrap
msgid "<a name=\"password-confirmation-protecting-routes\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:491
msgid ""
"You should ensure that any route that performs an action which requires "
"recent password confirmation is assigned the `password.confirm` "
"middleware. This middleware is included with the default installation of "
"Laravel and will automatically store the user's intended destination in the "
"session so that the user may be redirected to that location after confirming "
"their password. After storing the user's intended destination in the "
"session, the middleware will redirect the user to the `password.confirm` "
"[named route](/docs/{{version}}/routing#named-routes):"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:495
#, no-wrap
msgid ""
"    Route::get('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:499
#, no-wrap
msgid ""
"    Route::post('/settings', function () {\n"
"        // ...\n"
"    })->middleware(['password.confirm']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:501
#, no-wrap
msgid "<a name=\"adding-custom-guards\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:501
#, no-wrap
msgid "Adding Custom Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:504
msgid ""
"You may define your own authentication guards using the `extend` method on "
"the `Auth` facade. You should place your call to the `extend` method within "
"a [service provider](/docs/{{version}}/providers). Since Laravel already "
"ships with an `AuthServiceProvider`, we can place the code in that provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:508 docs/8.x/authentication.md:582
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:512
#, no-wrap
msgid ""
"    use App\\Services\\Auth\\JwtGuard;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as "
"ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:523 docs/8.x/authentication.md:597
#, no-wrap
msgid ""
"    class AuthServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application authentication / authorization "
"services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:526
#, no-wrap
msgid ""
"            Auth::extend('jwt', function ($app, $name, array $config) {\n"
"                // Return an instance of "
"Illuminate\\Contracts\\Auth\\Guard...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:531
#, no-wrap
msgid ""
"                return new "
"JwtGuard(Auth::createUserProvider($config['provider']));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:533
msgid ""
"As you can see in the example above, the callback passed to the `extend` "
"method should return an implementation of "
"`Illuminate\\Contracts\\Auth\\Guard`. This interface contains a few methods "
"you will need to implement to define a custom guard. Once your custom guard "
"has been defined, you may reference the guard in the `guards` configuration "
"of your `auth.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:540
#, no-wrap
msgid ""
"    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'jwt',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:542
#, no-wrap
msgid "<a name=\"closure-request-guards\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:542
#, no-wrap
msgid "Closure Request Guards"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:545
msgid ""
"The simplest way to implement a custom, HTTP request based authentication "
"system is by using the `Auth::viaRequest` method. This method allows you to "
"quickly define your authentication process using a single closure."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:547
msgid ""
"To get started, call the `Auth::viaRequest` method within the `boot` method "
"of your `AuthServiceProvider`. The `viaRequest` method accepts an "
"authentication driver name as its first argument. This name can be any "
"string that describes your custom guard. The second argument passed to the "
"method should be a closure that receives the incoming HTTP request and "
"returns a user instance or, if authentication fails, `null`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:551
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:560
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:565
#, no-wrap
msgid ""
"        Auth::viaRequest('custom-token', function (Request $request) {\n"
"            return User::where('token', $request->token)->first();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:567
msgid ""
"Once your custom authentication driver has been defined, you may configure "
"it as a driver within the `guards` configuration of your `auth.php` "
"configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:573
#, no-wrap
msgid ""
"    'guards' => [\n"
"        'api' => [\n"
"            'driver' => 'custom-token',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:575
#, no-wrap
msgid "<a name=\"adding-custom-user-providers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:575
#, no-wrap
msgid "Adding Custom User Providers"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:578
msgid ""
"If you are not using a traditional relational database to store your users, "
"you will need to extend Laravel with your own authentication user "
"provider. We will use the `provider` method on the `Auth` facade to define a "
"custom user provider. The user provider resolver should return an "
"implementation of `Illuminate\\Contracts\\Auth\\UserProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:586
#, no-wrap
msgid ""
"    use App\\Extensions\\MongoUserProvider;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as "
"ServiceProvider;\n"
"    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:600
#, no-wrap
msgid ""
"            Auth::provider('mongo', function ($app, array $config) {\n"
"                // Return an instance of "
"Illuminate\\Contracts\\Auth\\UserProvider...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:605
#, no-wrap
msgid ""
"                return new "
"MongoUserProvider($app->make('mongo.connection'));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:607
msgid ""
"After you have registered the provider using the `provider` method, you may "
"switch to the new user provider in your `auth.php` configuration "
"file. First, define a `provider` that uses your new driver:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:613
#, no-wrap
msgid ""
"    'providers' => [\n"
"        'users' => [\n"
"            'driver' => 'mongo',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:615
msgid "Finally, you may reference this provider in your `guards` configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:622
#, no-wrap
msgid ""
"    'guards' => [\n"
"        'web' => [\n"
"            'driver' => 'session',\n"
"            'provider' => 'users',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:624
#, no-wrap
msgid "<a name=\"the-user-provider-contract\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:624
#, no-wrap
msgid "The User Provider Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:627
msgid ""
"`Illuminate\\Contracts\\Auth\\UserProvider` implementations are responsible "
"for fetching an `Illuminate\\Contracts\\Auth\\Authenticatable` "
"implementation out of a persistent storage system, such as MySQL, MongoDB, "
"etc. These two interfaces allow the Laravel authentication mechanisms to "
"continue functioning regardless of how the user data is stored or what type "
"of class is used to represent the authenticated user:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:629
msgid ""
"Let's take a look at the `Illuminate\\Contracts\\Auth\\UserProvider` "
"contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:633 docs/8.x/authentication.md:661
#, no-wrap
msgid "    namespace Illuminate\\Contracts\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:642
#, no-wrap
msgid ""
"    interface UserProvider\n"
"    {\n"
"        public function retrieveById($identifier);\n"
"        public function retrieveByToken($identifier, $token);\n"
"        public function updateRememberToken(Authenticatable $user, "
"$token);\n"
"        public function retrieveByCredentials(array $credentials);\n"
"        public function validateCredentials(Authenticatable $user, array "
"$credentials);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:644
msgid ""
"The `retrieveById` function typically receives a key representing the user, "
"such as an auto-incrementing ID from a MySQL database. The `Authenticatable` "
"implementation matching the ID should be retrieved and returned by the "
"method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:646
msgid ""
"The `retrieveByToken` function retrieves a user by their unique "
"`$identifier` and \"remember me\" `$token`, typically stored in a database "
"column like `remember_token`. As with the previous method, the "
"`Authenticatable` implementation with a matching token value should be "
"returned by this method."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:648
msgid ""
"The `updateRememberToken` method updates the `$user` instance's "
"`remember_token` with the new `$token`. A fresh token is assigned to users "
"on a successful \"remember me\" authentication attempt or when the user is "
"logging out."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:650
msgid ""
"The `retrieveByCredentials` method receives the array of credentials passed "
"to the `Auth::attempt` method when attempting to authenticate with an "
"application. The method should then \"query\" the underlying persistent "
"storage for the user matching those credentials. Typically, this method will "
"run a query with a \"where\" condition that searches for a user record with "
"a \"username\" matching the value of `$credentials['username']`. The method "
"should return an implementation of `Authenticatable`. **This method should "
"not attempt to do any password validation or authentication.**"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:652
#, no-wrap
msgid ""
"The `validateCredentials` method should compare the given `$user` with the "
"`$credentials` to authenticate the user. For example, this method will "
"typically use the `Hash::check` method to compare the value of "
"`$user->getAuthPassword()` to the value of `$credentials['password']`. This "
"method should return `true` or `false` indicating whether the password is "
"valid.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:654
#, no-wrap
msgid "<a name=\"the-authenticatable-contract\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/authentication.md:654
#, no-wrap
msgid "The Authenticatable Contract"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:657
msgid ""
"Now that we have explored each of the methods on the `UserProvider`, let's "
"take a look at the `Authenticatable` contract. Remember, user providers "
"should return implementations of this interface from the `retrieveById`, "
"`retrieveByToken`, and `retrieveByCredentials` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:671
#, no-wrap
msgid ""
"    interface Authenticatable\n"
"    {\n"
"        public function getAuthIdentifierName();\n"
"        public function getAuthIdentifier();\n"
"        public function getAuthPassword();\n"
"        public function getRememberToken();\n"
"        public function setRememberToken($value);\n"
"        public function getRememberTokenName();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:673
msgid ""
"This interface is simple. The `getAuthIdentifierName` method should return "
"the name of the \"primary key\" field of the user and the "
"`getAuthIdentifier` method should return the \"primary key\" of the "
"user. When using a MySQL back-end, this would likely be the "
"auto-incrementing primary key assigned to the user record. The "
"`getAuthPassword` method should return the user's hashed password."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:675
msgid ""
"This interface allows the authentication system to work with any \"user\" "
"class, regardless of what ORM or storage abstraction layer you are using. By "
"default, Laravel includes a `App\\Models\\User` class in the `app/Models` "
"directory which implements this interface."
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:677
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/authentication.md:677
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:680
msgid ""
"Laravel dispatches a variety of [events](/docs/{{version}}/events) during "
"the authentication process. You may attach listeners to these events in your "
"`EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:690
#, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Auth\\Events\\Registered' => [\n"
"            'App\\Listeners\\LogRegisteredUser',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:694
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Attempting' => [\n"
"            'App\\Listeners\\LogAuthenticationAttempt',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:698
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Authenticated' => [\n"
"            'App\\Listeners\\LogAuthenticated',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:702
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Login' => [\n"
"            'App\\Listeners\\LogSuccessfulLogin',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:706
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Failed' => [\n"
"            'App\\Listeners\\LogFailedLogin',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:710
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Validated' => [\n"
"            'App\\Listeners\\LogValidated',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:714
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Verified' => [\n"
"            'App\\Listeners\\LogVerified',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:718
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Logout' => [\n"
"            'App\\Listeners\\LogSuccessfulLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:722
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\CurrentDeviceLogout' => [\n"
"            'App\\Listeners\\LogCurrentDeviceLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:726
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\OtherDeviceLogout' => [\n"
"            'App\\Listeners\\LogOtherDeviceLogout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:730
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\Lockout' => [\n"
"            'App\\Listeners\\LogLockout',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/authentication.md:734
#, no-wrap
msgid ""
"        'Illuminate\\Auth\\Events\\PasswordReset' => [\n"
"            'App\\Listeners\\LogPasswordReset',\n"
"        ],\n"
"    ];\n"
msgstr ""
