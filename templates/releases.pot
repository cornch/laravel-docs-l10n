#
msgid ""
msgstr ""

#: docs/8.x/releases.md:block 1 (header)
msgid "Release Notes"
msgstr ""

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Versioning Scheme](#versioning-scheme)"
msgstr ""

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Exceptions](#exceptions)"
msgstr ""

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Support Policy](#support-policy)"
msgstr ""

#: docs/8.x/releases.md:block 2 (unordered list)
msgid "[Laravel 8](#laravel-8)"
msgstr ""

#: docs/8.x/releases.md:block 4 (header)
msgid "Versioning Scheme"
msgstr ""

#: docs/8.x/releases.md:block 5 (paragraph)
msgid "Laravel and its other first-party packages follow [Semantic Versioning](https://semver.org). Major framework releases are released every year (~February), while minor and patch releases may be released as often as every week. Minor and patch releases should **never** contain breaking changes."
msgstr ""

#: docs/8.x/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^8.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr ""

#: docs/8.x/releases.md:block 8 (header)
msgid "Exceptions"
msgstr ""

#: docs/8.x/releases.md:block 10 (header)
msgid "Named Arguments"
msgstr ""

#: docs/8.x/releases.md:block 11 (paragraph)
msgid "At this time, PHP's [named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) functionality are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function parameters when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr ""

#: docs/8.x/releases.md:block 13 (header)
msgid "Support Policy"
msgstr ""

#: docs/8.x/releases.md:block 14 (paragraph)
msgid "For all Laravel releases, bug fixes are provided for 18 months and security fixes are provided for 2 years. For all additional libraries, including Lumen, only the latest release receives bug fixes. In addition, please review the database versions [supported by Laravel](/docs/{{version}}/database#introduction)."
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "Version"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "PHP (*)"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "Release"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "Bug Fixes Until"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "Security Fixes Until"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "6 (LTS)"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "7.2 - 8.0"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "September 3rd, 2019"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "January 25th, 2022"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "September 6th, 2022"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "7"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "March 3rd, 2020"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "October 6th, 2020"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "March 3rd, 2021"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "8"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "7.3 - 8.1"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "September 8th, 2020"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "July 26th, 2022"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "January 24th, 2023"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "9"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "8.0 - 8.1"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "February 8th, 2022"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "August 8th, 2023"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "February 8th, 2024"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "10"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "February 7th, 2023"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "August 7th, 2024"
msgstr ""

#: docs/8.x/releases.md:block 15 (table)
msgid "February 7th, 2025"
msgstr ""

#: docs/8.x/releases.md:block 17 (paragraph)
msgid "(*) Supported PHP versions"
msgstr ""

#: docs/8.x/releases.md:block 19 (header)
msgid "Laravel 8"
msgstr ""

#: docs/8.x/releases.md:block 20 (paragraph)
msgid "Laravel 8 continues the improvements made in Laravel 7.x by introducing Laravel Jetstream, model factory classes, migration squashing, job batching, improved rate limiting, queue improvements, dynamic Blade components, Tailwind pagination views, time testing helpers, improvements to `artisan serve`, event listener improvements, and a variety of other bug fixes and usability improvements."
msgstr ""

#: docs/8.x/releases.md:block 22 (header)
msgid "Laravel Jetstream"
msgstr ""

#: docs/8.x/releases.md:block 23 (paragraph)
msgid "*Laravel Jetstream was written by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 24 (paragraph)
msgid "[Laravel Jetstream](https://jetstream.laravel.com) is a beautifully designed application scaffolding for Laravel. Jetstream provides the perfect starting point for your next project and includes login, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management. Laravel Jetstream replaces and improves upon the legacy authentication UI scaffolding available for previous versions of Laravel."
msgstr ""

#: docs/8.x/releases.md:block 25 (paragraph)
msgid "Jetstream is designed using [Tailwind CSS](https://tailwindcss.com) and offers your choice of [Livewire](https://laravel-livewire.com) or [Inertia](https://inertiajs.com) scaffolding."
msgstr ""

#: docs/8.x/releases.md:block 27 (header)
msgid "Models Directory"
msgstr ""

#: docs/8.x/releases.md:block 28 (paragraph)
msgid "By overwhelming community demand, the default Laravel application skeleton now contains an `app/Models` directory. We hope you enjoy this new home for your Eloquent models! All relevant generator commands have been updated to assume models exist within the `app/Models` directory if it exists. If the directory does not exist, the framework will assume your models should be placed within the `app` directory."
msgstr ""

#: docs/8.x/releases.md:block 30 (header)
msgid "Model Factory Classes"
msgstr ""

#: docs/8.x/releases.md:block 31 (paragraph)
msgid "*Model factory classes were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 32 (paragraph)
msgid "Eloquent [model factories](/docs/{{version}}/database-testing#defining-model-factories) have been entirely re-written as class based factories and improved to have first-class relationship support. For example, the `UserFactory` included with Laravel is written like so:"
msgstr ""

#: docs/8.x/releases.md:block 33 (code)
msgid ""
"<?php\n"
"\n"
"namespace Database\\Factories;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $model = User::class;\n"
"\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'name' => $this->faker->name(),\n"
"            'email' => $this->faker->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/releases.md:block 34 (paragraph)
msgid "Thanks to the new `HasFactory` trait available on generated models, the model factory may be used like so:"
msgstr ""

#: docs/8.x/releases.md:block 35 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"User::factory()->count(50)->create();\n"
msgstr ""

#: docs/8.x/releases.md:block 36 (paragraph)
msgid "Since model factories are now simple PHP classes, state transformations may be written as class methods. In addition, you may add any other helper classes to your Eloquent model factory as needed."
msgstr ""

#: docs/8.x/releases.md:block 37 (paragraph)
msgid "For example, your `User` model might have a `suspended` state that modifies one of its default attribute values. You may define your state transformations using the base factory's `state` method. You may name your state method anything you like. After all, it's just a typical PHP method:"
msgstr ""

#: docs/8.x/releases.md:block 38 (code)
msgid ""
"/**\n"
" * Indicate that the user is suspended.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"public function suspended()\n"
"{\n"
"    return $this->state([\n"
"        'account_status' => 'suspended',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/releases.md:block 39 (paragraph)
msgid "After defining the state transformation method, we may use it like so:"
msgstr ""

#: docs/8.x/releases.md:block 40 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"User::factory()->count(5)->suspended()->create();\n"
msgstr ""

#: docs/8.x/releases.md:block 41 (paragraph)
msgid "As mentioned, Laravel 8's model factories contain first class support for relationships. So, assuming our `User` model has a `posts` relationship method, we may simply run the following code to generate a user with three posts:"
msgstr ""

#: docs/8.x/releases.md:block 42 (code)
msgid ""
"$users = User::factory()\n"
"            ->hasPosts(3, [\n"
"                'published' => false,\n"
"            ])\n"
"            ->create();\n"
msgstr ""

#: docs/8.x/releases.md:block 43 (paragraph)
msgid "To ease the upgrade process, the [laravel/legacy-factories](https://github.com/laravel/legacy-factories) package has been released to provide support for the previous iteration of model factories within Laravel 8.x."
msgstr ""

#: docs/8.x/releases.md:block 44 (paragraph)
msgid "Laravel's re-written factories contain many more features that we think you will love. To learn more about model factories, please consult the [database testing documentation](/docs/{{version}}/database-testing#defining-model-factories)."
msgstr ""

#: docs/8.x/releases.md:block 46 (header)
msgid "Migration Squashing"
msgstr ""

#: docs/8.x/releases.md:block 47 (paragraph)
msgid "*Migration squashing was contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 48 (paragraph)
msgid "As you build your application, you may accumulate more and more migrations over time. This can lead to your migration directory becoming bloated with potentially hundreds of migrations. If you're using MySQL or PostgreSQL, you may now \"squash\" your migrations into a single SQL file. To get started, execute the `schema:dump` command:"
msgstr ""

#: docs/8.x/releases.md:block 49 (code)
msgid ""
"php artisan schema:dump\n"
"\n"
"// Dump the current database schema and prune all existing migrations...\n"
"php artisan schema:dump --prune\n"
msgstr ""

#: docs/8.x/releases.md:block 50 (paragraph)
msgid "When you execute this command, Laravel will write a \"schema\" file to your `database/schema` directory. Now, when you attempt to migrate your database and no other migrations have been executed, Laravel will execute the schema file's SQL first. After executing the schema file's commands, Laravel will execute any remaining migrations that were not part of the schema dump."
msgstr ""

#: docs/8.x/releases.md:block 52 (header)
msgid "Job Batching"
msgstr ""

#: docs/8.x/releases.md:block 53 (paragraph)
msgid "*Job batching was contributed by [Taylor Otwell](https://github.com/taylorotwell) & [Mohamed Said](https://github.com/themsaid)*."
msgstr ""

#: docs/8.x/releases.md:block 54 (paragraph)
msgid "Laravel's job batching feature allows you to easily execute a batch of jobs and then perform some action when the batch of jobs has completed executing."
msgstr ""

#: docs/8.x/releases.md:block 55 (paragraph)
msgid "The new `batch` method of the `Bus` facade may be used to dispatch a batch of jobs. Of course, batching is primarily useful when combined with completion callbacks. So, you may use the `then`, `catch`, and `finally` methods to define completion callbacks for the batch. Each of these callbacks will receive an `Illuminate\\Bus\\Batch` instance when they are invoked:"
msgstr ""

#: docs/8.x/releases.md:block 56 (code)
msgid ""
"use App\\Jobs\\ProcessPodcast;\n"
"use App\\Podcast;\n"
"use Illuminate\\Bus\\Batch;\n"
"use Illuminate\\Support\\Facades\\Bus;\n"
"use Throwable;\n"
"\n"
"$batch = Bus::batch([\n"
"    new ProcessPodcast(Podcast::find(1)),\n"
"    new ProcessPodcast(Podcast::find(2)),\n"
"    new ProcessPodcast(Podcast::find(3)),\n"
"    new ProcessPodcast(Podcast::find(4)),\n"
"    new ProcessPodcast(Podcast::find(5)),\n"
"])->then(function (Batch $batch) {\n"
"    // All jobs completed successfully...\n"
"})->catch(function (Batch $batch, Throwable $e) {\n"
"    // First batch job failure detected...\n"
"})->finally(function (Batch $batch) {\n"
"    // The batch has finished executing...\n"
"})->dispatch();\n"
"\n"
"return $batch->id;\n"
msgstr ""

#: docs/8.x/releases.md:block 57 (paragraph)
msgid "To learn more about job batching, please consult the [queue documentation](/docs/{{version}}/queues#job-batching)."
msgstr ""

#: docs/8.x/releases.md:block 59 (header)
msgid "Improved Rate Limiting"
msgstr ""

#: docs/8.x/releases.md:block 60 (paragraph)
msgid "*Rate limiting improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 61 (paragraph)
msgid "Laravel's request rate limiter feature has been augmented with more flexibility and power, while still maintaining backwards compatibility with previous release's `throttle` middleware API."
msgstr ""

#: docs/8.x/releases.md:block 62 (paragraph)
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned this rate limiter:"
msgstr ""

#: docs/8.x/releases.md:block 63 (code)
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000);\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 64 (paragraph)
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr ""

#: docs/8.x/releases.md:block 65 (code)
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100);\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 66 (paragraph)
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr ""

#: docs/8.x/releases.md:block 67 (code)
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100)->by($request->ip());\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 68 (paragraph)
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr ""

#: docs/8.x/releases.md:block 69 (code)
msgid ""
"Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        //\n"
"    });\n"
"\n"
"    Route::post('/video', function () {\n"
"        //\n"
"    });\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 70 (paragraph)
msgid "To learn more about rate limiting, please consult the [routing documentation](/docs/{{version}}/routing#rate-limiting)."
msgstr ""

#: docs/8.x/releases.md:block 72 (header)
msgid "Improved Maintenance Mode"
msgstr ""

#: docs/8.x/releases.md:block 73 (paragraph)
msgid "*Maintenance mode improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from [Spatie](https://spatie.be)*."
msgstr ""

#: docs/8.x/releases.md:block 74 (paragraph)
msgid "In previous releases of Laravel, the `php artisan down` maintenance mode feature may be bypassed using an \"allow list\" of IP addresses that were allowed to access the application. This feature has been removed in favor of a simpler \"secret\" / token solution."
msgstr ""

#: docs/8.x/releases.md:block 75 (paragraph)
msgid "While in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr ""

#: docs/8.x/releases.md:block 76 (code)
msgid "php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"
msgstr ""

#: docs/8.x/releases.md:block 77 (paragraph)
msgid "After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:"
msgstr ""

#: docs/8.x/releases.md:block 78 (code)
msgid "https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"
msgstr ""

#: docs/8.x/releases.md:block 79 (paragraph)
msgid "When accessing this hidden route, you will then be redirected to the `/` route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode."
msgstr ""

#: docs/8.x/releases.md:block 81 (header)
msgid "Pre-Rendering The Maintenance Mode View"
msgstr ""

#: docs/8.x/releases.md:block 82 (paragraph)
msgid "If you utilize the `php artisan down` command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine."
msgstr ""

#: docs/8.x/releases.md:block 83 (paragraph)
msgid "For this reason, Laravel now allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr ""

#: docs/8.x/releases.md:block 84 (code)
msgid "php artisan down --render=\"errors::503\"\n"
msgstr ""

#: docs/8.x/releases.md:block 86 (header)
msgid "Closure Dispatch / Chain `catch`"
msgstr ""

#: docs/8.x/releases.md:block 87 (paragraph)
msgid "*Catch improvements were contributed by [Mohamed Said](https://github.com/themsaid)*."
msgstr ""

#: docs/8.x/releases.md:block 88 (paragraph)
msgid "Using the new `catch` method, you may now provide a closure that should be executed if a queued closure fails to complete successfully after exhausting all of your queue's configured retry attempts:"
msgstr ""

#: docs/8.x/releases.md:block 89 (code)
msgid ""
"use Throwable;\n"
"\n"
"dispatch(function () use ($podcast) {\n"
"    $podcast->publish();\n"
"})->catch(function (Throwable $e) {\n"
"    // This job has failed...\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 91 (header)
msgid "Dynamic Blade Components"
msgstr ""

#: docs/8.x/releases.md:block 92 (paragraph)
msgid "*Dynamic Blade components were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 93 (paragraph)
msgid "Sometimes you may need to render a component but not know which component should be rendered until runtime. In this situation, you may now use Laravel's built-in `dynamic-component` component to render the component based on a runtime value or variable:"
msgstr ""

#: docs/8.x/releases.md:block 94 (code)
msgid "<x-dynamic-component :component=\"$componentName\" class=\"mt-4\" />\n"
msgstr ""

#: docs/8.x/releases.md:block 95 (paragraph)
msgid "To learn more about Blade components, please consult the [Blade documentation](/docs/{{version}}/blade#components)."
msgstr ""

#: docs/8.x/releases.md:block 97 (header)
msgid "Event Listener Improvements"
msgstr ""

#: docs/8.x/releases.md:block 98 (paragraph)
msgid "*Event listener improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 99 (paragraph)
msgid "Closure based event listeners may now be registered by only passing the closure to the `Event::listen` method. Laravel will inspect the closure to determine which type of event the listener handles:"
msgstr ""

#: docs/8.x/releases.md:block 100 (code)
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"Event::listen(function (PodcastProcessed $event) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/releases.md:block 101 (paragraph)
msgid "In addition, closure based event listeners may now be marked as queueable using the `Illuminate\\Events\\queueable` function:"
msgstr ""

#: docs/8.x/releases.md:block 102 (code)
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"}));\n"
msgstr ""

#: docs/8.x/releases.md:block 103 (paragraph)
msgid "Like queued jobs, you may use the `onConnection`, `onQueue`, and `delay` methods to customize the execution of the queued listener:"
msgstr ""

#: docs/8.x/releases.md:block 104 (code)
msgid ""
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));\n"
msgstr ""

#: docs/8.x/releases.md:block 105 (paragraph)
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener:"
msgstr ""

#: docs/8.x/releases.md:block 106 (code)
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Throwable;\n"
"\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"    // The queued listener failed...\n"
"}));\n"
msgstr ""

#: docs/8.x/releases.md:block 108 (header)
msgid "Time Testing Helpers"
msgstr ""

#: docs/8.x/releases.md:block 109 (paragraph)
msgid "*Time testing helpers were contributed by [Taylor Otwell](https://github.com/taylorotwell) with inspiration from Ruby on Rails*."
msgstr ""

#: docs/8.x/releases.md:block 110 (paragraph)
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Laravel's base feature test class now includes helpers that allow you to manipulate the current time:"
msgstr ""

#: docs/8.x/releases.md:block 111 (code)
msgid ""
"public function testTimeCanBeManipulated()\n"
"{\n"
"    // Travel into the future...\n"
"    $this->travel(5)->milliseconds();\n"
"    $this->travel(5)->seconds();\n"
"    $this->travel(5)->minutes();\n"
"    $this->travel(5)->hours();\n"
"    $this->travel(5)->days();\n"
"    $this->travel(5)->weeks();\n"
"    $this->travel(5)->years();\n"
"\n"
"    // Travel into the past...\n"
"    $this->travel(-5)->hours();\n"
"\n"
"    // Travel to an explicit time...\n"
"    $this->travelTo(now()->subHours(6));\n"
"\n"
"    // Return back to the present time...\n"
"    $this->travelBack();\n"
"}\n"
msgstr ""

#: docs/8.x/releases.md:block 113 (header)
msgid "Artisan `serve` Improvements"
msgstr ""

#: docs/8.x/releases.md:block 114 (paragraph)
msgid "*Artisan `serve` improvements were contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/8.x/releases.md:block 115 (paragraph)
msgid "The Artisan `serve` command has been improved with automatic reloading when environment variable changes are detected within your local `.env` file. Previously, the command had to be manually stopped and restarted."
msgstr ""

#: docs/8.x/releases.md:block 117 (header)
msgid "Tailwind Pagination Views"
msgstr ""

#: docs/8.x/releases.md:block 118 (paragraph)
msgid "The Laravel paginator has been updated to use the [Tailwind CSS](https://tailwindcss.com) framework by default. Tailwind CSS is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override. Of course, Bootstrap 3 and 4 views remain available as well."
msgstr ""

#: docs/8.x/releases.md:block 120 (header)
msgid "Routing Namespace Updates"
msgstr ""

#: docs/8.x/releases.md:block 121 (paragraph)
msgid "In previous releases of Laravel, the `RouteServiceProvider` contained a `$namespace` property. This property's value would automatically be prefixed onto controller route definitions and calls to the `action` helper / `URL::action` method. In Laravel 8.x, this property is `null` by default. This means that no automatic namespace prefixing will be done by Laravel. Therefore, in new Laravel 8.x applications, controller route definitions should be defined using standard PHP callable syntax:"
msgstr ""

#: docs/8.x/releases.md:block 122 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"Route::get('/users', [UserController::class, 'index']);\n"
msgstr ""

#: docs/8.x/releases.md:block 123 (paragraph)
msgid "Calls to the `action` related methods should use the same callable syntax:"
msgstr ""

#: docs/8.x/releases.md:block 124 (code)
msgid ""
"action([UserController::class, 'index']);\n"
"\n"
"return Redirect::action([UserController::class, 'index']);\n"
msgstr ""

#: docs/8.x/releases.md:block 125 (paragraph)
msgid "If you prefer Laravel 7.x style controller route prefixing, you may simply add the `$namespace` property into your application's `RouteServiceProvider`."
msgstr ""

#: docs/8.x/releases.md:block 126 (quote)
msgid "{note} This change only affects new Laravel 8.x applications. Applications upgrading from Laravel 7.x will still have the `$namespace` property in their `RouteServiceProvider`."
msgstr ""

#: docs/9.x/releases.md:block 2 (unordered list)
msgid "[Laravel 9](#laravel-9)"
msgstr ""

#: docs/9.x/releases.md:block 6 (paragraph)
msgid "When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as `^9.0`, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less."
msgstr ""

#: docs/9.x/releases.md:block 9 (paragraph)
msgid "[Named arguments](https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments) are not covered by Laravel's backwards compatibility guidelines. We may choose to rename function arguments when necessary in order to improve the Laravel codebase. Therefore, using named arguments when calling Laravel methods should be done cautiously and with the understanding that the parameter names may change in the future."
msgstr ""

#: docs/9.x/releases.md:block 17 (header)
msgid "Laravel 9"
msgstr ""

#: docs/9.x/releases.md:block 18 (paragraph)
msgid "As you may know, Laravel transitioned to yearly releases with the release of Laravel 8. Previously, major versions were released every 6 months. This transition is intended to ease the maintenance burden on the community and challenge our development team to ship amazing, powerful new features without introducing breaking changes. Therefore, we have shipped a variety of robust features to Laravel 8 without breaking backwards compatibility, such as parallel testing support, improved Breeze starter kits, HTTP client improvements, and even new Eloquent relationship types such as \"has one of many\"."
msgstr ""

#: docs/9.x/releases.md:block 19 (paragraph)
msgid "Therefore, this commitment to ship great new features during the current release will likely lead to future \"major\" releases being primarily used for \"maintenance\" tasks such as upgrading upstream dependencies, which can be seen in these release notes."
msgstr ""

#: docs/9.x/releases.md:block 20 (paragraph)
msgid "Laravel 9 continues the improvements made in Laravel 8.x by introducing support for Symfony 6.0 components, Symfony Mailer, Flysystem 3.0, improved `route:list` output, a Laravel Scout database driver, new Eloquent accessor / mutator syntax, implicit route bindings via Enums, and a variety of other bug fixes and usability improvements."
msgstr ""

#: docs/9.x/releases.md:block 22 (header)
msgid "PHP 8.0"
msgstr ""

#: docs/9.x/releases.md:block 23 (paragraph)
msgid "Laravel 9.x requires a minimum PHP version of 8.0."
msgstr ""

#: docs/9.x/releases.md:block 25 (header)
msgid "Symfony Mailer"
msgstr ""

#: docs/9.x/releases.md:block 26 (paragraph)
msgid "*Symfony Mailer support was contributed by [Dries Vints](https://github.com/driesvints)*, [James Brooks](https://github.com/jbrooksuk), and [Julius Kiekbusch](https://github.com/Jubeki)."
msgstr ""

#: docs/9.x/releases.md:block 27 (paragraph)
msgid "Previous releases of Laravel utilized the [Swift Mailer](https://swiftmailer.symfony.com/docs/introduction.html) library to send outgoing email. However, that library is no longer maintained and has been succeeded by Symfony Mailer."
msgstr ""

#: docs/9.x/releases.md:block 28 (paragraph)
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#symfony-mailer) to learn more about ensuring your application is compatible with Symfony Mailer."
msgstr ""

#: docs/9.x/releases.md:block 30 (header)
msgid "Flysystem 3.x"
msgstr ""

#: docs/9.x/releases.md:block 31 (paragraph)
msgid "*Flysystem 3.x support was contributed by [Dries Vints](https://github.com/driesvints)*."
msgstr ""

#: docs/9.x/releases.md:block 32 (paragraph)
msgid "Laravel 9.x upgrades our upstream Flysystem dependency to Flysystem 3.x. Flysystem powers all of filesystem interactions offered by the `Storage` facade."
msgstr ""

#: docs/9.x/releases.md:block 33 (paragraph)
msgid "Please review the [upgrade guide](/docs/{{version}}/upgrade#flysystem-3) to learn more about ensuring your application is compatible with Flysystem 3.x."
msgstr ""

#: docs/9.x/releases.md:block 35 (header)
msgid "Improved Eloquent Accessors / Mutators"
msgstr ""

#: docs/9.x/releases.md:block 36 (paragraph)
msgid "*Improved Eloquent accessors / mutators was contributed by [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/9.x/releases.md:block 37 (paragraph)
msgid "Laravel 9.x offers a new way to define Eloquent [accessors and mutators](/docs/{{version}}/eloquent-mutators#accessors-and-mutators). In previous releases of Laravel, the only way to define accessors and mutators was by defining prefixed methods on your model like so:"
msgstr ""

#: docs/9.x/releases.md:block 38 (code)
msgid ""
"public function getNameAttribute($value)\n"
"{\n"
"    return strtoupper($value);\n"
"}\n"
"\n"
"public function setNameAttribute($value)\n"
"{\n"
"    $this->attributes['name'] = $value;\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 39 (paragraph)
msgid "However, in Laravel 9.x you may define an accessor and mutator using a single, non-prefixed method by type-hinting a return type of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr ""

#: docs/9.x/releases.md:block 40 (code)
msgid ""
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"\n"
"public function name(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value) => strtoupper($value),\n"
"        set: fn ($value) => $value,\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 41 (paragraph)
msgid "In addition, this new approach to defining accessors will cache object values that are returned by the attribute, just like [custom cast classes](/docs/{{version}}/eloquent-mutators#custom-casts):"
msgstr ""

#: docs/9.x/releases.md:block 42 (code)
msgid ""
"use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 44 (header)
msgid "Enum Eloquent Attribute Casting"
msgstr ""

#: docs/9.x/releases.md:block 45 (quote)
msgid "{note} Enum casting is only available for PHP 8.1+."
msgstr ""

#: docs/9.x/releases.md:block 46 (paragraph)
msgid "*Enum casting was contributed by [Mohamed Said](https://github.com/themsaid)*."
msgstr ""

#: docs/9.x/releases.md:block 47 (paragraph)
msgid "Eloquent now allows you to cast your attribute values to PHP enums. To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr ""

#: docs/9.x/releases.md:block 48 (code)
msgid ""
"use App\\Enums\\ServerStatus;\n"
"\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];\n"
msgstr ""

#: docs/9.x/releases.md:block 49 (paragraph)
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr ""

#: docs/9.x/releases.md:block 50 (code)
msgid ""
"if ($server->status == ServerStatus::provisioned) {\n"
"    $server->status = ServerStatus::ready;\n"
"\n"
"    $server->save();\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 52 (header)
msgid "Implicit Route Bindings With Enums"
msgstr ""

#: docs/9.x/releases.md:block 53 (paragraph)
msgid "*Implicit Enum bindings was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr ""

#: docs/9.x/releases.md:block 54 (paragraph)
msgid "PHP 8.1 introduces support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). Laravel 9.x introduces the ability to type-hint an Enum on your route definition and Laravel will only invoke the route if that route segment is a valid Enum value in the URI. Otherwise, an HTTP 404 response will be returned automatically. For example, given the following Enum:"
msgstr ""

#: docs/9.x/releases.md:block 55 (code)
msgid ""
"enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 56 (paragraph)
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, an HTTP 404 response will be returned:"
msgstr ""

#: docs/9.x/releases.md:block 57 (code)
msgid ""
"Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});\n"
msgstr ""

#: docs/9.x/releases.md:block 59 (header)
msgid "Forced Scoping Of Route Bindings"
msgstr ""

#: docs/9.x/releases.md:block 60 (paragraph)
msgid "*Forced scoped bindings was contributed by [Claudio Dekker](https://github.com/claudiodekker)*."
msgstr ""

#: docs/9.x/releases.md:block 61 (paragraph)
msgid "In previous releases of Laravel, you may wish to scope the second Eloquent model in a route definition such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr ""

#: docs/9.x/releases.md:block 62 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"});\n"
msgstr ""

#: docs/9.x/releases.md:block 63 (paragraph)
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. However, this behavior was only previously supported by Laravel when a custom key was used for the child route binding."
msgstr ""

#: docs/9.x/releases.md:block 64 (paragraph)
msgid "However, in Laravel 9.x, you may now instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr ""

#: docs/9.x/releases.md:block 65 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->scopeBindings();\n"
msgstr ""

#: docs/9.x/releases.md:block 66 (paragraph)
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr ""

#: docs/9.x/releases.md:block 67 (code)
msgid ""
"Route::scopeBindings()->group(function () {\n"
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
"});\n"
msgstr ""

#: docs/9.x/releases.md:block 69 (header)
msgid "Controller Route Groups"
msgstr ""

#: docs/9.x/releases.md:block 70 (paragraph)
msgid "*Route group improvements were contributed by [Luke Downing](https://github.com/lukeraymonddowning)*."
msgstr ""

#: docs/9.x/releases.md:block 71 (paragraph)
msgid "You may now use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr ""

#: docs/9.x/releases.md:block 72 (code)
msgid ""
"use App\\Http\\Controllers\\OrderController;\n"
"\n"
"Route::controller(OrderController::class)->group(function () {\n"
"    Route::get('/orders/{id}', 'show');\n"
"    Route::post('/orders', 'store');\n"
"});\n"
msgstr ""

#: docs/9.x/releases.md:block 74 (header)
msgid "Full Text Indexes / Where Clauses"
msgstr ""

#: docs/9.x/releases.md:block 75 (paragraph)
msgid "*Full text indexes and \"where\" clauses were contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)*."
msgstr ""

#: docs/9.x/releases.md:block 76 (paragraph)
msgid "When using MySQL or PostgreSQL, the `fullText` method may now be added to column definitions to generate full text indexes:"
msgstr ""

#: docs/9.x/releases.md:block 77 (code)
msgid "$table->text('bio')->fullText();\n"
msgstr ""

#: docs/9.x/releases.md:block 78 (paragraph)
msgid "In addition, the `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr ""

#: docs/9.x/releases.md:block 79 (code)
msgid ""
"$users = DB::table('users')\n"
"           ->whereFullText('bio', 'web developer')\n"
"           ->get();\n"
msgstr ""

#: docs/9.x/releases.md:block 81 (header)
msgid "Laravel Scout Database Engine"
msgstr ""

#: docs/9.x/releases.md:block 82 (paragraph)
msgid "*The Laravel Scout database engine was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Dries Vints](https://github.com/driesvints)*."
msgstr ""

#: docs/9.x/releases.md:block 83 (paragraph)
msgid "If your application interacts with small to medium sized databases or has a light workload, you may now use Scout's \"database\" engine instead of a dedicated search service such as Algolia or MeiliSearch. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr ""

#: docs/9.x/releases.md:block 84 (paragraph)
msgid "To learn more about the Scout database engine, consult the [Scout documentation](/docs/{{version}}/scout)."
msgstr ""

#: docs/9.x/releases.md:block 86 (header)
msgid "Rendering Inline Blade Templates"
msgstr ""

#: docs/9.x/releases.md:block 87 (paragraph)
msgid "*Rendering inline Blade templates was contributed by [Jason Beggs](https://github.com/jasonlbeggs). Rendering inline Blade components was contributed by [Toby Zerner](https://github.com/tobyzerner)*."
msgstr ""

#: docs/9.x/releases.md:block 88 (paragraph)
msgid "Sometimes you may need to transform a raw Blade template string into valid HTML. You may accomplish this using the `render` method provided by the `Blade` facade. The `render` method accepts the Blade template string and an optional array of data to provide to the template:"
msgstr ""

#: docs/9.x/releases.md:block 89 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Blade;\n"
"\n"
"return Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);\n"
msgstr ""

#: docs/9.x/releases.md:block 90 (paragraph)
msgid "Similarly, the `renderComponent` method may be used to render a given class component by passing the component instance to the method:"
msgstr ""

#: docs/9.x/releases.md:block 91 (code)
msgid ""
"use App\\View\\Components\\HelloComponent;\n"
"\n"
"return Blade::renderComponent(new HelloComponent('Julian Bashir'));\n"
msgstr ""

#: docs/9.x/releases.md:block 93 (header)
msgid "Slot Name Shortcut"
msgstr ""

#: docs/9.x/releases.md:block 94 (paragraph)
msgid "*Slot name shortcuts were contributed by [Caleb Porzio](https://github.com/calebporzio).*"
msgstr ""

#: docs/9.x/releases.md:block 95 (paragraph)
msgid "In previous releases of Laravel, slot names were provided using a `name` attribute on the `x-slot` tag:"
msgstr ""

#: docs/9.x/releases.md:block 96 (code)
msgid ""
"<x-alert>\n"
"    <x-slot name=\"title\">\n"
"        Server Error\n"
"    </x-slot>\n"
"\n"
"    <strong>Whoops!</strong> Something went wrong!\n"
"</x-alert>\n"
msgstr ""

#: docs/9.x/releases.md:block 97 (paragraph)
msgid "However, beginning in Laravel 9.x, you may specify the slot's name using a convenient, shorter syntax:"
msgstr ""

#: docs/9.x/releases.md:block 98 (code)
msgid ""
"<x-slot:title>\n"
"    Server Error\n"
"</x-slot>\n"
msgstr ""

#: docs/9.x/releases.md:block 100 (header)
msgid "Checked / Selected Blade Directives"
msgstr ""

#: docs/9.x/releases.md:block 101 (paragraph)
msgid "*Checked and selected Blade directives were contributed by [Ash Allen](https://github.com/ash-jc-allen) and [Taylor Otwell](https://github.com/taylorotwell)*."
msgstr ""

#: docs/9.x/releases.md:block 102 (paragraph)
msgid "For convenience, you may now use the `@checked` directive to easily indicate if a given HTML checkbox input is \"checked\". This directive will echo `checked` if the provided condition evaluates to `true`:"
msgstr ""

#: docs/9.x/releases.md:block 103 (code)
msgid ""
"<input type=\"checkbox\"\n"
"        name=\"active\"\n"
"        value=\"active\"\n"
"        @checked(old('active', $user->active)) />\n"
msgstr ""

#: docs/9.x/releases.md:block 104 (paragraph)
msgid "Likewise, the `@selected` directive may be used to indicate if a given select option should be \"selected\":"
msgstr ""

#: docs/9.x/releases.md:block 105 (code)
msgid ""
"<select name=\"version\">\n"
"    @foreach ($product->versions as $version)\n"
"        <option value=\"{{ $version }}\" @selected(old('version') == $version)>\n"
"            {{ $version }}\n"
"        </option>\n"
"    @endforeach\n"
"</select>\n"
msgstr ""

#: docs/9.x/releases.md:block 107 (header)
msgid "Bootstrap 5 Pagination Views"
msgstr ""

#: docs/9.x/releases.md:block 108 (paragraph)
msgid "*Bootstrap 5 pagination views were contributed by [Jared Lewis](https://github.com/jrd-lewis)*."
msgstr ""

#: docs/9.x/releases.md:block 109 (paragraph)
msgid "Laravel now includes pagination views built using [Bootstrap 5](https://getbootstrap.com/). To use these views instead of the default Tailwind views, you may call the paginator's `useBootstrapFive` method within the `boot` method of your `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: docs/9.x/releases.md:block 110 (code)
msgid ""
"use Illuminate\\Pagination\\Paginator;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Paginator::useBootstrapFive();\n"
"}\n"
msgstr ""

#: docs/9.x/releases.md:block 112 (header)
msgid "Improved Validation Of Nested Array Data"
msgstr ""

#: docs/9.x/releases.md:block 113 (paragraph)
msgid "*Improved validation of nested array inputs was contributed by [Steve Bauman](https://github.com/stevebauman)*."
msgstr ""

#: docs/9.x/releases.md:block 114 (paragraph)
msgid "Sometimes you may need to access the value for a given nested array element when assigning validation rules to the attribute. You may now accomplish this using the `Rule::forEach` method. The `forEach` method accepts a closure that will be invoked for each iteration of the array attribute under validation and will receive the attribute's value and explicit, fully-expanded attribute name. The closure should return an array of rules to assign to the array element:"
msgstr ""

#: docs/9.x/releases.md:block 115 (code)
msgid ""
"use App\\Rules\\HasPermission;\n"
"use Illuminate\\Support\\Facades\\Validator;\n"
"use Illuminate\\Validation\\Rule;\n"
"\n"
"$validator = Validator::make($request->all(), [\n"
"    'companies.*.id' => Rule::forEach(function ($value, $attribute) {\n"
"        return [\n"
"            Rule::exists(Company::class, 'id'),\n"
"            new HasPermission('manage-company', $value),\n"
"        ];\n"
"    }),\n"
"]);\n"
msgstr ""

#: docs/9.x/releases.md:block 117 (header)
msgid "Laravel Breeze API & Next.js"
msgstr ""

#: docs/9.x/releases.md:block 118 (paragraph)
msgid "*The Laravel Breeze API scaffolding and Next.js starter kit was contributed by [Taylor Otwell](https://github.com/taylorotwell) and [Miguel Piedrafita](https://twitter.com/m1guelpf)*."
msgstr ""

#: docs/9.x/releases.md:block 119 (paragraph)
msgid "The [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-next) starter kit has received an \"API\" scaffolding mode and complimentary [Next.js](https://nextjs.org) [frontend implementation](https://github.com/laravel/breeze-next). This starter kit scaffolding may be used to jump start your Laravel applications that are serving as a backend, Laravel Sanctum authenticated API for a JavaScript frontend."
msgstr ""

#: docs/9.x/releases.md:block 121 (header)
msgid "Improved Ignition Exception Page"
msgstr ""

#: docs/9.x/releases.md:block 122 (paragraph)
msgid "*Ignition is developed by [Spatie](https://spatie.be/).*"
msgstr ""

#: docs/9.x/releases.md:block 123 (paragraph)
msgid "Ignition, the open source exception debug page created by Spatie, has been redesigned from the ground up. The new, improved Ignition ships with Laravel 9.x and includes light / dark themes, customizable \"open in editor\" functionality, and more."
msgstr ""

#: docs/9.x/releases.md:block 126 (header)
msgid "Improved `route:list` CLI Output"
msgstr ""

#: docs/9.x/releases.md:block 127 (paragraph)
msgid "*Improved `route:list` CLI output was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr ""

#: docs/9.x/releases.md:block 128 (paragraph)
msgid "The `route:list` CLI output has been significantly improved for the Laravel 9.x release, offering a beautiful new experience when exploring your route definitions."
msgstr ""

#: docs/9.x/releases.md:block 131 (header)
msgid "Test Coverage Using Artisan `test` Command"
msgstr ""

#: docs/9.x/releases.md:block 132 (paragraph)
msgid "*Test coverage when using the Artisan `test` command was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr ""

#: docs/9.x/releases.md:block 133 (paragraph)
msgid "The Artisan `test` command has received a new `--coverage` option that you may use to explore the amount of code coverage your tests are providing to your application:"
msgstr ""

#: docs/9.x/releases.md:block 134 (code)
msgid "php artisan test --coverage\n"
msgstr ""

#: docs/9.x/releases.md:block 135 (paragraph)
msgid "The test coverage results will be displayed directly within the CLI output."
msgstr ""

#: docs/9.x/releases.md:block 137 (paragraph)
msgid "In addition, if you would like to specify a minimum threshold that your test coverage percentage must meet, you may use the `--min` option. The test suite will fail if the given minimum threshold is not met:"
msgstr ""

#: docs/9.x/releases.md:block 138 (code)
msgid "php artisan test --coverage --min=80.3\n"
msgstr ""

#: docs/9.x/releases.md:block 141 (header)
msgid "Soketi Echo Server"
msgstr ""

#: docs/9.x/releases.md:block 142 (paragraph)
msgid "*The Soketi Echo server was developed by [Alex Renoki](https://github.com/rennokki)*."
msgstr ""

#: docs/9.x/releases.md:block 143 (paragraph)
msgid "Although not exclusive to Laravel 9.x, Laravel has recently assisted with the documentation of Soketi, a [Laravel Echo](/docs/{{version}}/broadcasting) compatible Web Socket server written for Node.js. Soketi provides a great, open source alternative to Pusher and Ably for those applications that prefer to manage their own Web Socket server."
msgstr ""

#: docs/9.x/releases.md:block 144 (paragraph)
msgid "For more information on using Soketi, please consult the [broadcasting documentation](/docs/{{version}}/broadcasting) and [Soketi documentation](https://docs.soketi.app/)."
msgstr ""

#: docs/9.x/releases.md:block 146 (header)
msgid "Improved Collections IDE Support"
msgstr ""

#: docs/9.x/releases.md:block 147 (paragraph)
msgid "*Improved collections IDE support was contributed by [Nuno Maduro](https://github.com/nunomaduro)*."
msgstr ""

#: docs/9.x/releases.md:block 148 (paragraph)
msgid "Laravel 9.x adds improved, \"generic\" style type definitions to the collections component, improving IDE and static analysis support. IDEs such as [PHPStorm](https://blog.jetbrains.com/phpstorm/2021/12/phpstorm-2021-3-release/#support_for_future_laravel_collections) or static analysis tools such as [PHPStan](https://phpstan.org) will now better understand Laravel collections natively."
msgstr ""

#: docs/9.x/releases.md:block 151 (header)
msgid "New Helpers"
msgstr ""

#: docs/9.x/releases.md:block 152 (paragraph)
msgid "Laravel 9.x introduces two new, convenient helper functions that you may use in your own application."
msgstr ""

#: docs/9.x/releases.md:block 154 (header)
msgid "`str`"
msgstr ""

#: docs/9.x/releases.md:block 155 (paragraph)
msgid "The `str` function returns a new `Illuminate\\Support\\Stringable` instance for the given string. This function is equivalent to the `Str::of` method:"
msgstr ""

#: docs/9.x/releases.md:block 156 (code)
msgid ""
"$string = str('Taylor')->append(' Otwell');\n"
"\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/9.x/releases.md:block 157 (paragraph)
msgid "If no argument is provided to the `str` function, the function returns an instance of `Illuminate\\Support\\Str`:"
msgstr ""

#: docs/9.x/releases.md:block 158 (code)
msgid ""
"$snake = str()->snake('LaravelFramework');\n"
"\n"
"// 'laravel_framework'\n"
msgstr ""

#: docs/9.x/releases.md:block 160 (header)
msgid "`to_route`"
msgstr ""

#: docs/9.x/releases.md:block 161 (paragraph)
msgid "The `to_route` function generates a redirect HTTP response for a given named route, providing an expressive way to redirect to named routes from your routes and controllers:"
msgstr ""

#: docs/9.x/releases.md:block 162 (code)
msgid "return to_route('users.show', ['user' => 1]);\n"
msgstr ""

#: docs/9.x/releases.md:block 163 (paragraph)
msgid "If necessary, you may pass the HTTP status code that should be assigned to the redirect and any additional response headers as the third and fourth arguments to the to_route method:"
msgstr ""

#: docs/9.x/releases.md:block 164 (code)
msgid "return to_route('users.show', ['user' => 1], 302, ['X-Framework' => 'Laravel']);\n"
msgstr ""

#: docs/master/releases.md:block 12 (paragraph)
msgid "For LTS releases, such as Laravel 9, bug fixes are provided for 2 years and security fixes are provided for 3 years. These releases provide the longest window of support and maintenance. For general releases, bug fixes are provided for 18 months and security fixes are provided for 2 years. For all additional libraries, including Lumen, only the latest release receives bug fixes. In addition, please review the database versions [supported by Laravel](/docs/{{version}}/database#introduction)."
msgstr ""

#: docs/master/releases.md:block 13 (table)
msgid "9 (LTS)"
msgstr ""

#: docs/master/releases.md:block 13 (table)
msgid "February 8th, 2025"
msgstr ""

#: docs/master/releases.md:block 83 (paragraph)
msgid "If your application interacts with small to medium sized databases or has a light workload, you may now use Scout's \"database\" engine instead of a dedicated search service such as Algolia or MeiliSerach. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr ""
