#
msgid ""
msgstr ""

#: docs/8.x/container.md:block 1 (header)
msgid "Service Container"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Zero Configuration Resolution](#zero-configuration-resolution)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[When To Use The Container](#when-to-use-the-container)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding](#binding)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Basics](#binding-basics)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Interfaces To Implementations](#binding-interfaces-to-implementations)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Contextual Binding](#contextual-binding)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Primitives](#binding-primitives)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Binding Typed Variadics](#binding-typed-variadics)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Tagging](#tagging)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Extending Bindings](#extending-bindings)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Resolving](#resolving)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[The Make Method](#the-make-method)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Automatic Injection](#automatic-injection)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Method Invocation & Injection](#method-invocation-and-injection)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[Container Events](#container-events)"
msgstr ""

#: docs/8.x/container.md:block 2 (unordered list)
msgid "[PSR-11](#psr-11)"
msgstr ""

#: docs/8.x/container.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/container.md:block 5 (paragraph)
msgid "The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are \"injected\" into the class via the constructor or, in some cases, \"setter\" methods."
msgstr ""

#: docs/8.x/container.md:block 6 (paragraph)
msgid "Let's look at a simple example:"
msgstr ""

#: docs/8.x/container.md:block 7 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        $user = $this->users->find($id);\n"
"\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 8 (paragraph)
msgid "In this example, the `UserController` needs to retrieve users from a data source. So, we will **inject** a service that is able to retrieve users. In this context, our `UserRepository` most likely uses [Eloquent](/docs/{{version}}/eloquent) to retrieve user information from the database. However, since the repository is injected, we are able to easily swap it out with another implementation. We are also able to easily \"mock\", or create a dummy implementation of the `UserRepository` when testing our application."
msgstr ""

#: docs/8.x/container.md:block 9 (paragraph)
msgid "A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself."
msgstr ""

#: docs/8.x/container.md:block 11 (header)
msgid "Zero Configuration Resolution"
msgstr ""

#: docs/8.x/container.md:block 12 (paragraph)
msgid "If a class has no dependencies or only depends on other concrete classes (not interfaces), the container does not need to be instructed on how to resolve that class. For example, you may place the following code in your `routes/web.php` file:"
msgstr ""

#: docs/8.x/container.md:block 13 (code)
msgid ""
"<?php\n"
"\n"
"class Service\n"
"{\n"
"    //\n"
"}\n"
"\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 14 (paragraph)
msgid "In this example, hitting your application's `/` route will automatically resolve the `Service` class and inject it into your route's handler. This is game changing. It means you can develop your application and take advantage of dependency injection without worrying about bloated configuration files."
msgstr ""

#: docs/8.x/container.md:block 15 (paragraph)
msgid "Thankfully, many of the classes you will be writing when building a Laravel application automatically receive their dependencies via the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). Once you taste the power of automatic and zero configuration dependency injection it feels impossible to develop without it."
msgstr ""

#: docs/8.x/container.md:block 17 (header)
msgid "When To Use The Container"
msgstr ""

#: docs/8.x/container.md:block 18 (paragraph)
msgid "Thanks to zero configuration resolution, you will often type-hint dependencies on routes, controllers, event listeners, and elsewhere without ever manually interacting with the container. For example, you might type-hint the `Illuminate\\Http\\Request` object on your route definition so that you can easily access the current request. Even though we never have to interact with the container to write this code, it is managing the injection of these dependencies behind the scenes:"
msgstr ""

#: docs/8.x/container.md:block 19 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/', function (Request $request) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 20 (paragraph)
msgid "In many cases, thanks to automatic dependency injection and [facades](/docs/{{version}}/facades), you can build Laravel applications without **ever** manually binding or resolving anything from the container. **So, when would you ever manually interact with the container?** Let's examine two situations."
msgstr ""

#: docs/8.x/container.md:block 21 (paragraph)
msgid "First, if you write a class that implements an interface and you wish to type-hint that interface on a route or class constructor, you must [tell the container how to resolve that interface](#binding-interfaces-to-implementations). Secondly, if you are [writing a Laravel package](/docs/{{version}}/packages) that you plan to share with other Laravel developers, you may need to bind your package's services into the container."
msgstr ""

#: docs/8.x/container.md:block 23 (header)
msgid "Binding"
msgstr ""

#: docs/8.x/container.md:block 25 (header)
msgid "Binding Basics"
msgstr ""

#: docs/8.x/container.md:block 27 (header)
msgid "Simple Bindings"
msgstr ""

#: docs/8.x/container.md:block 28 (paragraph)
msgid "Almost all of your service container bindings will be registered within [service providers](/docs/{{version}}/providers), so most of these examples will demonstrate using the container in that context."
msgstr ""

#: docs/8.x/container.md:block 29 (paragraph)
msgid "Within a service provider, you always have access to the container via the `$this->app` property. We can register a binding using the `bind` method, passing the class or interface name that we wish to register along with a closure that returns an instance of the class:"
msgstr ""

#: docs/8.x/container.md:block 30 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->bind(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 31 (paragraph)
msgid "Note that we receive the container itself as an argument to the resolver. We can then use the container to resolve sub-dependencies of the object we are building."
msgstr ""

#: docs/8.x/container.md:block 32 (paragraph)
msgid "As mentioned, you will typically be interacting with the container within service providers; however, if you would like to interact with the container outside of a service provider, you may do so via the `App` [facade](/docs/{{version}}/facades):"
msgstr ""

#: docs/8.x/container.md:block 33 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"App::bind(Transistor::class, function ($app) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 34 (quote)
msgid "{tip} There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection."
msgstr ""

#: docs/8.x/container.md:block 36 (header)
msgid "Binding A Singleton"
msgstr ""

#: docs/8.x/container.md:block 37 (paragraph)
msgid "The `singleton` method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:"
msgstr ""

#: docs/8.x/container.md:block 38 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->singleton(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 40 (header)
msgid "Binding Scoped Singletons"
msgstr ""

#: docs/8.x/container.md:block 41 (paragraph)
msgid "The `scoped` method binds a class or interface into the container that should only be resolved one time within a given Laravel request / job lifecycle. While this method is similar to the `singleton` method, instances registered using the `scoped` method will be flushed whenever the Laravel application starts a new \"lifecycle\", such as when a [Laravel Octane](/docs/{{version}}/octane) worker processes a new request or when a Laravel [queue worker](/docs/{{version}}/queues) processes a new job:"
msgstr ""

#: docs/8.x/container.md:block 42 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$this->app->scoped(Transistor::class, function ($app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 44 (header)
msgid "Binding Instances"
msgstr ""

#: docs/8.x/container.md:block 45 (paragraph)
msgid "You may also bind an existing object instance into the container using the `instance` method. The given instance will always be returned on subsequent calls into the container:"
msgstr ""

#: docs/8.x/container.md:block 46 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"\n"
"$service = new Transistor(new PodcastParser);\n"
"\n"
"$this->app->instance(Transistor::class, $service);\n"
msgstr ""

#: docs/8.x/container.md:block 48 (header)
msgid "Binding Interfaces To Implementations"
msgstr ""

#: docs/8.x/container.md:block 49 (paragraph)
msgid "A very powerful feature of the service container is its ability to bind an interface to a given implementation. For example, let's assume we have an `EventPusher` interface and a `RedisEventPusher` implementation. Once we have coded our `RedisEventPusher` implementation of this interface, we can register it with the service container like so:"
msgstr ""

#: docs/8.x/container.md:block 50 (code)
msgid ""
"use App\\Contracts\\EventPusher;\n"
"use App\\Services\\RedisEventPusher;\n"
"\n"
"$this->app->bind(EventPusher::class, RedisEventPusher::class);\n"
msgstr ""

#: docs/8.x/container.md:block 51 (paragraph)
msgid "This statement tells the container that it should inject the `RedisEventPusher` when a class needs an implementation of `EventPusher`. Now we can type-hint the `EventPusher` interface in the constructor of a class that is resolved by the container. Remember, controllers, event listeners, middleware, and various other types of classes within Laravel applications are always resolved using the container:"
msgstr ""

#: docs/8.x/container.md:block 52 (code)
msgid ""
"use App\\Contracts\\EventPusher;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\App\\Contracts\\EventPusher  $pusher\n"
" * @return void\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 54 (header)
msgid "Contextual Binding"
msgstr ""

#: docs/8.x/container.md:block 55 (paragraph)
msgid "Sometimes you may have two classes that utilize the same interface, but you wish to inject different implementations into each class. For example, two controllers may depend on different implementations of the `Illuminate\\Contracts\\Filesystem\\Filesystem` [contract](/docs/{{version}}/contracts). Laravel provides a simple, fluent interface for defining this behavior:"
msgstr ""

#: docs/8.x/container.md:block 56 (code)
msgid ""
"use App\\Http\\Controllers\\PhotoController;\n"
"use App\\Http\\Controllers\\UploadController;\n"
"use App\\Http\\Controllers\\VideoController;\n"
"use Illuminate\\Contracts\\Filesystem\\Filesystem;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"\n"
"$this->app->when(PhotoController::class)\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('local');\n"
"          });\n"
"\n"
"$this->app->when([VideoController::class, UploadController::class])\n"
"          ->needs(Filesystem::class)\n"
"          ->give(function () {\n"
"              return Storage::disk('s3');\n"
"          });\n"
msgstr ""

#: docs/8.x/container.md:block 58 (header)
msgid "Binding Primitives"
msgstr ""

#: docs/8.x/container.md:block 59 (paragraph)
msgid "Sometimes you may have a class that receives some injected classes, but also needs an injected primitive value such as an integer. You may easily use contextual binding to inject any value your class may need:"
msgstr ""

#: docs/8.x/container.md:block 60 (code)
msgid ""
"$this->app->when('App\\Http\\Controllers\\UserController')\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"
msgstr ""

#: docs/8.x/container.md:block 61 (paragraph)
msgid "Sometimes a class may depend on an array of [tagged](#tagging) instances. Using the `giveTagged` method, you may easily inject all of the container bindings with that tag:"
msgstr ""

#: docs/8.x/container.md:block 62 (code)
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs('$reports')\n"
"    ->giveTagged('reports');\n"
msgstr ""

#: docs/8.x/container.md:block 63 (paragraph)
msgid "If you need to inject a value from one of your application's configuration files, you may use the `giveConfig` method:"
msgstr ""

#: docs/8.x/container.md:block 64 (code)
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs('$timezone')\n"
"    ->giveConfig('app.timezone');\n"
msgstr ""

#: docs/8.x/container.md:block 66 (header)
msgid "Binding Typed Variadics"
msgstr ""

#: docs/8.x/container.md:block 67 (paragraph)
msgid "Occasionally, you may have a class that receives an array of typed objects using a variadic constructor argument:"
msgstr ""

#: docs/8.x/container.md:block 68 (code)
msgid ""
"<?php\n"
"\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n"
"\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n"
"\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n"
"\n"
"    /**\n"
"     * Create a new class instance.\n"
"     *\n"
"     * @param  \\App\\Services\\Logger  $logger\n"
"     * @param  array  $filters\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 69 (paragraph)
msgid "Using contextual binding, you may resolve this dependency by providing the `give` method with a closure that returns an array of resolved `Filter` instances:"
msgstr ""

#: docs/8.x/container.md:block 70 (code)
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function ($app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"
msgstr ""

#: docs/8.x/container.md:block 71 (paragraph)
msgid "For convenience, you may also just provide an array of class names to be resolved by the container whenever `Firewall` needs `Filter` instances:"
msgstr ""

#: docs/8.x/container.md:block 72 (code)
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give([\n"
"              NullFilter::class,\n"
"              ProfanityFilter::class,\n"
"              TooLongFilter::class,\n"
"          ]);\n"
msgstr ""

#: docs/8.x/container.md:block 74 (header)
msgid "Variadic Tag Dependencies"
msgstr ""

#: docs/8.x/container.md:block 75 (paragraph)
msgid "Sometimes a class may have a variadic dependency that is type-hinted as a given class (`Report ...$reports`). Using the `needs` and `giveTagged` methods, you may easily inject all of the container bindings with that [tag](#tagging) for the given dependency:"
msgstr ""

#: docs/8.x/container.md:block 76 (code)
msgid ""
"$this->app->when(ReportAggregator::class)\n"
"    ->needs(Report::class)\n"
"    ->giveTagged('reports');\n"
msgstr ""

#: docs/8.x/container.md:block 78 (header)
msgid "Tagging"
msgstr ""

#: docs/8.x/container.md:block 79 (paragraph)
msgid "Occasionally, you may need to resolve all of a certain \"category\" of binding. For example, perhaps you are building a report analyzer that receives an array of many different `Report` interface implementations. After registering the `Report` implementations, you can assign them a tag using the `tag` method:"
msgstr ""

#: docs/8.x/container.md:block 80 (code)
msgid ""
"$this->app->bind(CpuReport::class, function () {\n"
"    //\n"
"});\n"
"\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    //\n"
"});\n"
"\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"
msgstr ""

#: docs/8.x/container.md:block 81 (paragraph)
msgid "Once the services have been tagged, you may easily resolve them all via the container's `tagged` method:"
msgstr ""

#: docs/8.x/container.md:block 82 (code)
msgid ""
"$this->app->bind(ReportAnalyzer::class, function ($app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 84 (header)
msgid "Extending Bindings"
msgstr ""

#: docs/8.x/container.md:block 85 (paragraph)
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts a closure, which should return the modified service, as its only argument. The closure receives the service being resolved and the container instance:"
msgstr ""

#: docs/8.x/container.md:block 86 (code)
msgid ""
"$this->app->extend(Service::class, function ($service, $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 88 (header)
msgid "Resolving"
msgstr ""

#: docs/8.x/container.md:block 90 (header)
msgid "The `make` Method"
msgstr ""

#: docs/8.x/container.md:block 91 (paragraph)
msgid "You may use the `make` method to resolve a class instance from the container. The `make` method accepts the name of the class or interface you wish to resolve:"
msgstr ""

#: docs/8.x/container.md:block 92 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$transistor = $this->app->make(Transistor::class);\n"
msgstr ""

#: docs/8.x/container.md:block 93 (paragraph)
msgid "If some of your class' dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the `makeWith` method. For example, we may manually pass the `$id` constructor argument required by the `Transistor` service:"
msgstr ""

#: docs/8.x/container.md:block 94 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);\n"
msgstr ""

#: docs/8.x/container.md:block 95 (paragraph)
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) to resolve a class instance from the container:"
msgstr ""

#: docs/8.x/container.md:block 96 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$transistor = App::make(Transistor::class);\n"
msgstr ""

#: docs/8.x/container.md:block 97 (paragraph)
msgid "If you would like to have the Laravel container instance itself injected into a class that is being resolved by the container, you may type-hint the `Illuminate\\Container\\Container` class on your class' constructor:"
msgstr ""

#: docs/8.x/container.md:block 98 (code)
msgid ""
"use Illuminate\\Container\\Container;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" *\n"
" * @param  \\Illuminate\\Container\\Container  $container\n"
" * @return void\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 100 (header)
msgid "Automatic Injection"
msgstr ""

#: docs/8.x/container.md:block 101 (paragraph)
msgid "Alternatively, and importantly, you may type-hint the dependency in the constructor of a class that is resolved by the container, including [controllers](/docs/{{version}}/controllers), [event listeners](/docs/{{version}}/events), [middleware](/docs/{{version}}/middleware), and more. Additionally, you may type-hint dependencies in the `handle` method of [queued jobs](/docs/{{version}}/queues). In practice, this is how most of your objects should be resolved by the container."
msgstr ""

#: docs/8.x/container.md:block 102 (paragraph)
msgid "For example, you may type-hint a repository defined by your application in a controller's constructor. The repository will automatically be resolved and injected into the class:"
msgstr ""

#: docs/8.x/container.md:block 103 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $users\n"
"     * @return void\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        //\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 105 (header)
msgid "Method Invocation & Injection"
msgstr ""

#: docs/8.x/container.md:block 106 (paragraph)
msgid "Sometimes you may wish to invoke a method on an object instance while allowing the container to automatically inject that method's dependencies. For example, given the following class:"
msgstr ""

#: docs/8.x/container.md:block 107 (code)
msgid ""
"<?php\n"
"\n"
"namespace App;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     *\n"
"     * @param  \\App\\Repositories\\UserRepository  $repository\n"
"     * @return array\n"
"     */\n"
"    public function generate(UserRepository $repository)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/container.md:block 108 (paragraph)
msgid "You may invoke the `generate` method via the container like so:"
msgstr ""

#: docs/8.x/container.md:block 109 (code)
msgid ""
"use App\\UserReport;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$report = App::call([new UserReport, 'generate']);\n"
msgstr ""

#: docs/8.x/container.md:block 110 (paragraph)
msgid "The `call` method accepts any PHP callable. The container's `call` method may even be used to invoke a closure while automatically injecting its dependencies:"
msgstr ""

#: docs/8.x/container.md:block 111 (code)
msgid ""
"use App\\Repositories\\UserRepository;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$result = App::call(function (UserRepository $repository) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 113 (header)
msgid "Container Events"
msgstr ""

#: docs/8.x/container.md:block 114 (paragraph)
msgid "The service container fires an event each time it resolves an object. You may listen to this event using the `resolving` method:"
msgstr ""

#: docs/8.x/container.md:block 115 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"\n"
"$this->app->resolving(Transistor::class, function ($transistor, $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n"
"\n"
"$this->app->resolving(function ($object, $app) {\n"
"    // Called when container resolves object of any type...\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 116 (paragraph)
msgid "As you can see, the object being resolved will be passed to the callback, allowing you to set any additional properties on the object before it is given to its consumer."
msgstr ""

#: docs/8.x/container.md:block 118 (header)
msgid "PSR-11"
msgstr ""

#: docs/8.x/container.md:block 119 (paragraph)
msgid "Laravel's service container implements the [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md) interface. Therefore, you may type-hint the PSR-11 container interface to obtain an instance of the Laravel container:"
msgstr ""

#: docs/8.x/container.md:block 120 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n"
"\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n"
"\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/container.md:block 121 (paragraph)
msgid "An exception is thrown if the given identifier can't be resolved. The exception will be an instance of `Psr\\Container\\NotFoundExceptionInterface` if the identifier was never bound. If the identifier was bound but was unable to be resolved, an instance of `Psr\\Container\\ContainerExceptionInterface` will be thrown."
msgstr ""

#: docs/9.x/container.md:block 34 (quote)
msgid "**Note** There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection."
msgstr ""

#: docs/9.x/container.md:block 60 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"$this->app->when(UserController::class)\n"
"          ->needs('$variableName')\n"
"          ->give($value);\n"
msgstr ""

#: docs/9.x/container.md:block 85 (paragraph)
msgid "The `extend` method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The `extend` method accepts two arguments, the service class you're extending and a closure that should return the modified service. The closure receives the service being resolved and the container instance:"
msgstr ""

#: docs/9.x/container.md:block 95 (paragraph)
msgid "If you are outside of a service provider in a location of your code that does not have access to the `$app` variable, you may use the `App` [facade](/docs/{{version}}/facades) or the `app` [helper](/docs/{{version}}/helpers#method-app) to resolve a class instance from the container:"
msgstr ""

#: docs/9.x/container.md:block 96 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$transistor = App::make(Transistor::class);\n"
"\n"
"$transistor = app(Transistor::class);\n"
msgstr ""

#: docs/master/container.md:block 7 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository implementation.\n"
"     *\n"
"     * @var UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        $user = $this->users->find($id);\n"
"\n"
"        return view('user.profile', ['user' => $user]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 13 (code)
msgid ""
"<?php\n"
"\n"
"class Service\n"
"{\n"
"    // ...\n"
"}\n"
"\n"
"Route::get('/', function (Service $service) {\n"
"    die(get_class($service));\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 30 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 33 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"App::bind(Transistor::class, function (Application $app) {\n"
"    // ...\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 38 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->singleton(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 42 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use App\\Services\\PodcastParser;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->scoped(Transistor::class, function (Application $app) {\n"
"    return new Transistor($app->make(PodcastParser::class));\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 52 (code)
msgid ""
"use App\\Contracts\\EventPusher;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(EventPusher $pusher)\n"
"{\n"
"    $this->pusher = $pusher;\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 68 (code)
msgid ""
"<?php\n"
"\n"
"use App\\Models\\Filter;\n"
"use App\\Services\\Logger;\n"
"\n"
"class Firewall\n"
"{\n"
"    /**\n"
"     * The logger instance.\n"
"     *\n"
"     * @var \\App\\Services\\Logger\n"
"     */\n"
"    protected $logger;\n"
"\n"
"    /**\n"
"     * The filter instances.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $filters;\n"
"\n"
"    /**\n"
"     * Create a new class instance.\n"
"     */\n"
"    public function __construct(Logger $logger, Filter ...$filters)\n"
"    {\n"
"        $this->logger = $logger;\n"
"        $this->filters = $filters;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 70 (code)
msgid ""
"$this->app->when(Firewall::class)\n"
"          ->needs(Filter::class)\n"
"          ->give(function (Application $app) {\n"
"                return [\n"
"                    $app->make(NullFilter::class),\n"
"                    $app->make(ProfanityFilter::class),\n"
"                    $app->make(TooLongFilter::class),\n"
"                ];\n"
"          });\n"
msgstr ""

#: docs/master/container.md:block 80 (code)
msgid ""
"$this->app->bind(CpuReport::class, function () {\n"
"    // ...\n"
"});\n"
"\n"
"$this->app->bind(MemoryReport::class, function () {\n"
"    // ...\n"
"});\n"
"\n"
"$this->app->tag([CpuReport::class, MemoryReport::class], 'reports');\n"
msgstr ""

#: docs/master/container.md:block 82 (code)
msgid ""
"$this->app->bind(ReportAnalyzer::class, function (Application $app) {\n"
"    return new ReportAnalyzer($app->tagged('reports'));\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 86 (code)
msgid ""
"$this->app->extend(Service::class, function (Service $service, Application $app) {\n"
"    return new DecoratedService($service);\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 98 (code)
msgid ""
"use Illuminate\\Container\\Container;\n"
"\n"
"/**\n"
" * Create a new class instance.\n"
" */\n"
"public function __construct(Container $container)\n"
"{\n"
"    $this->container = $container;\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 103 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"use App\\Models\\User;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * The user repository instance.\n"
"     *\n"
"     * @var \\App\\Repositories\\UserRepository\n"
"     */\n"
"    protected $users;\n"
"\n"
"    /**\n"
"     * Create a new controller instance.\n"
"     */\n"
"    public function __construct(UserRepository $users)\n"
"    {\n"
"        $this->users = $users;\n"
"    }\n"
"\n"
"    /**\n"
"     * Show the user with the given ID.\n"
"     */\n"
"    public function show(string $id): User\n"
"    {\n"
"        $user = $this->users->findOrFail($id);\n"
"\n"
"        return $user;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 107 (code)
msgid ""
"<?php\n"
"\n"
"namespace App;\n"
"\n"
"use App\\Repositories\\UserRepository;\n"
"\n"
"class UserReport\n"
"{\n"
"    /**\n"
"     * Generate a new user report.\n"
"     */\n"
"    public function generate(UserRepository $repository): array\n"
"    {\n"
"        return [\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/container.md:block 115 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->resolving(Transistor::class, function (Transistor $transistor, Application $app) {\n"
"    // Called when container resolves objects of type \"Transistor\"...\n"
"});\n"
"\n"
"$this->app->resolving(function (mixed $object, Application $app) {\n"
"    // Called when container resolves object of any type...\n"
"});\n"
msgstr ""

#: docs/master/container.md:block 120 (code)
msgid ""
"use App\\Services\\Transistor;\n"
"use Psr\\Container\\ContainerInterface;\n"
"\n"
"Route::get('/', function (ContainerInterface $container) {\n"
"    $service = $container->get(Transistor::class);\n"
"\n"
"    // ...\n"
"});\n"
msgstr ""
