# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 14:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/mocking.md:1
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mocking.md:19
msgid "[Mocking Objects](#mocking-objects)"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:19
#, no-wrap
msgid ""
"- [Mocking Facades](#mocking-facades)\n"
"    - [Facade Spies](#facade-spies)\n"
"- [Bus Fake](#bus-fake)\n"
"    - [Job Chains](#bus-job-chains)\n"
"    - [Job Batches](#job-batches)\n"
"- [Event Fake](#event-fake)\n"
"    - [Scoped Event Fakes](#scoped-event-fakes)\n"
"- [HTTP Fake](#http-fake)\n"
"- [Mail Fake](#mail-fake)\n"
"- [Notification Fake](#notification-fake)\n"
"- [Queue Fake](#queue-fake)\n"
"    - [Job Chains](#job-chains)\n"
"- [Storage Fake](#storage-fake)\n"
"- [Interacting With Time](#interacting-with-time)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:21
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:21
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:24
msgid ""
"When testing Laravel applications, you may wish to \"mock\" certain aspects "
"of your application so they are not actually executed during a given "
"test. For example, when testing a controller that dispatches an event, you "
"may wish to mock the event listeners so they are not actually executed "
"during the test. This allows you to only test the controller's HTTP response "
"without worrying about the execution of the event listeners since the event "
"listeners can be tested in their own test case."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:26
msgid ""
"Laravel provides helpful methods for mocking events, jobs, and other facades "
"out of the box. These helpers primarily provide a convenience layer over "
"Mockery so you do not have to manually make complicated Mockery method "
"calls."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:28
#, no-wrap
msgid "<a name=\"mocking-objects\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:28
#, no-wrap
msgid "Mocking Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:31
msgid ""
"When mocking an object that is going to be injected into your application "
"via Laravel's [service container](/docs/{{version}}/container), you will "
"need to bind your mocked instance into the container as an `instance` "
"binding. This will instruct the container to use your mocked instance of the "
"object instead of constructing the object itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:35
#, no-wrap
msgid ""
"    use App\\Service;\n"
"    use Mockery;\n"
"    use Mockery\\MockInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:45
#, no-wrap
msgid ""
"    public function test_something_can_be_mocked()\n"
"    {\n"
"        $this->instance(\n"
"            Service::class,\n"
"            Mockery::mock(Service::class, function (MockInterface $mock) {\n"
"                $mock->shouldReceive('process')->once();\n"
"            })\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:47
msgid ""
"In order to make this more convenient, you may use the `mock` method that is "
"provided by Laravel's base test case class. For example, the following "
"example is equivalent to the example above:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:50 docs/8.x/mocking.md:59
#, no-wrap
msgid ""
"    use App\\Service;\n"
"    use Mockery\\MockInterface;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:54
#, no-wrap
msgid ""
"    $mock = $this->mock(Service::class, function (MockInterface $mock) {\n"
"        $mock->shouldReceive('process')->once();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:56
msgid ""
"You may use the `partialMock` method when you only need to mock a few "
"methods of an object. The methods that are not mocked will be executed "
"normally when called:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:63
#, no-wrap
msgid ""
"    $mock = $this->partialMock(Service::class, function (MockInterface "
"$mock) {\n"
"        $mock->shouldReceive('process')->once();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:65
msgid ""
"Similarly, if you want to "
"[spy](http://docs.mockery.io/en/latest/reference/spies.html) on an object, "
"Laravel's base test case class offers a `spy` method as a convenient wrapper "
"around the `Mockery::spy` method. Spies are similar to mocks; however, spies "
"record any interaction between the spy and the code being tested, allowing "
"you to make assertions after the code is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:67
#, no-wrap
msgid "    use App\\Service;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:69
#, no-wrap
msgid "    $spy = $this->spy(Service::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:71
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:73
#, no-wrap
msgid "    $spy->shouldHaveReceived('process');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:75
#, no-wrap
msgid "<a name=\"mocking-facades\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:75
#, no-wrap
msgid "Mocking Facades"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:78
msgid ""
"Unlike traditional static method calls, [facades](/docs/{{version}}/facades) "
"(including [real-time facades](/docs/{{version}}/facades#real-time-facades)) "
"may be mocked. This provides a great advantage over traditional static "
"methods and grants you the same testability that you would have if you were "
"using traditional dependency injection. When testing, you may often want to "
"mock a call to a Laravel facade that occurs in one of your controllers. For "
"example, consider the following controller action:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:80 docs/8.x/mocking.md:103 docs/8.x/mocking.md:154 docs/8.x/mocking.md:228 docs/8.x/mocking.md:306 docs/8.x/mocking.md:349 docs/8.x/mocking.md:410 docs/8.x/mocking.md:480 docs/8.x/mocking.md:551
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:82
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:84 docs/8.x/mocking.md:134
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cache;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:95
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Retrieve a list of all users of the application.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $value = Cache::get('key');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:99
#, no-wrap
msgid ""
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:101
msgid ""
"We can mock the call to the `Cache` facade by using the `shouldReceive` "
"method, which will return an instance of a "
"[Mockery](https://github.com/padraic/mockery) mock. Since facades are "
"actually resolved and managed by the Laravel [service "
"container](/docs/{{version}}/container), they have much more testability "
"than a typical static class. For example, let's mock our call to the `Cache` "
"facade's `get` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:105 docs/8.x/mocking.md:156 docs/8.x/mocking.md:230 docs/8.x/mocking.md:308 docs/8.x/mocking.md:351 docs/8.x/mocking.md:412 docs/8.x/mocking.md:482 docs/8.x/mocking.md:553
#, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:110
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Cache;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:119
#, no-wrap
msgid ""
"    class UserControllerTest extends TestCase\n"
"    {\n"
"        public function testGetIndex()\n"
"        {\n"
"            Cache::shouldReceive('get')\n"
"                        ->once()\n"
"                        ->with('key')\n"
"                        ->andReturn('value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:121
#, no-wrap
msgid "            $response = $this->get('/users');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:125
#, no-wrap
msgid ""
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:127
#, no-wrap
msgid ""
"> {note} You should not mock the `Request` facade. Instead, pass the input "
"you desire into the [HTTP testing methods](/docs/{{version}}/http-tests) "
"such as `get` and `post` when running your test. Likewise, instead of "
"mocking the `Config` facade, call the `Config::set` method in your tests.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:129
#, no-wrap
msgid "<a name=\"facade-spies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:129
#, no-wrap
msgid "Facade Spies"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:132
msgid ""
"If you would like to "
"[spy](http://docs.mockery.io/en/latest/reference/spies.html) on a facade, "
"you may call the `spy` method on the corresponding facade. Spies are similar "
"to mocks; however, spies record any interaction between the spy and the code "
"being tested, allowing you to make assertions after the code is executed:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:138
#, no-wrap
msgid ""
"    public function test_values_are_be_stored_in_cache()\n"
"    {\n"
"        Cache::spy();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:140
#, no-wrap
msgid "        $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:142
#, no-wrap
msgid "        $response->assertStatus(200);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:145
#, no-wrap
msgid ""
"        Cache::shouldHaveReceived('put')->once()->with('name', 'Taylor', "
"10);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:147
#, no-wrap
msgid "<a name=\"bus-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:147
#, no-wrap
msgid "Bus Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:150
msgid ""
"When testing code that dispatches jobs, you typically want to assert that a "
"given job was dispatched but not actually queue or execute the job. This is "
"because the job's execution can normally be tested in a separate test class."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:152
msgid ""
"You may use the `Bus` facade's `fake` method to prevent jobs from being "
"dispatched to the queue. Then, after executing the code under test, you may "
"inspect which jobs the application attempted to dispatch using the "
"`assertDispatched` and `assertNotDispatched` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:162
#, no-wrap
msgid ""
"    use App\\Jobs\\ShipOrder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:168
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Bus::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:170 docs/8.x/mocking.md:248 docs/8.x/mocking.md:365 docs/8.x/mocking.md:426 docs/8.x/mocking.md:498
#, no-wrap
msgid "            // Perform order shipping...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:173
#, no-wrap
msgid ""
"            // Assert that a job was dispatched...\n"
"            Bus::assertDispatched(ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:178
#, no-wrap
msgid ""
"            // Assert a job was not dispatched...\n"
"            Bus::assertNotDispatched(AnotherJob::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:180
msgid ""
"You may pass a closure to the `assertDispatched` or `assertNotDispatched` "
"methods in order to assert that a job was dispatched that passes a given "
"\"truth test\". If at least one job was dispatched that passes the given "
"truth test then the assertion will be successful. For example, you may wish "
"to assert that a job was dispatched for a specific order:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:184
#, no-wrap
msgid ""
"    Bus::assertDispatched(function (ShipOrder $job) use ($order) {\n"
"        return $job->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:186
#, no-wrap
msgid "<a name=\"bus-job-chains\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:186 docs/8.x/mocking.md:520
#, no-wrap
msgid "Job Chains"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:189
msgid ""
"The `Bus` facade's `assertChained` method may be used to assert that a "
"[chain of jobs](/docs/{{version}}/queues#job-chaining) was dispatched. The "
"`assertChained` method accepts an array of chained jobs as its first "
"argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:194
#, no-wrap
msgid ""
"    use App\\Jobs\\RecordShipment;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use App\\Jobs\\UpdateInventory;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:200
#, no-wrap
msgid ""
"    Bus::assertChained([\n"
"        ShipOrder::class,\n"
"        RecordShipment::class,\n"
"        UpdateInventory::class\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:202 docs/8.x/mocking.md:535
msgid ""
"As you can see in the example above, the array of chained jobs may be an "
"array of the job's class names. However, you may also provide an array of "
"actual job instances. When doing so, Laravel will ensure that the job "
"instances are of the same class and have the same property values of the "
"chained jobs dispatched by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:208
#, no-wrap
msgid ""
"    Bus::assertChained([\n"
"        new ShipOrder,\n"
"        new RecordShipment,\n"
"        new UpdateInventory,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:210
#, no-wrap
msgid "<a name=\"job-batches\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:210
#, no-wrap
msgid "Job Batches"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:213
msgid ""
"The `Bus` facade's `assertBatched` method may be used to assert that a "
"[batch of jobs](/docs/{{version}}/queues#job-batches) was dispatched. The "
"closure given to the `assertBatched` method receives an instance of "
"`Illuminate\\Bus\\PendingBatch`, which may be used to inspect the jobs "
"within the batch:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:216
#, no-wrap
msgid ""
"    use Illuminate\\Bus\\PendingBatch;\n"
"    use Illuminate\\Support\\Facades\\Bus;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:221
#, no-wrap
msgid ""
"    Bus::assertBatched(function (PendingBatch $batch) {\n"
"        return $batch->name == 'import-csv' &&\n"
"               $batch->jobs->count() === 10;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:223
#, no-wrap
msgid "<a name=\"event-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:223
#, no-wrap
msgid "Event Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:226
msgid ""
"When testing code that dispatches events, you may wish to instruct Laravel "
"to not actually execute the event's listeners. Using the `Event` facade's "
"`fake` method, you may prevent listeners from executing, execute the code "
"under test, and then assert which events were dispatched by your application "
"using the `assertDispatched`, `assertNotDispatched`, and "
"`assertNothingDispatched` methods:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:237
#, no-wrap
msgid ""
"    use App\\Events\\OrderFailedToShip;\n"
"    use App\\Events\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:246
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * Test order shipping.\n"
"         */\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Event::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:251
#, no-wrap
msgid ""
"            // Assert that an event was dispatched...\n"
"            Event::assertDispatched(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:254
#, no-wrap
msgid ""
"            // Assert an event was dispatched twice...\n"
"            Event::assertDispatched(OrderShipped::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:257
#, no-wrap
msgid ""
"            // Assert an event was not dispatched...\n"
"            Event::assertNotDispatched(OrderFailedToShip::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:262
#, no-wrap
msgid ""
"            // Assert that no events were dispatched...\n"
"            Event::assertNothingDispatched();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:264
msgid ""
"You may pass a closure to the `assertDispatched` or `assertNotDispatched` "
"methods in order to assert that an event was dispatched that passes a given "
"\"truth test\". If at least one event was dispatched that passes the given "
"truth test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:268
#, no-wrap
msgid ""
"    Event::assertDispatched(function (OrderShipped $event) use ($order) {\n"
"        return $event->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:270
msgid ""
"If you would simply like to assert that an event listener is listening to a "
"given event, you may use the `assertListening` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:275
#, no-wrap
msgid ""
"    Event::assertListening(\n"
"        OrderShipped::class,\n"
"        [SendShipmentNotification::class, 'handle']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:277
#, no-wrap
msgid ""
"> {note} After calling `Event::fake()`, no event listeners will be "
"executed. So, if your tests use model factories that rely on events, such as "
"creating a UUID during a model's `creating` event, you should call "
"`Event::fake()` **after** using your factories.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:279
#, no-wrap
msgid "<a name=\"faking-a-subset-of-events\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mocking.md:279
#, no-wrap
msgid "Faking A Subset Of Events"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:282
msgid ""
"If you only want to fake event listeners for a specific set of events, you "
"may pass them to the `fake` or `fakeFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:291
#, no-wrap
msgid ""
"    /**\n"
"     * Test order process.\n"
"     */\n"
"    public function test_orders_can_be_processed()\n"
"    {\n"
"        Event::fake([\n"
"            OrderCreated::class,\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:293
#, no-wrap
msgid "        $order = Order::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:295
#, no-wrap
msgid "        Event::assertDispatched(OrderCreated::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:299
#, no-wrap
msgid ""
"        // Other events are dispatched as normal...\n"
"        $order->update([...]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:301
#, no-wrap
msgid "<a name=\"scoped-event-fakes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mocking.md:301
#, no-wrap
msgid "Scoped Event Fakes"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:304
msgid ""
"If you only want to fake event listeners for a portion of your test, you may "
"use the `fakeFor` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:315
#, no-wrap
msgid ""
"    use App\\Events\\OrderCreated;\n"
"    use App\\Models\\Order;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Support\\Facades\\Event;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:325
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * Test order process.\n"
"         */\n"
"        public function test_orders_can_be_processed()\n"
"        {\n"
"            $order = Event::fakeFor(function () {\n"
"                $order = Order::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:327
#, no-wrap
msgid "                Event::assertDispatched(OrderCreated::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:330
#, no-wrap
msgid ""
"                return $order;\n"
"            });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:335
#, no-wrap
msgid ""
"            // Events are dispatched as normal and observers will run ...\n"
"            $order->update([...]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:337
#, no-wrap
msgid "<a name=\"http-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:337
#, no-wrap
msgid "HTTP Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:340
msgid ""
"The `Http` facade's `fake` method allows you to instruct the HTTP client to "
"return stubbed / dummy responses when requests are made. For more "
"information on faking outgoing HTTP requests, please consult the [HTTP "
"Client testing documentation](/docs/{{version}}/http-client#testing)."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:342
#, no-wrap
msgid "<a name=\"mail-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:342
#, no-wrap
msgid "Mail Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:345
msgid ""
"You may use the `Mail` facade's `fake` method to prevent mail from being "
"sent. Typically, sending mail is unrelated to the code you are actually "
"testing. Most likely, it is sufficient to simply assert that Laravel was "
"instructed to send a given mailable."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:347
msgid ""
"After calling the `Mail` facade's `fake` method, you may then assert that "
"[mailables](/docs/{{version}}/mail) were instructed to be sent to users and "
"even inspect the data the mailables received:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:357
#, no-wrap
msgid ""
"    use App\\Mail\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Mail;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:363
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Mail::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:368
#, no-wrap
msgid ""
"            // Assert that no mailables were sent...\n"
"            Mail::assertNothingSent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:371
#, no-wrap
msgid ""
"            // Assert that a mailable was sent...\n"
"            Mail::assertSent(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:374
#, no-wrap
msgid ""
"            // Assert a mailable was sent twice...\n"
"            Mail::assertSent(OrderShipped::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:379
#, no-wrap
msgid ""
"            // Assert a mailable was not sent...\n"
"            Mail::assertNotSent(AnotherMailable::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:381
msgid ""
"If you are queueing mailables for delivery in the background, you should use "
"the `assertQueued` method instead of `assertSent`:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:383
#, no-wrap
msgid "    Mail::assertQueued(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:385
#, no-wrap
msgid "    Mail::assertNotQueued(OrderShipped::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:387
#, no-wrap
msgid "    Mail::assertNothingQueued();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:389
msgid ""
"You may pass a closure to the `assertSent` or `assertNotSent` methods in "
"order to assert that a mailable was sent that passes a given \"truth "
"test\". If at least one mailable was sent that passes the given truth test "
"then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:393
#, no-wrap
msgid ""
"    Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"        return $mail->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:395
msgid ""
"When calling the `Mail` facade's assertion methods, the mailable instance "
"accepted by the provided closure exposes helpful methods for examining the "
"recipients of the mailable:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:401
#, no-wrap
msgid ""
"    Mail::assertSent(OrderShipped::class, function ($mail) use ($user) {\n"
"        return $mail->hasTo($user->email) &&\n"
"               $mail->hasCc('...') &&\n"
"               $mail->hasBcc('...');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:403
#, no-wrap
msgid "<a name=\"notification-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:403
#, no-wrap
msgid "Notification Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:406
msgid ""
"You may use the `Notification` facade's `fake` method to prevent "
"notifications from being sent. Typically, sending notifications is unrelated "
"to the code you are actually testing. Most likely, it is sufficient to "
"simply assert that Laravel was instructed to send a given notification."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:408
msgid ""
"After calling the `Notification` facade's `fake` method, you may then assert "
"that [notifications](/docs/{{version}}/notifications) were instructed to be "
"sent to users and even inspect the data the notifications received:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:418
#, no-wrap
msgid ""
"    use App\\Notifications\\OrderShipped;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Notification;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:424
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Notification::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:429
#, no-wrap
msgid ""
"            // Assert that no notifications were sent...\n"
"            Notification::assertNothingSent();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:434
#, no-wrap
msgid ""
"            // Assert a notification was sent to the given users...\n"
"            Notification::assertSentTo(\n"
"                [$user], OrderShipped::class\n"
"            );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:441
#, no-wrap
msgid ""
"            // Assert a notification was not sent...\n"
"            Notification::assertNotSentTo(\n"
"                [$user], AnotherNotification::class\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:443
msgid ""
"You may pass a closure to the `assertSentTo` or `assertNotSentTo` methods in "
"order to assert that a notification was sent that passes a given \"truth "
"test\". If at least one notification was sent that passes the given truth "
"test then the assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:450
#, no-wrap
msgid ""
"    Notification::assertSentTo(\n"
"        $user,\n"
"        function (OrderShipped $notification, $channels) use ($order) {\n"
"            return $notification->order->id === $order->id;\n"
"        }\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:452
#, no-wrap
msgid "<a name=\"on-demand-notifications\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mocking.md:452
#, no-wrap
msgid "On-Demand Notifications"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:455
msgid ""
"If the code you are testing sends [on-demand "
"notifications](/docs/{{version}}/notifications#on-demand-notifications), you "
"will need to assert that the notification was sent to an "
"`Illuminate\\Notifications\\AnonymousNotifiable` instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:457
#, no-wrap
msgid "    use Illuminate\\Notifications\\AnonymousNotifiable;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:461
#, no-wrap
msgid ""
"    Notification::assertSentTo(\n"
"        new AnonymousNotifiable, OrderShipped::class\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:463
msgid ""
"By passing a closure as the third argument to the notification assertion "
"methods, you may determine if an on-demand notification was sent to the "
"correct \"route\" address:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:471
#, no-wrap
msgid ""
"    Notification::assertSentTo(\n"
"        new AnonymousNotifiable,\n"
"        OrderShipped::class,\n"
"        function ($notification, $channels, $notifiable) use ($user) {\n"
"            return $notifiable->routes['mail'] === $user->email;\n"
"        }\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:473
#, no-wrap
msgid "<a name=\"queue-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:473
#, no-wrap
msgid "Queue Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:476
msgid ""
"You may use the `Queue` facade's `fake` method to prevent queued jobs from "
"being pushed to the queue. Most likely, it is sufficient to simply assert "
"that Laravel was instructed to push a given job to the queue since the "
"queued jobs themselves may be tested in another test class."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:478
msgid ""
"After calling the `Queue` facade's `fake` method, you may then assert that "
"the application attempted to push jobs to the queue:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:490
#, no-wrap
msgid ""
"    use App\\Jobs\\AnotherJob;\n"
"    use App\\Jobs\\FinalJob;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Support\\Facades\\Queue;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:496
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_orders_can_be_shipped()\n"
"        {\n"
"            Queue::fake();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:501
#, no-wrap
msgid ""
"            // Assert that no jobs were pushed...\n"
"            Queue::assertNothingPushed();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:504
#, no-wrap
msgid ""
"            // Assert a job was pushed to a given queue...\n"
"            Queue::assertPushedOn('queue-name', ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:507
#, no-wrap
msgid ""
"            // Assert a job was pushed twice...\n"
"            Queue::assertPushed(ShipOrder::class, 2);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:512
#, no-wrap
msgid ""
"            // Assert a job was not pushed...\n"
"            Queue::assertNotPushed(AnotherJob::class);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:514
msgid ""
"You may pass a closure to the `assertPushed` or `assertNotPushed` methods in "
"order to assert that a job was pushed that passes a given \"truth test\". If "
"at least one job was pushed that passes the given truth test then the "
"assertion will be successful:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:518
#, no-wrap
msgid ""
"    Queue::assertPushed(function (ShipOrder $job) use ($order) {\n"
"        return $job->order->id === $order->id;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:520
#, no-wrap
msgid "<a name=\"job-chains\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:523
msgid ""
"The `Queue` facade's `assertPushedWithChain` and `assertPushedWithoutChain` "
"methods may be used to inspect the job chain of a pushed job. The "
"`assertPushedWithChain` method accepts the primary job as its first argument "
"and an array of chained jobs as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:528
#, no-wrap
msgid ""
"    use App\\Jobs\\RecordShipment;\n"
"    use App\\Jobs\\ShipOrder;\n"
"    use App\\Jobs\\UpdateInventory;\n"
"    use Illuminate\\Support\\Facades\\Queue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:533
#, no-wrap
msgid ""
"    Queue::assertPushedWithChain(ShipOrder::class, [\n"
"        RecordShipment::class,\n"
"        UpdateInventory::class\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:540
#, no-wrap
msgid ""
"    Queue::assertPushedWithChain(ShipOrder::class, [\n"
"        new RecordShipment,\n"
"        new UpdateInventory,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:542
msgid ""
"You may use the `assertPushedWithoutChain` method to assert that a job was "
"pushed without a chain of jobs:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:544
#, no-wrap
msgid "    Queue::assertPushedWithoutChain(ShipOrder::class);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:546
#, no-wrap
msgid "<a name=\"storage-fake\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:546
#, no-wrap
msgid "Storage Fake"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:549
msgid ""
"The `Storage` facade's `fake` method allows you to easily generate a fake "
"disk that, combined with the file generation utilities of the "
"`Illuminate\\Http\\UploadedFile` class, greatly simplifies the testing of "
"file uploads. For example:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:559
#, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Http\\UploadedFile;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:565
#, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_albums_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('photos');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:570
#, no-wrap
msgid ""
"            $response = $this->json('POST', '/photos', [\n"
"                UploadedFile::fake()->image('photo1.jpg'),\n"
"                UploadedFile::fake()->image('photo2.jpg')\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:574
#, no-wrap
msgid ""
"            // Assert one or more files were stored...\n"
"            Storage::disk('photos')->assertExists('photo1.jpg');\n"
"            Storage::disk('photos')->assertExists(['photo1.jpg', "
"'photo2.jpg']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:580
#, no-wrap
msgid ""
"            // Assert one or more files were not stored...\n"
"            Storage::disk('photos')->assertMissing('missing.jpg');\n"
"            Storage::disk('photos')->assertMissing(['missing.jpg', "
"'non-existing.jpg']);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:582
msgid ""
"For more information on testing file uploads, you may consult the [HTTP "
"testing documentation's information on file "
"uploads](/docs/{{version}}/http-tests#testing-file-uploads)."
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:584
#, no-wrap
msgid ""
"> {tip} By default, the `fake` method will delete all files in its temporary "
"directory. If you would like to keep these files, you may use the "
"\"persistentFake\" method instead.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:586
#, no-wrap
msgid "<a name=\"interacting-with-time\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mocking.md:586
#, no-wrap
msgid "Interacting With Time"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:589
msgid ""
"When testing, you may occasionally need to modify the time returned by "
"helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Thankfully, "
"Laravel's base feature test class includes helpers that allow you to "
"manipulate the current time:"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:600
#, no-wrap
msgid ""
"    public function testTimeCanBeManipulated()\n"
"    {\n"
"        // Travel into the future...\n"
"        $this->travel(5)->milliseconds();\n"
"        $this->travel(5)->seconds();\n"
"        $this->travel(5)->minutes();\n"
"        $this->travel(5)->hours();\n"
"        $this->travel(5)->days();\n"
"        $this->travel(5)->weeks();\n"
"        $this->travel(5)->years();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:603
#, no-wrap
msgid ""
"        // Travel into the past...\n"
"        $this->travel(-5)->hours();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:606
#, no-wrap
msgid ""
"        // Travel to an explicit time...\n"
"        $this->travelTo(now()->subHours(6));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mocking.md:609
#, no-wrap
msgid ""
"        // Return back to the present time...\n"
"        $this->travelBack();\n"
"    }\n"
msgstr ""
