msgid ""
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "The `web` Middleware Group"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Cookie\\Middleware\\EncryptCookies`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Session\\Middleware\\StartSession`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\View\\Middleware\\ShareErrorsFromSession`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Routing\\Middleware\\SubstituteBindings`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "The `api` Middleware Group"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "Alias"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`auth`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\Authenticate`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`auth.basic`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`auth.session`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Session\\Middleware\\AuthenticateSession`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`cache.headers`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Http\\Middleware\\SetCacheHeaders`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`can`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\Authorize`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`guest`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\RedirectIfAuthenticated`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`password.confirm`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\RequirePassword`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`precognitive`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`signed`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Routing\\Middleware\\ValidateSignature`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`subscribed`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`\\Spark\\Http\\Middleware\\VerifyBillableIsSubscribed`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`throttle`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Routing\\Middleware\\ThrottleRequests` or `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`verified`"
msgstr ""

#: ./docs/11.x/middleware.md
#: ./docs/master/middleware.md
msgid "`Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified`"
msgstr ""

#: ./docs/8.x/middleware.md:1
#: ./docs/9.x/middleware.md:1
#: ./docs/10.x/middleware.md:1
#: ./docs/11.x/middleware.md:1
#: ./docs/master/middleware.md:1
msgid "Middleware"
msgstr ""

#: ./docs/8.x/middleware.md:3
#: ./docs/9.x/middleware.md:3
#: ./docs/10.x/middleware.md:3
#: ./docs/11.x/middleware.md:3
#: ./docs/master/middleware.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/middleware.md:4
#: ./docs/9.x/middleware.md:4
#: ./docs/10.x/middleware.md:4
#: ./docs/11.x/middleware.md:4
#: ./docs/master/middleware.md:4
msgid "[Defining Middleware](#defining-middleware)"
msgstr ""

#: ./docs/8.x/middleware.md:5
#: ./docs/9.x/middleware.md:5
#: ./docs/10.x/middleware.md:5
#: ./docs/11.x/middleware.md:5
#: ./docs/master/middleware.md:5
msgid "[Registering Middleware](#registering-middleware)"
msgstr ""

#: ./docs/8.x/middleware.md:6
#: ./docs/9.x/middleware.md:6
#: ./docs/10.x/middleware.md:6
#: ./docs/11.x/middleware.md:6
#: ./docs/master/middleware.md:6
msgid "[Global Middleware](#global-middleware)"
msgstr ""

#: ./docs/10.x/middleware.md:7
#: ./docs/11.x/middleware.md:7
#: ./docs/master/middleware.md:7
msgid "[Assigning Middleware to Routes](#assigning-middleware-to-routes)"
msgstr ""

#: ./docs/8.x/middleware.md:7
#: ./docs/9.x/middleware.md:7
msgid "[Assigning Middleware To Routes](#assigning-middleware-to-routes)"
msgstr ""

#: ./docs/8.x/middleware.md:8
#: ./docs/9.x/middleware.md:8
#: ./docs/10.x/middleware.md:8
#: ./docs/11.x/middleware.md:8
#: ./docs/master/middleware.md:8
msgid "[Middleware Groups](#middleware-groups)"
msgstr ""

#: ./docs/11.x/middleware.md:9
#: ./docs/master/middleware.md:9
msgid "[Middleware Aliases](#middleware-aliases)"
msgstr ""

#: ./docs/8.x/middleware.md:9
#: ./docs/9.x/middleware.md:9
#: ./docs/10.x/middleware.md:9
#: ./docs/11.x/middleware.md:10
#: ./docs/master/middleware.md:10
msgid "[Sorting Middleware](#sorting-middleware)"
msgstr ""

#: ./docs/8.x/middleware.md:10
#: ./docs/9.x/middleware.md:10
#: ./docs/10.x/middleware.md:10
#: ./docs/11.x/middleware.md:11
#: ./docs/master/middleware.md:11
msgid "[Middleware Parameters](#middleware-parameters)"
msgstr ""

#: ./docs/8.x/middleware.md:11
#: ./docs/9.x/middleware.md:11
#: ./docs/10.x/middleware.md:11
#: ./docs/11.x/middleware.md:12
#: ./docs/master/middleware.md:12
msgid "[Terminable Middleware](#terminable-middleware)"
msgstr ""

#: ./docs/8.x/middleware.md:13
#: ./docs/9.x/middleware.md:13
#: ./docs/10.x/middleware.md:13
#: ./docs/11.x/middleware.md:14
#: ./docs/master/middleware.md:14
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:14
#: ./docs/9.x/middleware.md:14
#: ./docs/10.x/middleware.md:14
#: ./docs/11.x/middleware.md:15
#: ./docs/master/middleware.md:15
msgid "Introduction"
msgstr ""

#: ./docs/8.x/middleware.md:16
#: ./docs/9.x/middleware.md:16
#: ./docs/10.x/middleware.md:16
#: ./docs/11.x/middleware.md:17
#: ./docs/master/middleware.md:17
msgid "Middleware provide a convenient mechanism for inspecting and filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to your application's login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application."
msgstr ""

#: ./docs/8.x/middleware.md:18
#: ./docs/9.x/middleware.md:18
#: ./docs/10.x/middleware.md:18
msgid "Additional middleware can be written to perform a variety of tasks besides authentication. For example, a logging middleware might log all incoming requests to your application. There are several middleware included in the Laravel framework, including middleware for authentication and CSRF protection. All of these middleware are located in the `app/Http/Middleware` directory."
msgstr ""

#: ./docs/11.x/middleware.md:19
#: ./docs/master/middleware.md:19
msgid "Additional middleware can be written to perform a variety of tasks besides authentication. For example, a logging middleware might log all incoming requests to your application. A variety of middleware are included in Laravel, including middleware for authentication and CSRF protection; however, all user-defined middleware are typically located in your application's `app/Http/Middleware` directory."
msgstr ""

#: ./docs/8.x/middleware.md:20
#: ./docs/9.x/middleware.md:20
#: ./docs/10.x/middleware.md:20
#: ./docs/11.x/middleware.md:21
#: ./docs/master/middleware.md:21
#~ msgctxt "P"
#~ msgid "<a name=\"defining-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:21
#: ./docs/9.x/middleware.md:21
#: ./docs/10.x/middleware.md:21
#: ./docs/11.x/middleware.md:22
#: ./docs/master/middleware.md:22
msgid "Defining Middleware"
msgstr ""

#: ./docs/8.x/middleware.md:23
#: ./docs/9.x/middleware.md:23
#: ./docs/10.x/middleware.md:23
#: ./docs/11.x/middleware.md:24
#: ./docs/master/middleware.md:24
msgid "To create a new middleware, use the `make:middleware` Artisan command:"
msgstr ""

#: ./docs/8.x/middleware.md:25
#: ./docs/9.x/middleware.md:25
#: ./docs/10.x/middleware.md:25
#: ./docs/11.x/middleware.md:26
#: ./docs/master/middleware.md:26
msgid "php artisan make:middleware EnsureTokenIsValid"
msgstr ""

#: ./docs/8.x/middleware.md:27
#: ./docs/9.x/middleware.md:29
#: ./docs/10.x/middleware.md:29
#: ./docs/master/middleware.md:30
msgid "This command will place a new `EnsureTokenIsValid` class within your `app/Http/Middleware` directory. In this middleware, we will only allow access to the route if the supplied `token` input matches a specified value. Otherwise, we will redirect the users back to the `home` URI:"
msgstr ""

#: ./docs/8.x/middleware.md:29
#: ./docs/9.x/middleware.md:31
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class EnsureTokenIsValid\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->input('token') !== 'my-secret-token') {\n"
"            return redirect('home');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/middleware.md:30
msgid "This command will place a new `EnsureTokenIsValid` class within your `app/Http/Middleware` directory. In this middleware, we will only allow access to the route if the supplied `token` input matches a specified value. Otherwise, we will redirect the users back to the `/home` URI:"
msgstr ""

#: ./docs/10.x/middleware.md:31
#: ./docs/master/middleware.md:32
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class EnsureTokenIsValid\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->input('token') !== 'my-secret-token') {\n"
"            return redirect('home');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/middleware.md:32
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class EnsureTokenIsValid\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->input('token') !== 'my-secret-token') {\n"
"            return redirect('/home');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/middleware.md:54
#: ./docs/9.x/middleware.md:56
#: ./docs/10.x/middleware.md:56
#: ./docs/11.x/middleware.md:57
#: ./docs/master/middleware.md:57
msgid "As you can see, if the given `token` does not match our secret token, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to \"pass\"), you should call the `$next` callback with the `$request`."
msgstr ""

#: ./docs/8.x/middleware.md:56
#: ./docs/9.x/middleware.md:58
#: ./docs/10.x/middleware.md:58
#: ./docs/11.x/middleware.md:59
#: ./docs/master/middleware.md:59
msgid "It's best to envision middleware as a series of \"layers\" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely."
msgstr ""

#: ./docs/8.x/middleware.md:58
#: ./docs/9.x/middleware.md:61
#: ./docs/10.x/middleware.md:61
#: ./docs/11.x/middleware.md:62
#: ./docs/master/middleware.md:62
msgid "All middleware are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a middleware's constructor."
msgstr ""

#: ./docs/8.x/middleware.md:60
#: ./docs/9.x/middleware.md:63
#: ./docs/10.x/middleware.md:63
#: ./docs/11.x/middleware.md:64
#~ msgctxt "P"
#~ msgid "<a name=\"middleware-and-responses\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:61
#: ./docs/9.x/middleware.md:64
msgid "Middleware & Responses"
msgstr ""

#: ./docs/8.x/middleware.md:63
#: ./docs/9.x/middleware.md:66
#: ./docs/10.x/middleware.md:66
#: ./docs/11.x/middleware.md:67
#: ./docs/master/middleware.md:68
msgid "Of course, a middleware can perform tasks before or after passing the request deeper into the application. For example, the following middleware would perform some task **before** the request is handled by the application:"
msgstr ""

#: ./docs/10.x/middleware.md:64
#: ./docs/11.x/middleware.md:65
#: ./docs/master/middleware.md:66
msgid "Middleware and Responses"
msgstr ""

#: ./docs/master/middleware.md:64
#~ msgctxt "P"
#~ msgid ""
"<a name=\"before-after-middleware\"></a>\n"
"<a name=\"middleware-and-responses\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:65
#: ./docs/9.x/middleware.md:68
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class BeforeMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        // Perform action\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/middleware.md:68
#: ./docs/11.x/middleware.md:69
#: ./docs/master/middleware.md:70
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class BeforeMiddleware\n"
"{\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        // Perform action\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/middleware.md:81
#: ./docs/9.x/middleware.md:84
#: ./docs/10.x/middleware.md:86
#: ./docs/11.x/middleware.md:87
#: ./docs/master/middleware.md:88
msgid "However, this middleware would perform its task **after** the request is handled by the application:"
msgstr ""

#: ./docs/8.x/middleware.md:83
#: ./docs/9.x/middleware.md:86
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class AfterMiddleware\n"
"{\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        $response = $next($request);\n"
"\n"
"        // Perform action\n"
"\n"
"        return $response;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/middleware.md:88
#: ./docs/11.x/middleware.md:89
#: ./docs/master/middleware.md:90
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class AfterMiddleware\n"
"{\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        $response = $next($request);\n"
"\n"
"        // Perform action\n"
"\n"
"        return $response;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/middleware.md:101
#: ./docs/9.x/middleware.md:104
#: ./docs/10.x/middleware.md:108
#: ./docs/11.x/middleware.md:109
#: ./docs/master/middleware.md:110
#~ msgctxt "P"
#~ msgid "<a name=\"registering-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:102
#: ./docs/9.x/middleware.md:105
#: ./docs/10.x/middleware.md:109
#: ./docs/11.x/middleware.md:110
#: ./docs/master/middleware.md:111
msgid "Registering Middleware"
msgstr ""

#: ./docs/8.x/middleware.md:104
#: ./docs/9.x/middleware.md:107
#: ./docs/10.x/middleware.md:111
#: ./docs/11.x/middleware.md:112
#: ./docs/master/middleware.md:113
#~ msgctxt "P"
#~ msgid "<a name=\"global-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:105
#: ./docs/9.x/middleware.md:108
#: ./docs/10.x/middleware.md:112
#: ./docs/11.x/middleware.md:113
#: ./docs/master/middleware.md:114
msgid "Global Middleware"
msgstr ""

#: ./docs/8.x/middleware.md:107
#: ./docs/9.x/middleware.md:110
#: ./docs/10.x/middleware.md:114
msgid "If you want a middleware to run during every HTTP request to your application, list the middleware class in the `$middleware` property of your `app/Http/Kernel.php` class."
msgstr ""

#: ./docs/8.x/middleware.md:109
#: ./docs/9.x/middleware.md:112
#: ./docs/10.x/middleware.md:116
#: ./docs/11.x/middleware.md:143
#: ./docs/master/middleware.md:144
#~ msgctxt "P"
#~ msgid "<a name=\"assigning-middleware-to-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:110
#: ./docs/9.x/middleware.md:113
msgid "Assigning Middleware To Routes"
msgstr ""

#: ./docs/8.x/middleware.md:112
#: ./docs/9.x/middleware.md:115
msgid "If you would like to assign middleware to specific routes, you should first assign the middleware a key in your application's `app/Http/Kernel.php` file. By default, the `$routeMiddleware` property of this class contains entries for the middleware included with Laravel. You may add your own middleware to this list and assign it a key of your choosing:"
msgstr ""

#: ./docs/8.x/middleware.md:114
#: ./docs/9.x/middleware.md:117
msgid ""
"// Within App\\Http\\Kernel class...\n"
"\n"
"protected $routeMiddleware = [\n"
"    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"    'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"    'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"];"
msgstr ""

#: ./docs/11.x/middleware.md:115
#: ./docs/master/middleware.md:116
msgid "If you want a middleware to run during every HTTP request to your application, you may append it to the global middleware stack in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/10.x/middleware.md:117
#: ./docs/11.x/middleware.md:144
#: ./docs/master/middleware.md:145
msgid "Assigning Middleware to Routes"
msgstr ""

#: ./docs/11.x/middleware.md:117
#: ./docs/master/middleware.md:118
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"     $middleware->append(EnsureTokenIsValid::class);\n"
"})"
msgstr ""

#: ./docs/10.x/middleware.md:119
#: ./docs/11.x/middleware.md:146
#: ./docs/master/middleware.md:147
msgid "If you would like to assign middleware to specific routes, you may invoke the `middleware` method when defining the route:"
msgstr ""

#: ./docs/10.x/middleware.md:121
msgid ""
"use App\\Http\\Middleware\\Authenticate;\n"
"\n"
"Route::get('/profile', function () {\n"
"    // ...\n"
"})->middleware(Authenticate::class);"
msgstr ""

#: ./docs/11.x/middleware.md:123
#: ./docs/master/middleware.md:124
msgid "The `$middleware` object provided to the `withMiddleware` closure is an instance of `Illuminate\\Foundation\\Configuration\\Middleware` and is responsible for managing the middleware assigned to your application's routes. The `append` method adds the middleware to the end of the list of global middleware. If you would like to add a middleware to the beginning of the list, you should use the `prepend` method."
msgstr ""

#: ./docs/11.x/middleware.md:125
#: ./docs/master/middleware.md:126
#~ msgctxt "P"
#~ msgid "<a name=\"manually-managing-laravels-default-global-middleware\"></a>"
#~ msgstr ""

#: ./docs/11.x/middleware.md:126
#: ./docs/master/middleware.md:127
msgid "Manually Managing Laravel's Default Global Middleware"
msgstr ""

#: ./docs/11.x/middleware.md:128
#: ./docs/master/middleware.md:129
msgid "If you would like to manage Laravel's global middleware stack manually, you may provide Laravel's default stack of global middleware to the `use` method. Then, you may adjust the default middleware stack as necessary:"
msgstr ""

#: ./docs/8.x/middleware.md:128
#: ./docs/9.x/middleware.md:131
msgid "Once the middleware has been defined in the HTTP kernel, you may use the `middleware` method to assign middleware to a route:"
msgstr ""

#: ./docs/10.x/middleware.md:129
#: ./docs/11.x/middleware.md:156
#: ./docs/master/middleware.md:157
msgid ""
"Route::get('/', function () {\n"
"    // ...\n"
"})->middleware([First::class, Second::class]);"
msgstr ""

#: ./docs/11.x/middleware.md:130
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->use([\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\InvokeDeferredCallbacks::class,\n"
"        // \\Illuminate\\Http\\Middleware\\TrustHosts::class,\n"
"        \\Illuminate\\Http\\Middleware\\TrustProxies::class,\n"
"        \\Illuminate\\Http\\Middleware\\HandleCors::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n"
"        \\Illuminate\\Http\\Middleware\\ValidatePostSize::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/middleware.md:130
#: ./docs/9.x/middleware.md:133
msgid ""
"Route::get('/profile', function () {\n"
"    //\n"
"})->middleware('auth');"
msgstr ""

#: ./docs/master/middleware.md:131
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->use([\n"
"        // \\Illuminate\\Http\\Middleware\\TrustHosts::class,\n"
"        \\Illuminate\\Http\\Middleware\\TrustProxies::class,\n"
"        \\Illuminate\\Http\\Middleware\\HandleCors::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n"
"        \\Illuminate\\Http\\Middleware\\ValidatePostSize::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/10.x/middleware.md:133
msgid "For convenience, you may assign aliases to middleware in your application's `app/Http/Kernel.php` file. By default, the `$middlewareAliases` property of this class contains entries for the middleware included with Laravel. You may add your own middleware to this list and assign it an alias of your choosing:"
msgstr ""

#: ./docs/8.x/middleware.md:134
#: ./docs/9.x/middleware.md:137
#: ./docs/10.x/middleware.md:127
#: ./docs/11.x/middleware.md:154
#: ./docs/master/middleware.md:155
msgid "You may assign multiple middleware to the route by passing an array of middleware names to the `middleware` method:"
msgstr ""

#: ./docs/10.x/middleware.md:135
msgid ""
"// Within App\\Http\\Kernel class...\n"
"\n"
"protected $middlewareAliases = [\n"
"    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n"
"    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n"
"    'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n"
"    'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n"
"];"
msgstr ""

#: ./docs/8.x/middleware.md:136
#: ./docs/9.x/middleware.md:139
msgid ""
"Route::get('/', function () {\n"
"    //\n"
"})->middleware(['first', 'second']);"
msgstr ""

#: ./docs/8.x/middleware.md:140
#: ./docs/9.x/middleware.md:143
msgid "When assigning middleware, you may also pass the fully qualified class name:"
msgstr ""

#: ./docs/8.x/middleware.md:142
#: ./docs/9.x/middleware.md:145
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::get('/profile', function () {\n"
"    //\n"
"})->middleware(EnsureTokenIsValid::class);"
msgstr ""

#: ./docs/11.x/middleware.md:148
#: ./docs/master/middleware.md:149
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::get('/profile', function () {\n"
"    // ...\n"
"})->middleware(EnsureTokenIsValid::class);"
msgstr ""

#: ./docs/8.x/middleware.md:148
#: ./docs/9.x/middleware.md:151
#: ./docs/10.x/middleware.md:155
#: ./docs/11.x/middleware.md:160
#: ./docs/master/middleware.md:161
#~ msgctxt "P"
#~ msgid "<a name=\"excluding-middleware\"></a>"
#~ msgstr ""

#: ./docs/10.x/middleware.md:149
msgid "Once the middleware alias has been defined in the HTTP kernel, you may use the alias when assigning middleware to routes:"
msgstr ""

#: ./docs/8.x/middleware.md:149
#: ./docs/9.x/middleware.md:152
#: ./docs/10.x/middleware.md:156
#: ./docs/11.x/middleware.md:161
#: ./docs/master/middleware.md:162
msgid "Excluding Middleware"
msgstr ""

#: ./docs/10.x/middleware.md:151
msgid ""
"Route::get('/profile', function () {\n"
"    // ...\n"
"})->middleware('auth');"
msgstr ""

#: ./docs/8.x/middleware.md:151
#: ./docs/9.x/middleware.md:154
#: ./docs/10.x/middleware.md:158
#: ./docs/11.x/middleware.md:163
#: ./docs/master/middleware.md:164
msgid "When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the `withoutMiddleware` method:"
msgstr ""

#: ./docs/8.x/middleware.md:153
#: ./docs/9.x/middleware.md:156
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/', function () {\n"
"        //\n"
"    });\n"
"\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"});"
msgstr ""

#: ./docs/10.x/middleware.md:160
#: ./docs/11.x/middleware.md:165
#: ./docs/master/middleware.md:166
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::middleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/', function () {\n"
"        // ...\n"
"    });\n"
"\n"
"    Route::get('/profile', function () {\n"
"        // ...\n"
"    })->withoutMiddleware([EnsureTokenIsValid::class]);\n"
"});"
msgstr ""

#: ./docs/8.x/middleware.md:165
#: ./docs/9.x/middleware.md:168
#: ./docs/10.x/middleware.md:172
#: ./docs/11.x/middleware.md:177
#: ./docs/master/middleware.md:178
msgid "You may also exclude a given set of middleware from an entire [group](/docs/{{version}}/routing#route-groups) of route definitions:"
msgstr ""

#: ./docs/8.x/middleware.md:167
#: ./docs/9.x/middleware.md:170
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/profile', function () {\n"
"        //\n"
"    });\n"
"});"
msgstr ""

#: ./docs/10.x/middleware.md:174
#: ./docs/11.x/middleware.md:179
#: ./docs/master/middleware.md:180
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"\n"
"Route::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n"
"    Route::get('/profile', function () {\n"
"        // ...\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/middleware.md:175
#: ./docs/9.x/middleware.md:178
#: ./docs/10.x/middleware.md:182
#: ./docs/11.x/middleware.md:187
#: ./docs/master/middleware.md:188
msgid "The `withoutMiddleware` method can only remove route middleware and does not apply to [global middleware](#global-middleware)."
msgstr ""

#: ./docs/8.x/middleware.md:177
#: ./docs/9.x/middleware.md:180
#: ./docs/10.x/middleware.md:184
#: ./docs/11.x/middleware.md:189
#: ./docs/master/middleware.md:190
#~ msgctxt "P"
#~ msgid "<a name=\"middleware-groups\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:178
#: ./docs/9.x/middleware.md:181
#: ./docs/10.x/middleware.md:185
#: ./docs/11.x/middleware.md:190
#: ./docs/master/middleware.md:191
msgid "Middleware Groups"
msgstr ""

#: ./docs/8.x/middleware.md:180
#: ./docs/9.x/middleware.md:183
#: ./docs/10.x/middleware.md:187
msgid "Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the `$middlewareGroups` property of your HTTP kernel."
msgstr ""

#: ./docs/8.x/middleware.md:182
msgid "Out of the box, Laravel comes with `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr ""

#: ./docs/8.x/middleware.md:184
msgid ""
"/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/9.x/middleware.md:185
#: ./docs/10.x/middleware.md:189
msgid "Laravel includes predefined `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's `App\\Providers\\RouteServiceProvider` service provider to routes within your corresponding `web` and `api` route files:"
msgstr ""

#: ./docs/9.x/middleware.md:187
msgid ""
"/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"\n"
"    'api' => [\n"
"        'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/middleware.md:191
msgid ""
"/**\n"
" * The application's route middleware groups.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewareGroups = [\n"
"    'web' => [\n"
"        \\App\\Http\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"\n"
"    'api' => [\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class.':api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/11.x/middleware.md:192
#: ./docs/master/middleware.md:193
msgid "Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the `appendToGroup` method within your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/middleware.md:194
#: ./docs/master/middleware.md:195
msgid ""
"use App\\Http\\Middleware\\First;\n"
"use App\\Http\\Middleware\\Second;\n"
"\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->appendToGroup('group-name', [\n"
"        First::class,\n"
"        Second::class,\n"
"    ]);\n"
"\n"
"    $middleware->prependToGroup('group-name', [\n"
"        First::class,\n"
"        Second::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/middleware.md:206
#: ./docs/9.x/middleware.md:208
#: ./docs/10.x/middleware.md:212
msgid "Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware. Again, middleware groups make it more convenient to assign many middleware to a route at once:"
msgstr ""

#: ./docs/8.x/middleware.md:208
#: ./docs/9.x/middleware.md:210
msgid ""
"Route::get('/', function () {\n"
"    //\n"
"})->middleware('web');\n"
"\n"
"Route::middleware(['web'])->group(function () {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/11.x/middleware.md:209
#: ./docs/master/middleware.md:210
msgid "Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware:"
msgstr ""

#: ./docs/11.x/middleware.md:211
#: ./docs/master/middleware.md:212
msgid ""
"Route::get('/', function () {\n"
"    // ...\n"
"})->middleware('group-name');\n"
"\n"
"Route::middleware(['group-name'])->group(function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/10.x/middleware.md:214
msgid ""
"Route::get('/', function () {\n"
"    // ...\n"
"})->middleware('web');\n"
"\n"
"Route::middleware(['web'])->group(function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/middleware.md:216
#: ./docs/9.x/middleware.md:219
#: ./docs/10.x/middleware.md:223
msgid "Out of the box, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `App\\Providers\\RouteServiceProvider`."
msgstr ""

#: ./docs/8.x/middleware.md:218
#: ./docs/9.x/middleware.md:221
#: ./docs/10.x/middleware.md:225
#: ./docs/11.x/middleware.md:341
#: ./docs/master/middleware.md:330
#~ msgctxt "P"
#~ msgid "<a name=\"sorting-middleware\"></a>"
#~ msgstr ""

#: ./docs/11.x/middleware.md:219
#: ./docs/master/middleware.md:220
#~ msgctxt "P"
#~ msgid "<a name=\"laravels-default-middleware-groups\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:219
#: ./docs/9.x/middleware.md:222
#: ./docs/10.x/middleware.md:226
#: ./docs/11.x/middleware.md:342
#: ./docs/master/middleware.md:331
msgid "Sorting Middleware"
msgstr ""

#: ./docs/11.x/middleware.md:220
#: ./docs/master/middleware.md:221
msgid "Laravel's Default Middleware Groups"
msgstr ""

#: ./docs/8.x/middleware.md:221
#: ./docs/9.x/middleware.md:224
#: ./docs/10.x/middleware.md:228
msgid "Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In this case, you may specify your middleware priority using the `$middlewarePriority` property of your `app/Http/Kernel.php` file. This property may not exist in your HTTP kernel by default. If it does not exist, you may copy its default definition below:"
msgstr ""

#: ./docs/11.x/middleware.md:222
#: ./docs/master/middleware.md:223
msgid "Laravel includes predefined `web` and `api` middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, Laravel automatically applies these middleware groups to the corresponding `routes/web.php` and `routes/api.php` files:"
msgstr ""

#: ./docs/8.x/middleware.md:223
msgid ""
"/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];"
msgstr ""

#: ./docs/9.x/middleware.md:226
msgid ""
"/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Contracts\\Session\\Middleware\\AuthenticatesSessions::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];"
msgstr ""

#: ./docs/10.x/middleware.md:230
msgid ""
"/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var string[]\n"
" */\n"
"protected $middlewarePriority = [\n"
"    \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n"
"    \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"    \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"    \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"    \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"    \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"    \\Illuminate\\Contracts\\Session\\Middleware\\AuthenticatesSessions::class,\n"
"    \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"];"
msgstr ""

#: ./docs/8.x/middleware.md:242
#: ./docs/9.x/middleware.md:246
#: ./docs/10.x/middleware.md:251
#: ./docs/11.x/middleware.md:363
#: ./docs/master/middleware.md:352
#~ msgctxt "P"
#~ msgid "<a name=\"middleware-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:243
#: ./docs/9.x/middleware.md:247
#: ./docs/10.x/middleware.md:252
#: ./docs/11.x/middleware.md:364
#: ./docs/master/middleware.md:353
msgid "Middleware Parameters"
msgstr ""

#: ./docs/11.x/middleware.md:245
#: ./docs/master/middleware.md:238
msgid "If you would like to append or prepend middleware to these groups, you may use the `web` and `api` methods within your application's `bootstrap/app.php` file. The `web` and `api` methods are convenient alternatives to the `appendToGroup` method:"
msgstr ""

#: ./docs/8.x/middleware.md:245
#: ./docs/9.x/middleware.md:249
#: ./docs/10.x/middleware.md:254
#: ./docs/11.x/middleware.md:366
#: ./docs/master/middleware.md:355
msgid "Middleware can also receive additional parameters. For example, if your application needs to verify that the authenticated user has a given \"role\" before performing a given action, you could create an `EnsureUserHasRole` middleware that receives a role name as an additional argument."
msgstr ""

#: ./docs/11.x/middleware.md:247
#: ./docs/master/middleware.md:240
msgid ""
"use App\\Http\\Middleware\\EnsureTokenIsValid;\n"
"use App\\Http\\Middleware\\EnsureUserIsSubscribed;\n"
"\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->web(append: [\n"
"        EnsureUserIsSubscribed::class,\n"
"    ]);\n"
"\n"
"    $middleware->api(prepend: [\n"
"        EnsureTokenIsValid::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/middleware.md:247
#: ./docs/9.x/middleware.md:251
#: ./docs/10.x/middleware.md:256
#: ./docs/11.x/middleware.md:368
#: ./docs/master/middleware.md:357
msgid "Additional middleware parameters will be passed to the middleware after the `$next` argument:"
msgstr ""

#: ./docs/8.x/middleware.md:249
#: ./docs/9.x/middleware.md:253
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class EnsureUserHasRole\n"
"{\n"
"    /**\n"
"     * Handle the incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @param  string  $role\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next, $role)\n"
"    {\n"
"        if (! $request->user()->hasRole($role)) {\n"
"            // Redirect...\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"\n"
"}"
msgstr ""

#: ./docs/10.x/middleware.md:258
#: ./docs/11.x/middleware.md:370
#: ./docs/master/middleware.md:359
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class EnsureUserHasRole\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next, string $role): Response\n"
"    {\n"
"        if (! $request->user()->hasRole($role)) {\n"
"            // Redirect...\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"\n"
"}"
msgstr ""

#: ./docs/11.x/middleware.md:260
#: ./docs/master/middleware.md:253
msgid "You may even replace one of Laravel's default middleware group entries with a custom middleware of your own:"
msgstr ""

#: ./docs/11.x/middleware.md:262
#: ./docs/master/middleware.md:255
msgid ""
"use App\\Http\\Middleware\\StartCustomSession;\n"
"use Illuminate\\Session\\Middleware\\StartSession;\n"
"\n"
"$middleware->web(replace: [\n"
"    StartSession::class => StartCustomSession::class,\n"
"]);"
msgstr ""

#: ./docs/11.x/middleware.md:269
#: ./docs/master/middleware.md:262
msgid "Or, you may remove a middleware entirely:"
msgstr ""

#: ./docs/11.x/middleware.md:271
#: ./docs/master/middleware.md:264
msgid ""
"$middleware->web(remove: [\n"
"    StartSession::class,\n"
"]);"
msgstr ""

#: ./docs/11.x/middleware.md:275
#: ./docs/master/middleware.md:268
#~ msgctxt "P"
#~ msgid "<a name=\"manually-managing-laravels-default-middleware-groups\"></a>"
#~ msgstr ""

#: ./docs/11.x/middleware.md:276
#: ./docs/master/middleware.md:269
msgid "Manually Managing Laravel's Default Middleware Groups"
msgstr ""

#: ./docs/8.x/middleware.md:276
#: ./docs/9.x/middleware.md:280
msgid "Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a `:`. Multiple parameters should be delimited by commas:"
msgstr ""

#: ./docs/11.x/middleware.md:278
#: ./docs/master/middleware.md:271
msgid "If you would like to manually manage all of the middleware within Laravel's default `web` and `api` middleware groups, you may redefine the groups entirely. The example below will define the `web` and `api` middleware groups with their default middleware, allowing you to customize them as necessary:"
msgstr ""

#: ./docs/8.x/middleware.md:278
#: ./docs/9.x/middleware.md:282
msgid ""
"Route::put('/post/{id}', function ($id) {\n"
"    //\n"
"})->middleware('role:editor');"
msgstr ""

#: ./docs/11.x/middleware.md:280
#: ./docs/master/middleware.md:273
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->group('web', [\n"
"        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n"
"    ]);\n"
"\n"
"    $middleware->group('api', [\n"
"        // \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n"
"        // 'throttle:api',\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/middleware.md:282
#: ./docs/9.x/middleware.md:286
#: ./docs/10.x/middleware.md:296
#: ./docs/11.x/middleware.md:410
#: ./docs/master/middleware.md:397
#~ msgctxt "P"
#~ msgid "<a name=\"terminable-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/middleware.md:283
#: ./docs/9.x/middleware.md:287
#: ./docs/10.x/middleware.md:297
#: ./docs/11.x/middleware.md:411
#: ./docs/master/middleware.md:398
msgid "Terminable Middleware"
msgstr ""

#: ./docs/10.x/middleware.md:284
#: ./docs/11.x/middleware.md:396
#: ./docs/master/middleware.md:385
msgid "Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a `:`:"
msgstr ""

#: ./docs/8.x/middleware.md:285
#: ./docs/9.x/middleware.md:289
#: ./docs/10.x/middleware.md:299
#: ./docs/11.x/middleware.md:413
#: ./docs/master/middleware.md:400
msgid "Sometimes a middleware may need to do some work after the HTTP response has been sent to the browser. If you define a `terminate` method on your middleware and your web server is using FastCGI, the `terminate` method will automatically be called after the response is sent to the browser:"
msgstr ""

#: ./docs/10.x/middleware.md:286
#: ./docs/master/middleware.md:387
msgid ""
"Route::put('/post/{id}', function (string $id) {\n"
"    // ...\n"
"})->middleware('role:editor');"
msgstr ""

#: ./docs/8.x/middleware.md:287
#: ./docs/9.x/middleware.md:291
msgid ""
"<?php\n"
"\n"
"namespace Illuminate\\Session\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class TerminatingMiddleware\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        return $next($request);\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle tasks after the response has been sent to the browser.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Illuminate\\Http\\Response  $response\n"
"     * @return void\n"
"     */\n"
"    public function terminate($request, $response)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/middleware.md:290
#: ./docs/11.x/middleware.md:404
#: ./docs/master/middleware.md:391
msgid "Multiple parameters may be delimited by commas:"
msgstr ""

#: ./docs/10.x/middleware.md:292
#: ./docs/master/middleware.md:393
msgid ""
"Route::put('/post/{id}', function (string $id) {\n"
"    // ...\n"
"})->middleware('role:editor,publisher');"
msgstr ""

#: ./docs/master/middleware.md:297
msgid "You may assign aliases to middleware in your application's `bootstrap/app.php` file. Middleware aliases allows you to define a short alias for a given middleware class, which can be especially useful for middleware with long class names:"
msgstr ""

#: ./docs/11.x/middleware.md:299
#: ./docs/master/middleware.md:292
msgid "By default, the `web` and `api` middleware groups are automatically applied to your application's corresponding `routes/web.php` and `routes/api.php` files by the `bootstrap/app.php` file."
msgstr ""

#: ./docs/10.x/middleware.md:301
#: ./docs/11.x/middleware.md:415
#: ./docs/master/middleware.md:402
msgid ""
"<?php\n"
"\n"
"namespace Illuminate\\Session\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class TerminatingMiddleware\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        return $next($request);\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle tasks after the response has been sent to the browser.\n"
"     */\n"
"    public function terminate(Request $request, Response $response): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/middleware.md:301
#: ./docs/master/middleware.md:294
#~ msgctxt "P"
#~ msgid "<a name=\"middleware-aliases\"></a>"
#~ msgstr ""

#: ./docs/11.x/middleware.md:302
#: ./docs/master/middleware.md:295
msgid "Middleware Aliases"
msgstr ""

#: ./docs/11.x/middleware.md:304
msgid "You may assign aliases to middleware in your application's `bootstrap/app.php` file. Middleware aliases allow you to define a short alias for a given middleware class, which can be especially useful for middleware with long class names:"
msgstr ""

#: ./docs/11.x/middleware.md:306
#: ./docs/master/middleware.md:299
msgid ""
"use App\\Http\\Middleware\\EnsureUserIsSubscribed;\n"
"\n"
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->alias([\n"
"        'subscribed' => EnsureUserIsSubscribed::class\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/11.x/middleware.md:314
#: ./docs/master/middleware.md:307
msgid "Once the middleware alias has been defined in your application's `bootstrap/app.php` file, you may use the alias when assigning the middleware to routes:"
msgstr ""

#: ./docs/11.x/middleware.md:316
#: ./docs/master/middleware.md:309
msgid ""
"Route::get('/profile', function () {\n"
"    // ...\n"
"})->middleware('subscribed');"
msgstr ""

#: ./docs/11.x/middleware.md:320
#: ./docs/master/middleware.md:313
msgid "For convenience, some of Laravel's built-in middleware are aliased by default. For example, the `auth` middleware is an alias for the `Illuminate\\Auth\\Middleware\\Authenticate` middleware. Below is a list of the default middleware aliases:"
msgstr ""

#: ./docs/8.x/middleware.md:320
#: ./docs/9.x/middleware.md:324
#: ./docs/10.x/middleware.md:330
msgid "The `terminate` method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of routes or global middleware in the `app/Http/Kernel.php` file."
msgstr ""

#: ./docs/8.x/middleware.md:322
#: ./docs/9.x/middleware.md:326
#: ./docs/10.x/middleware.md:332
#: ./docs/11.x/middleware.md:446
#: ./docs/master/middleware.md:433
msgid "When calling the `terminate` method on your middleware, Laravel will resolve a fresh instance of the middleware from the [service container](/docs/{{version}}/container). If you would like to use the same middleware instance when the `handle` and `terminate` methods are called, register the middleware with the container using the container's `singleton` method. Typically this should be done in the `register` method of your `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/middleware.md:324
#: ./docs/9.x/middleware.md:328
msgid ""
"use App\\Http\\Middleware\\TerminatingMiddleware;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(TerminatingMiddleware::class);\n"
"}"
msgstr ""

#: ./docs/10.x/middleware.md:334
#: ./docs/11.x/middleware.md:448
#: ./docs/master/middleware.md:435
msgid ""
"use App\\Http\\Middleware\\TerminatingMiddleware;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(TerminatingMiddleware::class);\n"
"}"
msgstr ""

#: ./docs/11.x/middleware.md:344
#: ./docs/master/middleware.md:333
msgid "Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In these situations, you may specify your middleware priority using the `priority` method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/middleware.md:346
#: ./docs/master/middleware.md:335
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->priority([\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n"
"        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n"
"        \\Illuminate\\Session\\Middleware\\StartSession::class,\n"
"        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n"
"        \\Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n"
"        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n"
"        \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n"
"        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n"
"        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/11.x/middleware.md:398
msgid ""
"use App\\Http\\Middleware\\EnsureUserHasRole;\n"
"\n"
"Route::put('/post/{id}', function (string $id) {\n"
"    // ...\n"
"})->middleware(EnsureUserHasRole::class.':editor');"
msgstr ""

#: ./docs/11.x/middleware.md:406
msgid ""
"Route::put('/post/{id}', function (string $id) {\n"
"    // ...\n"
"})->middleware(EnsureUserHasRole::class.':editor,publisher');"
msgstr ""

#: ./docs/11.x/middleware.md:444
#: ./docs/master/middleware.md:431
msgid "The `terminate` method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of routes or global middleware in your application's `bootstrap/app.php` file."
msgstr ""
