msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:15\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/octane.pot\n"
"X-Crowdin-File-ID: 111\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/octane.md:1
#: ./docs/9.x/octane.md:1
#: ./docs/10.x/octane.md:1
#: ./docs/11.x/octane.md:1
#: ./docs/master/octane.md:1
msgctxt "H1"
msgid "Laravel Octane"
msgstr "Laravel Octane"

#: ./docs/8.x/octane.md:3
#: ./docs/9.x/octane.md:3
#: ./docs/10.x/octane.md:3
#: ./docs/11.x/octane.md:3
#: ./docs/master/octane.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: ./docs/8.x/octane.md:4
#: ./docs/9.x/octane.md:4
#: ./docs/10.x/octane.md:4
#: ./docs/11.x/octane.md:4
#: ./docs/master/octane.md:4
msgctxt "P"
msgid "[Installation](#installation)"
msgstr "[安裝](#installation)"

#: ./docs/8.x/octane.md:5
#: ./docs/9.x/octane.md:5
#: ./docs/10.x/octane.md:5
#: ./docs/11.x/octane.md:5
#: ./docs/master/octane.md:5
msgctxt "P"
msgid "[Server Prerequisites](#server-prerequisites)"
msgstr "[伺服器前置需求](#driver-prerequisites)"

#: ./docs/10.x/octane.md:6
#: ./docs/11.x/octane.md:6
#: ./docs/master/octane.md:6
msgctxt "P"
msgid "[FrankenPHP](#frankenphp)"
msgstr ""

#: ./docs/8.x/octane.md:6
#: ./docs/9.x/octane.md:6
#: ./docs/10.x/octane.md:7
#: ./docs/11.x/octane.md:7
#: ./docs/master/octane.md:7
msgctxt "P"
msgid "[RoadRunner](#roadrunner)"
msgstr "[RoadRunner](#roadrunner)"

#: ./docs/8.x/octane.md:7
#: ./docs/9.x/octane.md:7
#: ./docs/10.x/octane.md:8
#: ./docs/11.x/octane.md:8
#: ./docs/master/octane.md:8
msgctxt "P"
msgid "[Swoole](#swoole)"
msgstr "[Swoole](#swoole)"

#: ./docs/8.x/octane.md:8
#: ./docs/9.x/octane.md:8
#: ./docs/10.x/octane.md:9
#: ./docs/11.x/octane.md:9
#: ./docs/master/octane.md:9
msgctxt "P"
msgid "[Serving Your Application](#serving-your-application)"
msgstr "[處理你的網站](#serving-your-application)"

#: ./docs/8.x/octane.md:9
#: ./docs/9.x/octane.md:9
msgctxt "P"
msgid "[Serving Your Application Via HTTPS](#serving-your-application-via-https)"
msgstr "[通過 HTTPS 來處理你的網站](#serving-your-application-via-https)"

#: ./docs/10.x/octane.md:10
#: ./docs/11.x/octane.md:10
#: ./docs/master/octane.md:10
msgctxt "P"
msgid "[Serving Your Application via HTTPS](#serving-your-application-via-https)"
msgstr ""

#: ./docs/8.x/octane.md:10
#: ./docs/9.x/octane.md:10
msgctxt "P"
msgid "[Serving Your Application Via Nginx](#serving-your-application-via-nginx)"
msgstr "[通過 Nginx 來處理你的網站](#serving-your-application-via-nginx)"

#: ./docs/10.x/octane.md:11
#: ./docs/11.x/octane.md:11
#: ./docs/master/octane.md:11
msgctxt "P"
msgid "[Serving Your Application via Nginx](#serving-your-application-via-nginx)"
msgstr ""

#: ./docs/8.x/octane.md:11
#: ./docs/9.x/octane.md:11
msgctxt "P"
msgid "[Watching For File Changes](#watching-for-file-changes)"
msgstr "[監控檔案更改](#watching-for-file-changes)"

#: ./docs/10.x/octane.md:12
#: ./docs/11.x/octane.md:12
#: ./docs/master/octane.md:12
msgctxt "P"
msgid "[Watching for File Changes](#watching-for-file-changes)"
msgstr ""

#: ./docs/8.x/octane.md:12
#: ./docs/9.x/octane.md:12
msgctxt "P"
msgid "[Specifying The Worker Count](#specifying-the-worker-count)"
msgstr "[指定 Worker 的數量](#specifying-the-worker-count)"

#: ./docs/10.x/octane.md:13
#: ./docs/11.x/octane.md:13
#: ./docs/master/octane.md:13
msgctxt "P"
msgid "[Specifying the Worker Count](#specifying-the-worker-count)"
msgstr ""

#: ./docs/8.x/octane.md:13
#: ./docs/9.x/octane.md:13
msgctxt "P"
msgid "[Specifying The Max Request Count](#specifying-the-max-request-count)"
msgstr "[指定最大 Request 數](#specifying-the-max-request-count)"

#: ./docs/10.x/octane.md:14
#: ./docs/11.x/octane.md:14
#: ./docs/master/octane.md:14
msgctxt "P"
msgid "[Specifying the Max Request Count](#specifying-the-max-request-count)"
msgstr ""

#: ./docs/8.x/octane.md:14
#: ./docs/9.x/octane.md:14
msgctxt "P"
msgid "[Reloading The Workers](#reloading-the-workers)"
msgstr "[重新載入 Worker](#reloading-the-workers)"

#: ./docs/10.x/octane.md:15
#: ./docs/11.x/octane.md:15
#: ./docs/master/octane.md:15
msgctxt "P"
msgid "[Reloading the Workers](#reloading-the-workers)"
msgstr ""

#: ./docs/8.x/octane.md:15
#: ./docs/9.x/octane.md:15
msgctxt "P"
msgid "[Stopping The Server](#stopping-the-server)"
msgstr "[停止伺服器](#stopping-the-server)"

#: ./docs/10.x/octane.md:16
#: ./docs/11.x/octane.md:16
#: ./docs/master/octane.md:16
msgctxt "P"
msgid "[Stopping the Server](#stopping-the-server)"
msgstr ""

#: ./docs/8.x/octane.md:16
#: ./docs/9.x/octane.md:16
msgctxt "P"
msgid "[Dependency Injection & Octane](#dependency-injection-and-octane)"
msgstr "[相依性插入與 Octane](#dependency-injection-and-octane)"

#: ./docs/10.x/octane.md:17
#: ./docs/11.x/octane.md:17
#: ./docs/master/octane.md:17
msgctxt "P"
msgid "[Dependency Injection and Octane](#dependency-injection-and-octane)"
msgstr ""

#: ./docs/8.x/octane.md:17
#: ./docs/9.x/octane.md:17
#: ./docs/10.x/octane.md:18
#: ./docs/11.x/octane.md:18
#: ./docs/master/octane.md:18
msgctxt "P"
msgid "[Container Injection](#container-injection)"
msgstr "[插入 Container](#container-injection)"

#: ./docs/8.x/octane.md:18
#: ./docs/9.x/octane.md:18
#: ./docs/10.x/octane.md:19
#: ./docs/11.x/octane.md:19
#: ./docs/master/octane.md:19
msgctxt "P"
msgid "[Request Injection](#request-injection)"
msgstr "[插入 Request](#request-injection)"

#: ./docs/8.x/octane.md:19
#: ./docs/9.x/octane.md:19
#: ./docs/10.x/octane.md:20
#: ./docs/11.x/octane.md:20
#: ./docs/master/octane.md:20
msgctxt "P"
msgid "[Configuration Repository Injection](#configuration-repository-injection)"
msgstr "[插入 Configuration Repository](#configuration-repository-injection)"

#: ./docs/8.x/octane.md:20
#: ./docs/9.x/octane.md:20
#: ./docs/10.x/octane.md:21
#: ./docs/11.x/octane.md:21
#: ./docs/master/octane.md:21
msgctxt "P"
msgid "[Managing Memory Leaks](#managing-memory-leaks)"
msgstr "[管理 Memory Leak](#managing-memory-leaks)"

#: ./docs/8.x/octane.md:21
#: ./docs/9.x/octane.md:21
#: ./docs/10.x/octane.md:22
#: ./docs/11.x/octane.md:22
#: ./docs/master/octane.md:22
msgctxt "P"
msgid "[Concurrent Tasks](#concurrent-tasks)"
msgstr "[併行的任務](#concurrent-tasks)"

#: ./docs/8.x/octane.md:22
#: ./docs/9.x/octane.md:22
msgctxt "P"
msgid "[Ticks & Intervals](#ticks-and-intervals)"
msgstr "[Tick 與 Interval](#ticks-and-intervals)"

#: ./docs/10.x/octane.md:23
#: ./docs/11.x/octane.md:23
#: ./docs/master/octane.md:23
msgctxt "P"
msgid "[Ticks and Intervals](#ticks-and-intervals)"
msgstr ""

#: ./docs/8.x/octane.md:23
#: ./docs/9.x/octane.md:23
#: ./docs/10.x/octane.md:24
#: ./docs/11.x/octane.md:24
#: ./docs/master/octane.md:24
msgctxt "P"
msgid "[The Octane Cache](#the-octane-cache)"
msgstr "[Octane 的 Cache](#the-octane-cache)"

#: ./docs/8.x/octane.md:24
#: ./docs/9.x/octane.md:24
#: ./docs/10.x/octane.md:25
#: ./docs/11.x/octane.md:25
#: ./docs/master/octane.md:25
msgctxt "P"
msgid "[Tables](#tables)"
msgstr "[資料表](#tables)"

#: ./docs/8.x/octane.md:26
#: ./docs/9.x/octane.md:26
#: ./docs/10.x/octane.md:27
#: ./docs/11.x/octane.md:27
#: ./docs/master/octane.md:27
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:27
#: ./docs/9.x/octane.md:27
#: ./docs/10.x/octane.md:28
#: ./docs/11.x/octane.md:28
#: ./docs/master/octane.md:28
msgctxt "H2"
msgid "Introduction"
msgstr "簡介"

#: ./docs/8.x/octane.md:29
#: ./docs/9.x/octane.md:29
msgctxt "P"
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [Open Swoole](https://swoole.co.uk), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr "[Laravel Octane](https://github.com/laravel/octane) 通過高效能得網頁伺服器，如 [Open Swoole](https://swoole.co.uk/)、[Swoole](https://github.com/swoole/swoole-src) 與 [RoadRunner](https://roadrunner.dev) 來增強你的網站效能。Octane 會一次性載入你的專案，將專案保存在記憶體中，然後以超音速般的超快速度將 Request 傳給專案。"

#: ./docs/10.x/octane.md:30
#: ./docs/11.x/octane.md:30
#: ./docs/master/octane.md:30
msgctxt "P"
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [FrankenPHP](https://frankenphp.dev/), [Open Swoole](https://openswoole.com/), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr ""

#: ./docs/8.x/octane.md:31
#: ./docs/9.x/octane.md:31
#: ./docs/10.x/octane.md:32
#: ./docs/11.x/octane.md:32
#: ./docs/master/octane.md:32
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:32
#: ./docs/9.x/octane.md:32
#: ./docs/10.x/octane.md:33
#: ./docs/11.x/octane.md:33
#: ./docs/master/octane.md:33
msgctxt "H2"
msgid "Installation"
msgstr "安裝"

#: ./docs/8.x/octane.md:34
#: ./docs/9.x/octane.md:34
#: ./docs/10.x/octane.md:35
#: ./docs/11.x/octane.md:35
#: ./docs/master/octane.md:35
msgctxt "P"
msgid "Octane may be installed via the Composer package manager:"
msgstr "可以使用 Composer 套件管理員來安裝 Octane："

#: ./docs/8.x/octane.md:36
#: ./docs/9.x/octane.md:36
#: ./docs/10.x/octane.md:37
#: ./docs/11.x/octane.md:37
#: ./docs/master/octane.md:37
msgctxt "CODE: bash"
msgid "composer require laravel/octane"
msgstr ""

#: ./docs/8.x/octane.md:40
#: ./docs/9.x/octane.md:40
#: ./docs/10.x/octane.md:41
#: ./docs/11.x/octane.md:41
#: ./docs/master/octane.md:41
msgctxt "P"
msgid "After installing Octane, you may execute the `octane:install` Artisan command, which will install Octane's configuration file into your application:"
msgstr "安裝好 Octane 後，就可以執行 `octane:install` Artisan 指令來安裝 Octane 的設定檔到專案中："

#: ./docs/8.x/octane.md:42
#: ./docs/9.x/octane.md:42
#: ./docs/10.x/octane.md:43
#: ./docs/11.x/octane.md:43
#: ./docs/master/octane.md:43
msgctxt "CODE: bash"
msgid "php artisan octane:install"
msgstr ""

#: ./docs/8.x/octane.md:46
#: ./docs/9.x/octane.md:46
#: ./docs/10.x/octane.md:47
#: ./docs/11.x/octane.md:47
#: ./docs/master/octane.md:47
#~ msgctxt "P"
#~ msgid "<a name=\"server-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:47
#: ./docs/9.x/octane.md:47
#: ./docs/10.x/octane.md:48
#: ./docs/11.x/octane.md:48
#: ./docs/master/octane.md:48
msgctxt "H2"
msgid "Server Prerequisites"
msgstr "伺服器的前置需求"

#: ./docs/8.x/octane.md:49
#: ./docs/9.x/octane.md:50
msgctxt "P"
msgid "Laravel Octane requires [PHP 8.0+](https://php.net/releases/)."
msgstr "Laravel Octane 需要 [PHP 8.0 或之後的版本](https://php.net/releases)。"

#: ./docs/10.x/octane.md:51
#: ./docs/11.x/octane.md:51
#: ./docs/master/octane.md:51
msgctxt "P"
msgid "Laravel Octane requires [PHP 8.1+](https://php.net/releases/)."
msgstr "Laravel Octane 需要 [PHP 8.1 或之後的版本](https://php.net/releases)。"

#: ./docs/8.x/octane.md:51
#: ./docs/9.x/octane.md:52
#: ./docs/10.x/octane.md:143
#: ./docs/11.x/octane.md:142
#: ./docs/master/octane.md:143
#~ msgctxt "P"
#~ msgid "<a name=\"roadrunner\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:52
#: ./docs/9.x/octane.md:53
#: ./docs/10.x/octane.md:144
#: ./docs/11.x/octane.md:143
#: ./docs/master/octane.md:144
msgctxt "H3"
msgid "RoadRunner"
msgstr "RoadRunner"

#: ./docs/10.x/octane.md:53
#: ./docs/11.x/octane.md:53
#: ./docs/master/octane.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:54
#: ./docs/11.x/octane.md:54
#: ./docs/master/octane.md:54
msgctxt "H3"
msgid "FrankenPHP"
msgstr ""

#: ./docs/8.x/octane.md:54
#: ./docs/9.x/octane.md:55
#: ./docs/10.x/octane.md:146
#: ./docs/11.x/octane.md:145
#: ./docs/master/octane.md:146
msgctxt "P"
msgid "[RoadRunner](https://roadrunner.dev) is powered by the RoadRunner binary, which is built using Go. The first time you start a RoadRunner based Octane server, Octane will offer to download and install the RoadRunner binary for you."
msgstr "[RoadRunner](https://roadrunner.dev) 是由 Go 製作的 RoadRunner 執行檔所驅動。初次啟動基於 RoadRunner 的 Octane Server 時，Octane 會為你下載與安裝 RoadRunner 執行檔。"

#: ./docs/11.x/octane.md:56
msgctxt "P"
msgid "[FrankenPHP](https://frankenphp.dev) is a PHP application server, written in Go, that supports modern web features like early hints, Brotli, and Zstandard compression. When you install Octane and choose FrankenPHP as your server, Octane will automatically download and install the FrankenPHP binary for you."
msgstr ""

#: ./docs/8.x/octane.md:56
#: ./docs/9.x/octane.md:57
#: ./docs/10.x/octane.md:148
#: ./docs/11.x/octane.md:147
#: ./docs/master/octane.md:148
#~ msgctxt "P"
#~ msgid "<a name=\"roadrunner-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:57
#: ./docs/master/octane.md:57
msgctxt "P"
msgid "FrankenPHP's Octane integration is in beta and should be used with caution in production."
msgstr ""

#: ./docs/8.x/octane.md:57
#: ./docs/9.x/octane.md:58
msgctxt "H4"
msgid "RoadRunner Via Laravel Sail"
msgstr "通過 Laravel Sail 的 RoadRunner"

#: ./docs/10.x/octane.md:59
#: ./docs/master/octane.md:59
msgctxt "P"
msgid "[FrankenPHP](https://frankenphp.dev) is a PHP application server, written in Go, that supports modern web features like early hints and Zstandard compression. When you install Octane and choose FrankenPHP as your server, Octane will automatically download and install the FrankenPHP binary for you."
msgstr ""

#: ./docs/8.x/octane.md:59
#: ./docs/9.x/octane.md:60
#: ./docs/10.x/octane.md:151
#: ./docs/11.x/octane.md:150
#: ./docs/master/octane.md:151
msgctxt "P"
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and RoadRunner:"
msgstr "若你打算使用 [Laravel Sail](/docs/{{version}}/sail) 來開發專案，請執行下列指令來安裝 Octane 與 RoadRunner："

#: ./docs/10.x/octane.md:61
#: ./docs/11.x/octane.md:58
#: ./docs/master/octane.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:61
#: ./docs/9.x/octane.md:62
msgctxt "CODE: bash"
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner"
msgstr ""

#: ./docs/10.x/octane.md:62
#: ./docs/11.x/octane.md:59
#: ./docs/master/octane.md:62
msgctxt "H4"
msgid "FrankenPHP via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:64
#: ./docs/11.x/octane.md:61
#: ./docs/master/octane.md:64
msgctxt "P"
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and FrankenPHP:"
msgstr ""

#: ./docs/10.x/octane.md:66
#: ./docs/11.x/octane.md:63
#: ./docs/master/octane.md:66
msgctxt "CODE: shell"
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane"
msgstr ""

#: ./docs/8.x/octane.md:67
#: ./docs/9.x/octane.md:68
#: ./docs/10.x/octane.md:159
#: ./docs/11.x/octane.md:158
#: ./docs/master/octane.md:159
msgctxt "P"
msgid "Next, you should start a Sail shell and use the `rr` executable to retrieve the latest Linux based build of the RoadRunner binary:"
msgstr "接著，請開啟 Sail Shell，並使用 `rr` 執行檔來取得 RoadRunner 的最新版 Linux 執行檔："

#: ./docs/8.x/octane.md:69
#: ./docs/9.x/octane.md:70
#: ./docs/10.x/octane.md:161
#: ./docs/11.x/octane.md:160
#: ./docs/master/octane.md:161
msgctxt "CODE: bash"
msgid ""
"./vendor/bin/sail shell\n"
"\n"
"# Within the Sail shell...\n"
"./vendor/bin/rr get-binary"
msgstr ""

#: ./docs/10.x/octane.md:72
#: ./docs/11.x/octane.md:69
#: ./docs/master/octane.md:72
msgctxt "P"
msgid "Next, you should use the `octane:install` Artisan command to install the FrankenPHP binary:"
msgstr ""

#: ./docs/10.x/octane.md:74
#: ./docs/11.x/octane.md:71
#: ./docs/master/octane.md:74
msgctxt "CODE: shell"
msgid "./vendor/bin/sail artisan octane:install --server=frankenphp"
msgstr ""

#: ./docs/8.x/octane.md:76
#: ./docs/9.x/octane.md:77
msgctxt "P"
msgid "After installing the RoadRunner binary, you may exit your Sail shell session. You will now need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr "安裝好 RoadRunner 執行檔後，就可退出 Sail 的 Shell 工作階段。接著我們需要調整 Sail 所使用的 `supervisor.conf` 檔案來讓網站保持執行。要開始調整 `supervisor.conf` 檔案，請執行 `sail:publish` Artisan 指令："

#: ./docs/11.x/octane.md:77
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port='${APP_PORT:-80}'\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/10.x/octane.md:78
#: ./docs/11.x/octane.md:75
#: ./docs/master/octane.md:78
msgctxt "P"
msgid "Finally, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/8.x/octane.md:78
#: ./docs/8.x/octane.md:112
#: ./docs/9.x/octane.md:79
#: ./docs/9.x/octane.md:114
msgctxt "CODE: bash"
msgid "./vendor/bin/sail artisan sail:publish"
msgstr ""

#: ./docs/10.x/octane.md:80
#: ./docs/master/octane.md:80
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port=80\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:82
#: ./docs/8.x/octane.md:116
#: ./docs/9.x/octane.md:83
#: ./docs/9.x/octane.md:118
msgctxt "P"
msgid "Next, update the `command` directive of your application's `docker/supervisord.conf` file so that Sail serves your application using Octane instead of the PHP development server:"
msgstr "接著，請更新專案中 `docker/supervisord.conf` 檔案內的 `command` 指示詞，讓 Sail 使用 Octane 而不是 PHP 開發伺服器來執行你的網站："

#: ./docs/8.x/octane.md:84
msgctxt "CODE: ini"
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=8000"
msgstr ""

#: ./docs/9.x/octane.md:85
msgctxt "CODE: ini"
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80"
msgstr ""

#: ./docs/8.x/octane.md:88
#: ./docs/9.x/octane.md:89
#: ./docs/10.x/octane.md:177
#: ./docs/11.x/octane.md:176
#: ./docs/master/octane.md:177
msgctxt "P"
msgid "Finally, ensure the `rr` binary is executable and build your Sail images:"
msgstr "最後，請確認 `rr` 二進位檔案是否具有可執行權限，並 ^[Build](建置) 你的 Sail ^[Image](映像)："

#: ./docs/10.x/octane.md:89
#: ./docs/11.x/octane.md:86
#: ./docs/master/octane.md:89
msgctxt "P"
msgid "To enable HTTPS, HTTP/2, and HTTP/3, apply these modifications instead:"
msgstr ""

#: ./docs/8.x/octane.md:90
#: ./docs/9.x/octane.md:91
#: ./docs/10.x/octane.md:179
#: ./docs/11.x/octane.md:178
#: ./docs/master/octane.md:179
msgctxt "CODE: bash"
msgid ""
"chmod +x ./rr\n"
"\n"
"./vendor/bin/sail build --no-cache"
msgstr ""

#: ./docs/10.x/octane.md:91
#: ./docs/11.x/octane.md:88
#: ./docs/master/octane.md:91
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    ports:\n"
"        - '${APP_PORT:-80}:80'\n"
"        - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'\n"
"        - '443:443' # [tl! add]\n"
"        - '443:443/udp' # [tl! add]\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --host=localhost --port=443 --admin-port=2019 --https\" # [tl! add]\n"
"      XDG_CONFIG_HOME:  /var/www/html/config # [tl! add]\n"
"      XDG_DATA_HOME:  /var/www/html/data # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:96
#: ./docs/9.x/octane.md:97
#: ./docs/10.x/octane.md:185
#: ./docs/11.x/octane.md:184
#: ./docs/master/octane.md:185
#~ msgctxt "P"
#~ msgid "<a name=\"swoole\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:97
#: ./docs/9.x/octane.md:98
#: ./docs/10.x/octane.md:186
#: ./docs/11.x/octane.md:185
#: ./docs/master/octane.md:186
msgctxt "H3"
msgid "Swoole"
msgstr "Swoole"

#: ./docs/8.x/octane.md:99
#: ./docs/9.x/octane.md:100
#: ./docs/10.x/octane.md:188
#: ./docs/11.x/octane.md:187
#: ./docs/master/octane.md:188
msgctxt "P"
msgid "If you plan to use the Swoole application server to serve your Laravel Octane application, you must install the Swoole PHP extension. Typically, this can be done via PECL:"
msgstr "若要使用 Swoole 應用程式伺服器來處理你的 Laravel Octane 網站，需要先安裝 Swoole PHP 擴充套件。一般來說，可以使用 PECL 來安裝："

#: ./docs/8.x/octane.md:101
#: ./docs/9.x/octane.md:102
#: ./docs/10.x/octane.md:190
#: ./docs/11.x/octane.md:189
#: ./docs/master/octane.md:190
msgctxt "CODE: bash"
msgid "pecl install swoole"
msgstr ""

#: ./docs/10.x/octane.md:105
#: ./docs/11.x/octane.md:102
#: ./docs/master/octane.md:105
msgctxt "P"
msgid "Typically, you should access your FrankenPHP Sail application via `https://localhost`, as using `https://127.0.0.1` requires additional configuration and is [discouraged](https://frankenphp.dev/docs/known-issues/#using-https127001-with-docker)."
msgstr ""

#: ./docs/8.x/octane.md:105
#: ./docs/9.x/octane.md:106
#: ./docs/10.x/octane.md:205
#: ./docs/11.x/octane.md:204
#: ./docs/master/octane.md:205
#~ msgctxt "P"
#~ msgid "<a name=\"swoole-via-laravel-sail\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:106
#: ./docs/9.x/octane.md:107
msgctxt "H4"
msgid "Swoole Via Laravel Sail"
msgstr "通過 Laravel Sail 來使用 Swoole"

#: ./docs/10.x/octane.md:107
#: ./docs/11.x/octane.md:104
#: ./docs/master/octane.md:107
#~ msgctxt "P"
#~ msgid "<a name=\"frankenphp-via-docker\"></a>"
#~ msgstr ""

#: ./docs/11.x/octane.md:107
msgctxt "P"
msgid "Using FrankenPHP's official Docker images can offer improved performance and the use of additional extensions not included with static installations of FrankenPHP. In addition, the official Docker images provide support for running FrankenPHP on platforms it doesn't natively support, such as Windows. FrankenPHP's official Docker images are suitable for both local development and production usage."
msgstr ""

#: ./docs/10.x/octane.md:108
#: ./docs/11.x/octane.md:105
#: ./docs/master/octane.md:108
msgctxt "H4"
msgid "FrankenPHP via Docker"
msgstr ""

#: ./docs/8.x/octane.md:108
#: ./docs/9.x/octane.md:110
#: ./docs/10.x/octane.md:209
#: ./docs/11.x/octane.md:208
#: ./docs/master/octane.md:209
msgctxt "P"
msgid "Before serving an Octane application via Sail, ensure you have the latest version of Laravel Sail and execute `./vendor/bin/sail build --no-cache` within your application's root directory."
msgstr "在使用 Sail 來處理 Octane 網站前，請確認是否使用最新版的 Laravel Sail，並在專案的根目錄中執行 `./vendor/bin/sail build --no-cache`。"

#: ./docs/10.x/octane.md:110
#: ./docs/master/octane.md:110
msgctxt "P"
msgid "Using FrankenPHP's official Docker images can offer improved performance and the use additional extensions not included with static installations of FrankenPHP. In addition, the official Docker images provide support for running FrankenPHP on platforms it doesn't natively support, such as Windows. FrankenPHP's official Docker images are suitable for both local development and production usage."
msgstr ""

#: ./docs/8.x/octane.md:110
#: ./docs/9.x/octane.md:112
msgctxt "P"
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr ""
"或者，也可以使用 [Laravel Sail](/docs/{{version}}/sail) —— Laravel 官方所提供的 Docker 開發環境 —— 來開發基於 Swoole 的 Octane 網站。Laravel Sail 預設已包含了 Swoole 擴充套件，但我們需要先調整 Sail\n"
"所使用的 `supervisor.conf` 檔案，才能讓你的網站保持執行。若要開始調整 `supervisor.conf` 檔案，請執行 `sail:publish` Artisan 指令："

#: ./docs/10.x/octane.md:112
#: ./docs/11.x/octane.md:109
#: ./docs/master/octane.md:112
msgctxt "P"
msgid "You may use the following Dockerfile as a starting point for containerizing your FrankenPHP powered Laravel application:"
msgstr ""

#: ./docs/10.x/octane.md:114
#: ./docs/11.x/octane.md:111
#: ./docs/master/octane.md:114
msgctxt "CODE: dockerfile"
msgid ""
"FROM dunglas/frankenphp\n"
"\n"
"RUN install-php-extensions \\\n"
"    pcntl\n"
"    # Add other PHP extensions here...\n"
"\n"
"COPY . /app\n"
"\n"
"ENTRYPOINT [\"php\", \"artisan\", \"octane:frankenphp\"]"
msgstr ""

#: ./docs/8.x/octane.md:118
#: ./docs/9.x/octane.md:120
msgctxt "CODE: ini"
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80"
msgstr ""

#: ./docs/8.x/octane.md:122
#: ./docs/9.x/octane.md:124
#: ./docs/10.x/octane.md:222
#: ./docs/11.x/octane.md:221
#: ./docs/master/octane.md:222
msgctxt "P"
msgid "Finally, build your Sail images:"
msgstr "最後，請 ^[Build](建置) 你的 Sail ^[Image](映像)："

#: ./docs/8.x/octane.md:124
#: ./docs/9.x/octane.md:126
#: ./docs/10.x/octane.md:224
#: ./docs/11.x/octane.md:223
#: ./docs/master/octane.md:224
msgctxt "CODE: bash"
msgid "./vendor/bin/sail build --no-cache"
msgstr ""

#: ./docs/11.x/octane.md:125
msgctxt "CODE: yaml"
msgid ""
"# compose.yaml\n"
"services:\n"
"  frankenphp:\n"
"    build:\n"
"      context: .\n"
"    entrypoint: php artisan octane:frankenphp --workers=1 --max-requests=1\n"
"    ports:\n"
"      - \"8000:8000\"\n"
"    volumes:\n"
"      - .:/app"
msgstr ""

#: ./docs/10.x/octane.md:126
#: ./docs/11.x/octane.md:123
#: ./docs/master/octane.md:126
msgctxt "P"
msgid "Then, during development, you may utilize the following Docker Compose file to run your application:"
msgstr ""

#: ./docs/10.x/octane.md:128
#: ./docs/master/octane.md:128
msgctxt "CODE: yaml"
msgid ""
"# compose.yaml\n"
"services:\n"
"  frankenphp:\n"
"    build:\n"
"      context: .\n"
"    entrypoint: php artisan octane:frankenphp --max-requests=1\n"
"    ports:\n"
"      - \"8000:8000\"\n"
"    volumes:\n"
"      - .:/app"
msgstr ""

#: ./docs/8.x/octane.md:128
#: ./docs/9.x/octane.md:130
#: ./docs/10.x/octane.md:228
#: ./docs/11.x/octane.md:227
#: ./docs/master/octane.md:228
#~ msgctxt "P"
#~ msgid "<a name=\"swoole-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:129
#: ./docs/9.x/octane.md:131
#: ./docs/10.x/octane.md:229
#: ./docs/11.x/octane.md:228
#: ./docs/master/octane.md:229
msgctxt "H4"
msgid "Swoole Configuration"
msgstr "Swoole 設定"

#: ./docs/8.x/octane.md:131
#: ./docs/9.x/octane.md:133
#: ./docs/10.x/octane.md:231
#: ./docs/11.x/octane.md:230
#: ./docs/master/octane.md:231
msgctxt "P"
msgid "Swoole supports a few additional configuration options that you may add to your `octane` configuration file if necessary. Because they rarely need to be modified, these options are not included in the default configuration file:"
msgstr "若由需要，Swoole 還支援多個可以加到 `octane` 設定檔中的額外設定選項。由於這些選項通常不會被修改，因此在預設的設定檔中並未包含："

#: ./docs/8.x/octane.md:133
msgctxt "CODE: php"
msgid ""
"'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/9.x/octane.md:135
#: ./docs/10.x/octane.md:233
#: ./docs/11.x/octane.md:232
#: ./docs/master/octane.md:233
msgctxt "CODE: php"
msgid ""
"'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/octane.md:138
msgctxt "P"
msgid "If the `--log-level` option is explicitly passed to the `php artisan octane:start` command, Octane will use FrankenPHP's native logger and, unless configured differently, will produce structured JSON logs."
msgstr ""

#: ./docs/10.x/octane.md:141
#: ./docs/11.x/octane.md:140
#: ./docs/master/octane.md:141
msgctxt "P"
msgid "You may consult [the official FrankenPHP documentation](https://frankenphp.dev/docs/docker/) for more information on running FrankenPHP with Docker."
msgstr ""

#: ./docs/8.x/octane.md:142
#: ./docs/9.x/octane.md:144
#: ./docs/10.x/octane.md:242
#: ./docs/11.x/octane.md:241
#: ./docs/master/octane.md:242
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:143
#: ./docs/9.x/octane.md:145
#: ./docs/10.x/octane.md:243
#: ./docs/11.x/octane.md:242
#: ./docs/master/octane.md:243
msgctxt "H2"
msgid "Serving Your Application"
msgstr "處理你的網站"

#: ./docs/8.x/octane.md:145
#: ./docs/9.x/octane.md:147
#: ./docs/10.x/octane.md:245
#: ./docs/11.x/octane.md:244
#: ./docs/master/octane.md:245
msgctxt "P"
msgid "The Octane server can be started via the `octane:start` Artisan command. By default, this command will utilize the server specified by the `server` configuration option of your application's `octane` configuration file:"
msgstr "可以通過 `octane:start` Artisan 指令來啟動 Octane Server。預設情況下，這個指令會使用專案中 `octane` 設定檔內 `server` 設定選項所指定的伺服器："

#: ./docs/8.x/octane.md:147
#: ./docs/9.x/octane.md:149
#: ./docs/10.x/octane.md:247
#: ./docs/11.x/octane.md:246
#: ./docs/master/octane.md:247
msgctxt "CODE: bash"
msgid "php artisan octane:start"
msgstr ""

#: ./docs/10.x/octane.md:149
#: ./docs/11.x/octane.md:148
#: ./docs/master/octane.md:149
msgctxt "H4"
msgid "RoadRunner via Laravel Sail"
msgstr ""

#: ./docs/8.x/octane.md:151
#: ./docs/9.x/octane.md:153
#: ./docs/10.x/octane.md:251
#: ./docs/11.x/octane.md:250
#: ./docs/master/octane.md:251
msgctxt "P"
msgid "By default, Octane will start the server on port 8000, so you may access your application in a web browser via `http://localhost:8000`."
msgstr "預設情況下，Octane 會在 8000 ^[Port](連接埠) 上啟動伺服器，因此我們可以在瀏覽器上通過 `http://localhost:8000` 來存取網站："

#: ./docs/11.x/octane.md:152
msgctxt "CODE: shell"
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner-cli spiral/roadrunner-http"
msgstr ""

#: ./docs/10.x/octane.md:153
#: ./docs/master/octane.md:153
msgctxt "CODE: shell"
msgid ""
"./vendor/bin/sail up\n"
"\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner-cli spiral/roadrunner-http "
msgstr ""

#: ./docs/8.x/octane.md:153
#: ./docs/9.x/octane.md:155
#: ./docs/10.x/octane.md:253
#: ./docs/11.x/octane.md:252
#: ./docs/master/octane.md:253
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application-via-https\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:154
#: ./docs/9.x/octane.md:156
msgctxt "H3"
msgid "Serving Your Application Via HTTPS"
msgstr "通過 HTTPS 來處理你的網站"

#: ./docs/8.x/octane.md:156
#: ./docs/9.x/octane.md:158
#: ./docs/10.x/octane.md:256
#: ./docs/11.x/octane.md:255
#: ./docs/master/octane.md:256
msgctxt "P"
msgid "By default, applications running via Octane generate links prefixed with `http://`. The `OCTANE_HTTPS` environment variable, used within your application's `config/octane.php` configuration file, can be set to `true` when serving your application via HTTPS. When this configuration value is set to `true`, Octane will instruct Laravel to prefix all generated links with `https://`:"
msgstr "預設情況下。Octane 會產生 `http://` 開頭的連結。在專案內的 `config/octane.php` 中，使用到了 `OCTANE_HTTPS` 這個環境變數。使用 HTTPS 來處理網站時，請將該環境變數設為 `true`，以讓 Octane 來告訴 Laravel 所有產生的連結都要以 `https://` 開頭："

#: ./docs/8.x/octane.md:158
#: ./docs/9.x/octane.md:160
#: ./docs/10.x/octane.md:258
#: ./docs/11.x/octane.md:257
#: ./docs/master/octane.md:258
msgctxt "CODE: php"
msgid "'https' => env('OCTANE_HTTPS', false),"
msgstr ""

#: ./docs/8.x/octane.md:162
#: ./docs/9.x/octane.md:164
#: ./docs/10.x/octane.md:262
#: ./docs/11.x/octane.md:261
#: ./docs/master/octane.md:262
#~ msgctxt "P"
#~ msgid "<a name=\"serving-your-application-via-nginx\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:163
#: ./docs/9.x/octane.md:165
msgctxt "H3"
msgid "Serving Your Application Via Nginx"
msgstr "通過 Nginx 來處理你的網站"

#: ./docs/8.x/octane.md:165
#: ./docs/9.x/octane.md:168
#: ./docs/10.x/octane.md:266
#: ./docs/11.x/octane.md:265
#: ./docs/master/octane.md:266
msgctxt "P"
msgid "If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel Octane application, check out [Laravel Forge](https://forge.laravel.com)."
msgstr "若你還未準備好自行管理伺服器設定，或不擅長設定各種執行大型 Laravel Octane 專案所需要的設定，請參考看看 [Laravel Forge](https://forge.laravel.com)。"

#: ./docs/8.x/octane.md:167
#: ./docs/9.x/octane.md:170
msgctxt "P"
msgid "In production environments, you should serve your Octane application behind a traditional web server such as a Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr "在正式環境中，請在傳統的網頁伺服器 —— 如 Nginx 或 Apache —— 後處理你的 Octane 網站。這樣一來，網站伺服器就可負責處理如圖片或 CSS 等的靜態網站，或是管理 SSL 憑證等。"

#: ./docs/10.x/octane.md:168
#: ./docs/11.x/octane.md:167
#: ./docs/master/octane.md:168
msgctxt "P"
msgid "Then, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/11.x/octane.md:169
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port='${APP_PORT:-80}'\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:169
#: ./docs/9.x/octane.md:172
#: ./docs/10.x/octane.md:270
#: ./docs/11.x/octane.md:269
#: ./docs/master/octane.md:270
msgctxt "P"
msgid "In the Nginx configuration example below, Nginx will serve the site's static assets and proxy requests to the Octane server that is running on port 8000:"
msgstr "在下方的 Nginx 設定檔中，Nginx 會負責處理網站的靜態資源，並將 Request ^[Proxy](代理) 到 8000 ^[Port](連接埠) 上所執行的 Octane 伺服器："

#: ./docs/10.x/octane.md:170
#: ./docs/master/octane.md:170
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=80\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:171
#: ./docs/9.x/octane.md:174
#: ./docs/10.x/octane.md:272
#: ./docs/11.x/octane.md:271
#: ./docs/master/octane.md:272
msgctxt "CODE: conf"
msgid ""
"map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n"
"\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n"
"\n"
"    index index.php;\n"
"\n"
"    charset utf-8;\n"
"\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n"
"\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n"
"\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n"
"\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n"
"\n"
"    error_page 404 /index.php;\n"
"\n"
"    location @octane {\n"
"        set $suffix \"\";\n"
"\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n"
"\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n"
"\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:194
#: ./docs/11.x/octane.md:193
#: ./docs/master/octane.md:194
#~ msgctxt "P"
#~ msgid "<a name=\"openswoole\"></a>"
#~ msgstr ""

#: ./docs/10.x/octane.md:195
#: ./docs/11.x/octane.md:194
#: ./docs/master/octane.md:195
msgctxt "H4"
msgid "Open Swoole"
msgstr "開啟 Swoole"

#: ./docs/10.x/octane.md:197
#: ./docs/11.x/octane.md:196
#: ./docs/master/octane.md:197
msgctxt "P"
msgid "If you want to use the Open Swoole application server to serve your Laravel Octane application, you must install the Open Swoole PHP extension. Typically, this can be done via PECL:"
msgstr "若要使用 Open Swoole 應用程式伺服器來處理你的 Laravel Octane 網站，需要先安裝 Open Swoole PHP 擴充套件。一般來說，可以使用 PECL 來安裝："

#: ./docs/10.x/octane.md:199
#: ./docs/11.x/octane.md:198
#: ./docs/master/octane.md:199
msgctxt "CODE: shell"
msgid "pecl install openswoole"
msgstr ""

#: ./docs/10.x/octane.md:203
#: ./docs/11.x/octane.md:202
#: ./docs/master/octane.md:203
msgctxt "P"
msgid "Using Laravel Octane with Open Swoole grants the same functionality provided by Swoole, such as concurrent tasks, ticks, and intervals."
msgstr "以 Open Swoole 來使用 Laravel Octane 時所提供的功能與以 Swoole 來使用 Laravel Octane 相同，如併行的任務、Tick 與 Interval 等。"

#: ./docs/10.x/octane.md:206
#: ./docs/11.x/octane.md:205
#: ./docs/master/octane.md:206
msgctxt "H4"
msgid "Swoole via Laravel Sail"
msgstr ""

#: ./docs/10.x/octane.md:211
#: ./docs/11.x/octane.md:210
#: ./docs/master/octane.md:211
msgctxt "P"
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `docker-compose.yml` file used by Sail."
msgstr ""

#: ./docs/10.x/octane.md:213
#: ./docs/11.x/octane.md:212
#: ./docs/master/octane.md:213
msgctxt "P"
msgid "To get started, add a `SUPERVISOR_PHP_COMMAND` environment variable to the `laravel.test` service definition in your application's `docker-compose.yml` file. This environment variable will contain the command that Sail will use to serve your application using Octane instead of the PHP development server:"
msgstr ""

#: ./docs/11.x/octane.md:214
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port='${APP_PORT:-80}'\" # [tl! add]"
msgstr ""

#: ./docs/10.x/octane.md:215
#: ./docs/master/octane.md:215
msgctxt "CODE: yaml"
msgid ""
"services:\n"
"  laravel.test:\n"
"    environment:\n"
"      SUPERVISOR_PHP_COMMAND: \"/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\" # [tl! add]"
msgstr ""

#: ./docs/8.x/octane.md:225
#: ./docs/9.x/octane.md:228
#: ./docs/10.x/octane.md:326
#: ./docs/11.x/octane.md:325
#: ./docs/master/octane.md:326
#~ msgctxt "P"
#~ msgid "<a name=\"watching-for-file-changes\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:226
#: ./docs/9.x/octane.md:229
msgctxt "H3"
msgid "Watching For File Changes"
msgstr "監控檔案修改"

#: ./docs/8.x/octane.md:228
#: ./docs/9.x/octane.md:231
#: ./docs/10.x/octane.md:329
#: ./docs/11.x/octane.md:328
#: ./docs/master/octane.md:329
msgctxt "P"
msgid "Since your application is loaded in memory once when the Octane server starts, any changes to your application's files will not be reflected when you refresh your browser. For example, route definitions added to your `routes/web.php` file will not be reflected until the server is restarted. For convenience, you may use the `--watch` flag to instruct Octane to automatically restart the server on any file changes within your application:"
msgstr "由於你的網站會在 Octane 伺服器啟動當下就被載入到記憶體內，因此，在瀏覽器上重新整理，並不會反映出你對網站所作出的修改。舉例來說，除非重新啟動 Octane 伺服器，不然在 `routes/web.php` 檔內所新增的 Route 定義並不會被反映出來。為了方便開發，可以使用 `--watch` ^[Flag](旗標) 來讓 Octane 在偵測到專案內有任何檔案修改時自動重新啟動伺服器："

#: ./docs/8.x/octane.md:230
#: ./docs/9.x/octane.md:233
#: ./docs/10.x/octane.md:331
#: ./docs/11.x/octane.md:330
#: ./docs/master/octane.md:331
msgctxt "CODE: bash"
msgid "php artisan octane:start --watch"
msgstr ""

#: ./docs/8.x/octane.md:234
msgctxt "P"
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:library:"
msgstr "在使用此功能前，請先確認本機開發環境上是否有安裝 [Node](https://nodejs.org)。此外，也需要在專案中安裝 [Chokidar](https://github.com/paulmillr/chokidar) 檔案監控套件："

#: ./docs/8.x/octane.md:236
#: ./docs/9.x/octane.md:239
#: ./docs/10.x/octane.md:337
#: ./docs/11.x/octane.md:336
#: ./docs/master/octane.md:337
msgctxt "CODE: bash"
msgid "npm install --save-dev chokidar"
msgstr ""

#: ./docs/9.x/octane.md:237
#: ./docs/10.x/octane.md:335
#: ./docs/11.x/octane.md:334
#: ./docs/master/octane.md:335
msgctxt "P"
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:"
msgstr "在使用此功能前，請先確認本機開發環境上是否有安裝 [Node](https://nodejs.org)。此外，也需要在專案中安裝 [Chokidar](https://github.com/paulmillr/chokidar) 檔案監控套件："

#: ./docs/8.x/octane.md:240
#: ./docs/9.x/octane.md:243
#: ./docs/10.x/octane.md:341
#: ./docs/11.x/octane.md:340
#: ./docs/master/octane.md:341
msgctxt "P"
msgid "You may configure the directories and files that should be watched using the `watch` configuration option within your application's `config/octane.php` configuration file."
msgstr "可以在專案內的 `config/octane.php` 設定檔中，使用 `watch` 設定選項來設定要監控哪些目錄與檔案。"

#: ./docs/8.x/octane.md:242
#: ./docs/9.x/octane.md:245
#: ./docs/10.x/octane.md:343
#: ./docs/11.x/octane.md:342
#: ./docs/master/octane.md:343
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-the-worker-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:243
#: ./docs/9.x/octane.md:246
msgctxt "H3"
msgid "Specifying The Worker Count"
msgstr "指定 Worker 的數量"

#: ./docs/8.x/octane.md:245
#: ./docs/9.x/octane.md:248
#: ./docs/10.x/octane.md:346
#: ./docs/11.x/octane.md:345
#: ./docs/master/octane.md:346
msgctxt "P"
msgid "By default, Octane will start an application request worker for each CPU core provided by your machine. These workers will then be used to serve incoming HTTP requests as they enter your application. You may manually specify how many workers you would like to start using the `--workers` option when invoking the `octane:start` command:"
msgstr "預設情況下，Octane 會依照你裝置的 CPU 核心數量來啟動相應的 Worker 數。啟動之後，當連入的 HTTP Request 進入你的網站時，就會由這些 Worker 來負責處理。可以在執行 `octane:start` 指令時，使用 `--workers` 選項來手動指定要啟動多少個 Worker："

#: ./docs/8.x/octane.md:247
#: ./docs/9.x/octane.md:250
#: ./docs/10.x/octane.md:348
#: ./docs/11.x/octane.md:347
#: ./docs/master/octane.md:348
msgctxt "CODE: bash"
msgid "php artisan octane:start --workers=4"
msgstr ""

#: ./docs/8.x/octane.md:251
#: ./docs/9.x/octane.md:254
#: ./docs/10.x/octane.md:352
#: ./docs/11.x/octane.md:351
#: ./docs/master/octane.md:352
msgctxt "P"
msgid "If you are using the Swoole application server, you may also specify how many [\"task workers\"](#concurrent-tasks) you wish to start:"
msgstr "使用 Swoole 應用程式伺服器時，還可以指定要啟動多少個「[Task Worker](#concurrent-tasks)」："

#: ./docs/8.x/octane.md:253
#: ./docs/8.x/octane.md:473
#: ./docs/9.x/octane.md:256
#: ./docs/9.x/octane.md:478
#: ./docs/10.x/octane.md:354
#: ./docs/10.x/octane.md:575
#: ./docs/11.x/octane.md:353
#: ./docs/11.x/octane.md:574
#: ./docs/master/octane.md:354
#: ./docs/master/octane.md:575
msgctxt "CODE: bash"
msgid "php artisan octane:start --workers=4 --task-workers=6"
msgstr ""

#: ./docs/10.x/octane.md:254
#: ./docs/11.x/octane.md:253
#: ./docs/master/octane.md:254
msgctxt "H3"
msgid "Serving Your Application via HTTPS"
msgstr ""

#: ./docs/8.x/octane.md:257
#: ./docs/9.x/octane.md:260
#: ./docs/10.x/octane.md:358
#: ./docs/11.x/octane.md:357
#: ./docs/master/octane.md:358
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-the-max-request-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:258
#: ./docs/9.x/octane.md:261
msgctxt "H3"
msgid "Specifying The Max Request Count"
msgstr "指定最大 Request 數"

#: ./docs/8.x/octane.md:260
msgctxt "P"
msgid "To help prevent stray memory leaks, Octane can gracefully restart a worker once it has handled a given number of requests. To instruct Octane to do this, you may use the `--max-requests` option:"
msgstr "為了協助避免造成 Memory Leak，可以讓 Octane 在處理給定數量的 Request 後重新柔性重新啟動 (Gracefully Restart) Worker。若要讓 Octane 在處理一定數量後重新啟動 Server，可以使用 `--max-requests` 選項："

#: ./docs/8.x/octane.md:262
#: ./docs/9.x/octane.md:265
#: ./docs/10.x/octane.md:363
#: ./docs/11.x/octane.md:362
#: ./docs/master/octane.md:363
msgctxt "CODE: bash"
msgid "php artisan octane:start --max-requests=250"
msgstr ""

#: ./docs/10.x/octane.md:263
#: ./docs/11.x/octane.md:262
#: ./docs/master/octane.md:263
msgctxt "H3"
msgid "Serving Your Application via Nginx"
msgstr ""

#: ./docs/9.x/octane.md:263
#: ./docs/10.x/octane.md:361
#: ./docs/11.x/octane.md:360
#: ./docs/master/octane.md:361
msgctxt "P"
msgid "To help prevent stray memory leaks, Octane gracefully restarts any worker once it has handled 500 requests. To adjust this number, you may use the `--max-requests` option:"
msgstr "為了協助避免造成 Memory Leak，Octane 會在任何 Worker 處理 500 個 Request 後將其柔性重新啟動 (Gracefully Restart)。若要調整此數值，可使用 `--max-requests` 選項："

#: ./docs/8.x/octane.md:266
#: ./docs/9.x/octane.md:269
#: ./docs/10.x/octane.md:367
#: ./docs/11.x/octane.md:366
#: ./docs/master/octane.md:367
#~ msgctxt "P"
#~ msgid "<a name=\"reloading-the-workers\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:267
#: ./docs/9.x/octane.md:270
msgctxt "H3"
msgid "Reloading The Workers"
msgstr "重新載入 Worker"

#: ./docs/10.x/octane.md:268
#: ./docs/11.x/octane.md:267
#: ./docs/master/octane.md:268
msgctxt "P"
msgid "In production environments, you should serve your Octane application behind a traditional web server such as Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr "在正式環境中，請在傳統的網頁伺服器 —— 如 Nginx 或 Apache —— 後處理你的 Octane 網站。這樣一來，網站伺服器就可負責處理如圖片或 CSS 等的靜態網站，或是管理 SSL 憑證等。"

#: ./docs/8.x/octane.md:269
#: ./docs/9.x/octane.md:272
#: ./docs/10.x/octane.md:370
#: ./docs/11.x/octane.md:369
#: ./docs/master/octane.md:370
msgctxt "P"
msgid "You may gracefully restart the Octane server's application workers using the `octane:reload` command. Typically, this should be done after deployment so that your newly deployed code is loaded into memory and is used to serve to subsequent requests:"
msgstr "可以使用 `octane:reload` 指令來柔性重啟 Octane 伺服器的應用程式 Worker。一般來說，該指令應在部屬完成後使用，以將新部署的程式碼載入至記憶體當中，並用於處理接下來的 Request："

#: ./docs/8.x/octane.md:271
#: ./docs/9.x/octane.md:274
#: ./docs/10.x/octane.md:372
#: ./docs/11.x/octane.md:371
#: ./docs/master/octane.md:372
msgctxt "CODE: bash"
msgid "php artisan octane:reload"
msgstr ""

#: ./docs/8.x/octane.md:275
#: ./docs/9.x/octane.md:278
#: ./docs/10.x/octane.md:376
#: ./docs/11.x/octane.md:375
#: ./docs/master/octane.md:376
#~ msgctxt "P"
#~ msgid "<a name=\"stopping-the-server\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:276
#: ./docs/9.x/octane.md:279
msgctxt "H3"
msgid "Stopping The Server"
msgstr "停止伺服器"

#: ./docs/8.x/octane.md:278
#: ./docs/9.x/octane.md:281
#: ./docs/10.x/octane.md:379
#: ./docs/11.x/octane.md:378
#: ./docs/master/octane.md:379
msgctxt "P"
msgid "You may stop the Octane server using the `octane:stop` Artisan command:"
msgstr "可使用 `octane:stop` Artisan 指令以停止 Octane 伺服器："

#: ./docs/8.x/octane.md:280
#: ./docs/9.x/octane.md:283
#: ./docs/10.x/octane.md:381
#: ./docs/11.x/octane.md:380
#: ./docs/master/octane.md:381
msgctxt "CODE: bash"
msgid "php artisan octane:stop"
msgstr ""

#: ./docs/8.x/octane.md:284
#: ./docs/9.x/octane.md:287
#: ./docs/10.x/octane.md:385
#: ./docs/11.x/octane.md:384
#: ./docs/master/octane.md:385
#~ msgctxt "P"
#~ msgid "<a name=\"checking-the-server-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:285
#: ./docs/9.x/octane.md:288
msgctxt "H4"
msgid "Checking The Server Status"
msgstr "檢查伺服器狀態"

#: ./docs/8.x/octane.md:287
#: ./docs/9.x/octane.md:290
#: ./docs/10.x/octane.md:388
#: ./docs/11.x/octane.md:387
#: ./docs/master/octane.md:388
msgctxt "P"
msgid "You may check the current status of the Octane server using the `octane:status` Artisan command:"
msgstr "可使用 `octane:status` Artisan 指令來檢查目前的 Octane 伺服器狀態："

#: ./docs/8.x/octane.md:289
#: ./docs/9.x/octane.md:292
#: ./docs/10.x/octane.md:390
#: ./docs/11.x/octane.md:389
#: ./docs/master/octane.md:390
msgctxt "CODE: bash"
msgid "php artisan octane:status"
msgstr ""

#: ./docs/8.x/octane.md:293
#: ./docs/9.x/octane.md:296
#: ./docs/10.x/octane.md:394
#: ./docs/11.x/octane.md:393
#: ./docs/master/octane.md:394
#~ msgctxt "P"
#~ msgid "<a name=\"dependency-injection-and-octane\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:294
#: ./docs/9.x/octane.md:297
msgctxt "H2"
msgid "Dependency Injection & Octane"
msgstr "相依性插入與 Octane"

#: ./docs/8.x/octane.md:296
#: ./docs/9.x/octane.md:299
#: ./docs/10.x/octane.md:397
#: ./docs/11.x/octane.md:396
#: ./docs/master/octane.md:397
msgctxt "P"
msgid "Since Octane boots your application once and keeps it in memory while serving requests, there are a few caveats you should consider while building your application. For example, the `register` and `boot` methods of your application's service providers will only be executed once when the request worker initially boots. On subsequent requests, the same application instance will be reused."
msgstr "啟動 Octane 後，由於 Octane 在處理 Request 時只會一次性地將整個網站程式碼載入進記憶體中，因此在製作網站時有一些需要注意的點。舉例來說，在專案的 Service Provider 內，各個 `register` 與 `boot` 方法都只會在 Request Worker 第一次載入的時候被執行一次，並接下來的 Request 中重複使用同一個 Application 實體。"

#: ./docs/8.x/octane.md:298
#: ./docs/9.x/octane.md:301
#: ./docs/10.x/octane.md:399
#: ./docs/11.x/octane.md:398
#: ./docs/master/octane.md:399
msgctxt "P"
msgid "In light of this, you should take special care when injecting the application service container or request into any object's constructor. By doing so, that object may have a  stale version of the container or request on subsequent requests."
msgstr ""

#: ./docs/8.x/octane.md:300
#: ./docs/9.x/octane.md:303
#: ./docs/10.x/octane.md:401
#: ./docs/11.x/octane.md:400
#: ./docs/master/octane.md:401
msgctxt "P"
msgid "Octane will automatically handle resetting any first-party framework state between requests. However, Octane does not always know how to reset the global state created by your application. Therefore, you should be aware of how to build your application in a way that is Octane friendly. Below, we will discuss the most common situations that may cause problems while using Octane."
msgstr "Octane 會自動在各個 Request 間重設 Laravel 第一方的物件狀態 (State)。不過，Octane 無從得知如何處理您的專案所建立的全域狀態。因此，在製作專案時，必須考量到如何針對 Octane 作出調整。在接下來的文件中，我們會討論使用 Octane 時可能會遇到的常見問題。"

#: ./docs/8.x/octane.md:302
#: ./docs/9.x/octane.md:305
#: ./docs/10.x/octane.md:403
#: ./docs/11.x/octane.md:402
#: ./docs/master/octane.md:403
#~ msgctxt "P"
#~ msgid "<a name=\"container-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:303
#: ./docs/9.x/octane.md:306
#: ./docs/10.x/octane.md:404
#: ./docs/11.x/octane.md:403
#: ./docs/master/octane.md:404
msgctxt "H3"
msgid "Container Injection"
msgstr "插入 Container"

#: ./docs/8.x/octane.md:305
#: ./docs/9.x/octane.md:308
#: ./docs/10.x/octane.md:406
#: ./docs/11.x/octane.md:405
#: ./docs/master/octane.md:406
msgctxt "P"
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire application service container into an object that is bound as a singleton:"
msgstr "一般來說，我們應該避免將 Service Container 或 HTTP Request 實體插入到其他物件的 Constructor 中。舉例來說，下列繫結會將整個 Service Container 插入到被繫結為單例 (Singleton) 的物件中："

#: ./docs/8.x/octane.md:307
#: ./docs/9.x/octane.md:310
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:323
#: ./docs/9.x/octane.md:326
#: ./docs/10.x/octane.md:423
#: ./docs/11.x/octane.md:422
#: ./docs/master/octane.md:423
msgctxt "P"
msgid "In this example, if the `Service` instance is resolved during the application boot process, the container will be injected into the service and that same container will be held by the `Service` instance on subsequent requests. This **may** not be a problem for your particular application; however, it can lead to the container unexpectedly missing bindings that were added later in the boot cycle or by a subsequent request."
msgstr "在這個例子中，若該 `Service` 實體是在網站啟動過程中被解析的，則在解析時，會插入 Container 到該 Service 中。在接下來的 Request 中，Service 實體上都將擁有相同的 Container 實體。對於部分專案來說，此狀況 **或許**不是個問題。不過，在啟動時，若由繫結是在解析 Service 實體之後才被加入到 Container 中的，或是在接下來的 Request 中有其他繫結被加入到 Container 中，則 Service 實體上的 Container 可能會缺少這些繫結。"

#: ./docs/8.x/octane.md:325
#: ./docs/9.x/octane.md:328
#: ./docs/10.x/octane.md:425
#: ./docs/11.x/octane.md:424
#: ./docs/master/octane.md:425
msgctxt "P"
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a container resolver closure into the service that always resolves the current container instance:"
msgstr "針對此問題的解決方法有兩種，一種方法是不用單例來註冊繫結，而另一種方法則是將一個用於解析 Container 的 ^[Closure](閉包) 插入到 Service 中，以隨時解析為最新的 Container 實體："

#: ./docs/10.x/octane.md:327
#: ./docs/11.x/octane.md:326
#: ./docs/master/octane.md:327
msgctxt "H3"
msgid "Watching for File Changes"
msgstr ""

#: ./docs/8.x/octane.md:327
#: ./docs/9.x/octane.md:330
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:340
#: ./docs/9.x/octane.md:343
#: ./docs/10.x/octane.md:441
#: ./docs/11.x/octane.md:440
#: ./docs/master/octane.md:441
msgctxt "P"
msgid "The global `app` helper and the `Container::getInstance()` method will always return the latest version of the application container."
msgstr "全域補助函式 `app` 以及 `Container::getInstance()` 方法都會回傳最新版的 Container。"

#: ./docs/8.x/octane.md:342
#: ./docs/9.x/octane.md:345
#: ./docs/10.x/octane.md:443
#: ./docs/11.x/octane.md:442
#: ./docs/master/octane.md:443
#~ msgctxt "P"
#~ msgid "<a name=\"request-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:343
#: ./docs/9.x/octane.md:346
#: ./docs/10.x/octane.md:444
#: ./docs/11.x/octane.md:443
#: ./docs/master/octane.md:444
msgctxt "H3"
msgid "Request Injection"
msgstr "插入 Request"

#: ./docs/10.x/octane.md:344
#: ./docs/11.x/octane.md:343
#: ./docs/master/octane.md:344
msgctxt "H3"
msgid "Specifying the Worker Count"
msgstr ""

#: ./docs/8.x/octane.md:345
#: ./docs/9.x/octane.md:348
#: ./docs/10.x/octane.md:446
#: ./docs/11.x/octane.md:445
#: ./docs/master/octane.md:446
msgctxt "P"
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire request instance into an object that is bound as a singleton:"
msgstr "一般來說，我們應該避免將 Service Container 或 HTTP Request 實體插入到其他物件的 Constructor 中。舉例來說，下列繫結會將整個 Request 實體插入到被繫結為單例 (Singleton) 的物件中："

#: ./docs/8.x/octane.md:347
#: ./docs/9.x/octane.md:350
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:359
#: ./docs/11.x/octane.md:358
#: ./docs/master/octane.md:359
msgctxt "H3"
msgid "Specifying the Max Request Count"
msgstr ""

#: ./docs/8.x/octane.md:363
#: ./docs/9.x/octane.md:366
#: ./docs/10.x/octane.md:463
#: ./docs/11.x/octane.md:462
#: ./docs/master/octane.md:463
msgctxt "P"
msgid "In this example, if the `Service` instance is resolved during the application boot process, the HTTP request will be injected into the service and that same request will be held by the `Service` instance on subsequent requests. Therefore, all headers, input, and query string data will be incorrect, as well as all other request data."
msgstr "在此例子中，若 `Service` 實體是在網站啟動過程中被解析的，則 HTTP Request 實體會被插入到 Service 實體內，並且在接下來的 Request 中，該 Service 實體都將擁有同一個 Request 實體。因此，所有的 Header、Input、Query String，以及其他 Request 資料都會是不正確的。"

#: ./docs/8.x/octane.md:365
#: ./docs/9.x/octane.md:368
#: ./docs/10.x/octane.md:465
#: ./docs/11.x/octane.md:464
#: ./docs/master/octane.md:465
msgctxt "P"
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a request resolver closure into the service that always resolves the current request instance. Or, the most recommended approach is simply to pass the specific request information your object needs to one of the object's methods at runtime:"
msgstr "針對此問題，有幾種解決方法。第一種方法就是不要使用單例來註冊繫結，或者，可以將一個用於解析 Request 的 Closure 傳入給 Service 以隨時解析最新的 Request 實體。另一種方法，也是最推薦的作法，就是在執行階段時，只在 Request 中取出該物件所需的資訊，然後只傳入這些資訊到該物件的方法中："

#: ./docs/8.x/octane.md:367
#: ./docs/9.x/octane.md:370
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n"
"\n"
"// Or...\n"
"\n"
"$service->method($request->input('name'));"
msgstr ""

#: ./docs/10.x/octane.md:368
#: ./docs/11.x/octane.md:367
#: ./docs/master/octane.md:368
msgctxt "H3"
msgid "Reloading the Workers"
msgstr ""

#: ./docs/10.x/octane.md:377
#: ./docs/11.x/octane.md:376
#: ./docs/master/octane.md:377
msgctxt "H3"
msgid "Stopping the Server"
msgstr ""

#: ./docs/8.x/octane.md:383
#: ./docs/9.x/octane.md:386
#: ./docs/10.x/octane.md:484
#: ./docs/11.x/octane.md:483
#: ./docs/master/octane.md:484
msgctxt "P"
msgid "The global `request` helper will always return the request the application is currently handling and is therefore safe to use within your application."
msgstr "全域輔助函式 `request` 會回傳網站目前正在處理的 Request，因此在專案中可以安全地使用該函式。"

#: ./docs/8.x/octane.md:385
#: ./docs/9.x/octane.md:389
#: ./docs/10.x/octane.md:487
#: ./docs/11.x/octane.md:486
#: ./docs/master/octane.md:487
msgctxt "P"
msgid "It is acceptable to type-hint the `Illuminate\\Http\\Request` instance on your controller methods and route closures."
msgstr "在 Controller 方法或 Route Closure 中，可型別提示 `Illuminate\\Http\\Request`。"

#: ./docs/10.x/octane.md:386
#: ./docs/11.x/octane.md:385
#: ./docs/master/octane.md:386
msgctxt "H4"
msgid "Checking the Server Status"
msgstr ""

#: ./docs/8.x/octane.md:387
#: ./docs/9.x/octane.md:391
#: ./docs/10.x/octane.md:489
#: ./docs/11.x/octane.md:488
#: ./docs/master/octane.md:489
#~ msgctxt "P"
#~ msgid "<a name=\"configuration-repository-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:388
#: ./docs/9.x/octane.md:392
#: ./docs/10.x/octane.md:490
#: ./docs/11.x/octane.md:489
#: ./docs/master/octane.md:490
msgctxt "H3"
msgid "Configuration Repository Injection"
msgstr "插入 Configuration Repository"

#: ./docs/8.x/octane.md:390
#: ./docs/9.x/octane.md:394
#: ./docs/10.x/octane.md:492
#: ./docs/11.x/octane.md:491
#: ./docs/master/octane.md:492
msgctxt "P"
msgid "In general, you should avoid injecting the configuration repository instance into the constructors of other objects. For example, the following binding injects the configuration repository into an object that is bound as a singleton:"
msgstr "一般來說，我們應該避免將 Configuration Repository 實體插入到其他物件的 Constructor 中。舉例來說，下列繫結會將整個 Configuration Repository 插入到被繫結為單例 (Singleton) 的物件中："

#: ./docs/8.x/octane.md:392
#: ./docs/9.x/octane.md:396
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:395
#: ./docs/11.x/octane.md:394
#: ./docs/master/octane.md:395
msgctxt "H2"
msgid "Dependency Injection and Octane"
msgstr ""

#: ./docs/10.x/octane.md:408
#: ./docs/11.x/octane.md:407
#: ./docs/master/octane.md:408
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:408
#: ./docs/9.x/octane.md:412
#: ./docs/10.x/octane.md:509
#: ./docs/11.x/octane.md:508
#: ./docs/master/octane.md:509
msgctxt "P"
msgid "In this example, if the configuration values change between requests, that service will not have access to the new values because it's depending on the original repository instance."
msgstr "在這個例子中，若在各個 Request 間，設定值有發生變動，則 Service 將無法存取到最新的值，因為 Service 物件仍相依於原始的 Repository 實體。"

#: ./docs/8.x/octane.md:410
#: ./docs/9.x/octane.md:414
#: ./docs/10.x/octane.md:511
#: ./docs/11.x/octane.md:510
#: ./docs/master/octane.md:511
msgctxt "P"
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a configuration repository resolver closure to the class:"
msgstr "要解決此問題，有兩種做法。第一種方法就是不要使用單例來繫結，而第二種方法則是插入一個用於解析 Configuration Repository 的 Closure 至該類別中："

#: ./docs/8.x/octane.md:412
#: ./docs/9.x/octane.md:416
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:425
#: ./docs/9.x/octane.md:429
#: ./docs/10.x/octane.md:527
#: ./docs/11.x/octane.md:526
#: ./docs/master/octane.md:527
msgctxt "P"
msgid "The global `config` will always return the latest version of the configuration repository and is therefore safe to use within your application."
msgstr "全域函式 `config` 會回傳最新版本的 Configuration Repository，因此可以安全地在專案中使用該函式。"

#: ./docs/10.x/octane.md:427
#: ./docs/11.x/octane.md:426
#: ./docs/master/octane.md:427
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:427
#: ./docs/9.x/octane.md:431
#: ./docs/10.x/octane.md:529
#: ./docs/11.x/octane.md:528
#: ./docs/master/octane.md:529
#~ msgctxt "P"
#~ msgid "<a name=\"managing-memory-leaks\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:428
#: ./docs/9.x/octane.md:432
#: ./docs/10.x/octane.md:530
#: ./docs/11.x/octane.md:529
#: ./docs/master/octane.md:530
msgctxt "H3"
msgid "Managing Memory Leaks"
msgstr "管理 ^[Memory Leak](記憶體流失)"

#: ./docs/8.x/octane.md:430
#: ./docs/9.x/octane.md:434
#: ./docs/10.x/octane.md:532
#: ./docs/11.x/octane.md:531
#: ./docs/master/octane.md:532
msgctxt "P"
msgid "Remember, Octane keeps your application in memory between requests; therefore, adding data to a statically maintained array will result in a memory leak. For example, the following controller has a memory leak since each request to the application will continue to add data to the static `$data` array:"
msgstr "再次提醒，由於 Octane 會在各個 Request 間將網站程式保留在記憶體中，因此，若將資料加入到靜態維護的陣列將導致 Memory Leak。舉例來說，在下列 Controller 中，由於每個 Request 都會向靜態 `$data` 陣列加入資料，因此會導致 Memory Leak："

#: ./docs/8.x/octane.md:432
#: ./docs/9.x/octane.md:436
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/octane.md:448
#: ./docs/11.x/octane.md:447
#: ./docs/master/octane.md:448
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:451
#: ./docs/9.x/octane.md:455
#: ./docs/10.x/octane.md:552
#: ./docs/11.x/octane.md:551
#: ./docs/master/octane.md:552
msgctxt "P"
msgid "While building your application, you should take special care to avoid creating these types of memory leaks. It is recommended that you monitor your application's memory usage during local development to ensure you are not introducing new memory leaks into your application."
msgstr "在製作網站時，應特別注意以避免造成這些類型的 Memory Leak。建議在本機開發環境上監控網站的記憶體用量，以確保沒有在網站中造成 Memory Leak。"

#: ./docs/8.x/octane.md:453
#: ./docs/9.x/octane.md:457
#: ./docs/10.x/octane.md:554
#: ./docs/11.x/octane.md:553
#: ./docs/master/octane.md:554
#~ msgctxt "P"
#~ msgid "<a name=\"concurrent-tasks\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:454
#: ./docs/9.x/octane.md:458
#: ./docs/10.x/octane.md:555
#: ./docs/11.x/octane.md:554
#: ./docs/master/octane.md:555
msgctxt "H2"
msgid "Concurrent Tasks"
msgstr "併行的任務"

#: ./docs/8.x/octane.md:456
#: ./docs/8.x/octane.md:480
#: ./docs/8.x/octane.md:502
#: ./docs/8.x/octane.md:530
#: ./docs/9.x/octane.md:461
#: ./docs/9.x/octane.md:488
#: ./docs/9.x/octane.md:511
#: ./docs/9.x/octane.md:541
#: ./docs/10.x/octane.md:558
#: ./docs/10.x/octane.md:585
#: ./docs/10.x/octane.md:608
#: ./docs/10.x/octane.md:638
#: ./docs/11.x/octane.md:557
#: ./docs/11.x/octane.md:584
#: ./docs/11.x/octane.md:607
#: ./docs/11.x/octane.md:637
#: ./docs/master/octane.md:558
#: ./docs/master/octane.md:585
#: ./docs/master/octane.md:608
#: ./docs/master/octane.md:638
msgctxt "P"
msgid "This feature requires [Swoole](#swoole)."
msgstr "使用此功能時必須使用 [Swoole](#swoole)。"

#: ./docs/8.x/octane.md:458
#: ./docs/9.x/octane.md:463
#: ./docs/10.x/octane.md:560
#: ./docs/11.x/octane.md:559
#: ./docs/master/octane.md:560
msgctxt "P"
msgid "When using Swoole, you may execute operations concurrently via light-weight background tasks. You may accomplish this using Octane's `concurrently` method. You may combine this method with PHP array destructuring to retrieve the results of each operation:"
msgstr "在使用 Swoole 時，只需要使用 Octane 的 `concurrently` 方法，就可以通過輕型的背景任務來併行執行一些動作。可以將 `concurrently` 方法與 PHP 的陣列解構 (Destructure) 搭配使用以取得各個動作的執行結果："

#: ./docs/8.x/octane.md:460
#: ./docs/9.x/octane.md:465
#: ./docs/10.x/octane.md:562
#: ./docs/11.x/octane.md:561
#: ./docs/master/octane.md:562
msgctxt "CODE: php"
msgid ""
"use App\\Models\\User;\n"
"use App\\Models\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);"
msgstr ""

#: ./docs/10.x/octane.md:467
#: ./docs/11.x/octane.md:466
#: ./docs/master/octane.md:467
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app['request']);\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function (Application $app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n"
"\n"
"// Or...\n"
"\n"
"$service->method($request->input('name'));"
msgstr ""

#: ./docs/8.x/octane.md:471
#: ./docs/9.x/octane.md:476
#: ./docs/10.x/octane.md:573
#: ./docs/11.x/octane.md:572
#: ./docs/master/octane.md:573
msgctxt "P"
msgid "Concurrent tasks processed by Octane utilize Swoole's \"task workers\", and execute within an entirely different process than the incoming request. The amount of workers available to process concurrent tasks is determined by the `--task-workers` directive on the `octane:start` command:"
msgstr "Octane 使用 Swoole 的「Task Worker」來處理併行的任務，並在與處理連入 Request 不同的處理程序中執行。在執行 `octane:start` 指令時，可以使用 `--task-workers` 指示詞來指定處理併行任務時可用的 Worker 數量："

#: ./docs/8.x/octane.md:477
#: ./docs/9.x/octane.md:484
#: ./docs/10.x/octane.md:581
#: ./docs/11.x/octane.md:580
#: ./docs/master/octane.md:581
#~ msgctxt "P"
#~ msgid "<a name=\"ticks-and-intervals\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:478
#: ./docs/9.x/octane.md:485
msgctxt "H2"
msgid "Ticks & Intervals"
msgstr "Tick 與 Interval"

#: ./docs/8.x/octane.md:482
#: ./docs/9.x/octane.md:490
#: ./docs/10.x/octane.md:587
#: ./docs/11.x/octane.md:586
#: ./docs/master/octane.md:587
msgctxt "P"
msgid "When using Swoole, you may register \"tick\" operations that will be executed every specified number of seconds. You may register \"tick\" callbacks via the `tick` method. The first argument provided to the `tick` method should be a string that represents the name of the ticker. The second argument should be a callable that will be invoked at the specified interval."
msgstr "在使用 Swoole 時，可以註冊一個「Tick」動作。每隔指定秒數時，就會執行一次該動作。可以使用 `tick` 方法來註冊「Tick」^[Callback](回呼)。`tick` 方法的第一個引數為字串，代表該 Ticker 的名稱。第二個引數則為每個特定間隔會被呼叫的 Callable。"

#: ./docs/9.x/octane.md:482
#: ./docs/10.x/octane.md:579
#: ./docs/11.x/octane.md:578
#: ./docs/master/octane.md:579
msgctxt "P"
msgid "When invoking the `concurrently` method, you should not provide more than 1024 tasks due to limitations imposed by Swoole's task system."
msgstr "呼叫 `concurrently` 方法時，由於 Swoole 任務系統的限制，請不要傳入超過 1024 個任務。"

#: ./docs/8.x/octane.md:484
#: ./docs/9.x/octane.md:492
#: ./docs/10.x/octane.md:589
#: ./docs/11.x/octane.md:588
#: ./docs/master/octane.md:589
msgctxt "P"
msgid "In this example, we will register a closure to be invoked every 10 seconds. Typically, the `tick` method should be called within the `boot` method of one of your application's service providers:"
msgstr "在這個例子中，我們會註冊一個沒隔 10 秒會被執行的 Closure。一般來說，應在專案中某個 Service Provider 內的 `boot` 方法中呼叫 `tick` 方法："

#: ./docs/8.x/octane.md:486
#: ./docs/9.x/octane.md:494
#: ./docs/10.x/octane.md:591
#: ./docs/11.x/octane.md:590
#: ./docs/master/octane.md:591
msgctxt "CODE: php"
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);"
msgstr ""

#: ./docs/8.x/octane.md:491
#: ./docs/9.x/octane.md:499
#: ./docs/10.x/octane.md:596
#: ./docs/11.x/octane.md:595
#: ./docs/master/octane.md:596
msgctxt "P"
msgid "Using the `immediate` method, you may instruct Octane to immediately invoke the tick callback when the Octane server initially boots, and every N seconds thereafter:"
msgstr "使用 `immediate` 方法，就可以讓 Octane 在 Octane 伺服器一啟動後馬上呼叫該 Tick Callback，並在接下來的每 N 秒執行："

#: ./docs/8.x/octane.md:493
#: ./docs/9.x/octane.md:501
#: ./docs/10.x/octane.md:598
#: ./docs/11.x/octane.md:597
#: ./docs/master/octane.md:598
msgctxt "CODE: php"
msgid ""
"Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();"
msgstr ""

#: ./docs/10.x/octane.md:494
#: ./docs/11.x/octane.md:493
#: ./docs/master/octane.md:494
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->singleton(Service::class, function (Application $app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:499
#: ./docs/9.x/octane.md:507
#: ./docs/10.x/octane.md:604
#: ./docs/11.x/octane.md:603
#: ./docs/master/octane.md:604
#~ msgctxt "P"
#~ msgid "<a name=\"the-octane-cache\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:500
#: ./docs/9.x/octane.md:508
#: ./docs/10.x/octane.md:605
#: ./docs/11.x/octane.md:604
#: ./docs/master/octane.md:605
msgctxt "H2"
msgid "The Octane Cache"
msgstr "Octane Cache"

#: ./docs/8.x/octane.md:504
#: ./docs/9.x/octane.md:513
#: ./docs/10.x/octane.md:610
#: ./docs/11.x/octane.md:609
#: ./docs/master/octane.md:610
msgctxt "P"
msgid "When using Swoole, you may leverage the Octane cache driver, which provides read and write speeds of up to 2 million operations per second. Therefore, this cache driver is an excellent choice for applications that need extreme read / write speeds from their caching layer."
msgstr "使用 Swoole 時，可以使用 Octane 的 Cache Driver。Octane 的 Cache Driver 提供了最快 2 百萬讀寫 / 秒的讀寫速度。因此，對於在快取層上需要高度讀寫速度的專案，Octane 的 Cache Driver 是很好的選擇。"

#: ./docs/8.x/octane.md:506
#: ./docs/9.x/octane.md:515
#: ./docs/10.x/octane.md:612
#: ./docs/11.x/octane.md:611
#: ./docs/master/octane.md:612
msgctxt "P"
msgid "This cache driver is powered by [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). All data stored in the cache is available to all workers on the server. However, the cached data will be flushed when the server is restarted:"
msgstr "該 Cache Driver 由 [Swoole Table](https://www.swoole.co.uk/docs/modules/swoole-table) 驅動。儲存在 Cache 中的所有資料可在 Swoole Server 中的所有 Worker 中取用。不過，若重新啟動 Server，則已快取的資料會被清除。"

#: ./docs/8.x/octane.md:508
#: ./docs/9.x/octane.md:517
#: ./docs/10.x/octane.md:614
#: ./docs/11.x/octane.md:613
#: ./docs/master/octane.md:614
msgctxt "CODE: php"
msgid "Cache::store('octane')->put('framework', 'Laravel', 30);"
msgstr ""

#: ./docs/8.x/octane.md:512
#: ./docs/9.x/octane.md:522
#: ./docs/10.x/octane.md:619
#: ./docs/11.x/octane.md:618
#: ./docs/master/octane.md:619
msgctxt "P"
msgid "The maximum number of entries allowed in the Octane cache may be defined in your application's `octane` configuration file."
msgstr "可存在 Octane Cache 中的最大資料筆數可在專案的 `octane` 設定檔中定義。"

#: ./docs/10.x/octane.md:513
#: ./docs/11.x/octane.md:512
#: ./docs/master/octane.md:513
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Container\\Container;\n"
"use Illuminate\\Contracts\\Foundation\\Application;\n"
"\n"
"$this->app->bind(Service::class, function (Application $app) {\n"
"    return new Service($app->make('config'));\n"
"});\n"
"\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});"
msgstr ""

#: ./docs/8.x/octane.md:514
#: ./docs/9.x/octane.md:524
#: ./docs/10.x/octane.md:621
#: ./docs/11.x/octane.md:620
#: ./docs/master/octane.md:621
#~ msgctxt "P"
#~ msgid "<a name=\"cache-intervals\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:515
#: ./docs/9.x/octane.md:525
#: ./docs/10.x/octane.md:622
#: ./docs/11.x/octane.md:621
#: ./docs/master/octane.md:622
msgctxt "H3"
msgid "Cache Intervals"
msgstr "Cache 週期"

#: ./docs/8.x/octane.md:517
#: ./docs/9.x/octane.md:527
#: ./docs/10.x/octane.md:624
#: ./docs/11.x/octane.md:623
#: ./docs/master/octane.md:624
msgctxt "P"
msgid "In addition to the typical methods provided by Laravel's cache system, the Octane cache driver features interval based caches. These caches are automatically refreshed at the specified interval and should be registered within the `boot` method of one of your application's service providers. For example, the following cache will be refreshed every five seconds:"
msgstr "除了 Laravel 的 Cache 系統所提供的一般方法外，Octane 的 Cache Driver 還提供了基於週期的快取。這些快取會在特定週期後被自動重新整理。需要在專案中某個 Service Provider 內的 `boot` 方法中註冊這些快取。舉例來說，下列快取每隔 5 秒就會被重新整理："

#: ./docs/8.x/octane.md:519
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)"
msgstr ""

#: ./docs/8.x/octane.md:527
#: ./docs/9.x/octane.md:537
#: ./docs/10.x/octane.md:634
#: ./docs/11.x/octane.md:633
#: ./docs/master/octane.md:634
#~ msgctxt "P"
#~ msgid "<a name=\"tables\"></a>"
#~ msgstr ""

#: ./docs/8.x/octane.md:528
#: ./docs/9.x/octane.md:538
#: ./docs/10.x/octane.md:635
#: ./docs/11.x/octane.md:634
#: ./docs/master/octane.md:635
msgctxt "H2"
msgid "Tables"
msgstr "Table"

#: ./docs/9.x/octane.md:529
#: ./docs/10.x/octane.md:626
#: ./docs/11.x/octane.md:625
#: ./docs/master/octane.md:626
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Support\\Str;\n"
"\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5);"
msgstr ""

#: ./docs/8.x/octane.md:532
#: ./docs/9.x/octane.md:543
#: ./docs/10.x/octane.md:640
#: ./docs/11.x/octane.md:639
#: ./docs/master/octane.md:640
msgctxt "P"
msgid "When using Swoole, you may define and interact with your own arbitrary [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). Swoole tables provide extreme performance throughput and the data in these tables can be accessed by all workers on the server. However, the data within them will be lost when the server is restarted."
msgstr "使用 Swoole 時，也可以定義與使用任意的 [Swoole Table](https://www.swoole.co.uk/docs/modules/swoole-table)。Swoole Table 提供了超快的吞吐效能。而存在 Swoole Table 中的資料可被 Swoole Server 中的所有 Worker 存取。不過，一旦重新啟動 Server，存在 Swoole Table 中的資料就會消失。"

#: ./docs/10.x/octane.md:534
#: ./docs/11.x/octane.md:533
#: ./docs/master/octane.md:534
msgctxt "CODE: php"
msgid ""
"use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" */\n"
"public function index(Request $request): array\n"
"{\n"
"    Service::$data[] = Str::random(10);\n"
"\n"
"    return [\n"
"        // ...\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/octane.md:534
#: ./docs/9.x/octane.md:545
#: ./docs/10.x/octane.md:642
#: ./docs/11.x/octane.md:641
#: ./docs/master/octane.md:642
msgctxt "P"
msgid "Tables should be defined within the `tables` configuration array of your application's `octane` configuration file. An example table that allows a maximum of 1000 rows is already configured for you. The maximum size of string columns may be configured by specifying the column size after the column type as seen below:"
msgstr "可以在專案的 `octane` 設定檔中 `tables` 設定陣列內定義 Swoole Table。在設定檔中，已包含了一個允許最多 1000 行資料的範例 Table 定義。可像下面範例這樣在欄位型別後指定字串欄位的最大大小："

#: ./docs/8.x/octane.md:536
#: ./docs/9.x/octane.md:547
#: ./docs/10.x/octane.md:644
#: ./docs/11.x/octane.md:643
#: ./docs/master/octane.md:644
msgctxt "CODE: php"
msgid ""
"'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/octane.md:545
#: ./docs/9.x/octane.md:556
#: ./docs/10.x/octane.md:653
#: ./docs/11.x/octane.md:652
#: ./docs/master/octane.md:653
msgctxt "P"
msgid "To access a table, you may use the `Octane::table` method:"
msgstr "若要存取 Swoole Table，可使用 `Octane::table` 方法："

#: ./docs/8.x/octane.md:547
#: ./docs/9.x/octane.md:558
#: ./docs/10.x/octane.md:655
#: ./docs/11.x/octane.md:654
#: ./docs/master/octane.md:655
msgctxt "CODE: php"
msgid ""
"use Laravel\\Octane\\Facades\\Octane;\n"
"\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n"
"\n"
"return Octane::table('example')->get('uuid');"
msgstr ""

#: ./docs/8.x/octane.md:558
#: ./docs/9.x/octane.md:570
#: ./docs/10.x/octane.md:667
#: ./docs/11.x/octane.md:666
#: ./docs/master/octane.md:667
msgctxt "P"
msgid "The column types supported by Swoole tables are: `string`, `int`, and `float`."
msgstr "Swoole 所支援的欄位型別為：`string`、`int`，與 `float`。"

#: ./docs/10.x/octane.md:582
#: ./docs/11.x/octane.md:581
#: ./docs/master/octane.md:582
msgctxt "H2"
msgid "Ticks and Intervals"
msgstr ""
