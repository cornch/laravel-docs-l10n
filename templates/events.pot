msgid ""
msgstr ""

#: ./docs/8.x/events.md:1
#: ./docs/9.x/events.md:1
#: ./docs/10.x/events.md:1
#: ./docs/11.x/events.md:1
#: ./docs/master/events.md:1
msgctxt "H1"
msgid "Events"
msgstr ""

#: ./docs/8.x/events.md:3
#: ./docs/9.x/events.md:3
#: ./docs/10.x/events.md:3
#: ./docs/11.x/events.md:3
#: ./docs/master/events.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/events.md:4
#: ./docs/11.x/events.md:5
#: ./docs/master/events.md:5
msgctxt "P"
msgid "[Registering Events and Listeners](#registering-events-and-listeners)"
msgstr ""

#: ./docs/8.x/events.md:4
#: ./docs/9.x/events.md:4
msgctxt "P"
msgid "[Registering Events & Listeners](#registering-events-and-listeners)"
msgstr ""

#: ./docs/10.x/events.md:5
#: ./docs/11.x/events.md:4
#: ./docs/master/events.md:4
msgctxt "P"
msgid "[Generating Events and Listeners](#generating-events-and-listeners)"
msgstr ""

#: ./docs/8.x/events.md:5
#: ./docs/9.x/events.md:5
msgctxt "P"
msgid "[Generating Events & Listeners](#generating-events-and-listeners)"
msgstr ""

#: ./docs/8.x/events.md:6
#: ./docs/9.x/events.md:6
#: ./docs/10.x/events.md:6
#: ./docs/11.x/events.md:7
#: ./docs/master/events.md:7
msgctxt "P"
msgid "[Manually Registering Events](#manually-registering-events)"
msgstr ""

#: ./docs/8.x/events.md:7
#: ./docs/9.x/events.md:7
#: ./docs/10.x/events.md:7
#: ./docs/11.x/events.md:6
#: ./docs/master/events.md:6
msgctxt "P"
msgid "[Event Discovery](#event-discovery)"
msgstr ""

#: ./docs/11.x/events.md:8
#: ./docs/master/events.md:8
msgctxt "P"
msgid "[Closure Listeners](#closure-listeners)"
msgstr ""

#: ./docs/8.x/events.md:8
#: ./docs/9.x/events.md:8
#: ./docs/10.x/events.md:8
#: ./docs/11.x/events.md:9
#: ./docs/master/events.md:9
msgctxt "P"
msgid "[Defining Events](#defining-events)"
msgstr ""

#: ./docs/8.x/events.md:9
#: ./docs/9.x/events.md:9
#: ./docs/10.x/events.md:9
#: ./docs/11.x/events.md:10
#: ./docs/master/events.md:10
msgctxt "P"
msgid "[Defining Listeners](#defining-listeners)"
msgstr ""

#: ./docs/8.x/events.md:10
#: ./docs/9.x/events.md:10
#: ./docs/10.x/events.md:10
#: ./docs/11.x/events.md:11
#: ./docs/master/events.md:11
msgctxt "P"
msgid "[Queued Event Listeners](#queued-event-listeners)"
msgstr ""

#: ./docs/10.x/events.md:11
#: ./docs/11.x/events.md:12
#: ./docs/master/events.md:12
msgctxt "P"
msgid "[Manually Interacting With the Queue](#manually-interacting-with-the-queue)"
msgstr ""

#: ./docs/8.x/events.md:11
#: ./docs/9.x/events.md:11
msgctxt "P"
msgid "[Manually Interacting With The Queue](#manually-interacting-with-the-queue)"
msgstr ""

#: ./docs/10.x/events.md:12
#: ./docs/11.x/events.md:13
#: ./docs/master/events.md:13
msgctxt "P"
msgid "[Queued Event Listeners and Database Transactions](#queued-event-listeners-and-database-transactions)"
msgstr ""

#: ./docs/8.x/events.md:12
#: ./docs/9.x/events.md:12
msgctxt "P"
msgid "[Queued Event Listeners & Database Transactions](#queued-event-listeners-and-database-transactions)"
msgstr ""

#: ./docs/8.x/events.md:13
#: ./docs/9.x/events.md:13
#: ./docs/10.x/events.md:13
#: ./docs/11.x/events.md:14
#: ./docs/master/events.md:14
msgctxt "P"
msgid "[Handling Failed Jobs](#handling-failed-jobs)"
msgstr ""

#: ./docs/8.x/events.md:14
#: ./docs/9.x/events.md:14
#: ./docs/10.x/events.md:14
#: ./docs/11.x/events.md:15
#: ./docs/master/events.md:15
msgctxt "P"
msgid "[Dispatching Events](#dispatching-events)"
msgstr ""

#: ./docs/10.x/events.md:15
#: ./docs/11.x/events.md:16
#: ./docs/master/events.md:16
msgctxt "P"
msgid "[Dispatching Events After Database Transactions](#dispatching-events-after-database-transactions)"
msgstr ""

#: ./docs/8.x/events.md:15
#: ./docs/9.x/events.md:15
#: ./docs/10.x/events.md:16
#: ./docs/11.x/events.md:17
#: ./docs/master/events.md:17
msgctxt "P"
msgid "[Event Subscribers](#event-subscribers)"
msgstr ""

#: ./docs/8.x/events.md:16
#: ./docs/9.x/events.md:16
#: ./docs/10.x/events.md:17
#: ./docs/11.x/events.md:18
#: ./docs/master/events.md:18
msgctxt "P"
msgid "[Writing Event Subscribers](#writing-event-subscribers)"
msgstr ""

#: ./docs/8.x/events.md:17
#: ./docs/9.x/events.md:17
#: ./docs/10.x/events.md:18
#: ./docs/11.x/events.md:19
#: ./docs/master/events.md:19
msgctxt "P"
msgid "[Registering Event Subscribers](#registering-event-subscribers)"
msgstr ""

#: ./docs/10.x/events.md:19
#: ./docs/11.x/events.md:20
#: ./docs/master/events.md:20
msgctxt "P"
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/8.x/events.md:19
#: ./docs/9.x/events.md:19
#: ./docs/10.x/events.md:23
#: ./docs/11.x/events.md:24
#: ./docs/master/events.md:24
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:20
#: ./docs/11.x/events.md:21
#: ./docs/master/events.md:21
msgctxt "P"
msgid "[Faking a Subset of Events](#faking-a-subset-of-events)"
msgstr ""

#: ./docs/8.x/events.md:20
#: ./docs/9.x/events.md:20
#: ./docs/10.x/events.md:24
#: ./docs/11.x/events.md:25
#: ./docs/master/events.md:25
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/10.x/events.md:21
#: ./docs/11.x/events.md:22
#: ./docs/master/events.md:22
msgctxt "P"
msgid "[Scoped Events Fakes](#scoped-event-fakes)"
msgstr ""

#: ./docs/8.x/events.md:22
#: ./docs/9.x/events.md:22
#: ./docs/10.x/events.md:26
#: ./docs/11.x/events.md:27
#: ./docs/master/events.md:27
msgctxt "P"
msgid "Laravel's events provide a simple observer pattern implementation, allowing you to subscribe and listen for various events that occur within your application. Event classes are typically stored in the `app/Events` directory, while their listeners are stored in `app/Listeners`. Don't worry if you don't see these directories in your application as they will be created for you as you generate events and listeners using Artisan console commands."
msgstr ""

#: ./docs/8.x/events.md:24
#: ./docs/9.x/events.md:24
#: ./docs/10.x/events.md:28
#: ./docs/11.x/events.md:29
#: ./docs/master/events.md:29
msgctxt "P"
msgid "Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. For example, you may wish to send a Slack notification to your user each time an order has shipped. Instead of coupling your order processing code to your Slack notification code, you can raise an `App\\Events\\OrderShipped` event which a listener can receive and use to dispatch a Slack notification."
msgstr ""

#: ./docs/8.x/events.md:26
#: ./docs/9.x/events.md:26
#: ./docs/10.x/events.md:30
#: ./docs/11.x/events.md:50
#: ./docs/master/events.md:50
#~ msgctxt "P"
#~ msgid "<a name=\"registering-events-and-listeners\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:27
#: ./docs/9.x/events.md:27
msgctxt "H2"
msgid "Registering Events & Listeners"
msgstr ""

#: ./docs/8.x/events.md:29
#: ./docs/9.x/events.md:29
#: ./docs/10.x/events.md:33
msgctxt "P"
msgid "The `App\\Providers\\EventServiceProvider` included with your Laravel application provides a convenient place to register all of your application's event listeners. The `listen` property contains an array of all events (keys) and their listeners (values). You may add as many events to this array as your application requires. For example, let's add an `OrderShipped` event:"
msgstr ""

#: ./docs/10.x/events.md:31
#: ./docs/11.x/events.md:51
#: ./docs/master/events.md:51
msgctxt "H2"
msgid "Registering Events and Listeners"
msgstr ""

#: ./docs/8.x/events.md:31
#: ./docs/9.x/events.md:31
msgctxt "CODE"
msgid ""
"use App\\Events\\OrderShipped;\n"
"use App\\Listeners\\SendShipmentNotification;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    OrderShipped::class => [\n"
"        SendShipmentNotification::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/11.x/events.md:34
#: ./docs/master/events.md:34
msgctxt "P"
msgid "To quickly generate events and listeners, you may use the `make:event` and `make:listener` Artisan commands:"
msgstr ""

#: ./docs/10.x/events.md:35
msgctxt "CODE"
msgid ""
"use App\\Events\\OrderShipped;\n"
"use App\\Listeners\\SendShipmentNotification;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array<class-string, array<int, class-string>>\n"
" */\n"
"protected $listen = [\n"
"    OrderShipped::class => [\n"
"        SendShipmentNotification::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/11.x/events.md:42
#: ./docs/master/events.md:42
msgctxt "P"
msgid "For convenience, you may also invoke the `make:event` and `make:listener` Artisan commands without additional arguments. When you do so, Laravel will automatically prompt you for the class name and, when creating a listener, the event it should listen to:"
msgstr ""

#: ./docs/11.x/events.md:44
#: ./docs/master/events.md:44
msgctxt "CODE: shell"
msgid ""
"php artisan make:event\n"
"\n"
"php artisan make:listener"
msgstr ""

#: ./docs/8.x/events.md:45
#: ./docs/9.x/events.md:46
#: ./docs/10.x/events.md:50
msgctxt "P"
msgid "The `event:list` command may be used to display a list of all events and listeners registered by your application."
msgstr ""

#: ./docs/8.x/events.md:47
#: ./docs/9.x/events.md:48
#: ./docs/10.x/events.md:52
#: ./docs/11.x/events.md:31
#: ./docs/master/events.md:31
#~ msgctxt "P"
#~ msgid "<a name=\"generating-events-and-listeners\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:48
#: ./docs/9.x/events.md:49
msgctxt "H3"
msgid "Generating Events & Listeners"
msgstr ""

#: ./docs/8.x/events.md:50
#: ./docs/9.x/events.md:51
#: ./docs/10.x/events.md:55
msgctxt "P"
msgid "Of course, manually creating the files for each event and listener is cumbersome. Instead, add listeners and events to your `EventServiceProvider` and use the `event:generate` Artisan command. This command will generate any events or listeners that are listed in your `EventServiceProvider` that do not already exist:"
msgstr ""

#: ./docs/8.x/events.md:52
#: ./docs/9.x/events.md:53
#: ./docs/10.x/events.md:57
msgctxt "CODE"
msgid "php artisan event:generate"
msgstr ""

#: ./docs/10.x/events.md:53
#: ./docs/11.x/events.md:32
#: ./docs/master/events.md:32
msgctxt "H3"
msgid "Generating Events and Listeners"
msgstr ""

#: ./docs/8.x/events.md:54
#: ./docs/9.x/events.md:57
#: ./docs/10.x/events.md:61
msgctxt "P"
msgid "Alternatively, you may use the `make:event` and `make:listener` Artisan commands to generate individual events and listeners:"
msgstr ""

#: ./docs/11.x/events.md:56
#: ./docs/master/events.md:56
msgctxt "P"
msgid "By default, Laravel will automatically find and register your event listeners by scanning your application's `Listeners` directory. When Laravel finds any listener class method that begins with `handle` or `__invoke`, Laravel will register those methods as event listeners for the event that is type-hinted in the method's signature:"
msgstr ""

#: ./docs/8.x/events.md:56
#: ./docs/9.x/events.md:59
#: ./docs/10.x/events.md:63
#: ./docs/11.x/events.md:36
#: ./docs/master/events.md:36
msgctxt "CODE"
msgid ""
"php artisan make:event PodcastProcessed\n"
"\n"
"php artisan make:listener SendPodcastNotification --event=PodcastProcessed"
msgstr ""

#: ./docs/8.x/events.md:60
#: ./docs/9.x/events.md:65
#: ./docs/10.x/events.md:69
#: ./docs/11.x/events.md:98
#: ./docs/master/events.md:88
#~ msgctxt "P"
#~ msgid "<a name=\"manually-registering-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:61
#: ./docs/9.x/events.md:66
#: ./docs/10.x/events.md:70
#: ./docs/11.x/events.md:99
#: ./docs/master/events.md:89
msgctxt "H3"
msgid "Manually Registering Events"
msgstr ""

#: ./docs/8.x/events.md:63
#: ./docs/9.x/events.md:68
#: ./docs/10.x/events.md:72
msgctxt "P"
msgid "Typically, events should be registered via the `EventServiceProvider` `$listen` array; however, you may also register class or closure based event listeners manually in the `boot` method of your `EventServiceProvider`:"
msgstr ""

#: ./docs/8.x/events.md:65
#: ./docs/9.x/events.md:70
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use App\\Listeners\\SendPodcastNotification;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Register any other events for your application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Event::listen(\n"
"        PodcastProcessed::class,\n"
"        [SendPodcastNotification::class, 'handle']\n"
"    );\n"
"\n"
"    Event::listen(function (PodcastProcessed $event) {\n"
"        //\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:71
msgctxt "P"
msgid "You may listen to multiple events using PHP's union types:"
msgstr ""

#: ./docs/11.x/events.md:73
msgctxt "CODE"
msgid ""
"/**\n"
" * Handle the given event.\n"
" */\n"
"public function handle(PodcastProcessed|PodcastPublished $event): void\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/master/events.md:73
msgctxt "CODE"
msgid ""
"->withEvents(discover: [\n"
"    __DIR__.'/../app/Domain/Listeners',\n"
"])"
msgstr ""

#: ./docs/10.x/events.md:74
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use App\\Listeners\\SendPodcastNotification;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Register any other events for your application.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Event::listen(\n"
"        PodcastProcessed::class,\n"
"        SendPodcastNotification::class,\n"
"    );\n"
"\n"
"    Event::listen(function (PodcastProcessed $event) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:81
#: ./docs/master/events.md:71
msgctxt "P"
msgid "If you plan to store your listeners in a different directory or within multiple directories, you may instruct Laravel to scan those directories using the `withEvents` method in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/events.md:83
msgctxt "CODE"
msgid ""
"->withEvents(discover: [\n"
"    __DIR__.'/../app/Domain/Orders/Listeners',\n"
"])"
msgstr ""

#: ./docs/8.x/events.md:86
#: ./docs/9.x/events.md:91
#: ./docs/10.x/events.md:93
#: ./docs/11.x/events.md:142
#: ./docs/master/events.md:132
#~ msgctxt "P"
#~ msgid "<a name=\"queuable-anonymous-event-listeners\"></a>"
#~ msgstr ""

#: ./docs/11.x/events.md:87
#: ./docs/11.x/events.md:118
#: ./docs/master/events.md:77
#: ./docs/master/events.md:108
msgctxt "P"
msgid "The `event:list` command may be used to list all of the listeners registered within your application:"
msgstr ""

#: ./docs/8.x/events.md:87
#: ./docs/9.x/events.md:92
#: ./docs/10.x/events.md:94
#: ./docs/11.x/events.md:143
#: ./docs/master/events.md:133
msgctxt "H4"
msgid "Queueable Anonymous Event Listeners"
msgstr ""

#: ./docs/11.x/events.md:89
#: ./docs/11.x/events.md:120
#: ./docs/master/events.md:79
#: ./docs/master/events.md:110
msgctxt "CODE: shell"
msgid "php artisan event:list"
msgstr ""

#: ./docs/8.x/events.md:89
#: ./docs/9.x/events.md:94
#: ./docs/10.x/events.md:96
msgctxt "P"
msgid "When registering closure based event listeners manually, you may wrap the listener closure within the `Illuminate\\Events\\queueable` function to instruct Laravel to execute the listener using the [queue](/docs/{{version}}/queues):"
msgstr ""

#: ./docs/8.x/events.md:91
#: ./docs/9.x/events.md:96
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Register any other events for your application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        //\n"
"    }));\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:94
#: ./docs/master/events.md:84
msgctxt "H4"
msgid "Event Discovery in Production"
msgstr ""

#: ./docs/11.x/events.md:96
#: ./docs/master/events.md:86
msgctxt "P"
msgid "To give your application a speed boost, you should cache a manifest of all of your application's listeners using the `optimize` or `event:cache` Artisan commands. Typically, this command should be run as part of your application's [deployment process](/docs/{{version}}/deployment#optimization). This manifest will be used by the framework to speed up the event registration process. The `event:clear` command may be used to destroy the event cache."
msgstr ""

#: ./docs/10.x/events.md:98
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Register any other events for your application.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        // ...\n"
"    }));\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:101
#: ./docs/master/events.md:91
msgctxt "P"
msgid "Using the `Event` facade, you may manually register events and their corresponding listeners within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/11.x/events.md:103
#: ./docs/master/events.md:93
msgctxt "CODE"
msgid ""
"use App\\Domain\\Orders\\Events\\PodcastProcessed;\n"
"use App\\Domain\\Orders\\Listeners\\SendPodcastNotification;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Event::listen(\n"
"        PodcastProcessed::class,\n"
"        SendPodcastNotification::class,\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:107
#: ./docs/9.x/events.md:112
#: ./docs/10.x/events.md:112
#: ./docs/11.x/events.md:161
#: ./docs/master/events.md:151
msgctxt "P"
msgid "Like queued jobs, you may use the `onConnection`, `onQueue`, and `delay` methods to customize the execution of the queued listener:"
msgstr ""

#: ./docs/8.x/events.md:109
#: ./docs/9.x/events.md:114
msgctxt "CODE"
msgid ""
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));"
msgstr ""

#: ./docs/8.x/events.md:113
#: ./docs/9.x/events.md:118
#: ./docs/10.x/events.md:118
#: ./docs/11.x/events.md:167
#: ./docs/master/events.md:157
msgctxt "P"
msgid "If you would like to handle anonymous queued listener failures, you may provide a closure to the `catch` method while defining the `queueable` listener. This closure will receive the event instance and the `Throwable` instance that caused the listener's failure:"
msgstr ""

#: ./docs/10.x/events.md:114
#: ./docs/11.x/events.md:163
#: ./docs/master/events.md:153
msgctxt "CODE"
msgid ""
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    // ...\n"
"})->onConnection('redis')->onQueue('podcasts')->delay(now()->addSeconds(10)));"
msgstr ""

#: ./docs/8.x/events.md:115
#: ./docs/9.x/events.md:120
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Throwable;\n"
"\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    //\n"
"})->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"    // The queued listener failed...\n"
"}));"
msgstr ""

#: ./docs/10.x/events.md:120
#: ./docs/11.x/events.md:169
#: ./docs/master/events.md:159
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Throwable;\n"
"\n"
"Event::listen(queueable(function (PodcastProcessed $event) {\n"
"    // ...\n"
"})->catch(function (PodcastProcessed $event, Throwable $e) {\n"
"    // The queued listener failed...\n"
"}));"
msgstr ""

#: ./docs/11.x/events.md:124
#: ./docs/master/events.md:114
#~ msgctxt "P"
#~ msgid "<a name=\"closure-listeners\"></a>"
#~ msgstr ""

#: ./docs/11.x/events.md:125
#: ./docs/master/events.md:115
msgctxt "H3"
msgid "Closure Listeners"
msgstr ""

#: ./docs/8.x/events.md:126
#: ./docs/9.x/events.md:131
#: ./docs/10.x/events.md:131
#: ./docs/11.x/events.md:180
#: ./docs/master/events.md:170
#~ msgctxt "P"
#~ msgid "<a name=\"wildcard-event-listeners\"></a>"
#~ msgstr ""

#: ./docs/11.x/events.md:127
#: ./docs/master/events.md:117
msgctxt "P"
msgid "Typically, listeners are defined as classes; however, you may also manually register closure-based event listeners in the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/events.md:127
#: ./docs/9.x/events.md:132
#: ./docs/10.x/events.md:132
#: ./docs/11.x/events.md:181
#: ./docs/master/events.md:171
msgctxt "H4"
msgid "Wildcard Event Listeners"
msgstr ""

#: ./docs/11.x/events.md:129
#: ./docs/master/events.md:119
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Event::listen(function (PodcastProcessed $event) {\n"
"        // ...\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:129
#: ./docs/9.x/events.md:134
#: ./docs/10.x/events.md:134
msgctxt "P"
msgid "You may even register listeners using the `*` as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument and the entire event data array as their second argument:"
msgstr ""

#: ./docs/8.x/events.md:131
#: ./docs/9.x/events.md:136
msgctxt "CODE"
msgid ""
"Event::listen('event.*', function ($eventName, array $data) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/8.x/events.md:135
#: ./docs/9.x/events.md:140
#: ./docs/10.x/events.md:140
#: ./docs/11.x/events.md:53
#: ./docs/master/events.md:53
#~ msgctxt "P"
#~ msgid "<a name=\"event-discovery\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:136
#: ./docs/11.x/events.md:185
#: ./docs/master/events.md:175
msgctxt "CODE"
msgid ""
"Event::listen('event.*', function (string $eventName, array $data) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/events.md:136
#: ./docs/9.x/events.md:141
#: ./docs/10.x/events.md:141
#: ./docs/11.x/events.md:54
#: ./docs/master/events.md:54
msgctxt "H3"
msgid "Event Discovery"
msgstr ""

#: ./docs/8.x/events.md:138
#: ./docs/9.x/events.md:143
#: ./docs/10.x/events.md:143
msgctxt "P"
msgid "Instead of registering events and listeners manually in the `$listen` array of the `EventServiceProvider`, you can enable automatic event discovery. When event discovery is enabled, Laravel will automatically find and register your events and listeners by scanning your application's `Listeners` directory. In addition, any explicitly defined events listed in the `EventServiceProvider` will still be registered."
msgstr ""

#: ./docs/8.x/events.md:140
msgctxt "P"
msgid "Laravel finds event listeners by scanning the listener classes using PHP's reflection services. When Laravel finds any listener class method that begins with `handle`, Laravel will register those methods as event listeners for the event that is type-hinted in the method's signature:"
msgstr ""

#: ./docs/8.x/events.md:142
#: ./docs/9.x/events.md:147
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"\n"
"class SendPodcastNotification\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     *\n"
"     * @param  \\App\\Events\\PodcastProcessed  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(PodcastProcessed $event)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:145
#: ./docs/master/events.md:135
msgctxt "P"
msgid "When registering closure based event listeners, you may wrap the listener closure within the `Illuminate\\Events\\queueable` function to instruct Laravel to execute the listener using the [queue](/docs/{{version}}/queues):"
msgstr ""

#: ./docs/9.x/events.md:145
#: ./docs/10.x/events.md:145
msgctxt "P"
msgid "Laravel finds event listeners by scanning the listener classes using PHP's reflection services. When Laravel finds any listener class method that begins with `handle` or `__invoke`, Laravel will register those methods as event listeners for the event that is type-hinted in the method's signature:"
msgstr ""

#: ./docs/10.x/events.md:147
#: ./docs/11.x/events.md:58
#: ./docs/master/events.md:58
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"\n"
"class SendPodcastNotification\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(PodcastProcessed $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:147
#: ./docs/master/events.md:137
msgctxt "CODE"
msgid ""
"use App\\Events\\PodcastProcessed;\n"
"use function Illuminate\\Events\\queueable;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Event::listen(queueable(function (PodcastProcessed $event) {\n"
"        // ...\n"
"    }));\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:158
#: ./docs/9.x/events.md:163
#: ./docs/10.x/events.md:160
msgctxt "P"
msgid "Event discovery is disabled by default, but you can enable it by overriding the `shouldDiscoverEvents` method of your application's `EventServiceProvider`:"
msgstr ""

#: ./docs/8.x/events.md:160
#: ./docs/9.x/events.md:165
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if events and listeners should be automatically discovered.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function shouldDiscoverEvents()\n"
"{\n"
"    return true;\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:162
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine if events and listeners should be automatically discovered.\n"
" */\n"
"public function shouldDiscoverEvents(): bool\n"
"{\n"
"    return true;\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:170
#: ./docs/9.x/events.md:175
#: ./docs/10.x/events.md:170
msgctxt "P"
msgid "By default, all listeners within your application's `app/Listeners` directory will be scanned. If you would like to define additional directories to scan, you may override the `discoverEventsWithin` method in your `EventServiceProvider`:"
msgstr ""

#: ./docs/10.x/events.md:172
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the listener directories that should be used to discover events.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"protected function discoverEventsWithin(): array\n"
"{\n"
"    return [\n"
"        $this->app->path('Listeners'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:172
#: ./docs/9.x/events.md:177
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the listener directories that should be used to discover events.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function discoverEventsWithin()\n"
"{\n"
"    return [\n"
"        $this->app->path('Listeners'),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:183
#: ./docs/master/events.md:173
msgctxt "P"
msgid "You may also register listeners using the `*` character as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument and the entire event data array as their second argument:"
msgstr ""

#: ./docs/8.x/events.md:184
#: ./docs/9.x/events.md:189
#: ./docs/10.x/events.md:184
#: ./docs/11.x/events.md:93
#: ./docs/master/events.md:83
#~ msgctxt "P"
#~ msgid "<a name=\"event-discovery-in-production\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:185
#: ./docs/9.x/events.md:190
#: ./docs/10.x/events.md:185
msgctxt "H4"
msgid "Event Discovery In Production"
msgstr ""

#: ./docs/8.x/events.md:187
#: ./docs/9.x/events.md:192
#: ./docs/10.x/events.md:187
msgctxt "P"
msgid "In production, it is not efficient for the framework to scan all of your listeners on every request. Therefore, during your deployment process, you should run the `event:cache` Artisan command to cache a manifest of all of your application's events and listeners. This manifest will be used by the framework to speed up the event registration process. The `event:clear` command may be used to destroy the cache."
msgstr ""

#: ./docs/8.x/events.md:189
#: ./docs/9.x/events.md:194
#: ./docs/10.x/events.md:189
#: ./docs/11.x/events.md:189
#: ./docs/master/events.md:179
#~ msgctxt "P"
#~ msgid "<a name=\"defining-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:190
#: ./docs/9.x/events.md:195
#: ./docs/10.x/events.md:190
#: ./docs/11.x/events.md:190
#: ./docs/master/events.md:180
msgctxt "H2"
msgid "Defining Events"
msgstr ""

#: ./docs/8.x/events.md:192
#: ./docs/9.x/events.md:197
#: ./docs/10.x/events.md:192
#: ./docs/11.x/events.md:192
#: ./docs/master/events.md:182
msgctxt "P"
msgid "An event class is essentially a data container which holds the information related to the event. For example, let's assume an `App\\Events\\OrderShipped` event receives an [Eloquent ORM](/docs/{{version}}/eloquent) object:"
msgstr ""

#: ./docs/10.x/events.md:194
#: ./docs/11.x/events.md:194
#: ./docs/master/events.md:184
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Foundation\\Events\\Dispatchable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped\n"
"{\n"
"    use Dispatchable, InteractsWithSockets, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Order $order,\n"
"    ) {}\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:194
#: ./docs/9.x/events.md:199
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Foundation\\Events\\Dispatchable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped\n"
"{\n"
"    use Dispatchable, InteractsWithSockets, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:220
#: ./docs/master/events.md:210
msgctxt "P"
msgid "Next, let's take a look at the listener for our example event. Event listeners receive event instances in their `handle` method. The `make:listener` Artisan command, when invoked with the `--event` option, will automatically import the proper event class and type-hint the event in the `handle` method. Within the `handle` method, you may perform any actions necessary to respond to the event:"
msgstr ""

#: ./docs/10.x/events.md:222
#: ./docs/master/events.md:212
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"\n"
"class SendShipmentNotification\n"
"{\n"
"    /**\n"
"     * Create the event listener.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     */\n"
"    public function handle(OrderShipped $event): void\n"
"    {\n"
"        // Access the order using $event->order...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:222
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"\n"
"class SendShipmentNotification\n"
"{\n"
"    /**\n"
"     * Create the event listener.\n"
"     */\n"
"    public function __construct() {}\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     */\n"
"    public function handle(OrderShipped $event): void\n"
"    {\n"
"        // Access the order using $event->order...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:226
#: ./docs/9.x/events.md:231
#: ./docs/10.x/events.md:215
#: ./docs/11.x/events.md:215
#: ./docs/master/events.md:205
msgctxt "P"
msgid "As you can see, this event class contains no logic. It is a container for the `App\\Models\\Order` instance that was purchased. The `SerializesModels` trait used by the event will gracefully serialize any Eloquent models if the event object is serialized using PHP's `serialize` function, such as when utilizing [queued listeners](#queued-event-listeners)."
msgstr ""

#: ./docs/8.x/events.md:228
#: ./docs/9.x/events.md:233
#: ./docs/10.x/events.md:217
#: ./docs/11.x/events.md:217
#: ./docs/master/events.md:207
#~ msgctxt "P"
#~ msgid "<a name=\"defining-listeners\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:229
#: ./docs/9.x/events.md:234
#: ./docs/10.x/events.md:218
#: ./docs/11.x/events.md:218
#: ./docs/master/events.md:208
msgctxt "H2"
msgid "Defining Listeners"
msgstr ""

#: ./docs/8.x/events.md:231
#: ./docs/9.x/events.md:236
#: ./docs/10.x/events.md:220
msgctxt "P"
msgid "Next, let's take a look at the listener for our example event. Event listeners receive event instances in their `handle` method. The `event:generate` and `make:listener` Artisan commands will automatically import the proper event class and type-hint the event on the `handle` method. Within the `handle` method, you may perform any actions necessary to respond to the event:"
msgstr ""

#: ./docs/8.x/events.md:233
#: ./docs/9.x/events.md:238
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"\n"
"class SendShipmentNotification\n"
"{\n"
"    /**\n"
"     * Create the event listener.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderShipped  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(OrderShipped $event)\n"
"    {\n"
"        // Access the order using $event->order...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:257
#: ./docs/master/events.md:250
msgctxt "P"
msgid "To specify that a listener should be queued, add the `ShouldQueue` interface to the listener class. Listeners generated by the `make:listener` Artisan commands already have this interface imported into the current namespace so you can use it immediately:"
msgstr ""

#: ./docs/10.x/events.md:262
#: ./docs/11.x/events.md:259
#: ./docs/master/events.md:252
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:263
#: ./docs/9.x/events.md:269
#: ./docs/10.x/events.md:248
#: ./docs/11.x/events.md:245
#: ./docs/master/events.md:238
msgctxt "P"
msgid "Your event listeners may also type-hint any dependencies they need on their constructors. All event listeners are resolved via the Laravel [service container](/docs/{{version}}/container), so dependencies will be injected automatically."
msgstr ""

#: ./docs/8.x/events.md:265
#: ./docs/9.x/events.md:271
#: ./docs/10.x/events.md:250
#: ./docs/11.x/events.md:247
#: ./docs/master/events.md:240
#~ msgctxt "P"
#~ msgid "<a name=\"stopping-the-propagation-of-an-event\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:266
#: ./docs/9.x/events.md:272
#: ./docs/10.x/events.md:251
#: ./docs/11.x/events.md:248
#: ./docs/master/events.md:241
msgctxt "H4"
msgid "Stopping The Propagation Of An Event"
msgstr ""

#: ./docs/8.x/events.md:268
#: ./docs/9.x/events.md:274
#: ./docs/10.x/events.md:253
#: ./docs/11.x/events.md:250
#: ./docs/master/events.md:243
msgctxt "P"
msgid "Sometimes, you may wish to stop the propagation of an event to other listeners. You may do so by returning `false` from your listener's `handle` method."
msgstr ""

#: ./docs/8.x/events.md:270
#: ./docs/9.x/events.md:276
#: ./docs/10.x/events.md:255
#: ./docs/11.x/events.md:252
#: ./docs/master/events.md:245
#~ msgctxt "P"
#~ msgid "<a name=\"queued-event-listeners\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:271
#: ./docs/9.x/events.md:277
#: ./docs/10.x/events.md:256
#: ./docs/11.x/events.md:253
#: ./docs/master/events.md:246
msgctxt "H2"
msgid "Queued Event Listeners"
msgstr ""

#: ./docs/8.x/events.md:273
#: ./docs/9.x/events.md:279
#: ./docs/10.x/events.md:258
#: ./docs/11.x/events.md:255
#: ./docs/master/events.md:248
msgctxt "P"
msgid "Queueing listeners can be beneficial if your listener is going to perform a slow task such as sending an email or making an HTTP request. Before using queued listeners, make sure to [configure your queue](/docs/{{version}}/queues) and start a queue worker on your server or local development environment."
msgstr ""

#: ./docs/8.x/events.md:275
#: ./docs/9.x/events.md:281
#: ./docs/10.x/events.md:260
msgctxt "P"
msgid "To specify that a listener should be queued, add the `ShouldQueue` interface to the listener class. Listeners generated by the `event:generate` and `make:listener` Artisan commands already have this interface imported into the current namespace so you can use it immediately:"
msgstr ""

#: ./docs/10.x/events.md:277
#: ./docs/11.x/events.md:274
#: ./docs/master/events.md:267
msgctxt "H4"
msgid "Customizing The Queue Connection, Name, & Delay"
msgstr ""

#: ./docs/8.x/events.md:277
#: ./docs/9.x/events.md:283
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:289
#: ./docs/9.x/events.md:295
#: ./docs/10.x/events.md:274
#: ./docs/11.x/events.md:271
#: ./docs/master/events.md:264
msgctxt "P"
msgid "That's it! Now, when an event handled by this listener is dispatched, the listener will automatically be queued by the event dispatcher using Laravel's [queue system](/docs/{{version}}/queues). If no exceptions are thrown when the listener is executed by the queue, the queued job will automatically be deleted after it has finished processing."
msgstr ""

#: ./docs/8.x/events.md:291
#: ./docs/9.x/events.md:297
#: ./docs/10.x/events.md:276
#: ./docs/11.x/events.md:273
#: ./docs/master/events.md:266
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-queue-connection-queue-name\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:292
#: ./docs/9.x/events.md:298
msgctxt "H4"
msgid "Customizing The Queue Connection & Queue Name"
msgstr ""

#: ./docs/8.x/events.md:294
#: ./docs/9.x/events.md:300
#: ./docs/10.x/events.md:279
#: ./docs/11.x/events.md:276
#: ./docs/master/events.md:269
msgctxt "P"
msgid "If you would like to customize the queue connection, queue name, or queue delay time of an event listener, you may define the `$connection`, `$queue`, or `$delay` properties on your listener class:"
msgstr ""

#: ./docs/8.x/events.md:296
#: ./docs/9.x/events.md:302
#: ./docs/10.x/events.md:281
#: ./docs/11.x/events.md:278
#: ./docs/master/events.md:271
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    /**\n"
"     * The name of the connection the job should be sent to.\n"
"     *\n"
"     * @var string|null\n"
"     */\n"
"    public $connection = 'sqs';\n"
"\n"
"    /**\n"
"     * The name of the queue the job should be sent to.\n"
"     *\n"
"     * @var string|null\n"
"     */\n"
"    public $queue = 'listeners';\n"
"\n"
"    /**\n"
"     * The time (seconds) before the job should be processed.\n"
"     *\n"
"     * @var int\n"
"     */\n"
"    public $delay = 60;\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:312
#: ./docs/11.x/events.md:309
#: ./docs/master/events.md:302
msgctxt "P"
msgid "If you would like to define the listener's queue connection, queue name, or delay at runtime, you may define `viaConnection`, `viaQueue`, or `withDelay` methods on the listener:"
msgstr ""

#: ./docs/10.x/events.md:314
#: ./docs/11.x/events.md:311
#: ./docs/master/events.md:304
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the name of the listener's queue connection.\n"
" */\n"
"public function viaConnection(): string\n"
"{\n"
"    return 'sqs';\n"
"}\n"
"\n"
"/**\n"
" * Get the name of the listener's queue.\n"
" */\n"
"public function viaQueue(): string\n"
"{\n"
"    return 'listeners';\n"
"}\n"
"\n"
"/**\n"
" * Get the number of seconds before the job should be processed.\n"
" */\n"
"public function withDelay(OrderShipped $event): int\n"
"{\n"
"    return $event->highPriority ? 0 : 60;\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:327
#: ./docs/9.x/events.md:333
msgctxt "P"
msgid "If you would like to define the listener's queue connection or queue name at runtime, you may define `viaConnection` or `viaQueue` methods on the listener:"
msgstr ""

#: ./docs/8.x/events.md:329
#: ./docs/9.x/events.md:335
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the name of the listener's queue connection.\n"
" *\n"
" * @return string\n"
" */\n"
"public function viaConnection()\n"
"{\n"
"    return 'sqs';\n"
"}\n"
"\n"
"/**\n"
" * Get the name of the listener's queue.\n"
" *\n"
" * @return string\n"
" */\n"
"public function viaQueue()\n"
"{\n"
"    return 'listeners';\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:338
msgctxt "P"
msgid "Sometimes, you may need to determine whether a listener should be queued based on some data that are only available at runtime. To accomplish this, a `shouldQueue` method may be added to a listener to determine whether the listener should be queued. If the `shouldQueue` method returns `false`, the listener will not be queued:"
msgstr ""

#: ./docs/10.x/events.md:343
#: ./docs/11.x/events.md:340
#: ./docs/master/events.md:333
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderCreated;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class RewardGiftCard implements ShouldQueue\n"
"{\n"
"    /**\n"
"     * Reward a gift card to the customer.\n"
"     */\n"
"    public function handle(OrderCreated $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Determine whether the listener should be queued.\n"
"     */\n"
"    public function shouldQueue(OrderCreated $event): bool\n"
"    {\n"
"        return $event->order->subtotal >= 5000;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:349
#: ./docs/9.x/events.md:355
#: ./docs/10.x/events.md:338
#: ./docs/11.x/events.md:335
#: ./docs/master/events.md:328
#~ msgctxt "P"
#~ msgid "<a name=\"conditionally-queueing-listeners\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:350
#: ./docs/9.x/events.md:356
#: ./docs/10.x/events.md:339
#: ./docs/11.x/events.md:336
#: ./docs/master/events.md:329
msgctxt "H4"
msgid "Conditionally Queueing Listeners"
msgstr ""

#: ./docs/8.x/events.md:352
#: ./docs/9.x/events.md:358
#: ./docs/10.x/events.md:341
#: ./docs/master/events.md:331
msgctxt "P"
msgid "Sometimes, you may need to determine whether a listener should be queued based on some data that are only available at runtime. To accomplish this, a `shouldQueue` method may be added to a listener to determine whether the listener should be queued. If the `shouldQueue` method returns `false`, the listener will not be executed:"
msgstr ""

#: ./docs/8.x/events.md:354
#: ./docs/9.x/events.md:360
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderCreated;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class RewardGiftCard implements ShouldQueue\n"
"{\n"
"    /**\n"
"     * Reward a gift card to the customer.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderCreated  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(OrderCreated $event)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Determine whether the listener should be queued.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderCreated  $event\n"
"     * @return bool\n"
"     */\n"
"    public function shouldQueue(OrderCreated $event)\n"
"    {\n"
"        return $event->order->subtotal >= 5000;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:370
#: ./docs/11.x/events.md:367
#: ./docs/master/events.md:360
msgctxt "H3"
msgid "Manually Interacting With the Queue"
msgstr ""

#: ./docs/10.x/events.md:374
#: ./docs/11.x/events.md:371
#: ./docs/master/events.md:364
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     */\n"
"    public function handle(OrderShipped $event): void\n"
"    {\n"
"        if (true) {\n"
"            $this->release(30);\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:386
#: ./docs/9.x/events.md:392
#: ./docs/10.x/events.md:369
#: ./docs/11.x/events.md:366
#: ./docs/master/events.md:359
#~ msgctxt "P"
#~ msgid "<a name=\"manually-interacting-with-the-queue\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:387
#: ./docs/9.x/events.md:393
msgctxt "H3"
msgid "Manually Interacting With The Queue"
msgstr ""

#: ./docs/8.x/events.md:389
#: ./docs/9.x/events.md:395
#: ./docs/10.x/events.md:372
#: ./docs/11.x/events.md:369
#: ./docs/master/events.md:362
msgctxt "P"
msgid "If you need to manually access the listener's underlying queue job's `delete` and `release` methods, you may do so using the `Illuminate\\Queue\\InteractsWithQueue` trait. This trait is imported by default on generated listeners and provides access to these methods:"
msgstr ""

#: ./docs/8.x/events.md:391
#: ./docs/9.x/events.md:397
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderShipped  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(OrderShipped $event)\n"
"    {\n"
"        if (true) {\n"
"            $this->release(30);\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:398
#: ./docs/11.x/events.md:395
#: ./docs/master/events.md:388
msgctxt "H3"
msgid "Queued Event Listeners and Database Transactions"
msgstr ""

#: ./docs/11.x/events.md:399
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued listener should be dispatched after all open database transactions have been committed by implementing the `ShouldQueueAfterCommit` interface on the listener class:"
msgstr ""

#: ./docs/11.x/events.md:401
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueueAfterCommit;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueueAfterCommit\n"
"{\n"
"    use InteractsWithQueue;\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:402
#: ./docs/master/events.md:392
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued listener should be dispatched after all open database transactions have been committed by implementing the `ShouldHandleEventsAfterCommit` interface on the listener class:"
msgstr ""

#: ./docs/10.x/events.md:404
#: ./docs/master/events.md:394
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Contracts\\Events\\ShouldHandleEventsAfterCommit;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue, ShouldHandleEventsAfterCommit\n"
"{\n"
"    use InteractsWithQueue;\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:417
#: ./docs/9.x/events.md:423
#: ./docs/10.x/events.md:397
#: ./docs/11.x/events.md:394
#: ./docs/master/events.md:387
#~ msgctxt "P"
#~ msgid "<a name=\"queued-event-listeners-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:418
#: ./docs/9.x/events.md:424
msgctxt "H3"
msgid "Queued Event Listeners & Database Transactions"
msgstr ""

#: ./docs/8.x/events.md:420
#: ./docs/9.x/events.md:426
#: ./docs/10.x/events.md:400
#: ./docs/11.x/events.md:397
#: ./docs/master/events.md:390
msgctxt "P"
msgid "When queued listeners are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your listener depends on these models, unexpected errors can occur when the job that dispatches the queued listener is processed."
msgstr ""

#: ./docs/8.x/events.md:422
#: ./docs/9.x/events.md:428
msgctxt "P"
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued listener should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the listener class:"
msgstr ""

#: ./docs/8.x/events.md:424
#: ./docs/9.x/events.md:430
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    public $afterCommit = true;\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:425
#: ./docs/11.x/events.md:421
#: ./docs/master/events.md:415
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"use Throwable;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     */\n"
"    public function handle(OrderShipped $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle a job failure.\n"
"     */\n"
"    public function failed(OrderShipped $event, Throwable $exception): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:438
#: ./docs/9.x/events.md:445
#: ./docs/10.x/events.md:418
#: ./docs/11.x/events.md:414
#: ./docs/master/events.md:408
msgctxt "P"
msgid "To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: ./docs/8.x/events.md:440
#: ./docs/9.x/events.md:447
#: ./docs/10.x/events.md:420
#: ./docs/11.x/events.md:416
#: ./docs/master/events.md:410
#~ msgctxt "P"
#~ msgid "<a name=\"handling-failed-jobs\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:441
#: ./docs/9.x/events.md:448
#: ./docs/10.x/events.md:421
#: ./docs/11.x/events.md:417
#: ./docs/master/events.md:411
msgctxt "H3"
msgid "Handling Failed Jobs"
msgstr ""

#: ./docs/8.x/events.md:443
msgctxt "P"
msgid "Sometimes your queued event listeners may fail. If queued listener exceeds the maximum number of attempts as defined by your queue worker, the `failed` method will be called on your listener. The `failed` method receives the event instance and the `Throwable` that caused the failure:"
msgstr ""

#: ./docs/8.x/events.md:445
#: ./docs/9.x/events.md:452
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    /**\n"
"     * Handle the event.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderShipped  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(OrderShipped $event)\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Handle a job failure.\n"
"     *\n"
"     * @param  \\App\\Events\\OrderShipped  $event\n"
"     * @param  \\Throwable  $exception\n"
"     * @return void\n"
"     */\n"
"    public function failed(OrderShipped $event, $exception)\n"
"    {\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/events.md:450
#: ./docs/10.x/events.md:423
#: ./docs/11.x/events.md:419
#: ./docs/master/events.md:413
msgctxt "P"
msgid "Sometimes your queued event listeners may fail. If the queued listener exceeds the maximum number of attempts as defined by your queue worker, the `failed` method will be called on your listener. The `failed` method receives the event instance and the `Throwable` that caused the failure:"
msgstr ""

#: ./docs/8.x/events.md:481
#: ./docs/9.x/events.md:488
#: ./docs/10.x/events.md:455
#: ./docs/11.x/events.md:451
#: ./docs/master/events.md:445
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-queued-listener-maximum-attempts\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:482
#: ./docs/9.x/events.md:489
#: ./docs/10.x/events.md:456
#: ./docs/11.x/events.md:452
#: ./docs/master/events.md:446
msgctxt "H4"
msgid "Specifying Queued Listener Maximum Attempts"
msgstr ""

#: ./docs/10.x/events.md:484
#: ./docs/11.x/events.md:480
#: ./docs/master/events.md:474
msgctxt "CODE"
msgid ""
"use DateTime;\n"
"\n"
"/**\n"
" * Determine the time at which the listener should timeout.\n"
" */\n"
"public function retryUntil(): DateTime\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:484
#: ./docs/9.x/events.md:491
#: ./docs/10.x/events.md:458
#: ./docs/11.x/events.md:454
#: ./docs/master/events.md:448
msgctxt "P"
msgid "If one of your queued listeners is encountering an error, you likely do not want it to keep retrying indefinitely. Therefore, Laravel provides various ways to specify how many times or for how long a listener may be attempted."
msgstr ""

#: ./docs/8.x/events.md:486
msgctxt "P"
msgid "You may define `$tries` property on your listener class to specify how many times the listener may be attempted before it is considered to have failed:"
msgstr ""

#: ./docs/8.x/events.md:488
#: ./docs/9.x/events.md:495
#: ./docs/10.x/events.md:462
#: ./docs/11.x/events.md:458
#: ./docs/master/events.md:452
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Queue\\InteractsWithQueue;\n"
"\n"
"class SendShipmentNotification implements ShouldQueue\n"
"{\n"
"    use InteractsWithQueue;\n"
"\n"
"    /**\n"
"     * The number of times the queued listener may be attempted.\n"
"     *\n"
"     * @var int\n"
"     */\n"
"    public $tries = 5;\n"
"}"
msgstr ""

#: ./docs/9.x/events.md:493
#: ./docs/10.x/events.md:460
#: ./docs/11.x/events.md:456
#: ./docs/master/events.md:450
msgctxt "P"
msgid "You may define a `$tries` property on your listener class to specify how many times the listener may be attempted before it is considered to have failed:"
msgstr ""

#: ./docs/10.x/events.md:499
#: ./docs/11.x/events.md:495
#: ./docs/master/events.md:489
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Order shipment logic...\n"
"\n"
"        OrderShipped::dispatch($order);\n"
"\n"
"        return redirect('/orders');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:508
#: ./docs/9.x/events.md:515
#: ./docs/10.x/events.md:482
#: ./docs/11.x/events.md:478
#: ./docs/master/events.md:472
msgctxt "P"
msgid "As an alternative to defining how many times a listener may be attempted before it fails, you may define a time at which the listener should no longer be attempted. This allows a listener to be attempted any number of times within a given time frame. To define the time at which a listener should no longer be attempted, add a `retryUntil` method to your listener class. This method should return a `DateTime` instance:"
msgstr ""

#: ./docs/8.x/events.md:510
#: ./docs/9.x/events.md:517
msgctxt "CODE"
msgid ""
"/**\n"
" * Determine the time at which the listener should timeout.\n"
" *\n"
" * @return \\DateTime\n"
" */\n"
"public function retryUntil()\n"
"{\n"
"    return now()->addMinutes(5);\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:520
#: ./docs/9.x/events.md:527
#: ./docs/10.x/events.md:494
#: ./docs/11.x/events.md:490
#: ./docs/master/events.md:484
#~ msgctxt "P"
#~ msgid "<a name=\"dispatching-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:521
#: ./docs/9.x/events.md:528
#: ./docs/10.x/events.md:495
#: ./docs/11.x/events.md:491
#: ./docs/master/events.md:485
msgctxt "H2"
msgid "Dispatching Events"
msgstr ""

#: ./docs/8.x/events.md:523
#: ./docs/9.x/events.md:530
#: ./docs/10.x/events.md:497
#: ./docs/11.x/events.md:493
#: ./docs/master/events.md:487
msgctxt "P"
msgid "To dispatch an event, you may call the static `dispatch` method on the event. This method is made available on the event by the `Illuminate\\Foundation\\Events\\Dispatchable` trait. Any arguments passed to the `dispatch` method will be passed to the event's constructor:"
msgstr ""

#: ./docs/8.x/events.md:525
#: ./docs/9.x/events.md:532
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Events\\OrderShipped;\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Order shipment logic...\n"
"\n"
"        OrderShipped::dispatch($order);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:533
#: ./docs/11.x/events.md:529
#: ./docs/master/events.md:523
msgctxt "P"
msgid "When testing, it can be helpful to assert that certain events were dispatched without actually triggering their listeners. Laravel's [built-in testing helpers](#testing) make it a cinch."
msgstr ""

#: ./docs/10.x/events.md:535
#: ./docs/11.x/events.md:531
#: ./docs/master/events.md:525
#~ msgctxt "P"
#~ msgid "<a name=\"dispatching-events-after-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:536
#: ./docs/11.x/events.md:532
#: ./docs/master/events.md:526
msgctxt "H3"
msgid "Dispatching Events After Database Transactions"
msgstr ""

#: ./docs/10.x/events.md:538
#: ./docs/11.x/events.md:534
#: ./docs/master/events.md:528
msgctxt "P"
msgid "Sometimes, you may want to instruct Laravel to only dispatch an event after the active database transaction has committed. To do so, you may implement the `ShouldDispatchAfterCommit` interface on the event class."
msgstr ""

#: ./docs/10.x/events.md:540
#: ./docs/11.x/events.md:536
#: ./docs/master/events.md:530
msgctxt "P"
msgid "This interface instructs Laravel to not dispatch the event until the current database transaction is committed. If the transaction fails, the event will be discarded. If no database transaction is in progress when the event is dispatched, the event will be dispatched immediately:"
msgstr ""

#: ./docs/10.x/events.md:542
#: ./docs/11.x/events.md:538
#: ./docs/master/events.md:532
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Events;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"use Illuminate\\Contracts\\Events\\ShouldDispatchAfterCommit;\n"
"use Illuminate\\Foundation\\Events\\Dispatchable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped implements ShouldDispatchAfterCommit\n"
"{\n"
"    use Dispatchable, InteractsWithSockets, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new event instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Order $order,\n"
"    ) {}\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:552
#: ./docs/9.x/events.md:566
msgctxt "P"
msgid "When testing, it can be helpful to assert that certain events were dispatched without actually triggering their listeners. Laravel's [built-in testing helpers](/docs/{{version}}/mocking#event-fake) makes it a cinch."
msgstr ""

#: ./docs/8.x/events.md:554
#: ./docs/9.x/events.md:568
#: ./docs/10.x/events.md:564
#: ./docs/11.x/events.md:560
#: ./docs/master/events.md:554
#~ msgctxt "P"
#~ msgid "<a name=\"event-subscribers\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:555
#: ./docs/9.x/events.md:569
#: ./docs/10.x/events.md:565
#: ./docs/11.x/events.md:561
#: ./docs/master/events.md:555
msgctxt "H2"
msgid "Event Subscribers"
msgstr ""

#: ./docs/8.x/events.md:557
#: ./docs/9.x/events.md:571
#: ./docs/10.x/events.md:567
#: ./docs/11.x/events.md:563
#: ./docs/master/events.md:557
#~ msgctxt "P"
#~ msgid "<a name=\"writing-event-subscribers\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:558
#: ./docs/9.x/events.md:572
#: ./docs/10.x/events.md:568
#: ./docs/11.x/events.md:564
#: ./docs/master/events.md:558
msgctxt "H3"
msgid "Writing Event Subscribers"
msgstr ""

#: ./docs/9.x/events.md:559
#: ./docs/10.x/events.md:526
#: ./docs/11.x/events.md:522
#: ./docs/master/events.md:516
msgctxt "P"
msgid "If you would like to conditionally dispatch an event, you may use the `dispatchIf` and `dispatchUnless` methods:"
msgstr ""

#: ./docs/8.x/events.md:560
#: ./docs/9.x/events.md:574
#: ./docs/10.x/events.md:570
#: ./docs/11.x/events.md:566
#: ./docs/master/events.md:560
msgctxt "P"
msgid "Event subscribers are classes that may subscribe to multiple events from within the subscriber class itself, allowing you to define several event handlers within a single class. Subscribers should define a `subscribe` method, which will be passed an event dispatcher instance. You may call the `listen` method on the given dispatcher to register event listeners:"
msgstr ""

#: ./docs/9.x/events.md:561
#: ./docs/10.x/events.md:528
#: ./docs/11.x/events.md:524
#: ./docs/master/events.md:518
msgctxt "CODE"
msgid ""
"OrderShipped::dispatchIf($condition, $order);\n"
"\n"
"OrderShipped::dispatchUnless($condition, $order);"
msgstr ""

#: ./docs/8.x/events.md:562
#: ./docs/9.x/events.md:576
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Auth\\Events\\Login;\n"
"use Illuminate\\Auth\\Events\\Logout;\n"
"\n"
"class UserEventSubscriber\n"
"{\n"
"    /**\n"
"     * Handle user login events.\n"
"     */\n"
"    public function handleUserLogin($event) {}\n"
"\n"
"    /**\n"
"     * Handle user logout events.\n"
"     */\n"
"    public function handleUserLogout($event) {}\n"
"\n"
"    /**\n"
"     * Register the listeners for the subscriber.\n"
"     *\n"
"     * @param  \\Illuminate\\Events\\Dispatcher  $events\n"
"     * @return void\n"
"     */\n"
"    public function subscribe($events)\n"
"    {\n"
"        $events->listen(\n"
"            Login::class,\n"
"            [UserEventSubscriber::class, 'handleUserLogin']\n"
"        );\n"
"\n"
"        $events->listen(\n"
"            Logout::class,\n"
"            [UserEventSubscriber::class, 'handleUserLogout']\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:572
#: ./docs/11.x/events.md:568
#: ./docs/master/events.md:562
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Auth\\Events\\Login;\n"
"use Illuminate\\Auth\\Events\\Logout;\n"
"use Illuminate\\Events\\Dispatcher;\n"
"\n"
"class UserEventSubscriber\n"
"{\n"
"    /**\n"
"     * Handle user login events.\n"
"     */\n"
"    public function handleUserLogin(Login $event): void {}\n"
"\n"
"    /**\n"
"     * Handle user logout events.\n"
"     */\n"
"    public function handleUserLogout(Logout $event): void {}\n"
"\n"
"    /**\n"
"     * Register the listeners for the subscriber.\n"
"     */\n"
"    public function subscribe(Dispatcher $events): void\n"
"    {\n"
"        $events->listen(\n"
"            Login::class,\n"
"            [UserEventSubscriber::class, 'handleUserLogin']\n"
"        );\n"
"\n"
"        $events->listen(\n"
"            Logout::class,\n"
"            [UserEventSubscriber::class, 'handleUserLogout']\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:601
#: ./docs/9.x/events.md:615
#: ./docs/10.x/events.md:609
#: ./docs/11.x/events.md:605
#: ./docs/master/events.md:599
msgctxt "P"
msgid "If your event listener methods are defined within the subscriber itself, you may find it more convenient to return an array of events and method names from the subscriber's `subscribe` method. Laravel will automatically determine the subscriber's class name when registering the event listeners:"
msgstr ""

#: ./docs/8.x/events.md:603
#: ./docs/9.x/events.md:617
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Auth\\Events\\Login;\n"
"use Illuminate\\Auth\\Events\\Logout;\n"
"\n"
"class UserEventSubscriber\n"
"{\n"
"    /**\n"
"     * Handle user login events.\n"
"     */\n"
"    public function handleUserLogin($event) {}\n"
"\n"
"    /**\n"
"     * Handle user logout events.\n"
"     */\n"
"    public function handleUserLogout($event) {}\n"
"\n"
"    /**\n"
"     * Register the listeners for the subscriber.\n"
"     *\n"
"     * @param  \\Illuminate\\Events\\Dispatcher  $events\n"
"     * @return array\n"
"     */\n"
"    public function subscribe($events)\n"
"    {\n"
"        return [\n"
"            Login::class => 'handleUserLogin',\n"
"            Logout::class => 'handleUserLogout',\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:611
#: ./docs/11.x/events.md:607
#: ./docs/master/events.md:601
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Illuminate\\Auth\\Events\\Login;\n"
"use Illuminate\\Auth\\Events\\Logout;\n"
"use Illuminate\\Events\\Dispatcher;\n"
"\n"
"class UserEventSubscriber\n"
"{\n"
"    /**\n"
"     * Handle user login events.\n"
"     */\n"
"    public function handleUserLogin(Login $event): void {}\n"
"\n"
"    /**\n"
"     * Handle user logout events.\n"
"     */\n"
"    public function handleUserLogout(Logout $event): void {}\n"
"\n"
"    /**\n"
"     * Register the listeners for the subscriber.\n"
"     *\n"
"     * @return array<string, string>\n"
"     */\n"
"    public function subscribe(Dispatcher $events): array\n"
"    {\n"
"        return [\n"
"            Login::class => 'handleUserLogin',\n"
"            Logout::class => 'handleUserLogout',\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/events.md:637
#: ./docs/9.x/events.md:651
#: ./docs/10.x/events.md:645
#: ./docs/11.x/events.md:641
#: ./docs/master/events.md:635
#~ msgctxt "P"
#~ msgid "<a name=\"registering-event-subscribers\"></a>"
#~ msgstr ""

#: ./docs/8.x/events.md:638
#: ./docs/9.x/events.md:652
#: ./docs/10.x/events.md:646
#: ./docs/11.x/events.md:642
#: ./docs/master/events.md:636
msgctxt "H3"
msgid "Registering Event Subscribers"
msgstr ""

#: ./docs/master/events.md:638
msgctxt "P"
msgid "After writing the subscriber, you are ready to register it with the event dispatcher. You may register subscribers using the `subscribe` method of the `Event` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/events.md:640
#: ./docs/9.x/events.md:654
#: ./docs/10.x/events.md:648
msgctxt "P"
msgid "After writing the subscriber, you are ready to register it with the event dispatcher. You may register subscribers using the `$subscribe` property on the `EventServiceProvider`. For example, let's add the `UserEventSubscriber` to the list:"
msgstr ""

#: ./docs/8.x/events.md:642
#: ./docs/9.x/events.md:656
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Listeners\\UserEventSubscriber;\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        //\n"
"    ];\n"
"\n"
"    /**\n"
"     * The subscriber classes to register.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $subscribe = [\n"
"        UserEventSubscriber::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:644
msgctxt "P"
msgid "After writing the subscriber, Laravel will automatically register handler methods within the subscriber if they follow Laravel's [event discovery conventions](#event-discovery). Otherwise, you may manually register your subscriber using the `subscribe` method of the `Event` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/11.x/events.md:646
#: ./docs/master/events.md:640
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Listeners\\UserEventSubscriber;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        Event::subscribe(UserEventSubscriber::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:650
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Listeners\\UserEventSubscriber;\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        // ...\n"
"    ];\n"
"\n"
"    /**\n"
"     * The subscriber classes to register.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $subscribe = [\n"
"        UserEventSubscriber::class,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:672
#: ./docs/master/events.md:666
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use App\\Events\\OrderFailedToShip;\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"test('orders can be shipped', function () {\n"
"    Event::fake();\n"
"\n"
"    // Perform order shipping...\n"
"\n"
"    // Assert that an event was dispatched...\n"
"    Event::assertDispatched(OrderShipped::class);\n"
"\n"
"    // Assert an event was dispatched twice...\n"
"    Event::assertDispatched(OrderShipped::class, 2);\n"
"\n"
"    // Assert an event was not dispatched...\n"
"    Event::assertNotDispatched(OrderFailedToShip::class);\n"
"\n"
"    // Assert that no events were dispatched...\n"
"    Event::assertNothingDispatched();\n"
"});"
msgstr ""

#: ./docs/10.x/events.md:678
#: ./docs/11.x/events.md:665
#: ./docs/master/events.md:659
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:679
#: ./docs/11.x/events.md:666
#: ./docs/master/events.md:660
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/10.x/events.md:681
#: ./docs/11.x/events.md:668
#: ./docs/master/events.md:662
msgctxt "P"
msgid "When testing code that dispatches events, you may wish to instruct Laravel to not actually execute the event's listeners, since the listener's code can be tested directly and separately of the code that dispatches the corresponding event. Of course, to test the listener itself, you may instantiate a listener instance and invoke the `handle` method directly in your test."
msgstr ""

#: ./docs/10.x/events.md:683
#: ./docs/11.x/events.md:670
#: ./docs/master/events.md:664
msgctxt "P"
msgid "Using the `Event` facade's `fake` method, you may prevent listeners from executing, execute the code under test, and then assert which events were dispatched by your application using the `assertDispatched`, `assertNotDispatched`, and `assertNothingDispatched` methods:"
msgstr ""

#: ./docs/10.x/events.md:685
#: ./docs/11.x/events.md:698
#: ./docs/master/events.md:692
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Events\\OrderFailedToShip;\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * Test order shipping.\n"
"     */\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Event::fake();\n"
"\n"
"        // Perform order shipping...\n"
"\n"
"        // Assert that an event was dispatched...\n"
"        Event::assertDispatched(OrderShipped::class);\n"
"\n"
"        // Assert an event was dispatched twice...\n"
"        Event::assertDispatched(OrderShipped::class, 2);\n"
"\n"
"        // Assert an event was not dispatched...\n"
"        Event::assertNotDispatched(OrderFailedToShip::class);\n"
"\n"
"        // Assert that no events were dispatched...\n"
"        Event::assertNothingDispatched();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/events.md:719
#: ./docs/11.x/events.md:734
#: ./docs/master/events.md:728
msgctxt "P"
msgid "You may pass a closure to the `assertDispatched` or `assertNotDispatched` methods in order to assert that an event was dispatched that passes a given \"truth test\". If at least one event was dispatched that passes the given truth test then the assertion will be successful:"
msgstr ""

#: ./docs/10.x/events.md:721
#: ./docs/11.x/events.md:736
#: ./docs/master/events.md:730
msgctxt "CODE"
msgid ""
"Event::assertDispatched(function (OrderShipped $event) use ($order) {\n"
"    return $event->order->id === $order->id;\n"
"});"
msgstr ""

#: ./docs/10.x/events.md:725
#: ./docs/11.x/events.md:740
#: ./docs/master/events.md:734
msgctxt "P"
msgid "If you would simply like to assert that an event listener is listening to a given event, you may use the `assertListening` method:"
msgstr ""

#: ./docs/10.x/events.md:727
#: ./docs/11.x/events.md:742
#: ./docs/master/events.md:736
msgctxt "CODE"
msgid ""
"Event::assertListening(\n"
"    OrderShipped::class,\n"
"    SendShipmentNotification::class\n"
");"
msgstr ""

#: ./docs/10.x/events.md:733
#: ./docs/11.x/events.md:748
#: ./docs/master/events.md:742
msgctxt "P"
msgid "After calling `Event::fake()`, no event listeners will be executed. So, if your tests use model factories that rely on events, such as creating a UUID during a model's `creating` event, you should call `Event::fake()` **after** using your factories."
msgstr ""

#: ./docs/10.x/events.md:735
#: ./docs/11.x/events.md:750
#: ./docs/master/events.md:744
#~ msgctxt "P"
#~ msgid "<a name=\"faking-a-subset-of-events\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:736
#: ./docs/11.x/events.md:751
#: ./docs/master/events.md:745
msgctxt "H3"
msgid "Faking a Subset of Events"
msgstr ""

#: ./docs/10.x/events.md:738
#: ./docs/11.x/events.md:753
#: ./docs/master/events.md:747
msgctxt "P"
msgid "If you only want to fake event listeners for a specific set of events, you may pass them to the `fake` or `fakeFor` method:"
msgstr ""

#: ./docs/10.x/events.md:740
#: ./docs/11.x/events.md:770
#: ./docs/master/events.md:764
msgctxt "CODE"
msgid ""
"/**\n"
" * Test order process.\n"
" */\n"
"public function test_orders_can_be_processed(): void\n"
"{\n"
"    Event::fake([\n"
"        OrderCreated::class,\n"
"    ]);\n"
"\n"
"    $order = Order::factory()->create();\n"
"\n"
"    Event::assertDispatched(OrderCreated::class);\n"
"\n"
"    // Other events are dispatched as normal...\n"
"    $order->update([...]);\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:755
#: ./docs/master/events.md:749
msgctxt "CODE: php tab=Pest"
msgid ""
"test('orders can be processed', function () {\n"
"    Event::fake([\n"
"        OrderCreated::class,\n"
"    ]);\n"
"\n"
"    $order = Order::factory()->create();\n"
"\n"
"    Event::assertDispatched(OrderCreated::class);\n"
"\n"
"    // Other events are dispatched as normal...\n"
"    $order->update([...]);\n"
"});"
msgstr ""

#: ./docs/10.x/events.md:757
#: ./docs/11.x/events.md:789
#: ./docs/master/events.md:783
msgctxt "P"
msgid "You may fake all events except for a set of specified events using the `except` method:"
msgstr ""

#: ./docs/10.x/events.md:759
#: ./docs/11.x/events.md:791
#: ./docs/master/events.md:785
msgctxt "CODE"
msgid ""
"Event::fake()->except([\n"
"    OrderCreated::class,\n"
"]);"
msgstr ""

#: ./docs/10.x/events.md:763
#: ./docs/11.x/events.md:795
#: ./docs/master/events.md:789
#~ msgctxt "P"
#~ msgid "<a name=\"scoped-event-fakes\"></a>"
#~ msgstr ""

#: ./docs/10.x/events.md:764
#: ./docs/11.x/events.md:796
#: ./docs/master/events.md:790
msgctxt "H3"
msgid "Scoped Event Fakes"
msgstr ""

#: ./docs/10.x/events.md:766
#: ./docs/11.x/events.md:798
#: ./docs/master/events.md:792
msgctxt "P"
msgid "If you only want to fake event listeners for a portion of your test, you may use the `fakeFor` method:"
msgstr ""

#: ./docs/10.x/events.md:768
#: ./docs/11.x/events.md:821
#: ./docs/master/events.md:815
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Events\\OrderCreated;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * Test order process.\n"
"     */\n"
"    public function test_orders_can_be_processed(): void\n"
"    {\n"
"        $order = Event::fakeFor(function () {\n"
"            $order = Order::factory()->create();\n"
"\n"
"            Event::assertDispatched(OrderCreated::class);\n"
"\n"
"            return $order;\n"
"        });\n"
"\n"
"        // Events are dispatched as normal and observers will run ...\n"
"        $order->update([...]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/events.md:800
#: ./docs/master/events.md:794
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use App\\Events\\OrderCreated;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"\n"
"test('orders can be processed', function () {\n"
"    $order = Event::fakeFor(function () {\n"
"        $order = Order::factory()->create();\n"
"\n"
"        Event::assertDispatched(OrderCreated::class);\n"
"\n"
"        return $order;\n"
"    });\n"
"\n"
"    // Events are dispatched as normal and observers will run ...\n"
"    $order->update([...]);\n"
"});"
msgstr ""
