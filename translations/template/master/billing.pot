# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-21 20:57+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/billing.md:1
#, no-wrap
msgid "Laravel Cashier (Stripe)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:67
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/billing.md:67
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:67
#, no-wrap
msgid ""
"- [Installation](#installation)\n"
"    - [Database Migrations](#database-migrations)\n"
"- [Configuration](#configuration)\n"
"    - [Billable Model](#billable-model)\n"
"    - [API Keys](#api-keys)\n"
"    - [Currency Configuration](#currency-configuration)\n"
"    - [Tax Configuration](#tax-configuration)\n"
"    - [Logging](#logging)\n"
"    - [Using Custom Models](#using-custom-models)\n"
"- [Customers](#customers)\n"
"    - [Retrieving Customers](#retrieving-customers)\n"
"    - [Creating Customers](#creating-customers)\n"
"    - [Updating Customers](#updating-customers)\n"
"    - [Balances](#balances)\n"
"    - [Tax IDs](#tax-ids)\n"
"    - [Syncing Customer Data With "
"Stripe](#syncing-customer-data-with-stripe)\n"
"    - [Billing Portal](#billing-portal)\n"
"- [Payment Methods](#payment-methods)\n"
"    - [Storing Payment Methods](#storing-payment-methods)\n"
"    - [Retrieving Payment Methods](#retrieving-payment-methods)\n"
"    - [Determining If A User Has A Payment "
"Method](#check-for-a-payment-method)\n"
"    - [Updating The Default Payment "
"Method](#updating-the-default-payment-method)\n"
"    - [Adding Payment Methods](#adding-payment-methods)\n"
"    - [Deleting Payment Methods](#deleting-payment-methods)\n"
"- [Subscriptions](#subscriptions)\n"
"    - [Creating Subscriptions](#creating-subscriptions)\n"
"    - [Checking Subscription Status](#checking-subscription-status)\n"
"    - [Changing Prices](#changing-prices)\n"
"    - [Subscription Quantity](#subscription-quantity)\n"
"    - [Multiprice Subscriptions](#multiprice-subscriptions)\n"
"    - [Metered Billing](#metered-billing)\n"
"    - [Subscription Taxes](#subscription-taxes)\n"
"    - [Subscription Anchor Date](#subscription-anchor-date)\n"
"    - [Canceling Subscriptions](#cancelling-subscriptions)\n"
"    - [Resuming Subscriptions](#resuming-subscriptions)\n"
"- [Subscription Trials](#subscription-trials)\n"
"    - [With Payment Method Up Front](#with-payment-method-up-front)\n"
"    - [Without Payment Method Up Front](#without-payment-method-up-front)\n"
"    - [Extending Trials](#extending-trials)\n"
"- [Handling Stripe Webhooks](#handling-stripe-webhooks)\n"
"    - [Defining Webhook Event Handlers](#defining-webhook-event-handlers)\n"
"    - [Verifying Webhook Signatures](#verifying-webhook-signatures)\n"
"- [Single Charges](#single-charges)\n"
"    - [Simple Charge](#simple-charge)\n"
"    - [Charge With Invoice](#charge-with-invoice)\n"
"    - [Refunding Charges](#refunding-charges)\n"
"- [Checkout](#checkout)\n"
"    - [Product Checkouts](#product-checkouts)\n"
"    - [Single Charge Checkouts](#single-charge-checkouts)\n"
"    - [Subscription Checkouts](#subscription-checkouts)\n"
"    - [Collecting Tax IDs](#collecting-tax-ids)\n"
"- [Invoices](#invoices)\n"
"    - [Retrieving Invoices](#retrieving-invoices)\n"
"    - [Upcoming Invoices](#upcoming-invoices)\n"
"    - [Previewing Subscription "
"Invoices](#previewing-subscription-invoices)\n"
"    - [Generating Invoice PDFs](#generating-invoice-pdfs)\n"
"- [Handling Failed Payments](#handling-failed-payments)\n"
"- [Strong Customer Authentication (SCA)](#strong-customer-authentication)\n"
"    - [Payments Requiring Additional "
"Confirmation](#payments-requiring-additional-confirmation)\n"
"    - [Off-session Payment "
"Notifications](#off-session-payment-notifications)\n"
"- [Stripe SDK](#stripe-sdk)\n"
"- [Testing](#testing)\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:69
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:69
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:72
msgid ""
"[Laravel Cashier Stripe](https://github.com/laravel/cashier-stripe) provides "
"an expressive, fluent interface to [Stripe's](https://stripe.com) "
"subscription billing services. It handles almost all of the boilerplate "
"subscription billing code you are dreading writing. In addition to basic "
"subscription management, Cashier can handle coupons, swapping subscription, "
"subscription \"quantities\", cancellation grace periods, and even generate "
"invoice PDFs."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:74
#, no-wrap
msgid "<a name=\"upgrading-cashier\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:74
#, no-wrap
msgid "Upgrading Cashier"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:77
msgid ""
"When upgrading to a new version of Cashier, it's important that you "
"carefully review [the upgrade "
"guide](https://github.com/laravel/cashier-stripe/blob/master/UPGRADE.md)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:79
#, no-wrap
msgid ""
"> {note} To prevent breaking changes, Cashier uses a fixed Stripe API "
"version. Cashier 13 utilizes Stripe API version `2020-08-27`. The Stripe API "
"version will be updated on minor releases in order to make use of new Stripe "
"features and improvements.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:81
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:81
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:84
msgid ""
"First, install the Cashier package for Stripe using the Composer package "
"manager:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:86
#, no-wrap
msgid "    composer require laravel/cashier\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:88
#, no-wrap
msgid ""
"> {note} To ensure Cashier properly handles all Stripe events, remember to "
"[set up Cashier's webhook handling](#handling-stripe-webhooks).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:90
#, no-wrap
msgid "<a name=\"database-migrations\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:90
#, no-wrap
msgid "Database Migrations"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:93
msgid ""
"Cashier's service provider registers its own database migration directory, "
"so remember to migrate your database after installing the package. The "
"Cashier migrations will add several columns to your `users` table as well as "
"create a new `subscriptions` table to hold all of your customer's "
"subscriptions:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:95
#, no-wrap
msgid "    php artisan migrate\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:97
msgid ""
"If you need to overwrite the migrations that ship with Cashier, you can "
"publish them using the `vendor:publish` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:99
#, no-wrap
msgid "    php artisan vendor:publish --tag=\"cashier-migrations\"\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:101
msgid ""
"If you would like to prevent Cashier's migrations from running entirely, you "
"may use the `ignoreMigrations` method provided by Cashier. Typically, this "
"method should be called in the `register` method of your "
"`AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:103 docs/master/billing.md:175 docs/master/billing.md:238 docs/master/billing.md:791 docs/master/billing.md:1853
#, no-wrap
msgid "    use Laravel\\Cashier\\Cashier;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:113
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::ignoreMigrations();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:115
#, no-wrap
msgid ""
"> {note} Stripe recommends that any column used for storing Stripe "
"identifiers should be case-sensitive. Therefore, you should ensure the "
"column collation for the `stripe_id` column is set to `utf8_bin` when using "
"MySQL. More information regarding this can be found in the [Stripe "
"documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:117
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:117
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:120
#, no-wrap
msgid "<a name=\"billable-model\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:120
#, no-wrap
msgid "Billable Model"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:123
msgid ""
"Before using Cashier, add the `Billable` trait to your billable model "
"definition. Typically, this will be the `App\\Models\\User` model. This "
"trait provides various methods to allow you to perform common billing tasks, "
"such as creating subscriptions, applying coupons, and updating payment "
"method information:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:125
#, no-wrap
msgid "    use Laravel\\Cashier\\Billable;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:130
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use Billable;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:132
msgid ""
"Cashier assumes your billable model will be the `App\\Models\\User` class "
"that ships with Laravel. If you wish to change this you may specify a "
"different model via the `useCustomerModel` method. This method should "
"typically be called in the `boot` method of your `AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:135
#, no-wrap
msgid ""
"    use App\\Models\\Cashier\\User;\n"
"    use Laravel\\Cashier\\Cashier;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:145
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Cashier::useCustomerModel(User::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:147
#, no-wrap
msgid ""
"> {note} If you're using a model other than Laravel's supplied "
"`App\\Models\\User` model, you'll need to publish and alter the [Cashier "
"migrations](#installation) provided to match your alternative model's table "
"name.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:149
#, no-wrap
msgid "<a name=\"api-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:149
#, no-wrap
msgid "API Keys"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:152
msgid ""
"Next, you should configure your Stripe API keys in your application's `.env` "
"file. You can retrieve your Stripe API keys from the Stripe control panel:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:155
#, no-wrap
msgid ""
"    STRIPE_KEY=your-stripe-key\n"
"    STRIPE_SECRET=your-stripe-secret\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:157
#, no-wrap
msgid "<a name=\"currency-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:157
#, no-wrap
msgid "Currency Configuration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:160
msgid ""
"The default Cashier currency is United States Dollars (USD). You can change "
"the default currency by setting the `CASHIER_CURRENCY` environment variable "
"within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:162
#, no-wrap
msgid "    CASHIER_CURRENCY=eur\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:164
msgid ""
"In addition to configuring Cashier's currency, you may also specify a locale "
"to be used when formatting money values for display on invoices. Internally, "
"Cashier utilizes [PHP's `NumberFormatter` "
"class](https://www.php.net/manual/en/class.numberformatter.php) to set the "
"currency locale:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:166
#, no-wrap
msgid "    CASHIER_CURRENCY_LOCALE=nl_BE\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:168
#, no-wrap
msgid ""
"> {note} In order to use locales other than `en`, ensure the `ext-intl` PHP "
"extension is installed and configured on your server.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:170
#, no-wrap
msgid "<a name=\"tax-configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:170
#, no-wrap
msgid "Tax Configuration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:173
msgid ""
"Thanks to [Stripe Tax](https://stripe.com/tax), it's possible to "
"automatically calculate taxes for all invoices generated by Stripe. You can "
"enable automatic tax calculation by invoking the `calculateTaxes` method in "
"the `boot` method of your application's `App\\Providers\\AppServiceProvider` "
"class:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:185
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Cashier::calculateTaxes();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:187
msgid ""
"Once tax calculation has been enabled, any new subscriptions and any one-off "
"invoices that are generated will receive automatic tax calculation."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:189
msgid ""
"For this feature to work properly, your customer's billing details, such as "
"the customer's name, address, and tax ID, need to be synced to Stripe. You "
"may use the [customer data "
"synchronization](#syncing-customer-data-with-stripe) and [Tax ID](#tax-ids) "
"methods offered by Cashier to accomplish this."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:191
#, no-wrap
msgid ""
"> {note} Unfortunately, for now, no tax is calculated for [single "
"charges](#single-charges) or [single charge "
"checkouts](#single-charge-checkouts). In addition, Stripe Tax is currently "
"\"invite-only\" during its beta period. You can request access to Stripe Tax "
"via the [Stripe Tax website](https://stripe.com/tax#request-access).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:193
#, no-wrap
msgid "<a name=\"logging\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:193
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:196
msgid ""
"Cashier allows you to specify the log channel to be used when logging fatal "
"Stripe errors. You may specify the log channel by defining the "
"`CASHIER_LOGGER` environment variable within your application's `.env` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:198
#, no-wrap
msgid "    CASHIER_LOGGER=stack\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:200
msgid ""
"Exceptions that are generated by API calls to Stripe will be logged through "
"your application's default log channel."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:202
#, no-wrap
msgid "<a name=\"using-custom-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:202
#, no-wrap
msgid "Using Custom Models"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:205
msgid ""
"You are free to extend the models used internally by Cashier by defining "
"your own model and extending the corresponding Cashier model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:207
#, no-wrap
msgid "    use Laravel\\Cashier\\Subscription as CashierSubscription;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:212
#, no-wrap
msgid ""
"    class Subscription extends CashierSubscription\n"
"    {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:214
msgid ""
"After defining your model, you may instruct Cashier to use your custom model "
"via the `Laravel\\Cashier\\Cashier` class. Typically, you should inform "
"Cashier about your custom models in the `boot` method of your application's "
"`App\\Providers\\AppServiceProvider` class:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:217
#, no-wrap
msgid ""
"    use App\\Models\\Cashier\\Subscription;\n"
"    use App\\Models\\Cashier\\SubscriptionItem;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:228
#, no-wrap
msgid ""
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        Cashier::useSubscriptionModel(Subscription::class);\n"
"        Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:230
#, no-wrap
msgid "<a name=\"customers\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:230
#, no-wrap
msgid "Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:233
#, no-wrap
msgid "<a name=\"retrieving-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:233
#, no-wrap
msgid "Retrieving Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:236
msgid ""
"You can retrieve a customer by their Stripe ID using the "
"`Cashier::findBillable` method. This method will return an instance of the "
"billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:240
#, no-wrap
msgid "    $user = Cashier::findBillable($stripeId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:242
#, no-wrap
msgid "<a name=\"creating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:242
#, no-wrap
msgid "Creating Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:245
msgid ""
"Occasionally, you may wish to create a Stripe customer without beginning a "
"subscription. You may accomplish this using the `createAsStripeCustomer` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:247
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:249
msgid ""
"Once the customer has been created in Stripe, you may begin a subscription "
"at a later date. You may provide an optional `$options` array to pass in any "
"additional [customer creation parameters that are supported by the Stripe "
"API](https://stripe.com/docs/api/customers/create):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:251
#, no-wrap
msgid "    $stripeCustomer = $user->createAsStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:253
msgid ""
"You may use the `asStripeCustomer` method if you want to return the Stripe "
"customer object for a billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:255
#, no-wrap
msgid "    $stripeCustomer = $user->asStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:257
msgid ""
"The `createOrGetStripeCustomer` method may be used if you would like to "
"retrieve the Stripe customer object for a given billable model but are not "
"sure whether the billable model is already a customer within Stripe. This "
"method will create a new customer in Stripe if one does not already exist:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:259
#, no-wrap
msgid "    $stripeCustomer = $user->createOrGetStripeCustomer();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:261
#, no-wrap
msgid "<a name=\"updating-customers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:261
#, no-wrap
msgid "Updating Customers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:264
msgid ""
"Occasionally, you may wish to update the Stripe customer directly with "
"additional information. You may accomplish this using the "
"`updateStripeCustomer` method. This method accepts an array of [customer "
"update options supported by the Stripe "
"API](https://stripe.com/docs/api/customers/update):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:266
#, no-wrap
msgid "    $stripeCustomer = $user->updateStripeCustomer($options);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:268
#, no-wrap
msgid "<a name=\"balances\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:268
#, no-wrap
msgid "Balances"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:271
msgid ""
"Stripe allows you to credit or debit a customer's \"balance\". Later, this "
"balance will be credited or debited on new invoices. To check the customer's "
"total balance you may use the `balance` method that is available on your "
"billable model. The `balance` method will return a formatted string "
"representation of the balance in the customer's currency:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:273
#, no-wrap
msgid "    $balance = $user->balance();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:275
msgid ""
"To credit a customer's balance, you may provide a negative value to the "
"`applyBalance` method. If you wish, you may also provide a description:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:277
#, no-wrap
msgid "    $user->applyBalance(-500, 'Premium customer top-up.');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:279
msgid ""
"Providing a positive value to the `applyBalance` method will debit the "
"customer's balance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:281
#, no-wrap
msgid "    $user->applyBalance(300, 'Bad usage penalty.');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:283
msgid ""
"The `applyBalance` method will create new customer balance transactions for "
"the customer. You may retrieve these transaction records using the "
"`balanceTransactions` method, which may be useful in order to provide a log "
"of credits and debits for the customer to review:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:286
#, no-wrap
msgid ""
"    // Retrieve all transactions...\n"
"    $transactions = $user->balanceTransactions();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:290
#, no-wrap
msgid ""
"    foreach ($transactions as $transaction) {\n"
"        // Transaction amount...\n"
"        $amount = $transaction->amount(); // $2.31\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:294
#, no-wrap
msgid ""
"        // Retrieve the related invoice when available...\n"
"        $invoice = $transaction->invoice();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:296
#, no-wrap
msgid "<a name=\"tax-ids\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:296
#, no-wrap
msgid "Tax IDs"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:299
msgid ""
"Cashier offers an easy way to manage a customer's tax IDs. For example, the "
"`taxIds` method may be used to retrieve all of the [tax "
"IDs](https://stripe.com/docs/api/customer_tax_ids/object) that are assigned "
"to a customer as a collection:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:301
#, no-wrap
msgid "    $taxIds = $user->taxIds();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:303
msgid "You can also retrieve a specific tax ID for a customer by its identifier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:305
#, no-wrap
msgid "    $taxId = $user->findTaxId('txi_belgium');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:307
msgid ""
"You may create a new Tax ID by providing a valid "
"[type](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-type) "
"and value to the `createTaxId` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:309
#, no-wrap
msgid "    $taxId = $user->createTaxId('eu_vat', 'BE0123456789');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:311
msgid ""
"The `createTaxId` method will immediately add the VAT ID to the customer's "
"account. [Verification of VAT IDs is also done by "
"Stripe](https://stripe.com/docs/invoicing/customer/tax-ids#validation); "
"however, this is an asynchronous process. You can be notified of "
"verification updates by subscribing to the `customer.tax_id.updated` webhook "
"event and inspecting [the VAT IDs `verification` "
"parameter](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-verification). "
"For more information on handling webhooks, please consult the [documentation "
"on defining webhook handlers](#handling-stripe-webhooks)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:313
msgid "You may delete a tax ID using the `deleteTaxId` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:315
#, no-wrap
msgid "    $user->deleteTaxId('txi_belgium');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:317
#, no-wrap
msgid "<a name=\"syncing-customer-data-with-stripe\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:317
#, no-wrap
msgid "Syncing Customer Data With Stripe"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:320
msgid ""
"Typically, when your application's users update their name, email address, "
"or other information that is also stored by Stripe, you should inform Stripe "
"of the updates. By doing so, Stripe's copy of the information will be in "
"sync with your application's."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:322
msgid ""
"To automate this, you may define an event listener on your billable model "
"that reacts to the model's `updated` event. Then, within your event "
"listener, you may invoke the `syncStripeCustomerDetails` method on the "
"model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:324
#, no-wrap
msgid "    use function Illuminate\\Events\\queueable;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:338
#, no-wrap
msgid ""
"    /**\n"
"     * The \"booted\" method of the model.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected static function booted()\n"
"    {\n"
"        static::updated(queueable(function ($customer) {\n"
"            if ($customer->hasStripeId()) {\n"
"                $customer->syncStripeCustomerDetails();\n"
"            }\n"
"        }));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:340
msgid ""
"Now, every time your customer model is updated, its information will be "
"synced with Stripe. For convenience, Cashier will automatically sync your "
"customer's information with Stripe on the initial creation of the customer."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:342
msgid ""
"You may customize the columns used for syncing customer information to "
"Stripe by overriding a variety of methods provided by Cashier. For example, "
"you may override the `stripeName` method to customize the attribute that "
"should be considered the customer's \"name\" when Cashier syncs customer "
"information to Stripe:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:352
#, no-wrap
msgid ""
"    /**\n"
"     * Get the customer name that should be synced to Stripe.\n"
"     *\n"
"     * @return string|null\n"
"     */\n"
"    public function stripeName()\n"
"    {\n"
"        return $this->company_name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:354
msgid ""
"Similarly, you may override the `stripeEmail`, `stripePhone`, and "
"`stripeAddress` methods. These methods will sync information to their "
"corresponding customer parameters when [updating the Stripe customer "
"object](https://stripe.com/docs/api/customers/update). If you wish to take "
"total control over the customer information sync process, you may override "
"the `syncStripeCustomerDetails` method."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:356
#, no-wrap
msgid "<a name=\"billing-portal\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:356
#, no-wrap
msgid "Billing Portal"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:359
msgid ""
"Stripe offers [an easy way to set up a billing "
"portal](https://stripe.com/docs/billing/subscriptions/customer-portal) so "
"that your customer can manage their subscription, payment methods, and view "
"their billing history. You can redirect your users to the billing portal by "
"invoking the `redirectToBillingPortal` method on the billable model from a "
"controller or route:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:361 docs/master/billing.md:369 docs/master/billing.md:596 docs/master/billing.md:909 docs/master/billing.md:1030 docs/master/billing.md:1167 docs/master/billing.md:1229 docs/master/billing.md:1440 docs/master/billing.md:1564 docs/master/billing.md:1602 docs/master/billing.md:1610 docs/master/billing.md:1618 docs/master/billing.md:1651 docs/master/billing.md:1664 docs/master/billing.md:1679 docs/master/billing.md:1689 docs/master/billing.md:1702
#, no-wrap
msgid "    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:365
#, no-wrap
msgid ""
"    Route::get('/billing-portal', function (Request $request) {\n"
"        return $request->user()->redirectToBillingPortal();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:367
msgid ""
"By default, when the user is finished managing their subscription, they will "
"be able to return to the `home` route of your application via a link within "
"the Stripe billing portal. You may provide a custom URL that the user should "
"return to by passing the URL as an argument to the `redirectToBillingPortal` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:373
#, no-wrap
msgid ""
"    Route::get('/billing-portal', function (Request $request) {\n"
"        return "
"$request->user()->redirectToBillingPortal(route('billing'));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:375
msgid ""
"If you would like to generate the URL to the billing portal without "
"generating an HTTP redirect response, you may invoke the `billingPortalUrl` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:377
#, no-wrap
msgid "    $url = $request->user()->billingPortalUrl(route('billing'));\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:379
#, no-wrap
msgid "<a name=\"payment-methods\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:379
#, no-wrap
msgid "Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:382
#, no-wrap
msgid "<a name=\"storing-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:382
#, no-wrap
msgid "Storing Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:385
msgid ""
"In order to create subscriptions or perform \"one off\" charges with Stripe, "
"you will need to store a payment method and retrieve its identifier from "
"Stripe. The approach used to accomplish this differs based on whether you "
"plan to use the payment method for subscriptions or single charges, so we "
"will examine both below."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:387
#, no-wrap
msgid "<a name=\"payment-methods-for-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:387
#, no-wrap
msgid "Payment Methods For Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:390
msgid ""
"When storing a customer's credit card information for future use by a "
"subscription, the Stripe \"Setup Intents\" API must be used to securely "
"gather the customer's payment method details. A \"Setup Intent\" indicates "
"to Stripe the intention to charge a customer's payment method. Cashier's "
"`Billable` trait includes the `createSetupIntent` method to easily create a "
"new Setup Intent. You should invoke this method from the route or controller "
"that will render the form which gathers your customer's payment method "
"details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:394
#, no-wrap
msgid ""
"    return view('update-payment-method', [\n"
"        'intent' => $user->createSetupIntent()\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:396
msgid ""
"After you have created the Setup Intent and passed it to the view, you "
"should attach its secret to the element that will gather the payment "
"method. For example, consider this \"update payment method\" form:"
msgstr ""

#. type: Code fence info string
#: docs/master/billing.md:397 docs/master/billing.md:410 docs/master/billing.md:457 docs/master/billing.md:470 docs/master/billing.md:782
#, no-wrap
msgid "html"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:397
#, no-wrap
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n"
"    Update Payment Method\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:409
msgid ""
"Next, the Stripe.js library may be used to attach a [Stripe "
"Element](https://stripe.com/docs/stripe-js) to the form and securely gather "
"the customer's payment details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:410 docs/master/billing.md:470
#, no-wrap
msgid ""
"<script src=\"https://js.stripe.com/v3/\"></script>\n"
"\n"
"<script>\n"
"    const stripe = Stripe('stripe-public-key');\n"
"\n"
"    const elements = stripe.elements();\n"
"    const cardElement = elements.create('card');\n"
"\n"
"    cardElement.mount('#card-element');\n"
"</script>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:424
msgid ""
"Next, the card can be verified and a secure \"payment method identifier\" "
"can be retrieved from Stripe using [Stripe's `confirmCardSetup` "
"method](https://stripe.com/docs/js/setup_intents/confirm_card_setup):"
msgstr ""

#. type: Code fence info string
#: docs/master/billing.md:425 docs/master/billing.md:485
#, no-wrap
msgid "js"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:425
#, no-wrap
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"const clientSecret = cardButton.dataset.secret;\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { setupIntent, error } = await stripe.confirmCardSetup(\n"
"        clientSecret, {\n"
"            payment_method: {\n"
"                card: cardElement,\n"
"                billing_details: { name: cardHolderName.value }\n"
"            }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:449
msgid ""
"After the card has been verified by Stripe, you may pass the resulting "
"`setupIntent.payment_method` identifier to your Laravel application, where "
"it can be attached to the customer. The payment method can either be [added "
"as a new payment method](#adding-payment-methods) or [used to update the "
"default payment method](#updating-the-default-payment-method). You can also "
"immediately use the payment method identifier to [create a new "
"subscription](#creating-subscriptions)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:451
#, no-wrap
msgid ""
"> {tip} If you would like more information about Setup Intents and gathering "
"customer payment details please [review this overview provided by "
"Stripe](https://stripe.com/docs/payments/save-and-reuse#php).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:453
#, no-wrap
msgid "<a name=\"payment-methods-for-single-charges\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:453
#, no-wrap
msgid "Payment Methods For Single Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:456
msgid ""
"Of course, when making a single charge against a customer's payment method, "
"we will only need to use a payment method identifier once. Due to Stripe "
"limitations, you may not use the stored default payment method of a customer "
"for single charges. You must allow the customer to enter their payment "
"method details using the Stripe.js library. For example, consider the "
"following form:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:457
#, no-wrap
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\">\n"
"    Process Payment\n"
"</button>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:469
msgid ""
"After defining such a form, the Stripe.js library may be used to attach a "
"[Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely "
"gather the customer's payment details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:484
msgid ""
"Next, the card can be verified and a secure \"payment method identifier\" "
"can be retrieved from Stripe using [Stripe's `createPaymentMethod` "
"method](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:485
#, no-wrap
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { paymentMethod, error } = await stripe.createPaymentMethod(\n"
"        'card', cardElement, {\n"
"            billing_details: { name: cardHolderName.value }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:505
msgid ""
"If the card is verified successfully, you may pass the `paymentMethod.id` to "
"your Laravel application and process a [single charge](#simple-charge)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:507
#, no-wrap
msgid "<a name=\"retrieving-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:507
#, no-wrap
msgid "Retrieving Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:510
msgid ""
"The `paymentMethods` method on the billable model instance returns a "
"collection of `Laravel\\Cashier\\PaymentMethod` instances:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:512
#, no-wrap
msgid "    $paymentMethods = $user->paymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:514
msgid ""
"By default, this method will return payment methods of the `card` type. To "
"retrieve payment methods of a different type, you may pass the `type` as an "
"argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:516
#, no-wrap
msgid "    $paymentMethods = $user->paymentMethods('sepa_debit');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:518
msgid ""
"To retrieve the customer's default payment method, the "
"`defaultPaymentMethod` method may be used:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:520
#, no-wrap
msgid "    $paymentMethod = $user->defaultPaymentMethod();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:522
msgid ""
"You can retrieve a specific payment method that is attached to the billable "
"model using the `findPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:524
#, no-wrap
msgid "    $paymentMethod = $user->findPaymentMethod($paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:526
#, no-wrap
msgid "<a name=\"check-for-a-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:526
#, no-wrap
msgid "Determining If A User Has A Payment Method"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:529
msgid ""
"To determine if a billable model has a default payment method attached to "
"their account, invoke the `hasDefaultPaymentMethod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:533
#, no-wrap
msgid ""
"    if ($user->hasDefaultPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:535
msgid ""
"You may use the `hasPaymentMethod` method to determine if a billable model "
"has at least one payment method attached to their account:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:539
#, no-wrap
msgid ""
"    if ($user->hasPaymentMethod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:541
msgid ""
"This method will determine if the billable model has payment methods of the "
"`card` type. To determine if a payment method of another type exists for the "
"model, you may pass the `type` as an argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:545
#, no-wrap
msgid ""
"    if ($user->hasPaymentMethod('sepa_debit')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:547
#, no-wrap
msgid "<a name=\"updating-the-default-payment-method\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:547
#, no-wrap
msgid "Updating The Default Payment Method"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:550
msgid ""
"The `updateDefaultPaymentMethod` method may be used to update a customer's "
"default payment method information. This method accepts a Stripe payment "
"method identifier and will assign the new payment method as the default "
"billing payment method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:552
#, no-wrap
msgid "    $user->updateDefaultPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:554
msgid ""
"To sync your default payment method information with the customer's default "
"payment method information in Stripe, you may use the "
"`updateDefaultPaymentMethodFromStripe` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:556
#, no-wrap
msgid "    $user->updateDefaultPaymentMethodFromStripe();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:558
#, no-wrap
msgid ""
"> {note} The default payment method on a customer can only be used for "
"invoicing and creating new subscriptions. Due to limitations imposed by "
"Stripe, it may not be used for single charges.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:560
#, no-wrap
msgid "<a name=\"adding-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:560
#, no-wrap
msgid "Adding Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:563
msgid ""
"To add a new payment method, you may call the `addPaymentMethod` method on "
"the billable model, passing the payment method identifier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:565
#, no-wrap
msgid "    $user->addPaymentMethod($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:567
#, no-wrap
msgid ""
"> {tip} To learn how to retrieve payment method identifiers please review "
"the [payment method storage documentation](#storing-payment-methods).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:569
#, no-wrap
msgid "<a name=\"deleting-payment-methods\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:569
#, no-wrap
msgid "Deleting Payment Methods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:572
msgid ""
"To delete a payment method, you may call the `delete` method on the "
"`Laravel\\Cashier\\PaymentMethod` instance you wish to delete:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:574
#, no-wrap
msgid "    $paymentMethod->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:576
msgid ""
"The `deletePaymentMethods` method will delete all of the payment method "
"information for the billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:578
#, no-wrap
msgid "    $user->deletePaymentMethods();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:580
msgid ""
"By default, this method will delete payment methods of the `card` type. To "
"delete payment methods of a different type you can pass the `type` as an "
"argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:582
#, no-wrap
msgid "    $user->deletePaymentMethods('sepa_debit');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:584
#, no-wrap
msgid ""
"> {note} If a user has an active subscription, your application should not "
"allow them to delete their default payment method.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:586
#, no-wrap
msgid "<a name=\"subscriptions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:586
#, no-wrap
msgid "Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:589
msgid ""
"Subscriptions provide a way to set up recurring payments for your "
"customers. Stripe subscriptions managed by Cashier provide support for "
"multiple subscription prices, subscription quantities, trials, and more."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:591
#, no-wrap
msgid "<a name=\"creating-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:591
#, no-wrap
msgid "Creating Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:594
msgid ""
"To create a subscription, first retrieve an instance of your billable model, "
"which typically will be an instance of `App\\Models\\User`. Once you have "
"retrieved the model instance, you may use the `newSubscription` method to "
"create the model's subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:601
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription(\n"
"            'default', 'price_monthly'\n"
"        )->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:604 docs/master/billing.md:918 docs/master/billing.md:1038 docs/master/billing.md:1177 docs/master/billing.md:1237 docs/master/billing.md:1448
#, no-wrap
msgid ""
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:606
msgid ""
"The first argument passed to the `newSubscription` method should be the "
"internal name of the subscription. If your application only offers a single "
"subscription, you might call this `default` or `primary`. This subscription "
"name is only for internal application usage and is not meant to be shown to "
"users. In addition, it should not contain spaces and it should never be "
"changed after creating the subscription. The second argument is the specific "
"price the user is subscribing to. This value should correspond to the "
"price's identifier in Stripe."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:608
msgid ""
"The `create` method, which accepts [a Stripe payment method "
"identifier](#storing-payment-methods) or Stripe `PaymentMethod` object, will "
"begin the subscription as well as update your database with the billable "
"model's Stripe customer ID and other relevant billing information."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:610
#, no-wrap
msgid ""
"> {note} Passing a payment method identifier directly to the `create` "
"subscription method will also automatically add it to the user's stored "
"payment methods.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:612
#, no-wrap
msgid "<a name=\"collecting-recurring-payments-via-invoice-emails\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:612
#, no-wrap
msgid "Collecting Recurring Payments Via Invoice Emails"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:615
msgid ""
"Instead of collecting a customer's recurring payments automatically, you may "
"instruct Stripe to email an invoice to the customer each time their "
"recurring payment is due. Then, the customer may manually pay the invoice "
"once they receive it. The customer does not need to provide a payment method "
"up front when collecting recurring payments via invoices:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:617
#, no-wrap
msgid ""
"    $user->newSubscription('default', "
"'price_monthly')->createAndSendInvoice();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:619
msgid ""
"The amount of time a customer has to pay their invoice before their "
"subscription is canceled is determined by your subscription and invoice "
"settings within the [Stripe "
"dashboard](https://dashboard.stripe.com/settings/billing/automatic)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:621
#, no-wrap
msgid "<a name=\"subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:621 docs/master/billing.md:987
#, no-wrap
msgid "Quantities"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:624
msgid ""
"If you would like to set a specific "
"[quantity](https://stripe.com/docs/billing/subscriptions/quantities) for the "
"price when creating the subscription, you should invoke the `quantity` "
"method on the subscription builder before creating the subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:628
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->quantity(5)\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:630
#, no-wrap
msgid "<a name=\"additional-details\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:630
#, no-wrap
msgid "Additional Details"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:633
msgid ""
"If you would like to specify additional "
"[customer](https://stripe.com/docs/api/customers/create) or "
"[subscription](https://stripe.com/docs/api/subscriptions/create) options "
"supported by Stripe, you may do so by passing them as the second and third "
"arguments to the `create` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:639
#, no-wrap
msgid ""
"    $user->newSubscription('default', "
"'price_monthly')->create($paymentMethod, [\n"
"        'email' => $email,\n"
"    ], [\n"
"        'metadata' => ['note' => 'Some extra information.'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:641
#, no-wrap
msgid "<a name=\"coupons\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:641
#, no-wrap
msgid "Coupons"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:644
msgid ""
"If you would like to apply a coupon when creating the subscription, you may "
"use the `withCoupon` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:648
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->withCoupon('code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:650
msgid ""
"Or, if you would like to apply a [Stripe promotion "
"code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you "
"may use the `withPromotionCode` method. The given promotion code ID should "
"be the Stripe API ID assigned to the promotion code and not the customer "
"facing promotion code:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:654
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"         ->withPromotionCode('promo_code')\n"
"         ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:656
#, no-wrap
msgid "<a name=\"adding-subscriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:656
#, no-wrap
msgid "Adding Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:659
msgid ""
"If you would like to add a subscription to a customer who already has a "
"default payment method you may invoke the `add` method on the subscription "
"builder:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:661 docs/master/billing.md:835 docs/master/billing.md:871 docs/master/billing.md:955 docs/master/billing.md:1007 docs/master/billing.md:1152 docs/master/billing.md:1275 docs/master/billing.md:1313 docs/master/billing.md:1458
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:663 docs/master/billing.md:851 docs/master/billing.md:873 docs/master/billing.md:922 docs/master/billing.md:930 docs/master/billing.md:940 docs/master/billing.md:957 docs/master/billing.md:965 docs/master/billing.md:974 docs/master/billing.md:992 docs/master/billing.md:1009 docs/master/billing.md:1019 docs/master/billing.md:1056 docs/master/billing.md:1062 docs/master/billing.md:1068 docs/master/billing.md:1074 docs/master/billing.md:1083 docs/master/billing.md:1089 docs/master/billing.md:1154 docs/master/billing.md:1292
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:665
#, no-wrap
msgid "    $user->newSubscription('default', 'price_monthly')->add();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:667
#, no-wrap
msgid "<a name=\"creating-subscriptions-from-the-stripe-dashboard\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:667
#, no-wrap
msgid "Creating Subscriptions From The Stripe Dashboard"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:670
msgid ""
"You may also create subscriptions from the Stripe dashboard itself. When "
"doing so, Cashier will sync newly added subscriptions and assign them a name "
"of `default`. To customize the subscription name that is assigned to "
"dashboard created subscriptions, [extend the "
"`WebhookController`](/docs/{{version}}/billing#defining-webhook-event-handlers) "
"and overwrite the `newSubscriptionName` method."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:672
msgid ""
"In addition, you may only create one type of subscription via the Stripe "
"dashboard. If your application offers multiple subscriptions that use "
"different names, only one type of subscription may be added through the "
"Stripe dashboard."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:674
msgid ""
"Finally, you should always make sure to only add one active subscription per "
"type of subscription offered by your application. If customer has two "
"`default` subscriptions, only the most recently added subscription will be "
"used by Cashier even though both would be synced with your application's "
"database."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:676
#, no-wrap
msgid "<a name=\"checking-subscription-status\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:676
#, no-wrap
msgid "Checking Subscription Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:679
msgid ""
"Once a customer is subscribed to your application, you may easily check "
"their subscription status using a variety of convenient methods. First, the "
"`subscribed` method returns `true` if the customer has an active "
"subscription, even if the subscription is currently within its trial "
"period. The `subscribed` method accepts the name of the subscription as its "
"first argument:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:683
#, no-wrap
msgid ""
"    if ($user->subscribed('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:685
msgid ""
"The `subscribed` method also makes a great candidate for a [route "
"middleware](/docs/{{version}}/middleware), allowing you to filter access to "
"routes and controllers based on the user's subscription status:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:687 docs/master/billing.md:1382 docs/master/billing.md:1406
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:689
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:691
#, no-wrap
msgid "    use Closure;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:707
#, no-wrap
msgid ""
"    class EnsureUserIsSubscribed\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            if ($request->user() && ! "
"$request->user()->subscribed('default')) {\n"
"                // This user is not a paying customer...\n"
"                return redirect('billing');\n"
"            }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:711
#, no-wrap
msgid ""
"            return $next($request);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:713
msgid ""
"If you would like to determine if a user is still within their trial period, "
"you may use the `onTrial` method. This method can be useful for determining "
"if you should display a warning to the user that they are still on their "
"trial period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:717 docs/master/billing.md:1259
#, no-wrap
msgid ""
"    if ($user->subscription('default')->onTrial()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:719
msgid ""
"The `subscribedToProduct` method may be used to determine if the user is "
"subscribed to a given product based on a given Stripe product's "
"identifier. In Stripe, products are collections of prices. In this example, "
"we will determine if the user's `default` subscription is actively "
"subscribed to the application's \"premium\" product. The given Stripe "
"product identifier should correspond to one of your product's identifiers in "
"the Stripe dashboard:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:723
#, no-wrap
msgid ""
"    if ($user->subscribedToProduct('prod_premium', 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:725
msgid ""
"By passing an array to the `subscribedToProduct` method, you may determine "
"if the user's `default` subscription is actively subscribed to the "
"application's \"basic\" or \"premium\" product:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:729
#, no-wrap
msgid ""
"    if ($user->subscribedToProduct(['prod_basic', 'prod_premium'], "
"'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:731
msgid ""
"The `subscribedToPrice` method may be used to determine if a customer's "
"subscription corresponds to a given price ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:735
#, no-wrap
msgid ""
"    if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:737
msgid ""
"The `recurring` method may be used to determine if the user is currently "
"subscribed and is no longer within their trial period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:741
#, no-wrap
msgid ""
"    if ($user->subscription('default')->recurring()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:743
#, no-wrap
msgid ""
"> {note} If a user has two subscriptions with the same name, the most recent "
"subscription will always be returned by the `subscription` method. For "
"example, a user might have two subscription records named `default`; "
"however, one of the subscriptions may be an old, expired subscription, while "
"the other is the current, active subscription. The most recent subscription "
"will always be returned while older subscriptions are kept in the database "
"for historical review.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:745
#, no-wrap
msgid "<a name=\"cancelled-subscription-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:745
#, no-wrap
msgid "Canceled Subscription Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:748
msgid ""
"To determine if the user was once an active subscriber but has canceled "
"their subscription, you may use the `canceled` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:752
#, no-wrap
msgid ""
"    if ($user->subscription('default')->canceled()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:754
msgid ""
"You may also determine if a user has canceled their subscription but are "
"still on their \"grace period\" until the subscription fully expires. For "
"example, if a user cancels a subscription on March 5th that was originally "
"scheduled to expire on March 10th, the user is on their \"grace period\" "
"until March 10th. Note that the `subscribed` method still returns `true` "
"during this time:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:758 docs/master/billing.md:1196
#, no-wrap
msgid ""
"    if ($user->subscription('default')->onGracePeriod()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:760
msgid ""
"To determine if the user has canceled their subscription and is no longer "
"within their \"grace period\", you may use the `ended` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:764
#, no-wrap
msgid ""
"    if ($user->subscription('default')->ended()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:766
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:766
#, no-wrap
msgid "Incomplete and Past Due Status"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:769
msgid ""
"If a subscription requires a secondary payment action after creation the "
"subscription will be marked as `incomplete`. Subscription statuses are "
"stored in the `stripe_status` column of Cashier's `subscriptions` database "
"table."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:771
msgid ""
"Similarly, if a secondary payment action is required when swapping prices "
"the subscription will be marked as `past_due`. When your subscription is in "
"either of these states it will not be active until the customer has "
"confirmed their payment. Determining if a subscription has an incomplete "
"payment may be accomplished using the `hasIncompletePayment` method on the "
"billable model or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:775 docs/master/billing.md:1780
#, no-wrap
msgid ""
"    if ($user->hasIncompletePayment('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:779 docs/master/billing.md:1784
#, no-wrap
msgid ""
"    if ($user->subscription('default')->hasIncompletePayment()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:781
msgid ""
"When a subscription has an incomplete payment, you should direct the user to "
"Cashier's payment confirmation page, passing the `latestPayment` "
"identifier. You may use the `latestPayment` method available on subscription "
"instance to retrieve this identifier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:782
#, no-wrap
msgid ""
"<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) "
"}}\">\n"
"    Please confirm your payment.\n"
"</a>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:789
msgid ""
"If you would like the subscription to still be considered active when it's "
"in a `past_due` state, you may use the `keepPastDueSubscriptionsActive` "
"method provided by Cashier. Typically, this method should be called in the "
"`register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:801
#, no-wrap
msgid ""
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        Cashier::keepPastDueSubscriptionsActive();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:803
#, no-wrap
msgid ""
"> {note} When a subscription is in an `incomplete` state it cannot be "
"changed until the payment is confirmed. Therefore, the `swap` and "
"`updateQuantity` methods will throw an exception when the subscription is in "
"an `incomplete` state.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:805
#, no-wrap
msgid "<a name=\"subscription-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:805
#, no-wrap
msgid "Subscription Scopes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:808
msgid ""
"Most subscription states are also available as query scopes so that you may "
"easily query your database for subscriptions that are in a given state:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:811
#, no-wrap
msgid ""
"    // Get all active subscriptions...\n"
"    $subscriptions = Subscription::query()->active()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:814
#, no-wrap
msgid ""
"    // Get all of the canceled subscriptions for a user...\n"
"    $subscriptions = $user->subscriptions()->canceled()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:816
msgid "A complete list of available scopes is available below:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:828
#, no-wrap
msgid ""
"    Subscription::query()->active();\n"
"    Subscription::query()->canceled();\n"
"    Subscription::query()->ended();\n"
"    Subscription::query()->incomplete();\n"
"    Subscription::query()->notCanceled();\n"
"    Subscription::query()->notOnGracePeriod();\n"
"    Subscription::query()->notOnTrial();\n"
"    Subscription::query()->onGracePeriod();\n"
"    Subscription::query()->onTrial();\n"
"    Subscription::query()->pastDue();\n"
"    Subscription::query()->recurring();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:830
#, no-wrap
msgid "<a name=\"changing-prices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:830
#, no-wrap
msgid "Changing Prices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:833
msgid ""
"After a customer is subscribed to your application, they may occasionally "
"want to change to a new subscription price. To swap a customer to a new "
"price, pass the Stripe price's identifier to the `swap` method. When "
"swapping prices, it is assumed that the user would like to re-activate their "
"subscription if it was previously canceled. The given price identifier "
"should correspond to a Stripe price identifier available in the Stripe "
"dashboard:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:837
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:839
#, no-wrap
msgid "    $user->subscription('default')->swap('price_yearly');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:841
msgid ""
"If the customer is on trial, the trial period will be "
"maintained. Additionally, if a \"quantity\" exists for the subscription, "
"that quantity will also be maintained."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:843
msgid ""
"If you would like to swap prices and cancel any trial period the customer is "
"currently on, you may invoke the `skipTrial` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:847
#, no-wrap
msgid ""
"    $user->subscription('default')\n"
"            ->skipTrial()\n"
"            ->swap('price_yearly');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:849
msgid ""
"If you would like to swap prices and immediately invoice the customer "
"instead of waiting for their next billing cycle, you may use the "
"`swapAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:853
#, no-wrap
msgid "    $user->subscription('default')->swapAndInvoice('price_yearly');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:855
#, no-wrap
msgid "<a name=\"prorations\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:855
#, no-wrap
msgid "Prorations"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:858
msgid ""
"By default, Stripe prorates charges when swapping between prices. The "
"`noProrate` method may be used to update the subscription's price without "
"prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:860
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->swap('price_yearly');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:862
msgid ""
"For more information on subscription proration, consult the [Stripe "
"documentation](https://stripe.com/docs/billing/subscriptions/prorations)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:864
#, no-wrap
msgid ""
"> {note} Executing the `noProrate` method before the `swapAndInvoice` method "
"will have no effect on proration. An invoice will always be issued.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:866
#, no-wrap
msgid "<a name=\"subscription-quantity\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:866
#, no-wrap
msgid "Subscription Quantity"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:869
msgid ""
"Sometimes subscriptions are affected by \"quantity\". For example, a project "
"management application might charge $10 per month per project. You may use "
"the `incrementQuantity` and `decrementQuantity` methods to easily increment "
"or decrement your subscription quantity:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:875
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:878
#, no-wrap
msgid ""
"    // Add five to the subscription's current quantity...\n"
"    $user->subscription('default')->incrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:880
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:883
#, no-wrap
msgid ""
"    // Subtract five from the subscription's current quantity...\n"
"    $user->subscription('default')->decrementQuantity(5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:885
msgid ""
"Alternatively, you may set a specific quantity using the `updateQuantity` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:887
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:889
msgid ""
"The `noProrate` method may be used to update the subscription's quantity "
"without prorating the charges:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:891
#, no-wrap
msgid "    $user->subscription('default')->noProrate()->updateQuantity(10);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:893
msgid ""
"For more information on subscription quantities, consult the [Stripe "
"documentation](https://stripe.com/docs/subscriptions/quantities)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:895
#, no-wrap
msgid "<a name=\"multiprice-subscription-quantities\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:895
#, no-wrap
msgid "Multiprice Subscription Quantities"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:898
msgid ""
"If your subscription is a [multiprice "
"subscription](#multiprice-subscriptions), you should pass the name of the "
"price whose quantity you wish to increment or decrement as the second "
"argument to the increment / decrement methods:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:900
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(1, 'price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:902
#, no-wrap
msgid "<a name=\"multiprice-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:902
#, no-wrap
msgid "Multiprice Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:905
msgid ""
"[Multiprice "
"subscriptions](https://stripe.com/docs/billing/subscriptions/multiple-products) "
"allow you to assign multiple billing prices to a single subscription. For "
"example, imagine you are building a customer service \"helpdesk\" "
"application that has a base subscription price of $10 per month but offers a "
"live chat add-on price for an additional $15 per month. Multiprice "
"subscription information is stored in Cashier's `subscription_items` "
"database table."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:907
msgid ""
"You may specify multiple prices for a given subscription by passing an array "
"of prices as the second argument to the `newSubscription` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:915
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', [\n"
"            'price_monthly',\n"
"            'price_chat',\n"
"        ])->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:920
msgid ""
"In the example above, the customer will have two prices attached to their "
"`default` subscription. Both prices will be charged on their respective "
"billing intervals. If necessary, you may use the `quantity` method to "
"indicate a specific quantity for each price:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:926
#, no-wrap
msgid ""
"    $user->newSubscription('default', ['price_monthly', 'price_chat'])\n"
"        ->quantity(5, 'price_chat')\n"
"        ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:928
msgid ""
"If you would like to add another price to an existing subscription, you may "
"invoke the subscription's `addPrice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:932
#, no-wrap
msgid "    $user->subscription('default')->addPrice('price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:934
msgid ""
"The example above will add the new price and the customer will be billed for "
"it on their next billing cycle. If you would like to bill the customer "
"immediately you may use the `addPriceAndInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:936
#, no-wrap
msgid "    $user->subscription('default')->addPriceAndInvoice('price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:938
msgid ""
"If you would like to add a price with a specific quantity, you can pass the "
"quantity as the second argument of the `addPrice` or `addPriceAndInvoice` "
"methods:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:942
#, no-wrap
msgid "    $user->subscription('default')->addPrice('price_chat', 5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:944
msgid "You may remove prices from subscriptions using the `removePrice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:946
#, no-wrap
msgid "    $user->subscription('default')->removePrice('price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:948
#, no-wrap
msgid ""
"> {note} You may not remove the last price on a subscription. Instead, you "
"should simply cancel the subscription.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:950
#, no-wrap
msgid "<a name=\"swapping-prices\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:950
#, no-wrap
msgid "Swapping Prices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:953
msgid ""
"You may also change the prices attached to a multiprice subscription. For "
"example, imagine a customer has a `price_basic` subscription with a "
"`price_chat` add-on price and you want to upgrade the customer from the "
"`price_basic` to the `price_pro` price:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:959
#, no-wrap
msgid "    $user->subscription('default')->swap(['price_pro', 'price_chat']);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:961
msgid ""
"When executing the example above, the underlying subscription item with the "
"`price_basic` is deleted and the one with the `price_chat` is "
"preserved. Additionally, a new subscription item for the `price_pro` is "
"created."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:963
msgid ""
"You can also specify subscription item options by passing an array of key / "
"value pairs to the `swap` method. For example, you may need to specify the "
"subscription price quantities:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:970
#, no-wrap
msgid ""
"    $user->subscription('default')->swap([\n"
"        'price_pro' => ['quantity' => 5],\n"
"        'price_chat'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:972
msgid ""
"If you want to swap a single price on a subscription, you may do so using "
"the `swap` method on the subscription item itself. This approach is "
"particularly useful if you would like to preserve all of the existing "
"metadata on the subscription's other prices:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:978
#, no-wrap
msgid ""
"    $user->subscription('default')\n"
"            ->findItemOrFail('price_basic')\n"
"            ->swap('price_pro');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:980
#, no-wrap
msgid "<a name=\"proration\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:980
#, no-wrap
msgid "Proration"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:983
msgid ""
"By default, Stripe will prorate charges when adding or removing prices from "
"a multiprice subscription. If you would like to make a price adjustment "
"without proration, you should chain the `noProrate` method onto your price "
"operation:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:985
#, no-wrap
msgid ""
"    "
"$user->subscription('default')->noProrate()->removePrice('price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:987
#, no-wrap
msgid "<a name=\"swapping-quantities\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:990
msgid ""
"If you would like to update quantities on individual subscription prices, "
"you may do so using the [existing quantity methods](#subscription-quantity) "
"by passing the name of the price as an additional argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:994
#, no-wrap
msgid "    $user->subscription('default')->incrementQuantity(5, 'price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:996
#, no-wrap
msgid "    $user->subscription('default')->decrementQuantity(3, 'price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:998
#, no-wrap
msgid "    $user->subscription('default')->updateQuantity(10, 'price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1000
#, no-wrap
msgid ""
"> {note} When a subscription has multiple prices the `stripe_price` and "
"`quantity` attributes on the `Subscription` model will be `null`. To access "
"the individual price attributes, you should use the `items` relationship "
"available on the `Subscription` model.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1002
#, no-wrap
msgid "<a name=\"subscription-items\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1002
#, no-wrap
msgid "Subscription Items"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1005
msgid ""
"When a subscription has multiple prices, it will have multiple subscription "
"\"items\" stored in your database's `subscription_items` table. You may "
"access these via the `items` relationship on the subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1011
#, no-wrap
msgid "    $subscriptionItem = $user->subscription('default')->items->first();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1015
#, no-wrap
msgid ""
"    // Retrieve the Stripe price and quantity for a specific item...\n"
"    $stripePrice = $subscriptionItem->stripe_price;\n"
"    $quantity = $subscriptionItem->quantity;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1017
msgid "You can also retrieve a specific price using the `findItemOrFail` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1021
#, no-wrap
msgid ""
"    $subscriptionItem = "
"$user->subscription('default')->findItemOrFail('price_chat');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1023
#, no-wrap
msgid "<a name=\"metered-billing\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1023
#, no-wrap
msgid "Metered Billing"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1026
msgid ""
"[Metered "
"billing](https://stripe.com/docs/billing/subscriptions/metered-billing) "
"allows you to charge customers based on their product usage during a billing "
"cycle. For example, you may charge customers based on the number of text "
"messages or emails they send per month."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1028
msgid ""
"To start using metered billing, you will first need to create a new product "
"in your Stripe dashboard with a metered price. Then, use the `meteredPrice` "
"to add the metered price ID to a customer subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1035
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default')\n"
"            ->meteredPrice('price_metered')\n"
"            ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1040
msgid "You may also start a metered subscription via [Stripe Checkout](#checkout):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1045
#, no-wrap
msgid ""
"    $checkout = Auth::user()\n"
"            ->newSubscription('default', [])\n"
"            ->meteredPrice('price_metered')\n"
"            ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1049
#, no-wrap
msgid ""
"    return view('your-checkout-view', [\n"
"        'checkout' => $checkout,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1051
#, no-wrap
msgid "<a name=\"reporting-usage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1051
#, no-wrap
msgid "Reporting Usage"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1054
msgid ""
"As your customer uses your application, you will report their usage to "
"Stripe so that they can be billed accurately. To increment the usage of a "
"metered subscription, you may use the `reportUsage` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1058
#, no-wrap
msgid "    $user->subscription('default')->reportUsage();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1060
msgid ""
"By default, a \"usage quantity\" of 1 is added to the billing "
"period. Alternatively, you may pass a specific amount of \"usage\" to add to "
"the customer's usage for the billing period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1064
#, no-wrap
msgid "    $user->subscription('default')->reportUsage(15);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1066
msgid ""
"If your application offers multiple prices on a single subscription, you "
"will need to use the `reportUsageFor` method to specify the metered price "
"you want to report usage for:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1070
#, no-wrap
msgid "    $user->subscription('default')->reportUsageFor('price_metered', 15);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1072
msgid ""
"Sometimes, you may need to update usage which you have previously "
"reported. To accomplish this, you may pass a timestamp or a "
"`DateTimeInterface` instance as the second parameter to `reportUsage`. When "
"doing so, Stripe will update the usage that was reported at that given "
"time. You can continue to update previous usage records as the given date "
"and time is still within the current billing period:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1076
#, no-wrap
msgid "    $user->subscription('default')->reportUsage(5, $timestamp);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1078
#, no-wrap
msgid "<a name=\"retrieving-usage-records\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1078
#, no-wrap
msgid "Retrieving Usage Records"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1081
msgid ""
"To retrieve a customer's past usage, you may use a subscription instance's "
"`usageRecords` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1085
#, no-wrap
msgid "    $usageRecords = $user->subscription('default')->usageRecords();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1087
msgid ""
"If your application offers multiple prices on a single subscription, you may "
"use the `usageRecordsFor` method to specify the metered price that you wish "
"to retrieve usage records for:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1091
#, no-wrap
msgid ""
"    $usageRecords = "
"$user->subscription('default')->usageRecordsFor('price_metered');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1093
msgid ""
"The `usageRecords` and `usageRecordsFor` methods return a Collection "
"instance containing an associative array of usage records. You may iterate "
"over this array to display a customer's total usage:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1099
#, no-wrap
msgid ""
"    @foreach ($usageRecords as $usageRecord)\n"
"        - Period Starting: {{ $usageRecord['period']['start'] }}\n"
"        - Period Ending: {{ $usageRecord['period']['end'] }}\n"
"        - Total Usage: {{ $usageRecord['total_usage'] }}\n"
"    @endforeach\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1101
msgid ""
"For a full reference of all usage data returned and how to use Stripe's "
"cursor based pagination, please consult [the official Stripe API "
"documentation](https://stripe.com/docs/api/usage_records/subscription_item_summary_list)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1103
#, no-wrap
msgid "<a name=\"subscription-taxes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1103
#, no-wrap
msgid "Subscription Taxes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1106
#, no-wrap
msgid ""
"> {note} Instead of calculating Tax Rates manually, you can [automatically "
"calculate taxes using Stripe Tax](#tax-configuration)\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1108
msgid ""
"To specify the tax rates a user pays on a subscription, you should implement "
"the `taxRates` method on your billable model and return an array containing "
"the Stripe tax rate IDs. You can define these tax rates in [your Stripe "
"dashboard](https://dashboard.stripe.com/test/tax-rates):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1118
#, no-wrap
msgid ""
"    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function taxRates()\n"
"    {\n"
"        return ['txr_id'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1120
msgid ""
"The `taxRates` method enables you to apply a tax rate on a "
"customer-by-customer basis, which may be helpful for a user base that spans "
"multiple countries and tax rates."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1122
msgid ""
"If you're offering multiprice subscriptions, you may define different tax "
"rates for each price by implementing a `priceTaxRates` method on your "
"billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1134
#, no-wrap
msgid ""
"    /**\n"
"     * The tax rates that should apply to the customer's subscriptions.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function priceTaxRates()\n"
"    {\n"
"        return [\n"
"            'price_monthly' => ['txr_id'],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1136
#, no-wrap
msgid ""
"> {note} The `taxRates` method only applies to subscription charges. If you "
"use Cashier to make \"one off\" charges, you will need to manually specify "
"the tax rate at that time.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1138
#, no-wrap
msgid "<a name=\"syncing-tax-rates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1138
#, no-wrap
msgid "Syncing Tax Rates"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1141
msgid ""
"When changing the hard-coded tax rate IDs returned by the `taxRates` method, "
"the tax settings on any existing subscriptions for the user will remain the "
"same. If you wish to update the tax value for existing subscriptions with "
"the new `taxRates` values, you should call the `syncTaxRates` method on the "
"user's subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1143
#, no-wrap
msgid "    $user->subscription('default')->syncTaxRates();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1145
msgid ""
"This will also sync any multiprice subscription item tax rates. If your "
"application is offering multiprice subscriptions, you should ensure that "
"your billable model implements the `priceTaxRates` method [discussed "
"above](#subscription-taxes)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1147
#, no-wrap
msgid "<a name=\"tax-exemption\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1147
#, no-wrap
msgid "Tax Exemption"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1150
msgid ""
"Cashier also offers the `isNotTaxExempt`, `isTaxExempt`, and "
"`reverseChargeApplies` methods to determine if the customer is tax "
"exempt. These methods will call the Stripe API to determine a customer's tax "
"exemption status:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1158
#, no-wrap
msgid ""
"    $user->isTaxExempt();\n"
"    $user->isNotTaxExempt();\n"
"    $user->reverseChargeApplies();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1160
#, no-wrap
msgid ""
"> {note} These methods are also available on any `Laravel\\Cashier\\Invoice` "
"object. However, when invoked on an `Invoice` object, the methods will "
"determine the exemption status at the time the invoice was created.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1162
#, no-wrap
msgid "<a name=\"subscription-anchor-date\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1162
#, no-wrap
msgid "Subscription Anchor Date"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1165
msgid ""
"By default, the billing cycle anchor is the date the subscription was "
"created or, if a trial period is used, the date that the trial ends. If you "
"would like to modify the billing anchor date, you may use the "
"`anchorBillingCycleOn` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1170
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $anchor = Carbon::parse('first day of next month');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1174
#, no-wrap
msgid ""
"        $request->user()->newSubscription('default', 'price_monthly')\n"
"                    ->anchorBillingCycleOn($anchor->startOfDay())\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1179
msgid ""
"For more information on managing subscription billing cycles, consult the "
"[Stripe billing cycle "
"documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1181
#, no-wrap
msgid "<a name=\"cancelling-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1181
#, no-wrap
msgid "Cancelling Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1184
msgid ""
"To cancel a subscription, call the `cancel` method on the user's "
"subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1186
#, no-wrap
msgid "    $user->subscription('default')->cancel();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1188
msgid ""
"When a subscription is canceled, Cashier will automatically set the "
"`ends_at` column in your `subscriptions` database table. This column is used "
"to know when the `subscribed` method should begin returning `false`."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1190
msgid ""
"For example, if a customer cancels a subscription on March 1st, but the "
"subscription was not scheduled to end until March 5th, the `subscribed` "
"method will continue to return `true` until March 5th. This is done because "
"a user is typically allowed to continue using an application until the end "
"of their billing cycle."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1192
msgid ""
"You may determine if a user has canceled their subscription but are still on "
"their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1198
msgid ""
"If you wish to cancel a subscription immediately, call the `cancelNow` "
"method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1200
#, no-wrap
msgid "    $user->subscription('default')->cancelNow();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1202
msgid ""
"If you wish to cancel a subscription immediately and invoice any remaining "
"un-invoiced metered usage or new / pending proration invoice items, call the "
"`cancelNowAndInvoice` method on the user's subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1204
#, no-wrap
msgid "    $user->subscription('default')->cancelNowAndInvoice();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1206
msgid "You may also choose to cancel the subscription at a specific moment in time:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1210
#, no-wrap
msgid ""
"    $user->subscription('default')->cancelAt(\n"
"        now()->addDays(10)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1212
#, no-wrap
msgid "<a name=\"resuming-subscriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1212
#, no-wrap
msgid "Resuming Subscriptions"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1215
msgid ""
"If a customer has canceled their subscription and you wish to resume it, you "
"may invoke the `resume` method on the subscription. The customer must still "
"be within their \"grace period\" in order to resume a subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1217
#, no-wrap
msgid "    $user->subscription('default')->resume();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1219
msgid ""
"If the customer cancels a subscription and then resumes that subscription "
"before the subscription has fully expired the customer will not be billed "
"immediately. Instead, their subscription will be re-activated and they will "
"be billed on the original billing cycle."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1221
#, no-wrap
msgid "<a name=\"subscription-trials\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1221
#, no-wrap
msgid "Subscription Trials"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1224
#, no-wrap
msgid "<a name=\"with-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1224
#, no-wrap
msgid "With Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1227
msgid ""
"If you would like to offer trial periods to your customers while still "
"collecting payment method information up front, you should use the "
"`trialDays` method when creating your subscriptions:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1234
#, no-wrap
msgid ""
"    Route::post('/user/subscribe', function (Request $request) {\n"
"        $request->user()->newSubscription('default', 'price_monthly')\n"
"                    ->trialDays(10)\n"
"                    ->create($request->paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1239
msgid ""
"This method will set the trial period ending date on the subscription record "
"within the database and instruct Stripe to not begin billing the customer "
"until after this date. When using the `trialDays` method, Cashier will "
"overwrite any default trial period configured for the price in Stripe."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1241
#, no-wrap
msgid ""
"> {note} If the customer's subscription is not canceled before the trial "
"ending date they will be charged as soon as the trial expires, so you should "
"be sure to notify your users of their trial ending date.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1243
msgid ""
"The `trialUntil` method allows you to provide a `DateTime` instance that "
"specifies when the trial period should end:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1245
#, no-wrap
msgid "    use Carbon\\Carbon;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1249
#, no-wrap
msgid ""
"    $user->newSubscription('default', 'price_monthly')\n"
"                ->trialUntil(Carbon::now()->addDays(10))\n"
"                ->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1251
msgid ""
"You may determine if a user is within their trial period using either the "
"`onTrial` method of the user instance or the `onTrial` method of the "
"subscription instance. The two examples below are equivalent:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1255
#, no-wrap
msgid ""
"    if ($user->onTrial('default')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1261
msgid "You may use the `endTrial` method to immediately end a subscription trial:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1263
#, no-wrap
msgid "    $user->subscription('default')->endTrial();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1265
#, no-wrap
msgid "<a name=\"defining-trial-days-in-stripe-cashier\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1265
#, no-wrap
msgid "Defining Trial Days In Stripe / Cashier"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1268
msgid ""
"You may choose to define how many trial days your price's receive in the "
"Stripe dashboard or always pass them explicitly using Cashier. If you choose "
"to define your price's trial days in Stripe you should be aware that new "
"subscriptions, including new subscriptions for a customer that had a "
"subscription in the past, will always receive a trial period unless you "
"explicitly call the `skipTrial()` method."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1270
#, no-wrap
msgid "<a name=\"without-payment-method-up-front\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1270
#, no-wrap
msgid "Without Payment Method Up Front"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1273
msgid ""
"If you would like to offer trial periods without collecting the user's "
"payment method information up front, you may set the `trial_ends_at` column "
"on the user record to your desired trial ending date. This is typically done "
"during user registration:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1280
#, no-wrap
msgid ""
"    $user = User::create([\n"
"        // ...\n"
"        'trial_ends_at' => now()->addDays(10),\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1282
#, no-wrap
msgid ""
"> {note} Be sure to add a [date "
"cast](/docs/{{version}}/eloquent-mutators##date-casting) for the "
"`trial_ends_at` attribute within your billable model's class definition.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1284
msgid ""
"Cashier refers to this type of trial as a \"generic trial\", since it is not "
"attached to any existing subscription. The `onTrial` method on the billable "
"model instance will return `true` if the current date is not past the value "
"of `trial_ends_at`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1288
#, no-wrap
msgid ""
"    if ($user->onTrial()) {\n"
"        // User is within their trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1290
msgid ""
"Once you are ready to create an actual subscription for the user, you may "
"use the `newSubscription` method as usual:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1294
#, no-wrap
msgid ""
"    $user->newSubscription('default', "
"'price_monthly')->create($paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1296
msgid ""
"To retrieve the user's trial ending date, you may use the `trialEndsAt` "
"method. This method will return a Carbon date instance if a user is on a "
"trial or `null` if they aren't. You may also pass an optional subscription "
"name parameter if you would like to get the trial ending date for a specific "
"subscription other than the default one:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1300
#, no-wrap
msgid ""
"    if ($user->onTrial()) {\n"
"        $trialEndsAt = $user->trialEndsAt('main');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1302
msgid ""
"You may also use the `onGenericTrial` method if you wish to know "
"specifically that the user is within their \"generic\" trial period and has "
"not yet created an actual subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1306
#, no-wrap
msgid ""
"    if ($user->onGenericTrial()) {\n"
"        // User is within their \"generic\" trial period...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1308
#, no-wrap
msgid "<a name=\"extending-trials\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1308
#, no-wrap
msgid "Extending Trials"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1311
msgid ""
"The `extendTrial` method allows you to extend the trial period of a "
"subscription after the subscription has been created. If the trial has "
"already expired and the customer is already being billed for the "
"subscription, you can still offer them an extended trial. The time spent "
"within the trial period will be deducted from the customer's next invoice:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1315
#, no-wrap
msgid "    $subscription = User::find(1)->subscription('default');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1320
#, no-wrap
msgid ""
"    // End the trial 7 days from now...\n"
"    $subscription->extendTrial(\n"
"        now()->addDays(7)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1325
#, no-wrap
msgid ""
"    // Add an additional 5 days to the trial...\n"
"    $subscription->extendTrial(\n"
"        $subscription->trial_ends_at->addDays(5)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1327
#, no-wrap
msgid "<a name=\"handling-stripe-webhooks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1327
#, no-wrap
msgid "Handling Stripe Webhooks"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1330
#, no-wrap
msgid ""
"> {tip} You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to "
"help test webhooks during local development.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1332
msgid ""
"Stripe can notify your application of a variety of events via webhooks. By "
"default, a route that points to Cashier's webhook controller is "
"automatically registered by the Cashier service provider. This controller "
"will handle all incoming webhook requests."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1334
msgid ""
"By default, the Cashier webhook controller will automatically handle "
"cancelling subscriptions that have too many failed charges (as defined by "
"your Stripe settings), customer updates, customer deletions, subscription "
"updates, and payment method changes; however, as we'll soon discover, you "
"can extend this controller to handle any Stripe webhook event you like."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1336
msgid ""
"To ensure your application can handle Stripe webhooks, be sure to configure "
"the webhook URL in the Stripe control panel. By default, Cashier's webhook "
"controller responds to the `/stripe/webhook` URL path. The full list of all "
"webhooks you should enable in the Stripe control panel are:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1343
msgid ""
"- `customer.subscription.created` - `customer.subscription.updated` - "
"`customer.subscription.deleted` - `customer.updated` - `customer.deleted` - "
"`invoice.payment_action_required`"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1345
msgid ""
"For convenience, Cashier includes a `cashier:webhook` Artisan command. This "
"command will create a webhook in Stripe that listens to all of the events "
"required by Cashier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1347
#, no-wrap
msgid "    php artisan cashier:webhook\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1349
msgid ""
"By default, the created webhook will point to the URL defined by the "
"`APP_URL` environment variable and the `cashier.webhook` route that is "
"included with Cashier. You may provide the `--url` option when invoking the "
"command if you would like to use a different URL:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1351
#, no-wrap
msgid ""
"    php artisan cashier:webhook --url "
"\"https://example.com/stripe/webhook\"\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1353
msgid ""
"The webhook that is created will use the Stripe API version that your "
"version of Cashier is compatible with. If you would like to use a different "
"Stripe version, you may provide the `--api-version` option:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1355
#, no-wrap
msgid "    php artisan cashier:webhook --api-version=\"2019-12-03\"\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1357
msgid ""
"After creation, the webhook will be immediately active. If you wish to "
"create the webhook but have it disabled until you're ready, you may provide "
"the `--disabled` option when invoking the command:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1359
#, no-wrap
msgid "    php artisan cashier:webhook --disabled\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1361
#, no-wrap
msgid ""
"> {note} Make sure you protect incoming Stripe webhook requests with "
"Cashier's included [webhook signature "
"verification](#verifying-webhook-signatures) middleware.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1363
#, no-wrap
msgid "<a name=\"webhooks-csrf-protection\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1363
#, no-wrap
msgid "Webhooks & CSRF Protection"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1366
msgid ""
"Since Stripe webhooks need to bypass Laravel's [CSRF "
"protection](/docs/{{version}}/csrf), be sure to list the URI as an exception "
"in your application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or "
"list the route outside of the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1370
#, no-wrap
msgid ""
"    protected $except = [\n"
"        'stripe/*',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1372
#, no-wrap
msgid "<a name=\"defining-webhook-event-handlers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1372
#, no-wrap
msgid "Defining Webhook Event Handlers"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1375
msgid ""
"Cashier automatically handles subscription cancellations for failed charges "
"and other common Stripe webhook events. However, if you have additional "
"webhook events you would like to handle, you may do so by listening to the "
"following events that are dispatched by Cashier:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1378
msgid ""
"- `Laravel\\Cashier\\Events\\WebhookReceived` - "
"`Laravel\\Cashier\\Events\\WebhookHandled`"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1380
msgid ""
"Both events contain the full payload of the Stripe webhook. For example, if "
"you wish to handle the `invoice.payment_succeeded` webhook, you may register "
"a [listener](/docs/{{version}}/events#defining-listeners) that will handle "
"the event:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1384
#, no-wrap
msgid "    namespace App\\Listeners;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1386
#, no-wrap
msgid "    use Laravel\\Cashier\\Events\\WebhookReceived;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1402
#, no-wrap
msgid ""
"    class StripeEventListener\n"
"    {\n"
"        /**\n"
"         * Handle received Stripe webhooks.\n"
"         *\n"
"         * @param  \\Laravel\\Cashier\\Events\\WebhookReceived  $event\n"
"         * @return void\n"
"         */\n"
"        public function handle(WebhookReceived $event)\n"
"        {\n"
"            if ($event->payload['type'] === 'invoice.payment_succeeded') {\n"
"                // Handle the incoming event...\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1404
msgid ""
"Once your listener has been defined, you may register it within your "
"application's `EventServiceProvider`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1408
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1412
#, no-wrap
msgid ""
"    use App\\Listeners\\StripeEventListener;\n"
"    use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as "
"ServiceProvider;\n"
"    use Laravel\\Cashier\\Events\\WebhookReceived;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1421
#, no-wrap
msgid ""
"    class EventServiceProvider extends ServiceProvider\n"
"    {\n"
"        protected $listen = [\n"
"            WebhookReceived::class => [\n"
"                StripeEventListener::class,\n"
"            ],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1423
#, no-wrap
msgid "<a name=\"verifying-webhook-signatures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1423
#, no-wrap
msgid "Verifying Webhook Signatures"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1426
msgid ""
"To secure your webhooks, you may use [Stripe's webhook "
"signatures](https://stripe.com/docs/webhooks/signatures). For convenience, "
"Cashier automatically includes a middleware which validates that the "
"incoming Stripe webhook request is valid."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1428
msgid ""
"To enable webhook verification, ensure that the `STRIPE_WEBHOOK_SECRET` "
"environment variable is set in your application's `.env` file. The webhook "
"`secret` may be retrieved from your Stripe account dashboard."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1430
#, no-wrap
msgid "<a name=\"single-charges\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1430
#, no-wrap
msgid "Single Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1433
#, no-wrap
msgid "<a name=\"simple-charge\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1433
#, no-wrap
msgid "Simple Charge"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1436
#, no-wrap
msgid ""
"> {note} The `charge` method accepts the amount you would like to charge in "
"the lowest denominator of the currency used by your application. For "
"example, when using United States Dollars, amounts should be specified in "
"pennies.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1438
msgid ""
"If you would like to make a one-time charge against a customer, you may use "
"the `charge` method on a billable model instance. You will need to [provide "
"a payment method identifier](#payment-methods-for-single-charges) as the "
"second argument to the `charge` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1445
#, no-wrap
msgid ""
"    Route::post('/purchase', function (Request $request) {\n"
"        $stripeCharge = $request->user()->charge(\n"
"            100, $request->paymentMethodId\n"
"        );\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1450
msgid ""
"The `charge` method accepts an array as its third argument, allowing you to "
"pass any options you wish to the underlying Stripe charge creation. More "
"information regarding the options available to you when creating charges may "
"be found in the [Stripe "
"documentation](https://stripe.com/docs/api/charges/create):"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1454
#, no-wrap
msgid ""
"    $user->charge(100, $paymentMethod, [\n"
"        'custom_option' => $value,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1456
msgid ""
"You may also use the `charge` method without an underlying customer or "
"user. To accomplish this, invoke the `charge` method on a new instance of "
"your application's billable model:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1460
#, no-wrap
msgid "    $stripeCharge = (new User)->charge(100, $paymentMethod);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1462
msgid ""
"The `charge` method will throw an exception if the charge fails. If the "
"charge is successful, an instance of `Laravel\\Cashier\\Payment` will be "
"returned from the method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1468
#, no-wrap
msgid ""
"    try {\n"
"        $payment = $user->charge(100, $paymentMethod);\n"
"    } catch (Exception $e) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1470
#, no-wrap
msgid "<a name=\"charge-with-invoice\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1470
#, no-wrap
msgid "Charge With Invoice"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1473
msgid ""
"Sometimes you may need to make a one-time charge and offer a PDF receipt to "
"your customer. The `invoicePrice` method lets you do just that. For example, "
"let's invoice a customer for five new shirts:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1475
#, no-wrap
msgid "    $user->invoicePrice('price_tshirt', 5);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1477
msgid ""
"The invoice will be immediately charged against the user's default payment "
"method. The `invoicePrice` method also accepts an array as its third "
"argument. This array contains the billing options for the invoice item. The "
"fourth argument accepted by the method is also an array which should contain "
"the billing options for the invoice itself:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1485
#, no-wrap
msgid ""
"    $user->invoicePrice('price_tshirt', 5, [\n"
"        'discounts' => [\n"
"            ['coupon' => 'SUMMER21SALE']\n"
"        ],\n"
"    ], [\n"
"        'default_tax_rates' => ['txr_id'],\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1487
msgid ""
"Alternatively, you may use the `invoiceFor` method to make a \"one-off\" "
"charge against the customer's default payment method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1489
#, no-wrap
msgid "    $user->invoiceFor('One Time Fee', 500);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1491
msgid ""
"Although the `invoiceFor` method is available for you to use, it is "
"recommendeded that you use the `invoicePrice` method with pre-defined "
"prices. By doing so, you will have access to better analytics and data "
"within your Stripe dashboard regarding your sales on a per-product basis."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1493
#, no-wrap
msgid ""
"> {note} The `invoicePrice` and `invoiceFor` methods will create a Stripe "
"invoice which will retry failed billing attempts. If you do not want "
"invoices to retry failed charges, you will need to close them using the "
"Stripe API after the first failed charge.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1495
#, no-wrap
msgid "<a name=\"refunding-charges\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1495
#, no-wrap
msgid "Refunding Charges"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1498
msgid ""
"If you need to refund a Stripe charge, you may use the `refund` method. This "
"method accepts the Stripe [payment intent "
"ID](#payment-methods-for-single-charges) as its first argument:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1500
#, no-wrap
msgid "    $payment = $user->charge(100, $paymentMethodId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1502
#, no-wrap
msgid "    $user->refund($payment->id);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1504
#, no-wrap
msgid "<a name=\"invoices\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1504
#, no-wrap
msgid "Invoices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1507
#, no-wrap
msgid "<a name=\"retrieving-invoices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1507
#, no-wrap
msgid "Retrieving Invoices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1510
msgid ""
"You may easily retrieve an array of a billable model's invoices using the "
"`invoices` method. The `invoices` method returns a collection of "
"`Laravel\\Cashier\\Invoice` instances:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1512
#, no-wrap
msgid "    $invoices = $user->invoices();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1514
msgid ""
"If you would like to include pending invoices in the results, you may use "
"the `invoicesIncludingPending` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1516
#, no-wrap
msgid "    $invoices = $user->invoicesIncludingPending();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1518
msgid ""
"You may use the `findInvoice` method to retrieve a specific invoice by its "
"ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1520
#, no-wrap
msgid "    $invoice = $user->findInvoice($invoiceId);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1522
#, no-wrap
msgid "<a name=\"displaying-invoice-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1522
#, no-wrap
msgid "Displaying Invoice Information"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1525
msgid ""
"When listing the invoices for the customer, you may use the invoice's "
"methods to display the relevant invoice information. For example, you may "
"wish to list every invoice in a table, allowing the user to easily download "
"any of them:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1535
#, no-wrap
msgid ""
"    <table>\n"
"        @foreach ($invoices as $invoice)\n"
"            <tr>\n"
"                <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n"
"                <td>{{ $invoice->total() }}</td>\n"
"                <td><a href=\"/user/invoice/{{ $invoice->id "
"}}\">Download</a></td>\n"
"            </tr>\n"
"        @endforeach\n"
"    </table>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1537
#, no-wrap
msgid "<a name=\"upcoming-invoices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1537
#, no-wrap
msgid "Upcoming Invoices"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1540
msgid ""
"To retrieve the upcoming invoice for a customer, you may use the "
"`upcomingInvoice` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1542
#, no-wrap
msgid "    $invoice = $user->upcomingInvoice();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1544
msgid ""
"Similary, if the customer has multiple subscriptions, you can also retrieve "
"the upcoming invoice for a specific subscription:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1546
#, no-wrap
msgid "    $invoice = $user->subscription('default')->upcomingInvoice();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1548
#, no-wrap
msgid "<a name=\"previewing-subscription-invoices\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1548
#, no-wrap
msgid "Previewing Subscription Invoice"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1551
msgid ""
"Using the `previewInvoice` method, you can preview an invoice before making "
"price changes. This will allow you to determine what your customer's invoice "
"will look like when a given price change is made:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1553
#, no-wrap
msgid ""
"    $invoice = "
"$user->subscription('default')->previewInvoice('price_yearly');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1555
msgid ""
"You may pass an array of prices to the `previewInvoice` method in order to "
"preview invoices with multiple new prices:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1557
#, no-wrap
msgid ""
"    $invoice = "
"$user->subscription('default')->previewInvoice(['price_yearly', "
"'price_metered']);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1559
#, no-wrap
msgid "<a name=\"generating-invoice-pdfs\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1559
#, no-wrap
msgid "Generating Invoice PDFs"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1562
msgid ""
"From within a route or controller, you may use the `downloadInvoice` method "
"to generate a PDF download of a given invoice. This method will "
"automatically generate the proper HTTP response needed to download the "
"invoice:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1571
#, no-wrap
msgid ""
"    Route::get('/user/invoice/{invoice}', function (Request $request, "
"$invoiceId) {\n"
"        return $request->user()->downloadInvoice($invoiceId, [\n"
"            'vendor' => 'Your Company',\n"
"            'product' => 'Your Product',\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1573
msgid ""
"By default, all data on the invoice is derived from the customer and invoice "
"data stored in Stripe. However, you can customize some of this data by "
"providing an array as the second argument to the `downloadInvoice` "
"method. This array allows you to customize information such as your company "
"and product details:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1584
#, no-wrap
msgid ""
"    return $request->user()->downloadInvoice($invoiceId, [\n"
"        'vendor' => 'Your Company',\n"
"        'product' => 'Your Product',\n"
"        'street' => 'Main Str. 1',\n"
"        'location' => '2000 Antwerp, Belgium',\n"
"        'phone' => '+32 499 00 00 00',\n"
"        'email' => 'info@example.com',\n"
"        'url' => 'https://example.com',\n"
"        'vendorVat' => 'BE123456789',\n"
"    ], 'my-invoice');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1586
msgid ""
"The `downloadInvoice` method also allows for a custom filename via its third "
"argument. This filename will automatically be suffixed with `.pdf`:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1588
#, no-wrap
msgid ""
"    return $request->user()->downloadInvoice($invoiceId, [], "
"'my-invoice');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1590
#, no-wrap
msgid "<a name=\"checkout\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1590
#, no-wrap
msgid "Checkout"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1593
msgid ""
"Cashier Stripe also provides support for [Stripe "
"Checkout](https://stripe.com/payments/checkout). Stripe Checkout takes the "
"pain out of implementing custom pages to accept payments by providing a "
"pre-built, hosted payment page."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1595
msgid ""
"The following documentation contains information on how to get started using "
"Stripe Checkout with Cashier. To learn more about Stripe Checkout, you "
"should also consider reviewing [Stripe's own documentation on "
"Checkout](https://stripe.com/docs/payments/checkout)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1597
#, no-wrap
msgid "<a name=\"product-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1597
#, no-wrap
msgid "Product Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1600
msgid ""
"You may perform a checkout for an existing product that has been created "
"within your Stripe dashboard using the `checkout` method on a billable "
"model. The `checkout` method will initiate a new Stripe Checkout session. By "
"default, you're required to pass a Stripe Price ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1606
#, no-wrap
msgid ""
"    Route::get('/product-checkout', function (Request $request) {\n"
"        return $request->user()->checkout('price_tshirt');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1608
msgid "If needed, you may also specify a product quantity:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1614
#, no-wrap
msgid ""
"    Route::get('/product-checkout', function (Request $request) {\n"
"        return $request->user()->checkout(['price_tshirt' => 15]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1616
msgid ""
"When a customer visits this route they will be redirected to Stripe's "
"Checkout page. By default, when a user successfully completes or cancels a "
"purchase they will be redirected to your `home` route location, but you may "
"specify custom callback URLs using the `success_url` and `cancel_url` "
"options:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1625
#, no-wrap
msgid ""
"    Route::get('/product-checkout', function (Request $request) {\n"
"        return $request->user()->checkout(['price_tshirt' => 1], [\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1627
msgid ""
"When defining your `success_url` checkout option, you may instruct Stripe to "
"add the checkout session ID as a query string parameter when invoking your "
"URL. To do so, add the literal string `{CHECKOUT_SESSION_ID}` to your "
"`success_url` query string. Stripe will replace this placeholder with the "
"actual checkout session ID:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1631
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Request;\n"
"    use Stripe\\Checkout\\Session;\n"
"    use Stripe\\Customer;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1638
#, no-wrap
msgid ""
"    Route::get('/product-checkout', function (Request $request) {\n"
"        return $request->user()->checkout(['price_tshirt' => 1], [\n"
"            'success_url' => route('checkout-success') "
". '?session_id={CHECKOUT_SESSION_ID}',\n"
"            'cancel_url' => route('checkout-cancel'),\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1641
#, no-wrap
msgid ""
"    Route::get('/checkout-success', function (Request $request) {\n"
"        $checkoutSession = "
"$request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1644
#, no-wrap
msgid ""
"        return view('checkout.success', ['checkoutSession' => "
"$checkoutSession]);\n"
"    })->name('checkout-success');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1646
#, no-wrap
msgid "<a name=\"checkout-promotion-codes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1646
#, no-wrap
msgid "Promotion Codes"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1649
msgid ""
"By default, Stripe Checkout does not allow [user redeemable promotion "
"codes](https://stripe.com/docs/billing/subscriptions/discounts/codes). "
"Luckily, there's an easy way to enable these for your Checkout page. To do "
"so, you may invoke the `allowPromotionCodes` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1657
#, no-wrap
msgid ""
"    Route::get('/product-checkout', function (Request $request) {\n"
"        return $request->user()\n"
"            ->allowPromotionCodes()\n"
"            ->checkout('price_tshirt');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1659
#, no-wrap
msgid "<a name=\"single-charge-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1659
#, no-wrap
msgid "Single Charge Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1662
msgid ""
"You can also perform a simple charge for an ad-hoc product that has not been "
"created in your Stripe dashboard. To do so you may use the `checkoutCharge` "
"method on a billable model and pass it a chargeable amount, a product name, "
"and an optional quantity. When a customer visits this route they will be "
"redirected to Stripe's Checkout page:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1668
#, no-wrap
msgid ""
"    Route::get('/charge-checkout', function (Request $request) {\n"
"        return $request->user()->checkoutCharge(1200, 'T-Shirt', 5);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1670
#, no-wrap
msgid ""
"> {note} When using the `checkoutCharge` method, Stripe will always create a "
"new product and price in your Stripe dashboard. Therefore, we recommend that "
"you create the products up front in your Stripe dashboard and use the "
"`checkout` method instead.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1672
#, no-wrap
msgid "<a name=\"subscription-checkouts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1672
#, no-wrap
msgid "Subscription Checkouts"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1675
#, no-wrap
msgid ""
"> {note} Using Stripe Checkout for subscriptions requires you to enable the "
"`customer.subscription.created` webhook in your Stripe dashboard. This "
"webhook will create the subscription record in your database and store all "
"of the relevant subscription items.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1677
msgid ""
"You may also use Stripe Checkout to initiate subscriptions. After defining "
"your subscription with Cashier's subscription builder methods, you may call "
"the `checkout `method. When a customer visits this route they will be "
"redirected to Stripe's Checkout page:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1685
#, no-wrap
msgid ""
"    Route::get('/subscription-checkout', function (Request $request) {\n"
"        return $request->user()\n"
"            ->newSubscription('default', 'price_monthly')\n"
"            ->checkout();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1687
msgid ""
"Just as with product checkouts, you may customize the success and "
"cancellation URLs:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1698
#, no-wrap
msgid ""
"    Route::get('/subscription-checkout', function (Request $request) {\n"
"        return $request->user()\n"
"            ->newSubscription('default', 'price_monthly')\n"
"            ->checkout([\n"
"                'success_url' => route('your-success-route'),\n"
"                'cancel_url' => route('your-cancel-route'),\n"
"            ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1700
msgid "Of course, you can also enable promotion codes for subscription checkouts:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1709
#, no-wrap
msgid ""
"    Route::get('/subscription-checkout', function (Request $request) {\n"
"        return $request->user()\n"
"            ->newSubscription('default', 'price_monthly')\n"
"            ->allowPromotionCodes()\n"
"            ->checkout();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1711
#, no-wrap
msgid ""
"> {note} Unfortunately Stripe Checkout does not support all subscription "
"billing options when starting subscriptions. Using the "
"`anchorBillingCycleOn` method on the subscription builder, setting proration "
"behavior, or setting payment behavior will not have any effect during Stripe "
"Checkout sessions. Please consult [the Stripe Checkout Session API "
"documentation](https://stripe.com/docs/api/checkout/sessions/create) to "
"review which parameters are available.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1713
#, no-wrap
msgid "<a name=\"stripe-checkout-trial-periods\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1713
#, no-wrap
msgid "Stripe Checkout & Trial Periods"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1716
msgid ""
"Of course, you can define a trial period when building a subscription that "
"will be completed using Stripe Checkout:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1720
#, no-wrap
msgid ""
"    $checkout = Auth::user()->newSubscription('default', 'price_monthly')\n"
"        ->trialDays(3)\n"
"        ->checkout();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1722
msgid ""
"However, the trial period must be at least 48 hours, which is the minimum "
"amount of trial time supported by Stripe Checkout."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1724
#, no-wrap
msgid "<a name=\"stripe-checkout-subscriptions-and-webhooks\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1724
#, no-wrap
msgid "Subscriptions & Webhooks"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1727
msgid ""
"Remember, Stripe and Cashier update subscription statuses via webhooks, so "
"there's a possibility a subscription might not yet be active when the "
"customer returns to the application after entering their payment "
"information. To handle this scenario, you may wish to display a message "
"informing the user that their payment or subscription is pending."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1729
#, no-wrap
msgid "<a name=\"collecting-tax-ids\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1729
#, no-wrap
msgid "Collecting Tax IDs"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1732
msgid ""
"Checkout also supports collecting a customer's Tax ID. To enable this on a "
"checkout session, invoke the `collectTaxIds` method when creating the "
"session:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1734
#, no-wrap
msgid "    $checkout = $user->collectTaxIds()->checkout('price_tshirt');\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1736
msgid ""
"When this method is invoked, a new checkbox will be available to the "
"customer that allows them to indicate if they're purchasing as a company. If "
"so, they will have the opportunity to provide their Tax ID number."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1738
#, no-wrap
msgid ""
"> {note} If you have already configured [automatic tax "
"collection](#tax-configuration) in your application's service provider then "
"this feature will be enabled automatically and there is no need to invoke "
"the `collectTaxIds` method.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1740
#, no-wrap
msgid "<a name=\"handling-failed-payments\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1740
#, no-wrap
msgid "Handling Failed Payments"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1743
msgid ""
"Sometimes, payments for subscriptions or single charges can fail. When this "
"happens, Cashier will throw an "
"`Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you "
"that this happened. After catching this exception, you have two options on "
"how to proceed."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1745
msgid ""
"First, you could redirect your customer to the dedicated payment "
"confirmation page which is included with Cashier. This page already has an "
"associated named route that is registered via Cashier's service "
"provider. So, you may catch the `IncompletePayment` exception and redirect "
"the user to the payment confirmation page:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1747 docs/master/billing.md:1788
#, no-wrap
msgid "    use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1757
#, no-wrap
msgid ""
"    try {\n"
"        $subscription = $user->newSubscription('default', 'price_monthly')\n"
"                                ->create($paymentMethod);\n"
"    } catch (IncompletePayment $exception) {\n"
"        return redirect()->route(\n"
"            'cashier.payment',\n"
"            [$exception->payment->id, 'redirect' => route('home')]\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1759
msgid ""
"On the payment confirmation page, the customer will be prompted to enter "
"their credit card information again and perform any additional actions "
"required by Stripe, such as \"3D Secure\" confirmation. After confirming "
"their payment, the user will be redirected to the URL provided by the "
"`redirect` parameter specified above. Upon redirection, `message` (string) "
"and `success` (integer) query string variables will be added to the URL. The "
"payment page currently supports the following payment method types:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1770
#, no-wrap
msgid ""
"<div class=\"content-list\" markdown=\"1\">\n"
"- Credit Cards\n"
"- Alipay\n"
"- Bancontact\n"
"- BECS Direct Debit\n"
"- EPS\n"
"- Giropay\n"
"- iDEAL\n"
"- SEPA Direct Debit\n"
"</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1772
msgid ""
"Alternatively, you could allow Stripe to handle the payment confirmation for "
"you. In this case, instead of redirecting to the payment confirmation page, "
"you may [setup Stripe's automatic billing "
"emails](https://dashboard.stripe.com/account/billing/automatic) in your "
"Stripe dashboard. However, if an `IncompletePayment` exception is caught, "
"you should still inform the user they will receive an email with further "
"payment confirmation instructions."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1774
msgid ""
"Payment exceptions may be thrown for the following methods: `charge`, "
"`invoiceFor`, and `invoice` on models using the `Billable` trait. When "
"interacting with subscriptions, the `create` method on the "
"`SubscriptionBuilder`, and the `incrementAndInvoice` and `swapAndInvoice` "
"methods on the `Subscription` and `SubscriptionItem` models may throw "
"incomplete payment exceptions."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1776
msgid ""
"Determining if an existing subscription has an incomplete payment may be "
"accomplished using the `hasIncompletePayment` method on the billable model "
"or a subscription instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1786
msgid ""
"You can derive the specific status of an incomplete payment by inspecting "
"the `payment` property on the exception instance:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1794
#, no-wrap
msgid ""
"    try {\n"
"        $user->charge(1000, 'pm_card_threeDSecure2Required');\n"
"    } catch (IncompletePayment $exception) {\n"
"        // Get the payment intent status...\n"
"        $exception->payment->status;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1802
#, no-wrap
msgid ""
"        // Check specific conditions...\n"
"        if ($exception->payment->requiresPaymentMethod()) {\n"
"            // ...\n"
"        } elseif ($exception->payment->requiresConfirmation()) {\n"
"            // ...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1804
#, no-wrap
msgid "<a name=\"strong-customer-authentication\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1804
#, no-wrap
msgid "Strong Customer Authentication"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1807
msgid ""
"If your business or one of your customers is based in Europe you will need "
"to abide by the EU's Strong Customer Authentication (SCA) regulations. These "
"regulations were imposed in September 2019 by the European Union to prevent "
"payment fraud. Luckily, Stripe and Cashier are prepared for building SCA "
"compliant applications."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1809
#, no-wrap
msgid ""
"> {note} Before getting started, review [Stripe's guide on PSD2 and "
"SCA](https://stripe.com/guides/strong-customer-authentication) as well as "
"their [documentation on the new SCA "
"APIs](https://stripe.com/docs/strong-customer-authentication).\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1811
#, no-wrap
msgid "<a name=\"payments-requiring-additional-confirmation\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1811
#, no-wrap
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1814
msgid ""
"SCA regulations often require extra verification in order to confirm and "
"process a payment. When this happens, Cashier will throw a "
"`Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you "
"that extra verification is needed. More information on how to handle these "
"exceptions be found can be found in the documentation on [handling failed "
"payments](#handling-failed-payments)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1816
msgid ""
"Payment confirmation screens presented by Stripe or Cashier may be tailored "
"to a specific bank or card issuer's payment flow and can include additional "
"card confirmation, a temporary small charge, separate device authentication, "
"or other forms of verification."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1818
#, no-wrap
msgid "<a name=\"incomplete-and-past-due-state\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/billing.md:1818
#, no-wrap
msgid "Incomplete and Past Due State"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1821
msgid ""
"When a payment needs additional confirmation, the subscription will remain "
"in an `incomplete` or `past_due` state as indicated by its `stripe_status` "
"database column. Cashier will automatically activate the customer's "
"subscription as soon as payment confirmation is complete and your "
"application is notified by Stripe via webhook of its completion."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1823
msgid ""
"For more information on `incomplete` and `past_due` states, please refer to "
"[our additional documentation on these "
"states](#incomplete-and-past-due-status)."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1825
#, no-wrap
msgid "<a name=\"off-session-payment-notifications\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/billing.md:1825
#, no-wrap
msgid "Off-Session Payment Notifications"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1828
msgid ""
"Since SCA regulations require customers to occasionally verify their payment "
"details even while their subscription is active, Cashier can send a "
"notification to the customer when off-session payment confirmation is "
"required. For example, this may occur when a subscription is "
"renewing. Cashier's payment notification can be enabled by setting the "
"`CASHIER_PAYMENT_NOTIFICATION` environment variable to a notification "
"class. By default, this notification is disabled. Of course, Cashier "
"includes a notification class you may use for this purpose, but you are free "
"to provide your own notification class if desired:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1830
#, no-wrap
msgid ""
"    "
"CASHIER_PAYMENT_NOTIFICATION=Laravel\\Cashier\\Notifications\\ConfirmPayment\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1832
msgid ""
"To ensure that off-session payment confirmation notifications are delivered, "
"verify that [Stripe webhooks are configured](#handling-stripe-webhooks) for "
"your application and the `invoice.payment_action_required` webhook is "
"enabled in your Stripe dashboard. In addition, your `Billable` model should "
"also use Laravel's `Illuminate\\Notifications\\Notifiable` trait."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1834
#, no-wrap
msgid ""
"> {note} Notifications will be sent even when customers are manually making "
"a payment that requires additional confirmation. Unfortunately, there is no "
"way for Stripe to know that the payment was done manually or "
"\"off-session\". But, a customer will simply see a \"Payment Successful\" "
"message if they visit the payment page after already confirming their "
"payment. The customer will not be allowed to accidentally confirm the same "
"payment twice and incur an accidental second charge.\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1836
#, no-wrap
msgid "<a name=\"stripe-sdk\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1836
#, no-wrap
msgid "Stripe SDK"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1839
msgid ""
"Many of Cashier's objects are wrappers around Stripe SDK objects. If you "
"would like to interact with the Stripe objects directly, you may "
"conveniently retrieve them using the `asStripe` method:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1841
#, no-wrap
msgid "    $stripeSubscription = $subscription->asStripeSubscription();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1843
#, no-wrap
msgid "    $stripeSubscription->application_fee_percent = 5;\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1845
#, no-wrap
msgid "    $stripeSubscription->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1847
msgid ""
"You may also use the `updateStripeSubscription` method to update a Stripe "
"subscription directly:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1849
#, no-wrap
msgid ""
"    $subscription->updateStripeSubscription(['application_fee_percent' => "
"5]);\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1851
msgid ""
"You may invoke the `stripe` method on the `Cashier` class if you would like "
"to use the `Stripe\\StripeClient` client directly. For example, you could "
"use this method to access the `StripeClient` instance and retrieve a list of "
"prices from your Stripe account:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1855
#, no-wrap
msgid "    $prices = Cashier::stripe()->prices->all();\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1857
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/billing.md:1857
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1860
msgid ""
"When testing an application that uses Cashier, you may mock the actual HTTP "
"requests to the Stripe API; however, this requires you to partially "
"re-implement Cashier's own behavior. Therefore, we recommend allowing your "
"tests to hit the actual Stripe API. While this is slower, it provides more "
"confidence that your application is working as expected and any slow tests "
"may be placed within their own PHPUnit testing group."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1862
msgid ""
"When testing, remember that Cashier itself already has a great test suite, "
"so you should only focus on testing the subscription and payment flow of "
"your own application and not every underlying Cashier behavior."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1864
msgid ""
"To get started, add the **testing** version of your Stripe secret to your "
"`phpunit.xml` file:"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1866
#, no-wrap
msgid "    <env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>\n"
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1868
msgid ""
"Now, whenever you interact with Cashier while testing, it will send actual "
"API requests to your Stripe testing environment. For convenience, you should "
"pre-fill your Stripe testing account with subscriptions / prices that you "
"may use during testing."
msgstr ""

#. type: Plain text
#: docs/master/billing.md:1869
#, no-wrap
msgid ""
"> {tip} In order to test a variety of billing scenarios, such as credit card "
"denials and failures, you may use the vast range of [testing card numbers "
"and tokens](https://stripe.com/docs/testing) provided by Stripe.\n"
msgstr ""
