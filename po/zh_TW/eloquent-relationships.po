msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent-relationships.pot\n"
"X-Crowdin-File-ID: 55\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:57\n"

#: ./docs/8.x/eloquent-relationships.md:1
#: ./docs/9.x/eloquent-relationships.md:1
#: ./docs/10.x/eloquent-relationships.md:1
#: ./docs/11.x/eloquent-relationships.md:1
#: ./docs/master/eloquent-relationships.md:1
msgctxt "H1"
msgid "Eloquent: Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:3
#: ./docs/9.x/eloquent-relationships.md:3
#: ./docs/10.x/eloquent-relationships.md:3
#: ./docs/11.x/eloquent-relationships.md:3
#: ./docs/master/eloquent-relationships.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:4
#: ./docs/9.x/eloquent-relationships.md:4
#: ./docs/10.x/eloquent-relationships.md:4
#: ./docs/11.x/eloquent-relationships.md:4
#: ./docs/master/eloquent-relationships.md:4
msgctxt "P"
msgid "[Defining Relationships](#defining-relationships)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:5
#: ./docs/master/eloquent-relationships.md:5
msgctxt "P"
msgid "[One to One](#one-to-one)"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:5
msgctxt "P"
msgid "[One to One / Has One](#one-to-one)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:5
#: ./docs/8.x/eloquent-relationships.md:49
#: ./docs/9.x/eloquent-relationships.md:5
#: ./docs/9.x/eloquent-relationships.md:50
#: ./docs/10.x/eloquent-relationships.md:50
#: ./docs/11.x/eloquent-relationships.md:50
#: ./docs/master/eloquent-relationships.md:50
msgctxt "P"
msgid "[One To One](#one-to-one)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:6
#: ./docs/master/eloquent-relationships.md:6
msgctxt "P"
msgid "[One to Many](#one-to-many)"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:6
msgctxt "P"
msgid "[One to Many / Has Many](#one-to-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:6
#: ./docs/8.x/eloquent-relationships.md:50
#: ./docs/9.x/eloquent-relationships.md:6
#: ./docs/9.x/eloquent-relationships.md:51
#: ./docs/10.x/eloquent-relationships.md:51
#: ./docs/11.x/eloquent-relationships.md:51
#: ./docs/master/eloquent-relationships.md:51
msgctxt "P"
msgid "[One To Many](#one-to-many)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:7
#: ./docs/11.x/eloquent-relationships.md:7
#: ./docs/master/eloquent-relationships.md:7
msgctxt "P"
msgid "[One to Many (Inverse) / Belongs To](#one-to-many-inverse)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:7
#: ./docs/9.x/eloquent-relationships.md:7
msgctxt "P"
msgid "[One To Many (Inverse) / Belongs To](#one-to-many-inverse)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:8
#: ./docs/11.x/eloquent-relationships.md:8
#: ./docs/master/eloquent-relationships.md:8
msgctxt "P"
msgid "[Has One of Many](#has-one-of-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:8
#: ./docs/9.x/eloquent-relationships.md:8
msgctxt "P"
msgid "[Has One Of Many](#has-one-of-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:9
#: ./docs/8.x/eloquent-relationships.md:52
#: ./docs/9.x/eloquent-relationships.md:9
#: ./docs/9.x/eloquent-relationships.md:53
#: ./docs/10.x/eloquent-relationships.md:9
#: ./docs/10.x/eloquent-relationships.md:53
#: ./docs/11.x/eloquent-relationships.md:9
#: ./docs/11.x/eloquent-relationships.md:53
#: ./docs/master/eloquent-relationships.md:9
#: ./docs/master/eloquent-relationships.md:53
msgctxt "P"
msgid "[Has One Through](#has-one-through)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:10
#: ./docs/8.x/eloquent-relationships.md:53
#: ./docs/9.x/eloquent-relationships.md:10
#: ./docs/9.x/eloquent-relationships.md:54
#: ./docs/10.x/eloquent-relationships.md:10
#: ./docs/10.x/eloquent-relationships.md:54
#: ./docs/11.x/eloquent-relationships.md:10
#: ./docs/11.x/eloquent-relationships.md:54
#: ./docs/master/eloquent-relationships.md:10
#: ./docs/master/eloquent-relationships.md:54
msgctxt "P"
msgid "[Has Many Through](#has-many-through)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:11
#: ./docs/11.x/eloquent-relationships.md:11
#: ./docs/master/eloquent-relationships.md:11
msgctxt "P"
msgid "[Many to Many Relationships](#many-to-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:11
#: ./docs/9.x/eloquent-relationships.md:11
msgctxt "P"
msgid "[Many To Many Relationships](#many-to-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:12
#: ./docs/9.x/eloquent-relationships.md:12
#: ./docs/10.x/eloquent-relationships.md:12
#: ./docs/11.x/eloquent-relationships.md:12
#: ./docs/master/eloquent-relationships.md:12
msgctxt "P"
msgid "[Retrieving Intermediate Table Columns](#retrieving-intermediate-table-columns)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:13
#: ./docs/11.x/eloquent-relationships.md:13
#: ./docs/master/eloquent-relationships.md:13
msgctxt "P"
msgid "[Filtering Queries via Intermediate Table Columns](#filtering-queries-via-intermediate-table-columns)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:13
#: ./docs/9.x/eloquent-relationships.md:13
msgctxt "P"
msgid "[Filtering Queries Via Intermediate Table Columns](#filtering-queries-via-intermediate-table-columns)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:14
#: ./docs/11.x/eloquent-relationships.md:14
#: ./docs/master/eloquent-relationships.md:14
msgctxt "P"
msgid "[Ordering Queries via Intermediate Table Columns](#ordering-queries-via-intermediate-table-columns)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:14
#: ./docs/9.x/eloquent-relationships.md:15
#: ./docs/10.x/eloquent-relationships.md:15
#: ./docs/11.x/eloquent-relationships.md:15
#: ./docs/master/eloquent-relationships.md:15
msgctxt "P"
msgid "[Defining Custom Intermediate Table Models](#defining-custom-intermediate-table-models)"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:14
msgctxt "P"
msgid "[Ordering Queries Via Intermediate Table Columns](#ordering-queries-via-intermediate-table-columns)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:15
#: ./docs/9.x/eloquent-relationships.md:16
#: ./docs/10.x/eloquent-relationships.md:16
#: ./docs/11.x/eloquent-relationships.md:16
#: ./docs/master/eloquent-relationships.md:16
msgctxt "P"
msgid "[Polymorphic Relationships](#polymorphic-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:16
#: ./docs/9.x/eloquent-relationships.md:17
msgctxt "P"
msgid "[One To One](#one-to-one-polymorphic-relations)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:17
#: ./docs/11.x/eloquent-relationships.md:17
#: ./docs/master/eloquent-relationships.md:17
msgctxt "P"
msgid "[One to One](#one-to-one-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:17
#: ./docs/9.x/eloquent-relationships.md:18
msgctxt "P"
msgid "[One To Many](#one-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:18
#: ./docs/11.x/eloquent-relationships.md:18
#: ./docs/master/eloquent-relationships.md:18
msgctxt "P"
msgid "[One to Many](#one-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:18
#: ./docs/9.x/eloquent-relationships.md:19
msgctxt "P"
msgid "[One Of Many](#one-of-many-polymorphic-relations)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:19
#: ./docs/11.x/eloquent-relationships.md:19
#: ./docs/master/eloquent-relationships.md:19
msgctxt "P"
msgid "[One of Many](#one-of-many-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:19
#: ./docs/9.x/eloquent-relationships.md:20
msgctxt "P"
msgid "[Many To Many](#many-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:20
#: ./docs/11.x/eloquent-relationships.md:20
#: ./docs/master/eloquent-relationships.md:20
msgctxt "P"
msgid "[Many to Many](#many-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:20
#: ./docs/9.x/eloquent-relationships.md:21
#: ./docs/10.x/eloquent-relationships.md:21
#: ./docs/11.x/eloquent-relationships.md:21
#: ./docs/master/eloquent-relationships.md:21
msgctxt "P"
msgid "[Custom Polymorphic Types](#custom-polymorphic-types)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:21
#: ./docs/9.x/eloquent-relationships.md:22
#: ./docs/10.x/eloquent-relationships.md:22
#: ./docs/11.x/eloquent-relationships.md:22
#: ./docs/master/eloquent-relationships.md:22
msgctxt "P"
msgid "[Dynamic Relationships](#dynamic-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:22
#: ./docs/9.x/eloquent-relationships.md:23
#: ./docs/10.x/eloquent-relationships.md:23
#: ./docs/11.x/eloquent-relationships.md:23
#: ./docs/master/eloquent-relationships.md:23
msgctxt "P"
msgid "[Querying Relations](#querying-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:23
#: ./docs/9.x/eloquent-relationships.md:24
msgctxt "P"
msgid "[Relationship Methods Vs. Dynamic Properties](#relationship-methods-vs-dynamic-properties)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:24
#: ./docs/11.x/eloquent-relationships.md:24
#: ./docs/master/eloquent-relationships.md:24
msgctxt "P"
msgid "[Relationship Methods vs. Dynamic Properties](#relationship-methods-vs-dynamic-properties)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:24
#: ./docs/9.x/eloquent-relationships.md:25
#: ./docs/10.x/eloquent-relationships.md:25
#: ./docs/11.x/eloquent-relationships.md:25
#: ./docs/master/eloquent-relationships.md:25
msgctxt "P"
msgid "[Querying Relationship Existence](#querying-relationship-existence)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:25
#: ./docs/9.x/eloquent-relationships.md:26
#: ./docs/10.x/eloquent-relationships.md:26
#: ./docs/11.x/eloquent-relationships.md:26
#: ./docs/master/eloquent-relationships.md:26
msgctxt "P"
msgid "[Querying Relationship Absence](#querying-relationship-absence)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:26
#: ./docs/9.x/eloquent-relationships.md:27
#: ./docs/10.x/eloquent-relationships.md:27
#: ./docs/11.x/eloquent-relationships.md:27
#: ./docs/master/eloquent-relationships.md:27
msgctxt "P"
msgid "[Querying Morph To Relationships](#querying-morph-to-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:27
#: ./docs/9.x/eloquent-relationships.md:28
#: ./docs/10.x/eloquent-relationships.md:28
#: ./docs/11.x/eloquent-relationships.md:28
#: ./docs/master/eloquent-relationships.md:28
msgctxt "P"
msgid "[Aggregating Related Models](#aggregating-related-models)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:28
#: ./docs/9.x/eloquent-relationships.md:29
#: ./docs/10.x/eloquent-relationships.md:29
#: ./docs/11.x/eloquent-relationships.md:29
#: ./docs/master/eloquent-relationships.md:29
msgctxt "P"
msgid "[Counting Related Models](#counting-related-models)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:29
#: ./docs/9.x/eloquent-relationships.md:30
#: ./docs/10.x/eloquent-relationships.md:30
#: ./docs/11.x/eloquent-relationships.md:30
#: ./docs/master/eloquent-relationships.md:30
msgctxt "P"
msgid "[Other Aggregate Functions](#other-aggregate-functions)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:30
#: ./docs/9.x/eloquent-relationships.md:31
msgctxt "P"
msgid "[Counting Related Models On Morph To Relationships](#counting-related-models-on-morph-to-relationships)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:31
#: ./docs/11.x/eloquent-relationships.md:31
#: ./docs/master/eloquent-relationships.md:31
msgctxt "P"
msgid "[Counting Related Models on Morph To Relationships](#counting-related-models-on-morph-to-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:31
#: ./docs/9.x/eloquent-relationships.md:32
#: ./docs/10.x/eloquent-relationships.md:32
#: ./docs/11.x/eloquent-relationships.md:32
#: ./docs/master/eloquent-relationships.md:32
msgctxt "P"
msgid "[Eager Loading](#eager-loading)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:32
#: ./docs/9.x/eloquent-relationships.md:33
#: ./docs/10.x/eloquent-relationships.md:33
#: ./docs/11.x/eloquent-relationships.md:33
#: ./docs/master/eloquent-relationships.md:33
msgctxt "P"
msgid "[Constraining Eager Loads](#constraining-eager-loads)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:33
#: ./docs/9.x/eloquent-relationships.md:34
#: ./docs/10.x/eloquent-relationships.md:34
#: ./docs/11.x/eloquent-relationships.md:34
#: ./docs/master/eloquent-relationships.md:34
msgctxt "P"
msgid "[Lazy Eager Loading](#lazy-eager-loading)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:34
#: ./docs/9.x/eloquent-relationships.md:35
#: ./docs/10.x/eloquent-relationships.md:35
#: ./docs/11.x/eloquent-relationships.md:35
#: ./docs/master/eloquent-relationships.md:35
msgctxt "P"
msgid "[Preventing Lazy Loading](#preventing-lazy-loading)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:35
#: ./docs/9.x/eloquent-relationships.md:36
msgctxt "P"
msgid "[Inserting & Updating Related Models](#inserting-and-updating-related-models)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:36
#: ./docs/11.x/eloquent-relationships.md:36
#: ./docs/master/eloquent-relationships.md:36
msgctxt "P"
msgid "[Inserting and Updating Related Models](#inserting-and-updating-related-models)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:36
#: ./docs/9.x/eloquent-relationships.md:37
#: ./docs/10.x/eloquent-relationships.md:37
#: ./docs/11.x/eloquent-relationships.md:37
#: ./docs/master/eloquent-relationships.md:37
msgctxt "P"
msgid "[The `save` Method](#the-save-method)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:37
#: ./docs/9.x/eloquent-relationships.md:38
#: ./docs/10.x/eloquent-relationships.md:38
#: ./docs/11.x/eloquent-relationships.md:38
#: ./docs/master/eloquent-relationships.md:38
msgctxt "P"
msgid "[The `create` Method](#the-create-method)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:38
#: ./docs/9.x/eloquent-relationships.md:39
#: ./docs/10.x/eloquent-relationships.md:39
#: ./docs/11.x/eloquent-relationships.md:39
#: ./docs/master/eloquent-relationships.md:39
msgctxt "P"
msgid "[Belongs To Relationships](#updating-belongs-to-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:39
#: ./docs/9.x/eloquent-relationships.md:40
msgctxt "P"
msgid "[Many To Many Relationships](#updating-many-to-many-relationships)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:40
#: ./docs/11.x/eloquent-relationships.md:40
#: ./docs/master/eloquent-relationships.md:40
msgctxt "P"
msgid "[Many to Many Relationships](#updating-many-to-many-relationships)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:40
#: ./docs/9.x/eloquent-relationships.md:41
#: ./docs/10.x/eloquent-relationships.md:41
#: ./docs/11.x/eloquent-relationships.md:41
#: ./docs/master/eloquent-relationships.md:41
msgctxt "P"
msgid "[Touching Parent Timestamps](#touching-parent-timestamps)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:42
#: ./docs/9.x/eloquent-relationships.md:43
#: ./docs/10.x/eloquent-relationships.md:43
#: ./docs/11.x/eloquent-relationships.md:43
#: ./docs/master/eloquent-relationships.md:43
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:43
#: ./docs/9.x/eloquent-relationships.md:44
#: ./docs/10.x/eloquent-relationships.md:44
#: ./docs/11.x/eloquent-relationships.md:44
#: ./docs/master/eloquent-relationships.md:44
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:45
#: ./docs/9.x/eloquent-relationships.md:46
#: ./docs/10.x/eloquent-relationships.md:46
#: ./docs/11.x/eloquent-relationships.md:46
#: ./docs/master/eloquent-relationships.md:46
msgctxt "P"
msgid "Database tables are often related to one another. For example, a blog post may have many comments or an order could be related to the user who placed it. Eloquent makes managing and working with these relationships easy, and supports a variety of common relationships:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:51
#: ./docs/9.x/eloquent-relationships.md:52
#: ./docs/10.x/eloquent-relationships.md:52
#: ./docs/11.x/eloquent-relationships.md:52
#: ./docs/master/eloquent-relationships.md:52
msgctxt "P"
msgid "[Many To Many](#many-to-many)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:54
#: ./docs/9.x/eloquent-relationships.md:55
#: ./docs/10.x/eloquent-relationships.md:55
#: ./docs/11.x/eloquent-relationships.md:55
#: ./docs/master/eloquent-relationships.md:55
msgctxt "P"
msgid "[One To One (Polymorphic)](#one-to-one-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:55
#: ./docs/9.x/eloquent-relationships.md:56
#: ./docs/10.x/eloquent-relationships.md:56
#: ./docs/11.x/eloquent-relationships.md:56
#: ./docs/master/eloquent-relationships.md:56
msgctxt "P"
msgid "[One To Many (Polymorphic)](#one-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:56
#: ./docs/9.x/eloquent-relationships.md:57
#: ./docs/10.x/eloquent-relationships.md:57
#: ./docs/11.x/eloquent-relationships.md:57
#: ./docs/master/eloquent-relationships.md:57
msgctxt "P"
msgid "[Many To Many (Polymorphic)](#many-to-many-polymorphic-relations)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:60
#: ./docs/9.x/eloquent-relationships.md:61
#: ./docs/10.x/eloquent-relationships.md:61
#: ./docs/11.x/eloquent-relationships.md:61
#: ./docs/master/eloquent-relationships.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"defining-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:61
#: ./docs/9.x/eloquent-relationships.md:62
#: ./docs/10.x/eloquent-relationships.md:62
#: ./docs/11.x/eloquent-relationships.md:62
#: ./docs/master/eloquent-relationships.md:62
msgctxt "H2"
msgid "Defining Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:63
#: ./docs/9.x/eloquent-relationships.md:64
#: ./docs/10.x/eloquent-relationships.md:64
#: ./docs/11.x/eloquent-relationships.md:64
#: ./docs/master/eloquent-relationships.md:64
msgctxt "P"
msgid "Eloquent relationships are defined as methods on your Eloquent model classes. Since relationships also serve as powerful [query builders](/docs/{{version}}/queries), defining relationships as methods provides powerful method chaining and querying capabilities. For example, we may chain additional query constraints on this `posts` relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:65
#: ./docs/9.x/eloquent-relationships.md:66
#: ./docs/10.x/eloquent-relationships.md:66
#: ./docs/11.x/eloquent-relationships.md:66
#: ./docs/master/eloquent-relationships.md:66
msgctxt "CODE"
msgid "$user->posts()->where('active', 1)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:67
#: ./docs/9.x/eloquent-relationships.md:68
#: ./docs/10.x/eloquent-relationships.md:68
#: ./docs/11.x/eloquent-relationships.md:68
#: ./docs/master/eloquent-relationships.md:68
msgctxt "P"
msgid "But, before diving too deep into using relationships, let's learn how to define each type of relationship supported by Eloquent."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:69
#: ./docs/9.x/eloquent-relationships.md:70
#: ./docs/10.x/eloquent-relationships.md:70
#: ./docs/11.x/eloquent-relationships.md:70
#: ./docs/master/eloquent-relationships.md:70
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:70
#: ./docs/9.x/eloquent-relationships.md:71
msgctxt "H3"
msgid "One To One"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:71
#: ./docs/master/eloquent-relationships.md:71
msgctxt "H3"
msgid "One to One"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:71
msgctxt "H3"
msgid "One to One / Has One"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:72
#: ./docs/9.x/eloquent-relationships.md:73
#: ./docs/10.x/eloquent-relationships.md:73
#: ./docs/11.x/eloquent-relationships.md:73
#: ./docs/master/eloquent-relationships.md:73
msgctxt "P"
msgid "A one-to-one relationship is a very basic type of database relationship. For example, a `User` model might be associated with one `Phone` model. To define this relationship, we will place a `phone` method on the `User` model. The `phone` method should call the `hasOne` method and return its result. The `hasOne` method is available to your model via the model's `Illuminate\\Database\\Eloquent\\Model` base class:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:74
#: ./docs/9.x/eloquent-relationships.md:75
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the phone associated with the user.\n"
"     */\n"
"    public function phone()\n"
"    {\n"
"        return $this->hasOne(Phone::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:75
#: ./docs/11.x/eloquent-relationships.md:75
#: ./docs/master/eloquent-relationships.md:75
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasOne;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the phone associated with the user.\n"
"     */\n"
"    public function phone(): HasOne\n"
"    {\n"
"        return $this->hasOne(Phone::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:91
#: ./docs/9.x/eloquent-relationships.md:92
#: ./docs/10.x/eloquent-relationships.md:93
#: ./docs/11.x/eloquent-relationships.md:93
#: ./docs/master/eloquent-relationships.md:93
msgctxt "P"
msgid "The first argument passed to the `hasOne` method is the name of the related model class. Once the relationship is defined, we may retrieve the related record using Eloquent's dynamic properties. Dynamic properties allow you to access relationship methods as if they were properties defined on the model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:93
#: ./docs/9.x/eloquent-relationships.md:94
#: ./docs/10.x/eloquent-relationships.md:95
#: ./docs/11.x/eloquent-relationships.md:95
#: ./docs/master/eloquent-relationships.md:95
msgctxt "CODE"
msgid "$phone = User::find(1)->phone;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:95
#: ./docs/9.x/eloquent-relationships.md:96
#: ./docs/10.x/eloquent-relationships.md:97
#: ./docs/11.x/eloquent-relationships.md:97
#: ./docs/master/eloquent-relationships.md:97
msgctxt "P"
msgid "Eloquent determines the foreign key of the relationship based on the parent model name. In this case, the `Phone` model is automatically assumed to have a `user_id` foreign key. If you wish to override this convention, you may pass a second argument to the `hasOne` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:97
#: ./docs/9.x/eloquent-relationships.md:98
#: ./docs/10.x/eloquent-relationships.md:99
#: ./docs/11.x/eloquent-relationships.md:99
#: ./docs/master/eloquent-relationships.md:99
msgctxt "CODE"
msgid "return $this->hasOne(Phone::class, 'foreign_key');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:99
#: ./docs/9.x/eloquent-relationships.md:100
#: ./docs/10.x/eloquent-relationships.md:101
#: ./docs/11.x/eloquent-relationships.md:101
#: ./docs/master/eloquent-relationships.md:101
msgctxt "P"
msgid "Additionally, Eloquent assumes that the foreign key should have a value matching the primary key column of the parent. In other words, Eloquent will look for the value of the user's `id` column in the `user_id` column of the `Phone` record. If you would like the relationship to use a primary key value other than `id` or your model's `$primaryKey` property, you may pass a third argument to the `hasOne` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:101
#: ./docs/9.x/eloquent-relationships.md:102
#: ./docs/10.x/eloquent-relationships.md:103
#: ./docs/11.x/eloquent-relationships.md:103
#: ./docs/master/eloquent-relationships.md:103
msgctxt "CODE"
msgid "return $this->hasOne(Phone::class, 'foreign_key', 'local_key');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:103
#: ./docs/9.x/eloquent-relationships.md:104
#: ./docs/10.x/eloquent-relationships.md:105
#: ./docs/11.x/eloquent-relationships.md:105
#: ./docs/master/eloquent-relationships.md:105
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one-defining-the-inverse-of-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:104
#: ./docs/8.x/eloquent-relationships.md:560
#: ./docs/8.x/eloquent-relationships.md:1001
#: ./docs/9.x/eloquent-relationships.md:105
#: ./docs/9.x/eloquent-relationships.md:608
#: ./docs/9.x/eloquent-relationships.md:1062
msgctxt "H4"
msgid "Defining The Inverse Of The Relationship"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:106
#: ./docs/10.x/eloquent-relationships.md:638
#: ./docs/10.x/eloquent-relationships.md:1109
#: ./docs/11.x/eloquent-relationships.md:106
#: ./docs/11.x/eloquent-relationships.md:685
#: ./docs/11.x/eloquent-relationships.md:1196
#: ./docs/master/eloquent-relationships.md:106
#: ./docs/master/eloquent-relationships.md:638
#: ./docs/master/eloquent-relationships.md:1109
msgctxt "H4"
msgid "Defining the Inverse of the Relationship"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:106
#: ./docs/9.x/eloquent-relationships.md:107
#: ./docs/10.x/eloquent-relationships.md:108
#: ./docs/11.x/eloquent-relationships.md:108
#: ./docs/master/eloquent-relationships.md:108
msgctxt "P"
msgid "So, we can access the `Phone` model from our `User` model. Next, let's define a relationship on the `Phone` model that will let us access the user that owns the phone. We can define the inverse of a `hasOne` relationship using the `belongsTo` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:108
#: ./docs/9.x/eloquent-relationships.md:109
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Phone extends Model\n"
"{\n"
"    /**\n"
"     * Get the user that owns the phone.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:110
#: ./docs/11.x/eloquent-relationships.md:110
#: ./docs/master/eloquent-relationships.md:110
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n"
"class Phone extends Model\n"
"{\n"
"    /**\n"
"     * Get the user that owns the phone.\n"
"     */\n"
"    public function user(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(User::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:125
#: ./docs/9.x/eloquent-relationships.md:126
#: ./docs/10.x/eloquent-relationships.md:128
#: ./docs/11.x/eloquent-relationships.md:128
#: ./docs/master/eloquent-relationships.md:128
msgctxt "P"
msgid "When invoking the `user` method, Eloquent will attempt to find a `User` model that has an `id` which matches the `user_id` column on the `Phone` model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:127
#: ./docs/9.x/eloquent-relationships.md:128
#: ./docs/10.x/eloquent-relationships.md:130
#: ./docs/11.x/eloquent-relationships.md:130
#: ./docs/master/eloquent-relationships.md:130
msgctxt "P"
msgid "Eloquent determines the foreign key name by examining the name of the relationship method and suffixing the method name with `_id`. So, in this case, Eloquent assumes that the `Phone` model has a `user_id` column. However, if the foreign key on the `Phone` model is not `user_id`, you may pass a custom key name as the second argument to the `belongsTo` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:129
#: ./docs/9.x/eloquent-relationships.md:130
msgctxt "CODE"
msgid "/**\n"
" * Get the user that owns the phone.\n"
" */\n"
"public function user()\n"
"{\n"
"    return $this->belongsTo(User::class, 'foreign_key');\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:132
#: ./docs/11.x/eloquent-relationships.md:132
#: ./docs/master/eloquent-relationships.md:132
msgctxt "CODE"
msgid "/**\n"
" * Get the user that owns the phone.\n"
" */\n"
"public function user(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(User::class, 'foreign_key');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:137
#: ./docs/9.x/eloquent-relationships.md:138
#: ./docs/10.x/eloquent-relationships.md:140
#: ./docs/11.x/eloquent-relationships.md:140
#: ./docs/master/eloquent-relationships.md:140
msgctxt "P"
msgid "If the parent model does not use `id` as its primary key, or you wish to find the associated model using a different column, you may pass a third argument to the `belongsTo` method specifying the parent table's custom key:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:139
#: ./docs/9.x/eloquent-relationships.md:140
msgctxt "CODE"
msgid "/**\n"
" * Get the user that owns the phone.\n"
" */\n"
"public function user()\n"
"{\n"
"    return $this->belongsTo(User::class, 'foreign_key', 'owner_key');\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:142
#: ./docs/11.x/eloquent-relationships.md:142
#: ./docs/master/eloquent-relationships.md:142
msgctxt "CODE"
msgid "/**\n"
" * Get the user that owns the phone.\n"
" */\n"
"public function user(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(User::class, 'foreign_key', 'owner_key');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:147
#: ./docs/9.x/eloquent-relationships.md:148
#: ./docs/10.x/eloquent-relationships.md:150
#: ./docs/11.x/eloquent-relationships.md:150
#: ./docs/master/eloquent-relationships.md:150
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:148
#: ./docs/9.x/eloquent-relationships.md:149
msgctxt "H3"
msgid "One To Many"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:150
#: ./docs/9.x/eloquent-relationships.md:151
#: ./docs/10.x/eloquent-relationships.md:153
#: ./docs/11.x/eloquent-relationships.md:153
#: ./docs/master/eloquent-relationships.md:153
msgctxt "P"
msgid "A one-to-many relationship is used to define relationships where a single model is the parent to one or more child models. For example, a blog post may have an infinite number of comments. Like all other Eloquent relationships, one-to-many relationships are defined by defining a method on your Eloquent model:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:151
#: ./docs/master/eloquent-relationships.md:151
msgctxt "H3"
msgid "One to Many"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:151
msgctxt "H3"
msgid "One to Many / Has Many"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:152
#: ./docs/9.x/eloquent-relationships.md:153
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get the comments for the blog post.\n"
"     */\n"
"    public function comments()\n"
"    {\n"
"        return $this->hasMany(Comment::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:155
#: ./docs/11.x/eloquent-relationships.md:155
#: ./docs/master/eloquent-relationships.md:155
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get the comments for the blog post.\n"
"     */\n"
"    public function comments(): HasMany\n"
"    {\n"
"        return $this->hasMany(Comment::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:169
#: ./docs/9.x/eloquent-relationships.md:170
#: ./docs/10.x/eloquent-relationships.md:173
#: ./docs/11.x/eloquent-relationships.md:173
#: ./docs/master/eloquent-relationships.md:173
msgctxt "P"
msgid "Remember, Eloquent will automatically determine the proper foreign key column for the `Comment` model. By convention, Eloquent will take the \"snake case\" name of the parent model and suffix it with `_id`. So, in this example, Eloquent will assume the foreign key column on the `Comment` model is `post_id`."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:171
#: ./docs/9.x/eloquent-relationships.md:172
#: ./docs/10.x/eloquent-relationships.md:175
#: ./docs/11.x/eloquent-relationships.md:175
#: ./docs/master/eloquent-relationships.md:175
msgctxt "P"
msgid "Once the relationship method has been defined, we can access the [collection](/docs/{{version}}/eloquent-collections) of related comments by accessing the `comments` property. Remember, since Eloquent provides \"dynamic relationship properties\", we can access relationship methods as if they were defined as properties on the model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:173
#: ./docs/9.x/eloquent-relationships.md:174
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$comments = Post::find(1)->comments;\n\n"
"foreach ($comments as $comment) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:177
#: ./docs/11.x/eloquent-relationships.md:177
#: ./docs/master/eloquent-relationships.md:177
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$comments = Post::find(1)->comments;\n\n"
"foreach ($comments as $comment) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:181
#: ./docs/9.x/eloquent-relationships.md:182
#: ./docs/10.x/eloquent-relationships.md:185
#: ./docs/11.x/eloquent-relationships.md:185
#: ./docs/master/eloquent-relationships.md:185
msgctxt "P"
msgid "Since all relationships also serve as query builders, you may add further constraints to the relationship query by calling the `comments` method and continuing to chain conditions onto the query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:183
#: ./docs/9.x/eloquent-relationships.md:184
#: ./docs/10.x/eloquent-relationships.md:187
#: ./docs/11.x/eloquent-relationships.md:187
#: ./docs/master/eloquent-relationships.md:187
msgctxt "CODE"
msgid "$comment = Post::find(1)->comments()\n"
"                    ->where('title', 'foo')\n"
"                    ->first();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:187
#: ./docs/9.x/eloquent-relationships.md:188
#: ./docs/10.x/eloquent-relationships.md:191
#: ./docs/11.x/eloquent-relationships.md:191
#: ./docs/master/eloquent-relationships.md:191
msgctxt "P"
msgid "Like the `hasOne` method, you may also override the foreign and local keys by passing additional arguments to the `hasMany` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:189
#: ./docs/9.x/eloquent-relationships.md:190
#: ./docs/10.x/eloquent-relationships.md:193
#: ./docs/11.x/eloquent-relationships.md:193
#: ./docs/master/eloquent-relationships.md:193
msgctxt "CODE"
msgid "return $this->hasMany(Comment::class, 'foreign_key');\n\n"
"return $this->hasMany(Comment::class, 'foreign_key', 'local_key');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:193
#: ./docs/9.x/eloquent-relationships.md:194
#: ./docs/10.x/eloquent-relationships.md:197
#: ./docs/11.x/eloquent-relationships.md:244
#: ./docs/master/eloquent-relationships.md:197
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many-inverse\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:194
#: ./docs/9.x/eloquent-relationships.md:195
msgctxt "H3"
msgid "One To Many (Inverse) / Belongs To"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:196
#: ./docs/9.x/eloquent-relationships.md:197
#: ./docs/10.x/eloquent-relationships.md:200
#: ./docs/11.x/eloquent-relationships.md:247
#: ./docs/master/eloquent-relationships.md:200
msgctxt "P"
msgid "Now that we can access all of a post's comments, let's define a relationship to allow a comment to access its parent post. To define the inverse of a `hasMany` relationship, define a relationship method on the child model which calls the `belongsTo` method:"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:197
#~ msgctxt "P"
#~ msgid "<a name=\"automatically-hydrating-parent-models-on-children\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-relationships.md:198
#: ./docs/11.x/eloquent-relationships.md:245
#: ./docs/master/eloquent-relationships.md:198
msgctxt "H3"
msgid "One to Many (Inverse) / Belongs To"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:198
#: ./docs/11.x/eloquent-relationships.md:1059
msgctxt "H4"
msgid "Automatically Hydrating Parent Models on Children"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:198
#: ./docs/9.x/eloquent-relationships.md:199
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * Get the post that owns the comment.\n"
"     */\n"
"    public function post()\n"
"    {\n"
"        return $this->belongsTo(Post::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:200
#: ./docs/11.x/eloquent-relationships.md:1061
msgctxt "P"
msgid "Even when utilizing Eloquent eager loading, \"N + 1\" query problems can arise if you try to access the parent model from a child model while looping through the child models:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:202
#: ./docs/11.x/eloquent-relationships.md:249
#: ./docs/master/eloquent-relationships.md:202
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * Get the post that owns the comment.\n"
"     */\n"
"    public function post(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(Post::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:202
msgctxt "CODE: php"
msgid "$posts = Post::with('comments')->get();\n\n"
"foreach ($posts as $post) {\n"
"    foreach ($post->comments as $comment) {\n"
"        echo $comment->post->title;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:212
#: ./docs/11.x/eloquent-relationships.md:1073
msgctxt "P"
msgid "In the example above, an \"N + 1\" query problem has been introduced because, even though comments were eager loaded for every `Post` model, Eloquent does not automatically hydrate the parent `Post` on each child `Comment` model."
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:214
msgctxt "P"
msgid "If you would like Eloquent to automatically hydrate parent models onto their children, you may invoke the `chaperone` method when defining a `hasMany` relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:215
#: ./docs/9.x/eloquent-relationships.md:216
#: ./docs/10.x/eloquent-relationships.md:220
#: ./docs/11.x/eloquent-relationships.md:267
#: ./docs/master/eloquent-relationships.md:220
msgctxt "P"
msgid "Once the relationship has been defined, we can retrieve a comment's parent post by accessing the `post` \"dynamic relationship property\":"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:216
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get the comments for the blog post.\n"
"     */\n"
"    public function comments(): HasMany\n"
"    {\n"
"        return $this->hasMany(Comment::class)->chaperone();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:217
#: ./docs/9.x/eloquent-relationships.md:218
#: ./docs/10.x/eloquent-relationships.md:222
#: ./docs/11.x/eloquent-relationships.md:269
#: ./docs/master/eloquent-relationships.md:222
msgctxt "CODE"
msgid "use App\\Models\\Comment;\n\n"
"$comment = Comment::find(1);\n\n"
"return $comment->post->title;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:223
#: ./docs/9.x/eloquent-relationships.md:224
#: ./docs/10.x/eloquent-relationships.md:228
#: ./docs/11.x/eloquent-relationships.md:275
#: ./docs/master/eloquent-relationships.md:228
msgctxt "P"
msgid "In the example above, Eloquent will attempt to find a `Post` model that has an `id` which matches the `post_id` column on the `Comment` model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:225
#: ./docs/9.x/eloquent-relationships.md:226
#: ./docs/10.x/eloquent-relationships.md:230
#: ./docs/11.x/eloquent-relationships.md:277
#: ./docs/master/eloquent-relationships.md:230
msgctxt "P"
msgid "Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with a `_` followed by the name of the parent model's primary key column. So, in this example, Eloquent will assume the `Post` model's foreign key on the `comments` table is `post_id`."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:227
#: ./docs/9.x/eloquent-relationships.md:228
#: ./docs/10.x/eloquent-relationships.md:232
#: ./docs/11.x/eloquent-relationships.md:279
#: ./docs/master/eloquent-relationships.md:232
msgctxt "P"
msgid "However, if the foreign key for your relationship does not follow these conventions, you may pass a custom foreign key name as the second argument to the `belongsTo` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:229
#: ./docs/9.x/eloquent-relationships.md:230
msgctxt "CODE"
msgid "/**\n"
" * Get the post that owns the comment.\n"
" */\n"
"public function post()\n"
"{\n"
"    return $this->belongsTo(Post::class, 'foreign_key');\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:234
#: ./docs/11.x/eloquent-relationships.md:281
#: ./docs/master/eloquent-relationships.md:234
msgctxt "CODE"
msgid "/**\n"
" * Get the post that owns the comment.\n"
" */\n"
"public function post(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(Post::class, 'foreign_key');\n"
"}"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:234
#: ./docs/11.x/eloquent-relationships.md:1088
msgctxt "P"
msgid "Or, if you would like to opt-in to automatic parent hydration at run time, you may invoke the `chaperone` model when eager loading the relationship:"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:236
#: ./docs/11.x/eloquent-relationships.md:1090
msgctxt "CODE: php"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::with([\n"
"    'comments' => fn ($comments) => $comments->chaperone(),\n"
"])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:237
#: ./docs/9.x/eloquent-relationships.md:238
#: ./docs/10.x/eloquent-relationships.md:242
#: ./docs/11.x/eloquent-relationships.md:289
#: ./docs/master/eloquent-relationships.md:242
msgctxt "P"
msgid "If your parent model does not use `id` as its primary key, or you wish to find the associated model using a different column, you may pass a third argument to the `belongsTo` method specifying your parent table's custom key:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:239
#: ./docs/9.x/eloquent-relationships.md:240
msgctxt "CODE"
msgid "/**\n"
" * Get the post that owns the comment.\n"
" */\n"
"public function post()\n"
"{\n"
"    return $this->belongsTo(Post::class, 'foreign_key', 'owner_key');\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:244
#: ./docs/11.x/eloquent-relationships.md:291
#: ./docs/master/eloquent-relationships.md:244
msgctxt "CODE"
msgid "/**\n"
" * Get the post that owns the comment.\n"
" */\n"
"public function post(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(Post::class, 'foreign_key', 'owner_key');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:247
#: ./docs/9.x/eloquent-relationships.md:248
#: ./docs/10.x/eloquent-relationships.md:252
#: ./docs/11.x/eloquent-relationships.md:299
#: ./docs/master/eloquent-relationships.md:252
#~ msgctxt "P"
#~ msgid "<a name=\"default-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:248
#: ./docs/9.x/eloquent-relationships.md:249
#: ./docs/10.x/eloquent-relationships.md:253
#: ./docs/11.x/eloquent-relationships.md:300
#: ./docs/master/eloquent-relationships.md:253
msgctxt "H4"
msgid "Default Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:250
#: ./docs/9.x/eloquent-relationships.md:251
#: ./docs/10.x/eloquent-relationships.md:255
#: ./docs/11.x/eloquent-relationships.md:302
#: ./docs/master/eloquent-relationships.md:255
msgctxt "P"
msgid "The `belongsTo`, `hasOne`, `hasOneThrough`, and `morphOne` relationships allow you to define a default model that will be returned if the given relationship is `null`. This pattern is often referred to as the [Null Object pattern](https://en.wikipedia.org/wiki/Null_Object_pattern) and can help remove conditional checks in your code. In the following example, the `user` relation will return an empty `App\\Models\\User` model if no user is attached to the `Post` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:252
#: ./docs/9.x/eloquent-relationships.md:253
msgctxt "CODE"
msgid "/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user()\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault();\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:257
#: ./docs/11.x/eloquent-relationships.md:304
#: ./docs/master/eloquent-relationships.md:257
msgctxt "CODE"
msgid "/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:260
#: ./docs/9.x/eloquent-relationships.md:261
#: ./docs/10.x/eloquent-relationships.md:265
#: ./docs/11.x/eloquent-relationships.md:312
#: ./docs/master/eloquent-relationships.md:265
msgctxt "P"
msgid "To populate the default model with attributes, you may pass an array or closure to the `withDefault` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:262
#: ./docs/9.x/eloquent-relationships.md:263
msgctxt "CODE"
msgid "/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user()\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault([\n"
"        'name' => 'Guest Author',\n"
"    ]);\n"
"}\n\n"
"/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user()\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault(function ($user, $post) {\n"
"        $user->name = 'Guest Author';\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:267
#: ./docs/11.x/eloquent-relationships.md:314
#: ./docs/master/eloquent-relationships.md:267
msgctxt "CODE"
msgid "/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault([\n"
"        'name' => 'Guest Author',\n"
"    ]);\n"
"}\n\n"
"/**\n"
" * Get the author of the post.\n"
" */\n"
"public function user(): BelongsTo\n"
"{\n"
"    return $this->belongsTo(User::class)->withDefault(function (User $user, Post $post) {\n"
"        $user->name = 'Guest Author';\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:282
#: ./docs/9.x/eloquent-relationships.md:283
#: ./docs/10.x/eloquent-relationships.md:287
#: ./docs/11.x/eloquent-relationships.md:334
#: ./docs/master/eloquent-relationships.md:287
#~ msgctxt "P"
#~ msgid "<a name=\"querying-belongs-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:283
#: ./docs/9.x/eloquent-relationships.md:284
#: ./docs/10.x/eloquent-relationships.md:288
#: ./docs/11.x/eloquent-relationships.md:335
#: ./docs/master/eloquent-relationships.md:288
msgctxt "H4"
msgid "Querying Belongs To Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:285
#: ./docs/9.x/eloquent-relationships.md:286
#: ./docs/10.x/eloquent-relationships.md:290
#: ./docs/11.x/eloquent-relationships.md:337
#: ./docs/master/eloquent-relationships.md:290
msgctxt "P"
msgid "When querying for the children of a \"belongs to\" relationship, you may manually build the `where` clause to retrieve the corresponding Eloquent models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:287
#: ./docs/9.x/eloquent-relationships.md:288
#: ./docs/10.x/eloquent-relationships.md:292
#: ./docs/11.x/eloquent-relationships.md:339
#: ./docs/master/eloquent-relationships.md:292
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::where('user_id', $user->id)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:291
#: ./docs/9.x/eloquent-relationships.md:292
#: ./docs/10.x/eloquent-relationships.md:296
#: ./docs/11.x/eloquent-relationships.md:343
#: ./docs/master/eloquent-relationships.md:296
msgctxt "P"
msgid "However, you may find it more convenient to use the `whereBelongsTo` method, which will automatically determine the proper relationship and foreign key for the given model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:293
#: ./docs/9.x/eloquent-relationships.md:294
#: ./docs/10.x/eloquent-relationships.md:298
#: ./docs/11.x/eloquent-relationships.md:345
#: ./docs/master/eloquent-relationships.md:298
msgctxt "CODE"
msgid "$posts = Post::whereBelongsTo($user)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:295
#: ./docs/9.x/eloquent-relationships.md:302
#: ./docs/10.x/eloquent-relationships.md:306
#: ./docs/11.x/eloquent-relationships.md:353
#: ./docs/master/eloquent-relationships.md:306
msgctxt "P"
msgid "By default, Laravel will determine the relationship associated with the given model based on the class name of the model; however, you may specify the relationship name manually by providing it as the second argument to the `whereBelongsTo` method:"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:296
#: ./docs/10.x/eloquent-relationships.md:300
#: ./docs/11.x/eloquent-relationships.md:347
#: ./docs/master/eloquent-relationships.md:300
msgctxt "P"
msgid "You may also provide a [collection](/docs/{{version}}/eloquent-collections) instance to the `whereBelongsTo` method. When doing so, Laravel will retrieve models that belong to any of the parent models within the collection:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:297
#: ./docs/9.x/eloquent-relationships.md:304
#: ./docs/10.x/eloquent-relationships.md:308
#: ./docs/11.x/eloquent-relationships.md:355
#: ./docs/master/eloquent-relationships.md:308
msgctxt "CODE"
msgid "$posts = Post::whereBelongsTo($user, 'author')->get();"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:298
#: ./docs/10.x/eloquent-relationships.md:302
#: ./docs/11.x/eloquent-relationships.md:349
#: ./docs/master/eloquent-relationships.md:302
msgctxt "CODE"
msgid "$users = User::where('vip', true)->get();\n\n"
"$posts = Post::whereBelongsTo($users)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:299
#: ./docs/9.x/eloquent-relationships.md:306
#: ./docs/10.x/eloquent-relationships.md:310
#: ./docs/11.x/eloquent-relationships.md:357
#: ./docs/master/eloquent-relationships.md:310
#~ msgctxt "P"
#~ msgid "<a name=\"has-one-of-many\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:300
#: ./docs/9.x/eloquent-relationships.md:307
msgctxt "H3"
msgid "Has One Of Many"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:302
#: ./docs/9.x/eloquent-relationships.md:309
#: ./docs/10.x/eloquent-relationships.md:313
#: ./docs/11.x/eloquent-relationships.md:360
#: ./docs/master/eloquent-relationships.md:313
msgctxt "P"
msgid "Sometimes a model may have many related models, yet you want to easily retrieve the \"latest\" or \"oldest\" related model of the relationship. For example, a `User` model may be related to many `Order` models, but you want to define a convenient way to interact with the most recent order the user has placed. You may accomplish this using the `hasOne` relationship type combined with the `ofMany` methods:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:304
#: ./docs/9.x/eloquent-relationships.md:311
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most recent order.\n"
" */\n"
"public function latestOrder()\n"
"{\n"
"    return $this->hasOne(Order::class)->latestOfMany();\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:311
#: ./docs/11.x/eloquent-relationships.md:358
#: ./docs/master/eloquent-relationships.md:311
msgctxt "H3"
msgid "Has One of Many"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:314
#: ./docs/8.x/eloquent-relationships.md:921
#: ./docs/9.x/eloquent-relationships.md:321
#: ./docs/9.x/eloquent-relationships.md:980
#: ./docs/10.x/eloquent-relationships.md:325
#: ./docs/10.x/eloquent-relationships.md:1026
#: ./docs/11.x/eloquent-relationships.md:372
#: ./docs/11.x/eloquent-relationships.md:1113
#: ./docs/master/eloquent-relationships.md:325
#: ./docs/master/eloquent-relationships.md:1026
msgctxt "P"
msgid "Likewise, you may define a method to retrieve the \"oldest\", or first, related model of a relationship:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:315
#: ./docs/11.x/eloquent-relationships.md:362
#: ./docs/master/eloquent-relationships.md:315
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most recent order.\n"
" */\n"
"public function latestOrder(): HasOne\n"
"{\n"
"    return $this->hasOne(Order::class)->latestOfMany();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:316
#: ./docs/9.x/eloquent-relationships.md:323
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's oldest order.\n"
" */\n"
"public function oldestOrder()\n"
"{\n"
"    return $this->hasOne(Order::class)->oldestOfMany();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:326
#: ./docs/8.x/eloquent-relationships.md:933
#: ./docs/9.x/eloquent-relationships.md:333
#: ./docs/9.x/eloquent-relationships.md:992
#: ./docs/10.x/eloquent-relationships.md:337
#: ./docs/10.x/eloquent-relationships.md:1038
#: ./docs/11.x/eloquent-relationships.md:384
#: ./docs/11.x/eloquent-relationships.md:1125
#: ./docs/master/eloquent-relationships.md:337
#: ./docs/master/eloquent-relationships.md:1038
msgctxt "P"
msgid "By default, the `latestOfMany` and `oldestOfMany` methods will retrieve the latest or oldest related model based on the model's primary key, which must be sortable. However, sometimes you may wish to retrieve a single model from a larger relationship using a different sorting criteria."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:327
#: ./docs/11.x/eloquent-relationships.md:374
#: ./docs/master/eloquent-relationships.md:327
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's oldest order.\n"
" */\n"
"public function oldestOrder(): HasOne\n"
"{\n"
"    return $this->hasOne(Order::class)->oldestOfMany();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:328
#: ./docs/9.x/eloquent-relationships.md:335
#: ./docs/10.x/eloquent-relationships.md:339
#: ./docs/11.x/eloquent-relationships.md:386
#: ./docs/master/eloquent-relationships.md:339
msgctxt "P"
msgid "For example, using the `ofMany` method, you may retrieve the user's most expensive order. The `ofMany` method accepts the sortable column as its first argument and which aggregate function (`min` or `max`) to apply when querying for the related model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:330
#: ./docs/9.x/eloquent-relationships.md:337
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's largest order.\n"
" */\n"
"public function largestOrder()\n"
"{\n"
"    return $this->hasOne(Order::class)->ofMany('price', 'max');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:340
#: ./docs/9.x/eloquent-relationships.md:348
#: ./docs/10.x/eloquent-relationships.md:352
#: ./docs/11.x/eloquent-relationships.md:399
#: ./docs/master/eloquent-relationships.md:352
msgctxt "P"
msgid "Because PostgreSQL does not support executing the `MAX` function against UUID columns, it is not currently possible to use one-of-many relationships in combination with PostgreSQL UUID columns."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:341
#: ./docs/11.x/eloquent-relationships.md:388
#: ./docs/master/eloquent-relationships.md:341
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's largest order.\n"
" */\n"
"public function largestOrder(): HasOne\n"
"{\n"
"    return $this->hasOne(Order::class)->ofMany('price', 'max');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:342
#: ./docs/9.x/eloquent-relationships.md:350
#: ./docs/10.x/eloquent-relationships.md:377
#: ./docs/11.x/eloquent-relationships.md:424
#: ./docs/master/eloquent-relationships.md:377
#~ msgctxt "P"
#~ msgid "<a name=\"advanced-has-one-of-many-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:343
#: ./docs/9.x/eloquent-relationships.md:351
msgctxt "H4"
msgid "Advanced Has One Of Many Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:345
msgctxt "P"
msgid "It is possible to construct more advanced \"has one of many\" relationships. For example, A `Product` model may have many associated `Price` models that are retained in the system even after new pricing is published. In addition, new pricing data for the product may be able to be published in advance to take effect at a future date via a `published_at` column."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:347
#: ./docs/9.x/eloquent-relationships.md:355
#: ./docs/10.x/eloquent-relationships.md:382
#: ./docs/11.x/eloquent-relationships.md:429
#: ./docs/master/eloquent-relationships.md:382
msgctxt "P"
msgid "So, in summary, we need to retrieve the latest published pricing where the published date is not in the future. In addition, if two prices have the same published date, we will prefer the price with the greatest ID. To accomplish this, we must pass an array to the `ofMany` method that contains the sortable columns which determine the latest price. In addition, a closure will be provided as the second argument to the `ofMany` method. This closure will be responsible for adding additional publish date constraints to the relationship query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:349
#: ./docs/9.x/eloquent-relationships.md:357
msgctxt "CODE: php"
msgid "/**\n"
" * Get the current pricing for the product.\n"
" */\n"
"public function currentPricing()\n"
"{\n"
"    return $this->hasOne(Price::class)->ofMany([\n"
"        'published_at' => 'max',\n"
"        'id' => 'max',\n"
"    ], function ($query) {\n"
"        $query->where('published_at', '<', now());\n"
"    });\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:353
#: ./docs/10.x/eloquent-relationships.md:380
#: ./docs/11.x/eloquent-relationships.md:427
#: ./docs/master/eloquent-relationships.md:380
msgctxt "P"
msgid "It is possible to construct more advanced \"has one of many\" relationships. For example, a `Product` model may have many associated `Price` models that are retained in the system even after new pricing is published. In addition, new pricing data for the product may be able to be published in advance to take effect at a future date via a `published_at` column."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:354
#: ./docs/11.x/eloquent-relationships.md:401
#: ./docs/master/eloquent-relationships.md:354
#~ msgctxt "P"
#~ msgid "<a name=\"converting-many-relationships-to-has-one-relationships\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-relationships.md:355
#: ./docs/11.x/eloquent-relationships.md:402
#: ./docs/master/eloquent-relationships.md:355
msgctxt "H4"
msgid "Converting \"Many\" Relationships to Has One Relationships"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:357
#: ./docs/11.x/eloquent-relationships.md:404
#: ./docs/master/eloquent-relationships.md:357
msgctxt "P"
msgid "Often, when retrieving a single model using the `latestOfMany`, `oldestOfMany`, or `ofMany` methods, you already have a \"has many\" relationship defined for the same model. For convenience, Laravel allows you to easily convert this relationship into a \"has one\" relationship by invoking the `one` method on the relationship:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:359
#: ./docs/11.x/eloquent-relationships.md:406
#: ./docs/master/eloquent-relationships.md:359
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's orders.\n"
" */\n"
"public function orders(): HasMany\n"
"{\n"
"    return $this->hasMany(Order::class);\n"
"}\n\n"
"/**\n"
" * Get the user's largest order.\n"
" */\n"
"public function largestOrder(): HasOne\n"
"{\n"
"    return $this->orders()->one()->ofMany('price', 'max');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:364
#: ./docs/9.x/eloquent-relationships.md:372
#: ./docs/10.x/eloquent-relationships.md:399
#: ./docs/11.x/eloquent-relationships.md:446
#: ./docs/master/eloquent-relationships.md:399
#~ msgctxt "P"
#~ msgid "<a name=\"has-one-through\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:365
#: ./docs/9.x/eloquent-relationships.md:373
#: ./docs/10.x/eloquent-relationships.md:400
#: ./docs/11.x/eloquent-relationships.md:447
#: ./docs/master/eloquent-relationships.md:400
msgctxt "H3"
msgid "Has One Through"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:367
#: ./docs/9.x/eloquent-relationships.md:375
#: ./docs/10.x/eloquent-relationships.md:402
#: ./docs/11.x/eloquent-relationships.md:449
#: ./docs/master/eloquent-relationships.md:402
msgctxt "P"
msgid "The \"has-one-through\" relationship defines a one-to-one relationship with another model. However, this relationship indicates that the declaring model can be matched with one instance of another model by proceeding *through* a third model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:369
#: ./docs/9.x/eloquent-relationships.md:377
#: ./docs/10.x/eloquent-relationships.md:404
#: ./docs/11.x/eloquent-relationships.md:451
#: ./docs/master/eloquent-relationships.md:404
msgctxt "P"
msgid "For example, in a vehicle repair shop application, each `Mechanic` model may be associated with one `Car` model, and each `Car` model may be associated with one `Owner` model. While the mechanic and the owner have no direct relationship within the database, the mechanic can access the owner *through* the `Car` model. Let's look at the tables necessary to define this relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:371
#: ./docs/9.x/eloquent-relationships.md:379
#: ./docs/10.x/eloquent-relationships.md:406
#: ./docs/11.x/eloquent-relationships.md:453
#: ./docs/master/eloquent-relationships.md:406
msgctxt "CODE"
msgid "mechanics\n"
"    id - integer\n"
"    name - string\n\n"
"cars\n"
"    id - integer\n"
"    model - string\n"
"    mechanic_id - integer\n\n"
"owners\n"
"    id - integer\n"
"    name - string\n"
"    car_id - integer"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:378
#: ./docs/11.x/eloquent-relationships.md:425
#: ./docs/master/eloquent-relationships.md:378
msgctxt "H4"
msgid "Advanced Has One of Many Relationships"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:384
#: ./docs/11.x/eloquent-relationships.md:431
#: ./docs/master/eloquent-relationships.md:384
msgctxt "CODE: php"
msgid "/**\n"
" * Get the current pricing for the product.\n"
" */\n"
"public function currentPricing(): HasOne\n"
"{\n"
"    return $this->hasOne(Price::class)->ofMany([\n"
"        'published_at' => 'max',\n"
"        'id' => 'max',\n"
"    ], function (Builder $query) {\n"
"        $query->where('published_at', '<', now());\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:385
#: ./docs/9.x/eloquent-relationships.md:393
#: ./docs/10.x/eloquent-relationships.md:420
#: ./docs/11.x/eloquent-relationships.md:467
#: ./docs/master/eloquent-relationships.md:420
msgctxt "P"
msgid "Now that we have examined the table structure for the relationship, let's define the relationship on the `Mechanic` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:387
#: ./docs/9.x/eloquent-relationships.md:395
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Mechanic extends Model\n"
"{\n"
"    /**\n"
"     * Get the car's owner.\n"
"     */\n"
"    public function carOwner()\n"
"    {\n"
"        return $this->hasOneThrough(Owner::class, Car::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:404
#: ./docs/9.x/eloquent-relationships.md:412
#: ./docs/10.x/eloquent-relationships.md:440
#: ./docs/11.x/eloquent-relationships.md:487
#: ./docs/master/eloquent-relationships.md:440
msgctxt "P"
msgid "The first argument passed to the `hasOneThrough` method is the name of the final model we wish to access, while the second argument is the name of the intermediate model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:406
#: ./docs/9.x/eloquent-relationships.md:424
#: ./docs/10.x/eloquent-relationships.md:452
#: ./docs/11.x/eloquent-relationships.md:499
#: ./docs/master/eloquent-relationships.md:452
#~ msgctxt "P"
#~ msgid "<a name=\"has-one-through-key-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:407
#: ./docs/8.x/eloquent-relationships.md:472
#: ./docs/8.x/eloquent-relationships.md:803
#: ./docs/9.x/eloquent-relationships.md:425
#: ./docs/9.x/eloquent-relationships.md:510
#: ./docs/9.x/eloquent-relationships.md:862
#: ./docs/10.x/eloquent-relationships.md:453
#: ./docs/10.x/eloquent-relationships.md:539
#: ./docs/10.x/eloquent-relationships.md:901
#: ./docs/11.x/eloquent-relationships.md:500
#: ./docs/11.x/eloquent-relationships.md:586
#: ./docs/11.x/eloquent-relationships.md:948
#: ./docs/master/eloquent-relationships.md:453
#: ./docs/master/eloquent-relationships.md:539
#: ./docs/master/eloquent-relationships.md:901
msgctxt "H4"
msgid "Key Conventions"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:409
#: ./docs/9.x/eloquent-relationships.md:427
#: ./docs/10.x/eloquent-relationships.md:455
#: ./docs/11.x/eloquent-relationships.md:502
#: ./docs/master/eloquent-relationships.md:455
msgctxt "P"
msgid "Typical Eloquent foreign key conventions will be used when performing the relationship's queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the `hasOneThrough` method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:411
#: ./docs/9.x/eloquent-relationships.md:429
msgctxt "CODE"
msgid "class Mechanic extends Model\n"
"{\n"
"    /**\n"
"     * Get the car's owner.\n"
"     */\n"
"    public function carOwner()\n"
"    {\n"
"        return $this->hasOneThrough(\n"
"            Owner::class,\n"
"            Car::class,\n"
"            'mechanic_id', // Foreign key on the cars table...\n"
"            'car_id', // Foreign key on the owners table...\n"
"            'id', // Local key on the mechanics table...\n"
"            'id' // Local key on the cars table...\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:414
#: ./docs/10.x/eloquent-relationships.md:442
#: ./docs/11.x/eloquent-relationships.md:489
#: ./docs/master/eloquent-relationships.md:442
msgctxt "P"
msgid "Or, if the relevant relationships have already been defined on all of the models involved in the relationship, you may fluently define a \"has-one-through\" relationship by invoking the `through` method and supplying the names of those relationships. For example, if the `Mechanic` model has a `cars` relationship and the `Car` model has an `owner` relationship, you may define a \"has-one-through\" relationship connecting the mechanic and the owner like so:"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:416
#: ./docs/9.x/eloquent-relationships.md:449
#: ./docs/10.x/eloquent-relationships.md:444
#: ./docs/10.x/eloquent-relationships.md:477
#: ./docs/11.x/eloquent-relationships.md:491
#: ./docs/11.x/eloquent-relationships.md:524
#: ./docs/master/eloquent-relationships.md:444
#: ./docs/master/eloquent-relationships.md:477
msgctxt "CODE: php"
msgid "// String based syntax...\n"
"return $this->through('cars')->has('owner');\n\n"
"// Dynamic syntax...\n"
"return $this->throughCars()->hasOwner();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:422
#: ./docs/11.x/eloquent-relationships.md:469
#: ./docs/master/eloquent-relationships.md:422
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough;\n\n"
"class Mechanic extends Model\n"
"{\n"
"    /**\n"
"     * Get the car's owner.\n"
"     */\n"
"    public function carOwner(): HasOneThrough\n"
"    {\n"
"        return $this->hasOneThrough(Owner::class, Car::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:429
#: ./docs/9.x/eloquent-relationships.md:457
#: ./docs/10.x/eloquent-relationships.md:485
#: ./docs/11.x/eloquent-relationships.md:532
#: ./docs/master/eloquent-relationships.md:485
#~ msgctxt "P"
#~ msgid "<a name=\"has-many-through\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:430
#: ./docs/9.x/eloquent-relationships.md:458
#: ./docs/10.x/eloquent-relationships.md:486
#: ./docs/11.x/eloquent-relationships.md:533
#: ./docs/master/eloquent-relationships.md:486
msgctxt "H3"
msgid "Has Many Through"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:432
#: ./docs/9.x/eloquent-relationships.md:460
#: ./docs/10.x/eloquent-relationships.md:488
#: ./docs/11.x/eloquent-relationships.md:535
#: ./docs/master/eloquent-relationships.md:488
msgctxt "P"
msgid "The \"has-many-through\" relationship provides a convenient way to access distant relations via an intermediate relation. For example, let's assume we are building a deployment platform like [Laravel Vapor](https://vapor.laravel.com). A `Project` model might access many `Deployment` models through an intermediate `Environment` model. Using this example, you could easily gather all deployments for a given project. Let's look at the tables required to define this relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:434
#: ./docs/9.x/eloquent-relationships.md:462
#: ./docs/10.x/eloquent-relationships.md:490
#: ./docs/11.x/eloquent-relationships.md:537
#: ./docs/master/eloquent-relationships.md:490
msgctxt "CODE"
msgid "projects\n"
"    id - integer\n"
"    name - string\n\n"
"environments\n"
"    id - integer\n"
"    project_id - integer\n"
"    name - string\n\n"
"deployments\n"
"    id - integer\n"
"    environment_id - integer\n"
"    commit_hash - string"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:447
#: ./docs/10.x/eloquent-relationships.md:475
#: ./docs/11.x/eloquent-relationships.md:522
#: ./docs/master/eloquent-relationships.md:475
msgctxt "P"
msgid "Or, as discussed earlier, if the relevant relationships have already been defined on all of the models involved in the relationship, you may fluently define a \"has-one-through\" relationship by invoking the `through` method and supplying the names of those relationships. This approach offers the advantage of reusing the key conventions already defined on the existing relationships:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:448
#: ./docs/9.x/eloquent-relationships.md:476
#: ./docs/10.x/eloquent-relationships.md:504
#: ./docs/11.x/eloquent-relationships.md:551
#: ./docs/master/eloquent-relationships.md:504
msgctxt "P"
msgid "Now that we have examined the table structure for the relationship, let's define the relationship on the `Project` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:450
#: ./docs/9.x/eloquent-relationships.md:478
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Project extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the deployments for the project.\n"
"     */\n"
"    public function deployments()\n"
"    {\n"
"        return $this->hasManyThrough(Deployment::class, Environment::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:457
#: ./docs/11.x/eloquent-relationships.md:504
#: ./docs/master/eloquent-relationships.md:457
msgctxt "CODE"
msgid "class Mechanic extends Model\n"
"{\n"
"    /**\n"
"     * Get the car's owner.\n"
"     */\n"
"    public function carOwner(): HasOneThrough\n"
"    {\n"
"        return $this->hasOneThrough(\n"
"            Owner::class,\n"
"            Car::class,\n"
"            'mechanic_id', // Foreign key on the cars table...\n"
"            'car_id', // Foreign key on the owners table...\n"
"            'id', // Local key on the mechanics table...\n"
"            'id' // Local key on the cars table...\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:467
#: ./docs/9.x/eloquent-relationships.md:495
#: ./docs/10.x/eloquent-relationships.md:524
#: ./docs/11.x/eloquent-relationships.md:571
#: ./docs/master/eloquent-relationships.md:524
msgctxt "P"
msgid "The first argument passed to the `hasManyThrough` method is the name of the final model we wish to access, while the second argument is the name of the intermediate model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:469
#: ./docs/9.x/eloquent-relationships.md:507
#: ./docs/10.x/eloquent-relationships.md:536
#: ./docs/11.x/eloquent-relationships.md:583
#: ./docs/master/eloquent-relationships.md:536
msgctxt "P"
msgid "Though the `Deployment` model's table does not contain a `project_id` column, the `hasManyThrough` relation provides access to a project's deployments via `$project->deployments`. To retrieve these models, Eloquent inspects the `project_id` column on the intermediate `Environment` model's table. After finding the relevant environment IDs, they are used to query the `Deployment` model's table."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:471
#: ./docs/9.x/eloquent-relationships.md:509
#: ./docs/10.x/eloquent-relationships.md:538
#: ./docs/11.x/eloquent-relationships.md:585
#: ./docs/master/eloquent-relationships.md:538
#~ msgctxt "P"
#~ msgid "<a name=\"has-many-through-key-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:474
#: ./docs/9.x/eloquent-relationships.md:512
#: ./docs/10.x/eloquent-relationships.md:541
#: ./docs/11.x/eloquent-relationships.md:588
#: ./docs/master/eloquent-relationships.md:541
msgctxt "P"
msgid "Typical Eloquent foreign key conventions will be used when performing the relationship's queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the `hasManyThrough` method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:476
#: ./docs/9.x/eloquent-relationships.md:514
msgctxt "CODE"
msgid "class Project extends Model\n"
"{\n"
"    public function deployments()\n"
"    {\n"
"        return $this->hasManyThrough(\n"
"            Deployment::class,\n"
"            Environment::class,\n"
"            'project_id', // Foreign key on the environments table...\n"
"            'environment_id', // Foreign key on the deployments table...\n"
"            'id', // Local key on the projects table...\n"
"            'id' // Local key on the environments table...\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:491
#: ./docs/9.x/eloquent-relationships.md:539
#: ./docs/10.x/eloquent-relationships.md:568
#: ./docs/11.x/eloquent-relationships.md:615
#: ./docs/master/eloquent-relationships.md:568
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:492
#: ./docs/8.x/eloquent-relationships.md:1823
#: ./docs/9.x/eloquent-relationships.md:540
#: ./docs/9.x/eloquent-relationships.md:1914
msgctxt "H2"
msgid "Many To Many Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:494
#: ./docs/9.x/eloquent-relationships.md:542
#: ./docs/10.x/eloquent-relationships.md:571
#: ./docs/11.x/eloquent-relationships.md:618
#: ./docs/master/eloquent-relationships.md:571
msgctxt "P"
msgid "Many-to-many relations are slightly more complicated than `hasOne` and `hasMany` relationships. An example of a many-to-many relationship is a user that has many roles and those roles are also shared by other users in the application. For example, a user may be assigned the role of \"Author\" and \"Editor\"; however, those roles may also be assigned to other users as well. So, a user has many roles and a role has many users."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:496
#: ./docs/9.x/eloquent-relationships.md:544
#: ./docs/10.x/eloquent-relationships.md:573
#: ./docs/11.x/eloquent-relationships.md:620
#: ./docs/master/eloquent-relationships.md:573
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-table-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:497
#: ./docs/8.x/eloquent-relationships.md:717
#: ./docs/8.x/eloquent-relationships.md:819
#: ./docs/8.x/eloquent-relationships.md:953
#: ./docs/9.x/eloquent-relationships.md:545
#: ./docs/9.x/eloquent-relationships.md:776
#: ./docs/9.x/eloquent-relationships.md:878
#: ./docs/9.x/eloquent-relationships.md:1013
#: ./docs/10.x/eloquent-relationships.md:574
#: ./docs/10.x/eloquent-relationships.md:808
#: ./docs/10.x/eloquent-relationships.md:917
#: ./docs/10.x/eloquent-relationships.md:1059
#: ./docs/11.x/eloquent-relationships.md:621
#: ./docs/11.x/eloquent-relationships.md:855
#: ./docs/11.x/eloquent-relationships.md:964
#: ./docs/11.x/eloquent-relationships.md:1146
#: ./docs/master/eloquent-relationships.md:574
#: ./docs/master/eloquent-relationships.md:808
#: ./docs/master/eloquent-relationships.md:917
#: ./docs/master/eloquent-relationships.md:1059
msgctxt "H4"
msgid "Table Structure"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:497
#: ./docs/10.x/eloquent-relationships.md:526
#: ./docs/11.x/eloquent-relationships.md:573
#: ./docs/master/eloquent-relationships.md:526
msgctxt "P"
msgid "Or, if the relevant relationships have already been defined on all of the models involved in the relationship, you may fluently define a \"has-many-through\" relationship by invoking the `through` method and supplying the names of those relationships. For example, if the `Project` model has a `environments` relationship and the `Environment` model has a `deployments` relationship, you may define a \"has-many-through\" relationship connecting the project and the deployments like so:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:499
#: ./docs/9.x/eloquent-relationships.md:547
#: ./docs/10.x/eloquent-relationships.md:576
#: ./docs/11.x/eloquent-relationships.md:623
#: ./docs/master/eloquent-relationships.md:576
msgctxt "P"
msgid "To define this relationship, three database tables are needed: `users`, `roles`, and `role_user`. The `role_user` table is derived from the alphabetical order of the related model names and contains `user_id` and `role_id` columns. This table is used as an intermediate table linking the users and roles."
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:499
#: ./docs/9.x/eloquent-relationships.md:531
#: ./docs/10.x/eloquent-relationships.md:528
#: ./docs/10.x/eloquent-relationships.md:560
#: ./docs/11.x/eloquent-relationships.md:575
#: ./docs/11.x/eloquent-relationships.md:607
#: ./docs/master/eloquent-relationships.md:528
#: ./docs/master/eloquent-relationships.md:560
msgctxt "CODE: php"
msgid "// String based syntax...\n"
"return $this->through('environments')->has('deployments');\n\n"
"// Dynamic syntax...\n"
"return $this->throughEnvironments()->hasDeployments();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:501
#: ./docs/9.x/eloquent-relationships.md:549
#: ./docs/10.x/eloquent-relationships.md:578
#: ./docs/11.x/eloquent-relationships.md:625
#: ./docs/master/eloquent-relationships.md:578
msgctxt "P"
msgid "Remember, since a role can belong to many users, we cannot simply place a `user_id` column on the `roles` table. This would mean that a role could only belong to a single user. In order to provide support for roles being assigned to multiple users, the `role_user` table is needed. We can summarize the relationship's table structure like so:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:503
#: ./docs/9.x/eloquent-relationships.md:551
#: ./docs/10.x/eloquent-relationships.md:580
#: ./docs/11.x/eloquent-relationships.md:627
#: ./docs/master/eloquent-relationships.md:580
msgctxt "CODE"
msgid "users\n"
"    id - integer\n"
"    name - string\n\n"
"roles\n"
"    id - integer\n"
"    name - string\n\n"
"role_user\n"
"    user_id - integer\n"
"    role_id - integer"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:506
#: ./docs/11.x/eloquent-relationships.md:553
#: ./docs/master/eloquent-relationships.md:506
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\n\n"
"class Project extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the deployments for the project.\n"
"     */\n"
"    public function deployments(): HasManyThrough\n"
"    {\n"
"        return $this->hasManyThrough(Deployment::class, Environment::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:515
#: ./docs/9.x/eloquent-relationships.md:563
#: ./docs/10.x/eloquent-relationships.md:592
#: ./docs/11.x/eloquent-relationships.md:639
#: ./docs/master/eloquent-relationships.md:592
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-model-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:516
#: ./docs/8.x/eloquent-relationships.md:738
#: ./docs/8.x/eloquent-relationships.md:840
#: ./docs/8.x/eloquent-relationships.md:977
#: ./docs/9.x/eloquent-relationships.md:564
#: ./docs/9.x/eloquent-relationships.md:797
#: ./docs/9.x/eloquent-relationships.md:899
#: ./docs/9.x/eloquent-relationships.md:1038
#: ./docs/10.x/eloquent-relationships.md:593
#: ./docs/10.x/eloquent-relationships.md:829
#: ./docs/10.x/eloquent-relationships.md:938
#: ./docs/10.x/eloquent-relationships.md:1084
#: ./docs/11.x/eloquent-relationships.md:640
#: ./docs/11.x/eloquent-relationships.md:876
#: ./docs/11.x/eloquent-relationships.md:985
#: ./docs/11.x/eloquent-relationships.md:1171
#: ./docs/master/eloquent-relationships.md:593
#: ./docs/master/eloquent-relationships.md:829
#: ./docs/master/eloquent-relationships.md:938
#: ./docs/master/eloquent-relationships.md:1084
msgctxt "H4"
msgid "Model Structure"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:518
#: ./docs/9.x/eloquent-relationships.md:566
#: ./docs/10.x/eloquent-relationships.md:595
#: ./docs/11.x/eloquent-relationships.md:642
#: ./docs/master/eloquent-relationships.md:595
msgctxt "P"
msgid "Many-to-many relationships are defined by writing a method that returns the result of the `belongsToMany` method. The `belongsToMany` method is provided by the `Illuminate\\Database\\Eloquent\\Model` base class that is used by all of your application's Eloquent models. For example, let's define a `roles` method on our `User` model. The first argument passed to this method is the name of the related model class:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:520
#: ./docs/9.x/eloquent-relationships.md:568
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The roles that belong to the user.\n"
"     */\n"
"    public function roles()\n"
"    {\n"
"        return $this->belongsToMany(Role::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:529
#: ./docs/10.x/eloquent-relationships.md:558
#: ./docs/11.x/eloquent-relationships.md:605
#: ./docs/master/eloquent-relationships.md:558
msgctxt "P"
msgid "Or, as discussed earlier, if the relevant relationships have already been defined on all of the models involved in the relationship, you may fluently define a \"has-many-through\" relationship by invoking the `through` method and supplying the names of those relationships. This approach offers the advantage of reusing the key conventions already defined on the existing relationships:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:537
#: ./docs/9.x/eloquent-relationships.md:585
#: ./docs/10.x/eloquent-relationships.md:615
#: ./docs/11.x/eloquent-relationships.md:662
#: ./docs/master/eloquent-relationships.md:615
msgctxt "P"
msgid "Once the relationship is defined, you may access the user's roles using the `roles` dynamic relationship property:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:539
#: ./docs/9.x/eloquent-relationships.md:587
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"foreach ($user->roles as $role) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:543
#: ./docs/11.x/eloquent-relationships.md:590
#: ./docs/master/eloquent-relationships.md:543
msgctxt "CODE"
msgid "class Project extends Model\n"
"{\n"
"    public function deployments(): HasManyThrough\n"
"    {\n"
"        return $this->hasManyThrough(\n"
"            Deployment::class,\n"
"            Environment::class,\n"
"            'project_id', // Foreign key on the environments table...\n"
"            'environment_id', // Foreign key on the deployments table...\n"
"            'id', // Local key on the projects table...\n"
"            'id' // Local key on the environments table...\n"
"        );\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:547
#: ./docs/9.x/eloquent-relationships.md:595
#: ./docs/10.x/eloquent-relationships.md:625
#: ./docs/11.x/eloquent-relationships.md:672
#: ./docs/master/eloquent-relationships.md:625
msgctxt "P"
msgid "Since all relationships also serve as query builders, you may add further constraints to the relationship query by calling the `roles` method and continuing to chain conditions onto the query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:549
#: ./docs/9.x/eloquent-relationships.md:597
#: ./docs/10.x/eloquent-relationships.md:627
#: ./docs/11.x/eloquent-relationships.md:674
#: ./docs/master/eloquent-relationships.md:627
msgctxt "CODE"
msgid "$roles = User::find(1)->roles()->orderBy('name')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:551
#: ./docs/9.x/eloquent-relationships.md:599
#: ./docs/10.x/eloquent-relationships.md:629
#: ./docs/11.x/eloquent-relationships.md:676
#: ./docs/master/eloquent-relationships.md:629
msgctxt "P"
msgid "To determine the table name of the relationship's intermediate table, Eloquent will join the two related model names in alphabetical order. However, you are free to override this convention. You may do so by passing a second argument to the `belongsToMany` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:553
#: ./docs/9.x/eloquent-relationships.md:601
#: ./docs/10.x/eloquent-relationships.md:631
#: ./docs/11.x/eloquent-relationships.md:678
#: ./docs/master/eloquent-relationships.md:631
msgctxt "CODE"
msgid "return $this->belongsToMany(Role::class, 'role_user');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:555
#: ./docs/9.x/eloquent-relationships.md:603
#: ./docs/10.x/eloquent-relationships.md:633
#: ./docs/11.x/eloquent-relationships.md:680
#: ./docs/master/eloquent-relationships.md:633
msgctxt "P"
msgid "In addition to customizing the name of the intermediate table, you may also customize the column names of the keys on the table by passing additional arguments to the `belongsToMany` method. The third argument is the foreign key name of the model on which you are defining the relationship, while the fourth argument is the foreign key name of the model that you are joining to:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:557
#: ./docs/9.x/eloquent-relationships.md:605
#: ./docs/10.x/eloquent-relationships.md:635
#: ./docs/11.x/eloquent-relationships.md:682
#: ./docs/master/eloquent-relationships.md:635
msgctxt "CODE"
msgid "return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:559
#: ./docs/9.x/eloquent-relationships.md:607
#: ./docs/10.x/eloquent-relationships.md:637
#: ./docs/11.x/eloquent-relationships.md:684
#: ./docs/master/eloquent-relationships.md:637
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-defining-the-inverse-of-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:562
#: ./docs/9.x/eloquent-relationships.md:610
#: ./docs/10.x/eloquent-relationships.md:640
#: ./docs/11.x/eloquent-relationships.md:687
#: ./docs/master/eloquent-relationships.md:640
msgctxt "P"
msgid "To define the \"inverse\" of a many-to-many relationship, you should define a method on the related model which also returns the result of the `belongsToMany` method. To complete our user / role example, let's define the `users` method on the `Role` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:564
#: ./docs/9.x/eloquent-relationships.md:612
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Role extends Model\n"
"{\n"
"    /**\n"
"     * The users that belong to the role.\n"
"     */\n"
"    public function users()\n"
"    {\n"
"        return $this->belongsToMany(User::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:569
#: ./docs/10.x/eloquent-relationships.md:1978
#: ./docs/11.x/eloquent-relationships.md:616
#: ./docs/11.x/eloquent-relationships.md:2068
#: ./docs/master/eloquent-relationships.md:569
#: ./docs/master/eloquent-relationships.md:1975
msgctxt "H2"
msgid "Many to Many Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:581
#: ./docs/9.x/eloquent-relationships.md:629
#: ./docs/10.x/eloquent-relationships.md:660
#: ./docs/11.x/eloquent-relationships.md:707
#: ./docs/master/eloquent-relationships.md:660
msgctxt "P"
msgid "As you can see, the relationship is defined exactly the same as its `User` model counterpart with the exception of referencing the `App\\Models\\User` model. Since we're reusing the `belongsToMany` method, all of the usual table and key customization options are available when defining the \"inverse\" of many-to-many relationships."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:583
#: ./docs/9.x/eloquent-relationships.md:631
#: ./docs/10.x/eloquent-relationships.md:662
#: ./docs/11.x/eloquent-relationships.md:709
#: ./docs/master/eloquent-relationships.md:662
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-intermediate-table-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:584
#: ./docs/9.x/eloquent-relationships.md:632
#: ./docs/10.x/eloquent-relationships.md:663
#: ./docs/11.x/eloquent-relationships.md:710
#: ./docs/master/eloquent-relationships.md:663
msgctxt "H3"
msgid "Retrieving Intermediate Table Columns"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:586
#: ./docs/9.x/eloquent-relationships.md:634
#: ./docs/10.x/eloquent-relationships.md:665
#: ./docs/11.x/eloquent-relationships.md:712
#: ./docs/master/eloquent-relationships.md:665
msgctxt "P"
msgid "As you have already learned, working with many-to-many relations requires the presence of an intermediate table. Eloquent provides some very helpful ways of interacting with this table. For example, let's assume our `User` model has many `Role` models that it is related to. After accessing this relationship, we may access the intermediate table using the `pivot` attribute on the models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:588
#: ./docs/9.x/eloquent-relationships.md:636
#: ./docs/10.x/eloquent-relationships.md:667
#: ./docs/11.x/eloquent-relationships.md:714
#: ./docs/master/eloquent-relationships.md:667
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"foreach ($user->roles as $role) {\n"
"    echo $role->pivot->created_at;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:596
#: ./docs/9.x/eloquent-relationships.md:644
#: ./docs/10.x/eloquent-relationships.md:675
#: ./docs/11.x/eloquent-relationships.md:722
#: ./docs/master/eloquent-relationships.md:675
msgctxt "P"
msgid "Notice that each `Role` model we retrieve is automatically assigned a `pivot` attribute. This attribute contains a model representing the intermediate table."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:597
#: ./docs/11.x/eloquent-relationships.md:644
#: ./docs/master/eloquent-relationships.md:597
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The roles that belong to the user.\n"
"     */\n"
"    public function roles(): BelongsToMany\n"
"    {\n"
"        return $this->belongsToMany(Role::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:598
#: ./docs/9.x/eloquent-relationships.md:646
#: ./docs/10.x/eloquent-relationships.md:677
#: ./docs/11.x/eloquent-relationships.md:724
#: ./docs/master/eloquent-relationships.md:677
msgctxt "P"
msgid "By default, only the model keys will be present on the `pivot` model. If your intermediate table contains extra attributes, you must specify them when defining the relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:600
#: ./docs/9.x/eloquent-relationships.md:648
#: ./docs/10.x/eloquent-relationships.md:679
#: ./docs/11.x/eloquent-relationships.md:726
#: ./docs/master/eloquent-relationships.md:679
msgctxt "CODE"
msgid "return $this->belongsToMany(Role::class)->withPivot('active', 'created_by');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:602
#: ./docs/9.x/eloquent-relationships.md:650
#: ./docs/10.x/eloquent-relationships.md:681
#: ./docs/11.x/eloquent-relationships.md:728
#: ./docs/master/eloquent-relationships.md:681
msgctxt "P"
msgid "If you would like your intermediate table to have `created_at` and `updated_at` timestamps that are automatically maintained by Eloquent, call the `withTimestamps` method when defining the relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:604
#: ./docs/9.x/eloquent-relationships.md:652
#: ./docs/10.x/eloquent-relationships.md:683
#: ./docs/11.x/eloquent-relationships.md:730
#: ./docs/master/eloquent-relationships.md:683
msgctxt "CODE"
msgid "return $this->belongsToMany(Role::class)->withTimestamps();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:606
#: ./docs/9.x/eloquent-relationships.md:655
#: ./docs/10.x/eloquent-relationships.md:686
#: ./docs/11.x/eloquent-relationships.md:733
#: ./docs/master/eloquent-relationships.md:686
msgctxt "P"
msgid "Intermediate tables that utilize Eloquent's automatically maintained timestamps are required to have both `created_at` and `updated_at` timestamp columns."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:608
#: ./docs/9.x/eloquent-relationships.md:657
#: ./docs/10.x/eloquent-relationships.md:688
#: ./docs/11.x/eloquent-relationships.md:735
#: ./docs/master/eloquent-relationships.md:688
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-pivot-attribute-name\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:609
#: ./docs/9.x/eloquent-relationships.md:658
msgctxt "H4"
msgid "Customizing The `pivot` Attribute Name"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:611
#: ./docs/9.x/eloquent-relationships.md:660
#: ./docs/10.x/eloquent-relationships.md:691
#: ./docs/11.x/eloquent-relationships.md:738
#: ./docs/master/eloquent-relationships.md:691
msgctxt "P"
msgid "As noted previously, attributes from the intermediate table may be accessed on models via the `pivot` attribute. However, you are free to customize the name of this attribute to better reflect its purpose within your application."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:613
#: ./docs/9.x/eloquent-relationships.md:662
#: ./docs/10.x/eloquent-relationships.md:693
#: ./docs/11.x/eloquent-relationships.md:740
#: ./docs/master/eloquent-relationships.md:693
msgctxt "P"
msgid "For example, if your application contains users that may subscribe to podcasts, you likely have a many-to-many relationship between users and podcasts. If this is the case, you may wish to rename your intermediate table attribute to `subscription` instead of `pivot`. This can be done using the `as` method when defining the relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:615
#: ./docs/9.x/eloquent-relationships.md:664
#: ./docs/10.x/eloquent-relationships.md:695
#: ./docs/11.x/eloquent-relationships.md:742
#: ./docs/master/eloquent-relationships.md:695
msgctxt "CODE"
msgid "return $this->belongsToMany(Podcast::class)\n"
"                ->as('subscription')\n"
"                ->withTimestamps();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:617
#: ./docs/11.x/eloquent-relationships.md:664
#: ./docs/master/eloquent-relationships.md:617
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"foreach ($user->roles as $role) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:619
#: ./docs/9.x/eloquent-relationships.md:668
#: ./docs/10.x/eloquent-relationships.md:699
#: ./docs/11.x/eloquent-relationships.md:746
#: ./docs/master/eloquent-relationships.md:699
msgctxt "P"
msgid "Once the custom intermediate table attribute has been specified, you may access the intermediate table data using the customized name:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:621
#: ./docs/9.x/eloquent-relationships.md:670
#: ./docs/10.x/eloquent-relationships.md:701
#: ./docs/11.x/eloquent-relationships.md:748
#: ./docs/master/eloquent-relationships.md:701
msgctxt "CODE"
msgid "$users = User::with('podcasts')->get();\n\n"
"foreach ($users->flatMap->podcasts as $podcast) {\n"
"    echo $podcast->subscription->created_at;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:627
#: ./docs/9.x/eloquent-relationships.md:676
#: ./docs/10.x/eloquent-relationships.md:707
#: ./docs/11.x/eloquent-relationships.md:754
#: ./docs/master/eloquent-relationships.md:707
#~ msgctxt "P"
#~ msgid "<a name=\"filtering-queries-via-intermediate-table-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:628
#: ./docs/9.x/eloquent-relationships.md:677
msgctxt "H3"
msgid "Filtering Queries Via Intermediate Table Columns"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:630
#: ./docs/9.x/eloquent-relationships.md:679
#: ./docs/10.x/eloquent-relationships.md:710
#: ./docs/11.x/eloquent-relationships.md:757
#: ./docs/master/eloquent-relationships.md:710
msgctxt "P"
msgid "You can also filter the results returned by `belongsToMany` relationship queries using the `wherePivot`, `wherePivotIn`, `wherePivotNotIn`, `wherePivotBetween`, `wherePivotNotBetween`, `wherePivotNull`, and `wherePivotNotNull` methods when defining the relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:632
#: ./docs/9.x/eloquent-relationships.md:681
#: ./docs/10.x/eloquent-relationships.md:712
#: ./docs/11.x/eloquent-relationships.md:759
#: ./docs/master/eloquent-relationships.md:712
msgctxt "CODE"
msgid "return $this->belongsToMany(Role::class)\n"
"                ->wherePivot('approved', 1);\n\n"
"return $this->belongsToMany(Role::class)\n"
"                ->wherePivotIn('priority', [1, 2]);\n\n"
"return $this->belongsToMany(Role::class)\n"
"                ->wherePivotNotIn('priority', [1, 2]);\n\n"
"return $this->belongsToMany(Podcast::class)\n"
"                ->as('subscriptions')\n"
"                ->wherePivotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);\n\n"
"return $this->belongsToMany(Podcast::class)\n"
"                ->as('subscriptions')\n"
"                ->wherePivotNotBetween('created_at', ['2020-01-01 00:00:00', '2020-12-31 00:00:00']);\n\n"
"return $this->belongsToMany(Podcast::class)\n"
"                ->as('subscriptions')\n"
"                ->wherePivotNull('expired_at');\n\n"
"return $this->belongsToMany(Podcast::class)\n"
"                ->as('subscriptions')\n"
"                ->wherePivotNotNull('expired_at');"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:642
#: ./docs/11.x/eloquent-relationships.md:689
#: ./docs/master/eloquent-relationships.md:642
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\n"
"class Role extends Model\n"
"{\n"
"    /**\n"
"     * The users that belong to the role.\n"
"     */\n"
"    public function users(): BelongsToMany\n"
"    {\n"
"        return $this->belongsToMany(User::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:657
#: ./docs/9.x/eloquent-relationships.md:715
#: ./docs/10.x/eloquent-relationships.md:746
#: ./docs/11.x/eloquent-relationships.md:793
#: ./docs/master/eloquent-relationships.md:746
#~ msgctxt "P"
#~ msgid "<a name=\"defining-custom-intermediate-table-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:658
#: ./docs/9.x/eloquent-relationships.md:716
#: ./docs/10.x/eloquent-relationships.md:747
#: ./docs/11.x/eloquent-relationships.md:794
#: ./docs/master/eloquent-relationships.md:747
msgctxt "H3"
msgid "Defining Custom Intermediate Table Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:660
msgctxt "P"
msgid "If you would like to define a custom model to represent the intermediate table of your many-to-many relationship, you may call the `using` method when defining the relationship. Custom pivot models give you the opportunity to define additional methods on the pivot model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:662
#: ./docs/9.x/eloquent-relationships.md:720
#: ./docs/10.x/eloquent-relationships.md:751
#: ./docs/11.x/eloquent-relationships.md:798
#: ./docs/master/eloquent-relationships.md:751
msgctxt "P"
msgid "Custom many-to-many pivot models should extend the `Illuminate\\Database\\Eloquent\\Relations\\Pivot` class while custom polymorphic many-to-many pivot models should extend the `Illuminate\\Database\\Eloquent\\Relations\\MorphPivot` class. For example, we may define a `Role` model which uses a custom `RoleUser` pivot model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:664
#: ./docs/9.x/eloquent-relationships.md:722
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Role extends Model\n"
"{\n"
"    /**\n"
"     * The users that belong to the role.\n"
"     */\n"
"    public function users()\n"
"    {\n"
"        return $this->belongsToMany(User::class)->using(RoleUser::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:681
#: ./docs/9.x/eloquent-relationships.md:739
#: ./docs/10.x/eloquent-relationships.md:771
#: ./docs/11.x/eloquent-relationships.md:818
#: ./docs/master/eloquent-relationships.md:771
msgctxt "P"
msgid "When defining the `RoleUser` model, you should extend the `Illuminate\\Database\\Eloquent\\Relations\\Pivot` class:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:683
#: ./docs/9.x/eloquent-relationships.md:741
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Relations\\Pivot;\n\n"
"class RoleUser extends Pivot\n"
"{\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:689
#: ./docs/11.x/eloquent-relationships.md:736
#: ./docs/master/eloquent-relationships.md:689
msgctxt "H4"
msgid "Customizing the `pivot` Attribute Name"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:694
#: ./docs/9.x/eloquent-relationships.md:753
#: ./docs/10.x/eloquent-relationships.md:785
#: ./docs/11.x/eloquent-relationships.md:832
#: ./docs/master/eloquent-relationships.md:785
msgctxt "P"
msgid "Pivot models may not use the `SoftDeletes` trait. If you need to soft delete pivot records consider converting your pivot model to an actual Eloquent model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:696
#: ./docs/9.x/eloquent-relationships.md:755
#: ./docs/10.x/eloquent-relationships.md:787
#: ./docs/11.x/eloquent-relationships.md:834
#: ./docs/master/eloquent-relationships.md:787
#~ msgctxt "P"
#~ msgid "<a name=\"custom-pivot-models-and-incrementing-ids\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:697
#: ./docs/9.x/eloquent-relationships.md:756
msgctxt "H4"
msgid "Custom Pivot Models And Incrementing IDs"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:699
#: ./docs/9.x/eloquent-relationships.md:758
#: ./docs/10.x/eloquent-relationships.md:790
#: ./docs/11.x/eloquent-relationships.md:837
#: ./docs/master/eloquent-relationships.md:790
msgctxt "P"
msgid "If you have defined a many-to-many relationship that uses a custom pivot model, and that pivot model has an auto-incrementing primary key, you should ensure your custom pivot model class defines an `incrementing` property that is set to `true`."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:701
#: ./docs/9.x/eloquent-relationships.md:760
#: ./docs/10.x/eloquent-relationships.md:792
#: ./docs/11.x/eloquent-relationships.md:839
#: ./docs/master/eloquent-relationships.md:792
msgctxt "CODE"
msgid "/**\n"
" * Indicates if the IDs are auto-incrementing.\n"
" *\n"
" * @var bool\n"
" */\n"
"public $incrementing = true;"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:706
#: ./docs/10.x/eloquent-relationships.md:737
#: ./docs/11.x/eloquent-relationships.md:784
#: ./docs/master/eloquent-relationships.md:737
#~ msgctxt "P"
#~ msgid "<a name=\"ordering-queries-via-intermediate-table-columns\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-relationships.md:707
msgctxt "H3"
msgid "Ordering Queries Via Intermediate Table Columns"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:708
#: ./docs/11.x/eloquent-relationships.md:755
#: ./docs/master/eloquent-relationships.md:708
msgctxt "H3"
msgid "Filtering Queries via Intermediate Table Columns"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:708
#: ./docs/9.x/eloquent-relationships.md:767
#: ./docs/10.x/eloquent-relationships.md:799
#: ./docs/11.x/eloquent-relationships.md:846
#: ./docs/master/eloquent-relationships.md:799
#~ msgctxt "P"
#~ msgid "<a name=\"polymorphic-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:709
#: ./docs/9.x/eloquent-relationships.md:768
#: ./docs/10.x/eloquent-relationships.md:800
#: ./docs/11.x/eloquent-relationships.md:847
#: ./docs/master/eloquent-relationships.md:800
msgctxt "H2"
msgid "Polymorphic Relationships"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:709
#: ./docs/10.x/eloquent-relationships.md:740
#: ./docs/11.x/eloquent-relationships.md:787
#: ./docs/master/eloquent-relationships.md:740
msgctxt "P"
msgid "You can order the results returned by `belongsToMany` relationship queries using the `orderByPivot` method. In the following example, we will retrieve all of the latest badges for the user:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:711
#: ./docs/9.x/eloquent-relationships.md:770
#: ./docs/10.x/eloquent-relationships.md:802
#: ./docs/11.x/eloquent-relationships.md:849
#: ./docs/master/eloquent-relationships.md:802
msgctxt "P"
msgid "A polymorphic relationship allows the child model to belong to more than one type of model using a single association. For example, imagine you are building an application that allows users to share blog posts and videos. In such an application, a `Comment` model might belong to both the `Post` and `Video` models."
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:711
#: ./docs/10.x/eloquent-relationships.md:742
#: ./docs/11.x/eloquent-relationships.md:789
#: ./docs/master/eloquent-relationships.md:742
msgctxt "CODE"
msgid "return $this->belongsToMany(Badge::class)\n"
"                ->where('rank', 'gold')\n"
"                ->orderByPivot('created_at', 'desc');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:713
#: ./docs/9.x/eloquent-relationships.md:772
#: ./docs/10.x/eloquent-relationships.md:804
#: ./docs/11.x/eloquent-relationships.md:851
#: ./docs/master/eloquent-relationships.md:804
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one-polymorphic-relations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:714
#: ./docs/9.x/eloquent-relationships.md:773
msgctxt "H3"
msgid "One To One (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:716
#: ./docs/9.x/eloquent-relationships.md:775
#: ./docs/10.x/eloquent-relationships.md:807
#: ./docs/11.x/eloquent-relationships.md:854
#: ./docs/master/eloquent-relationships.md:807
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one-polymorphic-table-structure\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-relationships.md:718
#: ./docs/10.x/eloquent-relationships.md:749
#: ./docs/11.x/eloquent-relationships.md:796
#: ./docs/master/eloquent-relationships.md:749
msgctxt "P"
msgid "If you would like to define a custom model to represent the intermediate table of your many-to-many relationship, you may call the `using` method when defining the relationship. Custom pivot models give you the opportunity to define additional behavior on the pivot model, such as methods and casts."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:719
#: ./docs/9.x/eloquent-relationships.md:778
#: ./docs/10.x/eloquent-relationships.md:810
#: ./docs/11.x/eloquent-relationships.md:857
#: ./docs/master/eloquent-relationships.md:810
msgctxt "P"
msgid "A one-to-one polymorphic relation is similar to a typical one-to-one relation; however, the child model can belong to more than one type of model using a single association. For example, a blog `Post` and a `User` may share a polymorphic relation to an `Image` model. Using a one-to-one polymorphic relation allows you to have a single table of unique images that may be associated with posts and users. First, let's examine the table structure:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:721
#: ./docs/9.x/eloquent-relationships.md:780
#: ./docs/10.x/eloquent-relationships.md:812
#: ./docs/11.x/eloquent-relationships.md:859
#: ./docs/master/eloquent-relationships.md:812
msgctxt "CODE"
msgid "posts\n"
"    id - integer\n"
"    name - string\n\n"
"users\n"
"    id - integer\n"
"    name - string\n\n"
"images\n"
"    id - integer\n"
"    url - string\n"
"    imageable_id - integer\n"
"    imageable_type - string"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:735
#: ./docs/9.x/eloquent-relationships.md:794
#: ./docs/10.x/eloquent-relationships.md:826
#: ./docs/11.x/eloquent-relationships.md:873
#: ./docs/master/eloquent-relationships.md:826
msgctxt "P"
msgid "Note the `imageable_id` and `imageable_type` columns on the `images` table. The `imageable_id` column will contain the ID value of the post or user, while the `imageable_type` column will contain the class name of the parent model. The `imageable_type` column is used by Eloquent to determine which \"type\" of parent model to return when accessing the `imageable` relation. In this case, the column would contain either `App\\Models\\Post` or `App\\Models\\User`."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:737
#: ./docs/9.x/eloquent-relationships.md:796
#: ./docs/10.x/eloquent-relationships.md:828
#: ./docs/11.x/eloquent-relationships.md:875
#: ./docs/master/eloquent-relationships.md:828
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one-polymorphic-model-structure\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-relationships.md:738
#: ./docs/11.x/eloquent-relationships.md:785
#: ./docs/master/eloquent-relationships.md:738
msgctxt "H3"
msgid "Ordering Queries via Intermediate Table Columns"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:740
#: ./docs/8.x/eloquent-relationships.md:842
#: ./docs/9.x/eloquent-relationships.md:799
#: ./docs/9.x/eloquent-relationships.md:901
#: ./docs/10.x/eloquent-relationships.md:831
#: ./docs/10.x/eloquent-relationships.md:940
#: ./docs/11.x/eloquent-relationships.md:878
#: ./docs/11.x/eloquent-relationships.md:987
#: ./docs/master/eloquent-relationships.md:831
#: ./docs/master/eloquent-relationships.md:940
msgctxt "P"
msgid "Next, let's examine the model definitions needed to build this relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:742
#: ./docs/9.x/eloquent-relationships.md:801
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Image extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent imageable model (user or post).\n"
"     */\n"
"    public function imageable()\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get the post's image.\n"
"     */\n"
"    public function image()\n"
"    {\n"
"        return $this->morphOne(Image::class, 'imageable');\n"
"    }\n"
"}\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's image.\n"
"     */\n"
"    public function image()\n"
"    {\n"
"        return $this->morphOne(Image::class, 'imageable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:753
#: ./docs/11.x/eloquent-relationships.md:800
#: ./docs/master/eloquent-relationships.md:753
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\n"
"class Role extends Model\n"
"{\n"
"    /**\n"
"     * The users that belong to the role.\n"
"     */\n"
"    public function users(): BelongsToMany\n"
"    {\n"
"        return $this->belongsToMany(User::class)->using(RoleUser::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:773
#: ./docs/11.x/eloquent-relationships.md:820
#: ./docs/master/eloquent-relationships.md:773
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Relations\\Pivot;\n\n"
"class RoleUser extends Pivot\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:781
#: ./docs/9.x/eloquent-relationships.md:840
#: ./docs/10.x/eloquent-relationships.md:879
#: ./docs/11.x/eloquent-relationships.md:926
#: ./docs/master/eloquent-relationships.md:879
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-one-polymorphic-retrieving-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:782
#: ./docs/8.x/eloquent-relationships.md:884
#: ./docs/8.x/eloquent-relationships.md:1033
#: ./docs/9.x/eloquent-relationships.md:841
#: ./docs/9.x/eloquent-relationships.md:943
#: ./docs/9.x/eloquent-relationships.md:1094
msgctxt "H4"
msgid "Retrieving The Relationship"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:784
#: ./docs/9.x/eloquent-relationships.md:843
#: ./docs/10.x/eloquent-relationships.md:882
#: ./docs/11.x/eloquent-relationships.md:929
#: ./docs/master/eloquent-relationships.md:882
msgctxt "P"
msgid "Once your database table and models are defined, you may access the relationships via your models. For example, to retrieve the image for a post, we can access the `image` dynamic relationship property:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:786
#: ./docs/9.x/eloquent-relationships.md:845
#: ./docs/10.x/eloquent-relationships.md:884
#: ./docs/11.x/eloquent-relationships.md:931
#: ./docs/master/eloquent-relationships.md:884
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"$image = $post->image;"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:788
#: ./docs/11.x/eloquent-relationships.md:835
#: ./docs/master/eloquent-relationships.md:788
msgctxt "H4"
msgid "Custom Pivot Models and Incrementing IDs"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:792
#: ./docs/9.x/eloquent-relationships.md:851
#: ./docs/10.x/eloquent-relationships.md:890
#: ./docs/11.x/eloquent-relationships.md:937
#: ./docs/master/eloquent-relationships.md:890
msgctxt "P"
msgid "You may retrieve the parent of the polymorphic model by accessing the name of the method that performs the call to `morphTo`. In this case, that is the `imageable` method on the `Image` model. So, we will access that method as a dynamic relationship property:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:794
#: ./docs/9.x/eloquent-relationships.md:853
#: ./docs/10.x/eloquent-relationships.md:892
#: ./docs/11.x/eloquent-relationships.md:939
#: ./docs/master/eloquent-relationships.md:892
msgctxt "CODE"
msgid "use App\\Models\\Image;\n\n"
"$image = Image::find(1);\n\n"
"$imageable = $image->imageable;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:800
#: ./docs/9.x/eloquent-relationships.md:859
#: ./docs/10.x/eloquent-relationships.md:898
#: ./docs/11.x/eloquent-relationships.md:945
#: ./docs/master/eloquent-relationships.md:898
msgctxt "P"
msgid "The `imageable` relation on the `Image` model will return either a `Post` or `User` instance, depending on which type of model owns the image."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:802
#: ./docs/9.x/eloquent-relationships.md:861
#: ./docs/10.x/eloquent-relationships.md:900
#: ./docs/11.x/eloquent-relationships.md:947
#: ./docs/master/eloquent-relationships.md:900
#~ msgctxt "P"
#~ msgid "<a name=\"morph-one-to-one-key-conventions\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-relationships.md:805
#: ./docs/11.x/eloquent-relationships.md:852
#: ./docs/master/eloquent-relationships.md:805
msgctxt "H3"
msgid "One to One (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:805
#: ./docs/9.x/eloquent-relationships.md:864
#: ./docs/10.x/eloquent-relationships.md:903
#: ./docs/11.x/eloquent-relationships.md:950
#: ./docs/master/eloquent-relationships.md:903
msgctxt "P"
msgid "If necessary, you may specify the name of the \"id\" and \"type\" columns utilized by your polymorphic child model. If you do so, ensure that you always pass the name of the relationship as the first argument to the `morphTo` method. Typically, this value should match the method name, so you may use PHP's `__FUNCTION__` constant:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:807
#: ./docs/9.x/eloquent-relationships.md:866
msgctxt "CODE"
msgid "/**\n"
" * Get the model that the image belongs to.\n"
" */\n"
"public function imageable()\n"
"{\n"
"    return $this->morphTo(__FUNCTION__, 'imageable_type', 'imageable_id');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:815
#: ./docs/9.x/eloquent-relationships.md:874
#: ./docs/10.x/eloquent-relationships.md:913
#: ./docs/11.x/eloquent-relationships.md:960
#: ./docs/master/eloquent-relationships.md:913
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many-polymorphic-relations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:816
#: ./docs/9.x/eloquent-relationships.md:875
msgctxt "H3"
msgid "One To Many (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:818
#: ./docs/9.x/eloquent-relationships.md:877
#: ./docs/10.x/eloquent-relationships.md:916
#: ./docs/11.x/eloquent-relationships.md:963
#: ./docs/master/eloquent-relationships.md:916
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many-polymorphic-table-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:821
#: ./docs/9.x/eloquent-relationships.md:880
#: ./docs/10.x/eloquent-relationships.md:919
#: ./docs/11.x/eloquent-relationships.md:966
#: ./docs/master/eloquent-relationships.md:919
msgctxt "P"
msgid "A one-to-many polymorphic relation is similar to a typical one-to-many relation; however, the child model can belong to more than one type of model using a single association. For example, imagine users of your application can \"comment\" on posts and videos. Using polymorphic relationships, you may use a single `comments` table to contain comments for both posts and videos. First, let's examine the table structure required to build this relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:823
#: ./docs/9.x/eloquent-relationships.md:882
#: ./docs/10.x/eloquent-relationships.md:921
#: ./docs/11.x/eloquent-relationships.md:968
#: ./docs/master/eloquent-relationships.md:921
msgctxt "CODE"
msgid "posts\n"
"    id - integer\n"
"    title - string\n"
"    body - text\n\n"
"videos\n"
"    id - integer\n"
"    title - string\n"
"    url - string\n\n"
"comments\n"
"    id - integer\n"
"    body - text\n"
"    commentable_id - integer\n"
"    commentable_type - string"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:833
#: ./docs/11.x/eloquent-relationships.md:880
#: ./docs/master/eloquent-relationships.md:833
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"class Image extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent imageable model (user or post).\n"
"     */\n"
"    public function imageable(): MorphTo\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get the post's image.\n"
"     */\n"
"    public function image(): MorphOne\n"
"    {\n"
"        return $this->morphOne(Image::class, 'imageable');\n"
"    }\n"
"}\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's image.\n"
"     */\n"
"    public function image(): MorphOne\n"
"    {\n"
"        return $this->morphOne(Image::class, 'imageable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:839
#: ./docs/9.x/eloquent-relationships.md:898
#: ./docs/10.x/eloquent-relationships.md:937
#: ./docs/11.x/eloquent-relationships.md:984
#: ./docs/master/eloquent-relationships.md:937
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many-polymorphic-model-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:844
#: ./docs/9.x/eloquent-relationships.md:903
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent commentable model (post or video).\n"
"     */\n"
"    public function commentable()\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the post's comments.\n"
"     */\n"
"    public function comments()\n"
"    {\n"
"        return $this->morphMany(Comment::class, 'commentable');\n"
"    }\n"
"}\n\n"
"class Video extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the video's comments.\n"
"     */\n"
"    public function comments()\n"
"    {\n"
"        return $this->morphMany(Comment::class, 'commentable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:880
#: ./docs/10.x/eloquent-relationships.md:989
#: ./docs/10.x/eloquent-relationships.md:1142
#: ./docs/11.x/eloquent-relationships.md:927
#: ./docs/11.x/eloquent-relationships.md:1036
#: ./docs/11.x/eloquent-relationships.md:1229
#: ./docs/master/eloquent-relationships.md:880
#: ./docs/master/eloquent-relationships.md:989
#: ./docs/master/eloquent-relationships.md:1142
msgctxt "H4"
msgid "Retrieving the Relationship"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:883
#: ./docs/9.x/eloquent-relationships.md:942
#: ./docs/10.x/eloquent-relationships.md:988
#: ./docs/11.x/eloquent-relationships.md:1035
#: ./docs/master/eloquent-relationships.md:988
#~ msgctxt "P"
#~ msgid "<a name=\"one-to-many-polymorphic-retrieving-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:886
#: ./docs/9.x/eloquent-relationships.md:945
#: ./docs/10.x/eloquent-relationships.md:991
#: ./docs/11.x/eloquent-relationships.md:1038
#: ./docs/master/eloquent-relationships.md:991
msgctxt "P"
msgid "Once your database table and models are defined, you may access the relationships via your model's dynamic relationship properties. For example, to access all of the comments for a post, we can use the `comments` dynamic property:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:888
#: ./docs/9.x/eloquent-relationships.md:947
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"foreach ($post->comments as $comment) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:896
#: ./docs/9.x/eloquent-relationships.md:955
#: ./docs/10.x/eloquent-relationships.md:1001
#: ./docs/11.x/eloquent-relationships.md:1048
#: ./docs/master/eloquent-relationships.md:1001
msgctxt "P"
msgid "You may also retrieve the parent of a polymorphic child model by accessing the name of the method that performs the call to `morphTo`. In this case, that is the `commentable` method on the `Comment` model. So, we will access that method as a dynamic relationship property in order to access the comment's parent model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:898
#: ./docs/9.x/eloquent-relationships.md:957
#: ./docs/10.x/eloquent-relationships.md:1003
#: ./docs/11.x/eloquent-relationships.md:1050
#: ./docs/master/eloquent-relationships.md:1003
msgctxt "CODE"
msgid "use App\\Models\\Comment;\n\n"
"$comment = Comment::find(1);\n\n"
"$commentable = $comment->commentable;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:904
#: ./docs/9.x/eloquent-relationships.md:963
#: ./docs/10.x/eloquent-relationships.md:1009
#: ./docs/11.x/eloquent-relationships.md:1056
#: ./docs/master/eloquent-relationships.md:1009
msgctxt "P"
msgid "The `commentable` relation on the `Comment` model will return either a `Post` or `Video` instance, depending on which type of model is the comment's parent."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:905
#: ./docs/11.x/eloquent-relationships.md:952
#: ./docs/master/eloquent-relationships.md:905
msgctxt "CODE"
msgid "/**\n"
" * Get the model that the image belongs to.\n"
" */\n"
"public function imageable(): MorphTo\n"
"{\n"
"    return $this->morphTo(__FUNCTION__, 'imageable_type', 'imageable_id');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:906
#: ./docs/9.x/eloquent-relationships.md:965
#: ./docs/10.x/eloquent-relationships.md:1011
#: ./docs/11.x/eloquent-relationships.md:1098
#: ./docs/master/eloquent-relationships.md:1011
#~ msgctxt "P"
#~ msgid "<a name=\"one-of-many-polymorphic-relations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:907
#: ./docs/9.x/eloquent-relationships.md:966
msgctxt "H3"
msgid "One Of Many (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:909
#: ./docs/9.x/eloquent-relationships.md:968
#: ./docs/10.x/eloquent-relationships.md:1014
#: ./docs/11.x/eloquent-relationships.md:1101
#: ./docs/master/eloquent-relationships.md:1014
msgctxt "P"
msgid "Sometimes a model may have many related models, yet you want to easily retrieve the \"latest\" or \"oldest\" related model of the relationship. For example, a `User` model may be related to many `Image` models, but you want to define a convenient way to interact with the most recent image the user has uploaded. You may accomplish this using the `morphOne` relationship type combined with the `ofMany` methods:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:911
#: ./docs/9.x/eloquent-relationships.md:970
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most recent image.\n"
" */\n"
"public function latestImage()\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->latestOfMany();\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:914
#: ./docs/11.x/eloquent-relationships.md:961
#: ./docs/master/eloquent-relationships.md:914
msgctxt "H3"
msgid "One to Many (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:923
#: ./docs/9.x/eloquent-relationships.md:982
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's oldest image.\n"
" */\n"
"public function oldestImage()\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->oldestOfMany();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:935
#: ./docs/9.x/eloquent-relationships.md:994
#: ./docs/10.x/eloquent-relationships.md:1040
#: ./docs/11.x/eloquent-relationships.md:1127
#: ./docs/master/eloquent-relationships.md:1040
msgctxt "P"
msgid "For example, using the `ofMany` method, you may retrieve the user's most \"liked\" image. The `ofMany` method accepts the sortable column as its first argument and which aggregate function (`min` or `max`) to apply when querying for the related model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:937
#: ./docs/9.x/eloquent-relationships.md:996
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most popular image.\n"
" */\n"
"public function bestImage()\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->ofMany('likes', 'max');\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:942
#: ./docs/11.x/eloquent-relationships.md:989
#: ./docs/master/eloquent-relationships.md:942
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent commentable model (post or video).\n"
"     */\n"
"    public function commentable(): MorphTo\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the post's comments.\n"
"     */\n"
"    public function comments(): MorphMany\n"
"    {\n"
"        return $this->morphMany(Comment::class, 'commentable');\n"
"    }\n"
"}\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\n\n"
"class Video extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the video's comments.\n"
"     */\n"
"    public function comments(): MorphMany\n"
"    {\n"
"        return $this->morphMany(Comment::class, 'commentable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:947
#: ./docs/9.x/eloquent-relationships.md:1007
#: ./docs/10.x/eloquent-relationships.md:1053
#: ./docs/11.x/eloquent-relationships.md:1140
#: ./docs/master/eloquent-relationships.md:1053
msgctxt "P"
msgid "It is possible to construct more advanced \"one of many\" relationships. For more information, please consult the [has one of many documentation](#advanced-has-one-of-many-relationships)."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:949
#: ./docs/9.x/eloquent-relationships.md:1009
#: ./docs/10.x/eloquent-relationships.md:1055
#: ./docs/11.x/eloquent-relationships.md:1142
#: ./docs/master/eloquent-relationships.md:1055
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-polymorphic-relations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:950
#: ./docs/9.x/eloquent-relationships.md:1010
msgctxt "H3"
msgid "Many To Many (Polymorphic)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:952
#: ./docs/9.x/eloquent-relationships.md:1012
#: ./docs/10.x/eloquent-relationships.md:1058
#: ./docs/11.x/eloquent-relationships.md:1145
#: ./docs/master/eloquent-relationships.md:1058
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-polymorphic-table-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:955
#: ./docs/9.x/eloquent-relationships.md:1015
#: ./docs/10.x/eloquent-relationships.md:1061
#: ./docs/11.x/eloquent-relationships.md:1148
#: ./docs/master/eloquent-relationships.md:1061
msgctxt "P"
msgid "Many-to-many polymorphic relations are slightly more complicated than \"morph one\" and \"morph many\" relationships. For example, a `Post` model and `Video` model could share a polymorphic relation to a `Tag` model. Using a many-to-many polymorphic relation in this situation would allow your application to have a single table of unique tags that may be associated with posts or videos. First, let's examine the table structure required to build this relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:957
#: ./docs/9.x/eloquent-relationships.md:1017
#: ./docs/10.x/eloquent-relationships.md:1063
#: ./docs/11.x/eloquent-relationships.md:1150
#: ./docs/master/eloquent-relationships.md:1063
msgctxt "CODE"
msgid "posts\n"
"    id - integer\n"
"    name - string\n\n"
"videos\n"
"    id - integer\n"
"    name - string\n\n"
"tags\n"
"    id - integer\n"
"    name - string\n\n"
"taggables\n"
"    tag_id - integer\n"
"    taggable_id - integer\n"
"    taggable_type - string"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:974
#: ./docs/9.x/eloquent-relationships.md:1035
#: ./docs/10.x/eloquent-relationships.md:1081
#: ./docs/11.x/eloquent-relationships.md:1168
#: ./docs/master/eloquent-relationships.md:1081
msgctxt "P"
msgid "Before diving into polymorphic many-to-many relationships, you may benefit from reading the documentation on typical [many-to-many relationships](#many-to-many)."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:976
#: ./docs/9.x/eloquent-relationships.md:1037
#: ./docs/10.x/eloquent-relationships.md:1083
#: ./docs/11.x/eloquent-relationships.md:1170
#: ./docs/master/eloquent-relationships.md:1083
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-polymorphic-model-structure\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:979
#: ./docs/9.x/eloquent-relationships.md:1040
#: ./docs/10.x/eloquent-relationships.md:1086
#: ./docs/11.x/eloquent-relationships.md:1173
#: ./docs/master/eloquent-relationships.md:1086
msgctxt "P"
msgid "Next, we're ready to define the relationships on the models. The `Post` and `Video` models will both contain a `tags` method that calls the `morphToMany` method provided by the base Eloquent model class."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:981
#: ./docs/9.x/eloquent-relationships.md:1042
#: ./docs/10.x/eloquent-relationships.md:1088
#: ./docs/11.x/eloquent-relationships.md:1175
#: ./docs/master/eloquent-relationships.md:1088
msgctxt "P"
msgid "The `morphToMany` method accepts the name of the related model as well as the \"relationship name\". Based on the name we assigned to our intermediate table name and the keys it contains, we will refer to the relationship as \"taggable\":"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:983
#: ./docs/9.x/eloquent-relationships.md:1044
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the tags for the post.\n"
"     */\n"
"    public function tags()\n"
"    {\n"
"        return $this->morphToMany(Tag::class, 'taggable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:993
#: ./docs/11.x/eloquent-relationships.md:1040
#: ./docs/master/eloquent-relationships.md:993
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"foreach ($post->comments as $comment) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1000
#: ./docs/9.x/eloquent-relationships.md:1061
#: ./docs/10.x/eloquent-relationships.md:1108
#: ./docs/11.x/eloquent-relationships.md:1195
#: ./docs/master/eloquent-relationships.md:1108
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-polymorphic-defining-the-inverse-of-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1003
#: ./docs/9.x/eloquent-relationships.md:1064
#: ./docs/10.x/eloquent-relationships.md:1111
#: ./docs/11.x/eloquent-relationships.md:1198
#: ./docs/master/eloquent-relationships.md:1111
msgctxt "P"
msgid "Next, on the `Tag` model, you should define a method for each of its possible parent models. So, in this example, we will define a `posts` method and a `videos` method. Both of these methods should return the result of the `morphedByMany` method."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1005
#: ./docs/9.x/eloquent-relationships.md:1066
#: ./docs/10.x/eloquent-relationships.md:1113
#: ./docs/11.x/eloquent-relationships.md:1200
#: ./docs/master/eloquent-relationships.md:1113
msgctxt "P"
msgid "The `morphedByMany` method accepts the name of the related model as well as the \"relationship name\". Based on the name we assigned to our intermediate table name and the keys it contains, we will refer to the relationship as \"taggable\":"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1007
#: ./docs/9.x/eloquent-relationships.md:1068
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Tag extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the posts that are assigned this tag.\n"
"     */\n"
"    public function posts()\n"
"    {\n"
"        return $this->morphedByMany(Post::class, 'taggable');\n"
"    }\n\n"
"    /**\n"
"     * Get all of the videos that are assigned this tag.\n"
"     */\n"
"    public function videos()\n"
"    {\n"
"        return $this->morphedByMany(Video::class, 'taggable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1012
#: ./docs/11.x/eloquent-relationships.md:1099
#: ./docs/master/eloquent-relationships.md:1012
msgctxt "H3"
msgid "One of Many (Polymorphic)"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1016
#: ./docs/11.x/eloquent-relationships.md:1103
#: ./docs/master/eloquent-relationships.md:1016
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most recent image.\n"
" */\n"
"public function latestImage(): MorphOne\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->latestOfMany();\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1028
#: ./docs/11.x/eloquent-relationships.md:1115
#: ./docs/master/eloquent-relationships.md:1028
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's oldest image.\n"
" */\n"
"public function oldestImage(): MorphOne\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->oldestOfMany();\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1032
#: ./docs/9.x/eloquent-relationships.md:1093
#: ./docs/10.x/eloquent-relationships.md:1141
#: ./docs/11.x/eloquent-relationships.md:1228
#: ./docs/master/eloquent-relationships.md:1141
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-polymorphic-retrieving-the-relationship\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1035
#: ./docs/9.x/eloquent-relationships.md:1096
#: ./docs/10.x/eloquent-relationships.md:1144
#: ./docs/11.x/eloquent-relationships.md:1231
#: ./docs/master/eloquent-relationships.md:1144
msgctxt "P"
msgid "Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the tags for a post, you may use the `tags` dynamic relationship property:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1037
#: ./docs/9.x/eloquent-relationships.md:1098
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"foreach ($post->tags as $tag) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1042
#: ./docs/11.x/eloquent-relationships.md:1129
#: ./docs/master/eloquent-relationships.md:1042
msgctxt "CODE: php"
msgid "/**\n"
" * Get the user's most popular image.\n"
" */\n"
"public function bestImage(): MorphOne\n"
"{\n"
"    return $this->morphOne(Image::class, 'imageable')->ofMany('likes', 'max');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1045
#: ./docs/9.x/eloquent-relationships.md:1106
#: ./docs/10.x/eloquent-relationships.md:1154
#: ./docs/11.x/eloquent-relationships.md:1241
#: ./docs/master/eloquent-relationships.md:1154
msgctxt "P"
msgid "You may retrieve the parent of a polymorphic relation from the polymorphic child model by accessing the name of the method that performs the call to `morphedByMany`. In this case, that is the `posts` or `videos` methods on the `Tag` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1047
#: ./docs/9.x/eloquent-relationships.md:1108
msgctxt "CODE"
msgid "use App\\Models\\Tag;\n\n"
"$tag = Tag::find(1);\n\n"
"foreach ($tag->posts as $post) {\n"
"    //\n"
"}\n\n"
"foreach ($tag->videos as $video) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1056
#: ./docs/11.x/eloquent-relationships.md:1143
#: ./docs/master/eloquent-relationships.md:1056
msgctxt "H3"
msgid "Many to Many (Polymorphic)"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1058
#~ msgctxt "P"
#~ msgid "<a name=\"polymorphic-automatically-hydrating-parent-models-on-children\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1059
#: ./docs/9.x/eloquent-relationships.md:1120
#: ./docs/10.x/eloquent-relationships.md:1168
#: ./docs/11.x/eloquent-relationships.md:1255
#: ./docs/master/eloquent-relationships.md:1168
#~ msgctxt "P"
#~ msgid "<a name=\"custom-polymorphic-types\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1060
#: ./docs/9.x/eloquent-relationships.md:1121
#: ./docs/10.x/eloquent-relationships.md:1169
#: ./docs/11.x/eloquent-relationships.md:1256
#: ./docs/master/eloquent-relationships.md:1169
msgctxt "H3"
msgid "Custom Polymorphic Types"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1062
#: ./docs/9.x/eloquent-relationships.md:1123
#: ./docs/10.x/eloquent-relationships.md:1171
#: ./docs/11.x/eloquent-relationships.md:1258
#: ./docs/master/eloquent-relationships.md:1171
msgctxt "P"
msgid "By default, Laravel will use the fully qualified class name to store the \"type\" of the related model. For instance, given the one-to-many relationship example above where a `Comment` model may belong to a `Post` or a `Video` model, the default `commentable_type` would be either `App\\Models\\Post` or `App\\Models\\Video`, respectively. However, you may wish to decouple these values from your application's internal structure."
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1063
msgctxt "CODE: php"
msgid "$posts = Post::with('comments')->get();\n\n"
"foreach ($posts as $post) {\n"
"    foreach ($post->comments as $comment) {\n"
"        echo $comment->commentable->title;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1064
#: ./docs/9.x/eloquent-relationships.md:1125
#: ./docs/10.x/eloquent-relationships.md:1173
#: ./docs/11.x/eloquent-relationships.md:1260
#: ./docs/master/eloquent-relationships.md:1173
msgctxt "P"
msgid "For example, instead of using the model names as the \"type\", we may use simple strings such as `post` and `video`. By doing so, the polymorphic \"type\" column values in our database will remain valid even if the models are renamed:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1066
#: ./docs/9.x/eloquent-relationships.md:1127
#: ./docs/10.x/eloquent-relationships.md:1175
#: ./docs/11.x/eloquent-relationships.md:1262
#: ./docs/master/eloquent-relationships.md:1175
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Relations\\Relation;\n\n"
"Relation::enforceMorphMap([\n"
"    'post' => 'App\\Models\\Post',\n"
"    'video' => 'App\\Models\\Video',\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1073
#: ./docs/9.x/eloquent-relationships.md:1134
#: ./docs/10.x/eloquent-relationships.md:1182
#: ./docs/11.x/eloquent-relationships.md:1269
#: ./docs/master/eloquent-relationships.md:1182
msgctxt "P"
msgid "You may call the `enforceMorphMap` method in the `boot` method of your `App\\Providers\\AppServiceProvider` class or create a separate service provider if you wish."
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1075
msgctxt "P"
msgid "If you would like Eloquent to automatically hydrate parent models onto their children, you may invoke the `chaperone` method when defining a `morphMany` relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1075
#: ./docs/9.x/eloquent-relationships.md:1136
#: ./docs/10.x/eloquent-relationships.md:1184
#: ./docs/11.x/eloquent-relationships.md:1271
#: ./docs/master/eloquent-relationships.md:1184
msgctxt "P"
msgid "You may determine the morph alias of a given model at runtime using the model's `getMorphClass` method. Conversely, you may determine the fully-qualified class name associated with a morph alias using the `Relation::getMorphedModel` method:"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1077
msgctxt "CODE"
msgid "class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the post's comments.\n"
"     */\n"
"    public function comments(): MorphMany\n"
"    {\n"
"        return $this->morphMany(Comment::class, 'commentable')->chaperone();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1077
#: ./docs/9.x/eloquent-relationships.md:1138
#: ./docs/10.x/eloquent-relationships.md:1186
#: ./docs/11.x/eloquent-relationships.md:1273
#: ./docs/master/eloquent-relationships.md:1186
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Relations\\Relation;\n\n"
"$alias = $post->getMorphClass();\n\n"
"$class = Relation::getMorphedModel($alias);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1083
#: ./docs/9.x/eloquent-relationships.md:1145
#: ./docs/10.x/eloquent-relationships.md:1193
#: ./docs/11.x/eloquent-relationships.md:1280
#: ./docs/master/eloquent-relationships.md:1193
msgctxt "P"
msgid "When adding a \"morph map\" to your existing application, every morphable `*_type` column value in your database that still contains a fully-qualified class will need to be converted to its \"map\" name."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1085
#: ./docs/9.x/eloquent-relationships.md:1147
#: ./docs/10.x/eloquent-relationships.md:1195
#: ./docs/11.x/eloquent-relationships.md:1282
#: ./docs/master/eloquent-relationships.md:1195
#~ msgctxt "P"
#~ msgid "<a name=\"dynamic-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1086
#: ./docs/9.x/eloquent-relationships.md:1148
#: ./docs/10.x/eloquent-relationships.md:1196
#: ./docs/11.x/eloquent-relationships.md:1283
#: ./docs/master/eloquent-relationships.md:1196
msgctxt "H3"
msgid "Dynamic Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1088
#: ./docs/9.x/eloquent-relationships.md:1150
#: ./docs/10.x/eloquent-relationships.md:1198
#: ./docs/11.x/eloquent-relationships.md:1285
#: ./docs/master/eloquent-relationships.md:1198
msgctxt "P"
msgid "You may use the `resolveRelationUsing` method to define relations between Eloquent models at runtime. While not typically recommended for normal application development, this may occasionally be useful when developing Laravel packages."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1090
#: ./docs/11.x/eloquent-relationships.md:1177
#: ./docs/master/eloquent-relationships.md:1090
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\n"
"class Post extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the tags for the post.\n"
"     */\n"
"    public function tags(): MorphToMany\n"
"    {\n"
"        return $this->morphToMany(Tag::class, 'taggable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1090
#: ./docs/9.x/eloquent-relationships.md:1152
#: ./docs/10.x/eloquent-relationships.md:1200
#: ./docs/11.x/eloquent-relationships.md:1287
#: ./docs/master/eloquent-relationships.md:1200
msgctxt "P"
msgid "The `resolveRelationUsing` method accepts the desired relationship name as its first argument. The second argument passed to the method should be a closure that accepts the model instance and returns a valid Eloquent relationship definition. Typically, you should configure dynamic relationships within the boot method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1092
#: ./docs/9.x/eloquent-relationships.md:1154
msgctxt "CODE"
msgid "use App\\Models\\Order;\n"
"use App\\Models\\Customer;\n\n"
"Order::resolveRelationUsing('customer', function ($orderModel) {\n"
"    return $orderModel->belongsTo(Customer::class, 'customer_id');\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1099
#: ./docs/9.x/eloquent-relationships.md:1162
#: ./docs/10.x/eloquent-relationships.md:1210
#: ./docs/11.x/eloquent-relationships.md:1297
#: ./docs/master/eloquent-relationships.md:1210
msgctxt "P"
msgid "When defining dynamic relationships, always provide explicit key name arguments to the Eloquent relationship methods."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1101
#: ./docs/9.x/eloquent-relationships.md:1164
#: ./docs/10.x/eloquent-relationships.md:1212
#: ./docs/11.x/eloquent-relationships.md:1299
#: ./docs/master/eloquent-relationships.md:1212
#~ msgctxt "P"
#~ msgid "<a name=\"querying-relations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1102
#: ./docs/9.x/eloquent-relationships.md:1165
#: ./docs/10.x/eloquent-relationships.md:1213
#: ./docs/11.x/eloquent-relationships.md:1300
#: ./docs/master/eloquent-relationships.md:1213
msgctxt "H2"
msgid "Querying Relations"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1104
#: ./docs/9.x/eloquent-relationships.md:1167
#: ./docs/10.x/eloquent-relationships.md:1215
#: ./docs/11.x/eloquent-relationships.md:1302
#: ./docs/master/eloquent-relationships.md:1215
msgctxt "P"
msgid "Since all Eloquent relationships are defined via methods, you may call those methods to obtain an instance of the relationship without actually executing a query to load the related models. In addition, all types of Eloquent relationships also serve as [query builders](/docs/{{version}}/queries), allowing you to continue to chain constraints onto the relationship query before finally executing the SQL query against your database."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1106
#: ./docs/9.x/eloquent-relationships.md:1169
#: ./docs/10.x/eloquent-relationships.md:1217
#: ./docs/11.x/eloquent-relationships.md:1304
#: ./docs/master/eloquent-relationships.md:1217
msgctxt "P"
msgid "For example, imagine a blog application in which a `User` model has many associated `Post` models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1108
#: ./docs/9.x/eloquent-relationships.md:1171
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the posts for the user.\n"
"     */\n"
"    public function posts()\n"
"    {\n"
"        return $this->hasMany(Post::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1115
#: ./docs/11.x/eloquent-relationships.md:1202
#: ./docs/master/eloquent-relationships.md:1115
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\n\n"
"class Tag extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the posts that are assigned this tag.\n"
"     */\n"
"    public function posts(): MorphToMany\n"
"    {\n"
"        return $this->morphedByMany(Post::class, 'taggable');\n"
"    }\n\n"
"    /**\n"
"     * Get all of the videos that are assigned this tag.\n"
"     */\n"
"    public function videos(): MorphToMany\n"
"    {\n"
"        return $this->morphedByMany(Video::class, 'taggable');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1125
#: ./docs/9.x/eloquent-relationships.md:1188
#: ./docs/10.x/eloquent-relationships.md:1237
#: ./docs/11.x/eloquent-relationships.md:1324
#: ./docs/master/eloquent-relationships.md:1237
msgctxt "P"
msgid "You may query the `posts` relationship and add additional constraints to the relationship like so:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1127
#: ./docs/9.x/eloquent-relationships.md:1190
#: ./docs/10.x/eloquent-relationships.md:1239
#: ./docs/11.x/eloquent-relationships.md:1326
#: ./docs/master/eloquent-relationships.md:1239
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->posts()->where('active', 1)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1133
#: ./docs/9.x/eloquent-relationships.md:1196
#: ./docs/10.x/eloquent-relationships.md:1245
#: ./docs/11.x/eloquent-relationships.md:1332
#: ./docs/master/eloquent-relationships.md:1245
msgctxt "P"
msgid "You are able to use any of the Laravel [query builder's](/docs/{{version}}/queries) methods on the relationship, so be sure to explore the query builder documentation to learn about all of the methods that are available to you."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1135
#: ./docs/9.x/eloquent-relationships.md:1198
#: ./docs/10.x/eloquent-relationships.md:1247
#: ./docs/11.x/eloquent-relationships.md:1334
#: ./docs/master/eloquent-relationships.md:1247
#~ msgctxt "P"
#~ msgid "<a name=\"chaining-orwhere-clauses-after-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1136
#: ./docs/9.x/eloquent-relationships.md:1199
#: ./docs/10.x/eloquent-relationships.md:1248
#: ./docs/11.x/eloquent-relationships.md:1335
#: ./docs/master/eloquent-relationships.md:1248
msgctxt "H4"
msgid "Chaining `orWhere` Clauses After Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1138
#: ./docs/9.x/eloquent-relationships.md:1201
#: ./docs/10.x/eloquent-relationships.md:1250
#: ./docs/11.x/eloquent-relationships.md:1337
#: ./docs/master/eloquent-relationships.md:1250
msgctxt "P"
msgid "As demonstrated in the example above, you are free to add additional constraints to relationships when querying them. However, use caution when chaining `orWhere` clauses onto a relationship, as the `orWhere` clauses will be logically grouped at the same level as the relationship constraint:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1140
#: ./docs/9.x/eloquent-relationships.md:1203
#: ./docs/10.x/eloquent-relationships.md:1252
#: ./docs/11.x/eloquent-relationships.md:1339
#: ./docs/master/eloquent-relationships.md:1252
msgctxt "CODE"
msgid "$user->posts()\n"
"        ->where('active', 1)\n"
"        ->orWhere('votes', '>=', 100)\n"
"        ->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1145
#: ./docs/9.x/eloquent-relationships.md:1208
msgctxt "P"
msgid "The example above will generate the following SQL. As you can see, the `or` clause instructs the query to return *any* user with greater than 100 votes. The query is no longer constrained to a specific user:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1146
#: ./docs/11.x/eloquent-relationships.md:1233
#: ./docs/master/eloquent-relationships.md:1146
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"foreach ($post->tags as $tag) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1147
#: ./docs/9.x/eloquent-relationships.md:1210
#: ./docs/10.x/eloquent-relationships.md:1259
#: ./docs/11.x/eloquent-relationships.md:1346
#: ./docs/master/eloquent-relationships.md:1259
msgctxt "CODE: sql"
msgid "select *\n"
"from posts\n"
"where user_id = ? and active = 1 or votes >= 100"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1153
#: ./docs/9.x/eloquent-relationships.md:1216
#: ./docs/10.x/eloquent-relationships.md:1265
#: ./docs/11.x/eloquent-relationships.md:1352
#: ./docs/master/eloquent-relationships.md:1265
msgctxt "P"
msgid "In most situations, you should use [logical groups](/docs/{{version}}/queries#logical-grouping) to group the conditional checks between parentheses:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1155
#: ./docs/9.x/eloquent-relationships.md:1218
#: ./docs/10.x/eloquent-relationships.md:1267
#: ./docs/11.x/eloquent-relationships.md:1354
#: ./docs/master/eloquent-relationships.md:1267
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$user->posts()\n"
"        ->where(function (Builder $query) {\n"
"            return $query->where('active', 1)\n"
"                         ->orWhere('votes', '>=', 100);\n"
"        })\n"
"        ->get();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1156
#: ./docs/11.x/eloquent-relationships.md:1243
#: ./docs/master/eloquent-relationships.md:1156
msgctxt "CODE"
msgid "use App\\Models\\Tag;\n\n"
"$tag = Tag::find(1);\n\n"
"foreach ($tag->posts as $post) {\n"
"    // ...\n"
"}\n\n"
"foreach ($tag->videos as $video) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1164
#: ./docs/9.x/eloquent-relationships.md:1227
#: ./docs/10.x/eloquent-relationships.md:1276
#: ./docs/11.x/eloquent-relationships.md:1363
#: ./docs/master/eloquent-relationships.md:1276
msgctxt "P"
msgid "The example above will produce the following SQL. Note that the logical grouping has properly grouped the constraints and the query remains constrained to a specific user:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1166
#: ./docs/9.x/eloquent-relationships.md:1229
#: ./docs/10.x/eloquent-relationships.md:1278
#: ./docs/11.x/eloquent-relationships.md:1365
#: ./docs/master/eloquent-relationships.md:1278
msgctxt "CODE: sql"
msgid "select *\n"
"from posts\n"
"where user_id = ? and (active = 1 or votes >= 100)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1172
#: ./docs/9.x/eloquent-relationships.md:1235
#: ./docs/10.x/eloquent-relationships.md:1284
#: ./docs/11.x/eloquent-relationships.md:1371
#: ./docs/master/eloquent-relationships.md:1284
#~ msgctxt "P"
#~ msgid "<a name=\"relationship-methods-vs-dynamic-properties\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1173
#: ./docs/9.x/eloquent-relationships.md:1236
msgctxt "H3"
msgid "Relationship Methods Vs. Dynamic Properties"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1175
#: ./docs/9.x/eloquent-relationships.md:1238
#: ./docs/10.x/eloquent-relationships.md:1287
#: ./docs/11.x/eloquent-relationships.md:1374
#: ./docs/master/eloquent-relationships.md:1287
msgctxt "P"
msgid "If you do not need to add additional constraints to an Eloquent relationship query, you may access the relationship as if it were a property. For example, continuing to use our `User` and `Post` example models, we may access all of a user's posts like so:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1177
#: ./docs/9.x/eloquent-relationships.md:1240
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"foreach ($user->posts as $post) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1185
#: ./docs/9.x/eloquent-relationships.md:1248
#: ./docs/10.x/eloquent-relationships.md:1297
#: ./docs/11.x/eloquent-relationships.md:1384
#: ./docs/master/eloquent-relationships.md:1297
msgctxt "P"
msgid "Dynamic relationship properties perform \"lazy loading\", meaning they will only load their relationship data when you actually access them. Because of this, developers often use [eager loading](#eager-loading) to pre-load relationships they know will be accessed after loading the model. Eager loading provides a significant reduction in SQL queries that must be executed to load a model's relations."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1187
#: ./docs/9.x/eloquent-relationships.md:1250
#: ./docs/10.x/eloquent-relationships.md:1299
#: ./docs/11.x/eloquent-relationships.md:1386
#: ./docs/master/eloquent-relationships.md:1299
#~ msgctxt "P"
#~ msgid "<a name=\"querying-relationship-existence\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1188
#: ./docs/9.x/eloquent-relationships.md:1251
#: ./docs/10.x/eloquent-relationships.md:1300
#: ./docs/11.x/eloquent-relationships.md:1387
#: ./docs/master/eloquent-relationships.md:1300
msgctxt "H3"
msgid "Querying Relationship Existence"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1190
#: ./docs/9.x/eloquent-relationships.md:1253
#: ./docs/10.x/eloquent-relationships.md:1302
#: ./docs/11.x/eloquent-relationships.md:1389
#: ./docs/master/eloquent-relationships.md:1302
msgctxt "P"
msgid "When retrieving model records, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the `has` and `orHas` methods:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1192
#: ./docs/9.x/eloquent-relationships.md:1255
#: ./docs/10.x/eloquent-relationships.md:1304
#: ./docs/11.x/eloquent-relationships.md:1391
#: ./docs/master/eloquent-relationships.md:1304
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"// Retrieve all posts that have at least one comment...\n"
"$posts = Post::has('comments')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1197
#: ./docs/9.x/eloquent-relationships.md:1260
#: ./docs/10.x/eloquent-relationships.md:1309
#: ./docs/11.x/eloquent-relationships.md:1396
#: ./docs/master/eloquent-relationships.md:1309
msgctxt "P"
msgid "You may also specify an operator and count value to further customize the query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1199
#: ./docs/9.x/eloquent-relationships.md:1262
#: ./docs/10.x/eloquent-relationships.md:1311
#: ./docs/11.x/eloquent-relationships.md:1398
#: ./docs/master/eloquent-relationships.md:1311
msgctxt "CODE"
msgid "// Retrieve all posts that have three or more comments...\n"
"$posts = Post::has('comments', '>=', 3)->get();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1202
#: ./docs/11.x/eloquent-relationships.md:1289
#: ./docs/master/eloquent-relationships.md:1202
msgctxt "CODE"
msgid "use App\\Models\\Order;\n"
"use App\\Models\\Customer;\n\n"
"Order::resolveRelationUsing('customer', function (Order $orderModel) {\n"
"    return $orderModel->belongsTo(Customer::class, 'customer_id');\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1202
#: ./docs/9.x/eloquent-relationships.md:1265
#: ./docs/10.x/eloquent-relationships.md:1314
#: ./docs/11.x/eloquent-relationships.md:1401
#: ./docs/master/eloquent-relationships.md:1314
msgctxt "P"
msgid "Nested `has` statements may be constructed using \"dot\" notation. For example, you may retrieve all posts that have at least one comment that has at least one image:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1204
#: ./docs/9.x/eloquent-relationships.md:1267
#: ./docs/10.x/eloquent-relationships.md:1316
#: ./docs/11.x/eloquent-relationships.md:1403
#: ./docs/master/eloquent-relationships.md:1316
msgctxt "CODE"
msgid "// Retrieve posts that have at least one comment with images...\n"
"$posts = Post::has('comments.images')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1207
#: ./docs/9.x/eloquent-relationships.md:1270
#: ./docs/10.x/eloquent-relationships.md:1319
#: ./docs/11.x/eloquent-relationships.md:1406
#: ./docs/master/eloquent-relationships.md:1319
msgctxt "P"
msgid "If you need even more power, you may use the `whereHas` and `orWhereHas` methods to define additional query constraints on your `has` queries, such as inspecting the content of a comment:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1209
#: ./docs/9.x/eloquent-relationships.md:1272
#: ./docs/10.x/eloquent-relationships.md:1321
#: ./docs/11.x/eloquent-relationships.md:1408
#: ./docs/master/eloquent-relationships.md:1321
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"// Retrieve posts with at least one comment containing words like code%...\n"
"$posts = Post::whereHas('comments', function (Builder $query) {\n"
"    $query->where('content', 'like', 'code%');\n"
"})->get();\n\n"
"// Retrieve posts with at least ten comments containing words like code%...\n"
"$posts = Post::whereHas('comments', function (Builder $query) {\n"
"    $query->where('content', 'like', 'code%');\n"
"}, '>=', 10)->get();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1219
#: ./docs/11.x/eloquent-relationships.md:1306
#: ./docs/master/eloquent-relationships.md:1219
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get all of the posts for the user.\n"
"     */\n"
"    public function posts(): HasMany\n"
"    {\n"
"        return $this->hasMany(Post::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1221
#: ./docs/9.x/eloquent-relationships.md:1285
#: ./docs/10.x/eloquent-relationships.md:1334
#: ./docs/11.x/eloquent-relationships.md:1421
#: ./docs/master/eloquent-relationships.md:1334
msgctxt "P"
msgid "Eloquent does not currently support querying for relationship existence across databases. The relationships must exist within the same database."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1223
#: ./docs/9.x/eloquent-relationships.md:1287
#: ./docs/10.x/eloquent-relationships.md:1336
#: ./docs/11.x/eloquent-relationships.md:1423
#: ./docs/master/eloquent-relationships.md:1336
#~ msgctxt "P"
#~ msgid "<a name=\"inline-relationship-existence-queries\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1224
#: ./docs/9.x/eloquent-relationships.md:1288
#: ./docs/10.x/eloquent-relationships.md:1337
#: ./docs/11.x/eloquent-relationships.md:1424
#: ./docs/master/eloquent-relationships.md:1337
msgctxt "H4"
msgid "Inline Relationship Existence Queries"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1226
msgctxt "P"
msgid "If you would like to query for a relationship's existence with a single, simple where condition attached to the relationship query, you may find it more convenient to use the `whereRelation` and `whereMorphRelation` methods. For example, we may query for all posts that have unapproved comments:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1228
#: ./docs/9.x/eloquent-relationships.md:1292
#: ./docs/10.x/eloquent-relationships.md:1341
#: ./docs/11.x/eloquent-relationships.md:1428
#: ./docs/master/eloquent-relationships.md:1341
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::whereRelation('comments', 'is_approved', false)->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1232
#: ./docs/9.x/eloquent-relationships.md:1296
#: ./docs/10.x/eloquent-relationships.md:1345
#: ./docs/11.x/eloquent-relationships.md:1432
#: ./docs/master/eloquent-relationships.md:1345
msgctxt "P"
msgid "Of course, like calls to the query builder's `where` method, you may also specify an operator:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1234
#: ./docs/9.x/eloquent-relationships.md:1298
#: ./docs/10.x/eloquent-relationships.md:1347
#: ./docs/11.x/eloquent-relationships.md:1434
#: ./docs/master/eloquent-relationships.md:1347
msgctxt "CODE"
msgid "$posts = Post::whereRelation(\n"
"    'comments', 'created_at', '>=', now()->subHour()\n"
")->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1238
#: ./docs/9.x/eloquent-relationships.md:1302
#: ./docs/10.x/eloquent-relationships.md:1351
#: ./docs/11.x/eloquent-relationships.md:1438
#: ./docs/master/eloquent-relationships.md:1351
#~ msgctxt "P"
#~ msgid "<a name=\"querying-relationship-absence\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1239
#: ./docs/9.x/eloquent-relationships.md:1303
#: ./docs/10.x/eloquent-relationships.md:1352
#: ./docs/11.x/eloquent-relationships.md:1439
#: ./docs/master/eloquent-relationships.md:1352
msgctxt "H3"
msgid "Querying Relationship Absence"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1241
#: ./docs/9.x/eloquent-relationships.md:1305
#: ./docs/10.x/eloquent-relationships.md:1354
#: ./docs/11.x/eloquent-relationships.md:1441
#: ./docs/master/eloquent-relationships.md:1354
msgctxt "P"
msgid "When retrieving model records, you may wish to limit your results based on the absence of a relationship. For example, imagine you want to retrieve all blog posts that **don't** have any comments. To do so, you may pass the name of the relationship to the `doesntHave` and `orDoesntHave` methods:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1243
#: ./docs/9.x/eloquent-relationships.md:1307
#: ./docs/10.x/eloquent-relationships.md:1356
#: ./docs/11.x/eloquent-relationships.md:1443
#: ./docs/master/eloquent-relationships.md:1356
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::doesntHave('comments')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1247
#: ./docs/9.x/eloquent-relationships.md:1311
#: ./docs/10.x/eloquent-relationships.md:1360
#: ./docs/11.x/eloquent-relationships.md:1447
#: ./docs/master/eloquent-relationships.md:1360
msgctxt "P"
msgid "If you need even more power, you may use the `whereDoesntHave` and `orWhereDoesntHave` methods to add additional query constraints to your `doesntHave` queries, such as inspecting the content of a comment:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1249
#: ./docs/9.x/eloquent-relationships.md:1313
#: ./docs/10.x/eloquent-relationships.md:1362
#: ./docs/11.x/eloquent-relationships.md:1449
#: ./docs/master/eloquent-relationships.md:1362
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$posts = Post::whereDoesntHave('comments', function (Builder $query) {\n"
"    $query->where('content', 'like', 'code%');\n"
"})->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1255
#: ./docs/9.x/eloquent-relationships.md:1319
#: ./docs/10.x/eloquent-relationships.md:1368
#: ./docs/11.x/eloquent-relationships.md:1455
#: ./docs/master/eloquent-relationships.md:1368
msgctxt "P"
msgid "You may use \"dot\" notation to execute a query against a nested relationship. For example, the following query will retrieve all posts that do not have comments; however, posts that have comments from authors that are not banned will be included in the results:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1257
#: ./docs/11.x/eloquent-relationships.md:1344
#: ./docs/master/eloquent-relationships.md:1257
msgctxt "P"
msgid "The example above will generate the following SQL. As you can see, the `or` clause instructs the query to return *any* post with greater than 100 votes. The query is no longer constrained to a specific user:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1257
#: ./docs/9.x/eloquent-relationships.md:1321
#: ./docs/10.x/eloquent-relationships.md:1370
#: ./docs/11.x/eloquent-relationships.md:1457
#: ./docs/master/eloquent-relationships.md:1370
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$posts = Post::whereDoesntHave('comments.author', function (Builder $query) {\n"
"    $query->where('banned', 0);\n"
"})->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1263
#: ./docs/9.x/eloquent-relationships.md:1327
#: ./docs/10.x/eloquent-relationships.md:1376
#: ./docs/11.x/eloquent-relationships.md:1463
#: ./docs/master/eloquent-relationships.md:1376
#~ msgctxt "P"
#~ msgid "<a name=\"querying-morph-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1264
#: ./docs/9.x/eloquent-relationships.md:1328
#: ./docs/10.x/eloquent-relationships.md:1377
#: ./docs/11.x/eloquent-relationships.md:1464
#: ./docs/master/eloquent-relationships.md:1377
msgctxt "H3"
msgid "Querying Morph To Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1266
#: ./docs/9.x/eloquent-relationships.md:1330
#: ./docs/10.x/eloquent-relationships.md:1379
#: ./docs/11.x/eloquent-relationships.md:1466
#: ./docs/master/eloquent-relationships.md:1379
msgctxt "P"
msgid "To query the existence of \"morph to\" relationships, you may use the `whereHasMorph` and `whereDoesntHaveMorph` methods. These methods accept the name of the relationship as their first argument. Next, the methods accept the names of the related models that you wish to include in the query. Finally, you may provide a closure which customizes the relationship query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1268
#: ./docs/9.x/eloquent-relationships.md:1332
#: ./docs/10.x/eloquent-relationships.md:1381
#: ./docs/11.x/eloquent-relationships.md:1468
#: ./docs/master/eloquent-relationships.md:1381
msgctxt "CODE"
msgid "use App\\Models\\Comment;\n"
"use App\\Models\\Post;\n"
"use App\\Models\\Video;\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"// Retrieve comments associated to posts or videos with a title like code%...\n"
"$comments = Comment::whereHasMorph(\n"
"    'commentable',\n"
"    [Post::class, Video::class],\n"
"    function (Builder $query) {\n"
"        $query->where('title', 'like', 'code%');\n"
"    }\n"
")->get();\n\n"
"// Retrieve comments associated to posts with a title not like code%...\n"
"$comments = Comment::whereDoesntHaveMorph(\n"
"    'commentable',\n"
"    Post::class,\n"
"    function (Builder $query) {\n"
"        $query->where('title', 'like', 'code%');\n"
"    }\n"
")->get();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1285
#: ./docs/11.x/eloquent-relationships.md:1372
#: ./docs/master/eloquent-relationships.md:1285
msgctxt "H3"
msgid "Relationship Methods vs. Dynamic Properties"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1289
#: ./docs/11.x/eloquent-relationships.md:1376
#: ./docs/master/eloquent-relationships.md:1289
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"foreach ($user->posts as $post) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1290
#: ./docs/10.x/eloquent-relationships.md:1339
#: ./docs/11.x/eloquent-relationships.md:1426
#: ./docs/master/eloquent-relationships.md:1339
msgctxt "P"
msgid "If you would like to query for a relationship's existence with a single, simple where condition attached to the relationship query, you may find it more convenient to use the `whereRelation`, `orWhereRelation`, `whereMorphRelation`, and `orWhereMorphRelation` methods. For example, we may query for all posts that have unapproved comments:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1291
#: ./docs/9.x/eloquent-relationships.md:1355
#: ./docs/10.x/eloquent-relationships.md:1404
#: ./docs/11.x/eloquent-relationships.md:1491
#: ./docs/master/eloquent-relationships.md:1404
msgctxt "P"
msgid "You may occasionally need to add query constraints based on the \"type\" of the related polymorphic model. The closure passed to the `whereHasMorph` method may receive a `$type` value as its second argument. This argument allows you to inspect the \"type\" of the query that is being built:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1293
#: ./docs/9.x/eloquent-relationships.md:1357
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$comments = Comment::whereHasMorph(\n"
"    'commentable',\n"
"    [Post::class, Video::class],\n"
"    function (Builder $query, $type) {\n"
"        $column = $type === Post::class ? 'content' : 'title';\n\n"
"        $query->where($column, 'like', 'code%');\n"
"    }\n"
")->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1305
#: ./docs/9.x/eloquent-relationships.md:1369
#: ./docs/10.x/eloquent-relationships.md:1418
#: ./docs/11.x/eloquent-relationships.md:1511
#: ./docs/master/eloquent-relationships.md:1418
#~ msgctxt "P"
#~ msgid "<a name=\"querying-all-morph-to-related-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1306
#: ./docs/9.x/eloquent-relationships.md:1370
#: ./docs/10.x/eloquent-relationships.md:1419
#: ./docs/11.x/eloquent-relationships.md:1512
#: ./docs/master/eloquent-relationships.md:1419
msgctxt "H4"
msgid "Querying All Related Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1308
#: ./docs/9.x/eloquent-relationships.md:1372
#: ./docs/10.x/eloquent-relationships.md:1421
#: ./docs/11.x/eloquent-relationships.md:1514
#: ./docs/master/eloquent-relationships.md:1421
msgctxt "P"
msgid "Instead of passing an array of possible polymorphic models, you may provide `*` as a wildcard value. This will instruct Laravel to retrieve all of the possible polymorphic types from the database. Laravel will execute an additional query in order to perform this operation:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1310
#: ./docs/9.x/eloquent-relationships.md:1374
#: ./docs/10.x/eloquent-relationships.md:1423
#: ./docs/11.x/eloquent-relationships.md:1516
#: ./docs/master/eloquent-relationships.md:1423
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$comments = Comment::whereHasMorph('commentable', '*', function (Builder $query) {\n"
"    $query->where('title', 'like', 'foo%');\n"
"})->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1316
#: ./docs/9.x/eloquent-relationships.md:1380
#: ./docs/10.x/eloquent-relationships.md:1429
#: ./docs/11.x/eloquent-relationships.md:1522
#: ./docs/master/eloquent-relationships.md:1429
#~ msgctxt "P"
#~ msgid "<a name=\"aggregating-related-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1317
#: ./docs/9.x/eloquent-relationships.md:1381
#: ./docs/10.x/eloquent-relationships.md:1430
#: ./docs/11.x/eloquent-relationships.md:1523
#: ./docs/master/eloquent-relationships.md:1430
msgctxt "H2"
msgid "Aggregating Related Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1319
#: ./docs/9.x/eloquent-relationships.md:1383
#: ./docs/10.x/eloquent-relationships.md:1432
#: ./docs/11.x/eloquent-relationships.md:1525
#: ./docs/master/eloquent-relationships.md:1432
#~ msgctxt "P"
#~ msgid "<a name=\"counting-related-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1320
#: ./docs/9.x/eloquent-relationships.md:1384
#: ./docs/10.x/eloquent-relationships.md:1433
#: ./docs/11.x/eloquent-relationships.md:1526
#: ./docs/master/eloquent-relationships.md:1433
msgctxt "H3"
msgid "Counting Related Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1322
#: ./docs/9.x/eloquent-relationships.md:1386
#: ./docs/10.x/eloquent-relationships.md:1435
#: ./docs/11.x/eloquent-relationships.md:1528
#: ./docs/master/eloquent-relationships.md:1435
msgctxt "P"
msgid "Sometimes you may want to count the number of related models for a given relationship without actually loading the models. To accomplish this, you may use the `withCount` method. The `withCount` method will place a `{relation}_count` attribute on the resulting models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1324
#: ./docs/9.x/eloquent-relationships.md:1388
#: ./docs/10.x/eloquent-relationships.md:1437
#: ./docs/11.x/eloquent-relationships.md:1530
#: ./docs/master/eloquent-relationships.md:1437
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::withCount('comments')->get();\n\n"
"foreach ($posts as $post) {\n"
"    echo $post->comments_count;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1332
#: ./docs/9.x/eloquent-relationships.md:1396
#: ./docs/10.x/eloquent-relationships.md:1445
#: ./docs/11.x/eloquent-relationships.md:1538
#: ./docs/master/eloquent-relationships.md:1445
msgctxt "P"
msgid "By passing an array to the `withCount` method, you may add the \"counts\" for multiple relations as well as add additional constraints to the queries:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1334
#: ./docs/9.x/eloquent-relationships.md:1398
#: ./docs/10.x/eloquent-relationships.md:1447
#: ./docs/11.x/eloquent-relationships.md:1540
#: ./docs/master/eloquent-relationships.md:1447
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$posts = Post::withCount(['votes', 'comments' => function (Builder $query) {\n"
"    $query->where('content', 'like', 'code%');\n"
"}])->get();\n\n"
"echo $posts[0]->votes_count;\n"
"echo $posts[0]->comments_count;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1343
#: ./docs/9.x/eloquent-relationships.md:1407
#: ./docs/10.x/eloquent-relationships.md:1456
#: ./docs/11.x/eloquent-relationships.md:1549
#: ./docs/master/eloquent-relationships.md:1456
msgctxt "P"
msgid "You may also alias the relationship count result, allowing multiple counts on the same relationship:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1345
#: ./docs/9.x/eloquent-relationships.md:1409
#: ./docs/10.x/eloquent-relationships.md:1458
#: ./docs/11.x/eloquent-relationships.md:1551
#: ./docs/master/eloquent-relationships.md:1458
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$posts = Post::withCount([\n"
"    'comments',\n"
"    'comments as pending_comments_count' => function (Builder $query) {\n"
"        $query->where('approved', false);\n"
"    },\n"
"])->get();\n\n"
"echo $posts[0]->comments_count;\n"
"echo $posts[0]->pending_comments_count;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1357
#: ./docs/9.x/eloquent-relationships.md:1421
#: ./docs/10.x/eloquent-relationships.md:1470
#: ./docs/11.x/eloquent-relationships.md:1563
#: ./docs/master/eloquent-relationships.md:1470
#~ msgctxt "P"
#~ msgid "<a name=\"deferred-count-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1358
#: ./docs/8.x/eloquent-relationships.md:1434
#: ./docs/9.x/eloquent-relationships.md:1422
#: ./docs/9.x/eloquent-relationships.md:1498
#: ./docs/10.x/eloquent-relationships.md:1471
#: ./docs/10.x/eloquent-relationships.md:1547
#: ./docs/11.x/eloquent-relationships.md:1564
#: ./docs/11.x/eloquent-relationships.md:1640
#: ./docs/master/eloquent-relationships.md:1471
#: ./docs/master/eloquent-relationships.md:1547
msgctxt "H4"
msgid "Deferred Count Loading"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1360
#: ./docs/9.x/eloquent-relationships.md:1424
#: ./docs/10.x/eloquent-relationships.md:1473
#: ./docs/11.x/eloquent-relationships.md:1566
#: ./docs/master/eloquent-relationships.md:1473
msgctxt "P"
msgid "Using the `loadCount` method, you may load a relationship count after the parent model has already been retrieved:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1362
#: ./docs/9.x/eloquent-relationships.md:1426
#: ./docs/10.x/eloquent-relationships.md:1475
#: ./docs/11.x/eloquent-relationships.md:1568
#: ./docs/master/eloquent-relationships.md:1475
msgctxt "CODE"
msgid "$book = Book::first();\n\n"
"$book->loadCount('genres');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1366
#: ./docs/9.x/eloquent-relationships.md:1430
#: ./docs/10.x/eloquent-relationships.md:1479
#: ./docs/11.x/eloquent-relationships.md:1572
#: ./docs/master/eloquent-relationships.md:1479
msgctxt "P"
msgid "If you need to set additional query constraints on the count query, you may pass an array keyed by the relationships you wish to count. The array values should be closures which receive the query builder instance:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1368
#: ./docs/9.x/eloquent-relationships.md:1432
msgctxt "CODE"
msgid "$book->loadCount(['reviews' => function ($query) {\n"
"    $query->where('rating', 5);\n"
"}])"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1372
#: ./docs/9.x/eloquent-relationships.md:1436
#: ./docs/10.x/eloquent-relationships.md:1485
#: ./docs/11.x/eloquent-relationships.md:1578
#: ./docs/master/eloquent-relationships.md:1485
#~ msgctxt "P"
#~ msgid "<a name=\"relationship-counting-and-custom-select-statements\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1373
#: ./docs/9.x/eloquent-relationships.md:1437
msgctxt "H4"
msgid "Relationship Counting & Custom Select Statements"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1375
#: ./docs/9.x/eloquent-relationships.md:1439
#: ./docs/10.x/eloquent-relationships.md:1488
#: ./docs/11.x/eloquent-relationships.md:1581
#: ./docs/master/eloquent-relationships.md:1488
msgctxt "P"
msgid "If you're combining `withCount` with a `select` statement, ensure that you call `withCount` after the `select` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1377
#: ./docs/9.x/eloquent-relationships.md:1441
#: ./docs/10.x/eloquent-relationships.md:1490
#: ./docs/11.x/eloquent-relationships.md:1583
#: ./docs/master/eloquent-relationships.md:1490
msgctxt "CODE"
msgid "$posts = Post::select(['title', 'body'])\n"
"                ->withCount('comments')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1381
#: ./docs/9.x/eloquent-relationships.md:1445
#: ./docs/10.x/eloquent-relationships.md:1494
#: ./docs/11.x/eloquent-relationships.md:1587
#: ./docs/master/eloquent-relationships.md:1494
#~ msgctxt "P"
#~ msgid "<a name=\"other-aggregate-functions\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1382
#: ./docs/9.x/eloquent-relationships.md:1446
#: ./docs/10.x/eloquent-relationships.md:1495
#: ./docs/11.x/eloquent-relationships.md:1588
#: ./docs/master/eloquent-relationships.md:1495
msgctxt "H3"
msgid "Other Aggregate Functions"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1384
#: ./docs/9.x/eloquent-relationships.md:1448
#: ./docs/10.x/eloquent-relationships.md:1497
#: ./docs/11.x/eloquent-relationships.md:1590
#: ./docs/master/eloquent-relationships.md:1497
msgctxt "P"
msgid "In addition to the `withCount` method, Eloquent provides `withMin`, `withMax`, `withAvg`, `withSum`, and `withExists` methods. These methods will place a `{relation}_{function}_{column}` attribute on your resulting models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1386
#: ./docs/9.x/eloquent-relationships.md:1450
#: ./docs/10.x/eloquent-relationships.md:1499
#: ./docs/11.x/eloquent-relationships.md:1592
#: ./docs/master/eloquent-relationships.md:1499
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$posts = Post::withSum('comments', 'votes')->get();\n\n"
"foreach ($posts as $post) {\n"
"    echo $post->comments_sum_votes;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1394
#: ./docs/9.x/eloquent-relationships.md:1458
#: ./docs/10.x/eloquent-relationships.md:1507
#: ./docs/11.x/eloquent-relationships.md:1600
#: ./docs/master/eloquent-relationships.md:1507
msgctxt "P"
msgid "If you wish to access the result of the aggregate function using another name, you may specify your own alias:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1396
#: ./docs/9.x/eloquent-relationships.md:1460
#: ./docs/10.x/eloquent-relationships.md:1509
#: ./docs/11.x/eloquent-relationships.md:1602
#: ./docs/master/eloquent-relationships.md:1509
msgctxt "CODE"
msgid "$posts = Post::withSum('comments as total_comments', 'votes')->get();\n\n"
"foreach ($posts as $post) {\n"
"    echo $post->total_comments;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1402
#: ./docs/9.x/eloquent-relationships.md:1466
#: ./docs/10.x/eloquent-relationships.md:1515
#: ./docs/11.x/eloquent-relationships.md:1608
#: ./docs/master/eloquent-relationships.md:1515
msgctxt "P"
msgid "Like the `loadCount` method, deferred versions of these methods are also available. These additional aggregate operations may be performed on Eloquent models that have already been retrieved:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1404
#: ./docs/9.x/eloquent-relationships.md:1468
#: ./docs/10.x/eloquent-relationships.md:1517
#: ./docs/11.x/eloquent-relationships.md:1610
#: ./docs/master/eloquent-relationships.md:1517
msgctxt "CODE"
msgid "$post = Post::first();\n\n"
"$post->loadSum('comments', 'votes');"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1406
#: ./docs/11.x/eloquent-relationships.md:1493
#: ./docs/master/eloquent-relationships.md:1406
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$comments = Comment::whereHasMorph(\n"
"    'commentable',\n"
"    [Post::class, Video::class],\n"
"    function (Builder $query, string $type) {\n"
"        $column = $type === Post::class ? 'content' : 'title';\n\n"
"        $query->where($column, 'like', 'code%');\n"
"    }\n"
")->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1408
#: ./docs/9.x/eloquent-relationships.md:1472
#: ./docs/10.x/eloquent-relationships.md:1521
#: ./docs/11.x/eloquent-relationships.md:1614
#: ./docs/master/eloquent-relationships.md:1521
msgctxt "P"
msgid "If you're combining these aggregate methods with a `select` statement, ensure that you call the aggregate methods after the `select` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1410
#: ./docs/9.x/eloquent-relationships.md:1474
#: ./docs/10.x/eloquent-relationships.md:1523
#: ./docs/11.x/eloquent-relationships.md:1616
#: ./docs/master/eloquent-relationships.md:1523
msgctxt "CODE"
msgid "$posts = Post::select(['title', 'body'])\n"
"                ->withExists('comments')\n"
"                ->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1414
#: ./docs/9.x/eloquent-relationships.md:1478
#: ./docs/10.x/eloquent-relationships.md:1527
#: ./docs/11.x/eloquent-relationships.md:1620
#: ./docs/master/eloquent-relationships.md:1527
#~ msgctxt "P"
#~ msgid "<a name=\"counting-related-models-on-morph-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1415
#: ./docs/9.x/eloquent-relationships.md:1479
msgctxt "H3"
msgid "Counting Related Models On Morph To Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1417
#: ./docs/9.x/eloquent-relationships.md:1481
#: ./docs/10.x/eloquent-relationships.md:1530
#: ./docs/11.x/eloquent-relationships.md:1623
#: ./docs/master/eloquent-relationships.md:1530
msgctxt "P"
msgid "If you would like to eager load a \"morph to\" relationship, as well as related model counts for the various entities that may be returned by that relationship, you may utilize the `with` method in combination with the `morphTo` relationship's `morphWithCount` method."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1419
#: ./docs/9.x/eloquent-relationships.md:1483
#: ./docs/10.x/eloquent-relationships.md:1532
#: ./docs/11.x/eloquent-relationships.md:1625
#: ./docs/master/eloquent-relationships.md:1532
msgctxt "P"
msgid "In this example, let's assume that `Photo` and `Post` models may create `ActivityFeed` models. We will assume the `ActivityFeed` model defines a \"morph to\" relationship named `parentable` that allows us to retrieve the parent `Photo` or `Post` model for a given `ActivityFeed` instance. Additionally, let's assume that `Photo` models \"have many\" `Tag` models and `Post` models \"have many\" `Comment` models."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1421
#: ./docs/9.x/eloquent-relationships.md:1485
#: ./docs/10.x/eloquent-relationships.md:1534
#: ./docs/11.x/eloquent-relationships.md:1627
#: ./docs/master/eloquent-relationships.md:1534
msgctxt "P"
msgid "Now, let's imagine we want to retrieve `ActivityFeed` instances and eager load the `parentable` parent models for each `ActivityFeed` instance. In addition, we want to retrieve the number of tags that are associated with each parent photo and the number of comments that are associated with each parent post:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1423
#: ./docs/9.x/eloquent-relationships.md:1487
#: ./docs/10.x/eloquent-relationships.md:1536
#: ./docs/11.x/eloquent-relationships.md:1629
#: ./docs/master/eloquent-relationships.md:1536
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"$activities = ActivityFeed::with([\n"
"    'parentable' => function (MorphTo $morphTo) {\n"
"        $morphTo->morphWithCount([\n"
"            Photo::class => ['tags'],\n"
"            Post::class => ['comments'],\n"
"        ]);\n"
"    }])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1433
#: ./docs/9.x/eloquent-relationships.md:1497
#: ./docs/10.x/eloquent-relationships.md:1546
#: ./docs/11.x/eloquent-relationships.md:1639
#: ./docs/master/eloquent-relationships.md:1546
#~ msgctxt "P"
#~ msgid "<a name=\"morph-to-deferred-count-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1436
#: ./docs/9.x/eloquent-relationships.md:1500
#: ./docs/10.x/eloquent-relationships.md:1549
#: ./docs/11.x/eloquent-relationships.md:1642
#: ./docs/master/eloquent-relationships.md:1549
msgctxt "P"
msgid "Let's assume we have already retrieved a set of `ActivityFeed` models and now we would like to load the nested relationship counts for the various `parentable` models associated with the activity feeds. You may use the `loadMorphCount` method to accomplish this:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1438
#: ./docs/9.x/eloquent-relationships.md:1502
#: ./docs/10.x/eloquent-relationships.md:1551
#: ./docs/11.x/eloquent-relationships.md:1644
#: ./docs/master/eloquent-relationships.md:1551
msgctxt "CODE"
msgid "$activities = ActivityFeed::with('parentable')->get();\n\n"
"$activities->loadMorphCount('parentable', [\n"
"    Photo::class => ['tags'],\n"
"    Post::class => ['comments'],\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1445
#: ./docs/9.x/eloquent-relationships.md:1509
#: ./docs/10.x/eloquent-relationships.md:1558
#: ./docs/11.x/eloquent-relationships.md:1651
#: ./docs/master/eloquent-relationships.md:1558
#~ msgctxt "P"
#~ msgid "<a name=\"eager-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1446
#: ./docs/9.x/eloquent-relationships.md:1510
#: ./docs/10.x/eloquent-relationships.md:1559
#: ./docs/11.x/eloquent-relationships.md:1652
#: ./docs/master/eloquent-relationships.md:1559
msgctxt "H2"
msgid "Eager Loading"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1448
#: ./docs/9.x/eloquent-relationships.md:1512
#: ./docs/10.x/eloquent-relationships.md:1561
#: ./docs/11.x/eloquent-relationships.md:1654
#: ./docs/master/eloquent-relationships.md:1561
msgctxt "P"
msgid "When accessing Eloquent relationships as properties, the related models are \"lazy loaded\". This means the relationship data is not actually loaded until you first access the property. However, Eloquent can \"eager load\" relationships at the time you query the parent model. Eager loading alleviates the \"N + 1\" query problem. To illustrate the N + 1 query problem, consider a `Book` model that \"belongs to\" to an `Author` model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1450
#: ./docs/9.x/eloquent-relationships.md:1514
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Book extends Model\n"
"{\n"
"    /**\n"
"     * Get the author that wrote the book.\n"
"     */\n"
"    public function author()\n"
"    {\n"
"        return $this->belongsTo(Author::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1467
#: ./docs/9.x/eloquent-relationships.md:1531
#: ./docs/10.x/eloquent-relationships.md:1581
#: ./docs/11.x/eloquent-relationships.md:1674
#: ./docs/master/eloquent-relationships.md:1581
msgctxt "P"
msgid "Now, let's retrieve all books and their authors:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1469
#: ./docs/9.x/eloquent-relationships.md:1533
#: ./docs/10.x/eloquent-relationships.md:1583
#: ./docs/11.x/eloquent-relationships.md:1676
#: ./docs/master/eloquent-relationships.md:1583
msgctxt "CODE"
msgid "use App\\Models\\Book;\n\n"
"$books = Book::all();\n\n"
"foreach ($books as $book) {\n"
"    echo $book->author->name;\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1477
#: ./docs/9.x/eloquent-relationships.md:1541
#: ./docs/10.x/eloquent-relationships.md:1591
#: ./docs/11.x/eloquent-relationships.md:1684
#: ./docs/master/eloquent-relationships.md:1591
msgctxt "P"
msgid "This loop will execute one query to retrieve all of the books within the database table, then another query for each book in order to retrieve the book's author. So, if we have 25 books, the code above would run 26 queries: one for the original book, and 25 additional queries to retrieve the author of each book."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1479
#: ./docs/9.x/eloquent-relationships.md:1543
#: ./docs/10.x/eloquent-relationships.md:1593
#: ./docs/11.x/eloquent-relationships.md:1686
#: ./docs/master/eloquent-relationships.md:1593
msgctxt "P"
msgid "Thankfully, we can use eager loading to reduce this operation to just two queries. When building a query, you may specify which relationships should be eager loaded using the `with` method:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1481
#: ./docs/11.x/eloquent-relationships.md:1574
#: ./docs/master/eloquent-relationships.md:1481
msgctxt "CODE"
msgid "$book->loadCount(['reviews' => function (Builder $query) {\n"
"    $query->where('rating', 5);\n"
"}])"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1481
#: ./docs/9.x/eloquent-relationships.md:1545
#: ./docs/10.x/eloquent-relationships.md:1595
#: ./docs/11.x/eloquent-relationships.md:1688
#: ./docs/master/eloquent-relationships.md:1595
msgctxt "CODE"
msgid "$books = Book::with('author')->get();\n\n"
"foreach ($books as $book) {\n"
"    echo $book->author->name;\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1486
#: ./docs/11.x/eloquent-relationships.md:1579
#: ./docs/master/eloquent-relationships.md:1486
msgctxt "H4"
msgid "Relationship Counting and Custom Select Statements"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1487
#: ./docs/9.x/eloquent-relationships.md:1551
#: ./docs/10.x/eloquent-relationships.md:1601
#: ./docs/11.x/eloquent-relationships.md:1694
#: ./docs/master/eloquent-relationships.md:1601
msgctxt "P"
msgid "For this operation, only two queries will be executed - one query to retrieve all of the books and one query to retrieve all of the authors for all of the books:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1489
#: ./docs/9.x/eloquent-relationships.md:1553
#: ./docs/10.x/eloquent-relationships.md:1603
#: ./docs/11.x/eloquent-relationships.md:1696
#: ./docs/master/eloquent-relationships.md:1603
msgctxt "CODE: sql"
msgid "select * from books\n\n"
"select * from authors where id in (1, 2, 3, 4, 5, ...)"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1495
#: ./docs/9.x/eloquent-relationships.md:1559
#: ./docs/10.x/eloquent-relationships.md:1609
#: ./docs/11.x/eloquent-relationships.md:1702
#: ./docs/master/eloquent-relationships.md:1609
#~ msgctxt "P"
#~ msgid "<a name=\"eager-loading-multiple-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1496
#: ./docs/9.x/eloquent-relationships.md:1560
#: ./docs/10.x/eloquent-relationships.md:1610
#: ./docs/11.x/eloquent-relationships.md:1703
#: ./docs/master/eloquent-relationships.md:1610
msgctxt "H4"
msgid "Eager Loading Multiple Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1498
#: ./docs/9.x/eloquent-relationships.md:1562
#: ./docs/10.x/eloquent-relationships.md:1612
#: ./docs/11.x/eloquent-relationships.md:1705
#: ./docs/master/eloquent-relationships.md:1612
msgctxt "P"
msgid "Sometimes you may need to eager load several different relationships. To do so, just pass an array of relationships to the `with` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1500
#: ./docs/9.x/eloquent-relationships.md:1564
#: ./docs/10.x/eloquent-relationships.md:1614
#: ./docs/11.x/eloquent-relationships.md:1707
#: ./docs/master/eloquent-relationships.md:1614
msgctxt "CODE"
msgid "$books = Book::with(['author', 'publisher'])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1502
#: ./docs/9.x/eloquent-relationships.md:1566
#: ./docs/10.x/eloquent-relationships.md:1616
#: ./docs/11.x/eloquent-relationships.md:1709
#: ./docs/master/eloquent-relationships.md:1616
#~ msgctxt "P"
#~ msgid "<a name=\"nested-eager-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1503
#: ./docs/9.x/eloquent-relationships.md:1567
#: ./docs/10.x/eloquent-relationships.md:1617
#: ./docs/11.x/eloquent-relationships.md:1710
#: ./docs/master/eloquent-relationships.md:1617
msgctxt "H4"
msgid "Nested Eager Loading"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1505
msgctxt "P"
msgid "Sometimes you may want to query for the children of a \"morph to\" relationship's parent. You may accomplish this using the `whereMorphedTo` and `whereNotMorphedTo` methods, which will automatically determine the proper morph type mapping for the given model. These methods accept the name of the `morphTo` relationship as their first argument and the related parent model as their second argument:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1505
#: ./docs/9.x/eloquent-relationships.md:1569
#: ./docs/10.x/eloquent-relationships.md:1619
#: ./docs/11.x/eloquent-relationships.md:1712
#: ./docs/master/eloquent-relationships.md:1619
msgctxt "P"
msgid "To eager load a relationship's relationships, you may use \"dot\" syntax. For example, let's eager load all of the book's authors and all of the author's personal contacts:"
msgstr ""

#: ./docs/11.x/eloquent-relationships.md:1507
msgctxt "CODE"
msgid "$comments = Comment::whereMorphedTo('commentable', $post)\n"
"                      ->orWhereMorphedTo('commentable', $video)\n"
"                      ->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1507
#: ./docs/9.x/eloquent-relationships.md:1571
#: ./docs/10.x/eloquent-relationships.md:1621
#: ./docs/11.x/eloquent-relationships.md:1714
#: ./docs/master/eloquent-relationships.md:1621
msgctxt "CODE"
msgid "$books = Book::with('author.contacts')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1509
#: ./docs/9.x/eloquent-relationships.md:1582
#: ./docs/10.x/eloquent-relationships.md:1632
#: ./docs/11.x/eloquent-relationships.md:1725
#: ./docs/master/eloquent-relationships.md:1632
#~ msgctxt "P"
#~ msgid "<a name=\"nested-eager-loading-morphto-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1510
#: ./docs/9.x/eloquent-relationships.md:1583
#: ./docs/10.x/eloquent-relationships.md:1633
#: ./docs/11.x/eloquent-relationships.md:1726
#: ./docs/master/eloquent-relationships.md:1633
msgctxt "H4"
msgid "Nested Eager Loading `morphTo` Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1512
#: ./docs/9.x/eloquent-relationships.md:1585
#: ./docs/10.x/eloquent-relationships.md:1635
#: ./docs/11.x/eloquent-relationships.md:1728
#: ./docs/master/eloquent-relationships.md:1635
msgctxt "P"
msgid "If you would like to eager load a `morphTo` relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the `with` method in combination with the `morphTo` relationship's `morphWith` method. To help illustrate this method, let's consider the following model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1514
#: ./docs/8.x/eloquent-relationships.md:1668
#: ./docs/9.x/eloquent-relationships.md:1587
#: ./docs/9.x/eloquent-relationships.md:1754
msgctxt "CODE"
msgid "<?php\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class ActivityFeed extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent of the activity feed record.\n"
"     */\n"
"    public function parentable()\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1528
#: ./docs/11.x/eloquent-relationships.md:1621
#: ./docs/master/eloquent-relationships.md:1528
msgctxt "H3"
msgid "Counting Related Models on Morph To Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1529
#: ./docs/8.x/eloquent-relationships.md:1683
#: ./docs/9.x/eloquent-relationships.md:1602
#: ./docs/9.x/eloquent-relationships.md:1769
#: ./docs/10.x/eloquent-relationships.md:1653
#: ./docs/10.x/eloquent-relationships.md:1822
#: ./docs/11.x/eloquent-relationships.md:1746
#: ./docs/11.x/eloquent-relationships.md:1912
#: ./docs/master/eloquent-relationships.md:1653
#: ./docs/master/eloquent-relationships.md:1819
msgctxt "P"
msgid "In this example, let's assume `Event`, `Photo`, and `Post` models may create `ActivityFeed` models. Additionally, let's assume that `Event` models belong to a `Calendar` model, `Photo` models are associated with `Tag` models, and `Post` models belong to an `Author` model."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1531
#: ./docs/8.x/eloquent-relationships.md:1685
#: ./docs/9.x/eloquent-relationships.md:1604
#: ./docs/9.x/eloquent-relationships.md:1771
#: ./docs/10.x/eloquent-relationships.md:1655
#: ./docs/10.x/eloquent-relationships.md:1824
#: ./docs/11.x/eloquent-relationships.md:1748
#: ./docs/11.x/eloquent-relationships.md:1914
#: ./docs/master/eloquent-relationships.md:1655
#: ./docs/master/eloquent-relationships.md:1821
msgctxt "P"
msgid "Using these model definitions and relationships, we may retrieve `ActivityFeed` model instances and eager load all `parentable` models and their respective nested relationships:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1533
#: ./docs/9.x/eloquent-relationships.md:1606
#: ./docs/10.x/eloquent-relationships.md:1657
#: ./docs/11.x/eloquent-relationships.md:1750
#: ./docs/master/eloquent-relationships.md:1657
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"$activities = ActivityFeed::query()\n"
"    ->with(['parentable' => function (MorphTo $morphTo) {\n"
"        $morphTo->morphWith([\n"
"            Event::class => ['calendar'],\n"
"            Photo::class => ['tags'],\n"
"            Post::class => ['author'],\n"
"        ]);\n"
"    }])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1544
#: ./docs/9.x/eloquent-relationships.md:1617
#: ./docs/10.x/eloquent-relationships.md:1668
#: ./docs/11.x/eloquent-relationships.md:1761
#: ./docs/master/eloquent-relationships.md:1668
#~ msgctxt "P"
#~ msgid "<a name=\"eager-loading-specific-columns\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1545
#: ./docs/9.x/eloquent-relationships.md:1618
#: ./docs/10.x/eloquent-relationships.md:1669
#: ./docs/11.x/eloquent-relationships.md:1762
#: ./docs/master/eloquent-relationships.md:1669
msgctxt "H4"
msgid "Eager Loading Specific Columns"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1547
#: ./docs/9.x/eloquent-relationships.md:1620
#: ./docs/10.x/eloquent-relationships.md:1671
#: ./docs/11.x/eloquent-relationships.md:1764
#: ./docs/master/eloquent-relationships.md:1671
msgctxt "P"
msgid "You may not always need every column from the relationships you are retrieving. For this reason, Eloquent allows you to specify which columns of the relationship you would like to retrieve:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1549
#: ./docs/9.x/eloquent-relationships.md:1622
#: ./docs/10.x/eloquent-relationships.md:1673
#: ./docs/11.x/eloquent-relationships.md:1766
#: ./docs/master/eloquent-relationships.md:1673
msgctxt "CODE"
msgid "$books = Book::with('author:id,name,book_id')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1551
#: ./docs/9.x/eloquent-relationships.md:1625
#: ./docs/10.x/eloquent-relationships.md:1676
#: ./docs/11.x/eloquent-relationships.md:1769
#: ./docs/master/eloquent-relationships.md:1676
msgctxt "P"
msgid "When using this feature, you should always include the `id` column and any relevant foreign key columns in the list of columns you wish to retrieve."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1553
#: ./docs/9.x/eloquent-relationships.md:1627
#: ./docs/10.x/eloquent-relationships.md:1678
#: ./docs/11.x/eloquent-relationships.md:1771
#: ./docs/master/eloquent-relationships.md:1678
#~ msgctxt "P"
#~ msgid "<a name=\"eager-loading-by-default\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1554
#: ./docs/9.x/eloquent-relationships.md:1628
msgctxt "H4"
msgid "Eager Loading By Default"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1556
#: ./docs/9.x/eloquent-relationships.md:1630
#: ./docs/10.x/eloquent-relationships.md:1681
#: ./docs/11.x/eloquent-relationships.md:1774
#: ./docs/master/eloquent-relationships.md:1681
msgctxt "P"
msgid "Sometimes you might want to always load some relationships when retrieving a model. To accomplish this, you may define a `$with` property on the model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1558
#: ./docs/9.x/eloquent-relationships.md:1632
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Book extends Model\n"
"{\n"
"    /**\n"
"     * The relationships that should always be loaded.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $with = ['author'];\n\n"
"    /**\n"
"     * Get the author that wrote the book.\n"
"     */\n"
"    public function author()\n"
"    {\n"
"        return $this->belongsTo(Author::class);\n"
"    }\n\n"
"    /**\n"
"     * Get the genre of the book.\n"
"     */\n"
"    public function genre()\n"
"    {\n"
"        return $this->belongsTo(Genre::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1563
#: ./docs/11.x/eloquent-relationships.md:1656
#: ./docs/master/eloquent-relationships.md:1563
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n"
"class Book extends Model\n"
"{\n"
"    /**\n"
"     * Get the author that wrote the book.\n"
"     */\n"
"    public function author(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(Author::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1573
#: ./docs/10.x/eloquent-relationships.md:1623
#: ./docs/11.x/eloquent-relationships.md:1716
#: ./docs/master/eloquent-relationships.md:1623
msgctxt "P"
msgid "Alternatively, you may specify nested eager loaded relationships by providing a nested array to the `with` method, which can be convenient when eager loading multiple nested relationships:"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1575
#: ./docs/10.x/eloquent-relationships.md:1625
#: ./docs/11.x/eloquent-relationships.md:1718
#: ./docs/master/eloquent-relationships.md:1625
msgctxt "CODE"
msgid "$books = Book::with([\n"
"    'author' => [\n"
"        'contacts',\n"
"        'publisher',\n"
"    ],\n"
"])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1590
#: ./docs/9.x/eloquent-relationships.md:1664
#: ./docs/10.x/eloquent-relationships.md:1716
#: ./docs/11.x/eloquent-relationships.md:1809
#: ./docs/master/eloquent-relationships.md:1716
msgctxt "P"
msgid "If you would like to remove an item from the `$with` property for a single query, you may use the `without` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1592
#: ./docs/9.x/eloquent-relationships.md:1666
#: ./docs/10.x/eloquent-relationships.md:1718
#: ./docs/11.x/eloquent-relationships.md:1811
#: ./docs/master/eloquent-relationships.md:1718
msgctxt "CODE"
msgid "$books = Book::without('author')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1594
#: ./docs/9.x/eloquent-relationships.md:1668
#: ./docs/10.x/eloquent-relationships.md:1720
#: ./docs/11.x/eloquent-relationships.md:1813
#: ./docs/master/eloquent-relationships.md:1720
msgctxt "P"
msgid "If you would like to override all items within the `$with` property for a single query, you may use the `withOnly` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1596
#: ./docs/9.x/eloquent-relationships.md:1670
#: ./docs/10.x/eloquent-relationships.md:1722
#: ./docs/11.x/eloquent-relationships.md:1815
#: ./docs/master/eloquent-relationships.md:1722
msgctxt "CODE"
msgid "$books = Book::withOnly('genre')->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1598
#: ./docs/9.x/eloquent-relationships.md:1672
#: ./docs/10.x/eloquent-relationships.md:1724
#: ./docs/11.x/eloquent-relationships.md:1817
#: ./docs/master/eloquent-relationships.md:1724
#~ msgctxt "P"
#~ msgid "<a name=\"constraining-eager-loads\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1599
#: ./docs/9.x/eloquent-relationships.md:1673
#: ./docs/10.x/eloquent-relationships.md:1725
#: ./docs/11.x/eloquent-relationships.md:1818
#: ./docs/master/eloquent-relationships.md:1725
msgctxt "H3"
msgid "Constraining Eager Loads"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1601
#: ./docs/9.x/eloquent-relationships.md:1675
#: ./docs/10.x/eloquent-relationships.md:1727
#: ./docs/11.x/eloquent-relationships.md:1820
#: ./docs/master/eloquent-relationships.md:1727
msgctxt "P"
msgid "Sometimes you may wish to eager load a relationship but also specify additional query conditions for the eager loading query. You can accomplish this by passing an array of relationships to the `with` method where the array key is a relationship name and the array value is a closure that adds additional constraints to the eager loading query:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1603
#: ./docs/9.x/eloquent-relationships.md:1677
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$users = User::with(['posts' => function ($query) {\n"
"    $query->where('title', 'like', '%code%');\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1609
#: ./docs/9.x/eloquent-relationships.md:1683
#: ./docs/10.x/eloquent-relationships.md:1736
#: ./docs/11.x/eloquent-relationships.md:1829
#: ./docs/master/eloquent-relationships.md:1736
msgctxt "P"
msgid "In this example, Eloquent will only eager load posts where the post's `title` column contains the word `code`. You may call other [query builder](/docs/{{version}}/queries) methods to further customize the eager loading operation:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1611
#: ./docs/9.x/eloquent-relationships.md:1685
msgctxt "CODE"
msgid "$users = User::with(['posts' => function ($query) {\n"
"    $query->orderBy('created_at', 'desc');\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1615
#: ./docs/9.x/eloquent-relationships.md:1690
#: ./docs/10.x/eloquent-relationships.md:1743
msgctxt "P"
msgid "The `limit` and `take` query builder methods may not be used when constraining eager loads."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1617
#: ./docs/9.x/eloquent-relationships.md:1692
#: ./docs/10.x/eloquent-relationships.md:1745
#: ./docs/11.x/eloquent-relationships.md:1835
#: ./docs/master/eloquent-relationships.md:1742
#~ msgctxt "P"
#~ msgid "<a name=\"constraining-eager-loading-of-morph-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1618
#: ./docs/9.x/eloquent-relationships.md:1693
msgctxt "H4"
msgid "Constraining Eager Loading Of `morphTo` Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1620
#: ./docs/9.x/eloquent-relationships.md:1695
#: ./docs/10.x/eloquent-relationships.md:1748
#: ./docs/11.x/eloquent-relationships.md:1838
#: ./docs/master/eloquent-relationships.md:1745
msgctxt "P"
msgid "If you are eager loading a `morphTo` relationship, Eloquent will run multiple queries to fetch each type of related model. You may add additional constraints to each of these queries using the `MorphTo` relation's `constrain` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1622
#: ./docs/9.x/eloquent-relationships.md:1697
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"$comments = Comment::with(['commentable' => function (MorphTo $morphTo) {\n"
"    $morphTo->constrain([\n"
"        Post::class => function (Builder $query) {\n"
"            $query->whereNull('hidden_at');\n"
"        },\n"
"        Video::class => function (Builder $query) {\n"
"            $query->where('type', 'educational');\n"
"        },\n"
"    ]);\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1636
msgctxt "P"
msgid "In this example, Eloquent will only eager load posts that have not been hidden and videos have a `type` value of \"educational\"."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1637
#: ./docs/10.x/eloquent-relationships.md:1806
#: ./docs/11.x/eloquent-relationships.md:1730
#: ./docs/11.x/eloquent-relationships.md:1896
#: ./docs/master/eloquent-relationships.md:1637
#: ./docs/master/eloquent-relationships.md:1803
msgctxt "CODE"
msgid "<?php\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"class ActivityFeed extends Model\n"
"{\n"
"    /**\n"
"     * Get the parent of the activity feed record.\n"
"     */\n"
"    public function parentable(): MorphTo\n"
"    {\n"
"        return $this->morphTo();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1638
#: ./docs/9.x/eloquent-relationships.md:1724
#: ./docs/10.x/eloquent-relationships.md:1776
#: ./docs/11.x/eloquent-relationships.md:1866
#: ./docs/master/eloquent-relationships.md:1773
#~ msgctxt "P"
#~ msgid "<a name=\"lazy-eager-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1639
#: ./docs/9.x/eloquent-relationships.md:1725
#: ./docs/10.x/eloquent-relationships.md:1777
#: ./docs/11.x/eloquent-relationships.md:1867
#: ./docs/master/eloquent-relationships.md:1774
msgctxt "H3"
msgid "Lazy Eager Loading"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1641
#: ./docs/9.x/eloquent-relationships.md:1727
#: ./docs/10.x/eloquent-relationships.md:1779
#: ./docs/11.x/eloquent-relationships.md:1869
#: ./docs/master/eloquent-relationships.md:1776
msgctxt "P"
msgid "Sometimes you may need to eager load a relationship after the parent model has already been retrieved. For example, this may be useful if you need to dynamically decide whether to load related models:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1643
#: ./docs/9.x/eloquent-relationships.md:1729
#: ./docs/10.x/eloquent-relationships.md:1781
#: ./docs/11.x/eloquent-relationships.md:1871
#: ./docs/master/eloquent-relationships.md:1778
msgctxt "CODE"
msgid "use App\\Models\\Book;\n\n"
"$books = Book::all();\n\n"
"if ($someCondition) {\n"
"    $books->load('author', 'publisher');\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1651
#: ./docs/9.x/eloquent-relationships.md:1737
#: ./docs/10.x/eloquent-relationships.md:1789
#: ./docs/11.x/eloquent-relationships.md:1879
#: ./docs/master/eloquent-relationships.md:1786
msgctxt "P"
msgid "If you need to set additional query constraints on the eager loading query, you may pass an array keyed by the relationships you wish to load. The array values should be closure instances which receive the query instance:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1653
#: ./docs/9.x/eloquent-relationships.md:1739
msgctxt "CODE"
msgid "$author->load(['books' => function ($query) {\n"
"    $query->orderBy('published_date', 'asc');\n"
"}]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1657
#: ./docs/9.x/eloquent-relationships.md:1743
#: ./docs/10.x/eloquent-relationships.md:1795
#: ./docs/11.x/eloquent-relationships.md:1885
#: ./docs/master/eloquent-relationships.md:1792
msgctxt "P"
msgid "To load a relationship only when it has not already been loaded, use the `loadMissing` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1659
#: ./docs/9.x/eloquent-relationships.md:1745
#: ./docs/10.x/eloquent-relationships.md:1797
#: ./docs/11.x/eloquent-relationships.md:1887
#: ./docs/master/eloquent-relationships.md:1794
msgctxt "CODE"
msgid "$book->loadMissing('author');"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1661
#: ./docs/9.x/eloquent-relationships.md:1747
#: ./docs/10.x/eloquent-relationships.md:1799
#: ./docs/11.x/eloquent-relationships.md:1889
#: ./docs/master/eloquent-relationships.md:1796
#~ msgctxt "P"
#~ msgid "<a name=\"nested-lazy-eager-loading-morphto\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1662
#: ./docs/9.x/eloquent-relationships.md:1748
msgctxt "H4"
msgid "Nested Lazy Eager Loading & `morphTo`"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1664
#: ./docs/9.x/eloquent-relationships.md:1750
#: ./docs/10.x/eloquent-relationships.md:1802
#: ./docs/11.x/eloquent-relationships.md:1892
#: ./docs/master/eloquent-relationships.md:1799
msgctxt "P"
msgid "If you would like to eager load a `morphTo` relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the `loadMorph` method."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1666
#: ./docs/9.x/eloquent-relationships.md:1752
#: ./docs/10.x/eloquent-relationships.md:1804
#: ./docs/11.x/eloquent-relationships.md:1894
#: ./docs/master/eloquent-relationships.md:1801
msgctxt "P"
msgid "This method accepts the name of the `morphTo` relationship as its first argument, and an array of model / relationship pairs as its second argument. To help illustrate this method, let's consider the following model:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1679
#: ./docs/11.x/eloquent-relationships.md:1772
#: ./docs/master/eloquent-relationships.md:1679
msgctxt "H4"
msgid "Eager Loading by Default"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1683
#: ./docs/11.x/eloquent-relationships.md:1776
#: ./docs/master/eloquent-relationships.md:1683
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n"
"class Book extends Model\n"
"{\n"
"    /**\n"
"     * The relationships that should always be loaded.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $with = ['author'];\n\n"
"    /**\n"
"     * Get the author that wrote the book.\n"
"     */\n"
"    public function author(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(Author::class);\n"
"    }\n\n"
"    /**\n"
"     * Get the genre of the book.\n"
"     */\n"
"    public function genre(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(Genre::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1687
#: ./docs/9.x/eloquent-relationships.md:1773
#: ./docs/10.x/eloquent-relationships.md:1826
#: ./docs/11.x/eloquent-relationships.md:1916
#: ./docs/master/eloquent-relationships.md:1823
msgctxt "CODE"
msgid "$activities = ActivityFeed::with('parentable')\n"
"    ->get()\n"
"    ->loadMorph('parentable', [\n"
"        Event::class => ['calendar'],\n"
"        Photo::class => ['tags'],\n"
"        Post::class => ['author'],\n"
"    ]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1695
#: ./docs/9.x/eloquent-relationships.md:1781
#: ./docs/10.x/eloquent-relationships.md:1834
#: ./docs/11.x/eloquent-relationships.md:1924
#: ./docs/master/eloquent-relationships.md:1831
#~ msgctxt "P"
#~ msgid "<a name=\"preventing-lazy-loading\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1696
#: ./docs/9.x/eloquent-relationships.md:1782
#: ./docs/10.x/eloquent-relationships.md:1835
#: ./docs/11.x/eloquent-relationships.md:1925
#: ./docs/master/eloquent-relationships.md:1832
msgctxt "H3"
msgid "Preventing Lazy Loading"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1698
#: ./docs/9.x/eloquent-relationships.md:1784
#: ./docs/10.x/eloquent-relationships.md:1837
#: ./docs/11.x/eloquent-relationships.md:1927
#: ./docs/master/eloquent-relationships.md:1834
msgctxt "P"
msgid "As previously discussed, eager loading relationships can often provide significant performance benefits to your application. Therefore, if you would like, you may instruct Laravel to always prevent the lazy loading of relationships. To accomplish this, you may invoke the `preventLazyLoading` method offered by the base Eloquent model class. Typically, you should call this method within the `boot` method of your application's `AppServiceProvider` class."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1700
#: ./docs/9.x/eloquent-relationships.md:1786
#: ./docs/10.x/eloquent-relationships.md:1839
#: ./docs/11.x/eloquent-relationships.md:1929
#: ./docs/master/eloquent-relationships.md:1836
msgctxt "P"
msgid "The `preventLazyLoading` method accepts an optional boolean argument that indicates if lazy loading should be prevented. For example, you may wish to only disable lazy loading in non-production environments so that your production environment will continue to function normally even if a lazy loaded relationship is accidentally present in production code:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1702
#: ./docs/9.x/eloquent-relationships.md:1788
msgctxt "CODE: php"
msgid "use Illuminate\\Database\\Eloquent\\Model;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Model::preventLazyLoading(! $this->app->isProduction());\n"
"}"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1711
#: ./docs/10.x/eloquent-relationships.md:1763
#: ./docs/11.x/eloquent-relationships.md:1853
#: ./docs/master/eloquent-relationships.md:1760
msgctxt "P"
msgid "In this example, Eloquent will only eager load posts that have not been hidden and videos that have a `type` value of \"educational\"."
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1713
#: ./docs/10.x/eloquent-relationships.md:1765
#: ./docs/11.x/eloquent-relationships.md:1855
#: ./docs/master/eloquent-relationships.md:1762
#~ msgctxt "P"
#~ msgid "<a name=\"constraining-eager-loads-with-relationship-existence\"></a>"
#~ msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1714
#: ./docs/10.x/eloquent-relationships.md:1766
#: ./docs/11.x/eloquent-relationships.md:1856
#: ./docs/master/eloquent-relationships.md:1763
msgctxt "H4"
msgid "Constraining Eager Loads With Relationship Existence"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1716
#: ./docs/9.x/eloquent-relationships.md:1802
#: ./docs/10.x/eloquent-relationships.md:1853
#: ./docs/11.x/eloquent-relationships.md:1943
#: ./docs/master/eloquent-relationships.md:1850
msgctxt "P"
msgid "After preventing lazy loading, Eloquent will throw a `Illuminate\\Database\\LazyLoadingViolationException` exception when your application attempts to lazy load any Eloquent relationship."
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1716
#: ./docs/10.x/eloquent-relationships.md:1768
#: ./docs/11.x/eloquent-relationships.md:1858
#: ./docs/master/eloquent-relationships.md:1765
msgctxt "P"
msgid "You may sometimes find yourself needing to check for the existence of a relationship while simultaneously loading the relationship based on the same conditions. For example, you may wish to only retrieve `User` models that have child `Post` models matching a given query condition while also eager loading the matching posts. You may accomplish this using the `withWhereHas` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1718
#: ./docs/9.x/eloquent-relationships.md:1804
#: ./docs/10.x/eloquent-relationships.md:1855
#: ./docs/11.x/eloquent-relationships.md:1945
#: ./docs/master/eloquent-relationships.md:1852
msgctxt "P"
msgid "You may customize the behavior of lazy loading violations using the `handleLazyLoadingViolationsUsing` method. For example, using this method, you may instruct lazy loading violations to only be logged instead of interrupting the application's execution with exceptions:"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1718
#: ./docs/10.x/eloquent-relationships.md:1770
#: ./docs/11.x/eloquent-relationships.md:1860
#: ./docs/master/eloquent-relationships.md:1767
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$users = User::withWhereHas('posts', function ($query) {\n"
"    $query->where('featured', true);\n"
"})->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1720
#: ./docs/9.x/eloquent-relationships.md:1806
msgctxt "CODE: php"
msgid "Model::handleLazyLoadingViolationUsing(function ($model, $relation) {\n"
"    $class = get_class($model);\n\n"
"    info(\"Attempted to lazy load [{$relation}] on model [{$class}].\");\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1728
#: ./docs/9.x/eloquent-relationships.md:1814
#: ./docs/10.x/eloquent-relationships.md:1865
#: ./docs/11.x/eloquent-relationships.md:1955
#: ./docs/master/eloquent-relationships.md:1862
#~ msgctxt "P"
#~ msgid "<a name=\"inserting-and-updating-related-models\"></a>"
#~ msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1729
#: ./docs/11.x/eloquent-relationships.md:1822
#: ./docs/master/eloquent-relationships.md:1729
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Builder;\n\n"
"$users = User::with(['posts' => function (Builder $query) {\n"
"    $query->where('title', 'like', '%code%');\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1729
#: ./docs/9.x/eloquent-relationships.md:1815
msgctxt "H2"
msgid "Inserting & Updating Related Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1731
#: ./docs/9.x/eloquent-relationships.md:1817
#: ./docs/10.x/eloquent-relationships.md:1868
#: ./docs/11.x/eloquent-relationships.md:1958
#: ./docs/master/eloquent-relationships.md:1865
#~ msgctxt "P"
#~ msgid "<a name=\"the-save-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1732
#: ./docs/9.x/eloquent-relationships.md:1818
#: ./docs/10.x/eloquent-relationships.md:1869
#: ./docs/11.x/eloquent-relationships.md:1959
#: ./docs/master/eloquent-relationships.md:1866
msgctxt "H3"
msgid "The `save` Method"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1734
#: ./docs/9.x/eloquent-relationships.md:1820
#: ./docs/10.x/eloquent-relationships.md:1871
#: ./docs/11.x/eloquent-relationships.md:1961
#: ./docs/master/eloquent-relationships.md:1868
msgctxt "P"
msgid "Eloquent provides convenient methods for adding new models to relationships. For example, perhaps you need to add a new comment to a post. Instead of manually setting the `post_id` attribute on the `Comment` model you may insert the comment using the relationship's `save` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1736
#: ./docs/9.x/eloquent-relationships.md:1822
#: ./docs/10.x/eloquent-relationships.md:1873
#: ./docs/11.x/eloquent-relationships.md:1963
#: ./docs/master/eloquent-relationships.md:1870
msgctxt "CODE"
msgid "use App\\Models\\Comment;\n"
"use App\\Models\\Post;\n\n"
"$comment = new Comment(['message' => 'A new comment.']);\n\n"
"$post = Post::find(1);\n\n"
"$post->comments()->save($comment);"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1738
#: ./docs/11.x/eloquent-relationships.md:1831
#: ./docs/master/eloquent-relationships.md:1738
msgctxt "CODE"
msgid "$users = User::with(['posts' => function (Builder $query) {\n"
"    $query->orderBy('created_at', 'desc');\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1745
#: ./docs/9.x/eloquent-relationships.md:1831
#: ./docs/10.x/eloquent-relationships.md:1882
#: ./docs/11.x/eloquent-relationships.md:1972
#: ./docs/master/eloquent-relationships.md:1879
msgctxt "P"
msgid "Note that we did not access the `comments` relationship as a dynamic property. Instead, we called the `comments` method to obtain an instance of the relationship. The `save` method will automatically add the appropriate `post_id` value to the new `Comment` model."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1746
#: ./docs/11.x/eloquent-relationships.md:1836
#: ./docs/master/eloquent-relationships.md:1743
msgctxt "H4"
msgid "Constraining Eager Loading of `morphTo` Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1747
#: ./docs/9.x/eloquent-relationships.md:1833
#: ./docs/10.x/eloquent-relationships.md:1884
#: ./docs/11.x/eloquent-relationships.md:1974
#: ./docs/master/eloquent-relationships.md:1881
msgctxt "P"
msgid "If you need to save multiple related models, you may use the `saveMany` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1749
#: ./docs/9.x/eloquent-relationships.md:1835
#: ./docs/10.x/eloquent-relationships.md:1886
#: ./docs/11.x/eloquent-relationships.md:1976
#: ./docs/master/eloquent-relationships.md:1883
msgctxt "CODE"
msgid "$post = Post::find(1);\n\n"
"$post->comments()->saveMany([\n"
"    new Comment(['message' => 'A new comment.']),\n"
"    new Comment(['message' => 'Another new comment.']),\n"
"]);"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1750
#: ./docs/11.x/eloquent-relationships.md:1840
#: ./docs/master/eloquent-relationships.md:1747
msgctxt "CODE"
msgid "use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\n"
"$comments = Comment::with(['commentable' => function (MorphTo $morphTo) {\n"
"    $morphTo->constrain([\n"
"        Post::class => function ($query) {\n"
"            $query->whereNull('hidden_at');\n"
"        },\n"
"        Video::class => function ($query) {\n"
"            $query->where('type', 'educational');\n"
"        },\n"
"    ]);\n"
"}])->get();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1756
#: ./docs/9.x/eloquent-relationships.md:1842
#: ./docs/10.x/eloquent-relationships.md:1893
#: ./docs/11.x/eloquent-relationships.md:1983
#: ./docs/master/eloquent-relationships.md:1890
msgctxt "P"
msgid "The `save` and `saveMany` methods will persist the given model instances, but will not add the newly persisted models to any in-memory relationships that are already loaded onto the parent model. If you plan on accessing the relationship after using the `save` or `saveMany` methods, you may wish to use the `refresh` method to reload the model and its relationships:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1758
#: ./docs/9.x/eloquent-relationships.md:1844
#: ./docs/10.x/eloquent-relationships.md:1895
#: ./docs/11.x/eloquent-relationships.md:1985
#: ./docs/master/eloquent-relationships.md:1892
msgctxt "CODE"
msgid "$post->comments()->save($comment);\n\n"
"$post->refresh();\n\n"
"// All comments, including the newly saved comment...\n"
"$post->comments;"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1765
#: ./docs/9.x/eloquent-relationships.md:1851
#: ./docs/10.x/eloquent-relationships.md:1902
#: ./docs/11.x/eloquent-relationships.md:1992
#: ./docs/master/eloquent-relationships.md:1899
#~ msgctxt "P"
#~ msgid "<a name=\"the-push-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1766
#: ./docs/9.x/eloquent-relationships.md:1852
msgctxt "H4"
msgid "Recursively Saving Models & Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1768
#: ./docs/9.x/eloquent-relationships.md:1854
#: ./docs/10.x/eloquent-relationships.md:1905
#: ./docs/11.x/eloquent-relationships.md:1995
#: ./docs/master/eloquent-relationships.md:1902
msgctxt "P"
msgid "If you would like to `save` your model and all of its associated relationships, you may use the `push` method. In this example, the `Post` model will be saved as well as its comments and the comment's authors:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1770
#: ./docs/9.x/eloquent-relationships.md:1856
#: ./docs/10.x/eloquent-relationships.md:1907
#: ./docs/11.x/eloquent-relationships.md:1997
#: ./docs/master/eloquent-relationships.md:1904
msgctxt "CODE"
msgid "$post = Post::find(1);\n\n"
"$post->comments[0]->message = 'Message';\n"
"$post->comments[0]->author->name = 'Author Name';\n\n"
"$post->push();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1777
#: ./docs/9.x/eloquent-relationships.md:1867
#: ./docs/10.x/eloquent-relationships.md:1918
#: ./docs/11.x/eloquent-relationships.md:2008
#: ./docs/master/eloquent-relationships.md:1915
#~ msgctxt "P"
#~ msgid "<a name=\"the-create-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1778
#: ./docs/9.x/eloquent-relationships.md:1868
#: ./docs/10.x/eloquent-relationships.md:1919
#: ./docs/11.x/eloquent-relationships.md:2009
#: ./docs/master/eloquent-relationships.md:1916
msgctxt "H3"
msgid "The `create` Method"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1780
#: ./docs/9.x/eloquent-relationships.md:1870
#: ./docs/10.x/eloquent-relationships.md:1921
#: ./docs/11.x/eloquent-relationships.md:2011
#: ./docs/master/eloquent-relationships.md:1918
msgctxt "P"
msgid "In addition to the `save` and `saveMany` methods, you may also use the `create` method, which accepts an array of attributes, creates a model, and inserts it into the database. The difference between `save` and `create` is that `save` accepts a full Eloquent model instance while `create` accepts a plain PHP `array`. The newly created model will be returned by the `create` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1782
#: ./docs/9.x/eloquent-relationships.md:1872
#: ./docs/10.x/eloquent-relationships.md:1923
#: ./docs/11.x/eloquent-relationships.md:2013
#: ./docs/master/eloquent-relationships.md:1920
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"$post = Post::find(1);\n\n"
"$comment = $post->comments()->create([\n"
"    'message' => 'A new comment.',\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1790
#: ./docs/9.x/eloquent-relationships.md:1880
#: ./docs/10.x/eloquent-relationships.md:1931
#: ./docs/11.x/eloquent-relationships.md:2021
#: ./docs/master/eloquent-relationships.md:1928
msgctxt "P"
msgid "You may use the `createMany` method to create multiple related models:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1791
#: ./docs/11.x/eloquent-relationships.md:1881
#: ./docs/master/eloquent-relationships.md:1788
msgctxt "CODE"
msgid "$author->load(['books' => function (Builder $query) {\n"
"    $query->orderBy('published_date', 'asc');\n"
"}]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1792
#: ./docs/9.x/eloquent-relationships.md:1882
#: ./docs/10.x/eloquent-relationships.md:1933
#: ./docs/11.x/eloquent-relationships.md:2023
#: ./docs/master/eloquent-relationships.md:1930
msgctxt "CODE"
msgid "$post = Post::find(1);\n\n"
"$post->comments()->createMany([\n"
"    ['message' => 'A new comment.'],\n"
"    ['message' => 'Another new comment.'],\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1799
#: ./docs/9.x/eloquent-relationships.md:1889
#: ./docs/10.x/eloquent-relationships.md:1953
#: ./docs/11.x/eloquent-relationships.md:2043
#: ./docs/master/eloquent-relationships.md:1950
msgctxt "P"
msgid "You may also use the `findOrNew`, `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods to [create and update models on relationships](/docs/{{version}}/eloquent#upserts)."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1800
#: ./docs/11.x/eloquent-relationships.md:1890
#: ./docs/master/eloquent-relationships.md:1797
msgctxt "H4"
msgid "Nested Lazy Eager Loading and `morphTo`"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1801
#: ./docs/9.x/eloquent-relationships.md:1892
#: ./docs/10.x/eloquent-relationships.md:1956
#: ./docs/11.x/eloquent-relationships.md:2046
#: ./docs/master/eloquent-relationships.md:1953
msgctxt "P"
msgid "Before using the `create` method, be sure to review the [mass assignment](/docs/{{version}}/eloquent#mass-assignment) documentation."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1803
#: ./docs/9.x/eloquent-relationships.md:1894
#: ./docs/10.x/eloquent-relationships.md:1958
#: ./docs/11.x/eloquent-relationships.md:2048
#: ./docs/master/eloquent-relationships.md:1955
#~ msgctxt "P"
#~ msgid "<a name=\"updating-belongs-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1804
#: ./docs/9.x/eloquent-relationships.md:1895
#: ./docs/10.x/eloquent-relationships.md:1959
#: ./docs/11.x/eloquent-relationships.md:2049
#: ./docs/master/eloquent-relationships.md:1956
msgctxt "H3"
msgid "Belongs To Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1806
#: ./docs/9.x/eloquent-relationships.md:1897
#: ./docs/10.x/eloquent-relationships.md:1961
#: ./docs/11.x/eloquent-relationships.md:2051
#: ./docs/master/eloquent-relationships.md:1958
msgctxt "P"
msgid "If you would like to assign a child model to a new parent model, you may use the `associate` method. In this example, the `User` model defines a `belongsTo` relationship to the `Account` model. This `associate` method will set the foreign key on the child model:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1808
#: ./docs/9.x/eloquent-relationships.md:1899
#: ./docs/10.x/eloquent-relationships.md:1963
#: ./docs/11.x/eloquent-relationships.md:2053
#: ./docs/master/eloquent-relationships.md:1960
msgctxt "CODE"
msgid "use App\\Models\\Account;\n\n"
"$account = Account::find(10);\n\n"
"$user->account()->associate($account);\n\n"
"$user->save();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1816
#: ./docs/9.x/eloquent-relationships.md:1907
#: ./docs/10.x/eloquent-relationships.md:1971
#: ./docs/11.x/eloquent-relationships.md:2061
#: ./docs/master/eloquent-relationships.md:1968
msgctxt "P"
msgid "To remove a parent model from a child model, you may use the `dissociate` method. This method will set the relationship's foreign key to `null`:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1818
#: ./docs/9.x/eloquent-relationships.md:1909
#: ./docs/10.x/eloquent-relationships.md:1973
#: ./docs/11.x/eloquent-relationships.md:2063
#: ./docs/master/eloquent-relationships.md:1970
msgctxt "CODE"
msgid "$user->account()->dissociate();\n\n"
"$user->save();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1822
#: ./docs/9.x/eloquent-relationships.md:1913
#: ./docs/10.x/eloquent-relationships.md:1977
#: ./docs/11.x/eloquent-relationships.md:2067
#: ./docs/master/eloquent-relationships.md:1974
#~ msgctxt "P"
#~ msgid "<a name=\"updating-many-to-many-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1825
#: ./docs/9.x/eloquent-relationships.md:1916
#: ./docs/10.x/eloquent-relationships.md:1980
#: ./docs/11.x/eloquent-relationships.md:2070
#: ./docs/master/eloquent-relationships.md:1977
#~ msgctxt "P"
#~ msgid "<a name=\"attaching-detaching\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1826
#: ./docs/9.x/eloquent-relationships.md:1917
#: ./docs/10.x/eloquent-relationships.md:1981
#: ./docs/11.x/eloquent-relationships.md:2071
#: ./docs/master/eloquent-relationships.md:1978
msgctxt "H4"
msgid "Attaching / Detaching"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1828
#: ./docs/9.x/eloquent-relationships.md:1919
#: ./docs/10.x/eloquent-relationships.md:1983
#: ./docs/11.x/eloquent-relationships.md:2073
#: ./docs/master/eloquent-relationships.md:1980
msgctxt "P"
msgid "Eloquent also provides methods to make working with many-to-many relationships more convenient. For example, let's imagine a user can have many roles and a role can have many users. You may use the `attach` method to attach a role to a user by inserting a record in the relationship's intermediate table:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1830
#: ./docs/9.x/eloquent-relationships.md:1921
#: ./docs/10.x/eloquent-relationships.md:1985
#: ./docs/11.x/eloquent-relationships.md:2075
#: ./docs/master/eloquent-relationships.md:1982
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->roles()->attach($roleId);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1836
#: ./docs/9.x/eloquent-relationships.md:1927
#: ./docs/10.x/eloquent-relationships.md:1991
#: ./docs/11.x/eloquent-relationships.md:2081
#: ./docs/master/eloquent-relationships.md:1988
msgctxt "P"
msgid "When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the intermediate table:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1838
#: ./docs/9.x/eloquent-relationships.md:1929
#: ./docs/10.x/eloquent-relationships.md:1993
#: ./docs/11.x/eloquent-relationships.md:2083
#: ./docs/master/eloquent-relationships.md:1990
msgctxt "CODE"
msgid "$user->roles()->attach($roleId, ['expires' => $expires]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1840
#: ./docs/9.x/eloquent-relationships.md:1931
#: ./docs/10.x/eloquent-relationships.md:1995
#: ./docs/11.x/eloquent-relationships.md:2085
#: ./docs/master/eloquent-relationships.md:1992
msgctxt "P"
msgid "Sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the `detach` method. The `detach` method will delete the appropriate record out of the intermediate table; however, both models will remain in the database:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1841
#: ./docs/11.x/eloquent-relationships.md:1931
#: ./docs/master/eloquent-relationships.md:1838
msgctxt "CODE: php"
msgid "use Illuminate\\Database\\Eloquent\\Model;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Model::preventLazyLoading(! $this->app->isProduction());\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1842
#: ./docs/9.x/eloquent-relationships.md:1933
#: ./docs/10.x/eloquent-relationships.md:1997
#: ./docs/11.x/eloquent-relationships.md:2087
#: ./docs/master/eloquent-relationships.md:1994
msgctxt "CODE"
msgid "// Detach a single role from the user...\n"
"$user->roles()->detach($roleId);\n\n"
"// Detach all roles from the user...\n"
"$user->roles()->detach();"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1848
#: ./docs/9.x/eloquent-relationships.md:1939
#: ./docs/10.x/eloquent-relationships.md:2003
#: ./docs/11.x/eloquent-relationships.md:2093
#: ./docs/master/eloquent-relationships.md:2000
msgctxt "P"
msgid "For convenience, `attach` and `detach` also accept arrays of IDs as input:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1850
#: ./docs/9.x/eloquent-relationships.md:1941
#: ./docs/10.x/eloquent-relationships.md:2005
#: ./docs/11.x/eloquent-relationships.md:2095
#: ./docs/master/eloquent-relationships.md:2002
msgctxt "CODE"
msgid "$user = User::find(1);\n\n"
"$user->roles()->detach([1, 2, 3]);\n\n"
"$user->roles()->attach([\n"
"    1 => ['expires' => $expires],\n"
"    2 => ['expires' => $expires],\n"
"]);"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1857
#: ./docs/11.x/eloquent-relationships.md:1947
#: ./docs/master/eloquent-relationships.md:1854
msgctxt "CODE: php"
msgid "Model::handleLazyLoadingViolationUsing(function (Model $model, string $relation) {\n"
"    $class = $model::class;\n\n"
"    info(\"Attempted to lazy load [{$relation}] on model [{$class}].\");\n"
"});"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1859
#: ./docs/9.x/eloquent-relationships.md:1950
#: ./docs/10.x/eloquent-relationships.md:2014
#: ./docs/11.x/eloquent-relationships.md:2104
#: ./docs/master/eloquent-relationships.md:2011
#~ msgctxt "P"
#~ msgid "<a name=\"syncing-associations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1860
#: ./docs/9.x/eloquent-relationships.md:1951
#: ./docs/10.x/eloquent-relationships.md:2015
#: ./docs/11.x/eloquent-relationships.md:2105
#: ./docs/master/eloquent-relationships.md:2012
msgctxt "H4"
msgid "Syncing Associations"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1862
#: ./docs/9.x/eloquent-relationships.md:1953
#: ./docs/10.x/eloquent-relationships.md:2017
#: ./docs/11.x/eloquent-relationships.md:2107
#: ./docs/master/eloquent-relationships.md:2014
msgctxt "P"
msgid "You may also use the `sync` method to construct many-to-many associations. The `sync` method accepts an array of IDs to place on the intermediate table. Any IDs that are not in the given array will be removed from the intermediate table. So, after this operation is complete, only the IDs in the given array will exist in the intermediate table:"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1863
#: ./docs/10.x/eloquent-relationships.md:1914
#: ./docs/11.x/eloquent-relationships.md:2004
#: ./docs/master/eloquent-relationships.md:1911
msgctxt "P"
msgid "The `pushQuietly` method may be used to save a model and its associated relationships without raising any events:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1864
#: ./docs/9.x/eloquent-relationships.md:1955
#: ./docs/10.x/eloquent-relationships.md:2019
#: ./docs/11.x/eloquent-relationships.md:2109
#: ./docs/master/eloquent-relationships.md:2016
msgctxt "CODE"
msgid "$user->roles()->sync([1, 2, 3]);"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1865
#: ./docs/10.x/eloquent-relationships.md:1916
#: ./docs/11.x/eloquent-relationships.md:2006
#: ./docs/master/eloquent-relationships.md:1913
msgctxt "CODE"
msgid "$post->pushQuietly();"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1866
#: ./docs/11.x/eloquent-relationships.md:1956
#: ./docs/master/eloquent-relationships.md:1863
msgctxt "H2"
msgid "Inserting and Updating Related Models"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1866
#: ./docs/9.x/eloquent-relationships.md:1957
#: ./docs/9.x/eloquent-relationships.md:1976
#: ./docs/10.x/eloquent-relationships.md:2021
#: ./docs/10.x/eloquent-relationships.md:2040
#: ./docs/11.x/eloquent-relationships.md:2111
#: ./docs/11.x/eloquent-relationships.md:2130
#: ./docs/master/eloquent-relationships.md:2018
#: ./docs/master/eloquent-relationships.md:2037
msgctxt "P"
msgid "You may also pass additional intermediate table values with the IDs:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1868
#: ./docs/9.x/eloquent-relationships.md:1959
#: ./docs/10.x/eloquent-relationships.md:2023
#: ./docs/11.x/eloquent-relationships.md:2113
#: ./docs/master/eloquent-relationships.md:2020
msgctxt "CODE"
msgid "$user->roles()->sync([1 => ['expires' => true], 2, 3]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1870
#: ./docs/9.x/eloquent-relationships.md:1961
#: ./docs/10.x/eloquent-relationships.md:2025
#: ./docs/11.x/eloquent-relationships.md:2115
#: ./docs/master/eloquent-relationships.md:2022
msgctxt "P"
msgid "If you would like to insert the same intermediate table values with each of the synced model IDs, you may use the `syncWithPivotValues` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1872
#: ./docs/9.x/eloquent-relationships.md:1963
#: ./docs/10.x/eloquent-relationships.md:2027
#: ./docs/11.x/eloquent-relationships.md:2117
#: ./docs/master/eloquent-relationships.md:2024
msgctxt "CODE"
msgid "$user->roles()->syncWithPivotValues([1, 2, 3], ['active' => true]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1874
#: ./docs/9.x/eloquent-relationships.md:1965
#: ./docs/10.x/eloquent-relationships.md:2029
#: ./docs/11.x/eloquent-relationships.md:2119
#: ./docs/master/eloquent-relationships.md:2026
msgctxt "P"
msgid "If you do not want to detach existing IDs that are missing from the given array, you may use the `syncWithoutDetaching` method:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1876
#: ./docs/9.x/eloquent-relationships.md:1967
#: ./docs/10.x/eloquent-relationships.md:2031
#: ./docs/11.x/eloquent-relationships.md:2121
#: ./docs/master/eloquent-relationships.md:2028
msgctxt "CODE"
msgid "$user->roles()->syncWithoutDetaching([1, 2, 3]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1878
#: ./docs/9.x/eloquent-relationships.md:1969
#: ./docs/10.x/eloquent-relationships.md:2033
#: ./docs/11.x/eloquent-relationships.md:2123
#: ./docs/master/eloquent-relationships.md:2030
#~ msgctxt "P"
#~ msgid "<a name=\"toggling-associations\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1879
#: ./docs/9.x/eloquent-relationships.md:1970
#: ./docs/10.x/eloquent-relationships.md:2034
#: ./docs/11.x/eloquent-relationships.md:2124
#: ./docs/master/eloquent-relationships.md:2031
msgctxt "H4"
msgid "Toggling Associations"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1881
#: ./docs/9.x/eloquent-relationships.md:1972
#: ./docs/10.x/eloquent-relationships.md:2036
#: ./docs/11.x/eloquent-relationships.md:2126
#: ./docs/master/eloquent-relationships.md:2033
msgctxt "P"
msgid "The many-to-many relationship also provides a `toggle` method which \"toggles\" the attachment status of the given related model IDs. If the given ID is currently attached, it will be detached. Likewise, if it is currently detached, it will be attached:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1883
#: ./docs/9.x/eloquent-relationships.md:1974
#: ./docs/10.x/eloquent-relationships.md:2038
#: ./docs/11.x/eloquent-relationships.md:2128
#: ./docs/master/eloquent-relationships.md:2035
msgctxt "CODE"
msgid "$user->roles()->toggle([1, 2, 3]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1885
#: ./docs/9.x/eloquent-relationships.md:1983
#: ./docs/10.x/eloquent-relationships.md:2047
#: ./docs/11.x/eloquent-relationships.md:2137
#: ./docs/master/eloquent-relationships.md:2044
#~ msgctxt "P"
#~ msgid "<a name=\"updating-a-record-on-the-intermediate-table\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1886
#: ./docs/9.x/eloquent-relationships.md:1984
msgctxt "H4"
msgid "Updating A Record On The Intermediate Table"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1888
#: ./docs/9.x/eloquent-relationships.md:1986
#: ./docs/10.x/eloquent-relationships.md:2050
#: ./docs/11.x/eloquent-relationships.md:2140
#: ./docs/master/eloquent-relationships.md:2047
msgctxt "P"
msgid "If you need to update an existing row in your relationship's intermediate table, you may use the `updateExistingPivot` method. This method accepts the intermediate record foreign key and an array of attributes to update:"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1890
#: ./docs/9.x/eloquent-relationships.md:1988
#: ./docs/10.x/eloquent-relationships.md:2052
#: ./docs/11.x/eloquent-relationships.md:2142
#: ./docs/master/eloquent-relationships.md:2049
msgctxt "CODE"
msgid "$user = User::find(1);\n\n"
"$user->roles()->updateExistingPivot($roleId, [\n"
"    'active' => false,\n"
"]);"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1896
#: ./docs/9.x/eloquent-relationships.md:1994
#: ./docs/10.x/eloquent-relationships.md:2058
#: ./docs/11.x/eloquent-relationships.md:2148
#: ./docs/master/eloquent-relationships.md:2055
#~ msgctxt "P"
#~ msgid "<a name=\"touching-parent-timestamps\"></a>"
#~ msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1897
#: ./docs/9.x/eloquent-relationships.md:1995
#: ./docs/10.x/eloquent-relationships.md:2059
#: ./docs/11.x/eloquent-relationships.md:2149
#: ./docs/master/eloquent-relationships.md:2056
msgctxt "H2"
msgid "Touching Parent Timestamps"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1899
#: ./docs/9.x/eloquent-relationships.md:1997
#: ./docs/10.x/eloquent-relationships.md:2061
#: ./docs/11.x/eloquent-relationships.md:2151
#: ./docs/master/eloquent-relationships.md:2058
msgctxt "P"
msgid "When a model defines a `belongsTo` or `belongsToMany` relationship to another model, such as a `Comment` which belongs to a `Post`, it is sometimes helpful to update the parent's timestamp when the child model is updated."
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1901
#: ./docs/9.x/eloquent-relationships.md:1999
#: ./docs/10.x/eloquent-relationships.md:2063
#: ./docs/11.x/eloquent-relationships.md:2153
#: ./docs/master/eloquent-relationships.md:2060
msgctxt "P"
msgid "For example, when a `Comment` model is updated, you may want to automatically \"touch\" the `updated_at` timestamp of the owning `Post` so that it is set to the current date and time. To accomplish this, you may add a `touches` property to your child model containing the names of the relationships that should have their `updated_at` timestamps updated when the child model is updated:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1903
#: ./docs/11.x/eloquent-relationships.md:1993
#: ./docs/master/eloquent-relationships.md:1900
msgctxt "H4"
msgid "Recursively Saving Models and Relationships"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1903
#: ./docs/9.x/eloquent-relationships.md:2001
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * All of the relationships to be touched.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $touches = ['post'];\n\n"
"    /**\n"
"     * Get the post that the comment belongs to.\n"
"     */\n"
"    public function post()\n"
"    {\n"
"        return $this->belongsTo(Post::class);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/eloquent-relationships.md:1927
#: ./docs/9.x/eloquent-relationships.md:2026
#: ./docs/10.x/eloquent-relationships.md:2091
#: ./docs/11.x/eloquent-relationships.md:2181
#: ./docs/master/eloquent-relationships.md:2088
msgctxt "P"
msgid "Parent model timestamps will only be updated if the child model is updated using Eloquent's `save` method."
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1940
#: ./docs/11.x/eloquent-relationships.md:2030
#: ./docs/master/eloquent-relationships.md:1937
msgctxt "P"
msgid "The `createQuietly` and `createManyQuietly` methods may be used to create a model(s) without dispatching any events:"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:1942
#: ./docs/11.x/eloquent-relationships.md:2032
#: ./docs/master/eloquent-relationships.md:1939
msgctxt "CODE"
msgid "$user = User::find(1);\n\n"
"$user->posts()->createQuietly([\n"
"    'title' => 'Post title.',\n"
"]);\n\n"
"$user->posts()->createManyQuietly([\n"
"    ['title' => 'First post.'],\n"
"    ['title' => 'Second post.'],\n"
"]);"
msgstr ""

#: ./docs/9.x/eloquent-relationships.md:1978
#: ./docs/10.x/eloquent-relationships.md:2042
#: ./docs/11.x/eloquent-relationships.md:2132
#: ./docs/master/eloquent-relationships.md:2039
msgctxt "CODE"
msgid "$user->roles()->toggle([\n"
"    1 => ['expires' => true],\n"
"    2 => ['expires' => true],\n"
"]);"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:2048
#: ./docs/11.x/eloquent-relationships.md:2138
#: ./docs/master/eloquent-relationships.md:2045
msgctxt "H4"
msgid "Updating a Record on the Intermediate Table"
msgstr ""

#: ./docs/10.x/eloquent-relationships.md:2065
#: ./docs/11.x/eloquent-relationships.md:2155
#: ./docs/master/eloquent-relationships.md:2062
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\n"
"class Comment extends Model\n"
"{\n"
"    /**\n"
"     * All of the relationships to be touched.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $touches = ['post'];\n\n"
"    /**\n"
"     * Get the post that the comment belongs to.\n"
"     */\n"
"    public function post(): BelongsTo\n"
"    {\n"
"        return $this->belongsTo(Post::class);\n"
"    }\n"
"}"
msgstr ""

