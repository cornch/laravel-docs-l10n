msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/prompts.pot\n"
"X-Crowdin-File-ID: 190\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:58\n"

#: ./docs/10.x/prompts.md:1
#: ./docs/11.x/prompts.md:1
#: ./docs/master/prompts.md:1
msgctxt "H1"
msgid "Prompts"
msgstr ""

#: ./docs/10.x/prompts.md:3
#: ./docs/11.x/prompts.md:3
#: ./docs/master/prompts.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/prompts.md:4
#: ./docs/11.x/prompts.md:4
#: ./docs/master/prompts.md:4
msgctxt "P"
msgid "[Installation](#installation)"
msgstr ""

#: ./docs/10.x/prompts.md:5
#: ./docs/11.x/prompts.md:5
#: ./docs/master/prompts.md:5
msgctxt "P"
msgid "[Available Prompts](#available-prompts)"
msgstr ""

#: ./docs/10.x/prompts.md:6
#: ./docs/11.x/prompts.md:6
#: ./docs/master/prompts.md:6
msgctxt "P"
msgid "[Text](#text)"
msgstr ""

#: ./docs/10.x/prompts.md:7
#: ./docs/11.x/prompts.md:8
#: ./docs/master/prompts.md:7
msgctxt "P"
msgid "[Password](#password)"
msgstr ""

#: ./docs/11.x/prompts.md:7
msgctxt "P"
msgid "[Textarea](#textarea)"
msgstr ""

#: ./docs/10.x/prompts.md:8
#: ./docs/11.x/prompts.md:9
#: ./docs/master/prompts.md:8
msgctxt "P"
msgid "[Confirm](#confirm)"
msgstr ""

#: ./docs/10.x/prompts.md:9
#: ./docs/11.x/prompts.md:10
#: ./docs/master/prompts.md:9
msgctxt "P"
msgid "[Select](#select)"
msgstr ""

#: ./docs/10.x/prompts.md:10
#: ./docs/11.x/prompts.md:11
#: ./docs/master/prompts.md:10
msgctxt "P"
msgid "[Multi-select](#multiselect)"
msgstr ""

#: ./docs/10.x/prompts.md:11
#: ./docs/11.x/prompts.md:12
#: ./docs/master/prompts.md:11
msgctxt "P"
msgid "[Suggest](#suggest)"
msgstr ""

#: ./docs/10.x/prompts.md:12
#: ./docs/11.x/prompts.md:13
#: ./docs/master/prompts.md:12
msgctxt "P"
msgid "[Search](#search)"
msgstr ""

#: ./docs/10.x/prompts.md:13
#: ./docs/11.x/prompts.md:14
#: ./docs/master/prompts.md:13
msgctxt "P"
msgid "[Multi-search](#multisearch)"
msgstr ""

#: ./docs/10.x/prompts.md:14
#: ./docs/11.x/prompts.md:15
#: ./docs/master/prompts.md:14
msgctxt "P"
msgid "[Pause](#pause)"
msgstr ""

#: ./docs/10.x/prompts.md:15
#: ./docs/11.x/prompts.md:18
#: ./docs/master/prompts.md:15
msgctxt "P"
msgid "[Informational Messages](#informational-messages)"
msgstr ""

#: ./docs/10.x/prompts.md:16
#: ./docs/11.x/prompts.md:19
#: ./docs/master/prompts.md:16
msgctxt "P"
msgid "[Tables](#tables)"
msgstr ""

#: ./docs/11.x/prompts.md:16
msgctxt "P"
msgid "[Transforming Input Before Validation](#transforming-input-before-validation)"
msgstr ""

#: ./docs/10.x/prompts.md:17
#: ./docs/11.x/prompts.md:20
#: ./docs/master/prompts.md:17
msgctxt "P"
msgid "[Spin](#spin)"
msgstr ""

#: ./docs/11.x/prompts.md:17
msgctxt "P"
msgid "[Forms](#forms)"
msgstr ""

#: ./docs/10.x/prompts.md:18
#: ./docs/11.x/prompts.md:21
#: ./docs/master/prompts.md:18
msgctxt "P"
msgid "[Progress Bar](#progress)"
msgstr ""

#: ./docs/10.x/prompts.md:19
#: ./docs/11.x/prompts.md:23
#: ./docs/master/prompts.md:19
msgctxt "P"
msgid "[Terminal Considerations](#terminal-considerations)"
msgstr ""

#: ./docs/10.x/prompts.md:20
#: ./docs/11.x/prompts.md:24
#: ./docs/master/prompts.md:20
msgctxt "P"
msgid "[Unsupported Environments and Fallbacks](#fallbacks)"
msgstr ""

#: ./docs/10.x/prompts.md:22
#: ./docs/11.x/prompts.md:26
#: ./docs/master/prompts.md:22
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/11.x/prompts.md:22
msgctxt "P"
msgid "[Clearing the Terminal](#clear)"
msgstr ""

#: ./docs/10.x/prompts.md:23
#: ./docs/11.x/prompts.md:27
#: ./docs/master/prompts.md:23
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/10.x/prompts.md:25
#: ./docs/11.x/prompts.md:29
#: ./docs/master/prompts.md:25
msgctxt "P"
msgid "[Laravel Prompts](https://github.com/laravel/prompts) is a PHP package for adding beautiful and user-friendly forms to your command-line applications, with browser-like features including placeholder text and validation."
msgstr ""

#: ./docs/10.x/prompts.md:29
#: ./docs/11.x/prompts.md:33
#: ./docs/master/prompts.md:29
msgctxt "P"
msgid "Laravel Prompts is perfect for accepting user input in your [Artisan console commands](/docs/{{version}}/artisan#writing-commands), but it may also be used in any command-line PHP project."
msgstr ""

#: ./docs/10.x/prompts.md:32
#: ./docs/11.x/prompts.md:36
#: ./docs/master/prompts.md:32
msgctxt "P"
msgid "Laravel Prompts supports macOS, Linux, and Windows with WSL. For more information, please see our documentation on [unsupported environments & fallbacks](#fallbacks)."
msgstr ""

#: ./docs/10.x/prompts.md:34
#: ./docs/11.x/prompts.md:38
#: ./docs/master/prompts.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:35
#: ./docs/11.x/prompts.md:39
#: ./docs/master/prompts.md:35
msgctxt "H2"
msgid "Installation"
msgstr ""

#: ./docs/10.x/prompts.md:37
#: ./docs/11.x/prompts.md:41
#: ./docs/master/prompts.md:37
msgctxt "P"
msgid "Laravel Prompts is already included with the latest release of Laravel."
msgstr ""

#: ./docs/10.x/prompts.md:39
#: ./docs/11.x/prompts.md:43
#: ./docs/master/prompts.md:39
msgctxt "P"
msgid "Laravel Prompts may also be installed in your other PHP projects by using the Composer package manager:"
msgstr ""

#: ./docs/10.x/prompts.md:41
#: ./docs/11.x/prompts.md:45
#: ./docs/master/prompts.md:41
msgctxt "CODE: shell"
msgid "composer require laravel/prompts"
msgstr ""

#: ./docs/10.x/prompts.md:45
#: ./docs/11.x/prompts.md:49
#: ./docs/master/prompts.md:45
#~ msgctxt "P"
#~ msgid "<a name=\"available-prompts\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:46
#: ./docs/11.x/prompts.md:50
#: ./docs/master/prompts.md:46
msgctxt "H2"
msgid "Available Prompts"
msgstr ""

#: ./docs/10.x/prompts.md:48
#: ./docs/11.x/prompts.md:52
#: ./docs/master/prompts.md:48
#~ msgctxt "P"
#~ msgid "<a name=\"text\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:49
#: ./docs/11.x/prompts.md:53
#: ./docs/master/prompts.md:49
msgctxt "H3"
msgid "Text"
msgstr ""

#: ./docs/10.x/prompts.md:51
#: ./docs/11.x/prompts.md:55
#: ./docs/master/prompts.md:51
msgctxt "P"
msgid "The `text` function will prompt the user with the given question, accept their input, and then return it:"
msgstr ""

#: ./docs/10.x/prompts.md:53
#: ./docs/11.x/prompts.md:57
#: ./docs/master/prompts.md:53
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\text;\n\n"
"$name = text('What is your name?');"
msgstr ""

#: ./docs/10.x/prompts.md:59
#: ./docs/10.x/prompts.md:401
#: ./docs/11.x/prompts.md:63
#: ./docs/11.x/prompts.md:133
#: ./docs/11.x/prompts.md:492
#: ./docs/master/prompts.md:59
#: ./docs/master/prompts.md:419
msgctxt "P"
msgid "You may also include placeholder text, a default value, and an informational hint:"
msgstr ""

#: ./docs/10.x/prompts.md:61
#: ./docs/11.x/prompts.md:65
#: ./docs/master/prompts.md:61
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    default: $user?->name,\n"
"    hint: 'This will be displayed on your profile.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:70
#: ./docs/11.x/prompts.md:74
#: ./docs/master/prompts.md:70
#~ msgctxt "P"
#~ msgid "<a name=\"text-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:71
#: ./docs/10.x/prompts.md:131
#: ./docs/10.x/prompts.md:414
#: ./docs/11.x/prompts.md:75
#: ./docs/11.x/prompts.md:144
#: ./docs/11.x/prompts.md:213
#: ./docs/11.x/prompts.md:505
#: ./docs/master/prompts.md:71
#: ./docs/master/prompts.md:140
#: ./docs/master/prompts.md:432
msgctxt "H4"
msgid "Required Values"
msgstr ""

#: ./docs/10.x/prompts.md:73
#: ./docs/10.x/prompts.md:133
#: ./docs/10.x/prompts.md:416
#: ./docs/11.x/prompts.md:77
#: ./docs/11.x/prompts.md:146
#: ./docs/11.x/prompts.md:215
#: ./docs/11.x/prompts.md:507
#: ./docs/master/prompts.md:73
#: ./docs/master/prompts.md:142
#: ./docs/master/prompts.md:434
msgctxt "P"
msgid "If you require a value to be entered, you may pass the `required` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:75
#: ./docs/11.x/prompts.md:79
#: ./docs/master/prompts.md:75
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:82
#: ./docs/10.x/prompts.md:142
#: ./docs/10.x/prompts.md:203
#: ./docs/10.x/prompts.md:426
#: ./docs/11.x/prompts.md:86
#: ./docs/11.x/prompts.md:155
#: ./docs/11.x/prompts.md:224
#: ./docs/11.x/prompts.md:294
#: ./docs/11.x/prompts.md:517
#: ./docs/master/prompts.md:82
#: ./docs/master/prompts.md:151
#: ./docs/master/prompts.md:221
#: ./docs/master/prompts.md:444
msgctxt "P"
msgid "If you would like to customize the validation message, you may also pass a string:"
msgstr ""

#: ./docs/10.x/prompts.md:84
#: ./docs/11.x/prompts.md:88
#: ./docs/master/prompts.md:84
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    required: 'Your name is required.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:91
#: ./docs/11.x/prompts.md:95
#: ./docs/master/prompts.md:91
#~ msgctxt "P"
#~ msgid "<a name=\"text-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:92
#: ./docs/10.x/prompts.md:152
#: ./docs/10.x/prompts.md:437
#: ./docs/11.x/prompts.md:96
#: ./docs/11.x/prompts.md:165
#: ./docs/11.x/prompts.md:234
#: ./docs/11.x/prompts.md:353
#: ./docs/11.x/prompts.md:450
#: ./docs/11.x/prompts.md:528
#: ./docs/11.x/prompts.md:614
#: ./docs/11.x/prompts.md:721
#: ./docs/master/prompts.md:92
#: ./docs/master/prompts.md:161
#: ./docs/master/prompts.md:455
msgctxt "H4"
msgid "Additional Validation"
msgstr ""

#: ./docs/10.x/prompts.md:94
#: ./docs/10.x/prompts.md:154
#: ./docs/10.x/prompts.md:439
#: ./docs/11.x/prompts.md:98
#: ./docs/11.x/prompts.md:167
#: ./docs/11.x/prompts.md:236
#: ./docs/11.x/prompts.md:530
#: ./docs/master/prompts.md:94
#: ./docs/master/prompts.md:163
#: ./docs/master/prompts.md:457
msgctxt "P"
msgid "Finally, if you would like to perform additional validation logic, you may pass a closure to the `validate` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:96
#: ./docs/11.x/prompts.md:100
#: ./docs/master/prompts.md:96
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 3 => 'The name must be at least 3 characters.',\n"
"        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n"
"        default => null\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:107
#: ./docs/10.x/prompts.md:166
#: ./docs/10.x/prompts.md:453
#: ./docs/11.x/prompts.md:111
#: ./docs/11.x/prompts.md:180
#: ./docs/11.x/prompts.md:248
#: ./docs/11.x/prompts.md:544
#: ./docs/master/prompts.md:107
#: ./docs/master/prompts.md:175
#: ./docs/master/prompts.md:471
msgctxt "P"
msgid "The closure will receive the value that has been entered and may return an error message, or `null` if the validation passes."
msgstr ""

#: ./docs/10.x/prompts.md:109
#: ./docs/11.x/prompts.md:191
#: ./docs/master/prompts.md:118
#~ msgctxt "P"
#~ msgid "<a name=\"password\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:110
#: ./docs/11.x/prompts.md:192
#: ./docs/master/prompts.md:119
msgctxt "H3"
msgid "Password"
msgstr ""

#: ./docs/master/prompts.md:111
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    validate: ['name' => 'required|max:255|unique:users,name']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:112
#: ./docs/11.x/prompts.md:194
#: ./docs/master/prompts.md:121
msgctxt "P"
msgid "The `password` function is similar to the `text` function, but the user's input will be masked as they type in the console. This is useful when asking for sensitive information such as passwords:"
msgstr ""

#: ./docs/11.x/prompts.md:113
#: ./docs/11.x/prompts.md:182
#: ./docs/11.x/prompts.md:250
#: ./docs/11.x/prompts.md:546
#: ./docs/master/prompts.md:109
#: ./docs/master/prompts.md:177
#: ./docs/master/prompts.md:473
msgctxt "P"
msgid "Alternatively, you may leverage the power of Laravel's [validator](/docs/{{version}}/validation). To do so, provide an array containing the name of the attribute and the desired validation rules to the `validate` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:114
#: ./docs/11.x/prompts.md:196
#: ./docs/master/prompts.md:123
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\password;\n\n"
"$password = password('What is your password?');"
msgstr ""

#: ./docs/11.x/prompts.md:115
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    validate: ['name' => 'required|max:255|unique:users']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:120
#: ./docs/10.x/prompts.md:473
#: ./docs/10.x/prompts.md:539
#: ./docs/11.x/prompts.md:202
#: ./docs/11.x/prompts.md:588
#: ./docs/11.x/prompts.md:668
#: ./docs/master/prompts.md:129
#: ./docs/master/prompts.md:501
#: ./docs/master/prompts.md:567
msgctxt "P"
msgid "You may also include placeholder text and an informational hint:"
msgstr ""

#: ./docs/10.x/prompts.md:122
#: ./docs/11.x/prompts.md:204
#: ./docs/master/prompts.md:131
msgctxt "CODE: php"
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    placeholder: 'password',\n"
"    hint: 'Minimum 8 characters.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:122
#~ msgctxt "P"
#~ msgid "<a name=\"textarea\"></a>"
#~ msgstr ""

#: ./docs/11.x/prompts.md:123
msgctxt "H3"
msgid "Textarea"
msgstr ""

#: ./docs/11.x/prompts.md:125
msgctxt "P"
msgid "The `textarea` function will prompt the user with the given question, accept their input via a multi-line textarea, and then return it:"
msgstr ""

#: ./docs/11.x/prompts.md:127
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\textarea;\n\n"
"$story = textarea('Tell me a story.');"
msgstr ""

#: ./docs/10.x/prompts.md:130
#: ./docs/11.x/prompts.md:212
#: ./docs/master/prompts.md:139
#~ msgctxt "P"
#~ msgid "<a name=\"password-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:135
#: ./docs/11.x/prompts.md:217
#: ./docs/master/prompts.md:144
msgctxt "CODE: php"
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:135
msgctxt "CODE: php"
msgid "$story = textarea(\n"
"    label: 'Tell me a story.',\n"
"    placeholder: 'This is a story about...',\n"
"    hint: 'This will be displayed on your profile.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:143
#~ msgctxt "P"
#~ msgid "<a name=\"textarea-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:144
#: ./docs/11.x/prompts.md:226
#: ./docs/master/prompts.md:153
msgctxt "CODE: php"
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    required: 'The password is required.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:148
msgctxt "CODE: php"
msgid "$story = textarea(\n"
"    label: 'Tell me a story.',\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:151
#: ./docs/11.x/prompts.md:233
#: ./docs/master/prompts.md:160
#~ msgctxt "P"
#~ msgid "<a name=\"password-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:156
#: ./docs/11.x/prompts.md:238
#: ./docs/master/prompts.md:165
msgctxt "CODE: php"
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 8 => 'The password must be at least 8 characters.',\n"
"        default => null\n"
"    }\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:157
msgctxt "CODE: php"
msgid "$story = textarea(\n"
"    label: 'Tell me a story.',\n"
"    required: 'A story is required.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:164
#~ msgctxt "P"
#~ msgid "<a name=\"textarea-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:168
#: ./docs/11.x/prompts.md:259
#: ./docs/master/prompts.md:186
#~ msgctxt "P"
#~ msgid "<a name=\"confirm\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:169
#: ./docs/11.x/prompts.md:260
#: ./docs/master/prompts.md:187
msgctxt "H3"
msgid "Confirm"
msgstr ""

#: ./docs/11.x/prompts.md:169
msgctxt "CODE: php"
msgid "$story = textarea(\n"
"    label: 'Tell me a story.',\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 250 => 'The story must be at least 250 characters.',\n"
"        strlen($value) > 10000 => 'The story must not exceed 10,000 characters.',\n"
"        default => null\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:171
#: ./docs/11.x/prompts.md:262
#: ./docs/master/prompts.md:189
msgctxt "P"
msgid "If you need to ask the user for a \"yes or no\" confirmation, you may use the `confirm` function. Users may use the arrow keys or press `y` or `n` to select their response. This function will return either `true` or `false`."
msgstr ""

#: ./docs/10.x/prompts.md:173
#: ./docs/11.x/prompts.md:264
#: ./docs/master/prompts.md:191
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\confirm;\n\n"
"$confirmed = confirm('Do you accept the terms?');"
msgstr ""

#: ./docs/10.x/prompts.md:179
#: ./docs/11.x/prompts.md:270
#: ./docs/master/prompts.md:197
msgctxt "P"
msgid "You may also include a default value, customized wording for the \"Yes\" and \"No\" labels, and an informational hint:"
msgstr ""

#: ./docs/10.x/prompts.md:181
#: ./docs/11.x/prompts.md:272
#: ./docs/master/prompts.md:199
msgctxt "CODE: php"
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    default: false,\n"
"    yes: 'I accept',\n"
"    no: 'I decline',\n"
"    hint: 'The terms must be accepted to continue.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:184
msgctxt "CODE: php"
msgid "$story = textarea(\n"
"    label: 'Tell me a story.',\n"
"    validate: ['story' => 'required|max:10000']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:191
#: ./docs/11.x/prompts.md:282
#: ./docs/master/prompts.md:209
#~ msgctxt "P"
#~ msgid "<a name=\"confirm-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:192
#: ./docs/11.x/prompts.md:283
#: ./docs/master/prompts.md:210
msgctxt "H4"
msgid "Requiring \"Yes\""
msgstr ""

#: ./docs/10.x/prompts.md:194
#: ./docs/11.x/prompts.md:285
#: ./docs/master/prompts.md:212
msgctxt "P"
msgid "If necessary, you may require your users to select \"Yes\" by passing the `required` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:196
#: ./docs/11.x/prompts.md:287
#: ./docs/master/prompts.md:214
msgctxt "CODE: php"
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:205
#: ./docs/11.x/prompts.md:296
#: ./docs/master/prompts.md:223
msgctxt "CODE: php"
msgid "$confirmed = confirm(\n"
"    label: 'Do you accept the terms?',\n"
"    required: 'You must accept the terms to continue.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:212
#: ./docs/11.x/prompts.md:303
#: ./docs/master/prompts.md:230
#~ msgctxt "P"
#~ msgid "<a name=\"select\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:213
#: ./docs/11.x/prompts.md:304
#: ./docs/master/prompts.md:231
msgctxt "H3"
msgid "Select"
msgstr ""

#: ./docs/10.x/prompts.md:215
#: ./docs/11.x/prompts.md:306
#: ./docs/master/prompts.md:233
msgctxt "P"
msgid "If you need the user to select from a predefined set of choices, you may use the `select` function:"
msgstr ""

#: ./docs/10.x/prompts.md:217
#: ./docs/master/prompts.md:235
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\select;\n\n"
"$role = select(\n"
"    'What role should the user have?',\n"
"    ['Member', 'Contributor', 'Owner'],\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:226
#: ./docs/11.x/prompts.md:317
#: ./docs/master/prompts.md:244
msgctxt "P"
msgid "You may also specify the default choice and an informational hint:"
msgstr ""

#: ./docs/10.x/prompts.md:228
#: ./docs/11.x/prompts.md:319
#: ./docs/master/prompts.md:246
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: ['Member', 'Contributor', 'Owner'],\n"
"    default: 'Owner',\n"
"    hint: 'The role may be changed at any time.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:237
#: ./docs/11.x/prompts.md:328
#: ./docs/master/prompts.md:255
msgctxt "P"
msgid "You may also pass an associative array to the `options` argument to have the selected key returned instead of its value:"
msgstr ""

#: ./docs/10.x/prompts.md:239
#: ./docs/master/prompts.md:257
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner'\n"
"    ],\n"
"    default: 'owner'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:251
#: ./docs/10.x/prompts.md:325
#: ./docs/10.x/prompts.md:486
#: ./docs/11.x/prompts.md:342
#: ./docs/11.x/prompts.md:416
#: ./docs/11.x/prompts.md:601
#: ./docs/master/prompts.md:269
#: ./docs/master/prompts.md:343
#: ./docs/master/prompts.md:514
msgctxt "P"
msgid "Up to five options will be displayed before the list begins to scroll. You may customize this by passing the `scroll` argument:"
msgstr ""

#: ./docs/11.x/prompts.md:252
#: ./docs/master/prompts.md:179
msgctxt "CODE: php"
msgid "$password = password(\n"
"    label: 'What is your password?',\n"
"    validate: ['password' => 'min:8']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:253
#: ./docs/11.x/prompts.md:344
#: ./docs/master/prompts.md:271
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'Which category would you like to assign?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:261
#: ./docs/11.x/prompts.md:352
#: ./docs/master/prompts.md:279
#~ msgctxt "P"
#~ msgid "<a name=\"select-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:262
#: ./docs/10.x/prompts.md:359
#: ./docs/10.x/prompts.md:499
#: ./docs/10.x/prompts.md:592
#: ./docs/master/prompts.md:280
#: ./docs/master/prompts.md:377
#: ./docs/master/prompts.md:527
#: ./docs/master/prompts.md:620
msgctxt "H4"
msgid "Validation"
msgstr ""

#: ./docs/10.x/prompts.md:264
#: ./docs/11.x/prompts.md:355
#: ./docs/master/prompts.md:282
msgctxt "P"
msgid "Unlike other prompt functions, the `select` function doesn't accept the `required` argument because it is not possible to select nothing. However, you may pass a closure to the `validate` argument if you need to present an option but prevent it from being selected:"
msgstr ""

#: ./docs/10.x/prompts.md:266
#: ./docs/master/prompts.md:284
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner'\n"
"    ],\n"
"    validate: fn (string $value) =>\n"
"        $value === 'owner' && User::where('role', 'owner')->exists()\n"
"            ? 'An owner already exists.'\n"
"            : null\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:281
#: ./docs/11.x/prompts.md:372
#: ./docs/master/prompts.md:299
msgctxt "P"
msgid "If the `options` argument is an associative array, then the closure will receive the selected key, otherwise it will receive the selected value. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: ./docs/10.x/prompts.md:283
#: ./docs/11.x/prompts.md:374
#: ./docs/master/prompts.md:301
#~ msgctxt "P"
#~ msgid "<a name=\"multiselect\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:284
#: ./docs/11.x/prompts.md:375
#: ./docs/master/prompts.md:302
msgctxt "H3"
msgid "Multi-select"
msgstr ""

#: ./docs/10.x/prompts.md:286
#: ./docs/master/prompts.md:304
msgctxt "P"
msgid "If you need to the user to be able to select multiple options, you may use the `multiselect` function:"
msgstr ""

#: ./docs/10.x/prompts.md:288
#: ./docs/master/prompts.md:306
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\multiselect;\n\n"
"$permissions = multiselect(\n"
"    'What permissions should be assigned?',\n"
"    ['Read', 'Create', 'Update', 'Delete']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:297
#: ./docs/11.x/prompts.md:388
#: ./docs/master/prompts.md:315
msgctxt "P"
msgid "You may also specify default choices and an informational hint:"
msgstr ""

#: ./docs/10.x/prompts.md:299
#: ./docs/11.x/prompts.md:390
#: ./docs/master/prompts.md:317
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\multiselect;\n\n"
"$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: ['Read', 'Create', 'Update', 'Delete'],\n"
"    default: ['Read', 'Create'],\n"
"    hint: 'Permissions may be updated at any time.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:308
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\select;\n\n"
"$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: ['Member', 'Contributor', 'Owner']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:310
#: ./docs/11.x/prompts.md:401
#: ./docs/master/prompts.md:328
msgctxt "P"
msgid "You may also pass an associative array to the `options` argument to return the selected options' keys instead of their values:"
msgstr ""

#: ./docs/10.x/prompts.md:312
#: ./docs/master/prompts.md:330
msgctxt "CODE"
msgid "$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete'\n"
"    ],\n"
"    default: ['read', 'create']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:327
#: ./docs/11.x/prompts.md:418
#: ./docs/master/prompts.md:345
msgctxt "CODE: php"
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:330
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner',\n"
"    ],\n"
"    default: 'owner'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:335
#: ./docs/11.x/prompts.md:426
#: ./docs/master/prompts.md:353
#~ msgctxt "P"
#~ msgid "<a name=\"multiselect-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:336
#: ./docs/10.x/prompts.md:565
#: ./docs/11.x/prompts.md:427
#: ./docs/11.x/prompts.md:694
#: ./docs/master/prompts.md:354
#: ./docs/master/prompts.md:593
msgctxt "H4"
msgid "Requiring a Value"
msgstr ""

#: ./docs/10.x/prompts.md:338
#: ./docs/10.x/prompts.md:567
#: ./docs/11.x/prompts.md:429
#: ./docs/11.x/prompts.md:696
#: ./docs/master/prompts.md:356
#: ./docs/master/prompts.md:595
msgctxt "P"
msgid "By default, the user may select zero or more options. You may pass the `required` argument to enforce one or more options instead:"
msgstr ""

#: ./docs/10.x/prompts.md:340
#: ./docs/master/prompts.md:358
msgctxt "CODE: php"
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: true,\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:348
#: ./docs/11.x/prompts.md:439
#: ./docs/master/prompts.md:366
msgctxt "P"
msgid "If you would like to customize the validation message, you may provide a string to the `required` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:350
#: ./docs/master/prompts.md:368
msgctxt "CODE: php"
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: 'You must select at least one category',\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:357
msgctxt "CODE: php"
msgid "$role = select(\n"
"    label: 'What role should the user have?',\n"
"    options: [\n"
"        'member' => 'Member',\n"
"        'contributor' => 'Contributor',\n"
"        'owner' => 'Owner',\n"
"    ],\n"
"    validate: fn (string $value) =>\n"
"        $value === 'owner' && User::where('role', 'owner')->exists()\n"
"            ? 'An owner already exists.'\n"
"            : null\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:358
#: ./docs/11.x/prompts.md:449
#: ./docs/master/prompts.md:376
#~ msgctxt "P"
#~ msgid "<a name=\"multiselect-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:361
#: ./docs/11.x/prompts.md:452
#: ./docs/master/prompts.md:379
msgctxt "P"
msgid "You may pass a closure to the `validate` argument if you need to present an option but prevent it from being selected:"
msgstr ""

#: ./docs/10.x/prompts.md:363
#: ./docs/master/prompts.md:381
msgctxt "CODE"
msgid "$permissions = multiselect(\n"
"    label: 'What permissions should the user have?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete'\n"
"    ],\n"
"    validate: fn (array $values) => ! in_array('read', $values)\n"
"        ? 'All users require the read permission.'\n"
"        : null\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:377
msgctxt "P"
msgid "If you need the user to be able to select multiple options, you may use the `multiselect` function:"
msgstr ""

#: ./docs/10.x/prompts.md:378
#: ./docs/11.x/prompts.md:469
#: ./docs/master/prompts.md:396
msgctxt "P"
msgid "If the `options` argument is an associative array then the closure will receive the selected keys, otherwise it will receive the selected values. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: ./docs/11.x/prompts.md:379
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\multiselect;\n\n"
"$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: ['Read', 'Create', 'Update', 'Delete']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:380
#: ./docs/11.x/prompts.md:471
#: ./docs/master/prompts.md:398
#~ msgctxt "P"
#~ msgid "<a name=\"suggest\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:381
#: ./docs/11.x/prompts.md:472
#: ./docs/master/prompts.md:399
msgctxt "H3"
msgid "Suggest"
msgstr ""

#: ./docs/10.x/prompts.md:383
#: ./docs/11.x/prompts.md:474
#: ./docs/master/prompts.md:401
msgctxt "P"
msgid "The `suggest` function can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

#: ./docs/10.x/prompts.md:385
#: ./docs/11.x/prompts.md:476
#: ./docs/master/prompts.md:403
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\suggest;\n\n"
"$name = suggest('What is your name?', ['Taylor', 'Dayle']);"
msgstr ""

#: ./docs/10.x/prompts.md:391
#: ./docs/11.x/prompts.md:482
#: ./docs/master/prompts.md:409
msgctxt "P"
msgid "Alternatively, you may pass a closure as the second argument to the `suggest` function. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far and return an array of options for auto-completion:"
msgstr ""

#: ./docs/10.x/prompts.md:393
#: ./docs/master/prompts.md:411
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    'What is your name?',\n"
"    fn ($value) => collect(['Taylor', 'Dayle'])\n"
"        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n"
")"
msgstr ""

#: ./docs/10.x/prompts.md:403
#: ./docs/11.x/prompts.md:494
#: ./docs/master/prompts.md:421
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    placeholder: 'E.g. Taylor',\n"
"    default: $user?->name,\n"
"    hint: 'This will be displayed on your profile.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:403
msgctxt "CODE: php"
msgid "$permissions = multiselect(\n"
"    label: 'What permissions should be assigned?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete',\n"
"    ],\n"
"    default: ['read', 'create']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:413
#: ./docs/11.x/prompts.md:504
#: ./docs/master/prompts.md:431
#~ msgctxt "P"
#~ msgid "<a name=\"suggest-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:418
#: ./docs/11.x/prompts.md:509
#: ./docs/master/prompts.md:436
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:428
#: ./docs/11.x/prompts.md:519
#: ./docs/master/prompts.md:446
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    required: 'Your name is required.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:431
msgctxt "CODE: php"
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:436
#: ./docs/11.x/prompts.md:527
#: ./docs/master/prompts.md:454
#~ msgctxt "P"
#~ msgid "<a name=\"suggest-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:441
#: ./docs/11.x/prompts.md:532
#: ./docs/master/prompts.md:459
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 3 => 'The name must be at least 3 characters.',\n"
"        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n"
"        default => null\n"
"    }\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:441
msgctxt "CODE: php"
msgid "$categories = multiselect(\n"
"    label: 'What categories should be assigned?',\n"
"    options: Category::pluck('name', 'id'),\n"
"    required: 'You must select at least one category'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:454
msgctxt "CODE: php"
msgid "$permissions = multiselect(\n"
"    label: 'What permissions should the user have?',\n"
"    options: [\n"
"        'read' => 'Read',\n"
"        'create' => 'Create',\n"
"        'update' => 'Update',\n"
"        'delete' => 'Delete',\n"
"    ],\n"
"    validate: fn (array $values) => ! in_array('read', $values)\n"
"        ? 'All users require the read permission.'\n"
"        : null\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:455
#: ./docs/11.x/prompts.md:556
#: ./docs/master/prompts.md:483
#~ msgctxt "P"
#~ msgid "<a name=\"search\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:456
#: ./docs/11.x/prompts.md:557
#: ./docs/master/prompts.md:484
msgctxt "H3"
msgid "Search"
msgstr ""

#: ./docs/10.x/prompts.md:458
#: ./docs/11.x/prompts.md:559
#: ./docs/master/prompts.md:486
msgctxt "P"
msgid "If you have a lot of options for the user to select from, the `search` function allows the user to type a search query to filter the results before using the arrow keys to select an option:"
msgstr ""

#: ./docs/10.x/prompts.md:460
#: ./docs/master/prompts.md:488
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\search;\n\n"
"$id = search(\n"
"    'Search for the user that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:471
#: ./docs/11.x/prompts.md:572
#: ./docs/master/prompts.md:499
msgctxt "P"
msgid "The closure will receive the text that has been typed by the user so far and must return an array of options. If you return an associative array then the selected option's key will be returned, otherwise its value will be returned instead."
msgstr ""

#: ./docs/10.x/prompts.md:475
#: ./docs/master/prompts.md:503
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:484
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: fn ($value) => collect(['Taylor', 'Dayle'])\n"
"        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n"
")"
msgstr ""

#: ./docs/10.x/prompts.md:488
#: ./docs/master/prompts.md:516
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:498
#: ./docs/11.x/prompts.md:613
#: ./docs/master/prompts.md:526
#~ msgctxt "P"
#~ msgid "<a name=\"search-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:501
#: ./docs/10.x/prompts.md:594
#: ./docs/11.x/prompts.md:616
#: ./docs/11.x/prompts.md:723
#: ./docs/master/prompts.md:529
#: ./docs/master/prompts.md:622
msgctxt "P"
msgid "If you would like to perform additional validation logic, you may pass a closure to the `validate` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:503
#: ./docs/master/prompts.md:531
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (int|string $value) {\n"
"        $user = User::findOrFail($value);\n\n"
"        if ($user->opted_out) {\n"
"            return 'This user has opted-out of receiving mail.';\n"
"        }\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:519
#: ./docs/11.x/prompts.md:634
#: ./docs/master/prompts.md:547
msgctxt "P"
msgid "If the `options` closure returns an associative array, then the closure will receive the selected key, otherwise, it will receive the selected value. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: ./docs/10.x/prompts.md:521
#: ./docs/11.x/prompts.md:636
#: ./docs/master/prompts.md:549
#~ msgctxt "P"
#~ msgid "<a name=\"multisearch\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:522
#: ./docs/11.x/prompts.md:637
#: ./docs/master/prompts.md:550
msgctxt "H3"
msgid "Multi-search"
msgstr ""

#: ./docs/10.x/prompts.md:524
#: ./docs/11.x/prompts.md:639
#: ./docs/master/prompts.md:552
msgctxt "P"
msgid "If you have a lot of searchable options and need the user to be able to select multiple items, the `multisearch` function allows the user to type a search query to filter the results before using the arrow keys and space-bar to select options:"
msgstr ""

#: ./docs/10.x/prompts.md:526
#: ./docs/master/prompts.md:554
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\multisearch;\n\n"
"$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:537
#: ./docs/11.x/prompts.md:652
#: ./docs/master/prompts.md:565
msgctxt "P"
msgid "The closure will receive the text that has been typed by the user so far and must return an array of options. If you return an associative array then the selected options' keys will be returned; otherwise, their values will be returned instead."
msgstr ""

#: ./docs/10.x/prompts.md:541
#: ./docs/master/prompts.md:569
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:548
#: ./docs/master/prompts.md:475
msgctxt "CODE: php"
msgid "$name = suggest(\n"
"    label: 'What is your name?',\n"
"    options: ['Taylor', 'Dayle'],\n"
"    validate: ['name' => 'required|min:3|max:255']\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:552
#: ./docs/11.x/prompts.md:681
#: ./docs/master/prompts.md:580
msgctxt "P"
msgid "Up to five options will be displayed before the list begins to scroll. You may customize this by providing the `scroll` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:554
#: ./docs/master/prompts.md:582
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:561
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\search;\n\n"
"$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:564
#: ./docs/11.x/prompts.md:693
#: ./docs/master/prompts.md:592
#~ msgctxt "P"
#~ msgid "<a name=\"multisearch-required\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:569
#: ./docs/master/prompts.md:597
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: true,\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:574
#: ./docs/11.x/prompts.md:654
msgctxt "P"
msgid "When filtering an array where you intend to return the value, you should use the `array_values` function or the `values` Collection method to ensure the array doesn't become associative:"
msgstr ""

#: ./docs/11.x/prompts.md:576
msgctxt "CODE: php"
msgid "$names = collect(['Taylor', 'Abigail']);\n\n"
"$selected = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => $names\n"
"        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n"
"        ->values()\n"
"        ->all(),\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:579
#: ./docs/11.x/prompts.md:708
#: ./docs/master/prompts.md:607
msgctxt "P"
msgid "If you would like to customize the validation message, you may also provide a string to the `required` argument:"
msgstr ""

#: ./docs/10.x/prompts.md:581
#: ./docs/master/prompts.md:609
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: 'You must select at least one user.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:590
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:591
#: ./docs/11.x/prompts.md:720
#: ./docs/master/prompts.md:619
#~ msgctxt "P"
#~ msgid "<a name=\"multisearch-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:596
#: ./docs/master/prompts.md:624
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::where('name', 'like', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (array $values) {\n"
"        $optedOut = User::where('name', 'like', '%a%')->findMany($values);\n\n"
"        if ($optedOut->isNotEmpty()) {\n"
"            return $optedOut->pluck('name')->join(', ', ', and ').' have opted out.';\n"
"        }\n"
"    }\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:603
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:612
#: ./docs/11.x/prompts.md:741
#: ./docs/master/prompts.md:640
msgctxt "P"
msgid "If the `options` closure returns an associative array, then the closure will receive the selected keys; otherwise, it will receive the selected values. The closure may return an error message, or `null` if the validation passes."
msgstr ""

#: ./docs/10.x/prompts.md:614
#: ./docs/11.x/prompts.md:743
#: ./docs/master/prompts.md:642
#~ msgctxt "P"
#~ msgid "<a name=\"pause\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:615
#: ./docs/11.x/prompts.md:744
#: ./docs/master/prompts.md:643
msgctxt "H3"
msgid "Pause"
msgstr ""

#: ./docs/10.x/prompts.md:617
#: ./docs/11.x/prompts.md:746
#: ./docs/master/prompts.md:645
msgctxt "P"
msgid "The `pause` function may be used to display informational text to the user and wait for them to confirm their desire to proceed by pressing the Enter / Return key:"
msgstr ""

#: ./docs/11.x/prompts.md:618
msgctxt "CODE: php"
msgid "$id = search(\n"
"    label: 'Search for the user that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (int|string $value) {\n"
"        $user = User::findOrFail($value);\n\n"
"        if ($user->opted_out) {\n"
"            return 'This user has opted-out of receiving mail.';\n"
"        }\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:619
#: ./docs/11.x/prompts.md:748
#: ./docs/master/prompts.md:647
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\pause;\n\n"
"pause('Press ENTER to continue.');"
msgstr ""

#: ./docs/10.x/prompts.md:625
#: ./docs/11.x/prompts.md:826
#: ./docs/master/prompts.md:653
#~ msgctxt "P"
#~ msgid "<a name=\"informational-messages\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:626
#: ./docs/11.x/prompts.md:827
#: ./docs/master/prompts.md:654
msgctxt "H2"
msgid "Informational Messages"
msgstr ""

#: ./docs/10.x/prompts.md:628
#: ./docs/11.x/prompts.md:829
#: ./docs/master/prompts.md:656
msgctxt "P"
msgid "The `note`, `info`, `warning`, `error`, and `alert` functions may be used to display informational messages:"
msgstr ""

#: ./docs/10.x/prompts.md:630
#: ./docs/11.x/prompts.md:831
#: ./docs/master/prompts.md:658
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\info;\n\n"
"info('Package installed successfully.');"
msgstr ""

#: ./docs/10.x/prompts.md:636
#: ./docs/11.x/prompts.md:837
#: ./docs/master/prompts.md:664
#~ msgctxt "P"
#~ msgid "<a name=\"tables\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:637
#: ./docs/11.x/prompts.md:838
#: ./docs/master/prompts.md:665
msgctxt "H2"
msgid "Tables"
msgstr ""

#: ./docs/10.x/prompts.md:639
#: ./docs/11.x/prompts.md:840
#: ./docs/master/prompts.md:667
msgctxt "P"
msgid "The `table` function makes it easy to display multiple rows and columns of data. All you need to do is provide the column names and the data for the table:"
msgstr ""

#: ./docs/10.x/prompts.md:641
#: ./docs/master/prompts.md:669
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\table;\n\n"
"table(\n"
"    ['Name', 'Email'],\n"
"    User::all(['name', 'email'])\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:641
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\multisearch;\n\n"
"$ids = multisearch(\n"
"    'Search for the users that should receive the mail',\n"
"    fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : []\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:650
#: ./docs/11.x/prompts.md:851
#: ./docs/master/prompts.md:678
#~ msgctxt "P"
#~ msgid "<a name=\"spin\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:651
#: ./docs/11.x/prompts.md:852
#: ./docs/master/prompts.md:679
msgctxt "H2"
msgid "Spin"
msgstr ""

#: ./docs/10.x/prompts.md:653
#: ./docs/11.x/prompts.md:854
#: ./docs/master/prompts.md:681
msgctxt "P"
msgid "The `spin` function displays a spinner along with an optional message while executing a specified callback. It serves to indicate ongoing processes and returns the callback's results upon completion:"
msgstr ""

#: ./docs/10.x/prompts.md:655
#: ./docs/master/prompts.md:683
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\spin;\n\n"
"$response = spin(\n"
"    fn () => Http::get('http://example.com'),\n"
"    'Fetching response...'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:656
msgctxt "CODE: php"
msgid "$names = collect(['Taylor', 'Abigail']);\n\n"
"$selected = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => $names\n"
"        ->filter(fn ($name) => Str::contains($name, $value, ignoreCase: true))\n"
"        ->values()\n"
"        ->all(),\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:665
#: ./docs/11.x/prompts.md:866
#: ./docs/master/prompts.md:693
msgctxt "P"
msgid "The `spin` function requires the `pcntl` PHP extension to animate the spinner. When this extension is not available, a static version of the spinner will appear instead."
msgstr ""

#: ./docs/10.x/prompts.md:667
#: ./docs/11.x/prompts.md:868
#: ./docs/master/prompts.md:695
#~ msgctxt "P"
#~ msgid "<a name=\"progress\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:668
#: ./docs/11.x/prompts.md:869
#: ./docs/master/prompts.md:696
msgctxt "H2"
msgid "Progress Bars"
msgstr ""

#: ./docs/10.x/prompts.md:670
#: ./docs/11.x/prompts.md:871
#: ./docs/master/prompts.md:698
msgctxt "P"
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `progress` function, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

#: ./docs/11.x/prompts.md:670
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    placeholder: 'E.g. Taylor Otwell',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    hint: 'The user will receive an email immediately.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:672
#: ./docs/master/prompts.md:700
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\progress;\n\n"
"$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: fn ($user) => $this->performTask($user),\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:682
#: ./docs/11.x/prompts.md:883
#: ./docs/master/prompts.md:710
msgctxt "P"
msgid "The `progress` function acts like a map function and will return an array containing the return value of each iteration of your callback."
msgstr ""

#: ./docs/11.x/prompts.md:683
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    scroll: 10\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:684
#: ./docs/master/prompts.md:712
msgctxt "P"
msgid "The callback may also accept the `\\Laravel\\Prompts\\Progress` instance, allowing you to modify the label and hint on each iteration:"
msgstr ""

#: ./docs/10.x/prompts.md:686
#: ./docs/master/prompts.md:714
msgctxt "CODE: php"
msgid "$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: function ($user, $progress) {\n"
"        $progress\n"
"            ->label(\"Updating {$user->name}\")\n"
"            ->hint(\"Created on {$user->created_at}\");\n\n"
"        return $this->performTask($user);\n"
"    },\n"
"    hint: 'This may take some time.',\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:698
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: true\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:701
#: ./docs/11.x/prompts.md:902
#: ./docs/master/prompts.md:729
msgctxt "P"
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar via the `advance` method after processing each item:"
msgstr ""

#: ./docs/10.x/prompts.md:703
#: ./docs/11.x/prompts.md:904
#: ./docs/master/prompts.md:731
msgctxt "CODE: php"
msgid "$progress = progress(label: 'Updating users', steps: 10);\n\n"
"$users = User::all();\n\n"
"$progress->start();\n\n"
"foreach ($users as $user) {\n"
"    $this->performTask($user);\n\n"
"    $progress->advance();\n"
"}\n\n"
"$progress->finish();"
msgstr ""

#: ./docs/11.x/prompts.md:710
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    required: 'You must select at least one user.'\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:719
#: ./docs/11.x/prompts.md:931
#: ./docs/master/prompts.md:747
#~ msgctxt "P"
#~ msgid "<a name=\"terminal-considerations\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:720
#: ./docs/11.x/prompts.md:932
#: ./docs/master/prompts.md:748
msgctxt "H2"
msgid "Terminal Considerations"
msgstr ""

#: ./docs/10.x/prompts.md:722
#: ./docs/11.x/prompts.md:934
#: ./docs/master/prompts.md:750
#~ msgctxt "P"
#~ msgid "<a name=\"terminal-width\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:723
#: ./docs/11.x/prompts.md:935
#: ./docs/master/prompts.md:751
msgctxt "H4"
msgid "Terminal Width"
msgstr ""

#: ./docs/10.x/prompts.md:725
#: ./docs/11.x/prompts.md:937
#: ./docs/master/prompts.md:753
msgctxt "P"
msgid "If the length of any label, option, or validation message exceeds the number of \"columns\" in the user's terminal, it will be automatically truncated to fit. Consider minimizing the length of these strings if your users may be using narrower terminals. A typically safe maximum length is 74 characters to support an 80-character terminal."
msgstr ""

#: ./docs/11.x/prompts.md:725
msgctxt "CODE: php"
msgid "$ids = multisearch(\n"
"    label: 'Search for the users that should receive the mail',\n"
"    options: fn (string $value) => strlen($value) > 0\n"
"        ? User::whereLike('name', \"%{$value}%\")->pluck('name', 'id')->all()\n"
"        : [],\n"
"    validate: function (array $values) {\n"
"        $optedOut = User::whereLike('name', '%a%')->findMany($values);\n\n"
"        if ($optedOut->isNotEmpty()) {\n"
"            return $optedOut->pluck('name')->join(', ', ', and ').' have opted out.';\n"
"        }\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:727
#: ./docs/11.x/prompts.md:939
#: ./docs/master/prompts.md:755
#~ msgctxt "P"
#~ msgid "<a name=\"terminal-height\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:728
#: ./docs/11.x/prompts.md:940
#: ./docs/master/prompts.md:756
msgctxt "H4"
msgid "Terminal Height"
msgstr ""

#: ./docs/10.x/prompts.md:730
#: ./docs/11.x/prompts.md:942
#: ./docs/master/prompts.md:758
msgctxt "P"
msgid "For any prompts that accept the `scroll` argument, the configured value will automatically be reduced to fit the height of the user's terminal, including space for a validation message."
msgstr ""

#: ./docs/10.x/prompts.md:732
#: ./docs/11.x/prompts.md:944
#: ./docs/master/prompts.md:760
#~ msgctxt "P"
#~ msgid "<a name=\"fallbacks\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:733
#: ./docs/11.x/prompts.md:945
#: ./docs/master/prompts.md:761
msgctxt "H2"
msgid "Unsupported Environments and Fallbacks"
msgstr ""

#: ./docs/10.x/prompts.md:735
#: ./docs/11.x/prompts.md:947
#: ./docs/master/prompts.md:763
msgctxt "P"
msgid "Laravel Prompts supports macOS, Linux, and Windows with WSL. Due to limitations in the Windows version of PHP, it is not currently possible to use Laravel Prompts on Windows outside of WSL."
msgstr ""

#: ./docs/10.x/prompts.md:737
msgctxt "P"
msgid "For this reason, Laravel Prompts supports falling back to an alternative implementation such as the [Symfony Console Question Helper](https://symfony.com/doc/current/components/console/helpers/questionhelper.html)."
msgstr ""

#: ./docs/10.x/prompts.md:740
#: ./docs/11.x/prompts.md:952
#: ./docs/master/prompts.md:768
msgctxt "P"
msgid "When using Laravel Prompts with the Laravel framework, fallbacks for each prompt have been configured for you and will be automatically enabled in unsupported environments."
msgstr ""

#: ./docs/10.x/prompts.md:742
#: ./docs/11.x/prompts.md:954
#: ./docs/master/prompts.md:770
#~ msgctxt "P"
#~ msgid "<a name=\"fallback-conditions\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:743
#: ./docs/11.x/prompts.md:955
#: ./docs/master/prompts.md:771
msgctxt "H4"
msgid "Fallback Conditions"
msgstr ""

#: ./docs/10.x/prompts.md:745
#: ./docs/11.x/prompts.md:957
#: ./docs/master/prompts.md:773
msgctxt "P"
msgid "If you are not using Laravel or need to customize when the fallback behavior is used, you may pass a boolean to the `fallbackWhen` static method on the `Prompt` class:"
msgstr ""

#: ./docs/10.x/prompts.md:747
#: ./docs/11.x/prompts.md:959
#: ./docs/master/prompts.md:775
msgctxt "CODE: php"
msgid "use Laravel\\Prompts\\Prompt;\n\n"
"Prompt::fallbackWhen(\n"
"    ! $input->isInteractive() || windows_os() || app()->runningUnitTests()\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:754
#~ msgctxt "P"
#~ msgid "<a name=\"transforming-input-before-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/prompts.md:755
#: ./docs/11.x/prompts.md:967
#: ./docs/master/prompts.md:783
#~ msgctxt "P"
#~ msgid "<a name=\"fallback-behavior\"></a>"
#~ msgstr ""

#: ./docs/11.x/prompts.md:755
msgctxt "H2"
msgid "Transforming Input Before Validation"
msgstr ""

#: ./docs/10.x/prompts.md:756
#: ./docs/11.x/prompts.md:968
#: ./docs/master/prompts.md:784
msgctxt "H4"
msgid "Fallback Behavior"
msgstr ""

#: ./docs/11.x/prompts.md:757
msgctxt "P"
msgid "Sometimes you may want to transform the prompt input before validation takes place. For example, you may wish to remove white space from any provided strings. To accomplish this, many of the prompt functions provide a `transform` argument, which accepts a closure:"
msgstr ""

#: ./docs/10.x/prompts.md:758
#: ./docs/11.x/prompts.md:970
#: ./docs/master/prompts.md:786
msgctxt "P"
msgid "If you are not using Laravel or need to customize the fallback behavior, you may pass a closure to the `fallbackUsing` static method on each prompt class:"
msgstr ""

#: ./docs/11.x/prompts.md:759
msgctxt "CODE: php"
msgid "$name = text(\n"
"    label: 'What is your name?',\n"
"    transform: fn (string $value) => trim($value),\n"
"    validate: fn (string $value) => match (true) {\n"
"        strlen($value) < 3 => 'The name must be at least 3 characters.',\n"
"        strlen($value) > 255 => 'The name must not exceed 255 characters.',\n"
"        default => null\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/prompts.md:760
#: ./docs/master/prompts.md:788
msgctxt "CODE: php"
msgid "use Laravel\\Prompts\\TextPrompt;\n"
"use Symfony\\Component\\Console\\Question\\Question;\n"
"use Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n"
"TextPrompt::fallbackUsing(function (TextPrompt $prompt) use ($input, $output) {\n"
"    $question = (new Question($prompt->label, $prompt->default ?: null))\n"
"        ->setValidator(function ($answer) use ($prompt) {\n"
"            if ($prompt->required && $answer === null) {\n"
"                throw new \\RuntimeException(is_string($prompt->required) ? $prompt->required : 'Required.');\n"
"            }\n\n"
"            if ($prompt->validate) {\n"
"                $error = ($prompt->validate)($answer ?? '');\n\n"
"                if ($error) {\n"
"                    throw new \\RuntimeException($error);\n"
"                }\n"
"            }\n\n"
"            return $answer;\n"
"        });\n\n"
"    return (new SymfonyStyle($input, $output))\n"
"        ->askQuestion($question);\n"
"});"
msgstr ""

#: ./docs/11.x/prompts.md:771
#~ msgctxt "P"
#~ msgid "<a name=\"forms\"></a>"
#~ msgstr ""

#: ./docs/11.x/prompts.md:772
msgctxt "H2"
msgid "Forms"
msgstr ""

#: ./docs/11.x/prompts.md:774
msgctxt "P"
msgid "Often, you will have multiple prompts that will be displayed in sequence to collect information before performing additional actions. You may use the `form` function to create a grouped set of prompts for the user to complete:"
msgstr ""

#: ./docs/11.x/prompts.md:776
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\form;\n\n"
"$responses = form()\n"
"    ->text('What is your name?', required: true)\n"
"    ->password('What is your password?', validate: ['password' => 'min:8'])\n"
"    ->confirm('Do you accept the terms?')\n"
"    ->submit();"
msgstr ""

#: ./docs/11.x/prompts.md:786
msgctxt "P"
msgid "The `submit` method will return a numerically indexed array containing all of the responses from the form's prompts. However, you may provide a name for each prompt via the `name` argument. When a name is provided, the named prompt's response may be accessed via that name:"
msgstr ""

#: ./docs/10.x/prompts.md:788
#: ./docs/11.x/prompts.md:1002
#: ./docs/master/prompts.md:816
msgctxt "P"
msgid "Fallbacks must be configured individually for each prompt class. The closure will receive an instance of the prompt class and must return an appropriate type for the prompt."
msgstr ""

#: ./docs/11.x/prompts.md:788
msgctxt "CODE: php"
msgid "use App\\Models\\User;\n"
"use function Laravel\\Prompts\\form;\n\n"
"$responses = form()\n"
"    ->text('What is your name?', required: true, name: 'name')\n"
"    ->password(\n"
"        label: 'What is your password?',\n"
"        validate: ['password' => 'min:8'],\n"
"        name: 'password'\n"
"    )\n"
"    ->confirm('Do you accept the terms?')\n"
"    ->submit();\n\n"
"User::create([\n"
"    'name' => $responses['name'],\n"
"    'password' => $responses['password'],\n"
"]);"
msgstr ""

#: ./docs/11.x/prompts.md:808
msgctxt "P"
msgid "The primary benefit of using the `form` function is the ability for the user to return to previous prompts in the form using `CTRL + U`. This allows the user to fix mistakes or alter selections without needing to cancel and restart the entire form."
msgstr ""

#: ./docs/11.x/prompts.md:810
msgctxt "P"
msgid "If you need more granular control over a prompt in a form, you may invoke the `add` method instead of calling one of the prompt functions directly. The `add` method is passed all previous responses provided by the user:"
msgstr ""

#: ./docs/11.x/prompts.md:812
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\form;\n"
"use function Laravel\\Prompts\\outro;\n\n"
"$responses = form()\n"
"    ->text('What is your name?', required: true, name: 'name')\n"
"    ->add(function ($responses) {\n"
"        return text(\"How old are you, {$responses['name']}?\");\n"
"    }, name: 'age')\n"
"    ->submit();\n\n"
"outro(\"Your name is {$responses['name']} and you are {$responses['age']} years old.\");"
msgstr ""

#: ./docs/11.x/prompts.md:842
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\table;\n\n"
"table(\n"
"    headers: ['Name', 'Email'],\n"
"    rows: User::all(['name', 'email'])->toArray()\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:856
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\spin;\n\n"
"$response = spin(\n"
"    message: 'Fetching response...',\n"
"    callback: fn () => Http::get('http://example.com')\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:873
msgctxt "CODE: php"
msgid "use function Laravel\\Prompts\\progress;\n\n"
"$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: fn ($user) => $this->performTask($user)\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:885
msgctxt "P"
msgid "The callback may also accept the `Laravel\\Prompts\\Progress` instance, allowing you to modify the label and hint on each iteration:"
msgstr ""

#: ./docs/11.x/prompts.md:887
msgctxt "CODE: php"
msgid "$users = progress(\n"
"    label: 'Updating users',\n"
"    steps: User::all(),\n"
"    callback: function ($user, $progress) {\n"
"        $progress\n"
"            ->label(\"Updating {$user->name}\")\n"
"            ->hint(\"Created on {$user->created_at}\");\n\n"
"        return $this->performTask($user);\n"
"    },\n"
"    hint: 'This may take some time.'\n"
");"
msgstr ""

#: ./docs/11.x/prompts.md:920
#~ msgctxt "P"
#~ msgid "<a name=\"clear\"></a>"
#~ msgstr ""

#: ./docs/11.x/prompts.md:921
msgctxt "H2"
msgid "Clearing the Terminal"
msgstr ""

#: ./docs/11.x/prompts.md:923
msgctxt "P"
msgid "The `clear` function may be used to clear the user's terminal:"
msgstr ""

#: ./docs/11.x/prompts.md:925
msgctxt "CODE"
msgid "use function Laravel\\Prompts\\clear;\n\n"
"clear();"
msgstr ""

#: ./docs/11.x/prompts.md:949
#: ./docs/master/prompts.md:765
msgctxt "P"
msgid "For this reason, Laravel Prompts supports falling back to an alternative implementation such as the [Symfony Console Question Helper](https://symfony.com/doc/7.0/components/console/helpers/questionhelper.html)."
msgstr ""

#: ./docs/11.x/prompts.md:972
msgctxt "CODE: php"
msgid "use Laravel\\Prompts\\TextPrompt;\n"
"use Symfony\\Component\\Console\\Question\\Question;\n"
"use Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n"
"TextPrompt::fallbackUsing(function (TextPrompt $prompt) use ($input, $output) {\n"
"    $question = (new Question($prompt->label, $prompt->default ?: null))\n"
"        ->setValidator(function ($answer) use ($prompt) {\n"
"            if ($prompt->required && $answer === null) {\n"
"                throw new \\RuntimeException(\n"
"                    is_string($prompt->required) ? $prompt->required : 'Required.'\n"
"                );\n"
"            }\n\n"
"            if ($prompt->validate) {\n"
"                $error = ($prompt->validate)($answer ?? '');\n\n"
"                if ($error) {\n"
"                    throw new \\RuntimeException($error);\n"
"                }\n"
"            }\n\n"
"            return $answer;\n"
"        });\n\n"
"    return (new SymfonyStyle($input, $output))\n"
"        ->askQuestion($question);\n"
"});"
msgstr ""

