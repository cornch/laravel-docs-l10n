msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/testing.pot\n"
"X-Crowdin-File-ID: 163\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/testing.md:1
#: ./docs/9.x/testing.md:1
#: ./docs/10.x/testing.md:1
#: ./docs/11.x/testing.md:1
#: ./docs/master/testing.md:1
msgctxt "H1"
msgid "Testing: Getting Started"
msgstr "測試：入門"

#: ./docs/8.x/testing.md:3
#: ./docs/9.x/testing.md:3
#: ./docs/10.x/testing.md:3
#: ./docs/11.x/testing.md:3
#: ./docs/master/testing.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: ./docs/8.x/testing.md:4
#: ./docs/9.x/testing.md:4
#: ./docs/10.x/testing.md:4
#: ./docs/11.x/testing.md:4
#: ./docs/master/testing.md:4
msgctxt "P"
msgid "[Environment](#environment)"
msgstr "[環境](#environment)"

#: ./docs/8.x/testing.md:5
#: ./docs/9.x/testing.md:5
#: ./docs/10.x/testing.md:5
#: ./docs/11.x/testing.md:5
#: ./docs/master/testing.md:5
msgctxt "P"
msgid "[Creating Tests](#creating-tests)"
msgstr "[建立測試](#creating-tests)"

#: ./docs/8.x/testing.md:6
#: ./docs/9.x/testing.md:6
#: ./docs/10.x/testing.md:6
#: ./docs/11.x/testing.md:6
#: ./docs/master/testing.md:6
msgctxt "P"
msgid "[Running Tests](#running-tests)"
msgstr "[執行測試](#running-tests)"

#: ./docs/10.x/testing.md:7
#: ./docs/11.x/testing.md:7
#: ./docs/master/testing.md:7
msgctxt "P"
msgid "[Running Tests in Parallel](#running-tests-in-parallel)"
msgstr ""

#: ./docs/8.x/testing.md:7
#: ./docs/9.x/testing.md:7
msgctxt "P"
msgid "[Running Tests In Parallel](#running-tests-in-parallel)"
msgstr "[平行執行測試](#running-tests-in-parallel)"

#: ./docs/9.x/testing.md:8
#: ./docs/10.x/testing.md:8
#: ./docs/11.x/testing.md:8
#: ./docs/master/testing.md:8
msgctxt "P"
msgid "[Reporting Test Coverage](#reporting-test-coverage)"
msgstr "[回報測試覆蓋率](#reporting-test-coverage)"

#: ./docs/10.x/testing.md:9
#: ./docs/11.x/testing.md:9
#: ./docs/master/testing.md:9
msgctxt "P"
msgid "[Profiling Tests](#profiling-tests)"
msgstr "[測試分析](#profiling-tests)"

#: ./docs/8.x/testing.md:9
#: ./docs/9.x/testing.md:10
#: ./docs/10.x/testing.md:11
#: ./docs/11.x/testing.md:11
#: ./docs/master/testing.md:11
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:10
#: ./docs/9.x/testing.md:11
#: ./docs/10.x/testing.md:12
#: ./docs/11.x/testing.md:12
#: ./docs/master/testing.md:12
msgctxt "H2"
msgid "Introduction"
msgstr "簡介"

#: ./docs/8.x/testing.md:12
#: ./docs/9.x/testing.md:13
#: ./docs/10.x/testing.md:14
msgctxt "P"
msgid "Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr "Laravel 在設計時就已將測試考慮進去。而且，Laravel 有內建 PHPUnit 支援，且 Laravel 還隨附了一個已設定好可在專案內使用的 `phpunit.xml` 。在 Laravel 中，也有許多方便的輔助函式，能讓我們精準地對專案進行測試。"

#: ./docs/11.x/testing.md:14
#: ./docs/master/testing.md:14
msgctxt "P"
msgid "Laravel is built with testing in mind. In fact, support for testing with [Pest](https://pestphp.com) and [PHPUnit](https://phpunit.de) is included out of the box and a `phpunit.xml` file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications."
msgstr ""

#: ./docs/8.x/testing.md:14
#: ./docs/9.x/testing.md:15
#: ./docs/10.x/testing.md:16
#: ./docs/11.x/testing.md:16
#: ./docs/master/testing.md:16
msgctxt "P"
msgid "By default, your application's `tests` directory contains two directories: `Feature` and `Unit`. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Tests within your \"Unit\" test directory do not boot your Laravel application and therefore are unable to access your application's database or other framework services."
msgstr "預設情況下，專案的 `tests` 目錄內包含了兩個目錄：`Feature` 與 `Unit`。^[Unit Test](單元測試) 是專注於測試一些小部分、與其他部分獨立的程式碼。其實，單元測試可能會只專注於測試單一方法。在「Unit」測試目錄下的測試不會啟用 Laravel 專案，因此無法存取專案的資料庫或其他 Laravel 的服務。"

#: ./docs/8.x/testing.md:16
#: ./docs/9.x/testing.md:17
#: ./docs/10.x/testing.md:18
#: ./docs/11.x/testing.md:18
#: ./docs/master/testing.md:18
msgctxt "P"
msgid "Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint. **Generally, most of your tests should be feature tests. These types of tests provide the most confidence that your system as a whole is functioning as intended.**"
msgstr "^[Feature Test](功能測試)可用來測試較大部分的程式碼 —— 測試各個物件要如何互相使用、測試 JSON Endpoint 的完整 HTTP Request 等。**一般來說，大多數的測試應該都是 Feature Test。使用 Feature Test 有助於確保整體系統如期運作。**"

#: ./docs/8.x/testing.md:18
#: ./docs/9.x/testing.md:19
#: ./docs/10.x/testing.md:20
msgctxt "P"
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/phpunit` or `php artisan test` commands to run your tests."
msgstr "在 `Feature` 與 `Unit` 測試目錄下都有提供了一個 `ExampleTest.php` 檔。安裝好新的 Laravel 專案後，執行 `vendor/bin/phpunit` 或 `php artisan test` 指令即可執行測試。"

#: ./docs/11.x/testing.md:20
#: ./docs/master/testing.md:20
msgctxt "P"
msgid "An `ExampleTest.php` file is provided in both the `Feature` and `Unit` test directories. After installing a new Laravel application, execute the `vendor/bin/pest`, `vendor/bin/phpunit`, or `php artisan test` commands to run your tests."
msgstr ""

#: ./docs/8.x/testing.md:20
#: ./docs/9.x/testing.md:21
#: ./docs/10.x/testing.md:22
#: ./docs/11.x/testing.md:22
#: ./docs/master/testing.md:22
#~ msgctxt "P"
#~ msgid "<a name=\"environment\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:21
#: ./docs/9.x/testing.md:22
#: ./docs/10.x/testing.md:23
#: ./docs/11.x/testing.md:23
#: ./docs/master/testing.md:23
msgctxt "H2"
msgid "Environment"
msgstr "環境"

#: ./docs/8.x/testing.md:23
#: ./docs/9.x/testing.md:24
msgctxt "P"
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver while testing, meaning no session or cache data will be persisted while testing."
msgstr "執行測試時，Laravel 會自動依照 `phpunit.xml` 檔內定義的環境變數來將[設定環境](/docs/{{version}}/configuration#environment-configuration)設為 `testing`。在測試期間，Laravel 也會自動將 Session 與 Cache 設為 `array` Driver，以不保存測試期間的 Session 或 Cache 資料。"

#: ./docs/10.x/testing.md:25
#: ./docs/11.x/testing.md:25
#: ./docs/master/testing.md:25
msgctxt "P"
msgid "When running tests, Laravel will automatically set the [configuration environment](/docs/{{version}}/configuration#environment-configuration) to `testing` because of the environment variables defined in the `phpunit.xml` file. Laravel also automatically configures the session and cache to the `array` driver so that no session or cache data will be persisted while testing."
msgstr ""

#: ./docs/8.x/testing.md:25
#: ./docs/9.x/testing.md:26
#: ./docs/10.x/testing.md:27
#: ./docs/11.x/testing.md:27
#: ./docs/master/testing.md:27
msgctxt "P"
msgid "You are free to define other testing environment configuration values as necessary. The `testing` environment variables may be configured in your application's `phpunit.xml` file, but make sure to clear your configuration cache using the `config:clear` Artisan command before running your tests!"
msgstr "若有需要，也可以自行定義其他的測試環境設定值。`testing` 環境變數可以在專案的 `phpunit.xml` 檔案中修改。不過，在執行測試前，請記得使用 `config:clear` Artisan 指令來清除設定快取！"

#: ./docs/8.x/testing.md:27
#: ./docs/9.x/testing.md:28
#: ./docs/10.x/testing.md:29
#: ./docs/11.x/testing.md:29
#: ./docs/master/testing.md:29
#~ msgctxt "P"
#~ msgid "<a name=\"the-env-testing-environment-file\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:28
#: ./docs/9.x/testing.md:29
#: ./docs/10.x/testing.md:30
#: ./docs/11.x/testing.md:30
#: ./docs/master/testing.md:30
msgctxt "H4"
msgid "The `.env.testing` Environment File"
msgstr "`.env.testing` 環境檔"

#: ./docs/8.x/testing.md:30
#: ./docs/9.x/testing.md:31
#: ./docs/10.x/testing.md:32
msgctxt "P"
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr "除此之外，也可以也可以在專案根目錄上建立一個 `.env.testing` 檔案。在執行 PHPUnit 測試或使用 `--env=testing` 選項執行 Artisan 指令時，會使用這個檔案來代替 `.env` 檔案。"

#: ./docs/11.x/testing.md:32
#: ./docs/master/testing.md:32
msgctxt "P"
msgid "In addition, you may create a `.env.testing` file in the root of your project. This file will be used instead of the `.env` file when running Pest and PHPUnit tests or executing Artisan commands with the `--env=testing` option."
msgstr ""

#: ./docs/8.x/testing.md:32
#: ./docs/9.x/testing.md:33
#: ./docs/10.x/testing.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"the-creates-application-trait\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:33
#: ./docs/9.x/testing.md:34
#: ./docs/10.x/testing.md:35
msgctxt "H4"
msgid "The `CreatesApplication` Trait"
msgstr "`CreatesApplication` Trait"

#: ./docs/8.x/testing.md:35
#: ./docs/9.x/testing.md:36
#: ./docs/10.x/testing.md:37
msgctxt "P"
msgid "Laravel includes a `CreatesApplication` trait that is applied to your application's base `TestCase` class. This trait contains a `createApplication` method that bootstraps the Laravel application before running your tests. It's important that you leave this trait at its original location as some features, such as Laravel's parallel testing feature, depend on it."
msgstr "Laravel 中包含了一個 `CreatesApplication` Trait。在專案的基礎 `TestCase` 類別中有套用這個 Trait。`CreatesApplication` 裡包含了一個 `createApplication` 方法，用來在執行測試前啟動 Laravel 程式。需注意要將該 Trait 保留在原位，因為某些 Laravel 的功能 —— 如平行測試 —— 需要仰賴於該 Trait。"

#: ./docs/8.x/testing.md:37
#: ./docs/9.x/testing.md:38
#: ./docs/10.x/testing.md:39
#: ./docs/11.x/testing.md:34
#: ./docs/master/testing.md:34
#~ msgctxt "P"
#~ msgid "<a name=\"creating-tests\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:38
#: ./docs/9.x/testing.md:39
#: ./docs/10.x/testing.md:40
#: ./docs/11.x/testing.md:35
#: ./docs/master/testing.md:35
msgctxt "H2"
msgid "Creating Tests"
msgstr "建立測試"

#: ./docs/8.x/testing.md:40
#: ./docs/9.x/testing.md:41
#: ./docs/10.x/testing.md:42
#: ./docs/11.x/testing.md:37
#: ./docs/master/testing.md:37
msgctxt "P"
msgid "To create a new test case, use the `make:test` Artisan command. By default, tests will be placed in the `tests/Feature` directory:"
msgstr "若要建立新測試例，請使用 `make:test` Artisan 指令。預設情況下，測試會被放在 `tests/Feature` 目錄下："

#: ./docs/8.x/testing.md:42
#: ./docs/9.x/testing.md:43
#: ./docs/10.x/testing.md:44
#: ./docs/11.x/testing.md:39
#: ./docs/master/testing.md:39
msgctxt "CODE"
msgid "php artisan make:test UserTest"
msgstr ""

#: ./docs/8.x/testing.md:44
#: ./docs/9.x/testing.md:47
#: ./docs/10.x/testing.md:48
#: ./docs/11.x/testing.md:43
#: ./docs/master/testing.md:43
msgctxt "P"
msgid "If you would like to create a test within the `tests/Unit` directory, you may use the `--unit` option when executing the `make:test` command:"
msgstr "若要在 `tests/Unit` 目錄下建立測試，可在執行 `make:test` 指令時使用 `--unit` 選項："

#: ./docs/8.x/testing.md:46
#: ./docs/9.x/testing.md:49
#: ./docs/10.x/testing.md:50
#: ./docs/11.x/testing.md:45
#: ./docs/master/testing.md:45
msgctxt "CODE"
msgid "php artisan make:test UserTest --unit"
msgstr ""

#: ./docs/8.x/testing.md:48
#: ./docs/9.x/testing.md:53
#: ./docs/10.x/testing.md:54
msgctxt "P"
msgid "If you would like to create a [Pest PHP](https://pestphp.com) test, you may provide the `--pest` option to the `make:test` command:"
msgstr "若要建立 [Pest PHP](https://pestphp.com) 測試，可在 `make:test` 指令上使用 `--pest` 選項："

#: ./docs/8.x/testing.md:50
#: ./docs/9.x/testing.md:55
#: ./docs/10.x/testing.md:56
msgctxt "CODE"
msgid ""
"php artisan make:test UserTest --pest\n"
"php artisan make:test UserTest --unit --pest"
msgstr ""

#: ./docs/11.x/testing.md:52
#: ./docs/master/testing.md:52
msgctxt "P"
msgid "Once the test has been generated, you may define test as you normally would using Pest or PHPUnit. To run your tests, execute the `vendor/bin/pest`, `vendor/bin/phpunit`, or `php artisan test` command from your terminal:"
msgstr ""

#: ./docs/8.x/testing.md:53
#: ./docs/9.x/testing.md:61
#: ./docs/10.x/testing.md:62
#: ./docs/11.x/testing.md:50
#: ./docs/master/testing.md:50
msgctxt "P"
msgid "Test stubs may be customized using [stub publishing](/docs/{{version}}/artisan#stub-customization)."
msgstr "可以[安裝 Stub](/docs/{{version}}/artisan#stub-customization) 來自訂測試的 Stub。"

#: ./docs/11.x/testing.md:54
#: ./docs/master/testing.md:54
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"test('basic', function () {\n"
"    expect(true)->toBeTrue();\n"
"});"
msgstr ""

#: ./docs/8.x/testing.md:55
#: ./docs/9.x/testing.md:63
#: ./docs/10.x/testing.md:64
msgctxt "P"
msgid "Once the test has been generated, you may define test methods as you normally would using [PHPUnit](https://phpunit.de). To run your tests, execute the `vendor/bin/phpunit` or `php artisan test` command from your terminal:"
msgstr "產生好測試後，即可如平常使用 [PHPUnit](https://phpunit.de) 一般來定義測試方法。若要執行測試，請在終端機內執行 `vendor/bin/phpunit` 或 `php artisan test` 指令："

#: ./docs/8.x/testing.md:57
#: ./docs/9.x/testing.md:65
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Unit;\n"
"\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_test()\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/testing.md:66
#: ./docs/11.x/testing.md:62
#: ./docs/master/testing.md:62
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Unit;\n"
"\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * A basic test example.\n"
"     */\n"
"    public function test_basic_test(): void\n"
"    {\n"
"        $this->assertTrue(true);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/testing.md:76
#: ./docs/9.x/testing.md:85
msgctxt "P"
msgid "If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class."
msgstr "若有自行在測試類別內定義 `setUp` / `tearDown` 方法，請記得呼叫上層類別內對應的 `parent::setUp()` / `parent::tearDown()` 方法。"

#: ./docs/8.x/testing.md:78
#: ./docs/9.x/testing.md:87
#: ./docs/10.x/testing.md:86
#: ./docs/11.x/testing.md:84
#: ./docs/master/testing.md:84
#~ msgctxt "P"
#~ msgid "<a name=\"running-tests\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:79
#: ./docs/9.x/testing.md:88
#: ./docs/10.x/testing.md:87
#: ./docs/11.x/testing.md:85
#: ./docs/master/testing.md:85
msgctxt "H2"
msgid "Running Tests"
msgstr "執行測試"

#: ./docs/8.x/testing.md:81
#: ./docs/9.x/testing.md:90
#: ./docs/10.x/testing.md:89
msgctxt "P"
msgid "As mentioned previously, once you've written tests, you may run them using `phpunit`:"
msgstr "就像剛才提到的，寫好測試後，可使用 `phpunit` 來執行測試："

#: ./docs/8.x/testing.md:83
#: ./docs/9.x/testing.md:92
#: ./docs/10.x/testing.md:91
#: ./docs/11.x/testing.md:93
#: ./docs/master/testing.md:93
msgctxt "CODE"
msgid "./vendor/bin/phpunit"
msgstr ""

#: ./docs/10.x/testing.md:84
#: ./docs/11.x/testing.md:82
#: ./docs/master/testing.md:82
msgctxt "P"
msgid "If you define your own `setUp` / `tearDown` methods within a test class, be sure to call the respective `parent::setUp()` / `parent::tearDown()` methods on the parent class. Typically, you should invoke `parent::setUp()` at the start of your own `setUp` method, and `parent::tearDown()` at the end of your `tearDown` method."
msgstr ""

#: ./docs/8.x/testing.md:85
#: ./docs/9.x/testing.md:96
#: ./docs/10.x/testing.md:95
msgctxt "P"
msgid "In addition to the `phpunit` command, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr "除了 `phpunit` 指令外，我們也可以使用 `test` Artisan 指令來執行測試。Artisan 的測試執行程式會提供較多輸出的測試報告，以讓我們能更輕鬆地進行開發與偵錯："

#: ./docs/11.x/testing.md:87
#: ./docs/master/testing.md:87
msgctxt "P"
msgid "As mentioned previously, once you've written tests, you may run them using `pest` or `phpunit`:"
msgstr ""

#: ./docs/8.x/testing.md:87
#: ./docs/9.x/testing.md:98
#: ./docs/10.x/testing.md:97
#: ./docs/11.x/testing.md:99
#: ./docs/master/testing.md:99
msgctxt "CODE"
msgid "php artisan test"
msgstr ""

#: ./docs/11.x/testing.md:89
#: ./docs/master/testing.md:89
msgctxt "CODE: shell tab=Pest"
msgid "./vendor/bin/pest"
msgstr ""

#: ./docs/8.x/testing.md:89
#: ./docs/9.x/testing.md:102
#: ./docs/10.x/testing.md:101
msgctxt "P"
msgid "Any arguments that can be passed to the `phpunit` command may also be passed to the Artisan `test` command:"
msgstr "所有可傳給 `phpunit` 指令的引數都可傳給 Artisan `test` 指令："

#: ./docs/8.x/testing.md:91
#: ./docs/9.x/testing.md:104
#: ./docs/10.x/testing.md:103
#: ./docs/11.x/testing.md:105
#: ./docs/master/testing.md:105
msgctxt "CODE"
msgid "php artisan test --testsuite=Feature --stop-on-failure"
msgstr ""

#: ./docs/8.x/testing.md:94
#: ./docs/9.x/testing.md:108
#: ./docs/10.x/testing.md:107
#: ./docs/11.x/testing.md:109
#: ./docs/master/testing.md:109
#~ msgctxt "P"
#~ msgid "<a name=\"running-tests-in-parallel\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:95
#: ./docs/9.x/testing.md:109
msgctxt "H3"
msgid "Running Tests In Parallel"
msgstr "平行執行測試"

#: ./docs/11.x/testing.md:97
#: ./docs/master/testing.md:97
msgctxt "P"
msgid "In addition to the `pest` or `phpunit` commands, you may use the `test` Artisan command to run your tests. The Artisan test runner provides verbose test reports in order to ease development and debugging:"
msgstr ""

#: ./docs/8.x/testing.md:97
#: ./docs/9.x/testing.md:111
msgctxt "P"
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, ensure your application depends on version `^5.3` or greater of the `nunomaduro/collision` package. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr "預設情況下，Laravel 與 PHPUnit 會依照順序在單一處理程序內執行我們的測試。不過，我們也可以同時以多個處理程序來執行測試，以大幅降低執行測試所需的時間。若要以多個處理程序執行測試，請先檢查專案是否有使用 `^5.3` 或更新版的 `nunomaduro/collision` 套件。接著，請在執行 `test` Artisan 指令時使用 `--parallel` 選項："

#: ./docs/8.x/testing.md:99
#: ./docs/9.x/testing.md:113
msgctxt "CODE"
msgid "php artisan test --parallel"
msgstr ""

#: ./docs/8.x/testing.md:101
#: ./docs/9.x/testing.md:117
#: ./docs/10.x/testing.md:118
#: ./docs/11.x/testing.md:120
#: ./docs/master/testing.md:120
msgctxt "P"
msgid "By default, Laravel will create as many processes as there are available CPU cores on your machine. However, you may adjust the number of processes using the `--processes` option:"
msgstr "預設情況下，Laravel 會以機器上可用的 CPU 核心數來建立處理程序。不過，我們也可以使用 `--processes` 選項來調整處理程序的數量："

#: ./docs/11.x/testing.md:103
#: ./docs/master/testing.md:103
msgctxt "P"
msgid "Any arguments that can be passed to the `pest` or `phpunit` commands may also be passed to the Artisan `test` command:"
msgstr ""

#: ./docs/8.x/testing.md:103
#: ./docs/9.x/testing.md:119
#: ./docs/10.x/testing.md:120
#: ./docs/11.x/testing.md:122
#: ./docs/master/testing.md:122
msgctxt "CODE"
msgid "php artisan test --parallel --processes=4"
msgstr ""

#: ./docs/8.x/testing.md:105
#: ./docs/9.x/testing.md:124
#: ./docs/10.x/testing.md:125
msgctxt "P"
msgid "When running tests in parallel, some PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr "平行執行測試時，可能無法使用部分 PHPUnit 的選項 (如 `--do-not-cache-result`)。"

#: ./docs/8.x/testing.md:107
#: ./docs/9.x/testing.md:126
#: ./docs/10.x/testing.md:127
#: ./docs/11.x/testing.md:129
#: ./docs/master/testing.md:129
#~ msgctxt "P"
#~ msgid "<a name=\"parallel-testing-and-databases\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:108
#: ./docs/11.x/testing.md:110
#: ./docs/master/testing.md:110
msgctxt "H3"
msgid "Running Tests in Parallel"
msgstr ""

#: ./docs/8.x/testing.md:108
#: ./docs/9.x/testing.md:127
msgctxt "H4"
msgid "Parallel Testing & Databases"
msgstr "平行測試與資料庫"

#: ./docs/10.x/testing.md:110
msgctxt "P"
msgid "By default, Laravel and PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, you should install the `brianium/paratest` Composer package as a \"dev\" dependency. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: ./docs/8.x/testing.md:110
msgctxt "P"
msgid "Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr "Laravel 會自動為每個執行測試的平行處理程序建立並 Migrate 測試資料庫。Laravel 會使用每個處理程序都不同的處理程序 Token 來作為資料庫的前置詞。舉例來說，若有兩個平行的測試處理程序，則 Laravel 會建立並使用 `your_db_test_1` 與 `your_db_test_2` 測試資料庫。"

#: ./docs/10.x/testing.md:112
#: ./docs/11.x/testing.md:114
#: ./docs/master/testing.md:114
msgctxt "CODE: shell"
msgid ""
"composer require brianium/paratest --dev\n"
"\n"
"php artisan test --parallel"
msgstr ""

#: ./docs/11.x/testing.md:112
#: ./docs/master/testing.md:112
msgctxt "P"
msgid "By default, Laravel and Pest / PHPUnit execute your tests sequentially within a single process. However, you may greatly reduce the amount of time it takes to run your tests by running tests simultaneously across multiple processes. To get started, you should install the `brianium/paratest` Composer package as a \"dev\" dependency. Then, include the `--parallel` option when executing the `test` Artisan command:"
msgstr ""

#: ./docs/8.x/testing.md:112
#: ./docs/9.x/testing.md:131
#: ./docs/10.x/testing.md:132
#: ./docs/11.x/testing.md:134
#: ./docs/master/testing.md:134
msgctxt "P"
msgid "By default, test databases persist between calls to the `test` Artisan command so that they can be used again by subsequent `test` invocations. However, you may re-create them using the `--recreate-databases` option:"
msgstr "預設情況下，在不同的 `test` Artisan 指令間，會共用相同的測試資料庫，以在連續呼叫 `test` 指令時使用這些資料庫。不過，我們也可以使用 `--create-databases` 選項來重新建立測試資料庫："

#: ./docs/8.x/testing.md:114
#: ./docs/9.x/testing.md:133
#: ./docs/10.x/testing.md:134
#: ./docs/11.x/testing.md:136
#: ./docs/master/testing.md:136
msgctxt "CODE"
msgid "php artisan test --parallel --recreate-databases"
msgstr ""

#: ./docs/8.x/testing.md:116
#: ./docs/9.x/testing.md:137
#: ./docs/10.x/testing.md:138
#: ./docs/11.x/testing.md:140
#: ./docs/master/testing.md:140
#~ msgctxt "P"
#~ msgid "<a name=\"parallel-testing-hooks\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:117
#: ./docs/9.x/testing.md:138
#: ./docs/10.x/testing.md:139
#: ./docs/11.x/testing.md:141
#: ./docs/master/testing.md:141
msgctxt "H4"
msgid "Parallel Testing Hooks"
msgstr "平行測試的 Hook"

#: ./docs/8.x/testing.md:119
#: ./docs/9.x/testing.md:140
#: ./docs/10.x/testing.md:141
#: ./docs/11.x/testing.md:143
#: ./docs/master/testing.md:143
msgctxt "P"
msgid "Occasionally, you may need to prepare certain resources used by your application's tests so they may be safely used by multiple test processes."
msgstr "有時候，我們會需要為一些專案所使用的特定資源做準備，好讓我們能在多個測試處理程序中使用這些資源。"

#: ./docs/8.x/testing.md:121
#: ./docs/9.x/testing.md:142
#: ./docs/10.x/testing.md:143
#: ./docs/11.x/testing.md:145
#: ./docs/master/testing.md:145
msgctxt "P"
msgid "Using the `ParallelTesting` facade, you may specify code to be executed on the `setUp` and `tearDown` of a process or test case. The given closures receive the `$token` and `$testCase` variables that contain the process token and the current test case, respectively:"
msgstr "只要使用 `ParallelTesting` Facade，就可指定要在處理程序或測試例的 `setUp` 或 `tearDown` 內要執行的特定程式碼。給定的閉包會收到 `$token` 與 `$testCase` 變數，著兩個變數中分別包含了處理程序的 Token，以及目前的測試例："

#: ./docs/8.x/testing.md:123
#: ./docs/9.x/testing.md:144
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        ParallelTesting::setUpProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::setUpTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function ($database, $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownTestCase(function ($token, $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownProcess(function ($token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/testing.md:127
#: ./docs/master/testing.md:127
msgctxt "P"
msgid "When running tests in parallel, some Pest / PHPUnit options (such as `--do-not-cache-result`) may not be available."
msgstr ""

#: ./docs/10.x/testing.md:128
#: ./docs/11.x/testing.md:130
#: ./docs/master/testing.md:130
msgctxt "H4"
msgid "Parallel Testing and Databases"
msgstr ""

#: ./docs/9.x/testing.md:129
#: ./docs/10.x/testing.md:130
#: ./docs/11.x/testing.md:132
#: ./docs/master/testing.md:132
msgctxt "P"
msgid "As long as you have configured a primary database connection, Laravel automatically handles creating and migrating a test database for each parallel process that is running your tests. The test databases will be suffixed with a process token which is unique per process. For example, if you have two parallel test processes, Laravel will create and use `your_db_test_1` and `your_db_test_2` test databases."
msgstr "只要你有設定主要的資料庫連線，Laravel 就會自動為每個執行測試的平行處理程序建立並 Migrate 測試資料庫。Laravel 會使用每個處理程序都不同的處理程序 Token 來作為資料庫的前置詞。舉例來說，若有兩個平行的測試處理程序，則 Laravel 會建立並使用 `your_db_test_1` 與 `your_db_test_2` 測試資料庫。"

#: ./docs/10.x/testing.md:145
#: ./docs/11.x/testing.md:147
#: ./docs/master/testing.md:147
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use Illuminate\\Support\\Facades\\Artisan;\n"
"use Illuminate\\Support\\Facades\\ParallelTesting;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use PHPUnit\\Framework\\TestCase;\n"
"\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        ParallelTesting::setUpProcess(function (int $token) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::setUpTestCase(function (int $token, TestCase $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        // Executed when a test database is created...\n"
"        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {\n"
"            Artisan::call('db:seed');\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownTestCase(function (int $token, TestCase $testCase) {\n"
"            // ...\n"
"        });\n"
"\n"
"        ParallelTesting::tearDownProcess(function (int $token) {\n"
"            // ...\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/testing.md:163
#: ./docs/9.x/testing.md:184
#: ./docs/10.x/testing.md:184
#: ./docs/11.x/testing.md:186
#: ./docs/master/testing.md:186
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-the-parallel-testing-token\"></a>"
#~ msgstr ""

#: ./docs/8.x/testing.md:164
#: ./docs/9.x/testing.md:185
msgctxt "H4"
msgid "Accessing The Parallel Testing Token"
msgstr "存取平行測試的 Token"

#: ./docs/8.x/testing.md:166
msgctxt "P"
msgid "If you would like to access to current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr "若想從測試程式碼中的任何地方存取目前平行處理程序的「Token」，我們可以使用 `token` 方法。對於各個測試處理程序來說，平行處理程序的「Token」是一個不重複的字串，可用來在多個平行測試處理程序上為資源分段。舉例來說，Laravel 會自動將該 Token 放在各個由平行測試處理程序所建立的測試資料庫名稱後方："

#: ./docs/8.x/testing.md:168
#: ./docs/9.x/testing.md:189
#: ./docs/10.x/testing.md:189
#: ./docs/11.x/testing.md:191
#: ./docs/master/testing.md:191
msgctxt "CODE"
msgid "$token = ParallelTesting::token();"
msgstr ""

#: ./docs/10.x/testing.md:185
#: ./docs/11.x/testing.md:187
#: ./docs/master/testing.md:187
msgctxt "H4"
msgid "Accessing the Parallel Testing Token"
msgstr ""

#: ./docs/9.x/testing.md:187
#: ./docs/10.x/testing.md:187
#: ./docs/11.x/testing.md:189
#: ./docs/master/testing.md:189
msgctxt "P"
msgid "If you would like to access the current parallel process \"token\" from any other location in your application's test code, you may use the `token` method. This token is a unique, string identifier for an individual test process and may be used to segment resources across parallel test processes. For example, Laravel automatically appends this token to the end of the test databases created by each parallel testing process:"
msgstr "若想從測試程式碼中的任何地方存取目前平行處理程序的「Token」，我們可以使用 `token` 方法。對於各個測試處理程序來說，平行處理程序的「Token」是一個不重複的字串，可用來在多個平行測試處理程序上為資源分段。舉例來說，Laravel 會自動將該 Token 放在各個由平行測試處理程序所建立的測試資料庫名稱後方："

#: ./docs/9.x/testing.md:191
#: ./docs/10.x/testing.md:191
#: ./docs/11.x/testing.md:193
#: ./docs/master/testing.md:193
#~ msgctxt "P"
#~ msgid "<a name=\"reporting-test-coverage\"></a>"
#~ msgstr ""

#: ./docs/9.x/testing.md:192
#: ./docs/10.x/testing.md:192
#: ./docs/11.x/testing.md:194
#: ./docs/master/testing.md:194
msgctxt "H3"
msgid "Reporting Test Coverage"
msgstr "回報測試覆蓋率"

#: ./docs/9.x/testing.md:195
#: ./docs/10.x/testing.md:195
#: ./docs/11.x/testing.md:197
#: ./docs/master/testing.md:197
msgctxt "P"
msgid "This feature requires [Xdebug](https://xdebug.org) or [PCOV](https://pecl.php.net/package/pcov)."
msgstr "要使用該功能，需安裝 [Xdebug](https://xdebug.org) 或 [PCOV](https://pecl.php.net/package/pcov)。"

#: ./docs/9.x/testing.md:197
#: ./docs/10.x/testing.md:197
#: ./docs/11.x/testing.md:199
#: ./docs/master/testing.md:199
msgctxt "P"
msgid "When running your application tests, you may want to determine whether your test cases are actually covering the application code and how much application code is used when running your tests. To accomplish this, you may provide the `--coverage` option when invoking the `test` command:"
msgstr "在執行專案測試時，我們可能會想判斷測試例是否有實際涵蓋到專案的程式碼、或是想知道在執行測試時到底使用到專案中多少的程式碼。若要瞭解測試覆蓋率，可在叫用 `test` 指令時提供 `--coverage` 選項："

#: ./docs/9.x/testing.md:199
#: ./docs/10.x/testing.md:199
#: ./docs/11.x/testing.md:201
#: ./docs/master/testing.md:201
msgctxt "CODE: shell"
msgid "php artisan test --coverage"
msgstr ""

#: ./docs/9.x/testing.md:203
#: ./docs/10.x/testing.md:203
#: ./docs/11.x/testing.md:205
#: ./docs/master/testing.md:205
#~ msgctxt "P"
#~ msgid "<a name=\"enforcing-a-minimum-coverage-threshold\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:204
#: ./docs/11.x/testing.md:206
#: ./docs/master/testing.md:206
msgctxt "H4"
msgid "Enforcing a Minimum Coverage Threshold"
msgstr ""

#: ./docs/9.x/testing.md:204
msgctxt "H4"
msgid "Enforcing A Minimum Coverage Threshold"
msgstr "強制最低覆蓋率門檻"

#: ./docs/9.x/testing.md:206
#: ./docs/10.x/testing.md:206
#: ./docs/11.x/testing.md:208
#: ./docs/master/testing.md:208
msgctxt "P"
msgid "You may use the `--min` option to define a minimum test coverage threshold for your application. The test suite will fail if this threshold is not met:"
msgstr "可使用 `--min` 選項來為專案定義最低測試覆蓋率門檻。若未符合該門檻，測試套件會執行失敗："

#: ./docs/9.x/testing.md:208
#: ./docs/10.x/testing.md:208
#: ./docs/11.x/testing.md:210
#: ./docs/master/testing.md:210
msgctxt "CODE: shell"
msgid "php artisan test --coverage --min=80.3"
msgstr ""

#: ./docs/10.x/testing.md:212
#: ./docs/11.x/testing.md:214
#: ./docs/master/testing.md:214
#~ msgctxt "P"
#~ msgid "<a name=\"profiling-tests\"></a>"
#~ msgstr ""

#: ./docs/10.x/testing.md:213
#: ./docs/11.x/testing.md:215
#: ./docs/master/testing.md:215
msgctxt "H3"
msgid "Profiling Tests"
msgstr "測試分析"

#: ./docs/10.x/testing.md:215
#: ./docs/11.x/testing.md:217
#: ./docs/master/testing.md:217
msgctxt "P"
msgid "The Artisan test runner also includes a convenient mechanism for listing your application's slowest tests. Invoke the `test` command with the `--profile` option to be presented with a list of your ten slowest tests, allowing you to easily investigate which tests can be improved to speed up your test suite:"
msgstr "Artisan 的測試執行程式中也包含了一個方便的機制，能讓我們列出專案中最慢的測試。執行 `test` 指令時提供 `--profile` 選項，就可以看到一組列表中列出了 10 個最慢的測試，讓我們能輕鬆調查可以改善哪些測試來讓測試套件執行更快："

#: ./docs/10.x/testing.md:217
#: ./docs/11.x/testing.md:219
#: ./docs/master/testing.md:219
msgctxt "CODE: shell"
msgid "php artisan test --profile"
msgstr ""
