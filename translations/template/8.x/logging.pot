# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 05:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/logging.md:1
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/logging.md:15
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:15
#, no-wrap
msgid ""
"- [Configuration](#configuration)\n"
"    - [Available Channel Drivers](#available-channel-drivers)\n"
"    - [Channel Prerequisites](#channel-prerequisites)\n"
"- [Building Log Stacks](#building-log-stacks)\n"
"- [Writing Log Messages](#writing-log-messages)\n"
"    - [Contextual Information](#contextual-information)\n"
"    - [Writing To Specific Channels](#writing-to-specific-channels)\n"
"- [Monolog Channel Customization](#monolog-channel-customization)\n"
"    - [Customizing Monolog For "
"Channels](#customizing-monolog-for-channels)\n"
"    - [Creating Monolog Handler "
"Channels](#creating-monolog-handler-channels)\n"
"    - [Creating Custom Channels Via "
"Factories](#creating-custom-channels-via-factories)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:17
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:17
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:20
msgid ""
"To help you learn more about what's happening within your application, "
"Laravel provides robust logging services that allow you to log messages to "
"files, the system error log, and even to Slack to notify your entire team."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:22
msgid ""
"Laravel logging is based on \"channels\". Each channel represents a specific "
"way of writing log information. For example, the `single` channel writes log "
"files to a single log file, while the `slack` channel sends log messages to "
"Slack. Log messages may be written to multiple channels based on their "
"severity."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:24
msgid ""
"Under the hood, Laravel utilizes the "
"[Monolog](https://github.com/Seldaek/monolog) library, which provides "
"support for a variety of powerful log handlers. Laravel makes it a cinch to "
"configure these handlers, allowing you to mix and match them to customize "
"your application's log handling."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:26
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:26
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:29
msgid ""
"All of the configuration options for your application's logging behavior is "
"housed in the `config/logging.php` configuration file. This file allows you "
"to configure your application's log channels, so be sure to review each of "
"the available channels and their options. We'll review a few common options "
"below."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:31
msgid ""
"By default, Laravel will use the `stack` channel when logging messages. The "
"`stack` channel is used to aggregate multiple log channels into a single "
"channel. For more information on building stacks, check out the "
"[documentation below](#building-log-stacks)."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:33
#, no-wrap
msgid "<a name=\"configuring-the-channel-name\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:33
#, no-wrap
msgid "Configuring The Channel Name"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:36
msgid ""
"By default, Monolog is instantiated with a \"channel name\" that matches the "
"current environment, such as `production` or `local`. To change this value, "
"add a `name` option to your channel's configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:42
#, no-wrap
msgid ""
"    'stack' => [\n"
"        'driver' => 'stack',\n"
"        'name' => 'channel-name',\n"
"        'channels' => ['single', 'slack'],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:44
#, no-wrap
msgid "<a name=\"available-channel-drivers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:44
#, no-wrap
msgid "Available Channel Drivers"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:47
msgid ""
"Each log channel is powered by a \"driver\". The driver determines how and "
"where the log message is actually recorded. The following log channel "
"drivers are available in every Laravel application. An entry for most of "
"these drivers is already present in your application's `config/logging.php` "
"configuration file, so be sure to review this file to become familiar with "
"its contents:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:60
msgid ""
"Name | Description ------------- | ------------- `custom` | A driver that "
"calls a specified factory to create a channel `daily` | A "
"`RotatingFileHandler` based Monolog driver which rotates daily `errorlog` | "
"A `ErrorLogHandler` based Monolog driver `monolog` | A Monolog factory "
"driver that may use any supported Monolog handler `null` | A driver that "
"discards all log messages `papertrail` | A `SyslogUdpHandler` based Monolog "
"driver `single` | A single file or path based logger channel "
"(`StreamHandler`)  `slack` | A `SlackWebhookHandler` based Monolog driver "
"`stack` | A wrapper to facilitate creating \"multi-channel\" channels "
"`syslog` | A `SyslogHandler` based Monolog driver"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:62
#, no-wrap
msgid ""
"> {tip} Check out the documentation on [advanced channel "
"customization](#monolog-channel-customization) to learn more about the "
"`monolog` and `custom` drivers.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:64
#, no-wrap
msgid "<a name=\"channel-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:64
#, no-wrap
msgid "Channel Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:67
#, no-wrap
msgid "<a name=\"configuring-the-single-and-daily-channels\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:67
#, no-wrap
msgid "Configuring The Single and Daily Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:70
msgid ""
"The `single` and `daily` channels have three optional configuration options: "
"`bubble`, `permission`, and `locking`."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:76
msgid ""
"Name | Description | Default ------------- | ------------- | ------------- "
"`bubble` | Indicates if messages should bubble up to other channels after "
"being handled | `true` `locking` | Attempt to lock the log file before "
"writing to it | `false` `permission` | The log file's permissions | `0644`"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:78
#, no-wrap
msgid "<a name=\"configuring-the-papertrail-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:78
#, no-wrap
msgid "Configuring The Papertrail Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:81
msgid ""
"The `papertrail` channel requires the `host` and `port` configuration "
"options. You can obtain these values from "
"[Papertrail](https://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-php-apps/#send-events-from-php-app)."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:83
#, no-wrap
msgid "<a name=\"configuring-the-slack-channel\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:83
#, no-wrap
msgid "Configuring The Slack Channel"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:86
msgid ""
"The `slack` channel requires a `url` configuration option. This URL should "
"match a URL for an [incoming "
"webhook](https://slack.com/apps/A0F7XDUAZ-incoming-webhooks) that you have "
"configured for your Slack team."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:88
msgid ""
"By default, Slack will only receive logs at the `critical` level and above; "
"however, you can adjust this in your `config/logging.php` configuration file "
"by modifying the `level` configuration option within your Slack log "
"channel's configuration array."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:90
#, no-wrap
msgid "<a name=\"building-log-stacks\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:90
#, no-wrap
msgid "Building Log Stacks"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:93
msgid ""
"As mentioned previously, the `stack` driver allows you to combine multiple "
"channels into a single log channel for convenience. To illustrate how to use "
"log stacks, let's take a look at an example configuration that you might see "
"in a production application:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:99
#, no-wrap
msgid ""
"    'channels' => [\n"
"        'stack' => [\n"
"            'driver' => 'stack',\n"
"            'channels' => ['syslog', 'slack'],\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:104
#, no-wrap
msgid ""
"        'syslog' => [\n"
"            'driver' => 'syslog',\n"
"            'level' => 'debug',\n"
"        ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:113
#, no-wrap
msgid ""
"        'slack' => [\n"
"            'driver' => 'slack',\n"
"            'url' => env('LOG_SLACK_WEBHOOK_URL'),\n"
"            'username' => 'Laravel Log',\n"
"            'emoji' => ':boom:',\n"
"            'level' => 'critical',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:115
msgid ""
"Let's dissect this configuration. First, notice our `stack` channel "
"aggregates two other channels via its `channels` option: `syslog` and "
"`slack`. So, when logging messages, both of these channels will have the "
"opportunity to log the message. However, as we will see below, whether these "
"channels actually log the message may be determined by the message's "
"severity / \"level\"."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:117
#, no-wrap
msgid "<a name=\"log-levels\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:117
#, no-wrap
msgid "Log Levels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:120
msgid ""
"Take note of the `level` configuration option present on the `syslog` and "
"`slack` channel configurations in the example above. This option determines "
"the minimum \"level\" a message must be in order to be logged by the "
"channel. Monolog, which powers Laravel's logging services, offers all of the "
"log levels defined in the [RFC 5424 "
"specification](https://tools.ietf.org/html/rfc5424): **emergency**, "
"**alert**, **critical**, **error**, **warning**, **notice**, **info**, and "
"**debug**."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:122
msgid "So, imagine we log a message using the `debug` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:124
#, no-wrap
msgid "    Log::debug('An informational message.');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:126
msgid ""
"Given our configuration, the `syslog` channel will write the message to the "
"system log; however, since the error message is not `critical` or above, it "
"will not be sent to Slack. However, if we log an `emergency` message, it "
"will be sent to both the system log and Slack since the `emergency` level is "
"above our minimum level threshold for both channels:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:128
#, no-wrap
msgid "    Log::emergency('The system is down!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:130
#, no-wrap
msgid "<a name=\"writing-log-messages\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:130
#, no-wrap
msgid "Writing Log Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:133
msgid ""
"You may write information to the logs using the `Log` "
"[facade](/docs/{{version}}/facades). As previously mentioned, the logger "
"provides the eight logging levels defined in the [RFC 5424 "
"specification](https://tools.ietf.org/html/rfc5424): **emergency**, "
"**alert**, **critical**, **error**, **warning**, **notice**, **info** and "
"**debug**:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:135 docs/8.x/logging.md:179 docs/8.x/logging.md:219
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:144
#, no-wrap
msgid ""
"    Log::emergency($message);\n"
"    Log::alert($message);\n"
"    Log::critical($message);\n"
"    Log::error($message);\n"
"    Log::warning($message);\n"
"    Log::notice($message);\n"
"    Log::info($message);\n"
"    Log::debug($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:146
msgid ""
"You may call any of these methods to log a message for the corresponding "
"level. By default, the message will be written to the default log channel as "
"configured by your `logging` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:148 docs/8.x/logging.md:185 docs/8.x/logging.md:247 docs/8.x/logging.md:325
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:150
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:154
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\User;\n"
"    use Illuminate\\Support\\Facades\\Log;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:166
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show the profile for the given user.\n"
"         *\n"
"         * @param  int  $id\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function show($id)\n"
"        {\n"
"            Log::info('Showing the user profile for user: '.$id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:172
#, no-wrap
msgid ""
"            return view('user.profile', [\n"
"                'user' => User::findOrFail($id)\n"
"            ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:174
#, no-wrap
msgid "<a name=\"contextual-information\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:174
#, no-wrap
msgid "Contextual Information"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:177
msgid ""
"An array of contextual data may be passed to the log methods. This "
"contextual data will be formatted and displayed with the log message:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:181
#, no-wrap
msgid "    Log::info('User failed to login.', ['id' => $user->id]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:183
msgid ""
"Occasionally, you may wish to specify some contextual information that "
"should be included with all subsequent log entries. For example, you may "
"wish to log a request ID that is associated with each incoming request to "
"your application. To accomplish this, you may call the `Log` facade's "
"`withContext` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:187
#, no-wrap
msgid "    namespace App\\Http\\Middleware;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:191
#, no-wrap
msgid ""
"    use Closure;\n"
"    use Illuminate\\Support\\Facades\\Log;\n"
"    use Illuminate\\Support\\Str;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:204
#, no-wrap
msgid ""
"    class AssignRequestId\n"
"    {\n"
"        /**\n"
"         * Handle an incoming request.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Closure  $next\n"
"         * @return mixed\n"
"         */\n"
"        public function handle($request, Closure $next)\n"
"        {\n"
"            $requestId = (string) Str::uuid();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:208
#, no-wrap
msgid ""
"            Log::withContext([\n"
"                'request-id' => $requestId\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:212
#, no-wrap
msgid ""
"            return $next($request)->header('Request-Id', $requestId);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:214
#, no-wrap
msgid "<a name=\"writing-to-specific-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:214
#, no-wrap
msgid "Writing To Specific Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:217
msgid ""
"Sometimes you may wish to log a message to a channel other than your "
"application's default channel. You may use the `channel` method on the `Log` "
"facade to retrieve and log to any channel defined in your configuration "
"file:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:221
#, no-wrap
msgid "    Log::channel('slack')->info('Something happened!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:223
msgid ""
"If you would like to create an on-demand logging stack consisting of "
"multiple channels, you may use the `stack` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:225
#, no-wrap
msgid "    Log::stack(['single', 'slack'])->info('Something happened!');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:228
#, no-wrap
msgid "<a name=\"monolog-channel-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/logging.md:228
#, no-wrap
msgid "Monolog Channel Customization"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:231
#, no-wrap
msgid "<a name=\"customizing-monolog-for-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:231
#, no-wrap
msgid "Customizing Monolog For Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:234
msgid ""
"Sometimes you may need complete control over how Monolog is configured for "
"an existing channel. For example, you may want to configure a custom Monolog "
"`FormatterInterface` implementation for Laravel's built-in `single` channel."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:236
msgid ""
"To get started, define a `tap` array on the channel's configuration. The "
"`tap` array should contain a list of classes that should have an opportunity "
"to customize (or \"tap\" into) the Monolog instance after it is "
"created. There is no conventional location where these classes should be "
"placed, so you are free to create a directory within your application to "
"contain these classes:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:243
#, no-wrap
msgid ""
"    'single' => [\n"
"        'driver' => 'single',\n"
"        'tap' => [App\\Logging\\CustomizeFormatter::class],\n"
"        'path' => storage_path('logs/laravel.log'),\n"
"        'level' => 'debug',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:245
msgid ""
"Once you have configured the `tap` option on your channel, you're ready to "
"define the class that will customize your Monolog instance. This class only "
"needs a single method: `__invoke`, which receives an "
"`Illuminate\\Log\\Logger` instance. The `Illuminate\\Log\\Logger` instance "
"proxies all method calls to the underlying Monolog instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:249 docs/8.x/logging.md:327
#, no-wrap
msgid "    namespace App\\Logging;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:251
#, no-wrap
msgid "    use Monolog\\Formatter\\LineFormatter;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:269
#, no-wrap
msgid ""
"    class CustomizeFormatter\n"
"    {\n"
"        /**\n"
"         * Customize the given logger instance.\n"
"         *\n"
"         * @param  \\Illuminate\\Log\\Logger  $logger\n"
"         * @return void\n"
"         */\n"
"        public function __invoke($logger)\n"
"        {\n"
"            foreach ($logger->getHandlers() as $handler) {\n"
"                $handler->setFormatter(new LineFormatter(\n"
"                    '[%datetime%] %channel%.%level_name%: %message% "
"%context% %extra%'\n"
"                ));\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:271
#, no-wrap
msgid ""
"> {tip} All of your \"tap\" classes are resolved by the [service "
"container](/docs/{{version}}/container), so any constructor dependencies "
"they require will automatically be injected.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:273
#, no-wrap
msgid "<a name=\"creating-monolog-handler-channels\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:273
#, no-wrap
msgid "Creating Monolog Handler Channels"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:276
msgid ""
"Monolog has a variety of [available "
"handlers](https://github.com/Seldaek/monolog/tree/master/src/Monolog/Handler) "
"and Laravel does not include a built-in channel for each one. In some cases, "
"you may wish to create a custom channel that is merely an instance of a "
"specific Monolog handler that does not have a corresponding Laravel log "
"driver.  These channels can be easily created using the `monolog` driver."
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:278
msgid ""
"When using the `monolog` driver, the `handler` configuration option is used "
"to specify which handler will be instantiated. Optionally, any constructor "
"parameters the handler needs may be specified using the `with` configuration "
"option:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:287
#, no-wrap
msgid ""
"    'logentries' => [\n"
"        'driver'  => 'monolog',\n"
"        'handler' => Monolog\\Handler\\SyslogUdpHandler::class,\n"
"        'with' => [\n"
"            'host' => 'my.logentries.internal.datahubhost.company.com',\n"
"            'port' => '10000',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:289
#, no-wrap
msgid "<a name=\"monolog-formatters\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/logging.md:289
#, no-wrap
msgid "Monolog Formatters"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:292
msgid ""
"When using the `monolog` driver, the Monolog `LineFormatter` will be used as "
"the default formatter. However, you may customize the type of formatter "
"passed to the handler using the `formatter` and `formatter_with` "
"configuration options:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:301
#, no-wrap
msgid ""
"    'browser' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\BrowserConsoleHandler::class,\n"
"        'formatter' => Monolog\\Formatter\\HtmlFormatter::class,\n"
"        'formatter_with' => [\n"
"            'dateFormat' => 'Y-m-d',\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:303
msgid ""
"If you are using a Monolog handler that is capable of providing its own "
"formatter, you may set the value of the `formatter` configuration option to "
"`default`:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:309
#, no-wrap
msgid ""
"    'newrelic' => [\n"
"        'driver' => 'monolog',\n"
"        'handler' => Monolog\\Handler\\NewRelicHandler::class,\n"
"        'formatter' => 'default',\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:311
#, no-wrap
msgid "<a name=\"creating-custom-channels-via-factories\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/logging.md:311
#, no-wrap
msgid "Creating Custom Channels Via Factories"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:314
msgid ""
"If you would like to define an entirely custom channel in which you have "
"full control over Monolog's instantiation and configuration, you may specify "
"a `custom` driver type in your `config/logging.php` configuration file. Your "
"configuration should include a `via` option that contains the name of the "
"factory class which will be invoked to create the Monolog instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:321
#, no-wrap
msgid ""
"    'channels' => [\n"
"        'example-custom-channel' => [\n"
"            'driver' => 'custom',\n"
"            'via' => App\\Logging\\CreateCustomLogger::class,\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:323
msgid ""
"Once you have configured the `custom` driver channel, you're ready to define "
"the class that will create your Monolog instance. This class only needs a "
"single `__invoke` method which should return the Monolog logger "
"instance. The method will receive the channels configuration array as its "
"only argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:329
#, no-wrap
msgid "    use Monolog\\Logger;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/logging.md:342
#, no-wrap
msgid ""
"    class CreateCustomLogger\n"
"    {\n"
"        /**\n"
"         * Create a custom Monolog instance.\n"
"         *\n"
"         * @param  array  $config\n"
"         * @return \\Monolog\\Logger\n"
"         */\n"
"        public function __invoke(array $config)\n"
"        {\n"
"            return new Logger(...);\n"
"        }\n"
"    }\n"
msgstr ""
