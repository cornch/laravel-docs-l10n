msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:27\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/routing.pot\n"
"X-Crowdin-File-ID: 141\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/routing.md:1
#: ./docs/9.x/routing.md:1
#: ./docs/10.x/routing.md:1
#: ./docs/11.x/routing.md:1
#: ./docs/master/routing.md:1
msgctxt "H1"
msgid "Routing"
msgstr "路由"

#: ./docs/8.x/routing.md:3
#: ./docs/9.x/routing.md:3
#: ./docs/10.x/routing.md:3
#: ./docs/11.x/routing.md:3
#: ./docs/master/routing.md:3
msgctxt "P"
msgid "[Basic Routing](#basic-routing)"
msgstr "[基礎路由](#basic-routing)"

#: ./docs/11.x/routing.md:4
#: ./docs/master/routing.md:4
msgctxt "P"
msgid "[The Default Route Files](#the-default-route-files)"
msgstr ""

#: ./docs/8.x/routing.md:4
#: ./docs/9.x/routing.md:4
#: ./docs/10.x/routing.md:4
#: ./docs/11.x/routing.md:5
#: ./docs/master/routing.md:5
msgctxt "P"
msgid "[Redirect Routes](#redirect-routes)"
msgstr "[重新導向的 Route](#redirect-routes)"

#: ./docs/8.x/routing.md:5
#: ./docs/9.x/routing.md:5
#: ./docs/10.x/routing.md:5
#: ./docs/11.x/routing.md:6
#: ./docs/master/routing.md:6
msgctxt "P"
msgid "[View Routes](#view-routes)"
msgstr "[View Route](#view-routes)"

#: ./docs/8.x/routing.md:6
#: ./docs/9.x/routing.md:7
#: ./docs/10.x/routing.md:7
#: ./docs/11.x/routing.md:9
#: ./docs/master/routing.md:9
msgctxt "P"
msgid "[Route Parameters](#route-parameters)"
msgstr "[Route 參數](#route-parameters)"

#: ./docs/9.x/routing.md:6
#: ./docs/10.x/routing.md:6
msgctxt "P"
msgid "[The Route List](#the-route-list)"
msgstr "[Route 列表](#the-route-list)"

#: ./docs/11.x/routing.md:7
#: ./docs/master/routing.md:7
msgctxt "P"
msgid "[Listing Your Routes](#listing-your-routes)"
msgstr ""

#: ./docs/8.x/routing.md:7
#: ./docs/9.x/routing.md:8
#: ./docs/10.x/routing.md:8
#: ./docs/11.x/routing.md:10
#: ./docs/master/routing.md:10
msgctxt "P"
msgid "[Required Parameters](#required-parameters)"
msgstr "[必填參數](#required-parameters)"

#: ./docs/11.x/routing.md:8
#: ./docs/master/routing.md:8
msgctxt "P"
msgid "[Routing Customization](#routing-customization)"
msgstr ""

#: ./docs/8.x/routing.md:8
#: ./docs/9.x/routing.md:9
#: ./docs/10.x/routing.md:9
#: ./docs/11.x/routing.md:11
#: ./docs/master/routing.md:11
msgctxt "P"
msgid "[Optional Parameters](#parameters-optional-parameters)"
msgstr "[可選參數](#parameters-optional-parameters)"

#: ./docs/8.x/routing.md:9
#: ./docs/9.x/routing.md:10
#: ./docs/10.x/routing.md:10
#: ./docs/11.x/routing.md:12
#: ./docs/master/routing.md:12
msgctxt "P"
msgid "[Regular Expression Constraints](#parameters-regular-expression-constraints)"
msgstr "[正規表示式的條件限制](#parameters-regular-expression-constraints)"

#: ./docs/8.x/routing.md:10
#: ./docs/9.x/routing.md:11
#: ./docs/10.x/routing.md:11
#: ./docs/11.x/routing.md:13
#: ./docs/master/routing.md:13
msgctxt "P"
msgid "[Named Routes](#named-routes)"
msgstr "[命名 Route](#named-routes)"

#: ./docs/8.x/routing.md:11
#: ./docs/9.x/routing.md:12
#: ./docs/10.x/routing.md:12
#: ./docs/11.x/routing.md:14
#: ./docs/master/routing.md:14
msgctxt "P"
msgid "[Route Groups](#route-groups)"
msgstr "[Route 群組](#route-groups)"

#: ./docs/8.x/routing.md:12
#: ./docs/9.x/routing.md:13
#: ./docs/10.x/routing.md:13
#: ./docs/11.x/routing.md:15
#: ./docs/master/routing.md:15
msgctxt "P"
msgid "[Middleware](#route-group-middleware)"
msgstr "[Middleware](#route-group-middleware)"

#: ./docs/8.x/routing.md:13
#: ./docs/9.x/routing.md:14
#: ./docs/10.x/routing.md:14
#: ./docs/11.x/routing.md:16
#: ./docs/master/routing.md:16
msgctxt "P"
msgid "[Controllers](#route-group-controllers)"
msgstr "[Controller](#route-group-controllers)"

#: ./docs/8.x/routing.md:14
#: ./docs/9.x/routing.md:15
#: ./docs/10.x/routing.md:15
#: ./docs/11.x/routing.md:17
#: ./docs/master/routing.md:17
msgctxt "P"
msgid "[Subdomain Routing](#route-group-subdomain-routing)"
msgstr "[子網域的路由](#route-group-subdomain-routing)"

#: ./docs/8.x/routing.md:15
#: ./docs/9.x/routing.md:16
#: ./docs/10.x/routing.md:16
#: ./docs/11.x/routing.md:18
#: ./docs/master/routing.md:18
msgctxt "P"
msgid "[Route Prefixes](#route-group-prefixes)"
msgstr "[Route 前置詞](#route-group-prefixes)"

#: ./docs/8.x/routing.md:16
#: ./docs/9.x/routing.md:17
#: ./docs/10.x/routing.md:17
#: ./docs/11.x/routing.md:19
#: ./docs/master/routing.md:19
msgctxt "P"
msgid "[Route Name Prefixes](#route-group-name-prefixes)"
msgstr "[Route 名稱的前置詞](#route-group-name-prefixes)"

#: ./docs/8.x/routing.md:17
#: ./docs/9.x/routing.md:18
#: ./docs/10.x/routing.md:18
#: ./docs/11.x/routing.md:20
#: ./docs/master/routing.md:20
msgctxt "P"
msgid "[Route Model Binding](#route-model-binding)"
msgstr "[Route 的 Model 繫結](#route-model-binding)"

#: ./docs/8.x/routing.md:18
#: ./docs/9.x/routing.md:19
#: ./docs/10.x/routing.md:19
#: ./docs/11.x/routing.md:21
#: ./docs/master/routing.md:21
msgctxt "P"
msgid "[Implicit Binding](#implicit-binding)"
msgstr "[隱式繫結](#implicit-binding)"

#: ./docs/8.x/routing.md:19
#: ./docs/9.x/routing.md:21
#: ./docs/10.x/routing.md:21
#: ./docs/11.x/routing.md:23
#: ./docs/master/routing.md:23
msgctxt "P"
msgid "[Explicit Binding](#explicit-binding)"
msgstr "[顯式繫結](#explicit-binding)"

#: ./docs/8.x/routing.md:20
#: ./docs/9.x/routing.md:22
#: ./docs/10.x/routing.md:22
#: ./docs/11.x/routing.md:24
#: ./docs/master/routing.md:24
msgctxt "P"
msgid "[Fallback Routes](#fallback-routes)"
msgstr "[遞補 Route](#fallback-routes)"

#: ./docs/9.x/routing.md:20
#: ./docs/10.x/routing.md:20
#: ./docs/11.x/routing.md:22
#: ./docs/master/routing.md:22
msgctxt "P"
msgid "[Implicit Enum Binding](#implicit-enum-binding)"
msgstr "[隱式 Enum 繫結](#implicit-enum-binding)"

#: ./docs/8.x/routing.md:21
#: ./docs/9.x/routing.md:23
#: ./docs/10.x/routing.md:23
#: ./docs/11.x/routing.md:25
#: ./docs/master/routing.md:25
msgctxt "P"
msgid "[Rate Limiting](#rate-limiting)"
msgstr "[頻率限制](#rate-limiting)"

#: ./docs/8.x/routing.md:22
#: ./docs/9.x/routing.md:24
#: ./docs/10.x/routing.md:24
#: ./docs/11.x/routing.md:26
#: ./docs/master/routing.md:26
msgctxt "P"
msgid "[Defining Rate Limiters](#defining-rate-limiters)"
msgstr "[定義 Rate Limiter](#defining-rate-limiters)"

#: ./docs/8.x/routing.md:23
#: ./docs/9.x/routing.md:25
msgctxt "P"
msgid "[Attaching Rate Limiters To Routes](#attaching-rate-limiters-to-routes)"
msgstr "[在 Route 上附加 Rate Limiter](#attaching-rate-limiters-to-routes)"

#: ./docs/8.x/routing.md:24
#: ./docs/9.x/routing.md:26
#: ./docs/10.x/routing.md:26
#: ./docs/11.x/routing.md:28
#: ./docs/master/routing.md:28
msgctxt "P"
msgid "[Form Method Spoofing](#form-method-spoofing)"
msgstr "[Form Method 的模擬](#form-method-spoofing)"

#: ./docs/10.x/routing.md:25
#: ./docs/11.x/routing.md:27
#: ./docs/master/routing.md:27
msgctxt "P"
msgid "[Attaching Rate Limiters to Routes](#attaching-rate-limiters-to-routes)"
msgstr ""

#: ./docs/8.x/routing.md:25
#: ./docs/9.x/routing.md:27
msgctxt "P"
msgid "[Accessing The Current Route](#accessing-the-current-route)"
msgstr "[存取目前 Route](#accessing-the-current-route)"

#: ./docs/8.x/routing.md:26
#: ./docs/9.x/routing.md:28
#: ./docs/10.x/routing.md:28
#: ./docs/11.x/routing.md:30
#: ./docs/master/routing.md:30
msgctxt "P"
msgid "[Cross-Origin Resource Sharing (CORS)](#cors)"
msgstr "[跨原始來源資源共用 (CORS, Cross-Origin Resource Sharing)(#cors)"

#: ./docs/10.x/routing.md:27
#: ./docs/11.x/routing.md:29
#: ./docs/master/routing.md:29
msgctxt "P"
msgid "[Accessing the Current Route](#accessing-the-current-route)"
msgstr ""

#: ./docs/8.x/routing.md:27
#: ./docs/9.x/routing.md:29
#: ./docs/10.x/routing.md:29
#: ./docs/11.x/routing.md:31
#: ./docs/master/routing.md:31
msgctxt "P"
msgid "[Route Caching](#route-caching)"
msgstr "[Route 快取](#route-caching)"

#: ./docs/8.x/routing.md:29
#: ./docs/9.x/routing.md:31
#: ./docs/10.x/routing.md:31
#: ./docs/11.x/routing.md:33
#: ./docs/master/routing.md:33
#~ msgctxt "P"
#~ msgid "<a name=\"basic-routing\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:30
#: ./docs/9.x/routing.md:32
#: ./docs/10.x/routing.md:32
#: ./docs/11.x/routing.md:34
#: ./docs/master/routing.md:34
msgctxt "H2"
msgid "Basic Routing"
msgstr "基礎路由"

#: ./docs/8.x/routing.md:32
#: ./docs/9.x/routing.md:34
#: ./docs/10.x/routing.md:34
#: ./docs/11.x/routing.md:36
#: ./docs/master/routing.md:36
msgctxt "P"
msgid "The most basic Laravel routes accept a URI and a closure, providing a very simple and expressive method of defining routes and behavior without complicated routing configuration files:"
msgstr "最基礎的 Laravel Route (路由) 就是接受一個 URI 與一個閉包，我們可以使用簡單直觀的方法來定義 Route 與其行為，而不需複雜 Route 設定檔："

#: ./docs/8.x/routing.md:34
#: ./docs/9.x/routing.md:36
#: ./docs/10.x/routing.md:36
#: ./docs/11.x/routing.md:38
#: ./docs/master/routing.md:38
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/greeting', function () {\n"
"    return 'Hello World';\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:40
#: ./docs/9.x/routing.md:42
#: ./docs/10.x/routing.md:42
#: ./docs/11.x/routing.md:44
#: ./docs/master/routing.md:44
#~ msgctxt "P"
#~ msgid "<a name=\"the-default-route-files\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:41
#: ./docs/9.x/routing.md:43
#: ./docs/10.x/routing.md:43
#: ./docs/11.x/routing.md:45
#: ./docs/master/routing.md:45
msgctxt "H4"
msgid "The Default Route Files"
msgstr "預設的 Route 檔案"

#: ./docs/8.x/routing.md:43
#: ./docs/9.x/routing.md:45
#: ./docs/10.x/routing.md:45
msgctxt "P"
msgid "All Laravel routes are defined in your route files, which are located in the `routes` directory. These files are automatically loaded by your application's `App\\Providers\\RouteServiceProvider`. The `routes/web.php` file defines routes that are for your web interface. These routes are assigned the `web` middleware group, which provides features like session state and CSRF protection. The routes in `routes/api.php` are stateless and are assigned the `api` middleware group."
msgstr "Laravel 中所有的 Route 都在 Route 檔案中定義，這些檔案位在 `routes` 目錄下。這些檔案會由專案中的 `App\\Providers\\RouteServiceProvider` 自動載入。`routes/web.php` 檔案中定義了網頁介面的 Route。這些 Route 被指派到 `web` Middleware 群組中，該 Middleware 群組提供了一些如 Session 狀態與 CSRF 保護等功能。`routes/api.php` 是無狀態的 (Stateless)，裡面的 Route 會被指派給 `api` Middleware 群組。"

#: ./docs/8.x/routing.md:45
#: ./docs/9.x/routing.md:47
#: ./docs/10.x/routing.md:47
#: ./docs/11.x/routing.md:49
#: ./docs/master/routing.md:49
msgctxt "P"
msgid "For most applications, you will begin by defining routes in your `routes/web.php` file. The routes defined in `routes/web.php` may be accessed by entering the defined route's URL in your browser. For example, you may access the following route by navigating to `http://example.com/user` in your browser:"
msgstr "對於大多數的程式來說，我們會在 `routes/web.php` 檔案中定義 Route。我們可以在瀏覽器中打開 Route 定義的 URL 來存取 `routes/web.php` 中定義的路由。舉例來說，我們可以在瀏覽器中打開 `http://example.com/user` 來存取下來路由："

#: ./docs/11.x/routing.md:47
#: ./docs/master/routing.md:47
msgctxt "P"
msgid "All Laravel routes are defined in your route files, which are located in the `routes` directory. These files are automatically loaded by Laravel using the configuration specified in your application's `bootstrap/app.php` file. The `routes/web.php` file defines routes that are for your web interface. These routes are assigned the `web` [middleware group](/docs/{{version}}/middleware#laravels-default-middleware-groups), which provides features like session state and CSRF protection."
msgstr ""

#: ./docs/8.x/routing.md:47
#: ./docs/9.x/routing.md:49
#: ./docs/10.x/routing.md:49
#: ./docs/11.x/routing.md:51
#: ./docs/master/routing.md:51
msgctxt "CODE"
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"Route::get('/user', [UserController::class, 'index']);"
msgstr ""

#: ./docs/8.x/routing.md:51
#: ./docs/9.x/routing.md:53
#: ./docs/10.x/routing.md:53
msgctxt "P"
msgid "Routes defined in the `routes/api.php` file are nested within a route group by the `RouteServiceProvider`. Within this group, the `/api` URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your `RouteServiceProvider` class."
msgstr "`routes/api.php` 檔案中定義的 Route 放在巢狀放置在 `RouteServiceProvider` 中的 Route 群組內。在這個群組中，Laravel 會自動加上 `/api` URI 前置詞 (Prefix)，因此在這個檔案中，我們不需手動在所有 Route 前方加上 `/api`。我們也可以修改 `RouteServiceProvider` 類別來修改這個前置詞以及其他一些 Route 群組的選項。"

#: ./docs/8.x/routing.md:53
#: ./docs/9.x/routing.md:55
#: ./docs/10.x/routing.md:55
#: ./docs/11.x/routing.md:78
#: ./docs/master/routing.md:78
#~ msgctxt "P"
#~ msgid "<a name=\"available-router-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:54
#: ./docs/9.x/routing.md:56
#: ./docs/10.x/routing.md:56
#: ./docs/11.x/routing.md:79
#: ./docs/master/routing.md:79
msgctxt "H4"
msgid "Available Router Methods"
msgstr "可用的 Router 方法"

#: ./docs/11.x/routing.md:55
#: ./docs/master/routing.md:55
#~ msgctxt "P"
#~ msgid "<a name=\"api-routes\"></a>"
#~ msgstr ""

#: ./docs/11.x/routing.md:56
#: ./docs/master/routing.md:56
msgctxt "H4"
msgid "API Routes"
msgstr ""

#: ./docs/8.x/routing.md:56
#: ./docs/9.x/routing.md:58
#: ./docs/10.x/routing.md:58
#: ./docs/11.x/routing.md:81
#: ./docs/master/routing.md:81
msgctxt "P"
msgid "The router allows you to register routes that respond to any HTTP verb:"
msgstr "使用 Router 就能讓我們註冊能回應任何 HTTP 動詞的 Route："

#: ./docs/11.x/routing.md:58
#: ./docs/master/routing.md:58
msgctxt "P"
msgid "If your application will also offer a stateless API, you may enable API routing using the `install:api` Artisan command:"
msgstr ""

#: ./docs/8.x/routing.md:58
#: ./docs/9.x/routing.md:60
#: ./docs/10.x/routing.md:60
#: ./docs/11.x/routing.md:83
#: ./docs/master/routing.md:83
msgctxt "CODE"
msgid ""
"Route::get($uri, $callback);\n"
"Route::post($uri, $callback);\n"
"Route::put($uri, $callback);\n"
"Route::patch($uri, $callback);\n"
"Route::delete($uri, $callback);\n"
"Route::options($uri, $callback);"
msgstr ""

#: ./docs/11.x/routing.md:60
#: ./docs/master/routing.md:60
msgctxt "CODE: shell"
msgid "php artisan install:api"
msgstr ""

#: ./docs/11.x/routing.md:64
#: ./docs/master/routing.md:64
msgctxt "P"
msgid "The `install:api` command installs [Laravel Sanctum](/docs/{{version}}/sanctum), which provides a robust, yet simple API token authentication guard which can be used to authenticate third-party API consumers, SPAs, or mobile applications. In addition, the `install:api` command creates the `routes/api.php` file:"
msgstr ""

#: ./docs/8.x/routing.md:65
#: ./docs/9.x/routing.md:67
#: ./docs/10.x/routing.md:67
#: ./docs/11.x/routing.md:90
#: ./docs/master/routing.md:90
msgctxt "P"
msgid "Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the `match` method. Or, you may even register a route that responds to all HTTP verbs using the `any` method:"
msgstr "有時候，我們可能需要註冊一個能回應多個 HTTP 動詞的 Route。這時可以使用 `match` 方法。或者，我們甚至可以使用 `any` 方法來註冊一個回應所有 HTTP 動詞的 Route："

#: ./docs/11.x/routing.md:66
msgctxt "CODE"
msgid ""
"Route::get('/user', function (Request $request) {\n"
"    return $request->user();\n"
"})->middleware('auth:sanctum');"
msgstr ""

#: ./docs/master/routing.md:66
msgctxt "CODE"
msgid ""
"Route::get('/user', function (Request $request) {\n"
"    return $request->user();\n"
"})->middleware(Authenticate::using('sanctum'));"
msgstr ""

#: ./docs/8.x/routing.md:67
#: ./docs/9.x/routing.md:69
msgctxt "CODE"
msgid ""
"Route::match(['get', 'post'], '/', function () {\n"
"    //\n"
"});\n"
"\n"
"Route::any('/', function () {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:69
#: ./docs/11.x/routing.md:92
#: ./docs/master/routing.md:92
msgctxt "CODE"
msgid ""
"Route::match(['get', 'post'], '/', function () {\n"
"    // ...\n"
"});\n"
"\n"
"Route::any('/', function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:70
#: ./docs/master/routing.md:70
msgctxt "P"
msgid "The routes in `routes/api.php` are stateless and are assigned to the `api` [middleware group](/docs/{{version}}/middleware#laravels-default-middleware-groups). Additionally, the `/api` URI prefix is automatically applied to these routes, so you do not need to manually apply it to every route in the file. You may change the prefix by modifying your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/routing.md:72
#: ./docs/master/routing.md:72
msgctxt "CODE"
msgid ""
"->withRouting(\n"
"    api: __DIR__.'/../routes/api.php',\n"
"    apiPrefix: 'api/admin',\n"
"    // ...\n"
")"
msgstr ""

#: ./docs/8.x/routing.md:75
#: ./docs/9.x/routing.md:78
#: ./docs/10.x/routing.md:78
#: ./docs/11.x/routing.md:101
#: ./docs/master/routing.md:101
msgctxt "P"
msgid "When defining multiple routes that share the same URI, routes using the `get`, `post`, `put`, `patch`, `delete`, and `options` methods should be defined before routes using the `any`, `match`, and `redirect` methods. This ensures the incoming request is matched with the correct route."
msgstr "註冊多個共享同 URI 的 Route 時，應將這些 `any`, `match`, 與 `redirect` 方法的 Route 定義在 `get`, `post`, `put`, `patch`, `delete`, 與 `options` 方法定義之前。這樣一來可以確保連入的 Request 被配對到正確的 Route 上。"

#: ./docs/8.x/routing.md:77
#: ./docs/9.x/routing.md:80
#: ./docs/10.x/routing.md:80
#: ./docs/11.x/routing.md:103
#: ./docs/master/routing.md:103
#~ msgctxt "P"
#~ msgid "<a name=\"dependency-injection\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:78
#: ./docs/9.x/routing.md:81
#: ./docs/10.x/routing.md:81
#: ./docs/11.x/routing.md:104
#: ./docs/master/routing.md:104
msgctxt "H4"
msgid "Dependency Injection"
msgstr "相依性插入"

#: ./docs/8.x/routing.md:80
#: ./docs/9.x/routing.md:83
#: ./docs/10.x/routing.md:83
#: ./docs/11.x/routing.md:106
#: ./docs/master/routing.md:106
msgctxt "P"
msgid "You may type-hint any dependencies required by your route in your route's callback signature. The declared dependencies will automatically be resolved and injected into the callback by the Laravel [service container](/docs/{{version}}/container). For example, you may type-hint the `Illuminate\\Http\\Request` class to have the current HTTP request automatically injected into your route callback:"
msgstr "可以在 Route 的回呼簽章 (Signature) 上型別提示 (Type-Hint) 任何 Route 所需的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動解析並插入所定義的相依性。舉例來說，我們可以型別提示 `Illuminate\\Http\\Request` 並自動插入到 Route 回呼中，該類別代表目前的 HTTP Request："

#: ./docs/8.x/routing.md:82
#: ./docs/9.x/routing.md:85
#: ./docs/10.x/routing.md:85
#: ./docs/11.x/routing.md:108
#: ./docs/master/routing.md:108
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/users', function (Request $request) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:88
#: ./docs/9.x/routing.md:91
#: ./docs/10.x/routing.md:91
#: ./docs/11.x/routing.md:114
#: ./docs/master/routing.md:114
#~ msgctxt "P"
#~ msgid "<a name=\"csrf-protection\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:89
#: ./docs/9.x/routing.md:92
#: ./docs/10.x/routing.md:92
#: ./docs/11.x/routing.md:115
#: ./docs/master/routing.md:115
msgctxt "H4"
msgid "CSRF Protection"
msgstr "CSRF 保護"

#: ./docs/8.x/routing.md:91
#: ./docs/9.x/routing.md:94
#: ./docs/10.x/routing.md:94
#: ./docs/11.x/routing.md:117
#: ./docs/master/routing.md:117
msgctxt "P"
msgid "Remember, any HTML forms pointing to `POST`, `PUT`, `PATCH`, or `DELETE` routes that are defined in the `web` routes file should include a CSRF token field. Otherwise, the request will be rejected. You can read more about CSRF protection in the [CSRF documentation](/docs/{{version}}/csrf):"
msgstr "請記得，當 HTML 表單指向 `web` Route 檔的 `POST`, `PUT`, `PATCH`, 與 `DELETE` Route 時，都應包含一個 CSRF 權杖欄位。若未包含權杖欄位，則該 Request 會被拒絕。更多有關 CSRF 保護的資訊可以參考 [CSRF 說明文件](/docs/{{version}}/csrf)："

#: ./docs/8.x/routing.md:93
#: ./docs/9.x/routing.md:96
#: ./docs/10.x/routing.md:96
#: ./docs/11.x/routing.md:119
#: ./docs/master/routing.md:119
msgctxt "CODE"
msgid ""
"<form method=\"POST\" action=\"/profile\">\n"
"    @csrf\n"
"    ...\n"
"</form>"
msgstr ""

#: ./docs/8.x/routing.md:98
#: ./docs/9.x/routing.md:101
#: ./docs/10.x/routing.md:101
#: ./docs/11.x/routing.md:124
#: ./docs/master/routing.md:124
#~ msgctxt "P"
#~ msgid "<a name=\"redirect-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:99
#: ./docs/9.x/routing.md:102
#: ./docs/10.x/routing.md:102
#: ./docs/11.x/routing.md:125
#: ./docs/master/routing.md:125
msgctxt "H3"
msgid "Redirect Routes"
msgstr "重新導向的 Route"

#: ./docs/8.x/routing.md:101
#: ./docs/9.x/routing.md:104
#: ./docs/10.x/routing.md:104
#: ./docs/11.x/routing.md:127
#: ./docs/master/routing.md:127
msgctxt "P"
msgid "If you are defining a route that redirects to another URI, you may use the `Route::redirect` method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:"
msgstr "若想定義可以重新導向到另一個 URI 的 Route，可以使用 `Route::redirect` 方法。這個方法提供了一個方便的捷徑，讓你不需要為了簡單的重新導向定義完整的 Route 或 Controller："

#: ./docs/8.x/routing.md:103
#: ./docs/9.x/routing.md:106
#: ./docs/10.x/routing.md:106
#: ./docs/11.x/routing.md:129
#: ./docs/master/routing.md:129
msgctxt "CODE"
msgid "Route::redirect('/here', '/there');"
msgstr ""

#: ./docs/8.x/routing.md:105
#: ./docs/9.x/routing.md:108
#: ./docs/10.x/routing.md:108
#: ./docs/11.x/routing.md:131
#: ./docs/master/routing.md:131
msgctxt "P"
msgid "By default, `Route::redirect` returns a `302` status code. You may customize the status code using the optional third parameter:"
msgstr "預設情況下，`Route::redirect` 回傳 `302` 狀態碼。我們可以使用可選的第三個參數來自訂狀態碼："

#: ./docs/8.x/routing.md:107
#: ./docs/9.x/routing.md:110
#: ./docs/10.x/routing.md:110
#: ./docs/11.x/routing.md:133
#: ./docs/master/routing.md:133
msgctxt "CODE"
msgid "Route::redirect('/here', '/there', 301);"
msgstr ""

#: ./docs/8.x/routing.md:109
#: ./docs/9.x/routing.md:112
#: ./docs/10.x/routing.md:112
#: ./docs/11.x/routing.md:135
#: ./docs/master/routing.md:135
msgctxt "P"
msgid "Or, you may use the `Route::permanentRedirect` method to return a `301` status code:"
msgstr "或者，我們也可以使用 `Route::permanentRedirect` 方法來回傳 `301` 狀態碼："

#: ./docs/8.x/routing.md:111
#: ./docs/9.x/routing.md:114
#: ./docs/10.x/routing.md:114
#: ./docs/11.x/routing.md:137
#: ./docs/master/routing.md:137
msgctxt "CODE"
msgid "Route::permanentRedirect('/here', '/there');"
msgstr ""

#: ./docs/8.x/routing.md:113
#: ./docs/9.x/routing.md:117
#: ./docs/10.x/routing.md:117
#: ./docs/11.x/routing.md:140
#: ./docs/master/routing.md:140
msgctxt "P"
msgid "When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: `destination` and `status`."
msgstr "在重新導向 Route 中使用 Route 參數時，有幾個參數名稱是 Laravel 的保留字，無法使用：`destination` 與 `status`。"

#: ./docs/8.x/routing.md:115
#: ./docs/9.x/routing.md:119
#: ./docs/10.x/routing.md:119
#: ./docs/11.x/routing.md:142
#: ./docs/master/routing.md:142
#~ msgctxt "P"
#~ msgid "<a name=\"view-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:116
#: ./docs/9.x/routing.md:120
#: ./docs/10.x/routing.md:120
#: ./docs/11.x/routing.md:143
#: ./docs/master/routing.md:143
msgctxt "H3"
msgid "View Routes"
msgstr "View 的 Route"

#: ./docs/8.x/routing.md:118
#: ./docs/9.x/routing.md:122
#: ./docs/10.x/routing.md:122
#: ./docs/11.x/routing.md:145
#: ./docs/master/routing.md:145
msgctxt "P"
msgid "If your route only needs to return a [view](/docs/{{version}}/views), you may use the `Route::view` method. Like the `redirect` method, this method provides a simple shortcut so that you do not have to define a full route or controller. The `view` method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:"
msgstr "若某個 Route 只需要回傳一個 [View](/docs/{{version}}/views)，則可以使用 `Route::view` 方法。與 `redirect` 方法類似，這個方法提供了一個簡單的捷徑，能讓我們不需定義完整的 Route 或 Controller。`view` 方法接受一個 URI 作為其第一個引數，而第二個引數則是 View 的名稱。此外，也可以提供一組陣列，其中包含要傳給 View 的資料，並作為可選的第三個引數傳入："

#: ./docs/8.x/routing.md:120
#: ./docs/9.x/routing.md:124
#: ./docs/10.x/routing.md:124
#: ./docs/11.x/routing.md:147
#: ./docs/master/routing.md:147
msgctxt "CODE"
msgid ""
"Route::view('/welcome', 'welcome');\n"
"\n"
"Route::view('/welcome', 'welcome', ['name' => 'Taylor']);"
msgstr ""

#: ./docs/8.x/routing.md:124
#: ./docs/9.x/routing.md:129
#: ./docs/10.x/routing.md:129
#: ./docs/11.x/routing.md:152
#: ./docs/master/routing.md:152
msgctxt "P"
msgid "When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: `view`, `data`, `status`, and `headers`."
msgstr "在 View 的 Route 中使用 Route 參數時，有幾個參數名稱是 Laravel 的保留字，無法使用：`view`、`data`、`status`、`header`。"

#: ./docs/8.x/routing.md:126
#: ./docs/9.x/routing.md:164
#: ./docs/10.x/routing.md:167
#: ./docs/11.x/routing.md:244
#: ./docs/master/routing.md:244
#~ msgctxt "P"
#~ msgid "<a name=\"route-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:127
#: ./docs/9.x/routing.md:165
#: ./docs/10.x/routing.md:168
#: ./docs/11.x/routing.md:245
#: ./docs/master/routing.md:245
msgctxt "H2"
msgid "Route Parameters"
msgstr "Route 參數"

#: ./docs/8.x/routing.md:129
#: ./docs/9.x/routing.md:167
#: ./docs/10.x/routing.md:170
#: ./docs/11.x/routing.md:247
#: ./docs/master/routing.md:247
#~ msgctxt "P"
#~ msgid "<a name=\"required-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:130
#: ./docs/9.x/routing.md:168
#: ./docs/10.x/routing.md:171
#: ./docs/11.x/routing.md:248
#: ./docs/master/routing.md:248
msgctxt "H3"
msgid "Required Parameters"
msgstr "必填參數"

#: ./docs/9.x/routing.md:131
#: ./docs/10.x/routing.md:131
#~ msgctxt "P"
#~ msgid "<a name=\"the-route-list\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:132
#: ./docs/9.x/routing.md:170
#: ./docs/10.x/routing.md:173
#: ./docs/11.x/routing.md:250
#: ./docs/master/routing.md:250
msgctxt "P"
msgid "Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:"
msgstr "在 Route 中，有時候我們會想從 URI 中擷取一個片段。舉例來說，我們可能會需要從 URI 中擷取出使用者的 ID。為此，我們可以定義 Route 參數："

#: ./docs/9.x/routing.md:132
#: ./docs/10.x/routing.md:132
msgctxt "H3"
msgid "The Route List"
msgstr "Route 列表"

#: ./docs/8.x/routing.md:134
#: ./docs/9.x/routing.md:172
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}', function ($id) {\n"
"    return 'User '.$id;\n"
"});"
msgstr ""

#: ./docs/9.x/routing.md:134
#: ./docs/10.x/routing.md:134
#: ./docs/11.x/routing.md:157
#: ./docs/master/routing.md:157
msgctxt "P"
msgid "The `route:list` Artisan command can easily provide an overview of all of the routes that are defined by your application:"
msgstr "使用 `route:list` Artisan 指令就可輕鬆檢視專案中定義的所有 Route 一覽："

#: ./docs/9.x/routing.md:136
#: ./docs/10.x/routing.md:136
#: ./docs/11.x/routing.md:159
#: ./docs/master/routing.md:159
msgctxt "CODE: shell"
msgid "php artisan route:list"
msgstr ""

#: ./docs/8.x/routing.md:138
#: ./docs/9.x/routing.md:176
#: ./docs/10.x/routing.md:179
#: ./docs/11.x/routing.md:256
#: ./docs/master/routing.md:256
msgctxt "P"
msgid "You may define as many route parameters as required by your route:"
msgstr "根據 Route 的需求，我們可以定義不限數量的 Route 參數："

#: ./docs/10.x/routing.md:140
#: ./docs/11.x/routing.md:163
#: ./docs/master/routing.md:163
msgctxt "P"
msgid "By default, the route middleware that are assigned to each route will not be displayed in the `route:list` output; however, you can instruct Laravel to display the route middleware and middleware group names by adding the `-v` option to the command:"
msgstr "預設情況下，指派給各個 Route 的 Middleware 不會顯示在 `route:list` 輸出中。不過，我們可以在該指令後加上 `-v` 選項來讓 Laravel 顯示 Route Middleware 與 Middleware Group 的名稱："

#: ./docs/8.x/routing.md:140
#: ./docs/9.x/routing.md:178
msgctxt "CODE"
msgid ""
"Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/9.x/routing.md:140
msgctxt "P"
msgid "By default, the route middleware that are assigned to each route will not be displayed in the `route:list` output; however, you can instruct Laravel to display the route middleware by adding the `-v` option to the command:"
msgstr "預設情況下，指派給各個 Route 的 Middleware 不會顯示在 `route:list` 輸出中。不過，我們可以在該指令後加上 `-v` 選項來讓 Laravel 顯示 Route Middleware："

#: ./docs/10.x/routing.md:142
#: ./docs/11.x/routing.md:165
#: ./docs/master/routing.md:165
msgctxt "CODE: shell"
msgid ""
"php artisan route:list -v\n"
"\n"
"# Expand middleware groups...\n"
"php artisan route:list -vv"
msgstr ""

#: ./docs/9.x/routing.md:142
msgctxt "CODE: shell"
msgid "php artisan route:list -v"
msgstr ""

#: ./docs/8.x/routing.md:144
#: ./docs/9.x/routing.md:182
#: ./docs/10.x/routing.md:185
#: ./docs/11.x/routing.md:262
#: ./docs/master/routing.md:262
msgctxt "P"
msgid "Route parameters are always encased within `{}` braces and should consist of alphabetic characters. Underscores (`_`) are also acceptable within route parameter names. Route parameters are injected into route callbacks / controllers based on their order - the names of the route callback / controller arguments do not matter."
msgstr "Route 參數必須要包裝在 `{}` 大括號中，且只能使用字母。在 Route 參數名稱中也可以使用 (`_`)。Route 參數會依照順序插入到 Route 的回呼或 Controller 上 —— Route 的回呼或 Controller 中的名稱並不影響。"

#: ./docs/8.x/routing.md:146
#: ./docs/9.x/routing.md:184
#: ./docs/10.x/routing.md:187
#: ./docs/11.x/routing.md:264
#: ./docs/master/routing.md:264
#~ msgctxt "P"
#~ msgid "<a name=\"parameters-and-dependency-injection\"></a>"
#~ msgstr ""

#: ./docs/9.x/routing.md:146
#: ./docs/10.x/routing.md:149
#: ./docs/11.x/routing.md:172
#: ./docs/master/routing.md:172
msgctxt "P"
msgid "You may also instruct Laravel to only show routes that begin with a given URI:"
msgstr "也可以讓 Laravel 值顯示以給定 URI 開頭的 Route："

#: ./docs/8.x/routing.md:147
#: ./docs/9.x/routing.md:185
msgctxt "H4"
msgid "Parameters & Dependency Injection"
msgstr "參數與相依性插入"

#: ./docs/9.x/routing.md:148
#: ./docs/10.x/routing.md:151
#: ./docs/11.x/routing.md:174
#: ./docs/master/routing.md:174
msgctxt "CODE: shell"
msgid "php artisan route:list --path=api"
msgstr ""

#: ./docs/8.x/routing.md:149
#: ./docs/9.x/routing.md:187
#: ./docs/10.x/routing.md:190
#: ./docs/11.x/routing.md:267
#: ./docs/master/routing.md:267
msgctxt "P"
msgid "If your route has dependencies that you would like the Laravel service container to automatically inject into your route's callback, you should list your route parameters after your dependencies:"
msgstr "若你的 Route 有使用讓 Laravel Service Container 自動插入到 Route 回呼的相依性的話，請將 Route 參數列在相依性之後："

#: ./docs/8.x/routing.md:151
#: ./docs/9.x/routing.md:189
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/{id}', function (Request $request, $id) {\n"
"    return 'User '.$id;\n"
"});"
msgstr ""

#: ./docs/9.x/routing.md:152
#: ./docs/10.x/routing.md:155
#: ./docs/11.x/routing.md:178
#: ./docs/master/routing.md:178
msgctxt "P"
msgid "In addition, you may instruct Laravel to hide any routes that are defined by third-party packages by providing the `--except-vendor` option when executing the `route:list` command:"
msgstr "此外，也可以在執行 `route:list` 指令時提供 `--except-vendor` 選項來讓 Laravel 隱藏由第三方套件所定義的 Route："

#: ./docs/11.x/routing.md:154
#: ./docs/master/routing.md:154
#~ msgctxt "P"
#~ msgid "<a name=\"listing-your-routes\"></a>"
#~ msgstr ""

#: ./docs/9.x/routing.md:154
#: ./docs/10.x/routing.md:157
#: ./docs/11.x/routing.md:180
#: ./docs/master/routing.md:180
msgctxt "CODE: shell"
msgid "php artisan route:list --except-vendor"
msgstr ""

#: ./docs/11.x/routing.md:155
#: ./docs/master/routing.md:155
msgctxt "H3"
msgid "Listing Your Routes"
msgstr ""

#: ./docs/8.x/routing.md:157
#: ./docs/9.x/routing.md:195
#: ./docs/10.x/routing.md:198
#: ./docs/11.x/routing.md:275
#: ./docs/master/routing.md:275
#~ msgctxt "P"
#~ msgid "<a name=\"parameters-optional-parameters\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:158
#: ./docs/9.x/routing.md:196
#: ./docs/10.x/routing.md:199
#: ./docs/11.x/routing.md:276
#: ./docs/master/routing.md:276
msgctxt "H3"
msgid "Optional Parameters"
msgstr "可選的參數"

#: ./docs/9.x/routing.md:158
#: ./docs/10.x/routing.md:161
#: ./docs/11.x/routing.md:184
#: ./docs/master/routing.md:184
msgctxt "P"
msgid "Likewise, you may also instruct Laravel to only show routes that are defined by third-party packages by providing the `--only-vendor` option when executing the `route:list` command:"
msgstr "類似地，執行 `route:list` 指令時，也可以提供 `--only-vendor` 選項來讓 Laravel 只顯示第三方套件定義的 Route："

#: ./docs/8.x/routing.md:160
#: ./docs/9.x/routing.md:198
#: ./docs/10.x/routing.md:201
#: ./docs/11.x/routing.md:278
#: ./docs/master/routing.md:278
msgctxt "P"
msgid "Occasionally you may need to specify a route parameter that may not always be present in the URI. You may do so by placing a `?` mark after the parameter name. Make sure to give the route's corresponding variable a default value:"
msgstr "有時候，我們可能會讓某個 Route 參數不需要出現在每個 URI 上。為此，我們可以在參數名稱後方放置一個 `?` 符號。請先確定這個 Route 中對應的變數有預設值："

#: ./docs/9.x/routing.md:160
#: ./docs/10.x/routing.md:163
#: ./docs/11.x/routing.md:186
#: ./docs/master/routing.md:186
msgctxt "CODE: shell"
msgid "php artisan route:list --only-vendor"
msgstr ""

#: ./docs/8.x/routing.md:162
#: ./docs/9.x/routing.md:200
msgctxt "CODE"
msgid ""
"Route::get('/user/{name?}', function ($name = null) {\n"
"    return $name;\n"
"});\n"
"\n"
"Route::get('/user/{name?}', function ($name = 'John') {\n"
"    return $name;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:170
#: ./docs/9.x/routing.md:208
#: ./docs/10.x/routing.md:211
#: ./docs/11.x/routing.md:288
#: ./docs/master/routing.md:288
#~ msgctxt "P"
#~ msgid "<a name=\"parameters-regular-expression-constraints\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:171
#: ./docs/9.x/routing.md:209
#: ./docs/10.x/routing.md:212
#: ./docs/11.x/routing.md:289
#: ./docs/master/routing.md:289
msgctxt "H3"
msgid "Regular Expression Constraints"
msgstr "正規表示式條件"

#: ./docs/8.x/routing.md:173
#: ./docs/9.x/routing.md:211
#: ./docs/10.x/routing.md:214
#: ./docs/11.x/routing.md:291
#: ./docs/master/routing.md:291
msgctxt "P"
msgid "You may constrain the format of your route parameters using the `where` method on a route instance. The `where` method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:"
msgstr "可以在 Route 實體上使用 `where` 方法來規定 Route 參數的格式。`where` 方法接受一個參數名稱、以及一個用來規範參數格式的正規表示式："

#: ./docs/10.x/routing.md:175
#: ./docs/11.x/routing.md:252
#: ./docs/master/routing.md:252
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}', function (string $id) {\n"
"    return 'User '.$id;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:175
#: ./docs/9.x/routing.md:213
msgctxt "CODE"
msgid ""
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->where('name', '[A-Za-z]+');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->where('id', '[0-9]+');\n"
"\n"
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);"
msgstr ""

#: ./docs/10.x/routing.md:181
#: ./docs/11.x/routing.md:258
#: ./docs/master/routing.md:258
msgctxt "CODE"
msgid ""
"Route::get('/posts/{post}/comments/{comment}', function (string $postId, string $commentId) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:187
#: ./docs/9.x/routing.md:225
#: ./docs/10.x/routing.md:228
#: ./docs/11.x/routing.md:305
#: ./docs/master/routing.md:305
msgctxt "P"
msgid "For convenience, some commonly used regular expression patterns have helper methods that allow you to quickly add pattern constraints to your routes:"
msgstr "為了方便起見，一些常用的正規式都有輔助方法，可以讓你快速將這些格式套用到 Route 上："

#: ./docs/10.x/routing.md:188
#: ./docs/11.x/routing.md:265
#: ./docs/master/routing.md:265
msgctxt "H4"
msgid "Parameters and Dependency Injection"
msgstr ""

#: ./docs/8.x/routing.md:189
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUuid('id');"
msgstr ""

#: ./docs/11.x/routing.md:190
#: ./docs/master/routing.md:190
#~ msgctxt "P"
#~ msgid "<a name=\"routing-customization\"></a>"
#~ msgstr ""

#: ./docs/11.x/routing.md:191
#: ./docs/master/routing.md:191
msgctxt "H3"
msgid "Routing Customization"
msgstr ""

#: ./docs/10.x/routing.md:192
#: ./docs/11.x/routing.md:269
#: ./docs/master/routing.md:269
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/{id}', function (Request $request, string $id) {\n"
"    return 'User '.$id;\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:193
#: ./docs/master/routing.md:193
msgctxt "P"
msgid "By default, your application's routes are configured and loaded by the `bootstrap/app.php` file:"
msgstr ""

#: ./docs/11.x/routing.md:195
#: ./docs/master/routing.md:195
msgctxt "CODE: php"
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Foundation\\Application;\n"
"\n"
"return Application::configure(basePath: dirname(__DIR__))\n"
"    ->withRouting(\n"
"        web: __DIR__.'/../routes/web.php',\n"
"        commands: __DIR__.'/../routes/console.php',\n"
"        health: '/up',\n"
"    )->create();"
msgstr ""

#: ./docs/8.x/routing.md:201
#: ./docs/9.x/routing.md:247
#: ./docs/10.x/routing.md:250
#: ./docs/11.x/routing.md:331
#: ./docs/master/routing.md:327
msgctxt "P"
msgid "If the incoming request does not match the route pattern constraints, a 404 HTTP response will be returned."
msgstr "若連入 Request 不符合 Route 的格式限制，則會回傳 404 HTTP Response。"

#: ./docs/10.x/routing.md:203
#: ./docs/11.x/routing.md:280
#: ./docs/master/routing.md:280
msgctxt "CODE"
msgid ""
"Route::get('/user/{name?}', function (?string $name = null) {\n"
"    return $name;\n"
"});\n"
"\n"
"Route::get('/user/{name?}', function (?string $name = 'John') {\n"
"    return $name;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:203
#: ./docs/9.x/routing.md:249
#: ./docs/10.x/routing.md:252
#: ./docs/11.x/routing.md:333
#: ./docs/master/routing.md:329
#~ msgctxt "P"
#~ msgid "<a name=\"parameters-global-constraints\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:204
#: ./docs/9.x/routing.md:250
#: ./docs/10.x/routing.md:253
#: ./docs/11.x/routing.md:334
#: ./docs/master/routing.md:330
msgctxt "H4"
msgid "Global Constraints"
msgstr "全域條件限制"

#: ./docs/8.x/routing.md:206
#: ./docs/9.x/routing.md:252
#: ./docs/10.x/routing.md:255
msgctxt "P"
msgid "If you would like a route parameter to always be constrained by a given regular expression, you may use the `pattern` method. You should define these patterns in the `boot` method of your `App\\Providers\\RouteServiceProvider` class:"
msgstr "若想以某個正規式規範所有相同的 Route 參數，可以使用 `pattern` 方法。可以在專案的 `App\\Providers\\RouteServiceProvider` 類別中 `boot` 方法內定義這些格式："

#: ./docs/11.x/routing.md:208
#: ./docs/master/routing.md:208
msgctxt "P"
msgid "However, sometimes you may want to define an entirely new file to contain a subset of your application's routes. To accomplish this, you may provide a `then` closure to the `withRouting` method. Within this closure, you may register any additional routes that are necessary for your application:"
msgstr ""

#: ./docs/8.x/routing.md:208
#: ./docs/9.x/routing.md:254
msgctxt "CODE"
msgid ""
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::pattern('id', '[0-9]+');\n"
"}"
msgstr ""

#: ./docs/11.x/routing.md:210
#: ./docs/master/routing.md:210
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"->withRouting(\n"
"    web: __DIR__.'/../routes/web.php',\n"
"    commands: __DIR__.'/../routes/console.php',\n"
"    health: '/up',\n"
"    then: function () {\n"
"        Route::middleware('api')\n"
"            ->prefix('webhooks')\n"
"            ->name('webhooks.')\n"
"            ->group(base_path('routes/webhooks.php'));\n"
"    },\n"
")"
msgstr ""

#: ./docs/10.x/routing.md:216
#: ./docs/11.x/routing.md:293
#: ./docs/master/routing.md:293
msgctxt "CODE"
msgid ""
"Route::get('/user/{name}', function (string $name) {\n"
"    // ...\n"
"})->where('name', '[A-Za-z]+');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->where('id', '[0-9]+');\n"
"\n"
"Route::get('/user/{id}/{name}', function (string $id, string $name) {\n"
"    // ...\n"
"})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);"
msgstr ""

#: ./docs/8.x/routing.md:218
#: ./docs/9.x/routing.md:264
#: ./docs/10.x/routing.md:265
#: ./docs/11.x/routing.md:348
#: ./docs/master/routing.md:344
msgctxt "P"
msgid "Once the pattern has been defined, it is automatically applied to all routes using that parameter name:"
msgstr "定義好之後，這個規則會自動套用到有使用這個參數名稱的 Route："

#: ./docs/8.x/routing.md:220
#: ./docs/9.x/routing.md:266
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}', function ($id) {\n"
"    // Only executed if {id} is numeric...\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:224
#: ./docs/9.x/routing.md:270
#: ./docs/10.x/routing.md:271
#: ./docs/11.x/routing.md:354
#: ./docs/master/routing.md:350
#~ msgctxt "P"
#~ msgid "<a name=\"parameters-encoded-forward-slashes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:225
#: ./docs/9.x/routing.md:271
#: ./docs/10.x/routing.md:272
#: ./docs/11.x/routing.md:355
#: ./docs/master/routing.md:351
msgctxt "H4"
msgid "Encoded Forward Slashes"
msgstr "編碼斜線"

#: ./docs/11.x/routing.md:226
#: ./docs/master/routing.md:226
msgctxt "P"
msgid "Or, you may even take complete control over route registration by providing a `using` closure to the `withRouting` method. When this argument is passed, no HTTP routes will be registered by the framework and you are responsible for manually registering all routes:"
msgstr ""

#: ./docs/8.x/routing.md:227
#: ./docs/9.x/routing.md:273
#: ./docs/10.x/routing.md:274
#: ./docs/11.x/routing.md:357
#: ./docs/master/routing.md:353
msgctxt "P"
msgid "The Laravel routing component allows all characters except `/` to be present within route parameter values. You must explicitly allow `/` to be part of your placeholder using a `where` condition regular expression:"
msgstr "Laravel 的路由元件能接受除了 `/` 外的所有字元出現在 Route 的參數值內。請使用 `where` 正規表示式條件來顯式允許 `/` 出現在預留位置中："

#: ./docs/9.x/routing.md:227
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/{name}', function ($id, $name) {\n"
"    //\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function ($name) {\n"
"    //\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUuid('id');\n"
"\n"
"Route::get('/user/{id}', function ($id) {\n"
"    //\n"
"})->whereUlid('id');\n"
"\n"
"Route::get('/category/{category}', function ($category) {\n"
"    //\n"
"})->whereIn('category', ['movie', 'song', 'painting']);"
msgstr ""

#: ./docs/11.x/routing.md:228
#: ./docs/master/routing.md:228
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"->withRouting(\n"
"    commands: __DIR__.'/../routes/console.php',\n"
"    using: function () {\n"
"        Route::middleware('api')\n"
"            ->prefix('api')\n"
"            ->group(base_path('routes/api.php'));\n"
"\n"
"        Route::middleware('web')\n"
"            ->group(base_path('routes/web.php'));\n"
"    },\n"
")"
msgstr ""

#: ./docs/8.x/routing.md:229
#: ./docs/9.x/routing.md:275
msgctxt "CODE"
msgid ""
"Route::get('/search/{search}', function ($search) {\n"
"    return $search;\n"
"})->where('search', '.*');"
msgstr ""

#: ./docs/10.x/routing.md:230
#: ./docs/master/routing.md:307
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/{name}', function (string $id, string $name) {\n"
"    // ...\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function (string $name) {\n"
"    // ...\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->whereUuid('id');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    //\n"
"})->whereUlid('id');\n"
"\n"
"Route::get('/category/{category}', function (string $category) {\n"
"    // ...\n"
"})->whereIn('category', ['movie', 'song', 'painting']);"
msgstr ""

#: ./docs/8.x/routing.md:233
#: ./docs/9.x/routing.md:280
#: ./docs/10.x/routing.md:281
#: ./docs/11.x/routing.md:364
#: ./docs/master/routing.md:360
msgctxt "P"
msgid "Encoded forward slashes are only supported within the last route segment."
msgstr "只有最後一個 Route 片段才支援編碼斜線。"

#: ./docs/8.x/routing.md:235
#: ./docs/9.x/routing.md:282
#: ./docs/10.x/routing.md:283
#: ./docs/11.x/routing.md:366
#: ./docs/master/routing.md:362
#~ msgctxt "P"
#~ msgid "<a name=\"named-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:236
#: ./docs/9.x/routing.md:283
#: ./docs/10.x/routing.md:284
#: ./docs/11.x/routing.md:367
#: ./docs/master/routing.md:363
msgctxt "H2"
msgid "Named Routes"
msgstr "命名的 Route"

#: ./docs/8.x/routing.md:238
#: ./docs/9.x/routing.md:285
#: ./docs/10.x/routing.md:286
#: ./docs/11.x/routing.md:369
#: ./docs/master/routing.md:365
msgctxt "P"
msgid "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the `name` method onto the route definition:"
msgstr "命名 Route 可以方便地未特定 Route 產生 URL 或重新導向。我們可以通過在 Route 定義後方串上 `name` 方法來為 Route 指定名稱："

#: ./docs/8.x/routing.md:240
#: ./docs/9.x/routing.md:287
msgctxt "CODE"
msgid ""
"Route::get('/user/profile', function () {\n"
"    //\n"
"})->name('profile');"
msgstr ""

#: ./docs/8.x/routing.md:244
#: ./docs/9.x/routing.md:291
#: ./docs/10.x/routing.md:292
#: ./docs/11.x/routing.md:375
#: ./docs/master/routing.md:371
msgctxt "P"
msgid "You may also specify route names for controller actions:"
msgstr "也可以為 Controller 動作指定 Route 名稱："

#: ./docs/8.x/routing.md:246
#: ./docs/9.x/routing.md:293
#: ./docs/10.x/routing.md:294
#: ./docs/11.x/routing.md:377
#: ./docs/master/routing.md:373
msgctxt "CODE"
msgid ""
"Route::get(\n"
"    '/user/profile',\n"
"    [UserProfileController::class, 'show']\n"
")->name('profile');"
msgstr ""

#: ./docs/8.x/routing.md:251
#: ./docs/9.x/routing.md:299
#: ./docs/10.x/routing.md:300
#: ./docs/11.x/routing.md:383
#: ./docs/master/routing.md:379
msgctxt "P"
msgid "Route names should always be unique."
msgstr "Route 名稱不可重複。"

#: ./docs/8.x/routing.md:253
#: ./docs/9.x/routing.md:301
#: ./docs/10.x/routing.md:302
#: ./docs/11.x/routing.md:385
#: ./docs/master/routing.md:381
#~ msgctxt "P"
#~ msgid "<a name=\"generating-urls-to-named-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:254
#: ./docs/9.x/routing.md:302
msgctxt "H4"
msgid "Generating URLs To Named Routes"
msgstr "產生命名 Route 的 URL"

#: ./docs/8.x/routing.md:256
#: ./docs/9.x/routing.md:304
#: ./docs/10.x/routing.md:305
#: ./docs/11.x/routing.md:388
#: ./docs/master/routing.md:384
msgctxt "P"
msgid "Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via Laravel's `route` and `redirect` helper functions:"
msgstr "給某個 Route 指定好名稱後，我們就可以使用 Laravel 的 `route` 與 `redirect` 輔助函式來在產生 URL 或重新導向時使用 Route 的名稱："

#: ./docs/10.x/routing.md:257
msgctxt "CODE"
msgid ""
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::pattern('id', '[0-9]+');\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:258
msgctxt "CODE"
msgid ""
"// Generating URLs...\n"
"$url = route('profile');\n"
"\n"
"// Generating Redirects...\n"
"return redirect()->route('profile');"
msgstr ""

#: ./docs/8.x/routing.md:264
#: ./docs/9.x/routing.md:314
#: ./docs/10.x/routing.md:315
#: ./docs/11.x/routing.md:398
#: ./docs/master/routing.md:394
msgctxt "P"
msgid "If the named route defines parameters, you may pass the parameters as the second argument to the `route` function. The given parameters will automatically be inserted into the generated URL in their correct positions:"
msgstr "若命名 Route 有定義參數，則可以將這些參數作為第二個引數傳給 `route` 函式。傳入的參數會自動依照正確位置插入到產生的 URL 裡："

#: ./docs/8.x/routing.md:266
#: ./docs/9.x/routing.md:316
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/profile', function ($id) {\n"
"    //\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1]);"
msgstr ""

#: ./docs/10.x/routing.md:267
#: ./docs/11.x/routing.md:350
#: ./docs/master/routing.md:346
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}', function (string $id) {\n"
"    // Only executed if {id} is numeric...\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:272
#: ./docs/9.x/routing.md:322
#: ./docs/10.x/routing.md:323
#: ./docs/11.x/routing.md:406
#: ./docs/master/routing.md:402
msgctxt "P"
msgid "If you pass additional parameters in the array, those key / value pairs will automatically be added to the generated URL's query string:"
msgstr "若該陣列中有傳入額外的參數，則這些額外的索引鍵 / 值配對會自動被插入到產生的 URL 中之查詢字串 (Query String) 上："

#: ./docs/8.x/routing.md:274
#: ./docs/9.x/routing.md:324
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/profile', function ($id) {\n"
"    //\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
"\n"
"// /user/1/profile?photos=yes"
msgstr ""

#: ./docs/10.x/routing.md:276
#: ./docs/11.x/routing.md:359
#: ./docs/master/routing.md:355
msgctxt "CODE"
msgid ""
"Route::get('/search/{search}', function (string $search) {\n"
"    return $search;\n"
"})->where('search', '.*');"
msgstr ""

#: ./docs/8.x/routing.md:282
#: ./docs/9.x/routing.md:333
#: ./docs/10.x/routing.md:334
#: ./docs/11.x/routing.md:417
#: ./docs/master/routing.md:413
msgctxt "P"
msgid "Sometimes, you may wish to specify request-wide default values for URL parameters, such as the current locale. To accomplish this, you may use the [`URL::defaults` method](/docs/{{version}}/urls#default-values)."
msgstr "有時候，我們可能會想為 URL 引數指定 Request 層級的預設值，例如目前使用的語系等。為此，可以使用 [`URL::defaults` 方法](/docs/{{version}}/urls#default-values)。"

#: ./docs/8.x/routing.md:284
#: ./docs/9.x/routing.md:335
#: ./docs/10.x/routing.md:336
#: ./docs/11.x/routing.md:419
#: ./docs/master/routing.md:415
#~ msgctxt "P"
#~ msgid "<a name=\"inspecting-the-current-route\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:285
#: ./docs/9.x/routing.md:336
msgctxt "H4"
msgid "Inspecting The Current Route"
msgstr "檢查目前 Route"

#: ./docs/8.x/routing.md:287
#: ./docs/9.x/routing.md:338
#: ./docs/10.x/routing.md:339
#: ./docs/11.x/routing.md:422
#: ./docs/master/routing.md:418
msgctxt "P"
msgid "If you would like to determine if the current request was routed to a given named route, you may use the `named` method on a Route instance. For example, you may check the current route name from a route middleware:"
msgstr ""
"若想判斷目前的 Request 是否有被路由到給定的命名 Route 上，可以使用 Route 實體上的 `named` 方法。舉例來說，我們可以從某個 Route 的 \n"
"Middleware 上檢查目前的 Route 名稱："

#: ./docs/10.x/routing.md:288
#: ./docs/11.x/routing.md:371
#: ./docs/master/routing.md:367
msgctxt "CODE"
msgid ""
"Route::get('/user/profile', function () {\n"
"    // ...\n"
"})->name('profile');"
msgstr ""

#: ./docs/8.x/routing.md:289
#: ./docs/9.x/routing.md:340
msgctxt "CODE"
msgid ""
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\Closure  $next\n"
" * @return mixed\n"
" */\n"
"public function handle($request, Closure $next)\n"
"{\n"
"    if ($request->route()->named('profile')) {\n"
"        //\n"
"    }\n"
"\n"
"    return $next($request);\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:303
#: ./docs/11.x/routing.md:386
#: ./docs/master/routing.md:382
msgctxt "H4"
msgid "Generating URLs to Named Routes"
msgstr ""

#: ./docs/8.x/routing.md:305
#: ./docs/9.x/routing.md:356
#: ./docs/10.x/routing.md:359
#: ./docs/11.x/routing.md:442
#: ./docs/master/routing.md:438
#~ msgctxt "P"
#~ msgid "<a name=\"route-groups\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:306
#: ./docs/9.x/routing.md:357
#: ./docs/10.x/routing.md:360
#: ./docs/11.x/routing.md:443
#: ./docs/master/routing.md:439
msgctxt "H2"
msgid "Route Groups"
msgstr "Route 群組"

#: ./docs/9.x/routing.md:306
#: ./docs/10.x/routing.md:307
#: ./docs/11.x/routing.md:390
#: ./docs/master/routing.md:386
msgctxt "CODE"
msgid ""
"// Generating URLs...\n"
"$url = route('profile');\n"
"\n"
"// Generating Redirects...\n"
"return redirect()->route('profile');\n"
"\n"
"return to_route('profile');"
msgstr ""

#: ./docs/11.x/routing.md:307
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/{name}', function (string $id, string $name) {\n"
"    // ...\n"
"})->whereNumber('id')->whereAlpha('name');\n"
"\n"
"Route::get('/user/{name}', function (string $name) {\n"
"    // ...\n"
"})->whereAlphaNumeric('name');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->whereUuid('id');\n"
"\n"
"Route::get('/user/{id}', function (string $id) {\n"
"    // ...\n"
"})->whereUlid('id');\n"
"\n"
"Route::get('/category/{category}', function (string $category) {\n"
"    // ...\n"
"})->whereIn('category', ['movie', 'song', 'painting']);\n"
"\n"
"Route::get('/category/{category}', function (string $category) {\n"
"    // ...\n"
"})->whereIn('category', CategoryEnum::cases());"
msgstr ""

#: ./docs/8.x/routing.md:308
#: ./docs/9.x/routing.md:359
#: ./docs/10.x/routing.md:362
#: ./docs/11.x/routing.md:445
#: ./docs/master/routing.md:441
msgctxt "P"
msgid "Route groups allow you to share route attributes, such as middleware, across a large number of routes without needing to define those attributes on each individual route."
msgstr "使用 Route 群組，我們就可以在多個 Route 間共享相同的 Route 參數（如：使用相同的 Middleware），而不需要手動在個別 Route 上定義這些參數。"

#: ./docs/8.x/routing.md:310
#: ./docs/9.x/routing.md:361
#: ./docs/10.x/routing.md:364
#: ./docs/11.x/routing.md:447
#: ./docs/master/routing.md:443
msgctxt "P"
msgid "Nested groups attempt to intelligently \"merge\" attributes with their parent group. Middleware and `where` conditions are merged while names and prefixes are appended. Namespace delimiters and slashes in URI prefixes are automatically added where appropriate."
msgstr "巢狀群組會嘗試智慧地將屬性「合併」到上層群組中。Middleware 與 `where` 條件會被合併，而命名 Route 的名稱則會被作為前置詞放到前面。Laravel 會自動在適當的時候往 URI 前方插入 Namespace 分隔符號或斜線。"

#: ./docs/8.x/routing.md:312
#: ./docs/9.x/routing.md:363
#: ./docs/10.x/routing.md:366
#: ./docs/11.x/routing.md:449
#: ./docs/master/routing.md:445
#~ msgctxt "P"
#~ msgid "<a name=\"route-group-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:313
#: ./docs/9.x/routing.md:364
#: ./docs/10.x/routing.md:367
#: ./docs/11.x/routing.md:450
#: ./docs/master/routing.md:446
msgctxt "H3"
msgid "Middleware"
msgstr "Middleware"

#: ./docs/8.x/routing.md:315
#: ./docs/9.x/routing.md:366
#: ./docs/10.x/routing.md:369
#: ./docs/11.x/routing.md:452
#: ./docs/master/routing.md:448
msgctxt "P"
msgid "To assign [middleware](/docs/{{version}}/middleware) to all routes within a group, you may use the `middleware` method before defining the group. Middleware are executed in the order they are listed in the array:"
msgstr "若要將 [Middleware](/docs/{{version}}/middleware) 設定給群組中的所有 Route，可以在定義群組前使用 `middleware` 方法。Middleware 會以陣列中列出的順序執行："

#: ./docs/10.x/routing.md:317
#: ./docs/11.x/routing.md:400
#: ./docs/master/routing.md:396
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/profile', function (string $id) {\n"
"    // ...\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1]);"
msgstr ""

#: ./docs/8.x/routing.md:317
#: ./docs/9.x/routing.md:368
#: ./docs/10.x/routing.md:371
#: ./docs/11.x/routing.md:454
#: ./docs/master/routing.md:450
msgctxt "CODE"
msgid ""
"Route::middleware(['first', 'second'])->group(function () {\n"
"    Route::get('/', function () {\n"
"        // Uses first & second middleware...\n"
"    });\n"
"\n"
"    Route::get('/user/profile', function () {\n"
"        // Uses first & second middleware...\n"
"    });\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:325
#: ./docs/11.x/routing.md:408
#: ./docs/master/routing.md:404
msgctxt "CODE"
msgid ""
"Route::get('/user/{id}/profile', function (string $id) {\n"
"    // ...\n"
"})->name('profile');\n"
"\n"
"$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n"
"\n"
"// /user/1/profile?photos=yes"
msgstr ""

#: ./docs/8.x/routing.md:327
#: ./docs/9.x/routing.md:378
#: ./docs/10.x/routing.md:381
#: ./docs/11.x/routing.md:464
#: ./docs/master/routing.md:460
#~ msgctxt "P"
#~ msgid "<a name=\"route-group-controllers\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:328
#: ./docs/9.x/routing.md:379
#: ./docs/10.x/routing.md:382
#: ./docs/11.x/routing.md:465
#: ./docs/master/routing.md:461
msgctxt "H3"
msgid "Controllers"
msgstr "Controller"

#: ./docs/8.x/routing.md:330
#: ./docs/9.x/routing.md:381
#: ./docs/10.x/routing.md:384
#: ./docs/11.x/routing.md:467
#: ./docs/master/routing.md:463
msgctxt "P"
msgid "If a group of routes all utilize the same [controller](/docs/{{version}}/controllers), you may use the `controller` method to define the common controller for all of the routes within the group. Then, when defining the routes, you only need to provide the controller method that they invoke:"
msgstr "若有一組 Route 全部都使用了相同的 [Controller](/docs/{{version}}/controllers)，則我們可以使用 `controller` 方法來在路由群組中為所有的路由定義通用的 Controller。定義好之後，當定義路由時，就只需要提供要叫用的 Controller 方法即可："

#: ./docs/8.x/routing.md:332
#: ./docs/9.x/routing.md:383
#: ./docs/10.x/routing.md:386
#: ./docs/11.x/routing.md:469
#: ./docs/master/routing.md:465
msgctxt "CODE"
msgid ""
"use App\\Http\\Controllers\\OrderController;\n"
"\n"
"Route::controller(OrderController::class)->group(function () {\n"
"    Route::get('/orders/{id}', 'show');\n"
"    Route::post('/orders', 'store');\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:336
#: ./docs/master/routing.md:332
msgctxt "P"
msgid "If you would like a route parameter to always be constrained by a given regular expression, you may use the `pattern` method. You should define these patterns in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/10.x/routing.md:337
#: ./docs/11.x/routing.md:420
#: ./docs/master/routing.md:416
msgctxt "H4"
msgid "Inspecting the Current Route"
msgstr ""

#: ./docs/11.x/routing.md:338
#: ./docs/master/routing.md:334
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::pattern('id', '[0-9]+');\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:339
#: ./docs/9.x/routing.md:390
#: ./docs/10.x/routing.md:393
#: ./docs/11.x/routing.md:476
#: ./docs/master/routing.md:472
#~ msgctxt "P"
#~ msgid "<a name=\"route-group-subdomain-routing\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:340
#: ./docs/9.x/routing.md:391
#: ./docs/10.x/routing.md:394
#: ./docs/11.x/routing.md:477
#: ./docs/master/routing.md:473
msgctxt "H3"
msgid "Subdomain Routing"
msgstr "子網域路由"

#: ./docs/10.x/routing.md:341
#: ./docs/11.x/routing.md:424
#: ./docs/master/routing.md:420
msgctxt "CODE"
msgid ""
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
" */\n"
"public function handle(Request $request, Closure $next): Response\n"
"{\n"
"    if ($request->route()->named('profile')) {\n"
"        // ...\n"
"    }\n"
"\n"
"    return $next($request);\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:342
#: ./docs/9.x/routing.md:393
#: ./docs/10.x/routing.md:396
#: ./docs/11.x/routing.md:479
#: ./docs/master/routing.md:475
msgctxt "P"
msgid "Route groups may also be used to handle subdomain routing. Subdomains may be assigned route parameters just like route URIs, allowing you to capture a portion of the subdomain for usage in your route or controller. The subdomain may be specified by calling the `domain` method before defining the group:"
msgstr "Route 群組也可以用來處理子網域路由。我們可以像在設定 Route URI 一樣，在Route 參數內指派子網域。這樣一來我們就可以在 Route 或 Controller 內取得子網域的部分。可以通過在定義群組前呼叫 `domain` 來指定子網域："

#: ./docs/8.x/routing.md:344
#: ./docs/9.x/routing.md:395
msgctxt "CODE"
msgid ""
"Route::domain('{account}.example.com')->group(function () {\n"
"    Route::get('user/{id}', function ($account, $id) {\n"
"        //\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:350
#: ./docs/9.x/routing.md:402
#: ./docs/10.x/routing.md:405
#: ./docs/11.x/routing.md:488
#: ./docs/master/routing.md:484
msgctxt "P"
msgid "In order to ensure your subdomain routes are reachable, you should register subdomain routes before registering root domain routes. This will prevent root domain routes from overwriting subdomain routes which have the same URI path."
msgstr "為了確保子網域 Route 有效，請在註冊任何根網域 Route 前先註冊子網域 Route。這樣可以避免根網域的 Route 去複寫到子網域 Route 中有相同 URI 路徑的 Route。"

#: ./docs/8.x/routing.md:352
#: ./docs/9.x/routing.md:404
#: ./docs/10.x/routing.md:407
#: ./docs/11.x/routing.md:490
#: ./docs/master/routing.md:486
#~ msgctxt "P"
#~ msgid "<a name=\"route-group-prefixes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:353
#: ./docs/9.x/routing.md:405
#: ./docs/10.x/routing.md:408
#: ./docs/11.x/routing.md:491
#: ./docs/master/routing.md:487
msgctxt "H3"
msgid "Route Prefixes"
msgstr "Route 前置詞"

#: ./docs/8.x/routing.md:355
#: ./docs/9.x/routing.md:407
#: ./docs/10.x/routing.md:410
#: ./docs/11.x/routing.md:493
#: ./docs/master/routing.md:489
msgctxt "P"
msgid "The `prefix` method may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with `admin`:"
msgstr "可以使用 `prefix` 方法來為群組中的每個 Route 都加上給定 URI 的前置詞。舉例來說，我們可能會想把某個群組中的所有 Route URI 都加上 `admin` 前置詞："

#: ./docs/8.x/routing.md:357
#: ./docs/9.x/routing.md:409
#: ./docs/10.x/routing.md:412
#: ./docs/11.x/routing.md:495
#: ./docs/master/routing.md:491
msgctxt "CODE"
msgid ""
"Route::prefix('admin')->group(function () {\n"
"    Route::get('/users', function () {\n"
"        // Matches The \"/admin/users\" URL\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:363
#: ./docs/9.x/routing.md:415
#: ./docs/10.x/routing.md:418
#: ./docs/11.x/routing.md:501
#: ./docs/master/routing.md:497
#~ msgctxt "P"
#~ msgid "<a name=\"route-group-name-prefixes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:364
#: ./docs/9.x/routing.md:416
#: ./docs/10.x/routing.md:419
#: ./docs/11.x/routing.md:502
#: ./docs/master/routing.md:498
msgctxt "H3"
msgid "Route Name Prefixes"
msgstr "命名 Route 的名稱前置詞"

#: ./docs/8.x/routing.md:366
#: ./docs/9.x/routing.md:418
msgctxt "P"
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix all of the grouped route's names with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr "可以使用 `name` 方法來給群組中的每個 Route 名稱都加上給定字串的前置詞。舉例來說，我們可能會想給群組 Route 中的所有 Route 名稱都加上 `admin` 前置詞。給定字串會直接以指定時的樣子被加到 Route 名稱上。因此，請確保有在前置詞後方加上 `.` 字元："

#: ./docs/8.x/routing.md:368
#: ./docs/9.x/routing.md:420
#: ./docs/10.x/routing.md:423
#: ./docs/11.x/routing.md:506
#: ./docs/master/routing.md:502
msgctxt "CODE"
msgid ""
"Route::name('admin.')->group(function () {\n"
"    Route::get('/users', function () {\n"
"        // Route assigned name \"admin.users\"...\n"
"    })->name('users');\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:374
#: ./docs/9.x/routing.md:426
#: ./docs/10.x/routing.md:429
#: ./docs/11.x/routing.md:512
#: ./docs/master/routing.md:508
#~ msgctxt "P"
#~ msgid "<a name=\"route-model-binding\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:375
#: ./docs/9.x/routing.md:427
#: ./docs/10.x/routing.md:430
#: ./docs/11.x/routing.md:513
#: ./docs/master/routing.md:509
msgctxt "H2"
msgid "Route Model Binding"
msgstr "Route 的 Model 繫結"

#: ./docs/8.x/routing.md:377
#: ./docs/9.x/routing.md:429
#: ./docs/10.x/routing.md:432
#: ./docs/11.x/routing.md:515
#: ./docs/master/routing.md:511
msgctxt "P"
msgid "When injecting a model ID to a route or controller action, you will often query the database to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user's ID, you can inject the entire `User` model instance that matches the given ID."
msgstr "在將 Model ID 插入到 Route 或 Controller 動作時，我們常常會需要查詢資料庫來取得相應於該 ID 的 Model。Laravel 的 Route Model 繫結提供了能自動將 Model 實體插入到 Route 中的方便方法。舉例來說，我們可以插入符合給定 ID 的整個 `User` Model 實體，而不是插入使用者的 ID。"

#: ./docs/8.x/routing.md:379
#: ./docs/9.x/routing.md:431
#: ./docs/10.x/routing.md:434
#: ./docs/11.x/routing.md:517
#: ./docs/master/routing.md:513
#~ msgctxt "P"
#~ msgid "<a name=\"implicit-binding\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:380
#: ./docs/9.x/routing.md:432
#: ./docs/10.x/routing.md:435
#: ./docs/11.x/routing.md:518
#: ./docs/master/routing.md:514
msgctxt "H3"
msgid "Implicit Binding"
msgstr "隱式繫結"

#: ./docs/8.x/routing.md:382
#: ./docs/9.x/routing.md:434
#: ./docs/10.x/routing.md:437
#: ./docs/11.x/routing.md:520
#: ./docs/master/routing.md:516
msgctxt "P"
msgid "Laravel automatically resolves Eloquent models defined in routes or controller actions whose type-hinted variable names match a route segment name. For example:"
msgstr "當 Route 或 Controller 動作中定義的變數名稱符合某個 Route 片段名稱，且該變數有型別提示時，Laravel 會自動解析 Eloquent Model。舉例來說："

#: ./docs/8.x/routing.md:384
#: ./docs/9.x/routing.md:436
#: ./docs/10.x/routing.md:439
#: ./docs/11.x/routing.md:522
#: ./docs/master/routing.md:518
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    return $user->email;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:390
#: ./docs/9.x/routing.md:442
#: ./docs/10.x/routing.md:445
#: ./docs/11.x/routing.md:528
#: ./docs/master/routing.md:524
msgctxt "P"
msgid "Since the `$user` variable is type-hinted as the `App\\Models\\User` Eloquent model and the variable name matches the `{user}` URI segment, Laravel will automatically inject the model instance that has an ID matching the corresponding value from the request URI. If a matching model instance is not found in the database, a 404 HTTP response will automatically be generated."
msgstr "由於 `$user` 變數有型別提示為 `App\\Models\\User` Eloquent Model，且該變數名稱符合 `{user}` URI 片段，因此 Laravel 會自動將 ID 符合 Request URI 中相應值的 Model 實體插入進去。若資料庫中找不到對應的 Model 實體，則會自動產生 404 HTTP Response。"

#: ./docs/8.x/routing.md:392
#: ./docs/9.x/routing.md:444
#: ./docs/10.x/routing.md:447
#: ./docs/11.x/routing.md:530
#: ./docs/master/routing.md:526
msgctxt "P"
msgid "Of course, implicit binding is also possible when using controller methods. Again, note the `{user}` URI segment matches the `$user` variable in the controller which contains an `App\\Models\\User` type-hint:"
msgstr "當然，在使用 Controller 方法時也能使用隱式繫結。再強調一次，必須注意 `{user}` URI 片段要符合 Controller 中有 `App\\Models\\User` 型別提示的 `$user` 變數："

#: ./docs/8.x/routing.md:394
#: ./docs/9.x/routing.md:446
#: ./docs/10.x/routing.md:449
#: ./docs/11.x/routing.md:532
#: ./docs/master/routing.md:528
msgctxt "CODE"
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"use App\\Models\\User;\n"
"\n"
"// Route definition...\n"
"Route::get('/users/{user}', [UserController::class, 'show']);\n"
"\n"
"// Controller method definition...\n"
"public function show(User $user)\n"
"{\n"
"    return view('user.profile', ['user' => $user]);\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:398
#: ./docs/master/routing.md:477
msgctxt "CODE"
msgid ""
"Route::domain('{account}.example.com')->group(function () {\n"
"    Route::get('user/{id}', function (string $account, string $id) {\n"
"        // ...\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:406
#: ./docs/9.x/routing.md:458
#: ./docs/10.x/routing.md:461
#: ./docs/11.x/routing.md:544
#: ./docs/master/routing.md:540
#~ msgctxt "P"
#~ msgid "<a name=\"implicit-soft-deleted-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:407
#: ./docs/9.x/routing.md:459
#: ./docs/10.x/routing.md:462
#: ./docs/11.x/routing.md:545
#: ./docs/master/routing.md:541
msgctxt "H4"
msgid "Soft Deleted Models"
msgstr "軟刪除的 Model"

#: ./docs/8.x/routing.md:409
#: ./docs/9.x/routing.md:461
#: ./docs/10.x/routing.md:464
#: ./docs/11.x/routing.md:547
#: ./docs/master/routing.md:543
msgctxt "P"
msgid "Typically, implicit model binding will not retrieve models that have been [soft deleted](/docs/{{version}}/eloquent#soft-deleting). However, you may instruct the implicit binding to retrieve these models by chaining the `withTrashed` method onto your route's definition:"
msgstr "一般來說，隱式型別細節不會去的被[軟刪除](/docs/{{version}}/eloquent#soft-deleting)的 Model。不過，我們也可以在 Route 的定義後方串上 `withTrashed` 方法來讓隱式型別綁定取得這些 Model："

#: ./docs/8.x/routing.md:411
#: ./docs/9.x/routing.md:463
#: ./docs/10.x/routing.md:466
#: ./docs/11.x/routing.md:549
#: ./docs/master/routing.md:545
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    return $user->email;\n"
"})->withTrashed();"
msgstr ""

#: ./docs/8.x/routing.md:417
#: ./docs/9.x/routing.md:469
#: ./docs/10.x/routing.md:472
#: ./docs/11.x/routing.md:555
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-default-key-name\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:418
#: ./docs/9.x/routing.md:470
msgctxt "H4"
msgid "Customizing The Key"
msgstr "自訂索引鍵"

#: ./docs/8.x/routing.md:420
#: ./docs/9.x/routing.md:472
#: ./docs/10.x/routing.md:475
#: ./docs/11.x/routing.md:558
#: ./docs/master/routing.md:555
msgctxt "P"
msgid "Sometimes you may wish to resolve Eloquent models using a column other than `id`. To do so, you may specify the column in the route parameter definition:"
msgstr "有時候，我們可能會像讓 Eloquent 解析 `id` 以外的其他欄位。為此，可以在 Route 的參數定義中指定這個欄位："

#: ./docs/10.x/routing.md:421
#: ./docs/11.x/routing.md:504
#: ./docs/master/routing.md:500
msgctxt "P"
msgid "The `name` method may be used to prefix each route name in the group with a given string. For example, you may want to prefix the names of all of the routes in the group with `admin`. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing `.` character in the prefix:"
msgstr ""

#: ./docs/8.x/routing.md:422
#: ./docs/9.x/routing.md:474
#: ./docs/10.x/routing.md:477
#: ./docs/11.x/routing.md:560
#: ./docs/master/routing.md:557
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"\n"
"Route::get('/posts/{post:slug}', function (Post $post) {\n"
"    return $post;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:428
#: ./docs/9.x/routing.md:480
#: ./docs/10.x/routing.md:483
#: ./docs/11.x/routing.md:566
#: ./docs/master/routing.md:563
msgctxt "P"
msgid "If you would like model binding to always use a database column other than `id` when retrieving a given model class, you may override the `getRouteKeyName` method on the Eloquent model:"
msgstr "若想讓 Model 繫結在給定 Model 類別上總是使用 `id` 以外的其他欄位，可以在 Eloquent Model 上複寫 `getRouteKeyName` 方法："

#: ./docs/8.x/routing.md:430
#: ./docs/9.x/routing.md:482
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the route key for the model.\n"
" *\n"
" * @return string\n"
" */\n"
"public function getRouteKeyName()\n"
"{\n"
"    return 'slug';\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:440
#: ./docs/9.x/routing.md:492
#: ./docs/10.x/routing.md:493
#: ./docs/11.x/routing.md:576
#: ./docs/master/routing.md:573
#~ msgctxt "P"
#~ msgid "<a name=\"implicit-model-binding-scoping\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:441
#: ./docs/9.x/routing.md:493
msgctxt "H4"
msgid "Custom Keys & Scoping"
msgstr "自訂索引鍵與作用範圍"

#: ./docs/8.x/routing.md:443
#: ./docs/9.x/routing.md:495
#: ./docs/10.x/routing.md:496
#: ./docs/11.x/routing.md:579
#: ./docs/master/routing.md:576
msgctxt "P"
msgid "When implicitly binding multiple Eloquent models in a single route definition, you may wish to scope the second Eloquent model such that it must be a child of the previous Eloquent model. For example, consider this route definition that retrieves a blog post by slug for a specific user:"
msgstr "當我們在單一 Route 定義中隱式繫結多個 Eloquent Model 時，我們可以限定第二個 Eloquent Model 一定要是前一個 Eloquent Model 的子 Model。舉例來說，假設有下列這樣通過 Slug 取得特定使用者的部落格貼文的 Route 定義："

#: ./docs/8.x/routing.md:445
#: ./docs/9.x/routing.md:497
#: ./docs/10.x/routing.md:498
#: ./docs/11.x/routing.md:581
#: ./docs/master/routing.md:578
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:452
#: ./docs/9.x/routing.md:504
#: ./docs/10.x/routing.md:505
#: ./docs/11.x/routing.md:588
#: ./docs/master/routing.md:585
msgctxt "P"
msgid "When using a custom keyed implicit binding as a nested route parameter, Laravel will automatically scope the query to retrieve the nested model by its parent using conventions to guess the relationship name on the parent. In this case, it will be assumed that the `User` model has a relationship named `posts` (the plural form of the route parameter name) which can be used to retrieve the `Post` model."
msgstr "當使用自訂鍵值的隱式繫結作為巢狀路由參數時，Laravel 會自動以慣例推測其上層 Model 上的關聯名稱來將限制巢狀 Model 的查詢範圍。在這個例子中，Laravel 會假設 `User` Model 有個名為 `posts` 的關聯 (即路由參數名稱的複數形)，該關聯將用於取得 `Post` Model。"

#: ./docs/8.x/routing.md:454
#: ./docs/9.x/routing.md:506
#: ./docs/10.x/routing.md:507
#: ./docs/11.x/routing.md:590
#: ./docs/master/routing.md:587
msgctxt "P"
msgid "If you wish, you may instruct Laravel to scope \"child\" bindings even when a custom key is not provided. To do so, you may invoke the `scopeBindings` method when defining your route:"
msgstr "若有需要的話，就算沒有提供自訂索引鍵，我們還是可以告訴 Laravel 要如何限定「子」繫結的限定。為此，我們可以在定義 Route 時叫用 `scopeBindings` 方法："

#: ./docs/8.x/routing.md:456
#: ./docs/9.x/routing.md:508
#: ./docs/10.x/routing.md:509
#: ./docs/11.x/routing.md:592
#: ./docs/master/routing.md:589
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->scopeBindings();"
msgstr ""

#: ./docs/8.x/routing.md:463
#: ./docs/9.x/routing.md:515
#: ./docs/10.x/routing.md:516
#: ./docs/11.x/routing.md:599
#: ./docs/master/routing.md:596
msgctxt "P"
msgid "Or, you may instruct an entire group of route definitions to use scoped bindings:"
msgstr "或者，也可以讓整個 Route 定義群組使用限定範圍的繫結："

#: ./docs/8.x/routing.md:465
#: ./docs/9.x/routing.md:517
#: ./docs/10.x/routing.md:518
#: ./docs/11.x/routing.md:601
#: ./docs/master/routing.md:598
msgctxt "CODE"
msgid ""
"Route::scopeBindings()->group(function () {\n"
"    Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {\n"
"        return $post;\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:471
#: ./docs/9.x/routing.md:529
#: ./docs/10.x/routing.md:530
#: ./docs/11.x/routing.md:613
#: ./docs/master/routing.md:610
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-missing-model-behavior\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:472
#: ./docs/9.x/routing.md:530
#: ./docs/10.x/routing.md:531
#: ./docs/11.x/routing.md:614
#: ./docs/master/routing.md:611
msgctxt "H4"
msgid "Customizing Missing Model Behavior"
msgstr "自訂找不到 Model 的行為"

#: ./docs/10.x/routing.md:473
#: ./docs/11.x/routing.md:556
#: ./docs/master/routing.md:553
msgctxt "H4"
msgid "Customizing the Key"
msgstr ""

#: ./docs/8.x/routing.md:474
#: ./docs/9.x/routing.md:532
#: ./docs/10.x/routing.md:533
#: ./docs/master/routing.md:613
msgctxt "P"
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` method accepts a closure that will be invoked if an implicitly bound model can not be found:"
msgstr "通常來說，若找不到隱式繫結的 Model 時會產生一個 404 HTTP 回應。不過，可以在定義 Route 時呼叫 `missing` 方法來自訂這個行為。`missing` 方法接受一個閉包，該閉包會在找不到隱式繫結的 Model 時被叫用："

#: ./docs/8.x/routing.md:476
#: ./docs/9.x/routing.md:534
#: ./docs/10.x/routing.md:535
#: ./docs/11.x/routing.md:618
#: ./docs/master/routing.md:615
msgctxt "CODE"
msgid ""
"use App\\Http\\Controllers\\LocationsController;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Redirect;\n"
"\n"
"Route::get('/locations/{location:slug}', [LocationsController::class, 'show'])\n"
"        ->name('locations.view')\n"
"        ->missing(function (Request $request) {\n"
"            return Redirect::route('locations.index');\n"
"        });"
msgstr ""

#: ./docs/11.x/routing.md:481
msgctxt "CODE"
msgid ""
"Route::domain('{account}.example.com')->group(function () {\n"
"    Route::get('/user/{id}', function (string $account, string $id) {\n"
"        // ...\n"
"    });\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:485
#: ./docs/11.x/routing.md:568
#: ./docs/master/routing.md:565
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the route key for the model.\n"
" */\n"
"public function getRouteKeyName(): string\n"
"{\n"
"    return 'slug';\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:486
#: ./docs/9.x/routing.md:572
#: ./docs/10.x/routing.md:573
#: ./docs/11.x/routing.md:656
#: ./docs/master/routing.md:653
#~ msgctxt "P"
#~ msgid "<a name=\"explicit-binding\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:487
#: ./docs/9.x/routing.md:573
#: ./docs/10.x/routing.md:574
#: ./docs/11.x/routing.md:657
#: ./docs/master/routing.md:654
msgctxt "H3"
msgid "Explicit Binding"
msgstr "顯式繫結"

#: ./docs/8.x/routing.md:489
#: ./docs/9.x/routing.md:575
#: ./docs/10.x/routing.md:576
msgctxt "P"
msgid "You are not required to use Laravel's implicit, convention based model resolution in order to use model binding. You can also explicitly define how route parameters correspond to models. To register an explicit binding, use the router's `model` method to specify the class for a given parameter. You should define your explicit model bindings at the beginning of the `boot` method of your `RouteServiceProvider` class:"
msgstr "Model 繫結不一定要使用 Laravel 的隱式的，隱式繫結是基於慣例的 Model 解析。我們也可以顯式定義 Route 參數要怎麼對應到 Model。若要註冊顯式細節，請使用 Router 的 `model` 方法來為給定參數指定類別。應在 `RouteServiceProvider` 類別中 `boot` 方法內的開頭定義顯式 Model 繫結："

#: ./docs/8.x/routing.md:491
#: ./docs/9.x/routing.md:577
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::model('user', User::class);\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:494
#: ./docs/11.x/routing.md:577
#: ./docs/master/routing.md:574
msgctxt "H4"
msgid "Custom Keys and Scoping"
msgstr ""

#: ./docs/8.x/routing.md:506
#: ./docs/9.x/routing.md:592
#: ./docs/10.x/routing.md:591
#: ./docs/11.x/routing.md:672
#: ./docs/master/routing.md:669
msgctxt "P"
msgid "Next, define a route that contains a `{user}` parameter:"
msgstr "接著，請定義含有 `{user}` 參數的 Route："

#: ./docs/8.x/routing.md:508
#: ./docs/9.x/routing.md:594
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:514
#: ./docs/9.x/routing.md:600
#: ./docs/10.x/routing.md:599
#: ./docs/11.x/routing.md:680
#: ./docs/master/routing.md:677
msgctxt "P"
msgid "Since we have bound all `{user}` parameters to the `App\\Models\\User` model, an instance of that class will be injected into the route. So, for example, a request to `users/1` will inject the `User` instance from the database which has an ID of `1`."
msgstr "我們已經將所有 `{user}` 參數繫結到 `App\\Models\\User` Model 上了。`User` Model 的實體會被插入到這個 Route 中。因此，舉例來說，對 `users/1` 的 Request 將會插入一個資料庫中 ID 為 `1` 的 `User` 實體。"

#: ./docs/8.x/routing.md:516
#: ./docs/9.x/routing.md:602
#: ./docs/10.x/routing.md:601
#: ./docs/11.x/routing.md:682
#: ./docs/master/routing.md:679
msgctxt "P"
msgid "If a matching model instance is not found in the database, a 404 HTTP response will be automatically generated."
msgstr "若資料庫中找不到相符合的 Model 實體，則會自動產生 404 HTTP Response。"

#: ./docs/8.x/routing.md:518
#: ./docs/9.x/routing.md:604
#: ./docs/10.x/routing.md:603
#: ./docs/11.x/routing.md:684
#: ./docs/master/routing.md:681
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-resolution-logic\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:519
#: ./docs/9.x/routing.md:605
msgctxt "H4"
msgid "Customizing The Resolution Logic"
msgstr "自訂解析邏輯"

#: ./docs/8.x/routing.md:521
#: ./docs/9.x/routing.md:607
#: ./docs/10.x/routing.md:606
msgctxt "P"
msgid "If you wish to define your own model binding resolution logic, you may use the `Route::bind` method. The closure you pass to the `bind` method will receive the value of the URI segment and should return the instance of the class that should be injected into the route. Again, this customization should take place in the `boot` method of your application's `RouteServiceProvider`:"
msgstr "若想定義你自己的 Model 繫結解析邏輯，則可以使用 `Route::bind` 方法。我們可以傳入一個閉包給 `bind` 方法，用來接受 URI 片段中的值，並回應要插入到 Route 中的類別實體。同樣的，這個自訂邏輯應放在專案的 `RouteServiceProvider` 中 `boot` 方法內："

#: ./docs/8.x/routing.md:523
#: ./docs/9.x/routing.md:609
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Route::bind('user', function ($value) {\n"
"        return User::where('name', $value)->firstOrFail();\n"
"    });\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/routing.md:523
#: ./docs/10.x/routing.md:524
#: ./docs/11.x/routing.md:607
#: ./docs/master/routing.md:604
msgctxt "P"
msgid "Similarly, you may explicitly instruct Laravel to not scope bindings by invoking the `withoutScopedBindings` method:"
msgstr "類似地，也可以通過呼叫 `withoutScopedBindings` 方法來明顯讓 Laravel 不使用限定範圍的繫結："

#: ./docs/9.x/routing.md:525
#: ./docs/10.x/routing.md:526
#: ./docs/11.x/routing.md:609
#: ./docs/master/routing.md:606
msgctxt "CODE"
msgid ""
"Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {\n"
"    return $post;\n"
"})->withoutScopedBindings();"
msgstr ""

#: ./docs/8.x/routing.md:540
#: ./docs/9.x/routing.md:626
#: ./docs/10.x/routing.md:623
#: ./docs/11.x/routing.md:702
#: ./docs/master/routing.md:699
msgctxt "P"
msgid "Alternatively, you may override the `resolveRouteBinding` method on your Eloquent model. This method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:"
msgstr "或者，我們也可以在 Eloquent Model 上複寫 `resolveRouteBinding` 方法。這個方法會接收 URI 片段中的值，並應回傳要插入到 Route 中的類別實體："

#: ./docs/8.x/routing.md:542
#: ./docs/9.x/routing.md:628
#: ./docs/10.x/routing.md:625
#: ./docs/11.x/routing.md:704
#: ./docs/master/routing.md:701
msgctxt "CODE"
msgid ""
"/**\n"
" * Retrieve the model for a bound value.\n"
" *\n"
" * @param  mixed  $value\n"
" * @param  string|null  $field\n"
" * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
" */\n"
"public function resolveRouteBinding($value, $field = null)\n"
"{\n"
"    return $this->where('name', $value)->firstOrFail();\n"
"}"
msgstr ""

#: ./docs/9.x/routing.md:544
#: ./docs/10.x/routing.md:545
#: ./docs/11.x/routing.md:628
#: ./docs/master/routing.md:625
#~ msgctxt "P"
#~ msgid "<a name=\"implicit-enum-binding\"></a>"
#~ msgstr ""

#: ./docs/9.x/routing.md:545
#: ./docs/10.x/routing.md:546
#: ./docs/11.x/routing.md:629
#: ./docs/master/routing.md:626
msgctxt "H3"
msgid "Implicit Enum Binding"
msgstr "隱式 Enum 繫結"

#: ./docs/9.x/routing.md:547
msgctxt "P"
msgid "PHP 8.1 introduced support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To compliment this feature, Laravel allows you to type-hint a [string-backed Enum](https://www.php.net/manual/en/language.enumerations.backed.php) on your route definition and Laravel will only invoke the route if that route segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response will be returned automatically. For example, given the following Enum:"
msgstr "PHP 8.1 新增了對 [Enum](https://www.php.net/manual/en/language.enumerations.backed.php) 的支援。為了配合這個功能，Laravel 中提供了能在 Route 定義中對 [String-Backed Enum](https://www.php.net/manual/en/language.enumerations.backed.php) 進行型別提示的功能。加上型別提示後，只有當網址中的相應的 Route 片段為有效的 Enum 時，Laravel 才會叫用該 Route。若不是有效的 Enum 值，則會自動回傳 404 HTTP Response。舉例來說，假設有下列 Enum："

#: ./docs/10.x/routing.md:548
#: ./docs/master/routing.md:628
msgctxt "P"
msgid "PHP 8.1 introduced support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To complement this feature, Laravel allows you to type-hint a [string-backed Enum](https://www.php.net/manual/en/language.enumerations.backed.php) on your route definition and Laravel will only invoke the route if that route segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response will be returned automatically. For example, given the following Enum:"
msgstr ""

#: ./docs/9.x/routing.md:549
#: ./docs/10.x/routing.md:550
#: ./docs/11.x/routing.md:633
#: ./docs/master/routing.md:630
msgctxt "CODE: php"
msgid ""
"<?php\n"
"\n"
"namespace App\\Enums;\n"
"\n"
"enum Category: string\n"
"{\n"
"    case Fruits = 'fruits';\n"
"    case People = 'people';\n"
"}"
msgstr ""

#: ./docs/master/routing.md:551
#~ msgctxt "P"
#~ msgid ""
"<a name=\"customizing-the-key\"></a>\n"
"<a name=\"customizing-the-default-key-name\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:554
#: ./docs/9.x/routing.md:640
#: ./docs/10.x/routing.md:637
#: ./docs/11.x/routing.md:716
#: ./docs/master/routing.md:713
msgctxt "P"
msgid "If a route is utilizing [implicit binding scoping](#implicit-model-binding-scoping), the `resolveChildRouteBinding` method will be used to resolve the child binding of the parent model:"
msgstr "如有 Route 是使用[限定範圍的隱式細節](#implicit-model-binding-scoping)，則在解析上層 Model 的子繫結時會使用 `resolveChildRouteBinding` 方法："

#: ./docs/8.x/routing.md:556
#: ./docs/9.x/routing.md:642
#: ./docs/10.x/routing.md:639
#: ./docs/11.x/routing.md:718
#: ./docs/master/routing.md:715
msgctxt "CODE"
msgid ""
"/**\n"
" * Retrieve the child model for a bound value.\n"
" *\n"
" * @param  string  $childType\n"
" * @param  mixed  $value\n"
" * @param  string|null  $field\n"
" * @return \\Illuminate\\Database\\Eloquent\\Model|null\n"
" */\n"
"public function resolveChildRouteBinding($childType, $value, $field)\n"
"{\n"
"    return parent::resolveChildRouteBinding($childType, $value, $field);\n"
"}"
msgstr ""

#: ./docs/9.x/routing.md:561
#: ./docs/10.x/routing.md:562
#: ./docs/11.x/routing.md:645
#: ./docs/master/routing.md:642
msgctxt "P"
msgid "You may define a route that will only be invoked if the `{category}` route segment is `fruits` or `people`. Otherwise, Laravel will return a 404 HTTP response:"
msgstr "我們可以定義一個只有當 `{category}` 路由片段為 `fruits` 或 `people` 時才會被叫用的路由。若為其他值，Laravel 會回傳 HTTP 404 Response："

#: ./docs/9.x/routing.md:563
#: ./docs/10.x/routing.md:564
#: ./docs/11.x/routing.md:647
#: ./docs/master/routing.md:644
msgctxt "CODE: php"
msgid ""
"use App\\Enums\\Category;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"Route::get('/categories/{category}', function (Category $category) {\n"
"    return $category->value;\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:569
#: ./docs/9.x/routing.md:655
#: ./docs/10.x/routing.md:652
#: ./docs/11.x/routing.md:731
#: ./docs/master/routing.md:728
#~ msgctxt "P"
#~ msgid "<a name=\"fallback-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:570
#: ./docs/9.x/routing.md:656
#: ./docs/10.x/routing.md:653
#: ./docs/11.x/routing.md:732
#: ./docs/master/routing.md:729
msgctxt "H2"
msgid "Fallback Routes"
msgstr "遞補的 Route"

#: ./docs/8.x/routing.md:572
#: ./docs/9.x/routing.md:658
#: ./docs/10.x/routing.md:655
#: ./docs/11.x/routing.md:734
#: ./docs/master/routing.md:731
msgctxt "P"
msgid "Using the `Route::fallback` method, you may define a route that will be executed when no other route matches the incoming request. Typically, unhandled requests will automatically render a \"404\" page via your application's exception handler. However, since you would typically define the `fallback` route within your `routes/web.php` file, all middleware in the `web` middleware group will apply to the route. You are free to add additional middleware to this route as needed:"
msgstr "使用 `Route::fallback` 方法，就可以定義當沒有其他 Route 符合連入 Request 時要執行的 Route。一般來說，專案中的例外處理常式會自動幫未處理的 Request 會轉譯出「404」頁面。不過，因為我們通常會在 `routes/web.php` 檔案中定義 `fallback` Route，因此在 `web` Middleware 群組中的所有 Middleware 也會被套用到該 Route 中。有需要的話也可以為這個 Route 定義額外的 Middleware："

#: ./docs/8.x/routing.md:574
#: ./docs/9.x/routing.md:660
msgctxt "CODE"
msgid ""
"Route::fallback(function () {\n"
"    //\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:578
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::model('user', User::class);\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:578
#: ./docs/9.x/routing.md:665
#: ./docs/10.x/routing.md:662
#: ./docs/master/routing.md:738
msgctxt "P"
msgid "The fallback route should always be the last route registered by your application."
msgstr "遞補的 Route 應該要保持為專案中最後一個註冊的 Route。"

#: ./docs/8.x/routing.md:580
#: ./docs/9.x/routing.md:667
#: ./docs/10.x/routing.md:664
#: ./docs/11.x/routing.md:740
#: ./docs/master/routing.md:740
#~ msgctxt "P"
#~ msgid "<a name=\"rate-limiting\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:581
#: ./docs/9.x/routing.md:668
#: ./docs/10.x/routing.md:665
#: ./docs/11.x/routing.md:741
#: ./docs/master/routing.md:741
msgctxt "H2"
msgid "Rate Limiting"
msgstr "頻率限制"

#: ./docs/8.x/routing.md:583
#: ./docs/9.x/routing.md:670
#: ./docs/10.x/routing.md:667
#: ./docs/11.x/routing.md:743
#: ./docs/master/routing.md:743
#~ msgctxt "P"
#~ msgid "<a name=\"defining-rate-limiters\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:584
#: ./docs/9.x/routing.md:671
#: ./docs/10.x/routing.md:668
#: ./docs/11.x/routing.md:744
#: ./docs/master/routing.md:744
msgctxt "H3"
msgid "Defining Rate Limiters"
msgstr "定義 Rate Limiter (頻率限制程式)"

#: ./docs/8.x/routing.md:586
msgctxt "P"
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class."
msgstr "Laravel 中包含了強大且可客製化的頻率限制服務，可以用來為給定的 Route 或 Route 群組限制流量。要開始使用頻率限制，我們需要先依照專案需求定義 Rate Limiter (頻率限制程式) 的設定。一般來說，應在 `App\\Providers\\RouteServiceProvider` 類別的 `configureRateLimiting` 方法中定義。"

#: ./docs/8.x/routing.md:588
#: ./docs/9.x/routing.md:691
#: ./docs/10.x/routing.md:692
#: ./docs/11.x/routing.md:766
#: ./docs/master/routing.md:766
msgctxt "P"
msgid "Rate limiters are defined using the `RateLimiter` facade's `for` method. The `for` method accepts a rate limiter name and a closure that returns the limit configuration that should apply to routes that are assigned to the rate limiter. Limit configuration are instances of the `Illuminate\\Cache\\RateLimiting\\Limit` class. This class contains helpful \"builder\" methods so that you can quickly define your limit. The rate limiter name may be any string you wish:"
msgstr "使用 `RateLimiter` Facade 的 `for` 方法來定義 Rate Limiter。`for` 方法接受 Rate Limiter 的名稱以及一個閉包。該閉包應回傳用來套用到指派了這個 Rate Limiter 上的 Route 所需要的頻率限制設定。頻率限制的設定使用 `Illuminate\\Cache\\RateLimiting\\Limit` 類別的實體。這個實體中包含了實用的「建構程式 (Builder)」，可讓你快速定義限制。Rate Limiter 的名稱可以為任意字串："

#: ./docs/8.x/routing.md:590
msgctxt "CODE"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function configureRateLimiting()\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:593
#: ./docs/11.x/routing.md:674
#: ./docs/master/routing.md:671
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"Route::get('/users/{user}', function (User $user) {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:604
#: ./docs/11.x/routing.md:685
#: ./docs/master/routing.md:682
msgctxt "H4"
msgid "Customizing the Resolution Logic"
msgstr ""

#: ./docs/8.x/routing.md:605
#: ./docs/9.x/routing.md:709
#: ./docs/10.x/routing.md:710
#: ./docs/11.x/routing.md:782
#: ./docs/master/routing.md:782
msgctxt "P"
msgid "If the incoming request exceeds the specified rate limit, a response with a 429 HTTP status code will automatically be returned by Laravel. If you would like to define your own response that should be returned by a rate limit, you may use the `response` method:"
msgstr "若連入的 Request 超過了指定的頻率限制，Laravel 會自動回傳一個 429 HTTP 狀態碼。若想自訂頻率限制回傳的 Response，可使用 `response` 方法："

#: ./docs/8.x/routing.md:607
msgctxt "CODE"
msgid ""
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000)->response(function () {\n"
"        return response('Custom response...', 429);\n"
"    });\n"
"});"
msgstr ""

#: ./docs/10.x/routing.md:608
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, etc.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::bind('user', function (string $value) {\n"
"        return User::where('name', $value)->firstOrFail();\n"
"    });\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:613
#: ./docs/9.x/routing.md:717
#: ./docs/10.x/routing.md:718
#: ./docs/11.x/routing.md:790
#: ./docs/master/routing.md:790
msgctxt "P"
msgid "Since rate limiter callbacks receive the incoming HTTP request instance, you may build the appropriate rate limit dynamically based on the incoming request or authenticated user:"
msgstr "由於頻率限制程式的回呼會接收連入 HTTP Request 實體，因此我們可以依據連入 Request 或登入使用者來動態調整適當的頻率限制："

#: ./docs/8.x/routing.md:615
#: ./docs/9.x/routing.md:719
#: ./docs/10.x/routing.md:720
#: ./docs/11.x/routing.md:792
#: ./docs/master/routing.md:792
msgctxt "CODE"
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100);\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:616
msgctxt "P"
msgid "Typically, a 404 HTTP response will be generated if an implicitly bound model is not found. However, you may customize this behavior by calling the `missing` method when defining your route. The `missing` method accepts a closure that will be invoked if an implicitly bound model cannot be found:"
msgstr ""

#: ./docs/8.x/routing.md:621
#: ./docs/9.x/routing.md:725
#: ./docs/10.x/routing.md:726
#: ./docs/11.x/routing.md:798
#: ./docs/master/routing.md:798
#~ msgctxt "P"
#~ msgid "<a name=\"segmenting-rate-limits\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:622
#: ./docs/9.x/routing.md:726
#: ./docs/10.x/routing.md:727
#: ./docs/11.x/routing.md:799
#: ./docs/master/routing.md:799
msgctxt "H4"
msgid "Segmenting Rate Limits"
msgstr "區塊化的頻率限制"

#: ./docs/8.x/routing.md:624
#: ./docs/9.x/routing.md:728
#: ./docs/10.x/routing.md:729
#: ./docs/11.x/routing.md:801
#: ./docs/master/routing.md:801
msgctxt "P"
msgid "Sometimes you may wish to segment rate limits by some arbitrary value. For example, you may wish to allow users to access a given route 100 times per minute per IP address. To accomplish this, you may use the `by` method when building your rate limit:"
msgstr "有時候，我們可能會像依照某個值來做分區的頻率限制。舉例來說，我們可能會想讓某個使用者在每個 IP 位址上每分鐘只能存取某個 Route 100 次。為此，可以在設定頻率限制時使用 `by` 方法："

#: ./docs/8.x/routing.md:626
#: ./docs/9.x/routing.md:730
#: ./docs/10.x/routing.md:731
#: ./docs/11.x/routing.md:803
#: ./docs/master/routing.md:803
msgctxt "CODE"
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()->vipCustomer()\n"
"                ? Limit::none()\n"
"                : Limit::perMinute(100)->by($request->ip());\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:631
msgctxt "P"
msgid "PHP 8.1 introduced support for [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To complement this feature, Laravel allows you to type-hint a [backed Enum](https://www.php.net/manual/en/language.enumerations.backed.php) on your route definition and Laravel will only invoke the route if that route segment corresponds to a valid Enum value. Otherwise, a 404 HTTP response will be returned automatically. For example, given the following Enum:"
msgstr ""

#: ./docs/8.x/routing.md:632
#: ./docs/9.x/routing.md:736
#: ./docs/10.x/routing.md:737
#: ./docs/11.x/routing.md:809
#: ./docs/master/routing.md:809
msgctxt "P"
msgid "To illustrate this feature using another example, we can limit access to the route to 100 times per minute per authenticated user ID or 10 times per minute per IP address for guests:"
msgstr "我們來看看另一個使用這個功能的例子。我們可以像這樣限制某個 Route 對已登入使用者的限制時 100 次/分鐘，而未登入使用者則是 10 次/分鐘："

#: ./docs/8.x/routing.md:634
#: ./docs/9.x/routing.md:738
#: ./docs/10.x/routing.md:739
#: ./docs/11.x/routing.md:811
#: ./docs/master/routing.md:811
msgctxt "CODE"
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return $request->user()\n"
"                ? Limit::perMinute(100)->by($request->user()->id)\n"
"                : Limit::perMinute(10)->by($request->ip());\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:640
#: ./docs/9.x/routing.md:744
#: ./docs/10.x/routing.md:745
#: ./docs/11.x/routing.md:817
#: ./docs/master/routing.md:817
#~ msgctxt "P"
#~ msgid "<a name=\"multiple-rate-limits\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:641
#: ./docs/9.x/routing.md:745
#: ./docs/10.x/routing.md:746
#: ./docs/11.x/routing.md:818
#: ./docs/master/routing.md:818
msgctxt "H4"
msgid "Multiple Rate Limits"
msgstr "多個頻率限制"

#: ./docs/8.x/routing.md:643
#: ./docs/9.x/routing.md:747
#: ./docs/10.x/routing.md:748
#: ./docs/11.x/routing.md:820
#: ./docs/master/routing.md:820
msgctxt "P"
msgid "If needed, you may return an array of rate limits for a given rate limiter configuration. Each rate limit will be evaluated for the route based on the order they are placed within the array:"
msgstr "當然，對於某個 Rate Limiter 的設定，我們也可以回傳一組包含頻率限制的陣列。每個頻率限制會依據陣列中的順序被套用在 Route 上："

#: ./docs/8.x/routing.md:645
#: ./docs/9.x/routing.md:749
#: ./docs/10.x/routing.md:750
#: ./docs/11.x/routing.md:822
#: ./docs/master/routing.md:822
msgctxt "CODE"
msgid ""
"RateLimiter::for('login', function (Request $request) {\n"
"    return [\n"
"        Limit::perMinute(500),\n"
"        Limit::perMinute(3)->by($request->input('email')),\n"
"    ];\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:652
#: ./docs/9.x/routing.md:756
#: ./docs/10.x/routing.md:757
#: ./docs/11.x/routing.md:838
#: ./docs/master/routing.md:829
#~ msgctxt "P"
#~ msgid "<a name=\"attaching-rate-limiters-to-routes\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:653
#: ./docs/9.x/routing.md:757
msgctxt "H3"
msgid "Attaching Rate Limiters To Routes"
msgstr "將 Rate Limiter 附加到 Route 上"

#: ./docs/8.x/routing.md:655
#: ./docs/9.x/routing.md:759
#: ./docs/10.x/routing.md:760
#: ./docs/11.x/routing.md:841
#: ./docs/master/routing.md:832
msgctxt "P"
msgid "Rate limiters may be attached to routes or route groups using the `throttle` [middleware](/docs/{{version}}/middleware). The throttle middleware accepts the name of the rate limiter you wish to assign to the route:"
msgstr "可以使用 `throttle` [Middleware](/docs/{{version}}/middleware) 來將 Rate Limiter 附加到 Route 或 Route 群組上。這個 Throttle Middleware 接受欲指派給 Route 的 Rate Limiter 名稱："

#: ./docs/10.x/routing.md:657
#: ./docs/11.x/routing.md:736
#: ./docs/master/routing.md:733
msgctxt "CODE"
msgid ""
"Route::fallback(function () {\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:657
#: ./docs/9.x/routing.md:761
msgctxt "CODE"
msgid ""
"Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        //\n"
"    });\n"
"\n"
"    Route::post('/video', function () {\n"
"        //\n"
"    });\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:659
#: ./docs/master/routing.md:656
msgctxt "P"
msgid "You are not required to use Laravel's implicit, convention based model resolution in order to use model binding. You can also explicitly define how route parameters correspond to models. To register an explicit binding, use the router's `model` method to specify the class for a given parameter. You should define your explicit model bindings at the beginning of the `boot` method of your `AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/routing.md:661
#: ./docs/master/routing.md:658
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::model('user', User::class);\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:667
#: ./docs/9.x/routing.md:771
#: ./docs/10.x/routing.md:772
#: ./docs/11.x/routing.md:853
#: ./docs/master/routing.md:844
#~ msgctxt "P"
#~ msgid "<a name=\"throttling-with-redis\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:668
#: ./docs/9.x/routing.md:772
#: ./docs/10.x/routing.md:773
#: ./docs/11.x/routing.md:854
#: ./docs/master/routing.md:845
msgctxt "H4"
msgid "Throttling With Redis"
msgstr "使用 Redis 來做頻率限制"

#: ./docs/10.x/routing.md:670
#: ./docs/11.x/routing.md:746
#: ./docs/master/routing.md:746
msgctxt "P"
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs."
msgstr "Laravel 中包含了強大且可客製化的頻率限制服務，可以用來為給定的 Route 或 Route 群組限制流量。要開始使用頻率限制，我們需要先依照專案需求定義 Rate Limiter (頻率限制程式) 的設定。"

#: ./docs/8.x/routing.md:670
#: ./docs/9.x/routing.md:774
#: ./docs/10.x/routing.md:775
msgctxt "P"
msgid "Typically, the `throttle` middleware is mapped to the `Illuminate\\Routing\\Middleware\\ThrottleRequests` class. This mapping is defined in your application's HTTP kernel (`App\\Http\\Kernel`). However, if you are using Redis as your application's cache driver, you may wish to change this mapping to use the `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` class. This class is more efficient at managing rate limiting using Redis:"
msgstr "一般來說，`throttle` Middleware 被映射到 `Illuminate\\Routing\\Middleware\\ThrottleRequests` 類別。這個映射定義在程式的 HTTP Kernel (`App\\Http\\Kernel`) 中。不過，如果你使用 Redis 來作為快取的 Driver，則可以將這個映射改為使用 `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` 類別。這個類別能更有效率地使用 Redis 來管理頻率限制："

#: ./docs/10.x/routing.md:672
msgctxt "P"
msgid "Typically, rate limiters are defined within the `boot` method of your application's `App\\Providers\\RouteServiceProvider` class. In fact, this class already includes a rate limiter definition that is applied to the routes in your application's `routes/api.php` file:"
msgstr "一般來說，應在 `App\\Providers\\RouteServiceProvider` 類別的 `configureRateLimiting` 方法中定義頻率限制。事實上，該類別中已包含了一組預先定義的頻率限制，會套用到專案中 `routes/api.php` 檔案內的 Route："

#: ./docs/8.x/routing.md:672
#: ./docs/9.x/routing.md:776
#: ./docs/10.x/routing.md:777
msgctxt "CODE"
msgid "'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,"
msgstr ""

#: ./docs/9.x/routing.md:673
msgctxt "P"
msgid "Laravel includes powerful and customizable rate limiting services that you may utilize to restrict the amount of traffic for a given route or group of routes. To get started, you should define rate limiter configurations that meet your application's needs. Typically, this should be done within the `configureRateLimiting` method of your application's `App\\Providers\\RouteServiceProvider` class, which already includes a rate limiter definition that is applied to the routes in your application's `routes/api.php` file:"
msgstr "Laravel 中包含了強大且可客製化的頻率限制服務，可以用來為給定的 Route 或 Route 群組限制流量。要開始使用頻率限制，我們需要先依照專案需求定義 Rate Limiter (頻率限制程式) 的設定。一般來說，應在 `App\\Providers\\RouteServiceProvider` 類別的 `configureRateLimiting` 方法中定義。在 `configureRateLimiting` 方法中，已預先包含了一個會套用到專案 `routes/api.php` 中 Route 的頻率限制："

#: ./docs/10.x/routing.md:674
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, and other route configuration.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('api', function (Request $request) {\n"
"        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n"
"    });\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:674
#: ./docs/9.x/routing.md:778
#: ./docs/10.x/routing.md:779
#: ./docs/11.x/routing.md:863
#: ./docs/master/routing.md:854
#~ msgctxt "P"
#~ msgid "<a name=\"form-method-spoofing\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:675
#: ./docs/9.x/routing.md:779
#: ./docs/10.x/routing.md:780
#: ./docs/11.x/routing.md:864
#: ./docs/master/routing.md:855
msgctxt "H2"
msgid "Form Method Spoofing"
msgstr "表單方法的變更"

#: ./docs/9.x/routing.md:675
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" */\n"
"protected function configureRateLimiting(): void\n"
"{\n"
"    RateLimiter::for('api', function (Request $request) {\n"
"        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:677
#: ./docs/9.x/routing.md:781
#: ./docs/10.x/routing.md:782
#: ./docs/11.x/routing.md:866
#: ./docs/master/routing.md:857
msgctxt "P"
msgid "HTML forms do not support `PUT`, `PATCH`, or `DELETE` actions. So, when defining `PUT`, `PATCH`, or `DELETE` routes that are called from an HTML form, you will need to add a hidden `_method` field to the form. The value sent with the `_method` field will be used as the HTTP request method:"
msgstr "HTML 表單不支援 `PUT`, `PATCH`, 與 `DELETE` 動作，因此，當我們在定義會由 HTML 表單呼叫的 `PUT`, `PATCH`, 或 `DELETE` Route 時，我們需要在表單內加上一個隱藏的 `_method` 欄位。包含在 `_method` 欄位裡的值會被當作 HTTP Request 方法使用："

#: ./docs/8.x/routing.md:679
#: ./docs/9.x/routing.md:783
#: ./docs/10.x/routing.md:784
#: ./docs/11.x/routing.md:868
#: ./docs/master/routing.md:859
msgctxt "CODE"
msgid ""
"<form action=\"/example\" method=\"POST\">\n"
"    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n"
"    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n"
"</form>"
msgstr ""

#: ./docs/8.x/routing.md:684
#: ./docs/9.x/routing.md:788
#: ./docs/10.x/routing.md:789
#: ./docs/11.x/routing.md:873
#: ./docs/master/routing.md:864
msgctxt "P"
msgid "For convenience, you may use the `@method` [Blade directive](/docs/{{version}}/blade) to generate the `_method` input field:"
msgstr "為了方便起見，也可以使用 `@method` [Blade 指示詞](/docs/{{version}}/blade)來產生 `_method` 輸入欄位："

#: ./docs/8.x/routing.md:686
#: ./docs/9.x/routing.md:790
#: ./docs/10.x/routing.md:791
#: ./docs/11.x/routing.md:875
#: ./docs/master/routing.md:866
msgctxt "CODE"
msgid ""
"<form action=\"/example\" method=\"POST\">\n"
"    @method('PUT')\n"
"    @csrf\n"
"</form>"
msgstr ""

#: ./docs/11.x/routing.md:687
#: ./docs/master/routing.md:684
msgctxt "P"
msgid "If you wish to define your own model binding resolution logic, you may use the `Route::bind` method. The closure you pass to the `bind` method will receive the value of the URI segment and should return the instance of the class that should be injected into the route. Again, this customization should take place in the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/11.x/routing.md:689
#: ./docs/master/routing.md:686
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Route::bind('user', function (string $value) {\n"
"        return User::where('name', $value)->firstOrFail();\n"
"    });\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:691
#: ./docs/9.x/routing.md:795
#: ./docs/10.x/routing.md:796
#: ./docs/11.x/routing.md:880
#: ./docs/master/routing.md:871
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-the-current-route\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:692
#: ./docs/9.x/routing.md:796
msgctxt "H2"
msgid "Accessing The Current Route"
msgstr "存取目前的 Route"

#: ./docs/9.x/routing.md:693
msgctxt "CODE"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Configure the rate limiters for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function configureRateLimiting()\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:694
msgctxt "CODE"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Define your route model bindings, pattern filters, and other route configuration.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/routing.md:694
#: ./docs/9.x/routing.md:798
#: ./docs/10.x/routing.md:799
#: ./docs/11.x/routing.md:883
#: ./docs/master/routing.md:874
msgctxt "P"
msgid "You may use the `current`, `currentRouteName`, and `currentRouteAction` methods on the `Route` facade to access information about the route handling the incoming request:"
msgstr "可以使用 `Route` Facade 上的 `current`, `currentRouteName` 與 `currentRouteAction` 方法來存取有關處理本次連入 Request 的 Route 資訊："

#: ./docs/8.x/routing.md:696
#: ./docs/9.x/routing.md:800
#: ./docs/10.x/routing.md:801
#: ./docs/11.x/routing.md:885
#: ./docs/master/routing.md:876
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Route;\n"
"\n"
"$route = Route::current(); // Illuminate\\Routing\\Route\n"
"$name = Route::currentRouteName(); // string\n"
"$action = Route::currentRouteAction(); // string"
msgstr ""

#: ./docs/8.x/routing.md:702
#: ./docs/9.x/routing.md:806
#: ./docs/10.x/routing.md:807
#: ./docs/11.x/routing.md:891
#: ./docs/master/routing.md:882
msgctxt "P"
msgid "You may refer to the API documentation for both the [underlying class of the Route facade](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html) and [Route instance](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html) to review all of the methods that are available on the router and route classes."
msgstr "請參考 [Route Facade 底層的類別](https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html)與 [Route 實體](https://laravel.com/api/{{version}}/Illuminate/Routing/Route.html)的 API 說明文件以瞭解 Router 與 Route 類別提供的全部方法。"

#: ./docs/8.x/routing.md:704
#: ./docs/9.x/routing.md:808
#: ./docs/10.x/routing.md:809
#: ./docs/11.x/routing.md:893
#: ./docs/master/routing.md:884
#~ msgctxt "P"
#~ msgid "<a name=\"cors\"></a>"
#~ msgstr ""

#: ./docs/8.x/routing.md:705
#: ./docs/9.x/routing.md:809
#: ./docs/10.x/routing.md:810
#: ./docs/11.x/routing.md:894
#: ./docs/master/routing.md:885
msgctxt "H2"
msgid "Cross-Origin Resource Sharing (CORS)"
msgstr "跨原始來源資源共用 (CORS, Cross-Origin Resource Sharing)"

#: ./docs/8.x/routing.md:707
#: ./docs/9.x/routing.md:811
#: ./docs/10.x/routing.md:812
msgctxt "P"
msgid "Laravel can automatically respond to CORS `OPTIONS` HTTP requests with values that you configure. All CORS settings may be configured in your application's `config/cors.php` configuration file. The `OPTIONS` requests will automatically be handled by the `HandleCors` [middleware](/docs/{{version}}/middleware) that is included by default in your global middleware stack. Your global middleware stack is located in your application's HTTP kernel (`App\\Http\\Kernel`)."
msgstr "Laravel 會自動依照你設定的值來回應 CORS 的 `OPTIONS` HTTP Request。可以在專案的 `config/cors.php` 設定檔中設定所有的 CORS 設定。 `HandleCors` [Middleware](/docs/{{version}}/middleware) 會自動處理 `OPTIONS` Request，該 Middleware 預設包含在全域的 Middleware Stack 中。全域的 Middleware Stack 存在 HTTP Kernel (`App\\Http\\Kernel`) 中。"

#: ./docs/8.x/routing.md:709
#: ./docs/9.x/routing.md:814
#: ./docs/10.x/routing.md:815
#: ./docs/11.x/routing.md:907
#: ./docs/master/routing.md:898
msgctxt "P"
msgid "For more information on CORS and CORS headers, please consult the [MDN web documentation on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers)."
msgstr "更多有關 CORS 與 CORS 標頭的資訊，請參考 [MDN 網頁說明文件上的 CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers)。"

#: ./docs/8.x/routing.md:711
#: ./docs/9.x/routing.md:816
#: ./docs/10.x/routing.md:817
#: ./docs/11.x/routing.md:909
#: ./docs/master/routing.md:900
#~ msgctxt "P"
#~ msgid "<a name=\"route-caching\"></a>"
#~ msgstr ""

#: ./docs/9.x/routing.md:711
#: ./docs/10.x/routing.md:712
#: ./docs/11.x/routing.md:784
#: ./docs/master/routing.md:784
msgctxt "CODE"
msgid ""
"RateLimiter::for('global', function (Request $request) {\n"
"    return Limit::perMinute(1000)->response(function (Request $request, array $headers) {\n"
"        return response('Custom response...', 429, $headers);\n"
"    });\n"
"});"
msgstr ""

#: ./docs/8.x/routing.md:712
#: ./docs/9.x/routing.md:817
#: ./docs/10.x/routing.md:818
#: ./docs/11.x/routing.md:910
#: ./docs/master/routing.md:901
msgctxt "H2"
msgid "Route Caching"
msgstr "Route 的快取"

#: ./docs/8.x/routing.md:714
#: ./docs/9.x/routing.md:819
#: ./docs/10.x/routing.md:820
#: ./docs/11.x/routing.md:912
#: ./docs/master/routing.md:903
msgctxt "P"
msgid "When deploying your application to production, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. To generate a route cache, execute the `route:cache` Artisan command:"
msgstr "在將專案部署到正式環境時，應使用 Laravel 的 Route 快取功能。使用 Route 快取就能大大地降低註冊所有 Route 所需的時間。要產生 Route 快取，請執行 `route:cache` Artisan 指令："

#: ./docs/8.x/routing.md:716
#: ./docs/9.x/routing.md:821
#: ./docs/10.x/routing.md:822
#: ./docs/11.x/routing.md:914
#: ./docs/master/routing.md:905
msgctxt "CODE"
msgid "php artisan route:cache"
msgstr ""

#: ./docs/8.x/routing.md:718
#: ./docs/9.x/routing.md:825
#: ./docs/10.x/routing.md:826
#: ./docs/11.x/routing.md:918
#: ./docs/master/routing.md:909
msgctxt "P"
msgid "After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the `route:cache` command during your project's deployment."
msgstr "執行這個指令後，每個 Request 都會自動載入快取的 Route 檔。請記得，當新增新 Route 後，必須重新產生 Route 快取。因此，應在進行專案部署的時候才執行 `route:cache` 指令。"

#: ./docs/8.x/routing.md:720
#: ./docs/9.x/routing.md:827
#: ./docs/10.x/routing.md:828
#: ./docs/11.x/routing.md:920
#: ./docs/master/routing.md:911
msgctxt "P"
msgid "You may use the `route:clear` command to clear the route cache:"
msgstr "可以使用 `route:clear` 指令來清除 Route 快取："

#: ./docs/8.x/routing.md:722
#: ./docs/9.x/routing.md:829
#: ./docs/10.x/routing.md:830
#: ./docs/11.x/routing.md:922
#: ./docs/master/routing.md:913
msgctxt "CODE"
msgid "php artisan route:clear"
msgstr ""

#: ./docs/11.x/routing.md:748
#: ./docs/master/routing.md:748
msgctxt "P"
msgid "Rate limiters may be defined within the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/11.x/routing.md:750
#: ./docs/master/routing.md:750
msgctxt "CODE: php"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('api', function (Request $request) {\n"
"        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:758
#: ./docs/11.x/routing.md:839
#: ./docs/master/routing.md:830
msgctxt "H3"
msgid "Attaching Rate Limiters to Routes"
msgstr ""

#: ./docs/10.x/routing.md:762
#: ./docs/11.x/routing.md:843
#: ./docs/master/routing.md:834
msgctxt "CODE"
msgid ""
"Route::middleware(['throttle:uploads'])->group(function () {\n"
"    Route::post('/audio', function () {\n"
"        // ...\n"
"    });\n"
"\n"
"    Route::post('/video', function () {\n"
"        // ...\n"
"    });\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:768
#: ./docs/master/routing.md:768
msgctxt "CODE"
msgid ""
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\RateLimiter;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"protected function boot(): void\n"
"{\n"
"    RateLimiter::for('global', function (Request $request) {\n"
"        return Limit::perMinute(1000);\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/routing.md:797
#: ./docs/11.x/routing.md:881
#: ./docs/master/routing.md:872
msgctxt "H2"
msgid "Accessing the Current Route"
msgstr ""

#: ./docs/11.x/routing.md:829
msgctxt "P"
msgid "If you're assigning multiple rate limits segmented by identical `by` values, you should ensure that each `by` value is unique. The easiest way to achieve this is to prefix the values given to the `by` method:"
msgstr ""

#: ./docs/11.x/routing.md:831
msgctxt "CODE"
msgid ""
"RateLimiter::for('uploads', function (Request $request) {\n"
"    return [\n"
"        Limit::perMinute(10)->by('minute:'.$request->user()->id),\n"
"        Limit::perDay(1000)->by('day:'.$request->user()->id),\n"
"    ];\n"
"});"
msgstr ""

#: ./docs/11.x/routing.md:856
#: ./docs/master/routing.md:847
msgctxt "P"
msgid "By default, the `throttle` middleware is mapped to the `Illuminate\\Routing\\Middleware\\ThrottleRequests` class. However, if you are using Redis as your application's cache driver, you may wish to instruct Laravel to use Redis to manage rate limiting. To do so, you should use the `throttleWithRedis` method in your application's `bootstrap/app.php` file. This method maps the `throttle` middleware to the `Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis` middleware class:"
msgstr ""

#: ./docs/11.x/routing.md:858
#: ./docs/master/routing.md:849
msgctxt "CODE"
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->throttleWithRedis();\n"
"    // ...\n"
"})"
msgstr ""

#: ./docs/11.x/routing.md:896
#: ./docs/master/routing.md:887
msgctxt "P"
msgid "Laravel can automatically respond to CORS `OPTIONS` HTTP requests with values that you configure. The `OPTIONS` requests will automatically be handled by the `HandleCors` [middleware](/docs/{{version}}/middleware) that is automatically included in your application's global middleware stack."
msgstr ""

#: ./docs/11.x/routing.md:898
#: ./docs/master/routing.md:889
msgctxt "P"
msgid "Sometimes, you may need to customize the CORS configuration values for your application. You may do so by publishing the `cors` configuration file using the `config:publish` Artisan command:"
msgstr ""

#: ./docs/11.x/routing.md:900
#: ./docs/master/routing.md:891
msgctxt "CODE: shell"
msgid "php artisan config:publish cors"
msgstr ""

#: ./docs/11.x/routing.md:904
#: ./docs/master/routing.md:895
msgctxt "P"
msgid "This command will place a `cors.php` configuration file within your application's `config` directory."
msgstr ""
