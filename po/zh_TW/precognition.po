msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/precognition.pot\n"
"X-Crowdin-File-ID: 188\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:58\n"

#: ./docs/10.x/precognition.md:1
#: ./docs/11.x/precognition.md:1
#: ./docs/master/precognition.md:1
msgctxt "H1"
msgid "Precognition"
msgstr ""

#: ./docs/10.x/precognition.md:3
#: ./docs/11.x/precognition.md:3
#: ./docs/master/precognition.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/precognition.md:4
#: ./docs/11.x/precognition.md:4
#: ./docs/master/precognition.md:4
msgctxt "P"
msgid "[Live Validation](#live-validation)"
msgstr ""

#: ./docs/10.x/precognition.md:5
#: ./docs/11.x/precognition.md:5
#: ./docs/master/precognition.md:5
msgctxt "P"
msgid "[Using Vue](#using-vue)"
msgstr ""

#: ./docs/10.x/precognition.md:6
#: ./docs/11.x/precognition.md:6
#: ./docs/master/precognition.md:6
msgctxt "P"
msgid "[Using Vue and Inertia](#using-vue-and-inertia)"
msgstr ""

#: ./docs/10.x/precognition.md:7
#: ./docs/11.x/precognition.md:7
#: ./docs/master/precognition.md:7
msgctxt "P"
msgid "[Using React](#using-react)"
msgstr ""

#: ./docs/10.x/precognition.md:8
#: ./docs/11.x/precognition.md:8
#: ./docs/master/precognition.md:8
msgctxt "P"
msgid "[Using React and Inertia](#using-react-and-inertia)"
msgstr ""

#: ./docs/10.x/precognition.md:9
#: ./docs/11.x/precognition.md:9
#: ./docs/master/precognition.md:9
msgctxt "P"
msgid "[Using Alpine and Blade](#using-alpine)"
msgstr ""

#: ./docs/10.x/precognition.md:10
#: ./docs/11.x/precognition.md:10
#: ./docs/master/precognition.md:10
msgctxt "P"
msgid "[Configuring Axios](#configuring-axios)"
msgstr ""

#: ./docs/10.x/precognition.md:11
#: ./docs/11.x/precognition.md:11
#: ./docs/master/precognition.md:11
msgctxt "P"
msgid "[Customizing Validation Rules](#customizing-validation-rules)"
msgstr ""

#: ./docs/10.x/precognition.md:12
#: ./docs/11.x/precognition.md:12
#: ./docs/master/precognition.md:12
msgctxt "P"
msgid "[Handling File Uploads](#handling-file-uploads)"
msgstr ""

#: ./docs/10.x/precognition.md:13
#: ./docs/11.x/precognition.md:13
#: ./docs/master/precognition.md:13
msgctxt "P"
msgid "[Managing Side-Effects](#managing-side-effects)"
msgstr ""

#: ./docs/10.x/precognition.md:14
#: ./docs/11.x/precognition.md:14
#: ./docs/master/precognition.md:14
msgctxt "P"
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/10.x/precognition.md:16
#: ./docs/11.x/precognition.md:16
#: ./docs/master/precognition.md:16
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:17
#: ./docs/11.x/precognition.md:17
#: ./docs/master/precognition.md:17
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/10.x/precognition.md:19
#: ./docs/11.x/precognition.md:19
#: ./docs/master/precognition.md:19
msgctxt "P"
msgid "Laravel Precognition allows you to anticipate the outcome of a future HTTP request. One of the primary use cases of Precognition is the ability to provide \"live\" validation for your frontend JavaScript application without having to duplicate your application's backend validation rules. Precognition pairs especially well with Laravel's Inertia-based [starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

#: ./docs/10.x/precognition.md:21
#: ./docs/11.x/precognition.md:21
#: ./docs/master/precognition.md:21
msgctxt "P"
msgid "When Laravel receives a \"precognitive request\", it will execute all of the route's middleware and resolve the route's controller dependencies, including validating [form requests](/docs/{{version}}/validation#form-request-validation) - but it will not actually execute the route's controller method."
msgstr ""

#: ./docs/10.x/precognition.md:23
#: ./docs/11.x/precognition.md:23
#: ./docs/master/precognition.md:23
#~ msgctxt "P"
#~ msgid "<a name=\"live-validation\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:24
#: ./docs/11.x/precognition.md:24
#: ./docs/master/precognition.md:24
msgctxt "H2"
msgid "Live Validation"
msgstr ""

#: ./docs/10.x/precognition.md:26
#: ./docs/11.x/precognition.md:26
#: ./docs/master/precognition.md:26
#~ msgctxt "P"
#~ msgid "<a name=\"using-vue\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:27
#: ./docs/11.x/precognition.md:27
#: ./docs/master/precognition.md:27
msgctxt "H3"
msgid "Using Vue"
msgstr ""

#: ./docs/10.x/precognition.md:29
#: ./docs/11.x/precognition.md:29
#: ./docs/master/precognition.md:29
msgctxt "P"
msgid "Using Laravel Precognition, you can offer live validation experiences to your users without having to duplicate your validation rules in your frontend Vue application. To illustrate how it works, let's build a form for creating new users within our application."
msgstr ""

#: ./docs/10.x/precognition.md:31
#: ./docs/10.x/precognition.md:212
#: ./docs/10.x/precognition.md:390
#: ./docs/11.x/precognition.md:31
#: ./docs/11.x/precognition.md:226
#: ./docs/11.x/precognition.md:418
#: ./docs/master/precognition.md:31
#: ./docs/master/precognition.md:212
#: ./docs/master/precognition.md:390
msgctxt "P"
msgid "First, to enable Precognition for a route, the `HandlePrecognitiveRequests` middleware should be added to the route definition. You should also create a [form request](/docs/{{version}}/validation#form-request-validation) to house the route's validation rules:"
msgstr ""

#: ./docs/10.x/precognition.md:33
#: ./docs/10.x/precognition.md:214
#: ./docs/11.x/precognition.md:33
#: ./docs/11.x/precognition.md:228
#: ./docs/master/precognition.md:33
#: ./docs/master/precognition.md:214
msgctxt "CODE: php"
msgid "use App\\Http\\Requests\\StoreUserRequest;\n"
"use Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests;\n\n"
"Route::post('/users', function (StoreUserRequest $request) {\n"
"    // ...\n"
"})->middleware([HandlePrecognitiveRequests::class]);"
msgstr ""

#: ./docs/10.x/precognition.md:42
#: ./docs/11.x/precognition.md:42
#: ./docs/master/precognition.md:42
msgctxt "P"
msgid "Next, you should install the Laravel Precognition frontend helpers for Vue via NPM:"
msgstr ""

#: ./docs/10.x/precognition.md:44
#: ./docs/11.x/precognition.md:44
#: ./docs/master/precognition.md:44
msgctxt "CODE: shell"
msgid "npm install laravel-precognition-vue"
msgstr ""

#: ./docs/10.x/precognition.md:48
#: ./docs/10.x/precognition.md:229
#: ./docs/11.x/precognition.md:48
#: ./docs/11.x/precognition.md:243
#: ./docs/master/precognition.md:48
#: ./docs/master/precognition.md:229
msgctxt "P"
msgid "With the Laravel Precognition package installed, you can now create a form object using Precognition's `useForm` function, providing the HTTP method (`post`), the target URL (`/users`), and the initial form data."
msgstr ""

#: ./docs/10.x/precognition.md:50
#: ./docs/11.x/precognition.md:50
#: ./docs/master/precognition.md:50
msgctxt "P"
msgid "Then, to enable live validation, invoke the form's `validate` method on each input's `change` event, providing the input's name:"
msgstr ""

#: ./docs/10.x/precognition.md:52
#: ./docs/11.x/precognition.md:52
#: ./docs/master/precognition.md:52
msgctxt "CODE: vue"
msgid "<script setup>\n"
"import { useForm } from 'laravel-precognition-vue';\n\n"
"const form = useForm('post', '/users', {\n"
"    name: '',\n"
"    email: '',\n"
"});\n\n"
"const submit = () => form.submit();\n"
"</script>\n\n"
"<template>\n"
"    <form @submit.prevent=\"submit\">\n"
"        <label for=\"name\">Name</label>\n"
"        <input\n"
"            id=\"name\"\n"
"            v-model=\"form.name\"\n"
"            @change=\"form.validate('name')\"\n"
"        />\n"
"        <div v-if=\"form.invalid('name')\">\n"
"            {{ form.errors.name }}\n"
"        </div>\n\n"
"        <label for=\"email\">Email</label>\n"
"        <input\n"
"            id=\"email\"\n"
"            type=\"email\"\n"
"            v-model=\"form.email\"\n"
"            @change=\"form.validate('email')\"\n"
"        />\n"
"        <div v-if=\"form.invalid('email')\">\n"
"            {{ form.errors.email }}\n"
"        </div>\n\n"
"        <button :disabled=\"form.processing\">\n"
"            Create User\n"
"        </button>\n"
"    </form>\n"
"</template>"
msgstr ""

#: ./docs/10.x/precognition.md:94
#: ./docs/10.x/precognition.md:276
#: ./docs/10.x/precognition.md:459
#: ./docs/11.x/precognition.md:94
#: ./docs/11.x/precognition.md:290
#: ./docs/11.x/precognition.md:487
#: ./docs/master/precognition.md:94
#: ./docs/master/precognition.md:276
#: ./docs/master/precognition.md:459
msgctxt "P"
msgid "Now, as the form is filled by the user, Precognition will provide live validation output powered by the validation rules in the route's form request. When the form's inputs are changed, a debounced \"precognitive\" validation request will be sent to your Laravel application. You may configure the debounce timeout by calling the form's `setValidationTimeout` function:"
msgstr ""

#: ./docs/10.x/precognition.md:96
#: ./docs/10.x/precognition.md:278
#: ./docs/10.x/precognition.md:461
#: ./docs/11.x/precognition.md:96
#: ./docs/11.x/precognition.md:292
#: ./docs/11.x/precognition.md:489
#: ./docs/master/precognition.md:96
#: ./docs/master/precognition.md:278
#: ./docs/master/precognition.md:461
msgctxt "CODE: js"
msgid "form.setValidationTimeout(3000);"
msgstr ""

#: ./docs/10.x/precognition.md:100
#: ./docs/10.x/precognition.md:282
#: ./docs/10.x/precognition.md:465
#: ./docs/11.x/precognition.md:100
#: ./docs/11.x/precognition.md:296
#: ./docs/11.x/precognition.md:493
#: ./docs/master/precognition.md:100
#: ./docs/master/precognition.md:282
#: ./docs/master/precognition.md:465
msgctxt "P"
msgid "When a validation request is in-flight, the form's `validating` property will be `true`:"
msgstr ""

#: ./docs/10.x/precognition.md:102
#: ./docs/11.x/precognition.md:102
#: ./docs/master/precognition.md:102
msgctxt "CODE: html"
msgid "<div v-if=\"form.validating\">\n"
"    Validating...\n"
"</div>"
msgstr ""

#: ./docs/10.x/precognition.md:108
#: ./docs/10.x/precognition.md:288
#: ./docs/10.x/precognition.md:473
#: ./docs/11.x/precognition.md:108
#: ./docs/11.x/precognition.md:302
#: ./docs/11.x/precognition.md:501
#: ./docs/master/precognition.md:108
#: ./docs/master/precognition.md:288
#: ./docs/master/precognition.md:473
msgctxt "P"
msgid "Any validation errors returned during a validation request or a form submission will automatically populate the form's `errors` object:"
msgstr ""

#: ./docs/10.x/precognition.md:110
#: ./docs/11.x/precognition.md:110
#: ./docs/master/precognition.md:110
msgctxt "CODE: html"
msgid "<div v-if=\"form.invalid('email')\">\n"
"    {{ form.errors.email }}\n"
"</div>"
msgstr ""

#: ./docs/10.x/precognition.md:116
#: ./docs/10.x/precognition.md:294
#: ./docs/10.x/precognition.md:481
#: ./docs/11.x/precognition.md:116
#: ./docs/11.x/precognition.md:308
#: ./docs/11.x/precognition.md:509
#: ./docs/master/precognition.md:116
#: ./docs/master/precognition.md:294
#: ./docs/master/precognition.md:481
msgctxt "P"
msgid "You can determine if the form has any errors using the form's `hasErrors` property:"
msgstr ""

#: ./docs/10.x/precognition.md:118
#: ./docs/11.x/precognition.md:118
#: ./docs/master/precognition.md:118
msgctxt "CODE: html"
msgid "<div v-if=\"form.hasErrors\">\n"
"    <!-- ... -->\n"
"</div>"
msgstr ""

#: ./docs/10.x/precognition.md:124
#: ./docs/10.x/precognition.md:300
#: ./docs/10.x/precognition.md:489
#: ./docs/11.x/precognition.md:124
#: ./docs/11.x/precognition.md:314
#: ./docs/11.x/precognition.md:517
#: ./docs/master/precognition.md:124
#: ./docs/master/precognition.md:300
#: ./docs/master/precognition.md:489
msgctxt "P"
msgid "You may also determine if an input has passed or failed validation by passing the input's name to the form's `valid` and `invalid` functions, respectively:"
msgstr ""

#: ./docs/10.x/precognition.md:126
#: ./docs/11.x/precognition.md:126
#: ./docs/master/precognition.md:126
msgctxt "CODE: html"
msgid "<span v-if=\"form.valid('email')\">\n"
"    ✅\n"
"</span>\n\n"
"<span v-else-if=\"form.invalid('email')\">\n"
"    ❌\n"
"</span>"
msgstr ""

#: ./docs/10.x/precognition.md:137
#: ./docs/10.x/precognition.md:309
#: ./docs/10.x/precognition.md:502
#: ./docs/11.x/precognition.md:137
#: ./docs/11.x/precognition.md:323
#: ./docs/11.x/precognition.md:530
#: ./docs/master/precognition.md:137
#: ./docs/master/precognition.md:309
#: ./docs/master/precognition.md:502
msgctxt "P"
msgid "A form input will only appear as valid or invalid once it has changed and a validation response has been received."
msgstr ""

#: ./docs/10.x/precognition.md:139
#: ./docs/10.x/precognition.md:311
#: ./docs/11.x/precognition.md:139
#: ./docs/11.x/precognition.md:325
#: ./docs/master/precognition.md:139
#: ./docs/master/precognition.md:311
msgctxt "P"
msgid "If you are validating a subset of a form's inputs with Precognition, it can be useful to manually clear errors. You may use the form's `forgetError` function to achieve this:"
msgstr ""

#: ./docs/10.x/precognition.md:141
#: ./docs/11.x/precognition.md:141
#: ./docs/master/precognition.md:141
msgctxt "CODE: html"
msgid "<input\n"
"    id=\"avatar\"\n"
"    type=\"file\"\n"
"    @change=\"(e) => {\n"
"        form.avatar = e.target.files[0]\n\n"
"        form.forgetError('avatar')\n"
"    }\"\n"
">"
msgstr ""

#: ./docs/10.x/precognition.md:153
#: ./docs/11.x/precognition.md:167
#: ./docs/master/precognition.md:153
msgctxt "P"
msgid "Of course, you may also execute code in reaction to the response to the form submission. The form's `submit` function returns an Axios request promise. This provides a convenient way to access the response payload, reset the form inputs on successful submission, or handle a failed request:"
msgstr ""

#: ./docs/11.x/precognition.md:153
#: ./docs/11.x/precognition.md:532
msgctxt "P"
msgid "As we have seen, you can hook into an input's `change` event and validate individual inputs as the user interacts with them; however, you may need to validate inputs that the user has not yet interacted with. This is common when building a \"wizard\", where you want to validate all visible inputs, whether the user has interacted with them or not, before moving to the next step."
msgstr ""

#: ./docs/10.x/precognition.md:155
#: ./docs/11.x/precognition.md:169
#: ./docs/master/precognition.md:155
msgctxt "CODE: js"
msgid "const submit = () => form.submit()\n"
"    .then(response => {\n"
"        form.reset();\n\n"
"        alert('User created.');\n"
"    })\n"
"    .catch(error => {\n"
"        alert('An error occurred.');\n"
"    });"
msgstr ""

#: ./docs/11.x/precognition.md:155
#: ./docs/11.x/precognition.md:341
#: ./docs/11.x/precognition.md:534
msgctxt "P"
msgid "To do this with Precognition, you should mark the fields you wish to validate as \"touched\" by passing their names to the `touch` method. Then, call the `validate` method with `onSuccess` or `onValidationError` callbacks:"
msgstr ""

#: ./docs/11.x/precognition.md:157
msgctxt "CODE: html"
msgid "<button\n"
"    type=\"button\" \n"
"    @click=\"form.touch(['name', 'email', 'phone']).validate({\n"
"        onSuccess: (response) => nextStep(),\n"
"        onValidationError: (response) => /* ... */,\n"
"    })\"\n"
">Next Step</button>"
msgstr ""

#: ./docs/10.x/precognition.md:167
#: ./docs/10.x/precognition.md:343
#: ./docs/10.x/precognition.md:504
#: ./docs/11.x/precognition.md:181
#: ./docs/11.x/precognition.md:371
#: ./docs/11.x/precognition.md:546
#: ./docs/master/precognition.md:167
#: ./docs/master/precognition.md:343
#: ./docs/master/precognition.md:504
msgctxt "P"
msgid "You may determine if a form submission request is in-flight by inspecting the form's `processing` property:"
msgstr ""

#: ./docs/10.x/precognition.md:169
#: ./docs/10.x/precognition.md:506
#: ./docs/11.x/precognition.md:183
#: ./docs/11.x/precognition.md:548
#: ./docs/master/precognition.md:169
#: ./docs/master/precognition.md:506
msgctxt "CODE: html"
msgid "<button :disabled=\"form.processing\">\n"
"    Submit\n"
"</button>"
msgstr ""

#: ./docs/10.x/precognition.md:175
#: ./docs/11.x/precognition.md:189
#: ./docs/master/precognition.md:175
#~ msgctxt "P"
#~ msgid "<a name=\"using-vue-and-inertia\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:176
#: ./docs/11.x/precognition.md:190
#: ./docs/master/precognition.md:176
msgctxt "H3"
msgid "Using Vue and Inertia"
msgstr ""

#: ./docs/10.x/precognition.md:179
#: ./docs/11.x/precognition.md:193
#: ./docs/master/precognition.md:179
msgctxt "P"
msgid "If you would like a head start when developing your Laravel application with Vue and Inertia, consider using one of our [starter kits](/docs/{{version}}/starter-kits). Laravel's starter kits provide backend and frontend authentication scaffolding for your new Laravel application."
msgstr ""

#: ./docs/10.x/precognition.md:181
#: ./docs/11.x/precognition.md:195
#: ./docs/master/precognition.md:181
msgctxt "P"
msgid "Before using Precognition with Vue and Inertia, be sure to review our general documentation on [using Precognition with Vue](#using-vue). When using Vue with Inertia, you will need to install the Inertia compatible Precognition library via NPM:"
msgstr ""

#: ./docs/10.x/precognition.md:183
#: ./docs/11.x/precognition.md:197
#: ./docs/master/precognition.md:183
msgctxt "CODE: shell"
msgid "npm install laravel-precognition-vue-inertia"
msgstr ""

#: ./docs/10.x/precognition.md:187
#: ./docs/10.x/precognition.md:363
#: ./docs/11.x/precognition.md:201
#: ./docs/11.x/precognition.md:391
#: ./docs/master/precognition.md:187
#: ./docs/master/precognition.md:363
msgctxt "P"
msgid "Once installed, Precognition's `useForm` function will return an Inertia [form helper](https://inertiajs.com/forms#form-helper) augmented with the validation features discussed above."
msgstr ""

#: ./docs/10.x/precognition.md:189
#: ./docs/11.x/precognition.md:203
#: ./docs/master/precognition.md:189
msgctxt "P"
msgid "The form helper's `submit` method has been streamlined, removing the need to specify the HTTP method or URL. Instead, you may pass Inertia's [visit options](https://inertiajs.com/manual-visits) as the first and only argument. In addition, the `submit` method does not return a Promise as seen in the Vue example above. Instead, you may provide any of Inertia's supported [event callbacks](https://inertiajs.com/manual-visits#event-callbacks) in the visit options given to the `submit` method:"
msgstr ""

#: ./docs/10.x/precognition.md:191
#: ./docs/11.x/precognition.md:205
#: ./docs/master/precognition.md:191
msgctxt "CODE: vue"
msgid "<script setup>\n"
"import { useForm } from 'laravel-precognition-vue-inertia';\n\n"
"const form = useForm('post', '/users', {\n"
"    name: '',\n"
"    email: '',\n"
"});\n\n"
"const submit = () => form.submit({\n"
"    preserveScroll: true,\n"
"    onSuccess: () => form.reset(),\n"
"});\n"
"</script>"
msgstr ""

#: ./docs/10.x/precognition.md:207
#: ./docs/11.x/precognition.md:221
#: ./docs/master/precognition.md:207
#~ msgctxt "P"
#~ msgid "<a name=\"using-react\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:208
#: ./docs/11.x/precognition.md:222
#: ./docs/master/precognition.md:208
msgctxt "H3"
msgid "Using React"
msgstr ""

#: ./docs/10.x/precognition.md:210
#: ./docs/11.x/precognition.md:224
#: ./docs/master/precognition.md:210
msgctxt "P"
msgid "Using Laravel Precognition, you can offer live validation experiences to your users without having to duplicate your validation rules in your frontend React application. To illustrate how it works, let's build a form for creating new users within our application."
msgstr ""

#: ./docs/10.x/precognition.md:223
#: ./docs/11.x/precognition.md:237
#: ./docs/master/precognition.md:223
msgctxt "P"
msgid "Next, you should install the Laravel Precognition frontend helpers for React via NPM:"
msgstr ""

#: ./docs/10.x/precognition.md:225
#: ./docs/11.x/precognition.md:239
#: ./docs/master/precognition.md:225
msgctxt "CODE: shell"
msgid "npm install laravel-precognition-react"
msgstr ""

#: ./docs/10.x/precognition.md:231
#: ./docs/11.x/precognition.md:245
#: ./docs/master/precognition.md:231
msgctxt "P"
msgid "To enable live validation, you should listen to each input's `change` and `blur` event. In the `change` event handler, you should set the form's data with the `setData` function, passing the input's name and new value. Then, in the `blur` event handler invoke the form's `validate` method, providing the input's name:"
msgstr ""

#: ./docs/10.x/precognition.md:233
#: ./docs/master/precognition.md:233
msgctxt "CODE: jsx"
msgid "import { useForm } from 'laravel-precognition-react';\n\n"
"export default function Form() {\n"
"    const form = useForm('post', '/users', {\n"
"        name: '',\n"
"        email: '',\n"
"    });\n\n"
"    const submit = (e) => {\n"
"        e.preventDefault();\n\n"
"        form.submit();\n"
"    };\n\n"
"    return (\n"
"        <form onSubmit={submit}>\n"
"            <label for=\"name\">Name</label>\n"
"            <input\n"
"                id=\"name\"\n"
"                value={form.data.name}\n"
"                onChange={(e) => form.setData('name', e.target.value)}\n"
"                onBlur={() => form.validate('name')}\n"
"            />\n"
"            {form.invalid('name') && <div>{form.errors.name}</div>}\n\n"
"            <label for=\"email\">Email</label>\n"
"            <input\n"
"                id=\"email\"\n"
"                value={form.data.email}\n"
"                onChange={(e) => form.setData('email', e.target.value)}\n"
"                onBlur={() => form.validate('email')}\n"
"            />\n"
"            {form.invalid('email') && <div>{form.errors.email}</div>}\n\n"
"            <button disabled={form.processing}>\n"
"                Create User\n"
"            </button>\n"
"        </form>\n"
"    );\n"
"};"
msgstr ""

#: ./docs/11.x/precognition.md:247
msgctxt "CODE: jsx"
msgid "import { useForm } from 'laravel-precognition-react';\n\n"
"export default function Form() {\n"
"    const form = useForm('post', '/users', {\n"
"        name: '',\n"
"        email: '',\n"
"    });\n\n"
"    const submit = (e) => {\n"
"        e.preventDefault();\n\n"
"        form.submit();\n"
"    };\n\n"
"    return (\n"
"        <form onSubmit={submit}>\n"
"            <label htmlFor=\"name\">Name</label>\n"
"            <input\n"
"                id=\"name\"\n"
"                value={form.data.name}\n"
"                onChange={(e) => form.setData('name', e.target.value)}\n"
"                onBlur={() => form.validate('name')}\n"
"            />\n"
"            {form.invalid('name') && <div>{form.errors.name}</div>}\n\n"
"            <label htmlFor=\"email\">Email</label>\n"
"            <input\n"
"                id=\"email\"\n"
"                value={form.data.email}\n"
"                onChange={(e) => form.setData('email', e.target.value)}\n"
"                onBlur={() => form.validate('email')}\n"
"            />\n"
"            {form.invalid('email') && <div>{form.errors.email}</div>}\n\n"
"            <button disabled={form.processing}>\n"
"                Create User\n"
"            </button>\n"
"        </form>\n"
"    );\n"
"};"
msgstr ""

#: ./docs/10.x/precognition.md:284
#: ./docs/11.x/precognition.md:298
#: ./docs/master/precognition.md:284
msgctxt "CODE: jsx"
msgid "{form.validating && <div>Validating...</div>}"
msgstr ""

#: ./docs/10.x/precognition.md:290
#: ./docs/11.x/precognition.md:304
#: ./docs/master/precognition.md:290
msgctxt "CODE: jsx"
msgid "{form.invalid('email') && <div>{form.errors.email}</div>}"
msgstr ""

#: ./docs/10.x/precognition.md:296
#: ./docs/11.x/precognition.md:310
#: ./docs/master/precognition.md:296
msgctxt "CODE: jsx"
msgid "{form.hasErrors && <div><!-- ... --></div>}"
msgstr ""

#: ./docs/10.x/precognition.md:302
#: ./docs/11.x/precognition.md:316
#: ./docs/master/precognition.md:302
msgctxt "CODE: jsx"
msgid "{form.valid('email') && <span>✅</span>}\n\n"
"{form.invalid('email') && <span>❌</span>}"
msgstr ""

#: ./docs/10.x/precognition.md:313
#: ./docs/master/precognition.md:313
msgctxt "CODE: jsx"
msgid "<input\n"
"    id=\"avatar\"\n"
"    type=\"file\"\n"
"    onChange={(e) => \n"
"        form.setData('avatar', e.target.value);\n\n"
"        form.forgetError('avatar');\n"
"    }\n"
">"
msgstr ""

#: ./docs/10.x/precognition.md:325
#: ./docs/11.x/precognition.md:353
#: ./docs/master/precognition.md:325
msgctxt "P"
msgid "Of course, you may also execute code in reaction to the response to the form submission. The form's `submit` function returns an Axios request promise. This provides a convenient way to access the response payload, reset the form's inputs on a successful form submission, or handle a failed request:"
msgstr ""

#: ./docs/10.x/precognition.md:327
#: ./docs/11.x/precognition.md:355
#: ./docs/master/precognition.md:327
msgctxt "CODE: js"
msgid "const submit = (e) => {\n"
"    e.preventDefault();\n\n"
"    form.submit()\n"
"        .then(response => {\n"
"            form.reset();\n\n"
"            alert('User created.');\n"
"        })\n"
"        .catch(error => {\n"
"            alert('An error occurred.');\n"
"        });\n"
"};"
msgstr ""

#: ./docs/11.x/precognition.md:327
msgctxt "CODE: jsx"
msgid "<input\n"
"    id=\"avatar\"\n"
"    type=\"file\"\n"
"    onChange={(e) => {\n"
"        form.setData('avatar', e.target.value);\n\n"
"        form.forgetError('avatar');\n"
"    }}\n"
">"
msgstr ""

#: ./docs/11.x/precognition.md:339
msgctxt "P"
msgid "As we have seen, you can hook into an input's `blur` event and validate individual inputs as the user interacts with them; however, you may need to validate inputs that the user has not yet interacted with. This is common when building a \"wizard\", where you want to validate all visible inputs, whether the user has interacted with them or not, before moving to the next step."
msgstr ""

#: ./docs/11.x/precognition.md:343
msgctxt "CODE: jsx"
msgid "<button\n"
"    type=\"button\"\n"
"    onClick={() => form.touch(['name', 'email', 'phone']).validate({\n"
"        onSuccess: (response) => nextStep(),\n"
"        onValidationError: (response) => /* ... */,\n"
"    })}\n"
">Next Step</button>"
msgstr ""

#: ./docs/10.x/precognition.md:345
#: ./docs/11.x/precognition.md:373
#: ./docs/master/precognition.md:345
msgctxt "CODE: html"
msgid "<button disabled={form.processing}>\n"
"    Submit\n"
"</button>"
msgstr ""

#: ./docs/10.x/precognition.md:351
#: ./docs/11.x/precognition.md:379
#: ./docs/master/precognition.md:351
#~ msgctxt "P"
#~ msgid "<a name=\"using-react-and-inertia\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:352
#: ./docs/11.x/precognition.md:380
#: ./docs/master/precognition.md:352
msgctxt "H3"
msgid "Using React and Inertia"
msgstr ""

#: ./docs/10.x/precognition.md:355
#: ./docs/11.x/precognition.md:383
#: ./docs/master/precognition.md:355
msgctxt "P"
msgid "If you would like a head start when developing your Laravel application with React and Inertia, consider using one of our [starter kits](/docs/{{version}}/starter-kits). Laravel's starter kits provide backend and frontend authentication scaffolding for your new Laravel application."
msgstr ""

#: ./docs/10.x/precognition.md:357
#: ./docs/11.x/precognition.md:385
#: ./docs/master/precognition.md:357
msgctxt "P"
msgid "Before using Precognition with React and Inertia, be sure to review our general documentation on [using Precognition with React](#using-react). When using React with Inertia, you will need to install the Inertia compatible Precognition library via NPM:"
msgstr ""

#: ./docs/10.x/precognition.md:359
#: ./docs/11.x/precognition.md:387
#: ./docs/master/precognition.md:359
msgctxt "CODE: shell"
msgid "npm install laravel-precognition-react-inertia"
msgstr ""

#: ./docs/10.x/precognition.md:365
#: ./docs/11.x/precognition.md:393
#: ./docs/master/precognition.md:365
msgctxt "P"
msgid "The form helper's `submit` method has been streamlined, removing the need to specify the HTTP method or URL. Instead, you may pass Inertia's [visit options](https://inertiajs.com/manual-visits) as the first and only argument. In addition, the `submit` method does not return a Promise as seen in the React example above. Instead, you may provide any of Inertia's supported [event callbacks](https://inertiajs.com/manual-visits#event-callbacks) in the visit options given to the `submit` method:"
msgstr ""

#: ./docs/10.x/precognition.md:367
#: ./docs/11.x/precognition.md:395
#: ./docs/master/precognition.md:367
msgctxt "CODE: js"
msgid "import { useForm } from 'laravel-precognition-react-inertia';\n\n"
"const form = useForm('post', '/users', {\n"
"    name: '',\n"
"    email: '',\n"
"});\n\n"
"const submit = (e) => {\n"
"    e.preventDefault();\n\n"
"    form.submit({\n"
"        preserveScroll: true,\n"
"        onSuccess: () => form.reset(),\n"
"    });\n"
"};"
msgstr ""

#: ./docs/10.x/precognition.md:385
#: ./docs/11.x/precognition.md:413
#: ./docs/master/precognition.md:385
#~ msgctxt "P"
#~ msgid "<a name=\"using-alpine\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:386
#: ./docs/11.x/precognition.md:414
#: ./docs/master/precognition.md:386
msgctxt "H3"
msgid "Using Alpine and Blade"
msgstr ""

#: ./docs/10.x/precognition.md:388
#: ./docs/11.x/precognition.md:416
#: ./docs/master/precognition.md:388
msgctxt "P"
msgid "Using Laravel Precognition, you can offer live validation experiences to your users without having to duplicate your validation rules in your frontend Alpine application. To illustrate how it works, let's build a form for creating new users within our application."
msgstr ""

#: ./docs/10.x/precognition.md:392
#: ./docs/11.x/precognition.md:420
#: ./docs/master/precognition.md:392
msgctxt "CODE: php"
msgid "use App\\Http\\Requests\\CreateUserRequest;\n"
"use Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests;\n\n"
"Route::post('/users', function (CreateUserRequest $request) {\n"
"    // ...\n"
"})->middleware([HandlePrecognitiveRequests::class]);"
msgstr ""

#: ./docs/10.x/precognition.md:401
#: ./docs/11.x/precognition.md:429
#: ./docs/master/precognition.md:401
msgctxt "P"
msgid "Next, you should install the Laravel Precognition frontend helpers for Alpine via NPM:"
msgstr ""

#: ./docs/10.x/precognition.md:403
#: ./docs/11.x/precognition.md:431
#: ./docs/master/precognition.md:403
msgctxt "CODE: shell"
msgid "npm install laravel-precognition-alpine"
msgstr ""

#: ./docs/10.x/precognition.md:407
#: ./docs/11.x/precognition.md:435
#: ./docs/master/precognition.md:407
msgctxt "P"
msgid "Then, register the Precognition plugin with Alpine in your `resources/js/app.js` file:"
msgstr ""

#: ./docs/10.x/precognition.md:409
#: ./docs/11.x/precognition.md:437
#: ./docs/master/precognition.md:409
msgctxt "CODE: js"
msgid "import Alpine from 'alpinejs';\n"
"import Precognition from 'laravel-precognition-alpine';\n\n"
"window.Alpine = Alpine;\n\n"
"Alpine.plugin(Precognition);\n"
"Alpine.start();"
msgstr ""

#: ./docs/10.x/precognition.md:419
#: ./docs/11.x/precognition.md:447
#: ./docs/master/precognition.md:419
msgctxt "P"
msgid "With the Laravel Precognition package installed and registered, you can now create a form object using Precognition's `$form` \"magic\", providing the HTTP method (`post`), the target URL (`/users`), and the initial form data."
msgstr ""

#: ./docs/10.x/precognition.md:421
#: ./docs/11.x/precognition.md:449
#: ./docs/master/precognition.md:421
msgctxt "P"
msgid "To enable live validation, you should bind the form's data to its relevant input and then listen to each input's `change` event. In the `change` event handler, you should invoke the form's `validate` method, providing the input's name:"
msgstr ""

#: ./docs/10.x/precognition.md:423
#: ./docs/11.x/precognition.md:451
#: ./docs/master/precognition.md:423
msgctxt "CODE: html"
msgid "<form x-data=\"{\n"
"    form: $form('post', '/register', {\n"
"        name: '',\n"
"        email: '',\n"
"    }),\n"
"}\">\n"
"    @csrf\n"
"    <label for=\"name\">Name</label>\n"
"    <input\n"
"        id=\"name\"\n"
"        name=\"name\"\n"
"        x-model=\"form.name\"\n"
"        @change=\"form.validate('name')\"\n"
"    />\n"
"    <template x-if=\"form.invalid('name')\">\n"
"        <div x-text=\"form.errors.name\"></div>\n"
"    </template>\n\n"
"    <label for=\"email\">Email</label>\n"
"    <input\n"
"        id=\"email\"\n"
"        name=\"email\"\n"
"        x-model=\"form.email\"\n"
"        @change=\"form.validate('email')\"\n"
"    />\n"
"    <template x-if=\"form.invalid('email')\">\n"
"        <div x-text=\"form.errors.email\"></div>\n"
"    </template>\n\n"
"    <button :disabled=\"form.processing\">\n"
"        Create User\n"
"    </button>\n"
"</form>"
msgstr ""

#: ./docs/10.x/precognition.md:467
#: ./docs/11.x/precognition.md:495
#: ./docs/master/precognition.md:467
msgctxt "CODE: html"
msgid "<template x-if=\"form.validating\">\n"
"    <div>Validating...</div>\n"
"</template>"
msgstr ""

#: ./docs/10.x/precognition.md:475
#: ./docs/11.x/precognition.md:503
#: ./docs/master/precognition.md:475
msgctxt "CODE: html"
msgid "<template x-if=\"form.invalid('email')\">\n"
"    <div x-text=\"form.errors.email\"></div>\n"
"</template>"
msgstr ""

#: ./docs/10.x/precognition.md:483
#: ./docs/11.x/precognition.md:511
#: ./docs/master/precognition.md:483
msgctxt "CODE: html"
msgid "<template x-if=\"form.hasErrors\">\n"
"    <div><!-- ... --></div>\n"
"</template>"
msgstr ""

#: ./docs/10.x/precognition.md:491
#: ./docs/11.x/precognition.md:519
#: ./docs/master/precognition.md:491
msgctxt "CODE: html"
msgid "<template x-if=\"form.valid('email')\">\n"
"    <span>✅</span>\n"
"</template>\n\n"
"<template x-if=\"form.invalid('email')\">\n"
"    <span>❌</span>\n"
"</template>"
msgstr ""

#: ./docs/10.x/precognition.md:512
#: ./docs/11.x/precognition.md:554
#: ./docs/master/precognition.md:512
#~ msgctxt "P"
#~ msgid "<a name=\"repopulating-old-form-data\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:513
#: ./docs/11.x/precognition.md:555
#: ./docs/master/precognition.md:513
msgctxt "H4"
msgid "Repopulating Old Form Data"
msgstr ""

#: ./docs/10.x/precognition.md:515
#: ./docs/11.x/precognition.md:557
#: ./docs/master/precognition.md:515
msgctxt "P"
msgid "In the user creation example discussed above, we are using Precognition to perform live validation; however, we are performing a traditional server-side form submission to submit the form. So, the form should be populated with any \"old\" input and validation errors returned from the server-side form submission:"
msgstr ""

#: ./docs/10.x/precognition.md:517
#: ./docs/11.x/precognition.md:559
#: ./docs/master/precognition.md:517
msgctxt "CODE: html"
msgid "<form x-data=\"{\n"
"    form: $form('post', '/register', {\n"
"        name: '{{ old('name') }}',\n"
"        email: '{{ old('email') }}',\n"
"    }).setErrors({{ Js::from($errors->messages()) }}),\n"
"}\">"
msgstr ""

#: ./docs/10.x/precognition.md:526
#: ./docs/11.x/precognition.md:568
#: ./docs/master/precognition.md:526
msgctxt "P"
msgid "Alternatively, if you would like to submit the form via XHR you may use the form's `submit` function, which returns an Axios request promise:"
msgstr ""

#: ./docs/10.x/precognition.md:528
#: ./docs/master/precognition.md:528
msgctxt "CODE: html"
msgid "<form \n"
"    x-data=\"{\n"
"        form: $form('post', '/register', {\n"
"            name: '',\n"
"            email: '',\n"
"        }),\n"
"        submit() {\n"
"            this.form.submit()\n"
"                .then(response => {\n"
"                    form.reset();\n\n"
"                    alert('User created.')\n"
"                })\n"
"                .catch(error => {\n"
"                    alert('An error occurred.');\n"
"                });\n"
"        },\n"
"    }\"\n"
"    @submit.prevent=\"submit\"\n"
">"
msgstr ""

#: ./docs/11.x/precognition.md:536
msgctxt "CODE: html"
msgid "<button\n"
"    type=\"button\"\n"
"    @change=\"form.touch(['name', 'email', 'phone']).validate({\n"
"        onSuccess: (response) => nextStep(),\n"
"        onValidationError: (response) => /* ... */,\n"
"    })\"\n"
">Next Step</button>"
msgstr ""

#: ./docs/10.x/precognition.md:551
#: ./docs/11.x/precognition.md:593
#: ./docs/master/precognition.md:551
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-axios\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:552
#: ./docs/11.x/precognition.md:594
#: ./docs/master/precognition.md:552
msgctxt "H3"
msgid "Configuring Axios"
msgstr ""

#: ./docs/10.x/precognition.md:554
#: ./docs/11.x/precognition.md:596
#: ./docs/master/precognition.md:554
msgctxt "P"
msgid "The Precognition validation libraries use the [Axios](https://github.com/axios/axios) HTTP client to send requests to your application's backend. For convenience, the Axios instance may be customized if required by your application. For example, when using the `laravel-precognition-vue` library, you may add additional request headers to each outgoing request in your application's `resources/js/app.js` file:"
msgstr ""

#: ./docs/10.x/precognition.md:556
#: ./docs/11.x/precognition.md:598
#: ./docs/master/precognition.md:556
msgctxt "CODE: js"
msgid "import { client } from 'laravel-precognition-vue';\n\n"
"client.axios().defaults.headers.common['Authorization'] = authToken;"
msgstr ""

#: ./docs/10.x/precognition.md:562
#: ./docs/11.x/precognition.md:604
#: ./docs/master/precognition.md:562
msgctxt "P"
msgid "Or, if you already have a configured Axios instance for your application, you may tell Precognition to use that instance instead:"
msgstr ""

#: ./docs/10.x/precognition.md:564
#: ./docs/11.x/precognition.md:606
#: ./docs/master/precognition.md:564
msgctxt "CODE: js"
msgid "import Axios from 'axios';\n"
"import { client } from 'laravel-precognition-vue';\n\n"
"window.axios = Axios.create()\n"
"window.axios.defaults.headers.common['Authorization'] = authToken;\n\n"
"client.use(window.axios)"
msgstr ""

#: ./docs/11.x/precognition.md:570
msgctxt "CODE: html"
msgid "<form\n"
"    x-data=\"{\n"
"        form: $form('post', '/register', {\n"
"            name: '',\n"
"            email: '',\n"
"        }),\n"
"        submit() {\n"
"            this.form.submit()\n"
"                .then(response => {\n"
"                    form.reset();\n\n"
"                    alert('User created.')\n"
"                })\n"
"                .catch(error => {\n"
"                    alert('An error occurred.');\n"
"                });\n"
"        },\n"
"    }\"\n"
"    @submit.prevent=\"submit\"\n"
">"
msgstr ""

#: ./docs/10.x/precognition.md:575
#: ./docs/11.x/precognition.md:617
#: ./docs/master/precognition.md:575
msgctxt "P"
msgid "The Inertia flavored Precognition libraries will only use the configured Axios instance for validation requests. Form submissions will always be sent by Inertia."
msgstr ""

#: ./docs/10.x/precognition.md:577
#: ./docs/11.x/precognition.md:619
#: ./docs/master/precognition.md:577
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-validation-rules\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:578
#: ./docs/11.x/precognition.md:620
#: ./docs/master/precognition.md:578
msgctxt "H2"
msgid "Customizing Validation Rules"
msgstr ""

#: ./docs/10.x/precognition.md:580
#: ./docs/11.x/precognition.md:622
#: ./docs/master/precognition.md:580
msgctxt "P"
msgid "It is possible to customize the validation rules executed during a precognitive request by using the request's `isPrecognitive` method."
msgstr ""

#: ./docs/10.x/precognition.md:582
#: ./docs/11.x/precognition.md:624
#: ./docs/master/precognition.md:582
msgctxt "P"
msgid "For example, on a user creation form, we may want to validate that a password is \"uncompromised\" only on the final form submission. For precognitive validation requests, we will simply validate that the password is required and has a minimum of 8 characters. Using the `isPrecognitive` method, we can customize the rules defined by our form request:"
msgstr ""

#: ./docs/10.x/precognition.md:584
#: ./docs/11.x/precognition.md:626
#: ./docs/master/precognition.md:584
msgctxt "CODE: php"
msgid "<?php\n\n"
"namespace App\\Http\\Requests;\n\n"
"use Illuminate\\Foundation\\Http\\FormRequest;\n"
"use Illuminate\\Validation\\Rules\\Password;\n\n"
"class StoreUserRequest extends FormRequest\n"
"{\n"
"    /**\n"
"     * Get the validation rules that apply to the request.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function rules()\n"
"    {\n"
"        return [\n"
"            'password' => [\n"
"                'required',\n"
"                $this->isPrecognitive()\n"
"                    ? Password::min(8)\n"
"                    : Password::min(8)->uncompromised(),\n"
"            ],\n"
"            // ...\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/precognition.md:614
#: ./docs/11.x/precognition.md:656
#: ./docs/master/precognition.md:614
#~ msgctxt "P"
#~ msgid "<a name=\"handling-file-uploads\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:615
#: ./docs/11.x/precognition.md:657
#: ./docs/master/precognition.md:615
msgctxt "H2"
msgid "Handling File Uploads"
msgstr ""

#: ./docs/10.x/precognition.md:617
#: ./docs/11.x/precognition.md:659
#: ./docs/master/precognition.md:617
msgctxt "P"
msgid "By default, Laravel Precognition does not upload or validate files during a precognitive validation request. This ensure that large files are not unnecessarily uploaded multiple times."
msgstr ""

#: ./docs/10.x/precognition.md:619
#: ./docs/11.x/precognition.md:661
#: ./docs/master/precognition.md:619
msgctxt "P"
msgid "Because of this behavior, you should ensure that your application [customizes the corresponding form request's validation rules](#customizing-validation-rules) to specify the field is only required for full form submissions:"
msgstr ""

#: ./docs/10.x/precognition.md:621
#: ./docs/master/precognition.md:621
msgctxt "CODE: php"
msgid "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function rules()\n"
"{\n"
"    return [\n"
"        'avatar' => [\n"
"            ...$this->isPrecognitive() ? [] : ['required'],\n"
"            'image',\n"
"            'mimes:jpg,png'\n"
"            'dimensions:ratio=3/2',\n"
"        ],\n"
"        // ...\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/precognition.md:641
#: ./docs/11.x/precognition.md:683
#: ./docs/master/precognition.md:641
msgctxt "P"
msgid "If you would like to include files in every validation request, you may invoke the `validateFiles` function on your client-side form instance:"
msgstr ""

#: ./docs/10.x/precognition.md:643
#: ./docs/11.x/precognition.md:685
#: ./docs/master/precognition.md:643
msgctxt "CODE: js"
msgid "form.validateFiles();"
msgstr ""

#: ./docs/10.x/precognition.md:647
#: ./docs/11.x/precognition.md:689
#: ./docs/master/precognition.md:647
#~ msgctxt "P"
#~ msgid "<a name=\"managing-side-effects\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:648
#: ./docs/11.x/precognition.md:690
#: ./docs/master/precognition.md:648
msgctxt "H2"
msgid "Managing Side-Effects"
msgstr ""

#: ./docs/10.x/precognition.md:650
#: ./docs/11.x/precognition.md:692
#: ./docs/master/precognition.md:650
msgctxt "P"
msgid "When adding the `HandlePrecognitiveRequests` middleware to a route, you should consider if there are any side-effects in *other* middleware that should be skipped during a precognitive request."
msgstr ""

#: ./docs/10.x/precognition.md:652
#: ./docs/11.x/precognition.md:694
#: ./docs/master/precognition.md:652
msgctxt "P"
msgid "For example, you may have a middleware that increments the total number of \"interactions\" each user has with your application, but you may not want precognitive requests to be counted as an interaction. To accomplish this, we may check the request's `isPrecognitive` method before incrementing the interaction count:"
msgstr ""

#: ./docs/10.x/precognition.md:654
#: ./docs/11.x/precognition.md:696
#: ./docs/master/precognition.md:654
msgctxt "CODE: php"
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use App\\Facades\\Interaction;\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n\n"
"class InteractionMiddleware\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     */\n"
"    public function handle(Request $request, Closure $next): mixed\n"
"    {\n"
"        if (! $request->isPrecognitive()) {\n"
"            Interaction::incrementFor($request->user());\n"
"        }\n\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/precognition.md:663
msgctxt "CODE: php"
msgid "/**\n"
" * Get the validation rules that apply to the request.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function rules()\n"
"{\n"
"    return [\n"
"        'avatar' => [\n"
"            ...$this->isPrecognitive() ? [] : ['required'],\n"
"            'image',\n"
"            'mimes:jpg,png',\n"
"            'dimensions:ratio=3/2',\n"
"        ],\n"
"        // ...\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/precognition.md:679
#: ./docs/11.x/precognition.md:721
#: ./docs/master/precognition.md:679
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/10.x/precognition.md:680
#: ./docs/11.x/precognition.md:722
#: ./docs/master/precognition.md:680
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/10.x/precognition.md:682
#: ./docs/11.x/precognition.md:724
#: ./docs/master/precognition.md:682
msgctxt "P"
msgid "If you would like to make precognitive requests in your tests, Laravel's `TestCase` includes a `withPrecognition` helper which will add the `Precognition` request header."
msgstr ""

#: ./docs/10.x/precognition.md:684
#: ./docs/11.x/precognition.md:726
#: ./docs/master/precognition.md:684
msgctxt "P"
msgid "Additionally, if you would like to assert that a precognitive request was successful, e.g., did not return any validation errors, you may use the `assertSuccessfulPrecognition` method on the response:"
msgstr ""

#: ./docs/10.x/precognition.md:686
#: ./docs/11.x/precognition.md:741
#: ./docs/master/precognition.md:699
msgctxt "CODE: php"
msgid "public function test_it_validates_registration_form_with_precognition()\n"
"{\n"
"    $response = $this->withPrecognition()\n"
"        ->post('/register', [\n"
"            'name' => 'Taylor Otwell',\n"
"        ]);\n\n"
"    $response->assertSuccessfulPrecognition();\n"
"    $this->assertSame(0, User::count());\n"
"}"
msgstr ""

#: ./docs/11.x/precognition.md:728
#: ./docs/master/precognition.md:686
msgctxt "CODE: php tab=Pest"
msgid "it('validates registration form with precognition', function () {\n"
"    $response = $this->withPrecognition()\n"
"        ->post('/register', [\n"
"            'name' => 'Taylor Otwell',\n"
"        ]);\n\n"
"    $response->assertSuccessfulPrecognition();\n\n"
"    expect(User::count())->toBe(0);\n"
"});"
msgstr ""

