# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/mail.md:1
#, markdown-text, no-wrap
msgid "Mail"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[View Data](#view-data)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Attachments](#attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#. type: Bullet: '    - '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/mail.md:26
#, markdown-text
msgid "[Events](#events)"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:28
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:28
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:31
#, markdown-text
msgid ""
"Sending email doesn't have to be complicated. Laravel provides a clean, "
"simple email API powered by the popular "
"[SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and "
"SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, "
"Amazon SES, and `sendmail`, allowing you to quickly get started sending mail "
"through a local or cloud based service of your choice."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:33
#, markdown-text, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:33
#, markdown-text, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:36
#, markdown-text
msgid ""
"Laravel's email services may be configured via your application's "
"`config/mail.php` configuration file. Each mailer configured within this "
"file may have its own unique configuration and even its own unique "
"\"transport\", allowing your application to use different email services to "
"send certain email messages. For example, your application might use "
"Postmark to send transactional emails while using Amazon SES to send bulk "
"emails."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:38
#, markdown-text
msgid ""
"Within your `mail` configuration file, you will find a `mailers` "
"configuration array. This array contains a sample configuration entry for "
"each of the major mail drivers / transports supported by Laravel, while the "
"`default` configuration value determines which mailer will be used by "
"default when your application needs to send an email message."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:40
#, markdown-text, no-wrap
msgid "<a name=\"driver-prerequisites\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:40
#, markdown-text, no-wrap
msgid "Driver / Transport Prerequisites"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:43
#, markdown-text
msgid ""
"The API based drivers such as Mailgun and Postmark are often simpler and "
"faster than sending mail via SMTP servers. Whenever possible, we recommend "
"that you use one of these drivers. All of the API based drivers require the "
"Guzzle HTTP library, which may be installed via the Composer package "
"manager:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:45
#, markdown-text, no-wrap
msgid "    composer require guzzlehttp/guzzle\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:47
#, markdown-text, no-wrap
msgid "<a name=\"mailgun-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:47
#, markdown-text, no-wrap
msgid "Mailgun Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:50
#, markdown-text
msgid ""
"To use the Mailgun driver, first install the Guzzle HTTP library. Then, set "
"the `default` option in your `config/mail.php` configuration file to "
"`mailgun`. Next, verify that your `config/services.php` configuration file "
"contains the following options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:55
#, markdown-text, no-wrap
msgid ""
"    'mailgun' => [\n"
"        'domain' => env('MAILGUN_DOMAIN'),\n"
"        'secret' => env('MAILGUN_SECRET'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:57
#, markdown-text
msgid ""
"If you are not using the United States [Mailgun "
"region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), "
"you may define your region's endpoint in the `services` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:63
#, markdown-text, no-wrap
msgid ""
"    'mailgun' => [\n"
"        'domain' => env('MAILGUN_DOMAIN'),\n"
"        'secret' => env('MAILGUN_SECRET'),\n"
"        'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:65
#, markdown-text, no-wrap
msgid "<a name=\"postmark-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:65
#, markdown-text, no-wrap
msgid "Postmark Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:68
#, markdown-text
msgid ""
"To use the Postmark driver, install Postmark's SwiftMailer transport via "
"Composer:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:70
#, markdown-text, no-wrap
msgid "    composer require wildbit/swiftmailer-postmark\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:72
#, markdown-text
msgid ""
"Next, install the Guzzle HTTP library and set the `default` option in your "
"`config/mail.php` configuration file to `postmark`. Finally, verify that "
"your `config/services.php` configuration file contains the following "
"options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:76
#, markdown-text, no-wrap
msgid ""
"    'postmark' => [\n"
"        'token' => env('POSTMARK_TOKEN'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:78
#, markdown-text
msgid ""
"If you would like to specify the Postmark message stream that should be used "
"by a given mailer, you may add the `message_stream_id` configuration option "
"to the mailer's configuration array. This configuration array can be found "
"in your application's `config/mail.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:83
#, markdown-text, no-wrap
msgid ""
"    'postmark' => [\n"
"        'transport' => 'postmark',\n"
"        'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:85
#, markdown-text
msgid ""
"This way you are also able to set up multiple Postmark mailers with "
"different message streams."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:87
#, markdown-text, no-wrap
msgid "<a name=\"ses-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:87
#, markdown-text, no-wrap
msgid "SES Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:90
#, markdown-text
msgid ""
"To use the Amazon SES driver you must first install the Amazon AWS SDK for "
"PHP. You may install this library via the Composer package manager:"
msgstr ""

#. type: Fenced code block (bash)
#: docs/8.x/mail.md:91
#, no-wrap
msgid "composer require aws/aws-sdk-php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:96
#, markdown-text
msgid ""
"Next, set the `default` option in your `config/mail.php` configuration file "
"to `ses` and verify that your `config/services.php` configuration file "
"contains the following options:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:102
#, markdown-text, no-wrap
msgid ""
"    'ses' => [\n"
"        'key' => env('AWS_ACCESS_KEY_ID'),\n"
"        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:104
#, markdown-text
msgid ""
"If you would like to define [additional "
"options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) "
"that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending "
"an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:116
#, markdown-text, no-wrap
msgid ""
"    'ses' => [\n"
"        'key' => env('AWS_ACCESS_KEY_ID'),\n"
"        'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"        'options' => [\n"
"            'ConfigurationSetName' => 'MyConfigurationSet',\n"
"            'Tags' => [\n"
"                ['Name' => 'foo', 'Value' => 'bar'],\n"
"            ],\n"
"        ],\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:118
#, markdown-text, no-wrap
msgid "<a name=\"generating-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:118
#, markdown-text, no-wrap
msgid "Generating Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:121
#, markdown-text
msgid ""
"When building Laravel applications, each type of email sent by your "
"application is represented as a \"mailable\" class. These classes are stored "
"in the `app/Mail` directory. Don't worry if you don't see this directory in "
"your application, since it will be generated for you when you create your "
"first mailable class using the `make:mail` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:123
#, markdown-text, no-wrap
msgid "    php artisan make:mail OrderShipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:125
#, markdown-text, no-wrap
msgid "<a name=\"writing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:125
#, markdown-text, no-wrap
msgid "Writing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:128
#, markdown-text
msgid ""
"Once you have generated a mailable class, open it up so we can explore its "
"contents. First, note that all of a mailable class' configuration is done in "
"the `build` method. Within this method, you may call various methods such as "
"`from`, `subject`, `view`, and `attach` to configure the email's "
"presentation and delivery."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:130
#, markdown-text, no-wrap
msgid "<a name=\"configuring-the-sender\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:130
#, markdown-text, no-wrap
msgid "Configuring The Sender"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:133
#, markdown-text, no-wrap
msgid "<a name=\"using-the-from-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:133
#, markdown-text, no-wrap
msgid "Using The `from` Method"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:136
#, markdown-text
msgid ""
"First, let's explore configuring the sender of the email. Or, in other "
"words, who the email is going to be \"from\". There are two ways to "
"configure the sender. First, you may use the `from` method within your "
"mailable class' `build` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:147
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->from('example@example.com')\n"
"                    ->view('emails.orders.shipped');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:149
#, markdown-text, no-wrap
msgid "<a name=\"using-a-global-from-address\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:149
#, markdown-text, no-wrap
msgid "Using A Global `from` Address"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:152
#, markdown-text
msgid ""
"However, if your application uses the same \"from\" address for all of its "
"emails, it can become cumbersome to call the `from` method in each mailable "
"class you generate. Instead, you may specify a global \"from\" address in "
"your `config/mail.php` configuration file. This address will be used if no "
"other \"from\" address is specified within the mailable class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:154
#, markdown-text, no-wrap
msgid "    'from' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:156
#, markdown-text
msgid ""
"In addition, you may define a global \"reply_to\" address within your "
"`config/mail.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:158
#, markdown-text, no-wrap
msgid ""
"    'reply_to' => ['address' => 'example@example.com', 'name' => 'App "
"Name'],\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:160
#, markdown-text, no-wrap
msgid "<a name=\"configuring-the-view\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:160
#, markdown-text, no-wrap
msgid "Configuring The View"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:163
#, markdown-text
msgid ""
"Within a mailable class' `build` method, you may use the `view` method to "
"specify which template should be used when rendering the email's "
"contents. Since each email typically uses a [Blade "
"template](/docs/{{version}}/blade) to render its contents, you have the full "
"power and convenience of the Blade templating engine when building your "
"email's HTML:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:173
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:175
#, markdown-text, no-wrap
msgid ""
"> {tip} You may wish to create a `resources/views/emails` directory to house "
"all of your email templates; however, you are free to place them wherever "
"you wish within your `resources/views` directory.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:177
#, markdown-text, no-wrap
msgid "<a name=\"plain-text-emails\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:177
#, markdown-text, no-wrap
msgid "Plain Text Emails"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:180
#, markdown-text
msgid ""
"If you would like to define a plain-text version of your email, you may use "
"the `text` method. Like the `view` method, the `text` method accepts a "
"template name which will be used to render the contents of the email. You "
"are free to define both an HTML and plain-text version of your message:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:191
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->text('emails.orders.shipped_plain');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:193
#, markdown-text, no-wrap
msgid "<a name=\"view-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:193
#, markdown-text, no-wrap
msgid "View Data"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:196
#, markdown-text, no-wrap
msgid "<a name=\"via-public-properties\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:196
#, markdown-text, no-wrap
msgid "Via Public Properties"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:199
#, markdown-text
msgid ""
"Typically, you will want to pass some data to your view that you can utilize "
"when rendering the email's HTML. There are two ways you may make data "
"available to your view. First, any public property defined on your mailable "
"class will automatically be made available to the view. So, for example, you "
"may pass data into your mailable class' constructor and set that data to "
"public properties defined on the class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:201 docs/8.x/mail.md:254 docs/8.x/mail.md:545
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:203 docs/8.x/mail.md:256
#, markdown-text, no-wrap
msgid "    namespace App\\Mail;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:208 docs/8.x/mail.md:261
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\Order;\n"
"    use Illuminate\\Bus\\Queueable;\n"
"    use Illuminate\\Mail\\Mailable;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:212 docs/8.x/mail.md:265
#, markdown-text, no-wrap
msgid ""
"    class OrderShipped extends Mailable\n"
"    {\n"
"        use Queueable, SerializesModels;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:219
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Models\\Order\n"
"         */\n"
"        public $order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:230
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Create a new message instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Order  $order\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Order $order)\n"
"        {\n"
"            $this->order = $order;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:241
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Build the message.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function build()\n"
"        {\n"
"            return $this->view('emails.orders.shipped');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:243
#, markdown-text
msgid ""
"Once the data has been set to a public property, it will automatically be "
"available in your view, so you may access it like you would access any other "
"data in your Blade templates:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:247
#, markdown-text, no-wrap
msgid ""
"    <div>\n"
"        Price: {{ $order->price }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:249
#, markdown-text, no-wrap
msgid "<a name=\"via-the-with-method\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:249
#, markdown-text, no-wrap
msgid "Via The `with` Method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:252
#, markdown-text
msgid ""
"If you would like to customize the format of your email's data before it is "
"sent to the template, you may manually pass your data to the view via the "
"`with` method. Typically, you will still pass data via the mailable class' "
"constructor; however, you should set this data to `protected` or `private` "
"properties so the data is not automatically made available to the "
"template. Then, when calling the `with` method, pass an array of data that "
"you wish to make available to the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:272
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Models\\Order\n"
"         */\n"
"        protected $order;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:283
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Create a new message instance.\n"
"         *\n"
"         * @param  \\App\\Models\\Order $order\n"
"         * @return void\n"
"         */\n"
"        public function __construct(Order $order)\n"
"        {\n"
"            $this->order = $order;\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:298
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Build the message.\n"
"         *\n"
"         * @return $this\n"
"         */\n"
"        public function build()\n"
"        {\n"
"            return $this->view('emails.orders.shipped')\n"
"                        ->with([\n"
"                            'orderName' => $this->order->name,\n"
"                            'orderPrice' => $this->order->price,\n"
"                        ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:300
#, markdown-text
msgid ""
"Once the data has been passed to the `with` method, it will automatically be "
"available in your view, so you may access it like you would access any other "
"data in your Blade templates:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:304
#, markdown-text, no-wrap
msgid ""
"    <div>\n"
"        Price: {{ $orderPrice }}\n"
"    </div>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:306
#, markdown-text, no-wrap
msgid "<a name=\"attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:306
#, markdown-text, no-wrap
msgid "Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:309
#, markdown-text
msgid ""
"To add attachments to an email, use the `attach` method within the mailable "
"class' `build` method. The `attach` method accepts the full path to the file "
"as its first argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:320
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attach('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:322
#, markdown-text
msgid ""
"When attaching files to a message, you may also specify the display name and "
"/ or MIME type by passing an `array` as the second argument to the `attach` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:336
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attach('/path/to/file', [\n"
"                        'as' => 'name.pdf',\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:338
#, markdown-text, no-wrap
msgid "<a name=\"attaching-files-from-disk\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:338
#, markdown-text, no-wrap
msgid "Attaching Files From Disk"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:341
#, markdown-text
msgid ""
"If you have stored a file on one of your [filesystem "
"disks](/docs/{{version}}/filesystem), you may attach it to the email using "
"the `attachFromStorage` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:352
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorage('/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:354
#, markdown-text
msgid ""
"If necessary, you may specify the file's attachment name and additional "
"options using the second and third arguments to the `attachFromStorage` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:367
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                       'mime' => 'application/pdf'\n"
"                   ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:369
#, markdown-text
msgid ""
"The `attachFromStorageDisk` method may be used if you need to specify a "
"storage disk other than your default disk:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:380
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"       return $this->view('emails.orders.shipped')\n"
"                   ->attachFromStorageDisk('s3', '/path/to/file');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:382
#, markdown-text, no-wrap
msgid "<a name=\"raw-data-attachments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:382
#, markdown-text, no-wrap
msgid "Raw Data Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:385
#, markdown-text
msgid ""
"The `attachData` method may be used to attach a raw string of bytes as an "
"attachment. For example, you might use this method if you have generated a "
"PDF in memory and want to attach it to the email without writing it to "
"disk. The `attachData` method accepts the raw data bytes as its first "
"argument, the name of the file as its second argument, and an array of "
"options as its third argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:398
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->attachData($this->pdf, 'name.pdf', [\n"
"                        'mime' => 'application/pdf',\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:400
#, markdown-text, no-wrap
msgid "<a name=\"inline-attachments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:400
#, markdown-text, no-wrap
msgid "Inline Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:403
#, markdown-text
msgid ""
"Embedding inline images into your emails is typically cumbersome; however, "
"Laravel provides a convenient way to attach images to your emails. To embed "
"an inline image, use the `embed` method on the `$message` variable within "
"your email template. Laravel automatically makes the `$message` variable "
"available to all of your email templates, so you don't need to worry about "
"passing it in manually:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:406
#, markdown-text, no-wrap
msgid ""
"    <body>\n"
"        Here is an image:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:409
#, markdown-text, no-wrap
msgid ""
"        <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"    </body>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:411
#, markdown-text, no-wrap
msgid ""
"> {note} The `$message` variable is not available in plain-text message "
"templates since plain-text messages do not utilize inline attachments.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:413
#, markdown-text, no-wrap
msgid "<a name=\"embedding-raw-data-attachments\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:413
#, markdown-text, no-wrap
msgid "Embedding Raw Data Attachments"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:416
#, markdown-text
msgid ""
"If you already have a raw image data string you wish to embed into an email "
"template, you may call the `embedData` method on the `$message` "
"variable. When calling the `embedData` method, you will need to provide a "
"filename that should be assigned to the embedded image:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:419
#, markdown-text, no-wrap
msgid ""
"    <body>\n"
"        Here is an image from raw data:\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:422
#, markdown-text, no-wrap
msgid ""
"        <img src=\"{{ $message->embedData($data, 'example-image.jpg') "
"}}\">\n"
"    </body>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:424
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-swiftmailer-message\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:424
#, markdown-text, no-wrap
msgid "Customizing The SwiftMailer Message"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:427
#, markdown-text
msgid ""
"The `withSwiftMessage` method of the `Mailable` base class allows you to "
"register a closure which will be invoked with the SwiftMailer message "
"instance before sending the message. This gives you an opportunity to deeply "
"customize the message before it is delivered:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:436
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        $this->view('emails.orders.shipped');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:443
#, markdown-text, no-wrap
msgid ""
"        $this->withSwiftMessage(function ($message) {\n"
"            $message->getHeaders()->addTextHeader(\n"
"                'Custom-Header', 'Header Value'\n"
"            );\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:445
#, markdown-text, no-wrap
msgid "<a name=\"markdown-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:445
#, markdown-text, no-wrap
msgid "Markdown Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:448
#, markdown-text
msgid ""
"Markdown mailable messages allow you to take advantage of the pre-built "
"templates and components of [mail "
"notifications](/docs/{{version}}/notifications#mail-notifications) in your "
"mailables. Since the messages are written in Markdown, Laravel is able to "
"render beautiful, responsive HTML templates for the messages while also "
"automatically generating a plain-text counterpart."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:450
#, markdown-text, no-wrap
msgid "<a name=\"generating-markdown-mailables\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:450
#, markdown-text, no-wrap
msgid "Generating Markdown Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:453
#, markdown-text
msgid ""
"To generate a mailable with a corresponding Markdown template, you may use "
"the `--markdown` option of the `make:mail` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:455
#, markdown-text, no-wrap
msgid "    php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:457
#, markdown-text
msgid ""
"Then, when configuring the mailable within its `build` method, call the "
"`markdown` method instead of the `view` method. The `markdown` method "
"accepts the name of the Markdown template and an optional array of data to "
"make available to the template:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:470
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->from('example@example.com')\n"
"                    ->markdown('emails.orders.shipped', [\n"
"                        'url' => $this->orderUrl,\n"
"                    ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:472
#, markdown-text, no-wrap
msgid "<a name=\"writing-markdown-messages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:472
#, markdown-text, no-wrap
msgid "Writing Markdown Messages"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:475
#, markdown-text
msgid ""
"Markdown mailables use a combination of Blade components and Markdown syntax "
"which allow you to easily construct mail messages while leveraging Laravel's "
"pre-built email UI components:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:478
#, markdown-text, no-wrap
msgid ""
"    @component('mail::message')\n"
"    # Order Shipped\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:480
#, markdown-text, no-wrap
msgid "    Your order has been shipped!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:484
#, markdown-text, no-wrap
msgid ""
"    @component('mail::button', ['url' => $url])\n"
"    View Order\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:488
#, markdown-text, no-wrap
msgid ""
"    Thanks,<br>\n"
"    {{ config('app.name') }}\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:490
#, markdown-text, no-wrap
msgid ""
"> {tip} Do not use excess indentation when writing Markdown emails. Per "
"Markdown standards, Markdown parsers will render indented content as code "
"blocks.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:492
#, markdown-text, no-wrap
msgid "<a name=\"button-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:492
#, markdown-text, no-wrap
msgid "Button Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:495
#, markdown-text
msgid ""
"The button component renders a centered button link. The component accepts "
"two arguments, a `url` and an optional `color`. Supported colors are "
"`primary`, `success`, and `error`. You may add as many button components to "
"a message as you wish:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:499
#, markdown-text, no-wrap
msgid ""
"    @component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"    View Order\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:501
#, markdown-text, no-wrap
msgid "<a name=\"panel-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:501
#, markdown-text, no-wrap
msgid "Panel Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:504
#, markdown-text
msgid ""
"The panel component renders the given block of text in a panel that has a "
"slightly different background color than the rest of the message. This "
"allows you to draw attention to a given block of text:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:508
#, markdown-text, no-wrap
msgid ""
"    @component('mail::panel')\n"
"    This is the panel content.\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:510
#, markdown-text, no-wrap
msgid "<a name=\"table-component\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:510
#, markdown-text, no-wrap
msgid "Table Component"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:513
#, markdown-text
msgid ""
"The table component allows you to transform a Markdown table into an HTML "
"table. The component accepts the Markdown table as its content. Table column "
"alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:520
#, markdown-text, no-wrap
msgid ""
"    @component('mail::table')\n"
"    | Laravel       | Table         | Example  |\n"
"    | ------------- |:-------------:| --------:|\n"
"    | Col 2 is      | Centered      | $10      |\n"
"    | Col 3 is      | Right-Aligned | $20      |\n"
"    @endcomponent\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:522
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:522
#, markdown-text, no-wrap
msgid "Customizing The Components"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:525
#, markdown-text
msgid ""
"You may export all of the Markdown mail components to your own application "
"for customization. To export the components, use the `vendor:publish` "
"Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:527
#, markdown-text, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:529
#, markdown-text
msgid ""
"This command will publish the Markdown mail components to the "
"`resources/views/vendor/mail` directory. The `mail` directory will contain "
"an `html` and a `text` directory, each containing their respective "
"representations of every available component. You are free to customize "
"these components however you like."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:531
#, markdown-text, no-wrap
msgid "<a name=\"customizing-the-css\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:531
#, markdown-text, no-wrap
msgid "Customizing The CSS"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:534
#, markdown-text
msgid ""
"After exporting the components, the "
"`resources/views/vendor/mail/html/themes` directory will contain a "
"`default.css` file. You may customize the CSS in this file and your styles "
"will automatically be converted to inline CSS styles within the HTML "
"representations of your Markdown mail messages."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:536
#, markdown-text
msgid ""
"If you would like to build an entirely new theme for Laravel's Markdown "
"components, you may place a CSS file within the `html/themes` "
"directory. After naming and saving your CSS file, update the `theme` option "
"of your application's `config/mail.php` configuration file to match the name "
"of your new theme."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:538
#, markdown-text
msgid ""
"To customize the theme for an individual mailable, you may set the `$theme` "
"property of the mailable class to the name of the theme that should be used "
"when sending that mailable."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:540
#, markdown-text, no-wrap
msgid "<a name=\"sending-mail\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:540
#, markdown-text, no-wrap
msgid "Sending Mail"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:543
#, markdown-text
msgid ""
"To send a message, use the `to` method on the `Mail` "
"[facade](/docs/{{version}}/facades). The `to` method accepts an email "
"address, a user instance, or a collection of users. If you pass an object or "
"collection of objects, the mailer will automatically use their `email` and "
"`name` properties when determining the email's recipients, so make sure "
"these attributes are available on your objects. Once you have specified your "
"recipients, you may pass an instance of your mailable class to the `send` "
"method:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:547
#, markdown-text, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:553
#, markdown-text, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Mail\\OrderShipped;\n"
"    use App\\Models\\Order;\n"
"    use Illuminate\\Http\\Request;\n"
"    use Illuminate\\Support\\Facades\\Mail;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:565
#, markdown-text, no-wrap
msgid ""
"    class OrderShipmentController extends Controller\n"
"    {\n"
"        /**\n"
"         * Ship the given order.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            $order = Order::findOrFail($request->order_id);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:567
#, markdown-text, no-wrap
msgid "            // Ship the order...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:571
#, markdown-text, no-wrap
msgid ""
"            Mail::to($request->user())->send(new OrderShipped($order));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:573
#, markdown-text
msgid ""
"You are not limited to just specifying the \"to\" recipients when sending a "
"message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by "
"chaining their respective methods together:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:578
#, markdown-text, no-wrap
msgid ""
"    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:580
#, markdown-text, no-wrap
msgid "<a name=\"looping-over-recipients\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:580
#, markdown-text, no-wrap
msgid "Looping Over Recipients"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:583
#, markdown-text
msgid ""
"Occasionally, you may need to send a mailable to a list of recipients by "
"iterating over an array of recipients / email addresses. However, since the "
"`to` method appends email addresses to the mailable's list of recipients, "
"each iteration through the loop will send another email to every previous "
"recipient. Therefore, you should always re-create the mailable instance for "
"each recipient:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:587
#, markdown-text, no-wrap
msgid ""
"    foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"        Mail::to($recipient)->send(new OrderShipped($order));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:589
#, markdown-text, no-wrap
msgid "<a name=\"sending-mail-via-a-specific-mailer\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:589
#, markdown-text, no-wrap
msgid "Sending Mail Via A Specific Mailer"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:592
#, markdown-text
msgid ""
"By default, Laravel will send email using the mailer configured as the "
"`default` mailer in your application's `mail` configuration file. However, "
"you may use the `mailer` method to send a message using a specific mailer "
"configuration:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:596
#, markdown-text, no-wrap
msgid ""
"    Mail::mailer('postmark')\n"
"            ->to($request->user())\n"
"            ->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:598
#, markdown-text, no-wrap
msgid "<a name=\"queueing-mail\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:598
#, markdown-text, no-wrap
msgid "Queueing Mail"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:601
#, markdown-text, no-wrap
msgid "<a name=\"queueing-a-mail-message\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:601
#, markdown-text, no-wrap
msgid "Queueing A Mail Message"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:604
#, markdown-text
msgid ""
"Since sending email messages can negatively impact the response time of your "
"application, many developers choose to queue email messages for background "
"sending. Laravel makes this easy using its built-in [unified queue "
"API](/docs/{{version}}/queues). To queue a mail message, use the `queue` "
"method on the `Mail` facade after specifying the message's recipients:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:609
#, markdown-text, no-wrap
msgid ""
"    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->queue(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:611
#, markdown-text
msgid ""
"This method will automatically take care of pushing a job onto the queue so "
"the message is sent in the background. You will need to [configure your "
"queues](/docs/{{version}}/queues) before using this feature."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:613
#, markdown-text, no-wrap
msgid "<a name=\"delayed-message-queueing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:613
#, markdown-text, no-wrap
msgid "Delayed Message Queueing"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:616
#, markdown-text
msgid ""
"If you wish to delay the delivery of a queued email message, you may use the "
"`later` method. As its first argument, the `later` method accepts a "
"`DateTime` instance indicating when the message should be sent:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:621
#, markdown-text, no-wrap
msgid ""
"    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->later(now()->addMinutes(10), new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:623
#, markdown-text, no-wrap
msgid "<a name=\"pushing-to-specific-queues\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:623
#, markdown-text, no-wrap
msgid "Pushing To Specific Queues"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:626
#, markdown-text
msgid ""
"Since all mailable classes generated using the `make:mail` command make use "
"of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and "
"`onConnection` methods on any mailable class instance, allowing you to "
"specify the connection and queue name for the message:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:630
#, markdown-text, no-wrap
msgid ""
"    $message = (new OrderShipped($order))\n"
"                    ->onConnection('sqs')\n"
"                    ->onQueue('emails');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:635
#, markdown-text, no-wrap
msgid ""
"    Mail::to($request->user())\n"
"        ->cc($moreUsers)\n"
"        ->bcc($evenMoreUsers)\n"
"        ->queue($message);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:637
#, markdown-text, no-wrap
msgid "<a name=\"queueing-by-default\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:637
#, markdown-text, no-wrap
msgid "Queueing By Default"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:640
#, markdown-text
msgid ""
"If you have mailable classes that you want to always be queued, you may "
"implement the `ShouldQueue` contract on the class. Now, even if you call the "
"`send` method when mailing, the mailable will still be queued since it "
"implements the contract:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:642 docs/8.x/mail.md:656
#, markdown-text, no-wrap
msgid "    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:647
#, markdown-text, no-wrap
msgid ""
"    class OrderShipped extends Mailable implements ShouldQueue\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:649
#, markdown-text, no-wrap
msgid "<a name=\"queued-mailables-and-database-transactions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:649
#, markdown-text, no-wrap
msgid "Queued Mailables & Database Transactions"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:652
#, markdown-text
msgid ""
"When queued mailables are dispatched within database transactions, they may "
"be processed by the queue before the database transaction has "
"committed. When this happens, any updates you have made to models or "
"database records during the database transaction may not yet be reflected in "
"the database. In addition, any models or database records created within the "
"transaction may not exist in the database. If your mailable depends on these "
"models, unexpected errors can occur when the job that sends the queued "
"mailable is processed."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:654
#, markdown-text
msgid ""
"If your queue connection's `after_commit` configuration option is set to "
"`false`, you may still indicate that a particular queued mailable should be "
"dispatched after all open database transactions have been committed by "
"defining an `$afterCommit` property on the mailable class:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:661
#, markdown-text, no-wrap
msgid ""
"    class OrderShipped extends Mailable implements ShouldQueue\n"
"    {\n"
"        public $afterCommit = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:663
#, markdown-text, no-wrap
msgid ""
"> {tip} To learn more about working around these issues, please review the "
"documentation regarding [queued jobs and database "
"transactions](/docs/{{version}}/queues#jobs-and-database-transactions).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:665
#, markdown-text, no-wrap
msgid "<a name=\"rendering-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:665
#, markdown-text, no-wrap
msgid "Rendering Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:668
#, markdown-text
msgid ""
"Sometimes you may wish to capture the HTML content of a mailable without "
"sending it. To accomplish this, you may call the `render` method of the "
"mailable. This method will return the evaluated HTML content of the mailable "
"as a string:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:671
#, markdown-text, no-wrap
msgid ""
"    use App\\Mail\\InvoicePaid;\n"
"    use App\\Models\\Invoice;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:673
#, markdown-text, no-wrap
msgid "    $invoice = Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:675
#, markdown-text, no-wrap
msgid "    return (new InvoicePaid($invoice))->render();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:677
#, markdown-text, no-wrap
msgid "<a name=\"previewing-mailables-in-the-browser\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:677
#, markdown-text, no-wrap
msgid "Previewing Mailables In The Browser"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:680
#, markdown-text
msgid ""
"When designing a mailable's template, it is convenient to quickly preview "
"the rendered mailable in your browser like a typical Blade template. For "
"this reason, Laravel allows you to return any mailable directly from a route "
"closure or controller. When a mailable is returned, it will be rendered and "
"displayed in the browser, allowing you to quickly preview its design without "
"needing to send it to an actual email address:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:683
#, markdown-text, no-wrap
msgid ""
"    Route::get('/mailable', function () {\n"
"        $invoice = App\\Models\\Invoice::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:686
#, markdown-text, no-wrap
msgid ""
"        return new App\\Mail\\InvoicePaid($invoice);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:688
#, markdown-text, no-wrap
msgid ""
"> {note} [Inline attachments](#inline-attachments) will not be rendered when "
"a mailable is previewed in your browser. To preview these mailables, you "
"should send them to an email testing application such as "
"[MailHog](https://github.com/mailhog/MailHog) or "
"[HELO](https://usehelo.com).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:690
#, markdown-text, no-wrap
msgid "<a name=\"localizing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:690
#, markdown-text, no-wrap
msgid "Localizing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:693
#, markdown-text
msgid ""
"Laravel allows you to send mailables in a locale other than the request's "
"current locale, and will even remember this locale if the mail is queued."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:695
#, markdown-text
msgid ""
"To accomplish this, the `Mail` facade offers a `locale` method to set the "
"desired language. The application will change into this locale when the "
"mailable's template is being evaluated and then revert back to the previous "
"locale when evaluation is complete:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:699
#, markdown-text, no-wrap
msgid ""
"    Mail::to($request->user())->locale('es')->send(\n"
"        new OrderShipped($order)\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:701
#, markdown-text, no-wrap
msgid "<a name=\"user-preferred-locales\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/mail.md:701
#, markdown-text, no-wrap
msgid "User Preferred Locales"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:704
#, markdown-text
msgid ""
"Sometimes, applications store each user's preferred locale. By implementing "
"the `HasLocalePreference` contract on one or more of your models, you may "
"instruct Laravel to use this stored locale when sending mail:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:706
#, markdown-text, no-wrap
msgid "    use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:719
#, markdown-text, no-wrap
msgid ""
"    class User extends Model implements HasLocalePreference\n"
"    {\n"
"        /**\n"
"         * Get the user's preferred locale.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function preferredLocale()\n"
"        {\n"
"            return $this->locale;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:721
#, markdown-text
msgid ""
"Once you have implemented the interface, Laravel will automatically use the "
"preferred locale when sending mailables and notifications to the "
"model. Therefore, there is no need to call the `locale` method when using "
"this interface:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:723
#, markdown-text, no-wrap
msgid "    Mail::to($request->user())->send(new OrderShipped($order));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:725
#, markdown-text, no-wrap
msgid "<a name=\"testing-mailables\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:725
#, markdown-text, no-wrap
msgid "Testing Mailables"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:728
#, markdown-text
msgid ""
"Laravel provides several convenient methods for testing that your mailables "
"contain the content that you expect. These methods are: `assertSeeInHtml`, "
"`assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:730
#, markdown-text
msgid ""
"As you might expect, the \"HTML\" assertions assert that the HTML version of "
"your mailable contains a given string, while the \"text\" assertions assert "
"that the plain-text version of your mailable contains a given string:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:733
#, markdown-text, no-wrap
msgid ""
"    use App\\Mail\\InvoicePaid;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:737
#, markdown-text, no-wrap
msgid ""
"    public function test_mailable_content()\n"
"    {\n"
"        $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:739
#, markdown-text, no-wrap
msgid "        $mailable = new InvoicePaid($user);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:742
#, markdown-text, no-wrap
msgid ""
"        $mailable->assertSeeInHtml($user->email);\n"
"        $mailable->assertSeeInHtml('Invoice Paid');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:746
#, markdown-text, no-wrap
msgid ""
"        $mailable->assertSeeInText($user->email);\n"
"        $mailable->assertSeeInText('Invoice Paid');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:748
#, markdown-text, no-wrap
msgid "<a name=\"testing-mailable-sending\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:748
#, markdown-text, no-wrap
msgid "Testing Mailable Sending"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:751
#, markdown-text
msgid ""
"We suggest testing the content of your mailables separately from your tests "
"that assert that a given mailable was \"sent\" to a specific user. To learn "
"how to test that mailables were sent, check out our documentation on the "
"[Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:753
#, markdown-text, no-wrap
msgid "<a name=\"mail-and-local-development\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:753
#, markdown-text, no-wrap
msgid "Mail & Local Development"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:756
#, markdown-text
msgid ""
"When developing an application that sends email, you probably don't want to "
"actually send emails to live email addresses. Laravel provides several ways "
"to \"disable\" the actual sending of emails during local development."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:758
#, markdown-text, no-wrap
msgid "<a name=\"log-driver\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:758
#, markdown-text, no-wrap
msgid "Log Driver"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:761
#, markdown-text
msgid ""
"Instead of sending your emails, the `log` mail driver will write all email "
"messages to your log files for inspection. Typically, this driver would only "
"be used during local development. For more information on configuring your "
"application per environment, check out the [configuration "
"documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:763
#, markdown-text, no-wrap
msgid "<a name=\"mailtrap\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/mail.md:763
#, markdown-text, no-wrap
msgid "HELO / Mailtrap / MailHog"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:766
#, markdown-text
msgid ""
"Finally, you may use a service like [HELO](https://usehelo.com) or "
"[Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email "
"messages to a \"dummy\" mailbox where you may view them in a true email "
"client. This approach has the benefit of allowing you to actually inspect "
"the final emails in Mailtrap's message viewer."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:768
#, markdown-text
msgid ""
"If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview "
"your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail "
"is running, you may access the MailHog interface at: "
"`http://localhost:8025`."
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:770
#, markdown-text, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/mail.md:770
#, markdown-text, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:773
#, markdown-text
msgid ""
"Laravel fires two events during the process of sending mail messages. The "
"`MessageSending` event is fired prior to a message being sent, while the "
"`MessageSent` event is fired after a message has been sent. Remember, these "
"events are fired when the mail is being *sent*, not when it is queued. You "
"may register event listeners for this event in your "
"`App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/mail.md:786
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"            'App\\Listeners\\LogSendingMessage',\n"
"        ],\n"
"        'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"            'App\\Listeners\\LogSentMessage',\n"
"        ],\n"
"    ];\n"
msgstr ""
