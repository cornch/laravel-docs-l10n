#
msgid ""
msgstr ""

#: docs/10.x/urls.md:block 1 (header)
msgid "URL Generation"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[The Basics](#the-basics)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[Generating URLs](#generating-urls)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[Accessing The Current URL](#accessing-the-current-url)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[URLs For Named Routes](#urls-for-named-routes)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[Signed URLs](#signed-urls)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[URLs For Controller Actions](#urls-for-controller-actions)"
msgstr ""

#: docs/10.x/urls.md:block 2 (unordered list)
msgid "[Default Values](#default-values)"
msgstr ""

#: docs/10.x/urls.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/urls.md:block 5 (paragraph)
msgid "Laravel provides several helpers to assist you in generating URLs for your application. These helpers are primarily helpful when building links in your templates and API responses, or when generating redirect responses to another part of your application."
msgstr ""

#: docs/10.x/urls.md:block 7 (header)
msgid "The Basics"
msgstr ""

#: docs/10.x/urls.md:block 9 (header)
msgid "Generating URLs"
msgstr ""

#: docs/10.x/urls.md:block 10 (paragraph)
msgid "The `url` helper may be used to generate arbitrary URLs for your application. The generated URL will automatically use the scheme (HTTP or HTTPS) and host from the current request being handled by the application:"
msgstr ""

#: docs/10.x/urls.md:block 11 (code)
msgid ""
"$post = App\\Models\\Post::find(1);\n"
"\n"
"echo url(\"/posts/{$post->id}\");\n"
"\n"
"// http://example.com/posts/1\n"
msgstr ""

#: docs/10.x/urls.md:block 13 (header)
msgid "Accessing The Current URL"
msgstr ""

#: docs/10.x/urls.md:block 14 (paragraph)
msgid "If no path is provided to the `url` helper, an `Illuminate\\Routing\\UrlGenerator` instance is returned, allowing you to access information about the current URL:"
msgstr ""

#: docs/10.x/urls.md:block 15 (code)
msgid ""
"// Get the current URL without the query string...\n"
"echo url()->current();\n"
"\n"
"// Get the current URL including the query string...\n"
"echo url()->full();\n"
"\n"
"// Get the full URL for the previous request...\n"
"echo url()->previous();\n"
msgstr ""

#: docs/10.x/urls.md:block 16 (paragraph)
msgid "Each of these methods may also be accessed via the `URL` [facade](/docs/{{version}}/facades):"
msgstr ""

#: docs/10.x/urls.md:block 17 (code)
msgid ""
"use Illuminate\\Support\\Facades\\URL;\n"
"\n"
"echo URL::current();\n"
msgstr ""

#: docs/10.x/urls.md:block 19 (header)
msgid "URLs For Named Routes"
msgstr ""

#: docs/10.x/urls.md:block 20 (paragraph)
msgid "The `route` helper may be used to generate URLs to [named routes](/docs/{{version}}/routing#named-routes). Named routes allow you to generate URLs without being coupled to the actual URL defined on the route. Therefore, if the route's URL changes, no changes need to be made to your calls to the `route` function. For example, imagine your application contains a route defined like the following:"
msgstr ""

#: docs/10.x/urls.md:block 21 (code)
msgid ""
"Route::get('/post/{post}', function (Post $post) {\n"
"    // ...\n"
"})->name('post.show');\n"
msgstr ""

#: docs/10.x/urls.md:block 22 (paragraph)
msgid "To generate a URL to this route, you may use the `route` helper like so:"
msgstr ""

#: docs/10.x/urls.md:block 23 (code)
msgid ""
"echo route('post.show', ['post' => 1]);\n"
"\n"
"// http://example.com/post/1\n"
msgstr ""

#: docs/10.x/urls.md:block 24 (paragraph)
msgid "Of course, the `route` helper may also be used to generate URLs for routes with multiple parameters:"
msgstr ""

#: docs/10.x/urls.md:block 25 (code)
msgid ""
"Route::get('/post/{post}/comment/{comment}', function (Post $post, Comment $comment) {\n"
"    // ...\n"
"})->name('comment.show');\n"
"\n"
"echo route('comment.show', ['post' => 1, 'comment' => 3]);\n"
"\n"
"// http://example.com/post/1/comment/3\n"
msgstr ""

#: docs/10.x/urls.md:block 26 (paragraph)
msgid "Any additional array elements that do not correspond to the route's definition parameters will be added to the URL's query string:"
msgstr ""

#: docs/10.x/urls.md:block 27 (code)
msgid ""
"echo route('post.show', ['post' => 1, 'search' => 'rocket']);\n"
"\n"
"// http://example.com/post/1?search=rocket\n"
msgstr ""

#: docs/10.x/urls.md:block 29 (header)
msgid "Eloquent Models"
msgstr ""

#: docs/10.x/urls.md:block 30 (paragraph)
msgid "You will often be generating URLs using the route key (typically the primary key) of [Eloquent models](/docs/{{version}}/eloquent). For this reason, you may pass Eloquent models as parameter values. The `route` helper will automatically extract the model's route key:"
msgstr ""

#: docs/10.x/urls.md:block 31 (code)
msgid "echo route('post.show', ['post' => $post]);\n"
msgstr ""

#: docs/10.x/urls.md:block 33 (header)
msgid "Signed URLs"
msgstr ""

#: docs/10.x/urls.md:block 34 (paragraph)
msgid "Laravel allows you to easily create \"signed\" URLs to named routes. These URLs have a \"signature\" hash appended to the query string which allows Laravel to verify that the URL has not been modified since it was created. Signed URLs are especially useful for routes that are publicly accessible yet need a layer of protection against URL manipulation."
msgstr ""

#: docs/10.x/urls.md:block 35 (paragraph)
msgid "For example, you might use signed URLs to implement a public \"unsubscribe\" link that is emailed to your customers. To create a signed URL to a named route, use the `signedRoute` method of the `URL` facade:"
msgstr ""

#: docs/10.x/urls.md:block 36 (code)
msgid ""
"use Illuminate\\Support\\Facades\\URL;\n"
"\n"
"return URL::signedRoute('unsubscribe', ['user' => 1]);\n"
msgstr ""

#: docs/10.x/urls.md:block 37 (paragraph)
msgid "If you would like to generate a temporary signed route URL that expires after a specified amount of time, you may use the `temporarySignedRoute` method. When Laravel validates a temporary signed route URL, it will ensure that the expiration timestamp that is encoded into the signed URL has not elapsed:"
msgstr ""

#: docs/10.x/urls.md:block 38 (code)
msgid ""
"use Illuminate\\Support\\Facades\\URL;\n"
"\n"
"return URL::temporarySignedRoute(\n"
"    'unsubscribe', now()->addMinutes(30), ['user' => 1]\n"
");\n"
msgstr ""

#: docs/10.x/urls.md:block 40 (header)
msgid "Validating Signed Route Requests"
msgstr ""

#: docs/10.x/urls.md:block 41 (paragraph)
msgid "To verify that an incoming request has a valid signature, you should call the `hasValidSignature` method on the incoming `Illuminate\\Http\\Request` instance:"
msgstr ""

#: docs/10.x/urls.md:block 42 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/unsubscribe/{user}', function (Request $request) {\n"
"    if (! $request->hasValidSignature()) {\n"
"        abort(401);\n"
"    }\n"
"\n"
"    // ...\n"
"})->name('unsubscribe');\n"
msgstr ""

#: docs/10.x/urls.md:block 43 (paragraph)
msgid "Sometimes, you may need to allow your application's frontend to append data to a signed URL, such as when performing client-side pagination. Therefore, you can specify request query parameters that should be ignored when validating a signed URL using the `hasValidSignatureWhileIgnoring` method. Remember, ignoring parameters allows anyone to modify those parameters on the request:"
msgstr ""

#: docs/10.x/urls.md:block 44 (code)
msgid ""
"if (! $request->hasValidSignatureWhileIgnoring(['page', 'order'])) {\n"
"    abort(401);\n"
"}\n"
msgstr ""

#: docs/10.x/urls.md:block 45 (paragraph)
msgid "Instead of validating signed URLs using the incoming request instance, you may assign the `Illuminate\\Routing\\Middleware\\ValidateSignature` [middleware](/docs/{{version}}/middleware) to the route. If it is not already present, you may assign this middleware an alias in your HTTP kernel's `$middlewareAliases` array:"
msgstr ""

#: docs/10.x/urls.md:block 46 (code)
msgid ""
"/**\n"
" * The application's middleware aliases.\n"
" *\n"
" * Aliases may be used to conveniently assign middleware to routes and groups.\n"
" *\n"
" * @var array<string, class-string|string>\n"
" */\n"
"protected $middlewareAliases = [\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"];\n"
msgstr ""

#: docs/10.x/urls.md:block 47 (paragraph)
msgid "Once you have registered the middleware in your kernel, you may attach it to a route. If the incoming request does not have a valid signature, the middleware will automatically return a `403` HTTP response:"
msgstr ""

#: docs/10.x/urls.md:block 48 (code)
msgid ""
"Route::post('/unsubscribe/{user}', function (Request $request) {\n"
"    // ...\n"
"})->name('unsubscribe')->middleware('signed');\n"
msgstr ""

#: docs/10.x/urls.md:block 50 (header)
msgid "Responding To Invalid Signed Routes"
msgstr ""

#: docs/10.x/urls.md:block 51 (paragraph)
msgid "When someone visits a signed URL that has expired, they will receive a generic error page for the `403` HTTP status code. However, you can customize this behavior by defining a custom \"renderable\" closure for the `InvalidSignatureException` exception in your exception handler. This closure should return an HTTP response:"
msgstr ""

#: docs/10.x/urls.md:block 52 (code)
msgid ""
"use Illuminate\\Routing\\Exceptions\\InvalidSignatureException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (InvalidSignatureException $e) {\n"
"        return response()->view('error.link-expired', [], 403);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/urls.md:block 54 (header)
msgid "URLs For Controller Actions"
msgstr ""

#: docs/10.x/urls.md:block 55 (paragraph)
msgid "The `action` function generates a URL for the given controller action:"
msgstr ""

#: docs/10.x/urls.md:block 56 (code)
msgid ""
"use App\\Http\\Controllers\\HomeController;\n"
"\n"
"$url = action([HomeController::class, 'index']);\n"
msgstr ""

#: docs/10.x/urls.md:block 57 (paragraph)
msgid "If the controller method accepts route parameters, you may pass an associative array of route parameters as the second argument to the function:"
msgstr ""

#: docs/10.x/urls.md:block 58 (code)
msgid "$url = action([UserController::class, 'profile'], ['id' => 1]);\n"
msgstr ""

#: docs/10.x/urls.md:block 60 (header)
msgid "Default Values"
msgstr ""

#: docs/10.x/urls.md:block 61 (paragraph)
msgid "For some applications, you may wish to specify request-wide default values for certain URL parameters. For example, imagine many of your routes define a `{locale}` parameter:"
msgstr ""

#: docs/10.x/urls.md:block 62 (code)
msgid ""
"Route::get('/{locale}/posts', function () {\n"
"    // ...\n"
"})->name('post.index');\n"
msgstr ""

#: docs/10.x/urls.md:block 63 (paragraph)
msgid "It is cumbersome to always pass the `locale` every time you call the `route` helper. So, you may use the `URL::defaults` method to define a default value for this parameter that will always be applied during the current request. You may wish to call this method from a [route middleware](/docs/{{version}}/middleware#assigning-middleware-to-routes) so that you have access to the current request:"
msgstr ""

#: docs/10.x/urls.md:block 64 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class SetDefaultLocaleForUrls\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        URL::defaults(['locale' => $request->user()->locale]);\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/urls.md:block 65 (paragraph)
msgid "Once the default value for the `locale` parameter has been set, you are no longer required to pass its value when generating URLs via the `route` helper."
msgstr ""

#: docs/10.x/urls.md:block 67 (header)
msgid "URL Defaults & Middleware Priority"
msgstr ""

#: docs/10.x/urls.md:block 68 (paragraph)
msgid "Setting URL default values can interfere with Laravel's handling of implicit model bindings. Therefore, you should [prioritize your middleware](/docs/{{version}}/middleware#sorting-middleware) that set URL defaults to be executed before Laravel's own `SubstituteBindings` middleware. You can accomplish this by making sure your middleware occurs before the `SubstituteBindings` middleware within the `$middlewarePriority` property of your application's HTTP kernel."
msgstr ""

#: docs/10.x/urls.md:block 69 (paragraph)
msgid "The `$middlewarePriority` property is defined in the base `Illuminate\\Foundation\\Http\\Kernel` class. You may copy its definition from that class and overwrite it in your application's HTTP kernel in order to modify it:"
msgstr ""

#: docs/10.x/urls.md:block 70 (code)
msgid ""
"/**\n"
" * The priority-sorted list of middleware.\n"
" *\n"
" * This forces non-global middleware to always be in the given order.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $middlewarePriority = [\n"
"    // ...\n"
"     \\App\\Http\\Middleware\\SetDefaultLocaleForUrls::class,\n"
"     \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n"
"     // ...\n"
"];\n"
msgstr ""

#: docs/8.x/urls.md:block 21 (code)
msgid ""
"Route::get('/post/{post}', function (Post $post) {\n"
"    //\n"
"})->name('post.show');\n"
msgstr ""

#: docs/8.x/urls.md:block 25 (code)
msgid ""
"Route::get('/post/{post}/comment/{comment}', function (Post $post, Comment $comment) {\n"
"    //\n"
"})->name('comment.show');\n"
"\n"
"echo route('comment.show', ['post' => 1, 'comment' => 3]);\n"
"\n"
"// http://example.com/post/1/comment/3\n"
msgstr ""

#: docs/8.x/urls.md:block 41 (paragraph)
msgid "To verify that an incoming request has a valid signature, you should call the `hasValidSignature` method on the incoming `Request`:"
msgstr ""

#: docs/8.x/urls.md:block 43 (paragraph)
msgid "Alternatively, you may assign the `Illuminate\\Routing\\Middleware\\ValidateSignature` [middleware](/docs/{{version}}/middleware) to the route. If it is not already present, you should assign this middleware a key in your HTTP kernel's `routeMiddleware` array:"
msgstr ""

#: docs/8.x/urls.md:block 44 (code)
msgid ""
"/**\n"
" * The application's route middleware.\n"
" *\n"
" * These middleware may be assigned to groups or used individually.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $routeMiddleware = [\n"
"    'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n"
"];\n"
msgstr ""

#: docs/8.x/urls.md:block 50 (code)
msgid ""
"use Illuminate\\Routing\\Exceptions\\InvalidSignatureException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (InvalidSignatureException $e) {\n"
"        return response()->view('error.link-expired', [], 403);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/urls.md:block 60 (code)
msgid ""
"Route::get('/{locale}/posts', function () {\n"
"    //\n"
"})->name('post.index');\n"
msgstr ""

#: docs/8.x/urls.md:block 62 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Support\\Facades\\URL;\n"
"\n"
"class SetDefaultLocaleForUrls\n"
"{\n"
"    /**\n"
"     * Handle the incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        URL::defaults(['locale' => $request->user()->locale]);\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/urls.md:block 45 (paragraph)
msgid "Instead of validating signed URLs using the incoming request instance, you may assign the `Illuminate\\Routing\\Middleware\\ValidateSignature` [middleware](/docs/{{version}}/middleware) to the route. If it is not already present, you should assign this middleware a key in your HTTP kernel's `routeMiddleware` array:"
msgstr ""
