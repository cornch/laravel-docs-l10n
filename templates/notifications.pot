#
msgid ""
msgstr ""

#: docs/10.x/notifications.md:block 1 (header)
msgid "Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Generating Notifications](#generating-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Sending Notifications](#sending-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Using The Notifiable Trait](#using-the-notifiable-trait)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Using The Notification Facade](#using-the-notification-facade)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Specifying Delivery Channels](#specifying-delivery-channels)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Queueing Notifications](#queueing-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[On-Demand Notifications](#on-demand-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Mail Notifications](#mail-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Mail Messages](#formatting-mail-messages)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Sender](#customizing-the-sender)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Recipient](#customizing-the-recipient)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Subject](#customizing-the-subject)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Mailer](#customizing-the-mailer)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Templates](#customizing-the-templates)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Attachments](#mail-attachments)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Adding Tags & Metadata](#adding-tags-metadata)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Using Mailables](#using-mailables)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Previewing Mail Notifications](#previewing-mail-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Markdown Mail Notifications](#markdown-mail-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Generating The Message](#generating-the-message)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Writing The Message](#writing-the-message)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Database Notifications](#database-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#database-prerequisites)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Database Notifications](#formatting-database-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Accessing The Notifications](#accessing-the-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Marking Notifications As Read](#marking-notifications-as-read)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Broadcast Notifications](#broadcast-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#broadcast-prerequisites)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Broadcast Notifications](#formatting-broadcast-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Listening For Notifications](#listening-for-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[SMS Notifications](#sms-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#sms-prerequisites)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Formatting SMS Notifications](#formatting-sms-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Unicode Content](#unicode-content)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Customizing The \"From\" Number](#customizing-the-from-number)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Adding A Client Reference](#adding-a-client-reference)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Routing SMS Notifications](#routing-sms-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Slack Notifications](#slack-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Prerequisites](#slack-prerequisites)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Slack Notifications](#formatting-slack-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Slack Interactivity](#slack-interactivity)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Routing Slack Notifications](#routing-slack-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Notifying External Slack Workspaces](#notifying-external-slack-workspaces)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Localizing Notifications](#localizing-notifications)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Testing](#testing)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Notification Events](#notification-events)"
msgstr ""

#: docs/10.x/notifications.md:block 2 (unordered list)
msgid "[Custom Channels](#custom-channels)"
msgstr ""

#: docs/10.x/notifications.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/notifications.md:block 5 (paragraph)
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notifications over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#: docs/10.x/notifications.md:block 6 (paragraph)
msgid "Typically, notifications should be short, informational messages that notify users of something that occurred in your application. For example, if you are writing a billing application, you might send an \"Invoice Paid\" notification to your users via the email and SMS channels."
msgstr ""

#: docs/10.x/notifications.md:block 8 (header)
msgid "Generating Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 9 (paragraph)
msgid "In Laravel, each notification is represented by a single class that is typically stored in the `app/Notifications` directory. Don't worry if you don't see this directory in your application - it will be created for you when you run the `make:notification` Artisan command:"
msgstr ""

#: docs/10.x/notifications.md:block 10 (code)
msgid "php artisan make:notification InvoicePaid\n"
msgstr ""

#: docs/10.x/notifications.md:block 11 (paragraph)
msgid "This command will place a fresh notification class in your `app/Notifications` directory. Each notification class contains a `via` method and a variable number of message building methods, such as `toMail` or `toDatabase`, that convert the notification to a message tailored for that particular channel."
msgstr ""

#: docs/10.x/notifications.md:block 13 (header)
msgid "Sending Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 15 (header)
msgid "Using The Notifiable Trait"
msgstr ""

#: docs/10.x/notifications.md:block 16 (paragraph)
msgid "Notifications may be sent in two ways: using the `notify` method of the `Notifiable` trait or using the `Notification` [facade](/docs/{{version}}/facades). The `Notifiable` trait is included on your application's `App\\Models\\User` model by default:"
msgstr ""

#: docs/10.x/notifications.md:block 17 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 18 (paragraph)
msgid "The `notify` method that is provided by this trait expects to receive a notification instance:"
msgstr ""

#: docs/10.x/notifications.md:block 19 (code)
msgid ""
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"$user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/10.x/notifications.md:block 20 (quote)
msgid "**Note** Remember, you may use the `Notifiable` trait on any of your models. You are not limited to only including it on your `User` model."
msgstr ""

#: docs/10.x/notifications.md:block 22 (header)
msgid "Using The Notification Facade"
msgstr ""

#: docs/10.x/notifications.md:block 23 (paragraph)
msgid "Alternatively, you may send notifications via the `Notification` [facade](/docs/{{version}}/facades). This approach is useful when you need to send a notification to multiple notifiable entities such as a collection of users. To send notifications using the facade, pass all of the notifiable entities and the notification instance to the `send` method:"
msgstr ""

#: docs/10.x/notifications.md:block 24 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Notification;\n"
"\n"
"Notification::send($users, new InvoicePaid($invoice));\n"
msgstr ""

#: docs/10.x/notifications.md:block 25 (paragraph)
msgid "You can also send notifications immediately using the `sendNow` method. This method will send the notification immediately even if the notification implements the `ShouldQueue` interface:"
msgstr ""

#: docs/10.x/notifications.md:block 26 (code)
msgid "Notification::sendNow($developers, new DeploymentCompleted($deployment));\n"
msgstr ""

#: docs/10.x/notifications.md:block 28 (header)
msgid "Specifying Delivery Channels"
msgstr ""

#: docs/10.x/notifications.md:block 29 (paragraph)
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `vonage`, and `slack` channels."
msgstr ""

#: docs/10.x/notifications.md:block 30 (quote)
msgid "**Note** If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven [Laravel Notification Channels website](http://laravel-notification-channels.com)."
msgstr ""

#: docs/10.x/notifications.md:block 31 (paragraph)
msgid "The `via` method receives a `$notifiable` instance, which will be an instance of the class to which the notification is being sent. You may use `$notifiable` to determine which channels the notification should be delivered on:"
msgstr ""

#: docs/10.x/notifications.md:block 32 (code)
msgid ""
"/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function via(object $notifiable): array\n"
"{\n"
"    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 34 (header)
msgid "Queueing Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 35 (quote)
msgid "**Warning** Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues#running-the-queue-worker)."
msgstr ""

#: docs/10.x/notifications.md:block 36 (paragraph)
msgid "Sending notifications can take time, especially if the channel needs to make an external API call to deliver the notification. To speed up your application's response time, let your notification be queued by adding the `ShouldQueue` interface and `Queueable` trait to your class. The interface and trait are already imported for all notifications generated using the `make:notification` command, so you may immediately add them to your notification class:"
msgstr ""

#: docs/10.x/notifications.md:block 37 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 38 (paragraph)
msgid "Once the `ShouldQueue` interface has been added to your notification, you may send the notification like normal. Laravel will detect the `ShouldQueue` interface on the class and automatically queue the delivery of the notification:"
msgstr ""

#: docs/10.x/notifications.md:block 39 (code)
msgid "$user->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/10.x/notifications.md:block 40 (paragraph)
msgid "When queueing notifications, a queued job will be created for each recipient and channel combination. For example, six jobs will be dispatched to the queue if your notification has three recipients and two channels."
msgstr ""

#: docs/10.x/notifications.md:block 42 (header)
msgid "Delaying Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 43 (paragraph)
msgid "If you would like to delay the delivery of the notification, you may chain the `delay` method onto your notification instantiation:"
msgstr ""

#: docs/10.x/notifications.md:block 44 (code)
msgid ""
"$delay = now()->addMinutes(10);\n"
"\n"
"$user->notify((new InvoicePaid($invoice))->delay($delay));\n"
msgstr ""

#: docs/10.x/notifications.md:block 46 (header)
msgid "Delaying Notifications Per Channel"
msgstr ""

#: docs/10.x/notifications.md:block 47 (paragraph)
msgid "You may pass an array to the `delay` method to specify the delay amount for specific channels:"
msgstr ""

#: docs/10.x/notifications.md:block 48 (code)
msgid ""
"$user->notify((new InvoicePaid($invoice))->delay([\n"
"    'mail' => now()->addMinutes(5),\n"
"    'sms' => now()->addMinutes(10),\n"
"]));\n"
msgstr ""

#: docs/10.x/notifications.md:block 49 (paragraph)
msgid "Alternatively, you may define a `withDelay` method on the notification class itself. The `withDelay` method should return an array of channel names and delay values:"
msgstr ""

#: docs/10.x/notifications.md:block 50 (code)
msgid ""
"/**\n"
" * Determine the notification's delivery delay.\n"
" *\n"
" * @return array<string, \\Illuminate\\Support\\Carbon>\n"
" */\n"
"public function withDelay(object $notifiable): array\n"
"{\n"
"    return [\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 52 (header)
msgid "Customizing The Notification Queue Connection"
msgstr ""

#: docs/10.x/notifications.md:block 53 (paragraph)
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may call the `onConnection` method from your notification's constructor:"
msgstr ""

#: docs/10.x/notifications.md:block 54 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->onConnection('redis');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 55 (paragraph)
msgid "Or, if you would like to specify a specific queue connection that should be used for each notification channel supported by the notification, you may define a `viaConnections` method on your notification. This method should return an array of channel name / queue connection name pairs:"
msgstr ""

#: docs/10.x/notifications.md:block 56 (code)
msgid ""
"/**\n"
" * Determine which connections should be used for each notification channel.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function viaConnections(): array\n"
"{\n"
"    return [\n"
"        'mail' => 'redis',\n"
"        'database' => 'sync',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 58 (header)
msgid "Customizing Notification Channel Queues"
msgstr ""

#: docs/10.x/notifications.md:block 59 (paragraph)
msgid "If you would like to specify a specific queue that should be used for each notification channel supported by the notification, you may define a `viaQueues` method on your notification. This method should return an array of channel name / queue name pairs:"
msgstr ""

#: docs/10.x/notifications.md:block 60 (code)
msgid ""
"/**\n"
" * Determine which queues should be used for each notification channel.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function viaQueues(): array\n"
"{\n"
"    return [\n"
"        'mail' => 'mail-queue',\n"
"        'slack' => 'slack-queue',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 62 (header)
msgid "Queued Notifications & Database Transactions"
msgstr ""

#: docs/10.x/notifications.md:block 63 (paragraph)
msgid "When queued notifications are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your notification depends on these models, unexpected errors can occur when the job that sends the queued notification is processed."
msgstr ""

#: docs/10.x/notifications.md:block 64 (paragraph)
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued notification should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the notification:"
msgstr ""

#: docs/10.x/notifications.md:block 65 (code)
msgid ""
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"$user->notify((new InvoicePaid($invoice))->afterCommit());\n"
msgstr ""

#: docs/10.x/notifications.md:block 66 (paragraph)
msgid "Alternatively, you may call the `afterCommit` method from your notification's constructor:"
msgstr ""

#: docs/10.x/notifications.md:block 67 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 68 (quote)
msgid "**Note** To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/10.x/notifications.md:block 70 (header)
msgid "Determining If A Queued Notification Should Be Sent"
msgstr ""

#: docs/10.x/notifications.md:block 71 (paragraph)
msgid "After a queued notification has been dispatched for the queue for background processing, it will typically be accepted by a queue worker and sent to its intended recipient."
msgstr ""

#: docs/10.x/notifications.md:block 72 (paragraph)
msgid "However, if you would like to make the final determination on whether the queued notification should be sent after it is being processed by a queue worker, you may define a `shouldSend` method on the notification class. If this method returns `false`, the notification will not be sent:"
msgstr ""

#: docs/10.x/notifications.md:block 73 (code)
msgid ""
"/**\n"
" * Determine if the notification should be sent.\n"
" */\n"
"public function shouldSend(object $notifiable, string $channel): bool\n"
"{\n"
"    return $this->invoice->isPaid();\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 75 (header)
msgid "On-Demand Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 76 (paragraph)
msgid "Sometimes you may need to send a notification to someone who is not stored as a \"user\" of your application. Using the `Notification` facade's `route` method, you may specify ad-hoc notification routing information before sending the notification:"
msgstr ""

#: docs/10.x/notifications.md:block 77 (code)
msgid ""
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"\n"
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', '#slack-channel')\n"
"            ->route('broadcast', [new Channel('channel-name')])\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/10.x/notifications.md:block 78 (paragraph)
msgid "If you would like to provide the recipient's name when sending an on-demand notification to the `mail` route, you may provide an array that contains the email address as the key and the name as the value of the first element in the array:"
msgstr ""

#: docs/10.x/notifications.md:block 79 (code)
msgid ""
"Notification::route('mail', [\n"
"    'barrett@example.com' => 'Barrett Blair',\n"
"])->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/10.x/notifications.md:block 81 (header)
msgid "Mail Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 83 (header)
msgid "Formatting Mail Messages"
msgstr ""

#: docs/10.x/notifications.md:block 84 (paragraph)
msgid "If a notification supports being sent as an email, you should define a `toMail` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\MailMessage` instance."
msgstr ""

#: docs/10.x/notifications.md:block 85 (paragraph)
msgid "The `MailMessage` class contains a few simple methods to help you build transactional email messages. Mail messages may contain lines of text as well as a \"call to action\". Let's take a look at an example `toMail` method:"
msgstr ""

#: docs/10.x/notifications.md:block 86 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->lineIf($this->amount > 0, \"Amount paid: {$this->amount}\")\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 87 (quote)
msgid "**Note** Note we are using `$this->invoice->id` in our `toMail` method. You may pass any data your notification needs to generate its message into the notification's constructor."
msgstr ""

#: docs/10.x/notifications.md:block 88 (paragraph)
msgid "In this example, we register a greeting, a line of text, a call to action, and then another line of text. These methods provided by the `MailMessage` object make it simple and fast to format small transactional emails. The mail channel will then translate the message components into a beautiful, responsive HTML email template with a plain-text counterpart. Here is an example of an email generated by the `mail` channel:"
msgstr ""

#: docs/10.x/notifications.md:block 90 (quote)
msgid "**Note** When sending mail notifications, be sure to set the `name` configuration option in your `config/app.php` configuration file. This value will be used in the header and footer of your mail notification messages."
msgstr ""

#: docs/10.x/notifications.md:block 92 (header)
msgid "Error Messages"
msgstr ""

#: docs/10.x/notifications.md:block 93 (paragraph)
msgid "Some notifications inform users of errors, such as a failed invoice payment. You may indicate that a mail message is regarding an error by calling the `error` method when building your message. When using the `error` method on a mail message, the call to action button will be red instead of black:"
msgstr ""

#: docs/10.x/notifications.md:block 94 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Invoice Payment Failed')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 96 (header)
msgid "Other Mail Notification Formatting Options"
msgstr ""

#: docs/10.x/notifications.md:block 97 (paragraph)
msgid "Instead of defining the \"lines\" of text in the notification class, you may use the `view` method to specify a custom template that should be used to render the notification email:"
msgstr ""

#: docs/10.x/notifications.md:block 98 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        'emails.name', ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 99 (paragraph)
msgid "You may specify a plain-text view for the mail message by passing the view name as the second element of an array that is given to the `view` method:"
msgstr ""

#: docs/10.x/notifications.md:block 100 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        ['emails.name.html', 'emails.name.plain'],\n"
"        ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 102 (header)
msgid "Customizing The Sender"
msgstr ""

#: docs/10.x/notifications.md:block 103 (paragraph)
msgid "By default, the email's sender / from address is defined in the `config/mail.php` configuration file. However, you may specify the from address for a specific notification using the `from` method:"
msgstr ""

#: docs/10.x/notifications.md:block 104 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->from('barrett@example.com', 'Barrett Blair')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 106 (header)
msgid "Customizing The Recipient"
msgstr ""

#: docs/10.x/notifications.md:block 107 (paragraph)
msgid "When sending notifications via the `mail` channel, the notification system will automatically look for an `email` property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a `routeNotificationForMail` method on the notifiable entity:"
msgstr ""

#: docs/10.x/notifications.md:block 108 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the mail channel.\n"
"     *\n"
"     * @return  array<string, string>|string\n"
"     */\n"
"    public function routeNotificationForMail(Notification $notification): array|string\n"
"    {\n"
"        // Return email address only...\n"
"        return $this->email_address;\n"
"\n"
"        // Return email address and name...\n"
"        return [$this->email_address => $this->name];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 110 (header)
msgid "Customizing The Subject"
msgstr ""

#: docs/10.x/notifications.md:block 111 (paragraph)
msgid "By default, the email's subject is the class name of the notification formatted to \"Title Case\". So, if your notification class is named `InvoicePaid`, the email's subject will be `Invoice Paid`. If you would like to specify a different subject for the message, you may call the `subject` method when building your message:"
msgstr ""

#: docs/10.x/notifications.md:block 112 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 114 (header)
msgid "Customizing The Mailer"
msgstr ""

#: docs/10.x/notifications.md:block 115 (paragraph)
msgid "By default, the email notification will be sent using the default mailer defined in the `config/mail.php` configuration file. However, you may specify a different mailer at runtime by calling the `mailer` method when building your message:"
msgstr ""

#: docs/10.x/notifications.md:block 116 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->mailer('postmark')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 118 (header)
msgid "Customizing The Templates"
msgstr ""

#: docs/10.x/notifications.md:block 119 (paragraph)
msgid "You can modify the HTML and plain-text template used by mail notifications by publishing the notification package's resources. After running this command, the mail notification templates will be located in the `resources/views/vendor/notifications` directory:"
msgstr ""

#: docs/10.x/notifications.md:block 120 (code)
msgid "php artisan vendor:publish --tag=laravel-notifications\n"
msgstr ""

#: docs/10.x/notifications.md:block 122 (header)
msgid "Attachments"
msgstr ""

#: docs/10.x/notifications.md:block 123 (paragraph)
msgid "To add attachments to an email notification, use the `attach` method while building your message. The `attach` method accepts the absolute path to the file as its first argument:"
msgstr ""

#: docs/10.x/notifications.md:block 124 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 125 (quote)
msgid "**Note** The `attach` method offered by notification mail messages also accepts [attachable objects](/docs/{{version}}/mail#attachable-objects). Please consult the comprehensive [attachable object documentation](/docs/{{version}}/mail#attachable-objects) to learn more."
msgstr ""

#: docs/10.x/notifications.md:block 126 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: docs/10.x/notifications.md:block 127 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 128 (paragraph)
msgid "Unlike attaching files in mailable objects, you may not attach a file directly from a storage disk using `attachFromStorage`. You should rather use the `attach` method with an absolute path to the file on the storage disk. Alternatively, you could return a [mailable](/docs/{{version}}/mail#generating-mailables) from the `toMail` method:"
msgstr ""

#: docs/10.x/notifications.md:block 129 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email)\n"
"                ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 130 (paragraph)
msgid "When necessary, multiple files may be attached to a message using the `attachMany` method:"
msgstr ""

#: docs/10.x/notifications.md:block 131 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachMany([\n"
"                    '/path/to/forge.svg',\n"
"                    '/path/to/vapor.svg' => [\n"
"                        'as' => 'Logo.svg',\n"
"                        'mime' => 'image/svg+xml',\n"
"                    ],\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 133 (header)
msgid "Raw Data Attachments"
msgstr ""

#: docs/10.x/notifications.md:block 134 (paragraph)
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. When calling the `attachData` method, you should provide the filename that should be assigned to the attachment:"
msgstr ""

#: docs/10.x/notifications.md:block 135 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 137 (header)
msgid "Adding Tags & Metadata"
msgstr ""

#: docs/10.x/notifications.md:block 138 (paragraph)
msgid "Some third-party email providers such as Mailgun and Postmark support message \"tags\" and \"metadata\", which may be used to group and track emails sent by your application. You may add tags and metadata to an email message via the `tag` and `metadata` methods:"
msgstr ""

#: docs/10.x/notifications.md:block 139 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Comment Upvoted!')\n"
"                ->tag('upvote')\n"
"                ->metadata('comment_id', $this->comment->id);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 140 (paragraph)
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) and [metadata](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: docs/10.x/notifications.md:block 141 (paragraph)
msgid "If your application is using Amazon SES to send emails, you should use the `metadata` method to attach [SES \"tags\"](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html) to the message."
msgstr ""

#: docs/10.x/notifications.md:block 143 (header)
msgid "Customizing The Symfony Message"
msgstr ""

#: docs/10.x/notifications.md:block 144 (paragraph)
msgid "The `withSymfonyMessage` method of the `MailMessage` class allows you to register a closure which will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: docs/10.x/notifications.md:block 145 (code)
msgid ""
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->withSymfonyMessage(function (Email $message) {\n"
"                    $message->getHeaders()->addTextHeader(\n"
"                        'Custom-Header', 'Header Value'\n"
"                    );\n"
"                });\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 147 (header)
msgid "Using Mailables"
msgstr ""

#: docs/10.x/notifications.md:block 148 (paragraph)
msgid "If needed, you may return a full [mailable object](/docs/{{version}}/mail) from your notification's `toMail` method. When returning a `Mailable` instead of a `MailMessage`, you will need to specify the message recipient using the mailable object's `to` method:"
msgstr ""

#: docs/10.x/notifications.md:block 149 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 151 (header)
msgid "Mailables & On-Demand Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 152 (paragraph)
msgid "If you are sending an [on-demand notification](#on-demand-notifications), the `$notifiable` instance given to the `toMail` method will be an instance of `Illuminate\\Notifications\\AnonymousNotifiable`, which offers a `routeNotificationFor` method that may be used to retrieve the email address the on-demand notification should be sent to:"
msgstr ""

#: docs/10.x/notifications.md:block 153 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Notifications\\AnonymousNotifiable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    $address = $notifiable instanceof AnonymousNotifiable\n"
"            ? $notifiable->routeNotificationFor('mail')\n"
"            : $notifiable->email;\n"
"\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($address);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 155 (header)
msgid "Previewing Mail Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 156 (paragraph)
msgid "When designing a mail notification template, it is convenient to quickly preview the rendered mail message in your browser like a typical Blade template. For this reason, Laravel allows you to return any mail message generated by a mail notification directly from a route closure or controller. When a `MailMessage` is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: docs/10.x/notifications.md:block 157 (code)
msgid ""
"use App\\Models\\Invoice;\n"
"use App\\Notifications\\InvoicePaid;\n"
"\n"
"Route::get('/notification', function () {\n"
"    $invoice = Invoice::find(1);\n"
"\n"
"    return (new InvoicePaid($invoice))\n"
"                ->toMail($invoice->user);\n"
"});\n"
msgstr ""

#: docs/10.x/notifications.md:block 159 (header)
msgid "Markdown Mail Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 160 (paragraph)
msgid "Markdown mail notifications allow you to take advantage of the pre-built templates of mail notifications, while giving you more freedom to write longer, customized messages. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: docs/10.x/notifications.md:block 162 (header)
msgid "Generating The Message"
msgstr ""

#: docs/10.x/notifications.md:block 163 (paragraph)
msgid "To generate a notification with a corresponding Markdown template, you may use the `--markdown` option of the `make:notification` Artisan command:"
msgstr ""

#: docs/10.x/notifications.md:block 164 (code)
msgid "php artisan make:notification InvoicePaid --markdown=mail.invoice.paid\n"
msgstr ""

#: docs/10.x/notifications.md:block 165 (paragraph)
msgid "Like all other mail notifications, notifications that use Markdown templates should define a `toMail` method on their notification class. However, instead of using the `line` and `action` methods to construct the notification, use the `markdown` method to specify the name of the Markdown template that should be used. An array of data you wish to make available to the template may be passed as the method's second argument:"
msgstr ""

#: docs/10.x/notifications.md:block 166 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 168 (header)
msgid "Writing The Message"
msgstr ""

#: docs/10.x/notifications.md:block 169 (paragraph)
msgid "Markdown mail notifications use a combination of Blade components and Markdown syntax which allow you to easily construct notifications while leveraging Laravel's pre-crafted notification components:"
msgstr ""

#: docs/10.x/notifications.md:block 170 (code)
msgid ""
"<x-mail::message>\n"
"# Invoice Paid\n"
"\n"
"Your invoice has been paid!\n"
"\n"
"<x-mail::button :url=\"$url\">\n"
"View Invoice\n"
"</x-mail::button>\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"</x-mail::message>\n"
msgstr ""

#: docs/10.x/notifications.md:block 172 (header)
msgid "Button Component"
msgstr ""

#: docs/10.x/notifications.md:block 173 (paragraph)
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `green`, and `red`. You may add as many button components to a notification as you wish:"
msgstr ""

#: docs/10.x/notifications.md:block 174 (code)
msgid ""
"<x-mail::button :url=\"$url\" color=\"green\">\n"
"View Invoice\n"
"</x-mail::button>\n"
msgstr ""

#: docs/10.x/notifications.md:block 176 (header)
msgid "Panel Component"
msgstr ""

#: docs/10.x/notifications.md:block 177 (paragraph)
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the notification. This allows you to draw attention to a given block of text:"
msgstr ""

#: docs/10.x/notifications.md:block 178 (code)
msgid ""
"<x-mail::panel>\n"
"This is the panel content.\n"
"</x-mail::panel>\n"
msgstr ""

#: docs/10.x/notifications.md:block 180 (header)
msgid "Table Component"
msgstr ""

#: docs/10.x/notifications.md:block 181 (paragraph)
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: docs/10.x/notifications.md:block 182 (code)
msgid ""
"<x-mail::table>\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"</x-mail::table>\n"
msgstr ""

#: docs/10.x/notifications.md:block 184 (header)
msgid "Customizing The Components"
msgstr ""

#: docs/10.x/notifications.md:block 185 (paragraph)
msgid "You may export all of the Markdown notification components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: docs/10.x/notifications.md:block 186 (code)
msgid "php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#: docs/10.x/notifications.md:block 187 (paragraph)
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: docs/10.x/notifications.md:block 189 (header)
msgid "Customizing The CSS"
msgstr ""

#: docs/10.x/notifications.md:block 190 (paragraph)
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown notifications."
msgstr ""

#: docs/10.x/notifications.md:block 191 (paragraph)
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of the `mail` configuration file to match the name of your new theme."
msgstr ""

#: docs/10.x/notifications.md:block 192 (paragraph)
msgid "To customize the theme for an individual notification, you may call the `theme` method while building the notification's mail message. The `theme` method accepts the name of the theme that should be used when sending the notification:"
msgstr ""

#: docs/10.x/notifications.md:block 193 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->theme('invoice')\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 195 (header)
msgid "Database Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 197 (header)
msgid "Prerequisites"
msgstr ""

#: docs/10.x/notifications.md:block 198 (paragraph)
msgid "The `database` notification channel stores the notification information in a database table. This table will contain information such as the notification type as well as a JSON data structure that describes the notification."
msgstr ""

#: docs/10.x/notifications.md:block 199 (paragraph)
msgid "You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the `notifications:table` command to generate a [migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#: docs/10.x/notifications.md:block 200 (code)
msgid ""
"php artisan notifications:table\n"
"\n"
"php artisan migrate\n"
msgstr ""

#: docs/10.x/notifications.md:block 201 (quote)
msgid "**Note** If your notifiable models are using [UUID or ULID primary keys](/docs/{{version}}/eloquent#uuid-and-ulid-keys), you should replace the `morphs` method with [`uuidMorphs`](docs/{{version}}/migrations#column-method-uuidMorphs) or [`ulidMorphs`](/docs/{{version}}/migrations#column-method-ulidMorphs) in the notification table migration."
msgstr ""

#: docs/10.x/notifications.md:block 203 (header)
msgid "Formatting Database Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 204 (paragraph)
msgid "If a notification supports being stored in a database table, you should define a `toDatabase` or `toArray` method on the notification class. This method will receive a `$notifiable` entity and should return a plain PHP array. The returned array will be encoded as JSON and stored in the `data` column of your `notifications` table. Let's take a look at an example `toArray` method:"
msgstr ""

#: docs/10.x/notifications.md:block 205 (code)
msgid ""
"/**\n"
" * Get the array representation of the notification.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function toArray(object $notifiable): array\n"
"{\n"
"    return [\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 207 (header)
msgid "`toDatabase` Vs. `toArray`"
msgstr ""

#: docs/10.x/notifications.md:block 208 (paragraph)
msgid "The `toArray` method is also used by the `broadcast` channel to determine which data to broadcast to your JavaScript powered frontend. If you would like to have two different array representations for the `database` and `broadcast` channels, you should define a `toDatabase` method instead of a `toArray` method."
msgstr ""

#: docs/10.x/notifications.md:block 210 (header)
msgid "Accessing The Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 211 (paragraph)
msgid "Once notifications are stored in the database, you need a convenient way to access them from your notifiable entities. The `Illuminate\\Notifications\\Notifiable` trait, which is included on Laravel's default `App\\Models\\User` model, includes a `notifications` [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that returns the notifications for the entity. To fetch notifications, you may access this method like any other Eloquent relationship. By default, notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: docs/10.x/notifications.md:block 212 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->notifications as $notification) {\n"
"    echo $notification->type;\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 213 (paragraph)
msgid "If you want to retrieve only the \"unread\" notifications, you may use the `unreadNotifications` relationship. Again, these notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: docs/10.x/notifications.md:block 214 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    echo $notification->type;\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 215 (quote)
msgid "**Note** To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller's URL from your JavaScript client."
msgstr ""

#: docs/10.x/notifications.md:block 217 (header)
msgid "Marking Notifications As Read"
msgstr ""

#: docs/10.x/notifications.md:block 218 (paragraph)
msgid "Typically, you will want to mark a notification as \"read\" when a user views it. The `Illuminate\\Notifications\\Notifiable` trait provides a `markAsRead` method, which updates the `read_at` column on the notification's database record:"
msgstr ""

#: docs/10.x/notifications.md:block 219 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    $notification->markAsRead();\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 220 (paragraph)
msgid "However, instead of looping through each notification, you may use the `markAsRead` method directly on a collection of notifications:"
msgstr ""

#: docs/10.x/notifications.md:block 221 (code)
msgid "$user->unreadNotifications->markAsRead();\n"
msgstr ""

#: docs/10.x/notifications.md:block 222 (paragraph)
msgid "You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:"
msgstr ""

#: docs/10.x/notifications.md:block 223 (code)
msgid ""
"$user = App\\Models\\User::find(1);\n"
"\n"
"$user->unreadNotifications()->update(['read_at' => now()]);\n"
msgstr ""

#: docs/10.x/notifications.md:block 224 (paragraph)
msgid "You may `delete` the notifications to remove them from the table entirely:"
msgstr ""

#: docs/10.x/notifications.md:block 225 (code)
msgid "$user->notifications()->delete();\n"
msgstr ""

#: docs/10.x/notifications.md:block 227 (header)
msgid "Broadcast Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 230 (paragraph)
msgid "Before broadcasting notifications, you should configure and be familiar with Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services. Event broadcasting provides a way to react to server-side Laravel events from your JavaScript powered frontend."
msgstr ""

#: docs/10.x/notifications.md:block 232 (header)
msgid "Formatting Broadcast Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 233 (paragraph)
msgid "The `broadcast` channel broadcasts notifications using Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services, allowing your JavaScript powered frontend to catch notifications in realtime. If a notification supports broadcasting, you can define a `toBroadcast` method on the notification class. This method will receive a `$notifiable` entity and should return a `BroadcastMessage` instance. If the `toBroadcast` method does not exist, the `toArray` method will be used to gather the data that should be broadcast. The returned data will be encoded as JSON and broadcast to your JavaScript powered frontend. Let's take a look at an example `toBroadcast` method:"
msgstr ""

#: docs/10.x/notifications.md:block 234 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
"\n"
"/**\n"
" * Get the broadcastable representation of the notification.\n"
" */\n"
"public function toBroadcast(object $notifiable): BroadcastMessage\n"
"{\n"
"    return new BroadcastMessage([\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 236 (header)
msgid "Broadcast Queue Configuration"
msgstr ""

#: docs/10.x/notifications.md:block 237 (paragraph)
msgid "All broadcast notifications are queued for broadcasting. If you would like to configure the queue connection or queue name that is used to queue the broadcast operation, you may use the `onConnection` and `onQueue` methods of the `BroadcastMessage`:"
msgstr ""

#: docs/10.x/notifications.md:block 238 (code)
msgid ""
"return (new BroadcastMessage($data))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('broadcasts');\n"
msgstr ""

#: docs/10.x/notifications.md:block 240 (header)
msgid "Customizing The Notification Type"
msgstr ""

#: docs/10.x/notifications.md:block 241 (paragraph)
msgid "In addition to the data you specify, all broadcast notifications also have a `type` field containing the full class name of the notification. If you would like to customize the notification `type`, you may define a `broadcastType` method on the notification class:"
msgstr ""

#: docs/10.x/notifications.md:block 242 (code)
msgid ""
"/**\n"
" * Get the type of the notification being broadcast.\n"
" */\n"
"public function broadcastType(): string\n"
"{\n"
"    return 'broadcast.message';\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 244 (header)
msgid "Listening For Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 245 (paragraph)
msgid "Notifications will broadcast on a private channel formatted using a `{notifiable}.{id}` convention. So, if you are sending a notification to an `App\\Models\\User` instance with an ID of `1`, the notification will be broadcast on the `App.Models.User.1` private channel. When using [Laravel Echo](/docs/{{version}}/broadcasting#client-side-installation), you may easily listen for notifications on a channel using the `notification` method:"
msgstr ""

#: docs/10.x/notifications.md:block 246 (code)
msgid ""
"Echo.private('App.Models.User.' + userId)\n"
"    .notification((notification) => {\n"
"        console.log(notification.type);\n"
"    });\n"
msgstr ""

#: docs/10.x/notifications.md:block 248 (header)
msgid "Customizing The Notification Channel"
msgstr ""

#: docs/10.x/notifications.md:block 249 (paragraph)
msgid "If you would like to customize which channel that an entity's broadcast notifications are broadcast on, you may define a `receivesBroadcastNotificationsOn` method on the notifiable entity:"
msgstr ""

#: docs/10.x/notifications.md:block 250 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The channels the user receives notification broadcasts on.\n"
"     */\n"
"    public function receivesBroadcastNotificationsOn(): string\n"
"    {\n"
"        return 'users.'.$this->id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 252 (header)
msgid "SMS Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 255 (paragraph)
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/vonage-notification-channel` and `guzzlehttp/guzzle` packages:"
msgstr ""

#: docs/10.x/notifications.md:block 256 (code)
msgid "composer require laravel/vonage-notification-channel guzzlehttp/guzzle\n"
msgstr ""

#: docs/10.x/notifications.md:block 257 (paragraph)
msgid "The package includes a [configuration file](https://github.com/laravel/vonage-notification-channel/blob/3.x/config/vonage.php). However, you are not required to export this configuration file to your own application. You can simply use the `VONAGE_KEY` and `VONAGE_SECRET` environment variables to define your Vonage public and secret keys."
msgstr ""

#: docs/10.x/notifications.md:block 258 (paragraph)
msgid "After defining your keys, you should set a `VONAGE_SMS_FROM` environment variable that defines the phone number that your SMS messages should be sent from by default. You may generate this phone number within the Vonage control panel:"
msgstr ""

#: docs/10.x/notifications.md:block 259 (code)
msgid "VONAGE_SMS_FROM=15556666666\n"
msgstr ""

#: docs/10.x/notifications.md:block 261 (header)
msgid "Formatting SMS Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 262 (paragraph)
msgid "If a notification supports being sent as an SMS, you should define a `toVonage` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\VonageMessage` instance:"
msgstr ""

#: docs/10.x/notifications.md:block 263 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\VonageMessage;\n"
"\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 265 (header)
msgid "Unicode Content"
msgstr ""

#: docs/10.x/notifications.md:block 266 (paragraph)
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `VonageMessage` instance:"
msgstr ""

#: docs/10.x/notifications.md:block 267 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\VonageMessage;\n"
"\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 269 (header)
msgid "Customizing The \"From\" Number"
msgstr ""

#: docs/10.x/notifications.md:block 270 (paragraph)
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified by your `VONAGE_SMS_FROM` environment variable, you may call the `from` method on a `VonageMessage` instance:"
msgstr ""

#: docs/10.x/notifications.md:block 271 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\VonageMessage;\n"
"\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 273 (header)
msgid "Adding a Client Reference"
msgstr ""

#: docs/10.x/notifications.md:block 274 (paragraph)
msgid "If you would like to keep track of costs per user, team, or client, you may add a \"client reference\" to the notification. Vonage will allow you to generate reports using this client reference so that you can better understand a particular customer's SMS usage. The client reference can be any string up to 40 characters:"
msgstr ""

#: docs/10.x/notifications.md:block 275 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\VonageMessage;\n"
"\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 277 (header)
msgid "Routing SMS Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 278 (paragraph)
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForVonage` method on your notifiable entity:"
msgstr ""

#: docs/10.x/notifications.md:block 279 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Vonage channel.\n"
"     */\n"
"    public function routeNotificationForVonage(Notification $notification): string\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 281 (header)
msgid "Slack Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 284 (paragraph)
msgid "Before sending Slack notifications, you should install the Slack notification channel via Composer:"
msgstr ""

#: docs/10.x/notifications.md:block 285 (code)
msgid "composer require laravel/slack-notification-channel\n"
msgstr ""

#: docs/10.x/notifications.md:block 286 (paragraph)
msgid "Additionally, you must create a [Slack App](https://api.slack.com/apps?new_app=1) for your Slack workspace."
msgstr ""

#: docs/10.x/notifications.md:block 287 (paragraph)
msgid "If you only need to send notifications to the same Slack workspace that the App is created in, you should ensure that your App has the `chat:write`, `chat:write.public`, and `chat:write.customize` scopes. These scopes can be added from the \"OAuth & Permissions\" App management tab within Slack."
msgstr ""

#: docs/10.x/notifications.md:block 288 (paragraph)
msgid "Next, copy the App's \"Bot User OAuth Token\" and place it within a `slack` configuration array in your application's `services.php` configuration file. This token can be found on the \"OAuth & Permissions\" tab within Slack:"
msgstr ""

#: docs/10.x/notifications.md:block 289 (code)
msgid ""
"'slack' => [\n"
"    'notifications' => [\n"
"        'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),\n"
"        'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/notifications.md:block 291 (header)
msgid "App Distribution"
msgstr ""

#: docs/10.x/notifications.md:block 292 (paragraph)
msgid "If your application will be sending notifications to external Slack workspaces that are owned by your application's users, you will need to \"distribute\" your App via Slack. App distribution can be managed from your App's \"Manage Distribution\" tab within Slack. Once your App has been distributed, you may use [Socialite](/docs/{{version}}/socialite) to [obtain Slack Bot tokens](/docs/{{version}}/socialite#slack-bot-scopes) on behalf of your application's users."
msgstr ""

#: docs/10.x/notifications.md:block 294 (header)
msgid "Formatting Slack Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 295 (paragraph)
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Slack\\SlackMessage` instance. You can construct rich notifications using [Slack's Block Kit API](https://api.slack.com/block-kit). The following example may be previewed in [Slack's Block Kit builder](https://app.slack.com/block-kit-builder/T01KWS6K23Z#%7B%22blocks%22:%5B%7B%22type%22:%22header%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Invoice%20Paid%22%7D%7D,%7B%22type%22:%22context%22,%22elements%22:%5B%7B%22type%22:%22plain_text%22,%22text%22:%22Customer%20%231234%22%7D%5D%7D,%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22An%20invoice%20has%20been%20paid.%22%7D,%22fields%22:%5B%7B%22type%22:%22mrkdwn%22,%22text%22:%22*Invoice%20No:*%5Cn1000%22%7D,%7B%22type%22:%22mrkdwn%22,%22text%22:%22*Invoice%20Recipient:*%5Cntaylor@laravel.com%22%7D%5D%7D,%7B%22type%22:%22divider%22%7D,%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Congratulations!%22%7D%7D%5D%7D):"
msgstr ""

#: docs/10.x/notifications.md:block 296 (code)
msgid ""
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Composites\\ConfirmObject;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"                $block->field(\"*Invoice No:*\\n1000\")->markdown();\n"
"                $block->field(\"*Invoice Recipient:*\\ntaylor@laravel.com\")->markdown();\n"
"            })\n"
"            ->dividerBlock()\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('Congratulations!');\n"
"            });\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 298 (header)
msgid "Slack Interactivity"
msgstr ""

#: docs/10.x/notifications.md:block 299 (paragraph)
msgid "Slack's Block Kit notification system provides powerful features to [handle user interaction](https://api.slack.com/interactivity/handling). To utilize these features, your Slack App should have \"Interactivity\" enabled and a \"Request URL\" configured that points to a URL served by your application. These settings can be managed from the \"Interactivity & Shortcuts\" App management tab within Slack."
msgstr ""

#: docs/10.x/notifications.md:block 300 (paragraph)
msgid "In the following example, which utilizes the `actionsBlock` method, Slack will send a `POST` request to your \"Request URL\" with a payload containing the Slack user who clicked the button, the ID of the clicked button, and more. Your application can then determine the action to take based on the payload. You should also [verify the request](https://api.slack.com/authentication/verifying-requests-from-slack) was made by Slack:"
msgstr ""

#: docs/10.x/notifications.md:block 301 (code)
msgid ""
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ActionsBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"            })\n"
"            ->actionsBlock(function (ActionsBlock $block) {\n"
"                 // ID defaults to \"button_acknowledge_invoice\"...\n"
"                $block->button('Acknowledge Invoice')->primary();\n"
"\n"
"                // Manually configure the ID...\n"
"                $block->button('Deny')->danger()->id('deny_invoice');\n"
"            });\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 303 (header)
msgid "Confirmation Modals"
msgstr ""

#: docs/10.x/notifications.md:block 304 (paragraph)
msgid "If you would like users to be required to confirm an action before it is performed, you may invoke the `confirm` method when defining your button. The `confirm` method accepts a message and a closure which receives a `ConfirmObject` instance:"
msgstr ""

#: docs/10.x/notifications.md:block 305 (code)
msgid ""
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ActionsBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Composites\\ConfirmObject;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"            })\n"
"            ->actionsBlock(function (ActionsBlock $block) {\n"
"                $block->button('Acknowledge Invoice')\n"
"                    ->primary()\n"
"                    ->confirm(\n"
"                        'Acknowledge the payment and send a thank you email?',\n"
"                        function (ConfirmObject $dialog) {\n"
"                            $dialog->confirm('Yes');\n"
"                            $dialog->deny('No');\n"
"                        }\n"
"                    );\n"
"            });\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 307 (header)
msgid "Inspecting Slack Blocks"
msgstr ""

#: docs/10.x/notifications.md:block 308 (paragraph)
msgid "If you would like to quickly inspect the blocks you've been building, you can invoke the `dd` method on the `SlackMessage` instance. The `dd` method will generate and dump a URL to Slack's [Block Kit Builder](https://app.slack.com/block-kit-builder/), which displays a preview of the payload and notification in your browser. You may pass `true` to the `dd` method to dump the raw payload:"
msgstr ""

#: docs/10.x/notifications.md:block 309 (code)
msgid ""
"return (new SlackMessage)\n"
"        ->text('One of your invoices has been paid!')\n"
"        ->headerBlock('Invoice Paid')\n"
"        ->dd();\n"
msgstr ""

#: docs/10.x/notifications.md:block 311 (header)
msgid "Routing Slack Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 312 (paragraph)
msgid "To direct Slack notifications to the appropriate Slack team and channel, define a `routeNotificationForSlack` method on your notifiable model. This method can return one of three values:"
msgstr ""

#: docs/10.x/notifications.md:block 313 (unordered list)
msgid "`null` - which defers routing to the channel configured in the notification itself. You may use the `to` method when building your `SlackMessage` to configure the channel within the notification."
msgstr ""

#: docs/10.x/notifications.md:block 313 (unordered list)
msgid "A string specifying the Slack channel to send the notification to, e.g. `#support-channel`."
msgstr ""

#: docs/10.x/notifications.md:block 313 (unordered list)
msgid "A `SlackRoute` instance, which allows you to specify an OAuth token and channel name, e.g. `SlackRoute::make($this->slack_channel, $this->slack_token)`. This method should be used to send notifications to external workspaces."
msgstr ""

#: docs/10.x/notifications.md:block 314 (paragraph)
msgid "For instance, returning `#support-channel` from the `routeNotificationForSlack` method will send the notification to the `#support-channel` channel in the workspace associated with the Bot User OAuth token located in your application's `services.php` configuration file:"
msgstr ""

#: docs/10.x/notifications.md:block 315 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     */\n"
"    public function routeNotificationForSlack(Notification $notification): mixed\n"
"    {\n"
"        return '#support-channel';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 317 (header)
msgid "Notifying External Slack Workspaces"
msgstr ""

#: docs/10.x/notifications.md:block 318 (quote)
msgid "**Note** Before sending notifications to external Slack workspaces, your Slack App must be [distributed](#slack-app-distribution)."
msgstr ""

#: docs/10.x/notifications.md:block 319 (paragraph)
msgid "Of course, you will often want to send notifications to the Slack workspaces owned by your application's users. To do so, you will first need to obtain a Slack OAuth token for the user. Thankfully, [Laravel Socialite](/docs/{{version}}/socialite) includes a Slack driver that will allow you to easily authenticate your application's users with Slack and [obtain a bot token](/docs/{{version}}/socialite#slack-bot-scopes)."
msgstr ""

#: docs/10.x/notifications.md:block 320 (paragraph)
msgid "Once you have obtained the bot token and stored it within your application's database, you may utilize the `SlackRoute::make` method to route a notification to the user's workspace. In addition, your application will likely need to offer an opportunity for the user to specify which channel notifications should be sent to:"
msgstr ""

#: docs/10.x/notifications.md:block 321 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"use Illuminate\\Notifications\\Slack\\SlackRoute;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     */\n"
"    public function routeNotificationForSlack(Notification $notification): mixed\n"
"    {\n"
"        return SlackRoute::make($this->slack_channel, $this->slack_token);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 323 (header)
msgid "Localizing Notifications"
msgstr ""

#: docs/10.x/notifications.md:block 324 (paragraph)
msgid "Laravel allows you to send notifications in a locale other than the HTTP request's current locale, and will even remember this locale if the notification is queued."
msgstr ""

#: docs/10.x/notifications.md:block 325 (paragraph)
msgid "To accomplish this, the `Illuminate\\Notifications\\Notification` class offers a `locale` method to set the desired language. The application will change into this locale when the notification is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: docs/10.x/notifications.md:block 326 (code)
msgid "$user->notify((new InvoicePaid($invoice))->locale('es'));\n"
msgstr ""

#: docs/10.x/notifications.md:block 327 (paragraph)
msgid "Localization of multiple notifiable entries may also be achieved via the `Notification` facade:"
msgstr ""

#: docs/10.x/notifications.md:block 328 (code)
msgid ""
"Notification::locale('es')->send(\n"
"    $users, new InvoicePaid($invoice)\n"
");\n"
msgstr ""

#: docs/10.x/notifications.md:block 330 (header)
msgid "User Preferred Locales"
msgstr ""

#: docs/10.x/notifications.md:block 331 (paragraph)
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on your notifiable model, you may instruct Laravel to use this stored locale when sending a notification:"
msgstr ""

#: docs/10.x/notifications.md:block 332 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     */\n"
"    public function preferredLocale(): string\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 333 (paragraph)
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending notifications and mailables to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: docs/10.x/notifications.md:block 336 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/notifications.md:block 337 (paragraph)
msgid "You may use the `Notification` facade's `fake` method to prevent notifications from being sent. Typically, sending notifications is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given notification."
msgstr ""

#: docs/10.x/notifications.md:block 338 (paragraph)
msgid "After calling the `Notification` facade's `fake` method, you may then assert that notifications were instructed to be sent to users and even inspect the data the notifications received:"
msgstr ""

#: docs/10.x/notifications.md:block 339 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Notifications\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Notification::fake();\n"
"\n"
"        // Perform order shipping...\n"
"\n"
"        // Assert that no notifications were sent...\n"
"        Notification::assertNothingSent();\n"
"\n"
"        // Assert a notification was sent to the given users...\n"
"        Notification::assertSentTo(\n"
"            [$user], OrderShipped::class\n"
"        );\n"
"\n"
"        // Assert a notification was not sent...\n"
"        Notification::assertNotSentTo(\n"
"            [$user], AnotherNotification::class\n"
"        );\n"
"\n"
"        // Assert that a given number of notifications were sent...\n"
"        Notification::assertCount(3);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 340 (paragraph)
msgid "You may pass a closure to the `assertSentTo` or `assertNotSentTo` methods in order to assert that a notification was sent that passes a given \"truth test\". If at least one notification was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/10.x/notifications.md:block 341 (code)
msgid ""
"Notification::assertSentTo(\n"
"    $user,\n"
"    function (OrderShipped $notification, array $channels) use ($order) {\n"
"        return $notification->order->id === $order->id;\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/notifications.md:block 344 (paragraph)
msgid "If the code you are testing sends [on-demand notifications](#on-demand-notifications), you can test that the on-demand notification was sent via the `assertSentOnDemand` method:"
msgstr ""

#: docs/10.x/notifications.md:block 345 (code)
msgid "Notification::assertSentOnDemand(OrderShipped::class);\n"
msgstr ""

#: docs/10.x/notifications.md:block 346 (paragraph)
msgid "By passing a closure as the second argument to the `assertSentOnDemand` method, you may determine if an on-demand notification was sent to the correct \"route\" address:"
msgstr ""

#: docs/10.x/notifications.md:block 347 (code)
msgid ""
"Notification::assertSentOnDemand(\n"
"    OrderShipped::class,\n"
"    function (OrderShipped $notification, array $channels, object $notifiable) use ($user) {\n"
"        return $notifiable->routes['mail'] === $user->email;\n"
"    }\n"
");\n"
msgstr ""

#: docs/10.x/notifications.md:block 349 (header)
msgid "Notification Events"
msgstr ""

#: docs/10.x/notifications.md:block 351 (header)
msgid "Notification Sending Event"
msgstr ""

#: docs/10.x/notifications.md:block 352 (paragraph)
msgid "When a notification is sending, the `Illuminate\\Notifications\\Events\\NotificationSending` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your application's `EventServiceProvider`:"
msgstr ""

#: docs/10.x/notifications.md:block 353 (code)
msgid ""
"use App\\Listeners\\CheckNotificationStatus;\n"
"use Illuminate\\Notifications\\Events\\NotificationSending;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    NotificationSending::class => [\n"
"        CheckNotificationStatus::class,\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/10.x/notifications.md:block 354 (paragraph)
msgid "The notification will not be sent if an event listener for the `NotificationSending` event returns `false` from its `handle` method:"
msgstr ""

#: docs/10.x/notifications.md:block 355 (code)
msgid ""
"use Illuminate\\Notifications\\Events\\NotificationSending;\n"
"\n"
"/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSending $event): bool\n"
"{\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 356 (paragraph)
msgid "Within an event listener, you may access the `notifiable`, `notification`, and `channel` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: docs/10.x/notifications.md:block 357 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSending $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 359 (header)
msgid "Notification Sent Event"
msgstr ""

#: docs/10.x/notifications.md:block 360 (paragraph)
msgid "When a notification is sent, the `Illuminate\\Notifications\\Events\\NotificationSent` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your `EventServiceProvider`:"
msgstr ""

#: docs/10.x/notifications.md:block 361 (code)
msgid ""
"use App\\Listeners\\LogNotification;\n"
"use Illuminate\\Notifications\\Events\\NotificationSent;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    NotificationSent::class => [\n"
"        LogNotification::class,\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/10.x/notifications.md:block 362 (quote)
msgid "**Note** After registering listeners in your `EventServiceProvider`, use the `event:generate` Artisan command to quickly generate listener classes."
msgstr ""

#: docs/10.x/notifications.md:block 363 (paragraph)
msgid "Within an event listener, you may access the `notifiable`, `notification`, `channel`, and `response` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: docs/10.x/notifications.md:block 364 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSent $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 366 (header)
msgid "Custom Channels"
msgstr ""

#: docs/10.x/notifications.md:block 367 (paragraph)
msgid "Laravel ships with a handful of notification channels, but you may want to write your own drivers to deliver notifications via other channels. Laravel makes it simple. To get started, define a class that contains a `send` method. The method should receive two arguments: a `$notifiable` and a `$notification`."
msgstr ""

#: docs/10.x/notifications.md:block 368 (paragraph)
msgid "Within the `send` method, you may call methods on the notification to retrieve a message object understood by your channel and then send the notification to the `$notifiable` instance however you wish:"
msgstr ""

#: docs/10.x/notifications.md:block 369 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class VoiceChannel\n"
"{\n"
"    /**\n"
"     * Send the given notification.\n"
"     */\n"
"    public function send(object $notifiable, Notification $notification): void\n"
"    {\n"
"        $message = $notification->toVoice($notifiable);\n"
"\n"
"        // Send notification to the $notifiable instance...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/notifications.md:block 370 (paragraph)
msgid "Once your notification channel class has been defined, you may return the class name from the `via` method of any of your notifications. In this example, the `toVoice` method of your notification can return whatever object you choose to represent voice messages. For example, you might define your own `VoiceMessage` class to represent these messages:"
msgstr ""

#: docs/10.x/notifications.md:block 371 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use App\\Notifications\\Messages\\VoiceMessage;\n"
"use App\\Notifications\\VoiceChannel;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Get the notification channels.\n"
"     */\n"
"    public function via(object $notifiable): string\n"
"    {\n"
"        return VoiceChannel::class;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the voice representation of the notification.\n"
"     */\n"
"    public function toVoice(object $notifiable): VoiceMessage\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Formatting Shortcode Notifications](#formatting-shortcode-notifications)"
msgstr ""

#: docs/8.x/notifications.md:block 2 (unordered list)
msgid "[Slack Attachments](#slack-attachments)"
msgstr ""

#: docs/8.x/notifications.md:block 5 (paragraph)
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notification over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#: docs/8.x/notifications.md:block 20 (quote)
msgid "{tip} Remember, you may use the `Notifiable` trait on any of your models. You are not limited to only including it on your `User` model."
msgstr ""

#: docs/8.x/notifications.md:block 29 (paragraph)
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `nexmo`, and `slack` channels."
msgstr ""

#: docs/8.x/notifications.md:block 30 (quote)
msgid "{tip} If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven [Laravel Notification Channels website](http://laravel-notification-channels.com)."
msgstr ""

#: docs/8.x/notifications.md:block 32 (code)
msgid ""
"/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['nexmo'] : ['mail', 'database'];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 35 (quote)
msgid "{note} Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues)."
msgstr ""

#: docs/8.x/notifications.md:block 47 (paragraph)
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may define a `$connection` property on the notification class:"
msgstr ""

#: docs/8.x/notifications.md:block 48 (code)
msgid ""
"/**\n"
" * The name of the queue connection to use when queueing the notification.\n"
" *\n"
" * @var string\n"
" */\n"
"public $connection = 'redis';\n"
msgstr ""

#: docs/8.x/notifications.md:block 52 (code)
msgid ""
"/**\n"
" * Determine which queues should be used for each notification channel.\n"
" *\n"
" * @return array\n"
" */\n"
"public function viaQueues()\n"
"{\n"
"    return [\n"
"        'mail' => 'mail-queue',\n"
"        'slack' => 'slack-queue',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 59 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 60 (quote)
msgid "{tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/8.x/notifications.md:block 65 (code)
msgid ""
"/**\n"
" * Determine if the notification should be sent.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @param  string  $channel\n"
" * @return bool\n"
" */\n"
"public function shouldSend($notifiable, $channel)\n"
"{\n"
"    return $this->invoice->isPaid();\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 69 (code)
msgid ""
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('nexmo', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/8.x/notifications.md:block 78 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 79 (quote)
msgid "{tip} Note we are using `$this->invoice->id` in our `toMail` method. You may pass any data your notification needs to generate its message into the notification's constructor."
msgstr ""

#: docs/8.x/notifications.md:block 82 (quote)
msgid "{tip} When sending mail notifications, be sure to set the `name` configuration option in your `config/app.php` configuration file. This value will be used in the header and footer of your mail notification messages."
msgstr ""

#: docs/8.x/notifications.md:block 86 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        'emails.name', ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 88 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        ['emails.name.html', 'emails.name.plain'],\n"
"        ['invoice' => $this->invoice]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 92 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Message\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 96 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->from('barrett@example.com', 'Barrett Blair')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 100 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the mail channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return array|string\n"
"     */\n"
"    public function routeNotificationForMail($notification)\n"
"    {\n"
"        // Return email address only...\n"
"        return $this->email_address;\n"
"\n"
"        // Return email address and name...\n"
"        return [$this->email_address => $this->name];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 104 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 108 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->mailer('postmark')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 116 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 118 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 120 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email)\n"
"                ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 124 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 128 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 132 (code)
msgid ""
"use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Notifications\\AnonymousNotifiable;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $address = $notifiable instanceof AnonymousNotifiable\n"
"            ? $notifiable->routeNotificationFor('mail')\n"
"            : $notifiable->email;\n"
"\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($address);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 145 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 149 (code)
msgid ""
"@component('mail::message')\n"
"# Invoice Paid\n"
"\n"
"Your invoice has been paid!\n"
"\n"
"@component('mail::button', ['url' => $url])\n"
"View Invoice\n"
"@endcomponent\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 153 (code)
msgid ""
"@component('mail::button', ['url' => $url, 'color' => 'green'])\n"
"View Invoice\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 157 (code)
msgid ""
"@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 161 (code)
msgid ""
"@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/notifications.md:block 172 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->theme('invoice')\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 183 (code)
msgid ""
"/**\n"
" * Get the array representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toArray($notifiable)\n"
"{\n"
"    return [\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 193 (quote)
msgid "{tip} To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller's URL from your JavaScript client."
msgstr ""

#: docs/8.x/notifications.md:block 212 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
"\n"
"/**\n"
" * Get the broadcastable representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return BroadcastMessage\n"
" */\n"
"public function toBroadcast($notifiable)\n"
"{\n"
"    return new BroadcastMessage([\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 220 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n"
"\n"
"/**\n"
" * Get the type of the notification being broadcast.\n"
" *\n"
" * @return string\n"
" */\n"
"public function broadcastType()\n"
"{\n"
"    return 'broadcast.message';\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 228 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * The channels the user receives notification broadcasts on.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function receivesBroadcastNotificationsOn()\n"
"    {\n"
"        return 'users.'.$this->id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 233 (paragraph)
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/nexmo-notification-channel` and `nexmo/laravel` Composer packages"
msgstr ""

#: docs/8.x/notifications.md:block 234 (code)
msgid "composer require laravel/nexmo-notification-channel nexmo/laravel\n"
msgstr ""

#: docs/8.x/notifications.md:block 235 (paragraph)
msgid "The `nexmo/laravel` package includes [its own configuration file](https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php). However, you are not required to export this configuration file to your own application. You can simply use the `NEXMO_KEY` and `NEXMO_SECRET` environment variables to set your Vonage public and secret key."
msgstr ""

#: docs/8.x/notifications.md:block 236 (paragraph)
msgid "Next, you will need to add a `nexmo` configuration entry to your `config/services.php` configuration file. You may copy the example configuration below to get started:"
msgstr ""

#: docs/8.x/notifications.md:block 237 (code)
msgid ""
"'nexmo' => [\n"
"    'sms_from' => '15556666666',\n"
"],\n"
msgstr ""

#: docs/8.x/notifications.md:block 238 (paragraph)
msgid "The `sms_from` option is the phone number that your SMS messages will be sent from. You should generate a phone number for your application in the Vonage control panel."
msgstr ""

#: docs/8.x/notifications.md:block 241 (paragraph)
msgid "If a notification supports being sent as an SMS, you should define a `toNexmo` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 242 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 245 (paragraph)
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 246 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 248 (header)
msgid "Formatting Shortcode Notifications"
msgstr ""

#: docs/8.x/notifications.md:block 249 (paragraph)
msgid "Laravel also supports sending shortcode notifications, which are pre-defined message templates in your Vonage account. To send a shortcode SMS notification, you should define a `toShortcode` method on your notification class. From within this method, you may return an array specifying the type of notification (`alert`, `2fa`, or `marketing`) as well as the custom values that will populate the template:"
msgstr ""

#: docs/8.x/notifications.md:block 250 (code)
msgid ""
"/**\n"
" * Get the Vonage / Shortcode representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toShortcode($notifiable)\n"
"{\n"
"    return [\n"
"        'type' => 'alert',\n"
"        'custom' => [\n"
"            'code' => 'ABC123',\n"
"        ],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 251 (quote)
msgid "{tip} Like [routing SMS Notifications](#routing-sms-notifications), you should implement the `routeNotificationForShortcode` method on your notifiable model."
msgstr ""

#: docs/8.x/notifications.md:block 254 (paragraph)
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified in your `config/services.php` file, you may call the `from` method on a `NexmoMessage` instance:"
msgstr ""

#: docs/8.x/notifications.md:block 255 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 259 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 262 (paragraph)
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForNexmo` method on your notifiable entity:"
msgstr ""

#: docs/8.x/notifications.md:block 263 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Nexmo channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForNexmo($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 268 (paragraph)
msgid "Before you can send notifications via Slack, you must install the Slack notification channel via Composer:"
msgstr ""

#: docs/8.x/notifications.md:block 270 (paragraph)
msgid "You will also need to create a [Slack App](https://api.slack.com/apps?new_app=1) for your team. After creating the App, you should configure an \"Incoming Webhook\" for the workspace. Slack will then provide you with a webhook URL that you may use when [routing Slack notifications](#routing-slack-notifications)."
msgstr ""

#: docs/8.x/notifications.md:block 273 (paragraph)
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\SlackMessage` instance. Slack messages may contain text content as well as an \"attachment\" that formats additional text or an array of fields. Let's take a look at a basic `toSlack` example:"
msgstr ""

#: docs/8.x/notifications.md:block 274 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    return (new SlackMessage)\n"
"                ->content('One of your invoices has been paid!');\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 276 (header)
msgid "Slack Attachments"
msgstr ""

#: docs/8.x/notifications.md:block 277 (paragraph)
msgid "You may also add \"attachments\" to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:"
msgstr ""

#: docs/8.x/notifications.md:block 278 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was not found.');\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 279 (paragraph)
msgid "Attachments also allow you to specify an array of data that should be presented to the user. The given data will be presented in a table-style format for easy reading:"
msgstr ""

#: docs/8.x/notifications.md:block 280 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/invoices/'.$this->invoice->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->success()\n"
"                ->content('One of your invoices has been paid!')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Invoice 1322', $url)\n"
"                               ->fields([\n"
"                                    'Title' => 'Server Expenses',\n"
"                                    'Amount' => '$1,234',\n"
"                                    'Via' => 'American Express',\n"
"                                    'Was Overdue' => ':-1:',\n"
"                                ]);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 282 (header)
msgid "Markdown Attachment Content"
msgstr ""

#: docs/8.x/notifications.md:block 283 (paragraph)
msgid "If some of your attachment fields contain Markdown, you may use the `markdown` method to instruct Slack to parse and display the given attachment fields as Markdown formatted text. The values accepted by this method are: `pretext`, `text`, and / or `fields`. For more information about Slack attachment formatting, check out the [Slack API documentation](https://api.slack.com/docs/message-formatting#message_formatting):"
msgstr ""

#: docs/8.x/notifications.md:block 284 (code)
msgid ""
"/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was *not found*.')\n"
"                               ->markdown(['text']);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 287 (paragraph)
msgid "To route Slack notifications to the proper Slack team and channel, define a `routeNotificationForSlack` method on your notifiable entity. This should return the webhook URL to which the notification should be delivered. Webhook URLs may be generated by adding an \"Incoming Webhook\" service to your Slack team:"
msgstr ""

#: docs/8.x/notifications.md:block 288 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForSlack($notification)\n"
"    {\n"
"        return 'https://hooks.slack.com/services/...';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 299 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 307 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSending' => [\n"
"        'App\\Listeners\\CheckNotificationStatus',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/notifications.md:block 309 (code)
msgid ""
"use Illuminate\\Notifications\\Events\\NotificationSending;\n"
"\n"
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 311 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 315 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSent' => [\n"
"        'App\\Listeners\\LogNotification',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/notifications.md:block 316 (quote)
msgid "{tip} After registering listeners in your `EventServiceProvider`, use the `event:generate` Artisan command to quickly generate listener classes."
msgstr ""

#: docs/8.x/notifications.md:block 318 (code)
msgid ""
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSent $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 323 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class VoiceChannel\n"
"{\n"
"    /**\n"
"     * Send the given notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return void\n"
"     */\n"
"    public function send($notifiable, Notification $notification)\n"
"    {\n"
"        $message = $notification->toVoice($notifiable);\n"
"\n"
"        // Send notification to the $notifiable instance...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/notifications.md:block 325 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Notifications;\n"
"\n"
"use App\\Notifications\\Messages\\VoiceMessage;\n"
"use App\\Notifications\\VoiceChannel;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class InvoicePaid extends Notification\n"
"{\n"
"    use Queueable;\n"
"\n"
"    /**\n"
"     * Get the notification channels.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array|string\n"
"     */\n"
"    public function via($notifiable)\n"
"    {\n"
"        return [VoiceChannel::class];\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the voice representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return VoiceMessage\n"
"     */\n"
"    public function toVoice($notifiable)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 32 (code)
msgid ""
"/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 35 (quote)
msgid "**Warning** Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues)."
msgstr ""

#: docs/9.x/notifications.md:block 50 (code)
msgid ""
"/**\n"
" * Determine the notification's delivery delay.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function withDelay($notifiable)\n"
"{\n"
"    return [\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 56 (code)
msgid ""
"/**\n"
" * Determine which connections should be used for each notification channel.\n"
" *\n"
" * @return array\n"
" */\n"
"public function viaConnections()\n"
"{\n"
"    return [\n"
"        'mail' => 'redis',\n"
"        'database' => 'sync',\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 77 (code)
msgid ""
"use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"\n"
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->route('broadcast', [new Channel('channel-name')])\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/9.x/notifications.md:block 86 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n"
"\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->lineIf($this->amount > 0, \"Amount paid: {$this->amount}\")\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 94 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Invoice Payment Failed')\n"
"                ->line('...');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 131 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachMany([\n"
"                    '/path/to/forge.svg',\n"
"                    '/path/to/vapor.svg' => [\n"
"                        'as' => 'Logo.svg',\n"
"                        'mime' => 'image/svg+xml',\n"
"                    ],\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 139 (code)
msgid ""
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Comment Upvoted!')\n"
"                ->tag('upvote')\n"
"                ->metadata('comment_id', $this->comment->id);\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 145 (code)
msgid ""
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->withSymfonyMessage(function (Email $message) {\n"
"                    $message->getHeaders()->addTextHeader(\n"
"                        'Custom-Header', 'Header Value'\n"
"                    );\n"
"                });\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 262 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 266 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 270 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 274 (code)
msgid ""
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}\n"
msgstr ""

#: docs/9.x/notifications.md:block 278 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Vonage channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForVonage($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 77 (code)
msgid ""
"use Illuminate\\Broadcasting\\Channel;\n"
"\n"
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->route('broadcast', [new Channel('channel-name')])\n"
"            ->notify(new InvoicePaid($invoice));\n"
msgstr ""

#: docs/master/notifications.md:block 289 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"                ->content('One of your invoices has been paid!');\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 293 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\SlackAttachment;\n"
"use Illuminate\\Notifications\\Messages\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function (SlackAttachment $attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was not found.');\n"
"                });\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 295 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\SlackAttachment;\n"
"use Illuminate\\Notifications\\Messages\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    $url = url('/invoices/'.$this->invoice->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->success()\n"
"                ->content('One of your invoices has been paid!')\n"
"                ->attachment(function (SlackAttachment $attachment) use ($url) {\n"
"                    $attachment->title('Invoice 1322', $url)\n"
"                               ->fields([\n"
"                                    'Title' => 'Server Expenses',\n"
"                                    'Amount' => '$1,234',\n"
"                                    'Via' => 'American Express',\n"
"                                    'Was Overdue' => ':-1:',\n"
"                                ]);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 299 (code)
msgid ""
"use Illuminate\\Notifications\\Messages\\SlackAttachment;\n"
"use Illuminate\\Notifications\\Messages\\SlackMessage;\n"
"\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n"
"\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function (SlackAttachment $attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was *not found*.')\n"
"                               ->markdown(['text']);\n"
"                });\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 303 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     */\n"
"    public function routeNotificationForSlack(Notification $notification): string\n"
"    {\n"
"        return 'https://hooks.slack.com/services/...';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/notifications.md:block 337 (code)
msgid ""
"use Illuminate\\Notifications\\Events\\NotificationSending;\n"
"\n"
"/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSending $event): void\n"
"{\n"
"    return false;\n"
"}\n"
msgstr ""
