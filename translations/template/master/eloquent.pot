# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-12 16:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/eloquent.md:1
#, no-wrap
msgid "Eloquent: Getting Started"
msgstr ""

#. type: Bullet: '- '
#: docs/master/eloquent.md:36
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/eloquent.md:36
msgid "[Generating Model Classes](#generating-model-classes)"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:36
#, no-wrap
msgid ""
"- [Eloquent Model Conventions](#eloquent-model-conventions)\n"
"    - [Table Names](#table-names)\n"
"    - [Primary Keys](#primary-keys)\n"
"    - [Timestamps](#timestamps)\n"
"    - [Database Connections](#database-connections)\n"
"    - [Default Attribute Values](#default-attribute-values)\n"
"- [Retrieving Models](#retrieving-models)\n"
"    - [Collections](#collections)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Cursors](#cursors)\n"
"    - [Advanced Subqueries](#advanced-subqueries)\n"
"- [Retrieving Single Models / Aggregates](#retrieving-single-models)\n"
"    - [Retrieving Or Creating Models](#retrieving-or-creating-models)\n"
"    - [Retrieving Aggregates](#retrieving-aggregates)\n"
"- [Inserting & Updating Models](#inserting-and-updating-models)\n"
"    - [Inserts](#inserts)\n"
"    - [Updates](#updates)\n"
"    - [Mass Assignment](#mass-assignment)\n"
"    - [Upserts](#upserts)\n"
"- [Deleting Models](#deleting-models)\n"
"    - [Soft Deleting](#soft-deleting)\n"
"    - [Querying Soft Deleted Models](#querying-soft-deleted-models)\n"
"- [Replicating Models](#replicating-models)\n"
"- [Query Scopes](#query-scopes)\n"
"    - [Global Scopes](#global-scopes)\n"
"    - [Local Scopes](#local-scopes)\n"
"- [Comparing Models](#comparing-models)\n"
"- [Events](#events)\n"
"    - [Using Closures](#events-using-closures)\n"
"    - [Observers](#observers)\n"
"    - [Muting Events](#muting-events)\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:38
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:38
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:41
msgid ""
"Laravel includes Eloquent, an object-relational mapper (ORM) that makes it "
"enjoyable to interact with your database. When using Eloquent, each database "
"table has a corresponding \"Model\" that is used to interact with that "
"table. In addition to retrieving records from the database table, Eloquent "
"models allow you to insert, update, and delete records from the table as "
"well."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:43
#, no-wrap
msgid ""
"> {tip} Before getting started, be sure to configure a database connection "
"in your application's `config/database.php` configuration file. For more "
"information on configuring your database, check out [the database "
"configuration documentation](/docs/{{version}}/database#configuration).\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:45
#, no-wrap
msgid "<a name=\"generating-model-classes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:45
#, no-wrap
msgid "Generating Model Classes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:48
msgid ""
"To get started, let's create an Eloquent model. Models typically live in the "
"`app\\Models` directory and extend the "
"`Illuminate\\Database\\Eloquent\\Model` class. You may use the `make:model` "
"[Artisan command](/docs/{{version}}/artisan) to generate a new model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:50
#, no-wrap
msgid "    php artisan make:model Flight\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:52
msgid ""
"If you would like to generate a [database "
"migration](/docs/{{version}}/migrations) when you generate the model, you "
"may use the `--migration` or `-m` option:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:54
#, no-wrap
msgid "    php artisan make:model Flight --migration\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:56
msgid ""
"You may generate various other types of classes when generating a model, "
"such as factories, seeders, and controllers. In addition, these options may "
"be combined to create multiple classes at once:"
msgstr ""

#. type: Code fence info string
#: docs/master/eloquent.md:57
#, no-wrap
msgid "bash"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:57
#, no-wrap
msgid ""
"# Generate a model and a FlightFactory class...\n"
"php artisan make:model Flight --factory\n"
"php artisan make:model Flight -f\n"
"\n"
"# Generate a model and a FlightSeeder class...\n"
"php artisan make:model Flight --seed\n"
"php artisan make:model Flight -s\n"
"\n"
"# Generate a model and a FlightController class...\n"
"php artisan make:model Flight --controller\n"
"php artisan make:model Flight -c\n"
"\n"
"# Generate a model and a migration, factory, seeder, and controller...\n"
"php artisan make:model Flight -mfsc\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:75
#, no-wrap
msgid "<a name=\"eloquent-model-conventions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:75
#, no-wrap
msgid "Eloquent Model Conventions"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:78
msgid ""
"Models generated by the `make:model` command will be placed in the "
"`app/Models` directory. Let's examine a basic model class and discuss some "
"of Eloquent's key conventions:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:80 docs/master/eloquent.md:98 docs/master/eloquent.md:119 docs/master/eloquent.md:137 docs/master/eloquent.md:151 docs/master/eloquent.md:173 docs/master/eloquent.md:191 docs/master/eloquent.md:209 docs/master/eloquent.md:222 docs/master/eloquent.md:243 docs/master/eloquent.md:493 docs/master/eloquent.md:635 docs/master/eloquent.md:746 docs/master/eloquent.md:872 docs/master/eloquent.md:902 docs/master/eloquent.md:933 docs/master/eloquent.md:983 docs/master/eloquent.md:1038 docs/master/eloquent.md:1087 docs/master/eloquent.md:1119 docs/master/eloquent.md:1160
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:82 docs/master/eloquent.md:100 docs/master/eloquent.md:121 docs/master/eloquent.md:175 docs/master/eloquent.md:193 docs/master/eloquent.md:224 docs/master/eloquent.md:245 docs/master/eloquent.md:637 docs/master/eloquent.md:748 docs/master/eloquent.md:904 docs/master/eloquent.md:935 docs/master/eloquent.md:985 docs/master/eloquent.md:1040 docs/master/eloquent.md:1089 docs/master/eloquent.md:1121
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:84 docs/master/eloquent.md:102 docs/master/eloquent.md:123 docs/master/eloquent.md:177 docs/master/eloquent.md:195 docs/master/eloquent.md:226 docs/master/eloquent.md:247 docs/master/eloquent.md:639 docs/master/eloquent.md:987 docs/master/eloquent.md:1042 docs/master/eloquent.md:1123
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:89
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:91
#, no-wrap
msgid "<a name=\"table-names\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:91
#, no-wrap
msgid "Table Names"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:94
msgid ""
"After glancing at the example above, you may have noticed that we did not "
"tell Eloquent which database table corresponds to our `Flight` model. By "
"convention, the \"snake case\", plural name of the class will be used as the "
"table name unless another name is explicitly specified. So, in this case, "
"Eloquent will assume the `Flight` model stores records in the `flights` "
"table, while an `AirTrafficController` model would store records in an "
"`air_traffic_controllers` table."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:96
msgid ""
"If your model's corresponding database table does not fit this convention, "
"you may manually specify the model's table name by defining a `table` "
"property on the model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:112
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The table associated with the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $table = 'my_flights';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:114
#, no-wrap
msgid "<a name=\"primary-keys\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:114
#, no-wrap
msgid "Primary Keys"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:117
msgid ""
"Eloquent will also assume that each model's corresponding database table has "
"a primary key column named `id`. If necessary, you may define a protected "
"`$primaryKey` property on your model to specify a different column that "
"serves as your model's primary key:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:133
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The primary key associated with the table.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $primaryKey = 'flight_id';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:135
msgid ""
"In addition, Eloquent assumes that the primary key is an incrementing "
"integer value, which means that Eloquent will automatically cast the primary "
"key to an integer. If you wish to use a non-incrementing or a non-numeric "
"primary key you must define a public `$incrementing` property on your model "
"that is set to `false`:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:147
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model's ID is auto-incrementing.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $incrementing = false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:149
msgid ""
"If your model's primary key is not an integer, you should define a protected "
"`$keyType` property on your model. This property should have a value of "
"`string`:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:161
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The data type of the auto-incrementing ID.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $keyType = 'string';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:163
#, no-wrap
msgid "<a name=\"composite-primary-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:163
#, no-wrap
msgid "\"Composite\" Primary Keys"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:166
msgid ""
"Eloquent requires each model to have at least one uniquely identifying "
"\"ID\" that can serve as its primary key. \"Composite\" primary keys are not "
"supported by Eloquent models. However, you are free to add additional "
"multi-column, unique indexes to your database tables in addition to the "
"table's uniquely identifying primary key."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:168
#, no-wrap
msgid "<a name=\"timestamps\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:168
#, no-wrap
msgid "Timestamps"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:171
msgid ""
"By default, Eloquent expects `created_at` and `updated_at` columns to exist "
"on your model's corresponding database table.  Eloquent will automatically "
"set these column's values when models are created or updated. If you do not "
"want these columns to be automatically managed by Eloquent, you should "
"define a `$timestamps` property on your model with a value of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:187
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * Indicates if the model should be timestamped.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $timestamps = false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:189
msgid ""
"If you need to customize the format of your model's timestamps, set the "
"`$dateFormat` property on your model. This property determines how date "
"attributes are stored in the database as well as their format when the model "
"is serialized to an array or JSON:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:205
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The storage format of the model's date columns.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $dateFormat = 'U';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:207
msgid ""
"If you need to customize the names of the columns used to store the "
"timestamps, you may define `CREATED_AT` and `UPDATED_AT` constants on your "
"model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:215
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        const CREATED_AT = 'creation_date';\n"
"        const UPDATED_AT = 'updated_date';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:217
#, no-wrap
msgid "<a name=\"database-connections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:217
#, no-wrap
msgid "Database Connections"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:220
msgid ""
"By default, all Eloquent models will use the default database connection "
"that is configured for your application. If you would like to specify a "
"different connection that should be used when interacting with a particular "
"model, you should define a `$connection` property on the model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:236
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The database connection that should be used by the model.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $connection = 'sqlite';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:238
#, no-wrap
msgid "<a name=\"default-attribute-values\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:238
#, no-wrap
msgid "Default Attribute Values"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:241
msgid ""
"By default, a newly instantiated model instance will not contain any "
"attribute values. If you would like to define the default values for some of "
"your model's attributes, you may define an `$attributes` property on your "
"model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:259
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The model's default values for attributes.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $attributes = [\n"
"            'delayed' => false,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:261
#, no-wrap
msgid "<a name=\"retrieving-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:261
#, no-wrap
msgid "Retrieving Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:264
msgid ""
"Once you have created a model and [its associated database "
"table](/docs/{{version}}/migrations#writing-migrations), you are ready to "
"start retrieving data from your database. You can think of each Eloquent "
"model as a powerful [query builder](/docs/{{version}}/queries) allowing you "
"to fluently query the database table associated with the model. The model's "
"`all` method will retrieve all of the records from the model's associated "
"database table:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:266 docs/master/eloquent.md:333 docs/master/eloquent.md:357 docs/master/eloquent.md:411 docs/master/eloquent.md:439 docs/master/eloquent.md:452 docs/master/eloquent.md:525 docs/master/eloquent.md:538 docs/master/eloquent.md:623 docs/master/eloquent.md:711 docs/master/eloquent.md:817
#, no-wrap
msgid "    use App\\Models\\Flight;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:270
#, no-wrap
msgid ""
"    foreach (Flight::all() as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:272
#, no-wrap
msgid "<a name=\"building-queries\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:272
#, no-wrap
msgid "Building Queries"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:275
msgid ""
"The Eloquent `all` method will return all of the results in the model's "
"table. However, since each Eloquent model serves as a [query "
"builder](/docs/{{version}}/queries), you may add additional constraints to "
"queries and then invoke the `get` method to retrieve the results:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:280
#, no-wrap
msgid ""
"    $flights = Flight::where('active', 1)\n"
"                   ->orderBy('name')\n"
"                   ->take(10)\n"
"                   ->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:282
#, no-wrap
msgid ""
"> {tip} Since Eloquent models are query builders, you should review all of "
"the methods provided by Laravel's [query "
"builder](/docs/{{version}}/queries). You may use any of these methods when "
"writing your Eloquent queries.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:284
#, no-wrap
msgid "<a name=\"refreshing-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:284
#, no-wrap
msgid "Refreshing Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:287
msgid ""
"If you already have an instance of an Eloquent model that was retrieved from "
"the database, you can \"refresh\" the model using the `fresh` and `refresh` "
"methods. The `fresh` method will re-retrieve the model from the "
"database. The existing model instance will not be affected:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:289 docs/master/eloquent.md:295
#, no-wrap
msgid "    $flight = Flight::where('number', 'FR 900')->first();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:291
#, no-wrap
msgid "    $freshFlight = $flight->fresh();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:293
msgid ""
"The `refresh` method will re-hydrate the existing model using fresh data "
"from the database. In addition, all of its loaded relationships will be "
"refreshed as well:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:297
#, no-wrap
msgid "    $flight->number = 'FR 456';\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:299
#, no-wrap
msgid "    $flight->refresh();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:301
#, no-wrap
msgid "    $flight->number; // \"FR 900\"\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:303
#, no-wrap
msgid "<a name=\"collections\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:303
#, no-wrap
msgid "Collections"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:306
msgid ""
"As we have seen, Eloquent methods like `all` and `get` retrieve multiple "
"records from the database. However, these methods don't return a plain PHP "
"array. Instead, an instance of `Illuminate\\Database\\Eloquent\\Collection` "
"is returned."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:308
msgid ""
"The Eloquent `Collection` class extends Laravel's base "
"`Illuminate\\Support\\Collection` class, which provides a [variety of "
"helpful methods](/docs/{{version}}/collections#available-methods) for "
"interacting with data collections. For example, the `reject` method may be "
"used to remove models from a collection based on the results of an invoked "
"closure:"
msgstr ""

#. type: Code fence info string
#: docs/master/eloquent.md:309
#, no-wrap
msgid "php"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:309
#, no-wrap
msgid ""
"$flights = Flight::where('destination', 'Paris')->get();\n"
"\n"
"$flights = $flights->reject(function ($flight) {\n"
"    return $flight->cancelled;\n"
"});\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:318
msgid ""
"In addition to the methods provided by Laravel's base collection class, the "
"Eloquent collection class provides [a few extra "
"methods](/docs/{{version}}/eloquent-collections#available-methods) that are "
"specifically intended for interacting with collections of Eloquent models."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:320
msgid ""
"Since all of Laravel's collections implement PHP's iterable interfaces, you "
"may loop over collections as if they were an array:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:324
#, no-wrap
msgid ""
"    foreach ($flights as $flight) {\n"
"        echo $flight->name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:326
#, no-wrap
msgid "<a name=\"chunking-results\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:326
#, no-wrap
msgid "Chunking Results"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:329
msgid ""
"Your application may run out of memory if you attempt to load tens of "
"thousands of Eloquent records via the `all` or `get` methods. Instead of "
"using these methods, the `chunk` method may be used to process large numbers "
"of models more efficiently."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:331
msgid ""
"The `chunk` method will retrieve a subset of Eloquent models, passing them "
"to a closure for processing. Since only the current chunk of Eloquent models "
"is retrieved at a time, the `chunk` method will provide significantly "
"reduced memory usage when working with a large number of models:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:339
#, no-wrap
msgid ""
"    Flight::chunk(200, function ($flights) {\n"
"        foreach ($flights as $flight) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:341
msgid ""
"The first argument passed to the `chunk` method is the number of records you "
"wish to receive per \"chunk\". The closure passed as the second argument "
"will be invoked for each chunk that is retrieved from the database. A "
"database query will be executed to retrieve each chunk of records passed to "
"the closure."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:343
msgid ""
"If you are filtering the results of the `chunk` method based on a column "
"that you will also be updating while iterating over the results, you should "
"use the `chunkById` method. Using the `chunk` method in these scenarios "
"could lead to unexpected and inconsistent results. Internally, the "
"`chunkById` method will always retrieve models with an `id` column greater "
"than the last model in the previous chunk:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:348
#, no-wrap
msgid ""
"    Flight::where('departed', true)\n"
"            ->chunkById(200, function ($flights) {\n"
"                $flights->each->update(['departed' => false]);\n"
"            }, $column = 'id');\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:350
#, no-wrap
msgid "<a name=\"cursors\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:350
#, no-wrap
msgid "Cursors"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:353
msgid ""
"Similar to the `chunk` method, the `cursor` method may be used to "
"significantly reduce your application's memory consumption when iterating "
"through tens of thousands of Eloquent model records."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:355
msgid ""
"The `cursor` method will only execute a single database query; however, the "
"individual Eloquent models will not be hydrated until they are actually "
"iterated over. Therefore, only one Eloquent model is kept in memory at any "
"given time while iterating over the cursor. Internally, the `cursor` method "
"uses PHP "
"[generators](https://www.php.net/manual/en/language.generators.overview.php) "
"to implement this functionality:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:361
#, no-wrap
msgid ""
"    foreach (Flight::where('destination', 'Zurich')->cursor() as $flight) "
"{\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:363
msgid ""
"The `cursor` returns an `Illuminate\\Support\\LazyCollection` "
"instance. [Lazy collections](/docs/{{version}}/collections#lazy-collections) "
"allow you to use many of the collection methods available on typical Laravel "
"collections while only loading a single model into memory at a time:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:365 docs/master/eloquent.md:566 docs/master/eloquent.md:1019 docs/master/eloquent.md:1164 docs/master/eloquent.md:1233
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:369
#, no-wrap
msgid ""
"    $users = User::cursor()->filter(function ($user) {\n"
"        return $user->id > 500;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:373
#, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        echo $user->id;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:375
#, no-wrap
msgid "<a name=\"advanced-subqueries\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:375
#, no-wrap
msgid "Advanced Subqueries"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:378
#, no-wrap
msgid "<a name=\"subquery-selects\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:378
#, no-wrap
msgid "Subquery Selects"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:381
msgid ""
"Eloquent also offers advanced subquery support, which allows you to pull "
"information from related tables in a single query. For example, let's "
"imagine that we have a table of flight `destinations` and a table of "
"`flights` to destinations. The `flights` table contains an `arrived_at` "
"column which indicates when the flight arrived at the destination."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:383
msgid ""
"Using the subquery functionality available to the query builder's `select` "
"and `addSelect` methods, we can select all of the `destinations` and the "
"name of the flight that most recently arrived at that destination using a "
"single query:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:386
#, no-wrap
msgid ""
"    use App\\Models\\Destination;\n"
"    use App\\Models\\Flight;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:392
#, no-wrap
msgid ""
"    return Destination::addSelect(['last_flight' => Flight::select('name')\n"
"        ->whereColumn('destination_id', 'destinations.id')\n"
"        ->orderByDesc('arrived_at')\n"
"        ->limit(1)\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:394
#, no-wrap
msgid "<a name=\"subquery-ordering\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:394
#, no-wrap
msgid "Subquery Ordering"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:397
msgid ""
"In addition, the query builder's `orderBy` function supports "
"subqueries. Continuing to use our flight example, we may use this "
"functionality to sort all destinations based on when the last flight arrived "
"at that destination. Again, this may be done while executing a single "
"database query:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:404
#, no-wrap
msgid ""
"    return Destination::orderByDesc(\n"
"        Flight::select('arrived_at')\n"
"            ->whereColumn('destination_id', 'destinations.id')\n"
"            ->orderByDesc('arrived_at')\n"
"            ->limit(1)\n"
"    )->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:406
#, no-wrap
msgid "<a name=\"retrieving-single-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:406
#, no-wrap
msgid "Retrieving Single Models / Aggregates"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:409
msgid ""
"In addition to retrieving all of the records matching a given query, you may "
"also retrieve single records using the `find`, `first`, or `firstWhere` "
"methods. Instead of returning a collection of models, these methods return a "
"single model instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:414
#, no-wrap
msgid ""
"    // Retrieve a model by its primary key...\n"
"    $flight = Flight::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:417
#, no-wrap
msgid ""
"    // Retrieve the first model matching the query constraints...\n"
"    $flight = Flight::where('active', 1)->first();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:420
#, no-wrap
msgid ""
"    // Alternative to retrieving the first model matching the query "
"constraints...\n"
"    $flight = Flight::firstWhere('active', 1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:422
msgid ""
"Sometimes you may wish to retrieve the first result of a query or perform "
"some other action if no results are found. The `firstOr` method will return "
"the first result matching the query or, if no results are found, execute the "
"given closure. The value returned by the closure will be considered the "
"result of the `firstOr` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:426
#, no-wrap
msgid ""
"    $model = Flight::where('legs', '>', 3)->firstOr(function () {\n"
"        // ...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:428
#, no-wrap
msgid "<a name=\"not-found-exceptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:428
#, no-wrap
msgid "Not Found Exceptions"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:431
msgid ""
"Sometimes you may wish to throw an exception if a model is not found. This "
"is particularly useful in routes or controllers. The `findOrFail` and "
"`firstOrFail` methods will retrieve the first result of the query; however, "
"if no result is found, an "
"`Illuminate\\Database\\Eloquent\\ModelNotFoundException` will be thrown:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:433
#, no-wrap
msgid "    $flight = Flight::findOrFail(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:435
#, no-wrap
msgid "    $flight = Flight::where('legs', '>', 3)->firstOrFail();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:437
msgid ""
"If the `ModelNotFoundException` is not caught, a 404 HTTP response is "
"automatically sent back to the client:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:443
#, no-wrap
msgid ""
"    Route::get('/api/flights/{id}', function ($id) {\n"
"        return Flight::findOrFail($id);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:445
#, no-wrap
msgid "<a name=\"retrieving-or-creating-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:445
#, no-wrap
msgid "Retrieving Or Creating Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:448
msgid ""
"The `firstOrCreate` method will attempt to locate a database record using "
"the given column / value pairs. If the model can not be found in the "
"database, a record will be inserted with the attributes resulting from "
"merging the first array argument with the optional second array argument:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:450
msgid ""
"The `firstOrNew` method, like `firstOrCreate`, will attempt to locate a "
"record in the database matching the given attributes. However, if a model is "
"not found, a new model instance will be returned. Note that the model "
"returned by `firstOrNew` has not yet been persisted to the database. You "
"will need to manually call the `save` method to persist it:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:457
#, no-wrap
msgid ""
"    // Retrieve flight by name or create it if it doesn't exist...\n"
"    $flight = Flight::firstOrCreate([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:463
#, no-wrap
msgid ""
"    // Retrieve flight by name or create it with the name, delayed, and "
"arrival_time attributes...\n"
"    $flight = Flight::firstOrCreate(\n"
"        ['name' => 'London to Paris'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:468
#, no-wrap
msgid ""
"    // Retrieve flight by name or instantiate a new Flight instance...\n"
"    $flight = Flight::firstOrNew([\n"
"        'name' => 'London to Paris'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:474
#, no-wrap
msgid ""
"    // Retrieve flight by name or instantiate with the name, delayed, and "
"arrival_time attributes...\n"
"    $flight = Flight::firstOrNew(\n"
"        ['name' => 'Tokyo to Sydney'],\n"
"        ['delayed' => 1, 'arrival_time' => '11:30']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:476
#, no-wrap
msgid "<a name=\"retrieving-aggregates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:476
#, no-wrap
msgid "Retrieving Aggregates"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:479
msgid ""
"When interacting with Eloquent models, you may also use the `count`, `sum`, "
"`max`, and other [aggregate methods](/docs/{{version}}/queries#aggregates) "
"provided by the Laravel [query builder](/docs/{{version}}/queries). As you "
"might expect, these methods return a scalar value instead of an Eloquent "
"model instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:481
#, no-wrap
msgid "    $count = Flight::where('active', 1)->count();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:483
#, no-wrap
msgid "    $max = Flight::where('active', 1)->max('price');\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:485
#, no-wrap
msgid "<a name=\"inserting-and-updating-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:485
#, no-wrap
msgid "Inserting & Updating Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:488
#, no-wrap
msgid "<a name=\"inserts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:488
#, no-wrap
msgid "Inserts"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:491
msgid ""
"Of course, when using Eloquent, we don't only need to retrieve models from "
"the database. We also need to insert new records. Thankfully, Eloquent makes "
"it simple. To insert a new record into the database, you should instantiate "
"a new model instance and set attributes on the model. Then, call the `save` "
"method on the model instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:495
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:499
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use App\\Models\\Flight;\n"
"    use Illuminate\\Http\\Request;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:511
#, no-wrap
msgid ""
"    class FlightController extends Controller\n"
"    {\n"
"        /**\n"
"         * Store a new flight in the database.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function store(Request $request)\n"
"        {\n"
"            // Validate the request...\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:513
#, no-wrap
msgid "            $flight = new Flight;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:515
#, no-wrap
msgid "            $flight->name = $request->name;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:519
#, no-wrap
msgid ""
"            $flight->save();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:521
msgid ""
"In this example, we assign the `name` field from the incoming HTTP request "
"to the `name` attribute of the `App\\Models\\Flight` model instance. When we "
"call the `save` method, a record will be inserted into the database. The "
"model's `created_at` and `updated_at` timestamps will automatically be set "
"when the `save` method is called, so there is no need to set them manually."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:523
msgid ""
"Alternatively, you may use the `create` method to \"save\" a new model using "
"a single PHP statement. The inserted model instance will be returned to you "
"by the `create` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:529 docs/master/eloquent.md:627
#, no-wrap
msgid ""
"    $flight = Flight::create([\n"
"        'name' => 'London to Paris',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:531
msgid ""
"However, before using the `create` method, you will need to specify either a "
"`fillable` or `guarded` property on your model class. These properties are "
"required because all Eloquent models are protected against mass assignment "
"vulnerabilities by default. To learn more about mass assignment, please "
"consult the [mass assignment documentation](#mass-assignment)."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:533
#, no-wrap
msgid "<a name=\"updates\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:533
#, no-wrap
msgid "Updates"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:536
msgid ""
"The `save` method may also be used to update models that already exist in "
"the database. To update a model, you should retrieve it and set any "
"attributes you wish to update. Then, you should call the model's `save` "
"method. Again, the `updated_at` timestamp will automatically be updated, so "
"there is no need to manually set its value:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:540 docs/master/eloquent.md:713
#, no-wrap
msgid "    $flight = Flight::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:542
#, no-wrap
msgid "    $flight->name = 'Paris to London';\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:544
#, no-wrap
msgid "    $flight->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:546
#, no-wrap
msgid "<a name=\"mass-updates\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:546
#, no-wrap
msgid "Mass Updates"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:549
msgid ""
"Updates can also be performed against models that match a given query. In "
"this example, all flights that are `active` and have a `destination` of `San "
"Diego` will be marked as delayed:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:553
#, no-wrap
msgid ""
"    Flight::where('active', 1)\n"
"          ->where('destination', 'San Diego')\n"
"          ->update(['delayed' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:555
msgid ""
"The `update` method expects an array of column and value pairs representing "
"the columns that should be updated."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:557
#, no-wrap
msgid ""
"> {note} When issuing a mass update via Eloquent, the `saving`, `saved`, "
"`updating`, and `updated` model events will not be fired for the updated "
"models. This is because the models are never actually retrieved when issuing "
"a mass update.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:559
#, no-wrap
msgid "<a name=\"examining-attribute-changes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:559
#, no-wrap
msgid "Examining Attribute Changes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:562
msgid ""
"Eloquent provides the `isDirty`, `isClean`, and `wasChanged` methods to "
"examine the internal state of your model and determine how its attributes "
"have changed from when the model was originally retrieved."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:564
msgid ""
"The `isDirty` method determines if any of the model's attributes have been "
"changed since the model was retrieved. You may pass a specific attribute "
"name to the `isDirty` method to determine if a particular attribute is "
"dirty. The `isClean` will determine if an attribute has remained unchanged "
"since the model was retrieved. This method also accepts an optional "
"attribute argument:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:572 docs/master/eloquent.md:595
#, no-wrap
msgid ""
"    $user = User::create([\n"
"        'first_name' => 'Taylor',\n"
"        'last_name' => 'Otwell',\n"
"        'title' => 'Developer',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:574 docs/master/eloquent.md:597
#, no-wrap
msgid "    $user->title = 'Painter';\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:578
#, no-wrap
msgid ""
"    $user->isDirty(); // true\n"
"    $user->isDirty('title'); // true\n"
"    $user->isDirty('first_name'); // false\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:582
#, no-wrap
msgid ""
"    $user->isClean(); // false\n"
"    $user->isClean('title'); // false\n"
"    $user->isClean('first_name'); // true\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:584 docs/master/eloquent.md:599
#, no-wrap
msgid "    $user->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:587
#, no-wrap
msgid ""
"    $user->isDirty(); // false\n"
"    $user->isClean(); // true\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:589
msgid ""
"The `wasChanged` method determines if any attributes were changed when the "
"model was last saved within the current request cycle. If needed, you may "
"pass an attribute name to see if a particular attribute was changed:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:603
#, no-wrap
msgid ""
"    $user->wasChanged(); // true\n"
"    $user->wasChanged('title'); // true\n"
"    $user->wasChanged('first_name'); // false\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:605
msgid ""
"The `getOriginal` method returns an array containing the original attributes "
"of the model regardless of any changes to the model since it was "
"retrieved. If needed, you may pass a specific attribute name to get the "
"original value of a particular attribute:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:607
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:610
#, no-wrap
msgid ""
"    $user->name; // John\n"
"    $user->email; // john@example.com\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:613
#, no-wrap
msgid ""
"    $user->name = \"Jack\";\n"
"    $user->name; // Jack\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:616
#, no-wrap
msgid ""
"    $user->getOriginal('name'); // John\n"
"    $user->getOriginal(); // Array of original attributes...\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:618
#, no-wrap
msgid "<a name=\"mass-assignment\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:618
#, no-wrap
msgid "Mass Assignment"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:621
msgid ""
"You may use the `create` method to \"save\" a new model using a single PHP "
"statement. The inserted model instance will be returned to you by the "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:629
msgid ""
"However, before using the `create` method, you will need to specify either a "
"`fillable` or `guarded` property on your model class. These properties are "
"required because all Eloquent models are protected against mass assignment "
"vulnerabilities by default."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:631
msgid ""
"A mass assignment vulnerability occurs when a user passes an unexpected HTTP "
"request field and that field changes a column in your database that you did "
"not expect. For example, a malicious user might send an `is_admin` parameter "
"through an HTTP request, which is then passed to your model's `create` "
"method, allowing the user to escalate themselves to an administrator."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:633
msgid ""
"So, to get started, you should define which model attributes you want to "
"make mass assignable. You may do this using the `$fillable` property on the "
"model. For example, let's make the `name` attribute of our `Flight` model "
"mass assignable:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:649
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that are mass assignable.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $fillable = ['name'];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:651
msgid ""
"Once you have specified which attributes are mass assignable, you may use "
"the `create` method to insert a new record in the database. The `create` "
"method returns the newly created model instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:653
#, no-wrap
msgid "    $flight = Flight::create(['name' => 'London to Paris']);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:655
msgid ""
"If you already have a model instance, you may use the `fill` method to "
"populate it with an array of attributes:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:657
#, no-wrap
msgid "    $flight->fill(['name' => 'Amsterdam to Frankfurt']);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:659
#, no-wrap
msgid "<a name=\"mass-assignment-json-columns\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:659
#, no-wrap
msgid "Mass Assignment & JSON Columns"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:662
msgid ""
"When assigning JSON columns, each column's mass assignable key must be "
"specified in your model's `$fillable` array. For security, Laravel does not "
"support updating nested JSON attributes when using the `guarded` property:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:671
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that are mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $fillable = [\n"
"        'options->enabled',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:673
#, no-wrap
msgid "<a name=\"allowing-mass-assignment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:673
#, no-wrap
msgid "Allowing Mass Assignment"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:676
msgid ""
"If you would like to make all of your attributes mass assignable, you may "
"define your model's `$guarded` property as an empty array. If you choose to "
"unguard your model, you should take special care to always hand-craft the "
"arrays passed to Eloquent's `fill`, `create`, and `update` methods:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:683
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that aren't mass assignable.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $guarded = [];\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:685
#, no-wrap
msgid "<a name=\"upserts\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:685
#, no-wrap
msgid "Upserts"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:688
msgid ""
"Occasionally, you may need to update an existing model or create a new model "
"if no matching model exists. Like the `firstOrCreate` method, the "
"`updateOrCreate` method persists the model, so there's no need to manually "
"call the `save` method."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:690
msgid ""
"In the example below, if a flight exists with a `departure` location of "
"`Oakland` and a `destination` location of `San Diego`, its `price` and "
"`discounted` columns will be updated. If no such flight exists, a new flight "
"will be created which has the attributes resulting from merging the first "
"argument array with the second argument array:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:695
#, no-wrap
msgid ""
"    $flight = Flight::updateOrCreate(\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego'],\n"
"        ['price' => 99, 'discounted' => 1]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:697
msgid ""
"If you would like to perform multiple \"upserts\" in a single query, then "
"you should use the `upsert` method instead. The method's first argument "
"consists of the values to insert or update, while the second argument lists "
"the column(s) that uniquely identify records within the associated "
"table. The method's third and final argument is an array of the columns that "
"should be updated if a matching record already exists in the database. The "
"`upsert` method will automatically set the `created_at` and `updated_at` "
"timestamps if timestamps are enabled on the model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:702
#, no-wrap
msgid ""
"    Flight::upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => "
"99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => "
"150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:704
#, no-wrap
msgid ""
"> {note} All databases systems except SQL Server require the columns in the "
"second argument provided to the `upsert` method to have a \"primary\" or "
"\"unique\" index.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:706
#, no-wrap
msgid "<a name=\"deleting-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:706
#, no-wrap
msgid "Deleting Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:709
msgid "To delete a model, you may call the `delete` method on the model instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:715
#, no-wrap
msgid "    $flight->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:717
#, no-wrap
msgid "<a name=\"deleting-an-existing-model-by-its-primary-key\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:717
#, no-wrap
msgid "Deleting An Existing Model By Its Primary Key"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:720
msgid ""
"In the example above, we are retrieving the model from the database before "
"calling the `delete` method. However, if you know the primary key of the "
"model, you may delete the model without explicitly retrieving it by calling "
"the `destroy` method.  In addition to accepting the single primary key, the "
"`destroy` method will accept multiple primary keys, an array of primary "
"keys, or a [collection](/docs/{{version}}/collections) of primary keys:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:722
#, no-wrap
msgid "    Flight::destroy(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:724
#, no-wrap
msgid "    Flight::destroy(1, 2, 3);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:726
#, no-wrap
msgid "    Flight::destroy([1, 2, 3]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:728
#, no-wrap
msgid "    Flight::destroy(collect([1, 2, 3]));\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:730
#, no-wrap
msgid ""
"> {note} The `destroy` method loads each model individually and calls the "
"`delete` method so that the `deleting` and `deleted` events are properly "
"dispatched for each model.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:732
#, no-wrap
msgid "<a name=\"deleting-models-using-queries\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:732
#, no-wrap
msgid "Deleting Models Using Queries"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:735
msgid ""
"Of course, you may build an Eloquent query to delete all models matching "
"your query's criteria. In this example, we will delete all flights that are "
"marked as inactive. Like mass updates, mass deletes will not dispatch model "
"events for the models that are deleted:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:737
#, no-wrap
msgid "    $deletedRows = Flight::where('active', 0)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:739
#, no-wrap
msgid ""
"> {note} When executing a mass delete statement via Eloquent, the `deleting` "
"and `deleted` model events will not be dispatched for the deleted "
"models. This is because the models are never actually retrieved when "
"executing the delete statement.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:741
#, no-wrap
msgid "<a name=\"soft-deleting\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:741
#, no-wrap
msgid "Soft Deleting"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:744
msgid ""
"In addition to actually removing records from your database, Eloquent can "
"also \"soft delete\" models. When models are soft deleted, they are not "
"actually removed from your database. Instead, a `deleted_at` attribute is "
"set on the model indicating the date and time at which the model was "
"\"deleted\". To enable soft deletes for a model, add the "
"`Illuminate\\Database\\Eloquent\\SoftDeletes` trait to the model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:751
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:756
#, no-wrap
msgid ""
"    class Flight extends Model\n"
"    {\n"
"        use SoftDeletes;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:758
#, no-wrap
msgid ""
"> {tip} The `SoftDeletes` trait will automatically cast the `deleted_at` "
"attribute to a `DateTime` / `Carbon` instance for you.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:760
msgid ""
"You should also add the `deleted_at` column to your database table. The "
"Laravel [schema builder](/docs/{{version}}/migrations) contains a helper "
"method to create this column:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:763
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Schema\\Blueprint;\n"
"    use Illuminate\\Facades\\Schema;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:767
#, no-wrap
msgid ""
"    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->softDeletes();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:771
#, no-wrap
msgid ""
"    Schema::table('flights', function (Blueprint $table) {\n"
"        $table->dropSoftDeletes();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:773
msgid ""
"Now, when you call the `delete` method on the model, the `deleted_at` column "
"will be set to the current date and time. However, the model's database "
"record will be left in the table. When querying a model that uses soft "
"deletes, the soft deleted models will automatically be excluded from all "
"query results."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:775
msgid ""
"To determine if a given model instance has been soft deleted, you may use "
"the `trashed` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:779
#, no-wrap
msgid ""
"    if ($flight->trashed()) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:781
#, no-wrap
msgid "<a name=\"restoring-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:781
#, no-wrap
msgid "Restoring Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:784
msgid ""
"Sometimes you may wish to \"un-delete\" a soft deleted model. To restore a "
"soft deleted model, you may call the `restore` method on a model "
"instance. The `restore` method will set the model's `deleted_at` column to "
"`null`:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:786
#, no-wrap
msgid "    $flight->restore();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:788
msgid ""
"You may also use the `restore` method in a query to restore multiple "
"models. Again, like other \"mass\" operations, this will not dispatch any "
"model events for the models that are restored:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:792
#, no-wrap
msgid ""
"    Flight::withTrashed()\n"
"            ->where('airline_id', 1)\n"
"            ->restore();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:794
msgid ""
"The `restore` method may also be used when building "
"[relationship](/docs/{{version}}/eloquent-relationships) queries:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:796
#, no-wrap
msgid "    $flight->history()->restore();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:798
#, no-wrap
msgid "<a name=\"permanently-deleting-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:798
#, no-wrap
msgid "Permanently Deleting Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:801
msgid ""
"Sometimes you may need to truly remove a model from your database. You may "
"use the `forceDelete` method to permanently remove a soft deleted model from "
"the database table:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:803
#, no-wrap
msgid "    $flight->forceDelete();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:805
msgid ""
"You may also use the `forceDelete` method when building Eloquent "
"relationship queries:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:807
#, no-wrap
msgid "    $flight->history()->forceDelete();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:809
#, no-wrap
msgid "<a name=\"querying-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:809
#, no-wrap
msgid "Querying Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:812
#, no-wrap
msgid "<a name=\"including-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:812
#, no-wrap
msgid "Including Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:815
msgid ""
"As noted above, soft deleted models will automatically be excluded from "
"query results. However, you may force soft deleted models to be included in "
"a query's results by calling the `withTrashed` method on the query:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:821
#, no-wrap
msgid ""
"    $flights = Flight::withTrashed()\n"
"                    ->where('account_id', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:823
msgid ""
"The `withTrashed` method may also be called when building a "
"[relationship](/docs/{{version}}/eloquent-relationships) query:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:825
#, no-wrap
msgid "    $flight->history()->withTrashed()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:827
#, no-wrap
msgid "<a name=\"retrieving-only-soft-deleted-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:827
#, no-wrap
msgid "Retrieving Only Soft Deleted Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:830
msgid "The `onlyTrashed` method will retrieve **only** soft deleted models:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:834
#, no-wrap
msgid ""
"    $flights = Flight::onlyTrashed()\n"
"                    ->where('airline_id', 1)\n"
"                    ->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:836
#, no-wrap
msgid "<a name=\"replicating-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:836
#, no-wrap
msgid "Replicating Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:839
msgid ""
"You may create an unsaved copy of an existing model instance using the "
"`replicate` method. This method is particularly useful when you have model "
"instances that share many of the same attributes:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:841
#, no-wrap
msgid "    use App\\Models\\Address;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:849
#, no-wrap
msgid ""
"    $shipping = Address::create([\n"
"        'type' => 'shipping',\n"
"        'line_1' => '123 Example Street',\n"
"        'city' => 'Victorville',\n"
"        'state' => 'CA',\n"
"        'postcode' => '90001',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:853
#, no-wrap
msgid ""
"    $billing = $shipping->replicate()->fill([\n"
"        'type' => 'billing'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:855
#, no-wrap
msgid "    $billing->save();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:857
#, no-wrap
msgid "<a name=\"query-scopes\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:857
#, no-wrap
msgid "Query Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:860
#, no-wrap
msgid "<a name=\"global-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:860
#, no-wrap
msgid "Global Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:863
msgid ""
"Global scopes allow you to add constraints to all queries for a given "
"model. Laravel's own [soft delete](#soft-deleting) functionality utilizes "
"global scopes to only retrieve \"non-deleted\" models from the "
"database. Writing your own global scopes can provide a convenient, easy way "
"to make sure every query for a given model receives certain constraints."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:865
#, no-wrap
msgid "<a name=\"writing-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:865
#, no-wrap
msgid "Writing Global Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:868
msgid ""
"Writing a global scope is simple. First, define a class that implements the "
"`Illuminate\\Database\\Eloquent\\Scope` interface. Laravel does not have a "
"conventional location that you should place scope classes, so you are free "
"to place this class in any directory that you wish."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:870
msgid ""
"The `Scope` interface requires you to implement one method: `apply`. The "
"`apply` method may add `where` constraints or other types of clauses to the "
"query as needed:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:874
#, no-wrap
msgid "    namespace App\\Scopes;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:878
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
"    use Illuminate\\Database\\Eloquent\\Scope;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:893
#, no-wrap
msgid ""
"    class AncientScope implements Scope\n"
"    {\n"
"        /**\n"
"         * Apply the scope to a given Eloquent query builder.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @return void\n"
"         */\n"
"        public function apply(Builder $builder, Model $model)\n"
"        {\n"
"            $builder->where('created_at', '<', now()->subYears(2000));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:895
#, no-wrap
msgid ""
"> {tip} If your global scope is adding columns to the select clause of the "
"query, you should use the `addSelect` method instead of `select`. This will "
"prevent the unintentional replacement of the query's existing select "
"clause.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:897
#, no-wrap
msgid "<a name=\"applying-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:897
#, no-wrap
msgid "Applying Global Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:900
msgid ""
"To assign a global scope to a model, you should override the model's "
"`booted` method and invoke the model's `addGlobalScope` method. The "
"`addGlobalScope` method accepts an instance of your scope as its only "
"argument:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:907
#, no-wrap
msgid ""
"    use App\\Scopes\\AncientScope;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:920
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope(new AncientScope);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:922
msgid ""
"After adding the scope in the example above to the `App\\Models\\User` "
"model, a call to the `User::all()` method will execute the following SQL "
"query:"
msgstr ""

#. type: Code fence info string
#: docs/master/eloquent.md:923
#, no-wrap
msgid "sql"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:923
#, no-wrap
msgid "select * from `users` where `age` > 200\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:928
#, no-wrap
msgid "<a name=\"anonymous-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:928
#, no-wrap
msgid "Anonymous Global Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:931
msgid ""
"Eloquent also allows you to define global scopes using closures, which is "
"particularly useful for simple scopes that do not warrant a separate class "
"of their own. When defining a global scope using a closure, you should "
"provide a scope name of your own choosing as the first argument to the "
"`addGlobalScope` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:938
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Builder;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:953
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::addGlobalScope('ancient', function (Builder $builder) "
"{\n"
"                $builder->where('created_at', '<', now()->subYears(2000));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:955
#, no-wrap
msgid "<a name=\"removing-global-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:955
#, no-wrap
msgid "Removing Global Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:958
msgid ""
"If you would like to remove a global scope for a given query, you may use "
"the `withoutGlobalScope` method. This method accepts the class name of the "
"global scope as its only argument:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:960
#, no-wrap
msgid "    User::withoutGlobalScope(AncientScope::class)->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:962
msgid ""
"Or, if you defined the global scope using a closure, you should pass the "
"string name that you assigned to the global scope:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:964
#, no-wrap
msgid "    User::withoutGlobalScope('ancient')->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:966
msgid ""
"If you would like to remove several or even all of the query's global "
"scopes, you may use the `withoutGlobalScopes` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:969
#, no-wrap
msgid ""
"    // Remove all of the global scopes...\n"
"    User::withoutGlobalScopes()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:974
#, no-wrap
msgid ""
"    // Remove some of the global scopes...\n"
"    User::withoutGlobalScopes([\n"
"        FirstScope::class, SecondScope::class\n"
"    ])->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:976
#, no-wrap
msgid "<a name=\"local-scopes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:976
#, no-wrap
msgid "Local Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:979
msgid ""
"Local scopes allow you to define common sets of query constraints that you "
"may easily re-use throughout your application. For example, you may need to "
"frequently retrieve all users that are considered \"popular\". To define a "
"scope, prefix an Eloquent model method with `scope`."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:981
msgid "Scopes should always return a query builder instance:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1000
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include popular users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopePopular($query)\n"
"        {\n"
"            return $query->where('votes', '>', 100);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1012
#, no-wrap
msgid ""
"        /**\n"
"         * Scope a query to only include active users.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopeActive($query)\n"
"        {\n"
"            return $query->where('active', 1);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1014
#, no-wrap
msgid "<a name=\"utilizing-a-local-scope\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:1014
#, no-wrap
msgid "Utilizing A Local Scope"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1017
msgid ""
"Once the scope has been defined, you may call the scope methods when "
"querying the model. However, you should not include the `scope` prefix when "
"calling the method. You can even chain calls to various scopes:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1021
#, no-wrap
msgid "    $users = User::popular()->active()->orderBy('created_at')->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1023
msgid ""
"Combining multiple Eloquent model scopes via an `or` query operator may "
"require the use of closures to achieve the correct [logical "
"grouping](/docs/{{version}}/queries#logical-grouping):"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1027
#, no-wrap
msgid ""
"    $users = User::popular()->orWhere(function (Builder $query) {\n"
"        $query->active();\n"
"    })->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1029
msgid ""
"However, since this can be cumbersome, Laravel provides a \"higher order\" "
"`orWhere` method that allows you to fluently chain scopes together without "
"the use of closures:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1031
#, no-wrap
msgid "    $users = App\\Models\\User::popular()->orWhere->active()->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1033
#, no-wrap
msgid "<a name=\"dynamic-scopes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:1033
#, no-wrap
msgid "Dynamic Scopes"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1036
msgid ""
"Sometimes you may wish to define a scope that accepts parameters. To get "
"started, just add your additional parameters to your scope method's "
"signature. Scope parameters should be defined after the `$query` parameter:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1057
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Scope a query to only include users of a given type.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
"         * @param  mixed  $type\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
"         */\n"
"        public function scopeOfType($query, $type)\n"
"        {\n"
"            return $query->where('type', $type);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1059
msgid ""
"Once the expected arguments have been added to your scope method's "
"signature, you may pass the arguments when calling the scope:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1061
#, no-wrap
msgid "    $users = User::ofType('admin')->get();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1063
#, no-wrap
msgid "<a name=\"comparing-models\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:1063
#, no-wrap
msgid "Comparing Models"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1066
msgid ""
"Sometimes you may need to determine if two models are the \"same\". The `is` "
"method may be used to quickly verify two models have the same primary key, "
"table, and database connection:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1070
#, no-wrap
msgid ""
"    if ($post->is($anotherPost)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1072
msgid ""
"The `is` method is also available when using the `belongsTo`, `hasOne`, "
"`morphTo`, and `morphOne` "
"[relationships](/docs/{{version}}/eloquent-relationships). This method is "
"particularly helpful when you would like to compare a related model without "
"issuing a query to retrieve that model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1076
#, no-wrap
msgid ""
"    if ($post->author()->is($user)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1078
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/eloquent.md:1078
#, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1081
msgid ""
"Eloquent models dispatch several events, allowing you to hook into the "
"following moments in a model's lifecycle: `retrieved`, `creating`, "
"`created`, `updating`, `updated`, `saving`, `saved`, `deleting`, `deleted`, "
"`restoring`, `restored`, and `replicating`."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1083
msgid ""
"The `retrieved` event will dispatch when an existing model is retrieved from "
"the database. When a new model is saved for the first time, the `creating` "
"and `created` events will dispatch. The `updating` / `updated` events will "
"dispatch when an existing model is modified and the `save` method is "
"called. The `saving` / `saved` events will dispatch when a model is created "
"or updated - even if the model's attributes have not been changed."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1085
msgid ""
"To start listening to model events, define a `$dispatchesEvents` property on "
"your Eloquent model. This property maps various points of the Eloquent "
"model's lifecycle to your own [event "
"classes](/docs/{{version}}/events). Each model event class should expect to "
"receive an instance of the affected model via its constructor:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1093
#, no-wrap
msgid ""
"    use App\\Events\\UserDeleted;\n"
"    use App\\Events\\UserSaved;\n"
"    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1097
#, no-wrap
msgid ""
"    class User extends Authenticatable\n"
"    {\n"
"        use Notifiable;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1108
#, no-wrap
msgid ""
"        /**\n"
"         * The event map for the model.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $dispatchesEvents = [\n"
"            'saved' => UserSaved::class,\n"
"            'deleted' => UserDeleted::class,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1110
msgid ""
"After defining and mapping your Eloquent events, you may use [event "
"listeners](https://laravel.com/docs/{{version}}/events#defining-listeners) "
"to handle the events."
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1112
#, no-wrap
msgid ""
"> {note} When issuing a mass update or delete query via Eloquent, the "
"`saved`, `updated`, `deleting`, and `deleted` model events will not be "
"dispatched for the affected models. This is because the models are never "
"actually retrieved when performing mass updates or deletes.\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1114
#, no-wrap
msgid "<a name=\"events-using-closures\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:1114
#, no-wrap
msgid "Using Closures"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1117
msgid ""
"Instead of using custom event classes, you may register closures that "
"execute when various model events are dispatched. Typically, you should "
"register these closures in the `booted` method of your model:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1138
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The \"booted\" method of the model.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        protected static function booted()\n"
"        {\n"
"            static::created(function ($user) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1140
msgid ""
"If needed, you may utilize [queueable anonymous event "
"listeners](/docs/{{version}}/events#queuable-anonymous-event-listeners) when "
"registering model events. This will instruct Laravel to execute the model "
"event listener in the background using your application's "
"[queue](/docs/{{version}}/queues):"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1142
#, no-wrap
msgid "    use function Illuminate\\Events\\queueable;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1146
#, no-wrap
msgid ""
"    static::created(queueable(function ($user) {\n"
"        //\n"
"    }));\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1148
#, no-wrap
msgid "<a name=\"observers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:1148
#, no-wrap
msgid "Observers"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1151
#, no-wrap
msgid "<a name=\"defining-observers\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:1151
#, no-wrap
msgid "Defining Observers"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1154
msgid ""
"If you are listening for many events on a given model, you may use observers "
"to group all of your listeners into a single class. Observer classes have "
"method names which reflect the Eloquent events you wish to listen for. Each "
"of these methods receives the affected model as their only argument. The "
"`make:observer` Artisan command is the easiest way to create a new observer "
"class:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1156
#, no-wrap
msgid "    php artisan make:observer UserObserver --model=User\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1158
msgid ""
"This command will place the new observer in your `App/Observers` "
"directory. If this directory does not exist, Artisan will create it for "
"you. Your fresh observer will look like the following:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1162
#, no-wrap
msgid "    namespace App\\Observers;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1177
#, no-wrap
msgid ""
"    class UserObserver\n"
"    {\n"
"        /**\n"
"         * Handle the User \"created\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function created(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1188
#, no-wrap
msgid ""
"        /**\n"
"         * Handle the User \"updated\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function updated(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1199
#, no-wrap
msgid ""
"        /**\n"
"         * Handle the User \"deleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function deleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1211
#, no-wrap
msgid ""
"        /**\n"
"         * Handle the User \"forceDeleted\" event.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function forceDeleted(User $user)\n"
"        {\n"
"            //\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1213
msgid ""
"To register an observer, you need to call the `observe` method on the model "
"you wish to observe. You may register observers in the `boot` method of your "
"application's `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1216
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use App\\Observers\\UserObserver;\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1226
#, no-wrap
msgid ""
"    /**\n"
"     * Register any events for your application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        User::observe(UserObserver::class);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1228
#, no-wrap
msgid "<a name=\"muting-events\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/eloquent.md:1228
#, no-wrap
msgid "Muting Events"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1231
msgid ""
"You may occasionally need to temporarily \"mute\" all events fired by a "
"model. You may achieve this using the `withoutEvents` method. The "
"`withoutEvents` method accepts a closure as its only argument. Any code "
"executed within this closure will not dispatch model events. For example, "
"the following example will fetch and delete an `App\\Models\\User` instance "
"without dispatching any model events. Any value returned by the closure will "
"be returned by the `withoutEvents` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1236
#, no-wrap
msgid ""
"    $user = User::withoutEvents(function () use () {\n"
"        User::findOrFail(1)->delete();\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1239
#, no-wrap
msgid ""
"        return User::find(2);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1241
#, no-wrap
msgid "<a name=\"saving-a-single-model-without-events\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/eloquent.md:1241
#, no-wrap
msgid "Saving A Single Model Without Events"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1244
msgid ""
"Sometimes you may wish to \"save\" a given model without dispatching any "
"events. You may accomplish this using the `saveQuietly` method:"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1246
#, no-wrap
msgid "    $user = User::findOrFail(1);\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1248
#, no-wrap
msgid "    $user->name = 'Victoria Faith';\n"
msgstr ""

#. type: Plain text
#: docs/master/eloquent.md:1249
#, no-wrap
msgid "    $user->saveQuietly();\n"
msgstr ""
