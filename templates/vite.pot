#
msgid ""
msgstr ""

#: docs/9.x/vite.md:block 1 (header)
msgid "Asset Bundling (Vite)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installation & Setup](#installation)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installing Node](#installing-node)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installing Vite And The Laravel Plugin](#installing-vite-and-laravel-plugin)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Configuring Vite](#configuring-vite)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Loading Your Scripts And Styles](#loading-your-scripts-and-styles)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Running Vite](#running-vite)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With JavaScript](#working-with-scripts)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Aliases](#aliases)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Vue](#vue)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[React](#react)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Inertia](#inertia)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[URL Processing](#url-processing)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With Stylesheets](#working-with-stylesheets)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With Blade & Routes](#working-with-blade-and-routes)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Processing Static Assets With Vite](#blade-processing-static-assets)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Refreshing On Save](#blade-refreshing-on-save)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Aliases](#blade-aliases)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Custom Base URLs](#custom-base-urls)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Environment Variables](#environment-variables)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Disabling Vite In Tests](#disabling-vite-in-tests)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Server-Side Rendering (SSR)](#ssr)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Script & Style Tag Attributes](#script-and-style-attributes)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Content Security Policy (CSP) Nonce](#content-security-policy-csp-nonce)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Subresource Integrity (SRI)](#subresource-integrity-sri)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Arbitrary Attributes](#arbitrary-attributes)"
msgstr ""

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Advanced Customization](#advanced-customization)"
msgstr ""

#: docs/9.x/vite.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/9.x/vite.md:block 5 (paragraph)
msgid "[Vite](https://vitejs.dev) is a modern frontend build tool that provides an extremely fast development environment and bundles your code for production. When building applications with Laravel, you will typically use Vite to bundle your application's CSS and JavaScript files into production ready assets."
msgstr ""

#: docs/9.x/vite.md:block 6 (paragraph)
msgid "Laravel integrates seamlessly with Vite by providing an official plugin and Blade directive to load your assets for development and production."
msgstr ""

#: docs/9.x/vite.md:block 7 (quote)
msgid "**Note** Are you running Laravel Mix? Vite has replaced Laravel Mix in new Laravel installations. For Mix documentation, please visit the [Laravel Mix](https://laravel-mix.com/) website. If you would like to switch to Vite, please see our [migration guide](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite)."
msgstr ""

#: docs/9.x/vite.md:block 9 (header)
msgid "Choosing Between Vite And Laravel Mix"
msgstr ""

#: docs/9.x/vite.md:block 10 (paragraph)
msgid "Before transitioning to Vite, new Laravel applications utilized [Mix](https://laravel-mix.com/), which is powered by [webpack](https://webpack.js.org/), when bundling assets. Vite focuses on providing a faster and more productive experience when building rich JavaScript applications. If you are developing a Single Page Application (SPA), including those developed with tools like [Inertia](https://inertiajs.com), Vite will be the perfect fit."
msgstr ""

#: docs/9.x/vite.md:block 11 (paragraph)
msgid "Vite also works well with traditional server-side rendered applications with JavaScript \"sprinkles\", including those using [Livewire](https://laravel-livewire.com). However, it lacks some features that Laravel Mix supports, such as the ability to copy arbitrary assets into the build that are not referenced directly in your JavaScript application."
msgstr ""

#: docs/9.x/vite.md:block 13 (header)
msgid "Migrating Back To Mix"
msgstr ""

#: docs/9.x/vite.md:block 14 (paragraph)
msgid "Have you started a new Laravel application using our Vite scaffolding but need to move back to Laravel Mix and webpack? No problem. Please consult our [official guide on migrating from Vite to Mix](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-vite-to-laravel-mix)."
msgstr ""

#: docs/9.x/vite.md:block 16 (header)
msgid "Installation & Setup"
msgstr ""

#: docs/9.x/vite.md:block 17 (quote)
msgid "**Note** The following documentation discusses how to manually install and configure the Laravel Vite plugin. However, Laravel's [starter kits](/docs/{{version}}/starter-kits) already include all of this scaffolding and are the fastest way to get started with Laravel and Vite."
msgstr ""

#: docs/9.x/vite.md:block 19 (header)
msgid "Installing Node"
msgstr ""

#: docs/9.x/vite.md:block 20 (paragraph)
msgid "You must ensure that Node.js (16+) and NPM are installed before running Vite and the Laravel plugin:"
msgstr ""

#: docs/9.x/vite.md:block 21 (code)
msgid ""
"node -v\n"
"npm -v\n"
msgstr ""

#: docs/9.x/vite.md:block 22 (paragraph)
msgid "You can easily install the latest version of Node and NPM using simple graphical installers from [the official Node website](https://nodejs.org/en/download/). Or, if you are using [Laravel Sail](https://laravel.com/docs/{{version}}/sail), you may invoke Node and NPM through Sail:"
msgstr ""

#: docs/9.x/vite.md:block 23 (code)
msgid ""
"./vendor/bin/sail node -v\n"
"./vendor/bin/sail npm -v\n"
msgstr ""

#: docs/9.x/vite.md:block 25 (header)
msgid "Installing Vite And The Laravel Plugin"
msgstr ""

#: docs/9.x/vite.md:block 26 (paragraph)
msgid "Within a fresh installation of Laravel, you will find a `package.json` file in the root of your application's directory structure. The default `package.json` file already includes everything you need to get started using Vite and the Laravel plugin. You may install your application's frontend dependencies via NPM:"
msgstr ""

#: docs/9.x/vite.md:block 27 (code)
msgid "npm install\n"
msgstr ""

#: docs/9.x/vite.md:block 29 (header)
msgid "Configuring Vite"
msgstr ""

#: docs/9.x/vite.md:block 30 (paragraph)
msgid "Vite is configured via a `vite.config.js` file in the root of your project. You are free to customize this file based on your needs, and you may also install any other plugins your application requires, such as `@vitejs/plugin-vue` or `@vitejs/plugin-react`."
msgstr ""

#: docs/9.x/vite.md:block 31 (paragraph)
msgid "The Laravel Vite plugin requires you to specify the entry points for your application. These may be JavaScript or CSS files, and include preprocessed languages such as TypeScript, JSX, TSX, and Sass."
msgstr ""

#: docs/9.x/vite.md:block 32 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css',\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 33 (paragraph)
msgid "If you are building an SPA, including applications built using Inertia, Vite works best without CSS entry points:"
msgstr ""

#: docs/9.x/vite.md:block 34 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css', // [tl! remove]\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 35 (paragraph)
msgid "Instead, you should import your CSS via JavaScript. Typically, this would be done in your application's `resources/js/app.js` file:"
msgstr ""

#: docs/9.x/vite.md:block 36 (code)
msgid ""
"import './bootstrap';\n"
"import '../css/app.css'; // [tl! add]\n"
msgstr ""

#: docs/9.x/vite.md:block 37 (paragraph)
msgid "The Laravel plugin also supports multiple entry points and advanced configuration options such as [SSR entry points](#ssr)."
msgstr ""

#: docs/9.x/vite.md:block 39 (header)
msgid "Working With A Secure Development Server"
msgstr ""

#: docs/9.x/vite.md:block 40 (paragraph)
msgid "If your local development web server is serving your application via HTTPS, you may run into issues connecting to the Vite development server."
msgstr ""

#: docs/9.x/vite.md:block 41 (paragraph)
msgid "If you are using [Laravel Valet](/docs/{{version}}/valet) for local development and have run the [secure command](/docs/{{version}}/valet#securing-sites) against your application, you may configure the Vite development server to automatically use Valet's generated TLS certificates:"
msgstr ""

#: docs/9.x/vite.md:block 42 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            valetTls: 'my-app.test', // [tl! add]\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 43 (paragraph)
msgid "When using another web server, you should generate a trusted certificate and manually configure Vite to use the generated certificates:"
msgstr ""

#: docs/9.x/vite.md:block 44 (code)
msgid ""
"// ...\n"
"import fs from 'fs'; // [tl! add]\n"
"\n"
"const host = 'my-app.test'; // [tl! add]\n"
"\n"
"export default defineConfig({\n"
"    // ...\n"
"    server: { // [tl! add]\n"
"        host, // [tl! add]\n"
"        hmr: { host }, // [tl! add]\n"
"        https: { // [tl! add]\n"
"            key: fs.readFileSync(`/path/to/${host}.key`), // [tl! add]\n"
"            cert: fs.readFileSync(`/path/to/${host}.crt`), // [tl! add]\n"
"        }, // [tl! add]\n"
"    }, // [tl! add]\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 45 (paragraph)
msgid "If you are unable to generate a trusted certificate for your system, you may install and configure the [`@vitejs/plugin-basic-ssl` plugin](https://github.com/vitejs/vite-plugin-basic-ssl). When using untrusted certificates, you will need to accept the certificate warning for Vite's development server in your browser by following the \"Local\" link in your console when running the `npm run dev` command."
msgstr ""

#: docs/9.x/vite.md:block 47 (header)
msgid "Loading Your Scripts And Styles"
msgstr ""

#: docs/9.x/vite.md:block 48 (paragraph)
msgid "With your Vite entry points configured, you only need reference them in a `@vite()` Blade directive that you add to the `<head>` of your application's root template:"
msgstr ""

#: docs/9.x/vite.md:block 49 (code)
msgid ""
"<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n"
"\n"
"    @vite(['resources/css/app.css', 'resources/js/app.js'])\n"
"</head>\n"
msgstr ""

#: docs/9.x/vite.md:block 50 (paragraph)
msgid "If you're importing your CSS via JavaScript, you only need to include the JavaScript entry point:"
msgstr ""

#: docs/9.x/vite.md:block 51 (code)
msgid ""
"<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n"
"\n"
"    @vite('resources/js/app.js')\n"
"</head>\n"
msgstr ""

#: docs/9.x/vite.md:block 52 (paragraph)
msgid "The `@vite` directive will automatically detect the Vite development server and inject the Vite client to enable Hot Module Replacement. In build mode, the directive will load your compiled and versioned assets, including any imported CSS."
msgstr ""

#: docs/9.x/vite.md:block 53 (paragraph)
msgid "If needed, you may also specify the build path of your compiled assets when invoking the `@vite` directive:"
msgstr ""

#: docs/9.x/vite.md:block 54 (code)
msgid ""
"<!doctype html>\n"
"<head>\n"
"    {{-- Given build path is relative to public path. --}}\n"
"\n"
"    @vite('resources/js/app.js', 'vendor/courier/build')\n"
"</head>\n"
msgstr ""

#: docs/9.x/vite.md:block 56 (header)
msgid "Running Vite"
msgstr ""

#: docs/9.x/vite.md:block 57 (paragraph)
msgid "There are two ways you can run Vite. You may run the development server via the `dev` command, which is useful while developing locally. The development server will automatically detect changes to your files and instantly reflect them in any open browser windows."
msgstr ""

#: docs/9.x/vite.md:block 58 (paragraph)
msgid "Or, running the `build` command will version and bundle your application's assets and get them ready for you to deploy to production:"
msgstr ""

#: docs/9.x/vite.md:block 59 (code)
msgid ""
"# Run the Vite development server...\n"
"npm run dev\n"
"\n"
"# Build and version the assets for production...\n"
"npm run build\n"
msgstr ""

#: docs/9.x/vite.md:block 61 (header)
msgid "Working With JavaScript"
msgstr ""

#: docs/9.x/vite.md:block 63 (header)
msgid "Aliases"
msgstr ""

#: docs/9.x/vite.md:block 64 (paragraph)
msgid "By default, The Laravel plugin provides a common alias to help you hit the ground running and conveniently import your application's assets:"
msgstr ""

#: docs/9.x/vite.md:block 65 (code)
msgid ""
"{\n"
"    '@' => '/resources/js'\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 66 (paragraph)
msgid "You may overwrite the `'@'` alias by adding your own to the `vite.config.js` configuration file:"
msgstr ""

#: docs/9.x/vite.md:block 67 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/ts/app.tsx']),\n"
"    ],\n"
"    resolve: {\n"
"        alias: {\n"
"            '@': '/resources/ts',\n"
"        },\n"
"    },\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 69 (header)
msgid "Vue"
msgstr ""

#: docs/9.x/vite.md:block 70 (paragraph)
msgid "There are a few additional options you will need to include in the `vite.config.js` configuration file when using the Vue plugin with the Laravel plugin:"
msgstr ""

#: docs/9.x/vite.md:block 71 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import vue from '@vitejs/plugin-vue';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/js/app.js']),\n"
"        vue({\n"
"            template: {\n"
"                transformAssetUrls: {\n"
"                    // The Vue plugin will re-write asset URLs, when referenced\n"
"                    // in Single File Components, to point to the Laravel web\n"
"                    // server. Setting this to `null` allows the Laravel plugin\n"
"                    // to instead re-write asset URLs to point to the Vite\n"
"                    // server instead.\n"
"                    base: null,\n"
"\n"
"                    // The Vue plugin will parse absolute URLs and treat them\n"
"                    // as absolute paths to files on disk. Setting this to\n"
"                    // `false` will leave absolute URLs un-touched so they can\n"
"                    // reference assets in the public directory as expected.\n"
"                    includeAbsolute: false,\n"
"                },\n"
"            },\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 72 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Vue, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Vue, and Vite."
msgstr ""

#: docs/9.x/vite.md:block 74 (header)
msgid "React"
msgstr ""

#: docs/9.x/vite.md:block 75 (paragraph)
msgid "When using Vite with React, you will need to ensure that any files containing JSX have a `.jsx` or `.tsx` extension, remembering to update your entry point, if required, as [shown above](#configuring-vite). You will also need to include the additional `@viteReactRefresh` Blade directive alongside your existing `@vite` directive."
msgstr ""

#: docs/9.x/vite.md:block 76 (code)
msgid ""
"@viteReactRefresh\n"
"@vite('resources/js/app.jsx')\n"
msgstr ""

#: docs/9.x/vite.md:block 77 (paragraph)
msgid "The `@viteReactRefresh` directive must be called before the `@vite` directive."
msgstr ""

#: docs/9.x/vite.md:block 78 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, React, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, React, and Vite."
msgstr ""

#: docs/9.x/vite.md:block 80 (header)
msgid "Inertia"
msgstr ""

#: docs/9.x/vite.md:block 81 (paragraph)
msgid "The Laravel Vite plugin provides a convenient `resolvePageComponent` function to help you resolve your Inertia page components. Below is an example of the helper in use with Vue 3; however, you may also utilize the function in other frameworks such as React:"
msgstr ""

#: docs/9.x/vite.md:block 82 (code)
msgid ""
"import { createApp, h } from 'vue';\n"
"import { createInertiaApp } from '@inertiajs/vue3';\n"
"import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';\n"
"\n"
"createInertiaApp({\n"
"  resolve: (name) => resolvePageComponent(`./Pages/${name}.vue`, import.meta.glob('./Pages/**/*.vue')),\n"
"  setup({ el, App, props, plugin }) {\n"
"    return createApp({ render: () => h(App, props) })\n"
"      .use(plugin)\n"
"      .mount(el)\n"
"  },\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 83 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Inertia, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Inertia, and Vite."
msgstr ""

#: docs/9.x/vite.md:block 85 (header)
msgid "URL Processing"
msgstr ""

#: docs/9.x/vite.md:block 86 (paragraph)
msgid "When using Vite and referencing assets in your application's HTML, CSS, or JS, there are a couple of caveats to consider. First, if you reference assets with an absolute path, Vite will not include the asset in the build; therefore, you should ensure that the asset is available in your public directory."
msgstr ""

#: docs/9.x/vite.md:block 87 (paragraph)
msgid "When referencing relative asset paths, you should remember that the paths are relative to the file where they are referenced. Any assets referenced via a relative path will be re-written, versioned, and bundled by Vite."
msgstr ""

#: docs/9.x/vite.md:block 88 (paragraph)
msgid "Consider the following project structure:"
msgstr ""

#: docs/9.x/vite.md:block 89 (code)
msgid ""
"public/\n"
"  taylor.png\n"
"resources/\n"
"  js/\n"
"    Pages/\n"
"      Welcome.vue\n"
"  images/\n"
"    abigail.png\n"
msgstr ""

#: docs/9.x/vite.md:block 90 (paragraph)
msgid "The following example demonstrates how Vite will treat relative and absolute URLs:"
msgstr ""

#: docs/9.x/vite.md:block 91 (code)
msgid ""
"<!-- This asset is not handled by Vite and will not be included in the build -->\n"
"<img src=\"/taylor.png\">\n"
"\n"
"<!-- This asset will be re-written, versioned, and bundled by Vite -->\n"
"<img src=\"../../images/abigail.png\">\n"
msgstr ""

#: docs/9.x/vite.md:block 93 (header)
msgid "Working With Stylesheets"
msgstr ""

#: docs/9.x/vite.md:block 94 (paragraph)
msgid "You can learn more about Vite's CSS support within the [Vite documentation](https://vitejs.dev/guide/features.html#css). If you are using PostCSS plugins such as [Tailwind](https://tailwindcss.com), you may create a `postcss.config.js` file in the root of your project and Vite will automatically apply it:"
msgstr ""

#: docs/9.x/vite.md:block 95 (code)
msgid ""
"module.exports = {\n"
"    plugins: {\n"
"        tailwindcss: {},\n"
"        autoprefixer: {},\n"
"    },\n"
"};\n"
msgstr ""

#: docs/9.x/vite.md:block 97 (header)
msgid "Working With Blade & Routes"
msgstr ""

#: docs/9.x/vite.md:block 99 (header)
msgid "Processing Static Assets With Vite"
msgstr ""

#: docs/9.x/vite.md:block 100 (paragraph)
msgid "When referencing assets in your JavaScript or CSS, Vite automatically processes and versions them. In addition, when building Blade based applications, Vite can also process and version static assets that you reference solely in Blade templates."
msgstr ""

#: docs/9.x/vite.md:block 101 (paragraph)
msgid "However, in order to accomplish this, you need to make Vite aware of your assets by importing the static assets into the application's entry point. For example, if you want to process and version all images stored in `resources/images` and all fonts stored in `resources/fonts`, you should add the following in your application's `resources/js/app.js` entry point:"
msgstr ""

#: docs/9.x/vite.md:block 102 (code)
msgid ""
"import.meta.glob([\n"
"  '../images/**',\n"
"  '../fonts/**',\n"
"]);\n"
msgstr ""

#: docs/9.x/vite.md:block 103 (paragraph)
msgid "These assets will now be processed by Vite when running `npm run build`. You can then reference these assets in Blade templates using the `Vite::asset` method, which will return the versioned URL for a given asset:"
msgstr ""

#: docs/9.x/vite.md:block 104 (code)
msgid "<img src=\"{{ Vite::asset('resources/images/logo.png') }}\">\n"
msgstr ""

#: docs/9.x/vite.md:block 106 (header)
msgid "Refreshing On Save"
msgstr ""

#: docs/9.x/vite.md:block 107 (paragraph)
msgid "When your application is built using traditional server-side rendering with Blade, Vite can improve your development workflow by automatically refreshing the browser when you make changes to view files in your application. To get started, you can simply specify the `refresh` option as `true`."
msgstr ""

#: docs/9.x/vite.md:block 108 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: true,\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 109 (paragraph)
msgid "When the `refresh` option is `true`, saving files in the following directories will trigger the browser to perform a full page refresh while you are running `npm run dev`:"
msgstr ""

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`app/View/Components/**`"
msgstr ""

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`lang/**`"
msgstr ""

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`resources/lang/**`"
msgstr ""

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`resources/views/**`"
msgstr ""

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`routes/**`"
msgstr ""

#: docs/9.x/vite.md:block 111 (paragraph)
msgid "Watching the `routes/**` directory is useful if you are utilizing [Ziggy](https://github.com/tighten/ziggy) to generate route links within your application's frontend."
msgstr ""

#: docs/9.x/vite.md:block 112 (paragraph)
msgid "If these default paths do not suit your needs, you can specify your own list of paths to watch:"
msgstr ""

#: docs/9.x/vite.md:block 113 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: ['resources/views/**'],\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 114 (paragraph)
msgid "Under the hood, the Laravel Vite plugin uses the [`vite-plugin-full-reload`](https://github.com/ElMassimo/vite-plugin-full-reload) package, which offers some advanced configuration options to fine-tune this feature's behavior. If you need this level of customization, you may provide a `config` definition:"
msgstr ""

#: docs/9.x/vite.md:block 115 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: [{\n"
"                paths: ['path/to/watch/**'],\n"
"                config: { delay: 300 }\n"
"            }],\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 118 (paragraph)
msgid "It is common in JavaScript applications to [create aliases](#aliases) to regularly referenced directories. But, you may also create aliases to use in Blade by using the `macro` method on the `Illuminate\\Support\\Vite` class. Typically, \"macros\" should be defined within the `boot` method of a [service provider](/docs/{{version}}/providers):"
msgstr ""

#: docs/9.x/vite.md:block 119 (code)
msgid ""
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Vite::macro('image', fn ($asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 120 (paragraph)
msgid "Once a macro has been defined, it can be invoked within your templates. For example, we can use the `image` macro defined above to reference an asset located at `resources/images/logo.png`:"
msgstr ""

#: docs/9.x/vite.md:block 121 (code)
msgid "<img src=\"{{ Vite::image('logo.png') }}\" alt=\"Laravel Logo\">\n"
msgstr ""

#: docs/9.x/vite.md:block 123 (header)
msgid "Custom Base URLs"
msgstr ""

#: docs/9.x/vite.md:block 124 (paragraph)
msgid "If your Vite compiled assets are deployed to a domain separate from your application, such as via a CDN, you must specify the `ASSET_URL` environment variable within your application's `.env` file:"
msgstr ""

#: docs/9.x/vite.md:block 125 (code)
msgid "ASSET_URL=https://cdn.example.com\n"
msgstr ""

#: docs/9.x/vite.md:block 126 (paragraph)
msgid "After configuring the asset URL, all re-written URLs to your assets will be prefixed with the configured value:"
msgstr ""

#: docs/9.x/vite.md:block 127 (code)
msgid "https://cdn.example.com/build/assets/app.9dce8d17.js\n"
msgstr ""

#: docs/9.x/vite.md:block 128 (paragraph)
msgid "Remember that [absolute URLs are not re-written by Vite](#url-processing), so they will not be prefixed."
msgstr ""

#: docs/9.x/vite.md:block 130 (header)
msgid "Environment Variables"
msgstr ""

#: docs/9.x/vite.md:block 131 (paragraph)
msgid "You may inject environment variables into your JavaScript by prefixing them with `VITE_` in your application's `.env` file:"
msgstr ""

#: docs/9.x/vite.md:block 132 (code)
msgid "VITE_SENTRY_DSN_PUBLIC=http://example.com\n"
msgstr ""

#: docs/9.x/vite.md:block 133 (paragraph)
msgid "You may access injected environment variables via the `import.meta.env` object:"
msgstr ""

#: docs/9.x/vite.md:block 134 (code)
msgid "import.meta.env.VITE_SENTRY_DSN_PUBLIC\n"
msgstr ""

#: docs/9.x/vite.md:block 136 (header)
msgid "Disabling Vite In Tests"
msgstr ""

#: docs/9.x/vite.md:block 137 (paragraph)
msgid "Laravel's Vite integration will attempt to resolve your assets while running your tests, which requires you to either run the Vite development server or build your assets."
msgstr ""

#: docs/9.x/vite.md:block 138 (paragraph)
msgid "If you would prefer to mock Vite during testing, you may call the `withoutVite` method, which is is available for any tests that extend Laravel's `TestCase` class:"
msgstr ""

#: docs/9.x/vite.md:block 139 (code)
msgid ""
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example()\n"
"    {\n"
"        $this->withoutVite();\n"
"\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 140 (paragraph)
msgid "If you would like to disable Vite for all tests, you may call the `withoutVite` method from the `setUp` method on your base `TestCase` class:"
msgstr ""

#: docs/9.x/vite.md:block 141 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n"
"\n"
"abstract class TestCase extends BaseTestCase\n"
"{\n"
"    use CreatesApplication;\n"
"\n"
"    protected function setUp(): void// [tl! add:start]\n"
"    {\n"
"        parent::setUp();\n"
"\n"
"        $this->withoutVite();\n"
"    }// [tl! add:end]\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 143 (header)
msgid "Server-Side Rendering (SSR)"
msgstr ""

#: docs/9.x/vite.md:block 144 (paragraph)
msgid "The Laravel Vite plugin makes it painless to set up server-side rendering with Vite. To get started, create an SSR entry point at `resources/js/ssr.js` and specify the entry point by passing a configuration option to the Laravel plugin:"
msgstr ""

#: docs/9.x/vite.md:block 145 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            input: 'resources/js/app.js',\n"
"            ssr: 'resources/js/ssr.js',\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 146 (paragraph)
msgid "To ensure you don't forget to rebuild the SSR entry point, we recommend augmenting the \"build\" script in your application's `package.json` to create your SSR build:"
msgstr ""

#: docs/9.x/vite.md:block 147 (code)
msgid ""
"\"scripts\": {\n"
"     \"dev\": \"vite\",\n"
"     \"build\": \"vite build\" // [tl! remove]\n"
"     \"build\": \"vite build && vite build --ssr\" // [tl! add]\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 148 (paragraph)
msgid "Then, to build and start the SSR server, you may run the following commands:"
msgstr ""

#: docs/9.x/vite.md:block 149 (code)
msgid ""
"npm run build\n"
"node bootstrap/ssr/ssr.mjs\n"
msgstr ""

#: docs/9.x/vite.md:block 150 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Inertia SSR, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Inertia SSR, and Vite."
msgstr ""

#: docs/9.x/vite.md:block 152 (header)
msgid "Script & Style Tag Attributes"
msgstr ""

#: docs/9.x/vite.md:block 154 (header)
msgid "Content Security Policy (CSP) Nonce"
msgstr ""

#: docs/9.x/vite.md:block 155 (paragraph)
msgid "If you wish to include a [`nonce` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) on your script and style tags as part of your [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), you may generate or specify a nonce using the `useCspNonce` method within a custom [middleware](/docs/{{version}}/middleware):"
msgstr ""

#: docs/9.x/vite.md:block 156 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Support\\Facades\\Vite;\n"
"\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        Vite::useCspNonce();\n"
"\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/vite.md:block 157 (paragraph)
msgid "After invoking the `useCspNonce` method, Laravel will automatically include the `nonce` attributes on all generated script and style tags."
msgstr ""

#: docs/9.x/vite.md:block 158 (paragraph)
msgid "If you need to specify the nonce elsewhere, including the [Ziggy `@route` directive](https://github.com/tighten/ziggy#using-routes-with-a-content-security-policy) included with Laravel's [starter kits](/docs/{{version}}/starter-kits), you may retrieve it using the `cspNonce` method:"
msgstr ""

#: docs/9.x/vite.md:block 159 (code)
msgid "@routes(nonce: Vite::cspNonce())\n"
msgstr ""

#: docs/9.x/vite.md:block 160 (paragraph)
msgid "If you already have a nonce that you would like to instruct Laravel to use, you may pass the nonce to the `useCspNonce` method:"
msgstr ""

#: docs/9.x/vite.md:block 161 (code)
msgid "Vite::useCspNonce($nonce);\n"
msgstr ""

#: docs/9.x/vite.md:block 163 (header)
msgid "Subresource Integrity (SRI)"
msgstr ""

#: docs/9.x/vite.md:block 164 (paragraph)
msgid "If your Vite manifest includes `integrity` hashes for your assets, Laravel will automatically add the `integrity` attribute on any script and style tags it generates in order to enforce [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity). By default, Vite does not include the `integrity` hash in its manifest, but you may enable it by installing the [`vite-plugin-manifest-uri`](https://www.npmjs.com/package/vite-plugin-manifest-sri) NPM plugin:"
msgstr ""

#: docs/9.x/vite.md:block 165 (code)
msgid "npm install -D vite-plugin-manifest-sri\n"
msgstr ""

#: docs/9.x/vite.md:block 166 (paragraph)
msgid "You may then enable this plugin in your `vite.config.js` file:"
msgstr ""

#: docs/9.x/vite.md:block 167 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import manifestSRI from 'vite-plugin-manifest-sri';// [tl! add]\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"        }),\n"
"        manifestSRI(),// [tl! add]\n"
"    ],\n"
"});\n"
msgstr ""

#: docs/9.x/vite.md:block 168 (paragraph)
msgid "If required, you may also customize the manifest key where the integrity hash can be found:"
msgstr ""

#: docs/9.x/vite.md:block 169 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Vite;\n"
"\n"
"Vite::useIntegrityKey('custom-integrity-key');\n"
msgstr ""

#: docs/9.x/vite.md:block 170 (paragraph)
msgid "If you would like to disable this auto-detection completely, you may pass `false` to the `useIntegrityKey` method:"
msgstr ""

#: docs/9.x/vite.md:block 171 (code)
msgid "Vite::useIntegrityKey(false);\n"
msgstr ""

#: docs/9.x/vite.md:block 173 (header)
msgid "Arbitrary Attributes"
msgstr ""

#: docs/9.x/vite.md:block 174 (paragraph)
msgid "If you need to include additional attributes on your script and style tags, such as the [`data-turbo-track`](https://turbo.hotwired.dev/handbook/drive#reloading-when-assets-change) attribute, you may specify them via the `useScriptTagAttributes` and `useStyleTagAttributes` methods. Typically, this methods should be invoked from a [service provider](/docs/{{version}}/providers):"
msgstr ""

#: docs/9.x/vite.md:block 175 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Vite;\n"
"\n"
"Vite::useScriptTagAttributes([\n"
"    'data-turbo-track' => 'reload', // Specify a value for the attribute...\n"
"    'async' => true, // Specify an attribute without a value...\n"
"    'integrity' => false, // Exclude an attribute that would otherwise be included...\n"
"]);\n"
"\n"
"Vite::useStyleTagAttributes([\n"
"    'data-turbo-track' => 'reload',\n"
"]);\n"
msgstr ""

#: docs/9.x/vite.md:block 176 (paragraph)
msgid "If you need to conditionally add attributes, you may pass a callback that will receive the asset source path, its URL, its manifest chunk, and the entire manifest:"
msgstr ""

#: docs/9.x/vite.md:block 177 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Vite;\n"
"\n"
"Vite::useScriptTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $src === 'resources/js/app.js' ? 'reload' : false,\n"
"]);\n"
"\n"
"Vite::useStyleTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $chunk && $chunk['isEntry'] ? 'reload' : false,\n"
"]);\n"
msgstr ""

#: docs/9.x/vite.md:block 178 (quote)
msgid "**Warning** The `$chunk` and `$manifest` arguments will be `null` while the Vite development server is running."
msgstr ""

#: docs/9.x/vite.md:block 180 (header)
msgid "Advanced Customization"
msgstr ""

#: docs/9.x/vite.md:block 181 (paragraph)
msgid "Out of the box, Laravel's Vite plugin uses sensible conventions that should work for the majority of applications; however, sometimes you may need to customize Vite's behavior. To enable additional customization options, we offer the following methods and options which can be used in place of the `@vite` Blade directive:"
msgstr ""

#: docs/9.x/vite.md:block 182 (code)
msgid ""
"<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n"
"\n"
"    {{\n"
"        Vite::useHotFile(storage_path('vite.hot')) // Customize the \"hot\" file...\n"
"            ->useBuildDirectory('bundle') // Customize the build directory...\n"
"            ->useManifestFilename('assets.json') // Customize the manifest filename...\n"
"            ->withEntryPoints(['resources/js/app.js']) // Specify the entry points...\n"
"    }}\n"
"</head>\n"
msgstr ""

#: docs/9.x/vite.md:block 183 (paragraph)
msgid "Within the `vite.config.js` file, you should then specify the same configuration:"
msgstr ""

#: docs/9.x/vite.md:block 184 (code)
msgid ""
"import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            hotFile: 'storage/vite.hot', // Customize the \"hot\" file...\n"
"            buildDirectory: 'bundle', // Customize the build directory...\n"
"            input: ['resources/js/app.js'], // Specify the entry points...\n"
"        }),\n"
"    ],\n"
"    build: {\n"
"      manifest: 'assets.json', // Customize the manifest filename...\n"
"    },\n"
"});\n"
msgstr ""

#: docs/master/vite.md:block 119 (code)
msgid ""
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Vite::macro('image', fn (string $asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"
msgstr ""

#: docs/master/vite.md:block 139 (code)
msgid ""
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example(): void\n"
"    {\n"
"        $this->withoutVite();\n"
"\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/vite.md:block 156 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Vite;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next, string $role): Response\n"
"    {\n"
"        Vite::useCspNonce();\n"
"\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""
