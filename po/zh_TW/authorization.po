msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/authorization.pot\n"
"X-Crowdin-File-ID: 13\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:57\n"

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "Controller Method"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "Policy Method"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "index"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "viewAny"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "show"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "view"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "create"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "store"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "edit"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "update"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "destroy"
msgstr ""

#: ./docs/8.x/authorization.md
#: ./docs/9.x/authorization.md
#: ./docs/10.x/authorization.md
msgctxt "TD"
msgid "delete"
msgstr ""

#: ./docs/8.x/authorization.md:1
#: ./docs/9.x/authorization.md:1
#: ./docs/10.x/authorization.md:1
#: ./docs/11.x/authorization.md:1
#: ./docs/master/authorization.md:1
msgctxt "H1"
msgid "Authorization"
msgstr ""

#: ./docs/8.x/authorization.md:3
#: ./docs/9.x/authorization.md:3
#: ./docs/10.x/authorization.md:3
#: ./docs/11.x/authorization.md:3
#: ./docs/master/authorization.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/authorization.md:4
#: ./docs/9.x/authorization.md:4
#: ./docs/10.x/authorization.md:4
#: ./docs/11.x/authorization.md:4
#: ./docs/master/authorization.md:4
msgctxt "P"
msgid "[Gates](#gates)"
msgstr ""

#: ./docs/8.x/authorization.md:5
#: ./docs/9.x/authorization.md:5
#: ./docs/10.x/authorization.md:5
#: ./docs/11.x/authorization.md:5
#: ./docs/master/authorization.md:5
msgctxt "P"
msgid "[Writing Gates](#writing-gates)"
msgstr ""

#: ./docs/8.x/authorization.md:6
#: ./docs/9.x/authorization.md:6
#: ./docs/10.x/authorization.md:6
#: ./docs/11.x/authorization.md:6
#: ./docs/master/authorization.md:6
msgctxt "P"
msgid "[Authorizing Actions](#authorizing-actions-via-gates)"
msgstr ""

#: ./docs/8.x/authorization.md:7
#: ./docs/9.x/authorization.md:7
#: ./docs/10.x/authorization.md:7
#: ./docs/11.x/authorization.md:7
#: ./docs/master/authorization.md:7
msgctxt "P"
msgid "[Gate Responses](#gate-responses)"
msgstr ""

#: ./docs/8.x/authorization.md:8
#: ./docs/9.x/authorization.md:8
#: ./docs/10.x/authorization.md:8
#: ./docs/11.x/authorization.md:8
#: ./docs/master/authorization.md:8
msgctxt "P"
msgid "[Intercepting Gate Checks](#intercepting-gate-checks)"
msgstr ""

#: ./docs/8.x/authorization.md:9
#: ./docs/9.x/authorization.md:9
#: ./docs/10.x/authorization.md:9
#: ./docs/11.x/authorization.md:9
#: ./docs/master/authorization.md:9
msgctxt "P"
msgid "[Inline Authorization](#inline-authorization)"
msgstr ""

#: ./docs/8.x/authorization.md:10
#: ./docs/9.x/authorization.md:10
#: ./docs/10.x/authorization.md:10
#: ./docs/11.x/authorization.md:10
#: ./docs/master/authorization.md:10
msgctxt "P"
msgid "[Creating Policies](#creating-policies)"
msgstr ""

#: ./docs/8.x/authorization.md:11
#: ./docs/9.x/authorization.md:11
#: ./docs/10.x/authorization.md:11
#: ./docs/11.x/authorization.md:11
#: ./docs/master/authorization.md:11
msgctxt "P"
msgid "[Generating Policies](#generating-policies)"
msgstr ""

#: ./docs/8.x/authorization.md:12
#: ./docs/9.x/authorization.md:12
#: ./docs/10.x/authorization.md:12
#: ./docs/11.x/authorization.md:12
#: ./docs/master/authorization.md:12
msgctxt "P"
msgid "[Registering Policies](#registering-policies)"
msgstr ""

#: ./docs/8.x/authorization.md:13
#: ./docs/9.x/authorization.md:13
#: ./docs/10.x/authorization.md:13
#: ./docs/11.x/authorization.md:13
#: ./docs/master/authorization.md:13
msgctxt "P"
msgid "[Writing Policies](#writing-policies)"
msgstr ""

#: ./docs/8.x/authorization.md:14
#: ./docs/9.x/authorization.md:14
#: ./docs/10.x/authorization.md:14
#: ./docs/11.x/authorization.md:14
#: ./docs/master/authorization.md:14
msgctxt "P"
msgid "[Policy Methods](#policy-methods)"
msgstr ""

#: ./docs/8.x/authorization.md:15
#: ./docs/9.x/authorization.md:15
#: ./docs/10.x/authorization.md:15
#: ./docs/11.x/authorization.md:15
#: ./docs/master/authorization.md:15
msgctxt "P"
msgid "[Policy Responses](#policy-responses)"
msgstr ""

#: ./docs/8.x/authorization.md:16
#: ./docs/9.x/authorization.md:16
#: ./docs/10.x/authorization.md:16
#: ./docs/11.x/authorization.md:16
#: ./docs/master/authorization.md:16
msgctxt "P"
msgid "[Methods Without Models](#methods-without-models)"
msgstr ""

#: ./docs/8.x/authorization.md:17
#: ./docs/9.x/authorization.md:17
#: ./docs/10.x/authorization.md:17
#: ./docs/11.x/authorization.md:17
#: ./docs/master/authorization.md:17
msgctxt "P"
msgid "[Guest Users](#guest-users)"
msgstr ""

#: ./docs/8.x/authorization.md:18
#: ./docs/9.x/authorization.md:18
#: ./docs/10.x/authorization.md:18
#: ./docs/11.x/authorization.md:18
#: ./docs/master/authorization.md:18
msgctxt "P"
msgid "[Policy Filters](#policy-filters)"
msgstr ""

#: ./docs/8.x/authorization.md:19
#: ./docs/9.x/authorization.md:19
#: ./docs/10.x/authorization.md:19
#: ./docs/11.x/authorization.md:19
#: ./docs/master/authorization.md:19
msgctxt "P"
msgid "[Authorizing Actions Using Policies](#authorizing-actions-using-policies)"
msgstr ""

#: ./docs/10.x/authorization.md:20
#: ./docs/11.x/authorization.md:20
#: ./docs/master/authorization.md:20
msgctxt "P"
msgid "[Via the User Model](#via-the-user-model)"
msgstr ""

#: ./docs/8.x/authorization.md:20
#: ./docs/9.x/authorization.md:20
msgctxt "P"
msgid "[Via The User Model](#via-the-user-model)"
msgstr ""

#: ./docs/11.x/authorization.md:21
#: ./docs/master/authorization.md:21
msgctxt "P"
msgid "[Via the Gate Facade](#via-the-gate-facade)"
msgstr ""

#: ./docs/8.x/authorization.md:21
#: ./docs/9.x/authorization.md:21
#: ./docs/10.x/authorization.md:21
msgctxt "P"
msgid "[Via Controller Helpers](#via-controller-helpers)"
msgstr ""

#: ./docs/8.x/authorization.md:22
#: ./docs/9.x/authorization.md:22
#: ./docs/10.x/authorization.md:22
#: ./docs/11.x/authorization.md:22
#: ./docs/master/authorization.md:22
msgctxt "P"
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#: ./docs/8.x/authorization.md:23
#: ./docs/9.x/authorization.md:23
#: ./docs/10.x/authorization.md:23
#: ./docs/11.x/authorization.md:23
#: ./docs/master/authorization.md:23
msgctxt "P"
msgid "[Via Blade Templates](#via-blade-templates)"
msgstr ""

#: ./docs/8.x/authorization.md:24
#: ./docs/9.x/authorization.md:24
#: ./docs/10.x/authorization.md:24
#: ./docs/11.x/authorization.md:24
#: ./docs/master/authorization.md:24
msgctxt "P"
msgid "[Supplying Additional Context](#supplying-additional-context)"
msgstr ""

#: ./docs/11.x/authorization.md:25
msgctxt "P"
msgid "[Authorization & Inertia](#authorization-and-inertia)"
msgstr ""

#: ./docs/8.x/authorization.md:26
#: ./docs/9.x/authorization.md:26
#: ./docs/10.x/authorization.md:26
#: ./docs/11.x/authorization.md:27
#: ./docs/master/authorization.md:26
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:27
#: ./docs/9.x/authorization.md:27
#: ./docs/10.x/authorization.md:27
#: ./docs/11.x/authorization.md:28
#: ./docs/master/authorization.md:27
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/authorization.md:29
#: ./docs/9.x/authorization.md:29
#: ./docs/10.x/authorization.md:29
#: ./docs/11.x/authorization.md:30
#: ./docs/master/authorization.md:29
msgctxt "P"
msgid "In addition to providing built-in [authentication](/docs/{{version}}/authentication) services, Laravel also provides a simple way to authorize user actions against a given resource. For example, even though a user is authenticated, they may not be authorized to update or delete certain Eloquent models or database records managed by your application. Laravel's authorization features provide an easy, organized way of managing these types of authorization checks."
msgstr ""

#: ./docs/8.x/authorization.md:31
#: ./docs/9.x/authorization.md:31
#: ./docs/10.x/authorization.md:31
#: ./docs/11.x/authorization.md:32
#: ./docs/master/authorization.md:31
msgctxt "P"
msgid "Laravel provides two primary ways of authorizing actions: [gates](#gates) and [policies](#creating-policies). Think of gates and policies like routes and controllers. Gates provide a simple, closure-based approach to authorization while policies, like controllers, group logic around a particular model or resource. In this documentation, we'll explore gates first and then examine policies."
msgstr ""

#: ./docs/8.x/authorization.md:33
msgctxt "P"
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr ""

#: ./docs/9.x/authorization.md:33
#: ./docs/10.x/authorization.md:33
#: ./docs/11.x/authorization.md:34
#: ./docs/master/authorization.md:33
msgctxt "P"
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions that are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr ""

#: ./docs/8.x/authorization.md:35
#: ./docs/9.x/authorization.md:35
#: ./docs/10.x/authorization.md:35
#: ./docs/11.x/authorization.md:36
#: ./docs/master/authorization.md:35
#~ msgctxt "P"
#~ msgid "<a name=\"gates\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:36
#: ./docs/9.x/authorization.md:36
#: ./docs/10.x/authorization.md:36
#: ./docs/11.x/authorization.md:37
#: ./docs/master/authorization.md:36
msgctxt "H2"
msgid "Gates"
msgstr ""

#: ./docs/8.x/authorization.md:38
#: ./docs/9.x/authorization.md:38
#: ./docs/10.x/authorization.md:38
#: ./docs/11.x/authorization.md:39
#: ./docs/master/authorization.md:38
#~ msgctxt "P"
#~ msgid "<a name=\"writing-gates\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:39
#: ./docs/9.x/authorization.md:39
#: ./docs/10.x/authorization.md:39
#: ./docs/11.x/authorization.md:40
#: ./docs/master/authorization.md:39
msgctxt "H3"
msgid "Writing Gates"
msgstr ""

#: ./docs/8.x/authorization.md:41
#: ./docs/9.x/authorization.md:42
#: ./docs/10.x/authorization.md:42
#: ./docs/11.x/authorization.md:43
#: ./docs/master/authorization.md:42
msgctxt "P"
msgid "Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr ""

#: ./docs/8.x/authorization.md:43
#: ./docs/9.x/authorization.md:44
#: ./docs/10.x/authorization.md:44
msgctxt "P"
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AuthServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr ""

#: ./docs/11.x/authorization.md:45
#: ./docs/master/authorization.md:44
msgctxt "P"
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AppServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr ""

#: ./docs/8.x/authorization.md:45
#: ./docs/9.x/authorization.md:46
#: ./docs/10.x/authorization.md:46
#: ./docs/11.x/authorization.md:47
#: ./docs/master/authorization.md:46
msgctxt "P"
msgid "In this example, we'll define a gate to determine if a user can update a given `App\\Models\\Post` model. The gate will accomplish this by comparing the user's `id` against the `user_id` of the user that created the post:"
msgstr ""

#: ./docs/8.x/authorization.md:47
#: ./docs/9.x/authorization.md:48
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:48
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:49
#: ./docs/master/authorization.md:48
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:64
msgctxt "CODE"
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:65
#: ./docs/master/authorization.md:64
msgctxt "CODE"
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:65
#: ./docs/9.x/authorization.md:66
#: ./docs/10.x/authorization.md:62
#: ./docs/11.x/authorization.md:63
#: ./docs/master/authorization.md:62
msgctxt "P"
msgid "Like controllers, gates may also be defined using a class callback array:"
msgstr ""

#: ./docs/8.x/authorization.md:67
#: ./docs/9.x/authorization.md:68
msgctxt "CODE"
msgid "use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:80
#: ./docs/11.x/authorization.md:81
#: ./docs/master/authorization.md:80
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:82
#: ./docs/9.x/authorization.md:83
#: ./docs/10.x/authorization.md:75
#: ./docs/11.x/authorization.md:76
#: ./docs/master/authorization.md:75
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-actions-via-gates\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:83
#: ./docs/9.x/authorization.md:84
#: ./docs/10.x/authorization.md:76
#: ./docs/11.x/authorization.md:77
#: ./docs/master/authorization.md:76
msgctxt "H3"
msgid "Authorizing Actions"
msgstr ""

#: ./docs/8.x/authorization.md:85
#: ./docs/9.x/authorization.md:86
#: ./docs/10.x/authorization.md:78
#: ./docs/11.x/authorization.md:79
#: ./docs/master/authorization.md:78
msgctxt "P"
msgid "To authorize an action using gates, you should use the `allows` or `denies` methods provided by the `Gate` facade. Note that you are not required to pass the currently authenticated user to these methods. Laravel will automatically take care of passing the user into the gate closure. It is typical to call the gate authorization methods within your application's controllers before performing an action that requires authorization:"
msgstr ""

#: ./docs/8.x/authorization.md:87
#: ./docs/9.x/authorization.md:88
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:115
#: ./docs/9.x/authorization.md:116
#: ./docs/10.x/authorization.md:107
#: ./docs/11.x/authorization.md:108
#: ./docs/master/authorization.md:107
msgctxt "P"
msgid "If you would like to determine if a user other than the currently authenticated user is authorized to perform an action, you may use the `forUser` method on the `Gate` facade:"
msgstr ""

#: ./docs/8.x/authorization.md:117
#: ./docs/9.x/authorization.md:118
#: ./docs/10.x/authorization.md:109
#: ./docs/11.x/authorization.md:110
#: ./docs/master/authorization.md:109
msgctxt "CODE"
msgid "if (Gate::forUser($user)->allows('update-post', $post)) {\n"
"    // The user can update the post...\n"
"}\n\n"
"if (Gate::forUser($user)->denies('update-post', $post)) {\n"
"    // The user can't update the post...\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:125
#: ./docs/9.x/authorization.md:126
#: ./docs/10.x/authorization.md:117
#: ./docs/11.x/authorization.md:118
#: ./docs/master/authorization.md:117
msgctxt "P"
msgid "You may authorize multiple actions at a time using the `any` or `none` methods:"
msgstr ""

#: ./docs/8.x/authorization.md:127
#: ./docs/9.x/authorization.md:128
#: ./docs/10.x/authorization.md:119
#: ./docs/11.x/authorization.md:120
#: ./docs/master/authorization.md:119
msgctxt "CODE"
msgid "if (Gate::any(['update-post', 'delete-post'], $post)) {\n"
"    // The user can update or delete the post...\n"
"}\n\n"
"if (Gate::none(['update-post', 'delete-post'], $post)) {\n"
"    // The user can't update or delete the post...\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:128
#: ./docs/11.x/authorization.md:129
#: ./docs/master/authorization.md:128
msgctxt "H4"
msgid "Authorizing or Throwing Exceptions"
msgstr ""

#: ./docs/11.x/authorization.md:131
#: ./docs/master/authorization.md:130
msgctxt "P"
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel:"
msgstr ""

#: ./docs/8.x/authorization.md:135
#: ./docs/9.x/authorization.md:136
#: ./docs/10.x/authorization.md:127
#: ./docs/11.x/authorization.md:128
#: ./docs/master/authorization.md:127
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-or-throwing-exceptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:136
#: ./docs/9.x/authorization.md:137
msgctxt "H4"
msgid "Authorizing Or Throwing Exceptions"
msgstr ""

#: ./docs/8.x/authorization.md:138
#: ./docs/9.x/authorization.md:139
#: ./docs/10.x/authorization.md:130
msgctxt "P"
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler:"
msgstr ""

#: ./docs/8.x/authorization.md:140
#: ./docs/9.x/authorization.md:141
#: ./docs/10.x/authorization.md:132
#: ./docs/11.x/authorization.md:133
#: ./docs/master/authorization.md:132
msgctxt "CODE"
msgid "Gate::authorize('update-post', $post);\n\n"
"// The action is authorized..."
msgstr ""

#: ./docs/10.x/authorization.md:141
#: ./docs/11.x/authorization.md:142
#: ./docs/master/authorization.md:141
msgctxt "CODE"
msgid "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, bool $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:144
#: ./docs/9.x/authorization.md:145
#: ./docs/10.x/authorization.md:136
#: ./docs/11.x/authorization.md:137
#: ./docs/master/authorization.md:136
#~ msgctxt "P"
#~ msgid "<a name=\"gates-supplying-additional-context\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:145
#: ./docs/8.x/authorization.md:720
#: ./docs/9.x/authorization.md:146
#: ./docs/9.x/authorization.md:799
#: ./docs/10.x/authorization.md:137
#: ./docs/10.x/authorization.md:764
#: ./docs/11.x/authorization.md:138
#: ./docs/11.x/authorization.md:704
#: ./docs/master/authorization.md:137
#: ./docs/master/authorization.md:703
msgctxt "H4"
msgid "Supplying Additional Context"
msgstr ""

#: ./docs/8.x/authorization.md:147
#: ./docs/9.x/authorization.md:148
#: ./docs/10.x/authorization.md:139
#: ./docs/11.x/authorization.md:140
#: ./docs/master/authorization.md:139
msgctxt "P"
msgid "The gate methods for authorizing abilities (`allows`, `denies`, `check`, `any`, `none`, `authorize`, `can`, `cannot`) and the authorization [Blade directives](#via-blade-templates) (`@can`, `@cannot`, `@canany`) can receive an array as their second argument. These array elements are passed as parameters to the gate closure, and can be used for additional context when making authorization decisions:"
msgstr ""

#: ./docs/8.x/authorization.md:149
#: ./docs/9.x/authorization.md:150
msgctxt "CODE"
msgid "use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('create-post', function (User $user, Category $category, $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n\n"
"    return true;\n"
"});\n\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:167
#: ./docs/9.x/authorization.md:168
#: ./docs/10.x/authorization.md:159
#: ./docs/11.x/authorization.md:160
#: ./docs/master/authorization.md:159
#~ msgctxt "P"
#~ msgid "<a name=\"gate-responses\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:168
#: ./docs/9.x/authorization.md:169
#: ./docs/10.x/authorization.md:160
#: ./docs/11.x/authorization.md:161
#: ./docs/master/authorization.md:160
msgctxt "H3"
msgid "Gate Responses"
msgstr ""

#: ./docs/8.x/authorization.md:170
#: ./docs/9.x/authorization.md:171
#: ./docs/10.x/authorization.md:162
#: ./docs/11.x/authorization.md:163
#: ./docs/master/authorization.md:162
msgctxt "P"
msgid "So far, we have only examined gates that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` from your gate:"
msgstr ""

#: ./docs/8.x/authorization.md:172
#: ./docs/9.x/authorization.md:173
#: ./docs/10.x/authorization.md:164
#: ./docs/11.x/authorization.md:165
#: ./docs/master/authorization.md:164
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::deny('You must be an administrator.');\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:182
#: ./docs/9.x/authorization.md:183
#: ./docs/10.x/authorization.md:174
#: ./docs/11.x/authorization.md:175
#: ./docs/master/authorization.md:174
msgctxt "P"
msgid "Even when you return an authorization response from your gate, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#: ./docs/8.x/authorization.md:184
#: ./docs/9.x/authorization.md:185
#: ./docs/10.x/authorization.md:176
#: ./docs/11.x/authorization.md:177
#: ./docs/master/authorization.md:176
msgctxt "CODE"
msgid "$response = Gate::inspect('edit-settings');\n\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:191
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-gate-response-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:192
#: ./docs/8.x/authorization.md:382
#: ./docs/9.x/authorization.md:193
#: ./docs/9.x/authorization.md:416
#: ./docs/10.x/authorization.md:184
#: ./docs/10.x/authorization.md:399
#: ./docs/11.x/authorization.md:185
#: ./docs/11.x/authorization.md:381
#: ./docs/master/authorization.md:184
#: ./docs/master/authorization.md:380
msgctxt "P"
msgid "When using the `Gate::authorize` method, which throws an `AuthorizationException` if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:"
msgstr ""

#: ./docs/8.x/authorization.md:194
#: ./docs/9.x/authorization.md:195
#: ./docs/10.x/authorization.md:186
#: ./docs/11.x/authorization.md:187
#: ./docs/master/authorization.md:186
msgctxt "CODE"
msgid "Gate::authorize('edit-settings');\n\n"
"// The action is authorized..."
msgstr ""

#: ./docs/8.x/authorization.md:198
#: ./docs/9.x/authorization.md:226
#: ./docs/10.x/authorization.md:217
#: ./docs/11.x/authorization.md:218
#: ./docs/master/authorization.md:217
#~ msgctxt "P"
#~ msgid "<a name=\"intercepting-gate-checks\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:199
#: ./docs/9.x/authorization.md:227
#: ./docs/10.x/authorization.md:218
#: ./docs/11.x/authorization.md:219
#: ./docs/master/authorization.md:218
msgctxt "H3"
msgid "Intercepting Gate Checks"
msgstr ""

#: ./docs/9.x/authorization.md:199
#: ./docs/10.x/authorization.md:190
#: ./docs/master/authorization.md:190
#~ msgctxt "P"
#~ msgid "<a name=\"customising-gate-response-status\"></a>"
#~ msgstr ""

#: ./docs/9.x/authorization.md:200
#: ./docs/9.x/authorization.md:423
#: ./docs/10.x/authorization.md:191
#: ./docs/11.x/authorization.md:192
#: ./docs/master/authorization.md:191
msgctxt "H4"
msgid "Customizing The HTTP Response Status"
msgstr ""

#: ./docs/8.x/authorization.md:201
#: ./docs/9.x/authorization.md:229
#: ./docs/10.x/authorization.md:220
#: ./docs/11.x/authorization.md:221
#: ./docs/master/authorization.md:220
msgctxt "P"
msgid "Sometimes, you may wish to grant all abilities to a specific user. You may use the `before` method to define a closure that is run before all other authorization checks:"
msgstr ""

#: ./docs/9.x/authorization.md:202
#: ./docs/10.x/authorization.md:193
#: ./docs/11.x/authorization.md:194
#: ./docs/master/authorization.md:193
msgctxt "P"
msgid "When an action is denied via a Gate, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr ""

#: ./docs/8.x/authorization.md:203
#: ./docs/9.x/authorization.md:231
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function ($user, $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});"
msgstr ""

#: ./docs/9.x/authorization.md:204
#: ./docs/10.x/authorization.md:195
#: ./docs/11.x/authorization.md:196
#: ./docs/master/authorization.md:195
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:211
#: ./docs/9.x/authorization.md:239
#: ./docs/10.x/authorization.md:231
#: ./docs/11.x/authorization.md:232
#: ./docs/master/authorization.md:231
msgctxt "P"
msgid "If the `before` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#: ./docs/8.x/authorization.md:213
#: ./docs/9.x/authorization.md:241
#: ./docs/10.x/authorization.md:233
#: ./docs/11.x/authorization.md:234
#: ./docs/master/authorization.md:233
msgctxt "P"
msgid "You may use the `after` method to define a closure to be executed after all other authorization checks:"
msgstr ""

#: ./docs/9.x/authorization.md:214
#: ./docs/9.x/authorization.md:445
#: ./docs/10.x/authorization.md:205
#: ./docs/10.x/authorization.md:424
#: ./docs/11.x/authorization.md:206
#: ./docs/11.x/authorization.md:406
#: ./docs/master/authorization.md:205
#: ./docs/master/authorization.md:405
msgctxt "P"
msgid "Because hiding resources via a `404` response is such a common pattern for web applications, the `denyAsNotFound` method is offered for convenience:"
msgstr ""

#: ./docs/8.x/authorization.md:215
#: ./docs/9.x/authorization.md:243
msgctxt "CODE"
msgid "Gate::after(function ($user, $ability, $result, $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});"
msgstr ""

#: ./docs/9.x/authorization.md:216
#: ./docs/10.x/authorization.md:207
#: ./docs/11.x/authorization.md:208
#: ./docs/master/authorization.md:207
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:221
#: ./docs/9.x/authorization.md:249
#: ./docs/10.x/authorization.md:243
#: ./docs/master/authorization.md:243
msgctxt "P"
msgid "Similar to the `before` method, if the `after` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#: ./docs/10.x/authorization.md:222
#: ./docs/11.x/authorization.md:223
#: ./docs/master/authorization.md:222
msgctxt "CODE"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::before(function (User $user, string $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:223
#: ./docs/9.x/authorization.md:251
#: ./docs/10.x/authorization.md:245
#: ./docs/11.x/authorization.md:246
#: ./docs/master/authorization.md:245
#~ msgctxt "P"
#~ msgid "<a name=\"inline-authorization\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:224
#: ./docs/9.x/authorization.md:252
#: ./docs/10.x/authorization.md:246
#: ./docs/11.x/authorization.md:247
#: ./docs/master/authorization.md:246
msgctxt "H3"
msgid "Inline Authorization"
msgstr ""

#: ./docs/8.x/authorization.md:226
#: ./docs/9.x/authorization.md:254
msgctxt "P"
msgid "Occasionally, you may wish to determine if the currently authenticated user is authorized to perform a given action without writing a dedicated gate that corresponds to the action. Laravel allows you to perform these types of \"inline\" authorization checks via the `Gate::allowIf` and `Gate::denyIf` methods:"
msgstr ""

#: ./docs/8.x/authorization.md:228
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Auth;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());"
msgstr ""

#: ./docs/10.x/authorization.md:235
#: ./docs/11.x/authorization.md:236
#: ./docs/master/authorization.md:235
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"Gate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:236
#: ./docs/9.x/authorization.md:264
#: ./docs/10.x/authorization.md:259
#: ./docs/11.x/authorization.md:260
#: ./docs/master/authorization.md:259
msgctxt "P"
msgid "If the action is not authorized or if no user is currently authenticated, Laravel will automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler."
msgstr ""

#: ./docs/8.x/authorization.md:238
#: ./docs/9.x/authorization.md:266
#: ./docs/10.x/authorization.md:261
#: ./docs/11.x/authorization.md:262
#: ./docs/master/authorization.md:261
#~ msgctxt "P"
#~ msgid "<a name=\"creating-policies\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:239
#: ./docs/9.x/authorization.md:267
#: ./docs/10.x/authorization.md:262
#: ./docs/11.x/authorization.md:263
#: ./docs/master/authorization.md:262
msgctxt "H2"
msgid "Creating Policies"
msgstr ""

#: ./docs/8.x/authorization.md:241
#: ./docs/9.x/authorization.md:269
#: ./docs/10.x/authorization.md:264
#: ./docs/11.x/authorization.md:265
#: ./docs/master/authorization.md:264
#~ msgctxt "P"
#~ msgid "<a name=\"generating-policies\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:242
#: ./docs/9.x/authorization.md:270
#: ./docs/10.x/authorization.md:265
#: ./docs/11.x/authorization.md:266
#: ./docs/master/authorization.md:265
msgctxt "H3"
msgid "Generating Policies"
msgstr ""

#: ./docs/11.x/authorization.md:244
msgctxt "P"
msgid "Values returned by `after` closures will not override the result of the authorization check unless the gate or policy returned `null`."
msgstr ""

#: ./docs/8.x/authorization.md:244
#: ./docs/9.x/authorization.md:272
msgctxt "P"
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#: ./docs/8.x/authorization.md:246
#: ./docs/9.x/authorization.md:274
#: ./docs/10.x/authorization.md:269
#: ./docs/11.x/authorization.md:270
#: ./docs/master/authorization.md:269
msgctxt "P"
msgid "You may generate a policy using the `make:policy` Artisan command. The generated policy will be placed in the `app/Policies` directory. If this directory does not exist in your application, Laravel will create it for you:"
msgstr ""

#: ./docs/10.x/authorization.md:248
#: ./docs/11.x/authorization.md:249
#: ./docs/master/authorization.md:248
msgctxt "P"
msgid "Occasionally, you may wish to determine if the currently authenticated user is authorized to perform a given action without writing a dedicated gate that corresponds to the action. Laravel allows you to perform these types of \"inline\" authorization checks via the `Gate::allowIf` and `Gate::denyIf` methods. Inline authorization does not execute any defined [\"before\" or \"after\" authorization hooks](#intercepting-gate-checks):"
msgstr ""

#: ./docs/8.x/authorization.md:248
#: ./docs/9.x/authorization.md:276
#: ./docs/10.x/authorization.md:271
#: ./docs/11.x/authorization.md:272
#: ./docs/master/authorization.md:271
msgctxt "CODE"
msgid "php artisan make:policy PostPolicy"
msgstr ""

#: ./docs/10.x/authorization.md:250
#: ./docs/11.x/authorization.md:251
#: ./docs/master/authorization.md:250
msgctxt "CODE: php"
msgid "use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn (User $user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn (User $user) => $user->banned());"
msgstr ""

#: ./docs/8.x/authorization.md:250
#: ./docs/9.x/authorization.md:280
#: ./docs/10.x/authorization.md:275
#: ./docs/11.x/authorization.md:276
#: ./docs/master/authorization.md:275
msgctxt "P"
msgid "The `make:policy` command will generate an empty policy class. If you would like to generate a class with example policy methods related to viewing, creating, updating, and deleting the resource, you may provide a `--model` option when executing the command:"
msgstr ""

#: ./docs/8.x/authorization.md:252
#: ./docs/9.x/authorization.md:282
#: ./docs/10.x/authorization.md:277
#: ./docs/11.x/authorization.md:278
#: ./docs/master/authorization.md:277
msgctxt "CODE"
msgid "php artisan make:policy PostPolicy --model=Post"
msgstr ""

#: ./docs/8.x/authorization.md:254
#: ./docs/9.x/authorization.md:286
#: ./docs/10.x/authorization.md:281
#: ./docs/11.x/authorization.md:282
#: ./docs/master/authorization.md:281
#~ msgctxt "P"
#~ msgid "<a name=\"registering-policies\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:255
#: ./docs/9.x/authorization.md:287
#: ./docs/10.x/authorization.md:282
#: ./docs/11.x/authorization.md:283
#: ./docs/master/authorization.md:282
msgctxt "H3"
msgid "Registering Policies"
msgstr ""

#: ./docs/9.x/authorization.md:256
msgctxt "CODE: php"
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n\n"
"Gate::denyIf(fn ($user) => $user->banned());"
msgstr ""

#: ./docs/8.x/authorization.md:257
#: ./docs/9.x/authorization.md:289
#: ./docs/10.x/authorization.md:284
msgctxt "P"
msgid "Once the policy class has been created, it needs to be registered. Registering policies is how we can inform Laravel which policy to use when authorizing actions against a given model type."
msgstr ""

#: ./docs/8.x/authorization.md:259
#: ./docs/9.x/authorization.md:291
#: ./docs/10.x/authorization.md:286
msgctxt "P"
msgid "The `App\\Providers\\AuthServiceProvider` included with fresh Laravel applications contains a `policies` property which maps your Eloquent models to their corresponding policies. Registering a policy will instruct Laravel which policy to utilize when authorizing actions against a given Eloquent model:"
msgstr ""

#: ./docs/8.x/authorization.md:261
#: ./docs/9.x/authorization.md:293
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n\n"
"        //\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:267
#: ./docs/11.x/authorization.md:268
#: ./docs/master/authorization.md:267
msgctxt "P"
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have an `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#: ./docs/11.x/authorization.md:285
#: ./docs/master/authorization.md:284
#~ msgctxt "P"
#~ msgid "<a name=\"policy-discovery\"></a>"
#~ msgstr ""

#: ./docs/11.x/authorization.md:286
#: ./docs/master/authorization.md:285
msgctxt "H4"
msgid "Policy Discovery"
msgstr ""

#: ./docs/10.x/authorization.md:288
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:288
#: ./docs/master/authorization.md:287
msgctxt "P"
msgid "By default, Laravel automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr ""

#: ./docs/11.x/authorization.md:290
#: ./docs/master/authorization.md:289
msgctxt "P"
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/authorization.md:294
#: ./docs/9.x/authorization.md:326
#: ./docs/10.x/authorization.md:317
#~ msgctxt "P"
#~ msgid "<a name=\"policy-auto-discovery\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:295
#: ./docs/9.x/authorization.md:327
#: ./docs/10.x/authorization.md:318
msgctxt "H4"
msgid "Policy Auto-Discovery"
msgstr ""

#: ./docs/8.x/authorization.md:297
#: ./docs/9.x/authorization.md:329
#: ./docs/10.x/authorization.md:320
msgctxt "P"
msgid "Instead of manually registering model policies, Laravel can automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr ""

#: ./docs/11.x/authorization.md:298
#: ./docs/master/authorization.md:297
#~ msgctxt "P"
#~ msgid "<a name=\"manually-registering-policies\"></a>"
#~ msgstr ""

#: ./docs/11.x/authorization.md:299
#: ./docs/master/authorization.md:298
msgctxt "H4"
msgid "Manually Registering Policies"
msgstr ""

#: ./docs/8.x/authorization.md:299
#: ./docs/9.x/authorization.md:331
#: ./docs/10.x/authorization.md:322
msgctxt "P"
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AuthServiceProvider`:"
msgstr ""

#: ./docs/11.x/authorization.md:301
#: ./docs/master/authorization.md:300
msgctxt "P"
msgid "Using the `Gate` facade, you may manually register policies and their corresponding models within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/authorization.md:301
#: ./docs/9.x/authorization.md:333
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function ($modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});"
msgstr ""

#: ./docs/11.x/authorization.md:303
#: ./docs/master/authorization.md:302
msgctxt "CODE"
msgid "use App\\Models\\Order;\n"
"use App\\Policies\\OrderPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::policy(Order::class, OrderPolicy::class);\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:307
#: ./docs/9.x/authorization.md:340
#: ./docs/10.x/authorization.md:331
msgctxt "P"
msgid "Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr ""

#: ./docs/8.x/authorization.md:309
#: ./docs/9.x/authorization.md:342
#: ./docs/10.x/authorization.md:333
#: ./docs/11.x/authorization.md:315
#: ./docs/master/authorization.md:314
#~ msgctxt "P"
#~ msgid "<a name=\"writing-policies\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:310
#: ./docs/9.x/authorization.md:343
#: ./docs/10.x/authorization.md:334
#: ./docs/11.x/authorization.md:316
#: ./docs/master/authorization.md:315
msgctxt "H2"
msgid "Writing Policies"
msgstr ""

#: ./docs/8.x/authorization.md:312
#: ./docs/9.x/authorization.md:345
#: ./docs/10.x/authorization.md:336
#: ./docs/11.x/authorization.md:318
#: ./docs/master/authorization.md:317
#~ msgctxt "P"
#~ msgid "<a name=\"policy-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:313
#: ./docs/9.x/authorization.md:346
#: ./docs/10.x/authorization.md:337
#: ./docs/11.x/authorization.md:319
#: ./docs/master/authorization.md:318
msgctxt "H3"
msgid "Policy Methods"
msgstr ""

#: ./docs/8.x/authorization.md:315
#: ./docs/9.x/authorization.md:348
#: ./docs/10.x/authorization.md:339
#: ./docs/11.x/authorization.md:321
#: ./docs/master/authorization.md:320
msgctxt "P"
msgid "Once the policy class has been registered, you may add methods for each action it authorizes. For example, let's define an `update` method on our `PostPolicy` which determines if a given `App\\Models\\User` can update a given `App\\Models\\Post` instance."
msgstr ""

#: ./docs/8.x/authorization.md:317
#: ./docs/9.x/authorization.md:350
#: ./docs/10.x/authorization.md:341
#: ./docs/11.x/authorization.md:323
#: ./docs/master/authorization.md:322
msgctxt "P"
msgid "The `update` method will receive a `User` and a `Post` instance as its arguments, and should return `true` or `false` indicating whether the user is authorized to update the given `Post`. So, in this example, we will verify that the user's `id` matches the `user_id` on the post:"
msgstr ""

#: ./docs/8.x/authorization.md:319
#: ./docs/9.x/authorization.md:352
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(User $user, Post $post)\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:324
#: ./docs/11.x/authorization.md:292
#: ./docs/master/authorization.md:291
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"Gate::guessPolicyNamesUsing(function (string $modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});"
msgstr ""

#: ./docs/8.x/authorization.md:341
#: ./docs/9.x/authorization.md:374
#: ./docs/10.x/authorization.md:361
#: ./docs/11.x/authorization.md:343
#: ./docs/master/authorization.md:342
msgctxt "P"
msgid "You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define `view` or `delete` methods to authorize various `Post` related actions, but remember you are free to give your policy methods any name you like."
msgstr ""

#: ./docs/10.x/authorization.md:343
#: ./docs/11.x/authorization.md:325
#: ./docs/master/authorization.md:324
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(User $user, Post $post): bool\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:343
#: ./docs/9.x/authorization.md:376
#: ./docs/10.x/authorization.md:363
#: ./docs/11.x/authorization.md:345
#: ./docs/master/authorization.md:344
msgctxt "P"
msgid "If you used the `--model` option when generating your policy via the Artisan console, it will already contain methods for the `viewAny`, `view`, `create`, `update`, `delete`, `restore`, and `forceDelete` actions."
msgstr ""

#: ./docs/8.x/authorization.md:345
#: ./docs/9.x/authorization.md:379
#: ./docs/10.x/authorization.md:366
#: ./docs/11.x/authorization.md:348
#: ./docs/master/authorization.md:347
msgctxt "P"
msgid "All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr ""

#: ./docs/8.x/authorization.md:347
#: ./docs/9.x/authorization.md:381
#: ./docs/10.x/authorization.md:368
#: ./docs/11.x/authorization.md:350
#: ./docs/master/authorization.md:349
#~ msgctxt "P"
#~ msgid "<a name=\"policy-responses\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:348
#: ./docs/9.x/authorization.md:382
#: ./docs/10.x/authorization.md:369
#: ./docs/11.x/authorization.md:351
#: ./docs/master/authorization.md:350
msgctxt "H3"
msgid "Policy Responses"
msgstr ""

#: ./docs/8.x/authorization.md:350
#: ./docs/9.x/authorization.md:384
#: ./docs/10.x/authorization.md:371
#: ./docs/11.x/authorization.md:353
#: ./docs/master/authorization.md:352
msgctxt "P"
msgid "So far, we have only examined policy methods that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` instance from your policy method:"
msgstr ""

#: ./docs/8.x/authorization.md:352
#: ./docs/9.x/authorization.md:386
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:370
#: ./docs/9.x/authorization.md:404
#: ./docs/10.x/authorization.md:387
#: ./docs/11.x/authorization.md:369
#: ./docs/master/authorization.md:368
msgctxt "P"
msgid "When returning an authorization response from your policy, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#: ./docs/8.x/authorization.md:372
#: ./docs/9.x/authorization.md:406
#: ./docs/10.x/authorization.md:389
#: ./docs/11.x/authorization.md:371
#: ./docs/master/authorization.md:370
msgctxt "CODE"
msgid "use Illuminate\\Support\\Facades\\Gate;\n\n"
"$response = Gate::inspect('update', $post);\n\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:373
#: ./docs/11.x/authorization.md:355
#: ./docs/master/authorization.md:354
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:384
#: ./docs/9.x/authorization.md:418
#: ./docs/10.x/authorization.md:401
#: ./docs/11.x/authorization.md:383
#: ./docs/master/authorization.md:382
msgctxt "CODE"
msgid "Gate::authorize('update', $post);\n\n"
"// The action is authorized..."
msgstr ""

#: ./docs/11.x/authorization.md:387
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-policy-response-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:388
#: ./docs/9.x/authorization.md:465
#: ./docs/10.x/authorization.md:440
#: ./docs/11.x/authorization.md:422
#: ./docs/master/authorization.md:421
#~ msgctxt "P"
#~ msgid "<a name=\"methods-without-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:389
#: ./docs/9.x/authorization.md:466
#: ./docs/10.x/authorization.md:441
#: ./docs/11.x/authorization.md:423
#: ./docs/master/authorization.md:422
msgctxt "H3"
msgid "Methods Without Models"
msgstr ""

#: ./docs/8.x/authorization.md:391
#: ./docs/9.x/authorization.md:468
#: ./docs/10.x/authorization.md:443
#: ./docs/11.x/authorization.md:425
#: ./docs/master/authorization.md:424
msgctxt "P"
msgid "Some policy methods only receive an instance of the currently authenticated user. This situation is most common when authorizing `create` actions. For example, if you are creating a blog, you may wish to determine if a user is authorized to create any posts at all. In these situations, your policy method should only expect to receive a user instance:"
msgstr ""

#: ./docs/8.x/authorization.md:393
#: ./docs/9.x/authorization.md:470
msgctxt "CODE"
msgid "/**\n"
" * Determine if the given user can create posts.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @return bool\n"
" */\n"
"public function create(User $user)\n"
"{\n"
"    return $user->role == 'writer';\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:404
#: ./docs/9.x/authorization.md:481
#: ./docs/10.x/authorization.md:453
#: ./docs/11.x/authorization.md:435
#: ./docs/master/authorization.md:434
#~ msgctxt "P"
#~ msgid "<a name=\"guest-users\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:405
#: ./docs/9.x/authorization.md:482
#: ./docs/10.x/authorization.md:454
#: ./docs/11.x/authorization.md:436
#: ./docs/master/authorization.md:435
msgctxt "H3"
msgid "Guest Users"
msgstr ""

#: ./docs/10.x/authorization.md:406
#: ./docs/11.x/authorization.md:388
#: ./docs/master/authorization.md:387
msgctxt "H4"
msgid "Customizing the HTTP Response Status"
msgstr ""

#: ./docs/8.x/authorization.md:407
#: ./docs/9.x/authorization.md:484
#: ./docs/10.x/authorization.md:456
#: ./docs/11.x/authorization.md:438
#: ./docs/master/authorization.md:437
msgctxt "P"
msgid "By default, all gates and policies automatically return `false` if the incoming HTTP request was not initiated by an authenticated user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an \"optional\" type-hint or supplying a `null` default value for the user argument definition:"
msgstr ""

#: ./docs/8.x/authorization.md:409
#: ./docs/9.x/authorization.md:486
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(?User $user, Post $post)\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:410
#: ./docs/11.x/authorization.md:392
#: ./docs/master/authorization.md:391
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}"
msgstr ""

#: ./docs/9.x/authorization.md:422
#: ./docs/10.x/authorization.md:405
#: ./docs/master/authorization.md:386
#~ msgctxt "P"
#~ msgid "<a name=\"customising-policy-response-status\"></a>"
#~ msgstr ""

#: ./docs/9.x/authorization.md:425
#: ./docs/10.x/authorization.md:408
#: ./docs/11.x/authorization.md:390
#: ./docs/master/authorization.md:389
msgctxt "P"
msgid "When an action is denied via a policy method, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr ""

#: ./docs/10.x/authorization.md:426
#: ./docs/11.x/authorization.md:408
#: ./docs/master/authorization.md:407
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}"
msgstr ""

#: ./docs/9.x/authorization.md:427
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:431
#: ./docs/9.x/authorization.md:508
#: ./docs/10.x/authorization.md:476
#: ./docs/11.x/authorization.md:458
#: ./docs/master/authorization.md:457
#~ msgctxt "P"
#~ msgid "<a name=\"policy-filters\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:432
#: ./docs/9.x/authorization.md:509
#: ./docs/10.x/authorization.md:477
#: ./docs/11.x/authorization.md:459
#: ./docs/master/authorization.md:458
msgctxt "H3"
msgid "Policy Filters"
msgstr ""

#: ./docs/8.x/authorization.md:434
#: ./docs/9.x/authorization.md:511
#: ./docs/10.x/authorization.md:479
#: ./docs/11.x/authorization.md:461
#: ./docs/master/authorization.md:460
msgctxt "P"
msgid "For certain users, you may wish to authorize all actions within a given policy. To accomplish this, define a `before` method on the policy. The `before` method will be executed before any other methods on the policy, giving you an opportunity to authorize the action before the intended policy method is actually called. This feature is most commonly used for authorizing application administrators to perform any action:"
msgstr ""

#: ./docs/8.x/authorization.md:436
#: ./docs/9.x/authorization.md:513
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  string  $ability\n"
" * @return void|bool\n"
" */\n"
"public function before(User $user, $ability)\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:445
#: ./docs/11.x/authorization.md:427
#: ./docs/master/authorization.md:426
msgctxt "CODE"
msgid "/**\n"
" * Determine if the given user can create posts.\n"
" */\n"
"public function create(User $user): bool\n"
"{\n"
"    return $user->role == 'writer';\n"
"}"
msgstr ""

#: ./docs/9.x/authorization.md:447
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:452
#: ./docs/9.x/authorization.md:529
#: ./docs/10.x/authorization.md:495
#: ./docs/11.x/authorization.md:477
#: ./docs/master/authorization.md:476
msgctxt "P"
msgid "If you would like to deny all authorization checks for a particular type of user then you may return `false` from the `before` method. If `null` is returned, the authorization check will fall through to the policy method."
msgstr ""

#: ./docs/8.x/authorization.md:454
#: ./docs/9.x/authorization.md:532
#: ./docs/10.x/authorization.md:498
#: ./docs/11.x/authorization.md:480
#: ./docs/master/authorization.md:479
msgctxt "P"
msgid "The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr ""

#: ./docs/8.x/authorization.md:456
#: ./docs/9.x/authorization.md:534
#: ./docs/10.x/authorization.md:500
#: ./docs/11.x/authorization.md:482
#: ./docs/master/authorization.md:481
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-actions-using-policies\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:457
#: ./docs/9.x/authorization.md:535
#: ./docs/10.x/authorization.md:501
#: ./docs/11.x/authorization.md:483
#: ./docs/master/authorization.md:482
msgctxt "H2"
msgid "Authorizing Actions Using Policies"
msgstr ""

#: ./docs/10.x/authorization.md:458
#: ./docs/11.x/authorization.md:440
#: ./docs/master/authorization.md:439
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Policies;\n\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(?User $user, Post $post): bool\n"
"    {\n"
"        return $user?->id === $post->user_id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:459
#: ./docs/9.x/authorization.md:537
#: ./docs/10.x/authorization.md:503
#: ./docs/11.x/authorization.md:485
#: ./docs/master/authorization.md:484
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-user-model\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:460
#: ./docs/9.x/authorization.md:538
msgctxt "H3"
msgid "Via The User Model"
msgstr ""

#: ./docs/8.x/authorization.md:462
#: ./docs/9.x/authorization.md:540
#: ./docs/10.x/authorization.md:506
#: ./docs/11.x/authorization.md:488
#: ./docs/master/authorization.md:487
msgctxt "P"
msgid "The `App\\Models\\User` model that is included with your Laravel application includes two helpful methods for authorizing actions: `can` and `cannot`. The `can` and `cannot` methods receive the name of the action you wish to authorize and the relevant model. For example, let's determine if a user is authorized to update a given `App\\Models\\Post` model. Typically, this will be done within a controller method:"
msgstr ""

#: ./docs/8.x/authorization.md:464
#: ./docs/9.x/authorization.md:542
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:481
#: ./docs/11.x/authorization.md:463
#: ./docs/master/authorization.md:462
msgctxt "CODE"
msgid "use App\\Models\\User;\n\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" */\n"
"public function before(User $user, string $ability): bool|null\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n\n"
"    return null;\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:491
#: ./docs/9.x/authorization.md:569
#: ./docs/10.x/authorization.md:534
#: ./docs/11.x/authorization.md:516
#: ./docs/master/authorization.md:515
msgctxt "P"
msgid "If a [policy is registered](#registering-policies) for the given model, the `can` method will automatically call the appropriate policy and return the boolean result. If no policy is registered for the model, the `can` method will attempt to call the closure-based Gate matching the given action name."
msgstr ""

#: ./docs/8.x/authorization.md:493
#: ./docs/9.x/authorization.md:571
#: ./docs/10.x/authorization.md:536
#: ./docs/11.x/authorization.md:518
#: ./docs/master/authorization.md:517
#~ msgctxt "P"
#~ msgid "<a name=\"user-model-actions-that-dont-require-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:494
#: ./docs/8.x/authorization.md:559
#: ./docs/8.x/authorization.md:645
#: ./docs/8.x/authorization.md:705
#: ./docs/9.x/authorization.md:572
#: ./docs/9.x/authorization.md:637
#: ./docs/9.x/authorization.md:724
#: ./docs/9.x/authorization.md:784
#: ./docs/10.x/authorization.md:537
#: ./docs/10.x/authorization.md:601
#: ./docs/10.x/authorization.md:689
#: ./docs/10.x/authorization.md:749
#: ./docs/11.x/authorization.md:519
#: ./docs/11.x/authorization.md:584
#: ./docs/11.x/authorization.md:629
#: ./docs/11.x/authorization.md:689
#: ./docs/master/authorization.md:518
#: ./docs/master/authorization.md:583
#: ./docs/master/authorization.md:628
#: ./docs/master/authorization.md:688
msgctxt "H4"
msgid "Actions That Don't Require Models"
msgstr ""

#: ./docs/8.x/authorization.md:496
#: ./docs/9.x/authorization.md:574
#: ./docs/10.x/authorization.md:539
#: ./docs/11.x/authorization.md:521
#: ./docs/master/authorization.md:520
msgctxt "P"
msgid "Remember, some actions may correspond to policy methods like `create` that do not require a model instance. In these situations, you may pass a class name to the `can` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: ./docs/8.x/authorization.md:498
#: ./docs/9.x/authorization.md:576
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:504
#: ./docs/11.x/authorization.md:486
#: ./docs/master/authorization.md:485
msgctxt "H3"
msgid "Via the User Model"
msgstr ""

#: ./docs/10.x/authorization.md:508
#: ./docs/11.x/authorization.md:490
#: ./docs/master/authorization.md:489
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Update the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:524
#: ./docs/9.x/authorization.md:602
#: ./docs/10.x/authorization.md:567
#~ msgctxt "P"
#~ msgid "<a name=\"via-controller-helpers\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:525
#: ./docs/9.x/authorization.md:603
#: ./docs/10.x/authorization.md:568
msgctxt "H3"
msgid "Via Controller Helpers"
msgstr ""

#: ./docs/8.x/authorization.md:527
#: ./docs/9.x/authorization.md:605
#: ./docs/10.x/authorization.md:570
msgctxt "P"
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, Laravel provides a helpful `authorize` method to any of your controllers which extend the `App\\Http\\Controllers\\Controller` base class."
msgstr ""

#: ./docs/8.x/authorization.md:529
#: ./docs/9.x/authorization.md:607
#: ./docs/10.x/authorization.md:572
#: ./docs/11.x/authorization.md:554
#: ./docs/master/authorization.md:553
msgctxt "P"
msgid "Like the `can` method, this method accepts the name of the action you wish to authorize and the relevant model. If the action is not authorized, the `authorize` method will throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception which the Laravel exception handler will automatically convert to an HTTP response with a 403 status code:"
msgstr ""

#: ./docs/8.x/authorization.md:531
#: ./docs/9.x/authorization.md:609
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:541
#: ./docs/11.x/authorization.md:523
#: ./docs/master/authorization.md:522
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n\n"
"        // Create the post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:549
#: ./docs/master/authorization.md:548
#~ msgctxt "P"
#~ msgid "<a name=\"via-the-gate-facade\"></a>"
#~ msgstr ""

#: ./docs/11.x/authorization.md:550
#: ./docs/master/authorization.md:549
msgctxt "H3"
msgid "Via the `Gate` Facade"
msgstr ""

#: ./docs/11.x/authorization.md:552
#: ./docs/master/authorization.md:551
msgctxt "P"
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, you can always authorize actions via the `Gate` facade's `authorize` method."
msgstr ""

#: ./docs/11.x/authorization.md:556
#: ./docs/master/authorization.md:555
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        Gate::authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:558
#: ./docs/9.x/authorization.md:636
#: ./docs/10.x/authorization.md:600
#: ./docs/11.x/authorization.md:583
#: ./docs/master/authorization.md:582
#~ msgctxt "P"
#~ msgid "<a name=\"controller-actions-that-dont-require-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:561
#: ./docs/9.x/authorization.md:639
#: ./docs/10.x/authorization.md:603
#: ./docs/11.x/authorization.md:586
#: ./docs/master/authorization.md:585
msgctxt "P"
msgid "As previously discussed, some policy methods like `create` do not require a model instance. In these situations, you should pass a class name to the `authorize` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: ./docs/8.x/authorization.md:563
#: ./docs/9.x/authorization.md:641
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request)\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:574
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        $this->authorize('update', $post);\n\n"
"        // The current user can update the blog post...\n\n"
"        return redirect('/posts');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:581
#: ./docs/9.x/authorization.md:659
#: ./docs/10.x/authorization.md:623
#~ msgctxt "P"
#~ msgid "<a name=\"authorizing-resource-controllers\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:582
#: ./docs/9.x/authorization.md:660
#: ./docs/10.x/authorization.md:624
msgctxt "H4"
msgid "Authorizing Resource Controllers"
msgstr ""

#: ./docs/8.x/authorization.md:584
#: ./docs/9.x/authorization.md:662
#: ./docs/10.x/authorization.md:626
msgctxt "P"
msgid "If you are utilizing [resource controllers](/docs/{{version}}/controllers#resource-controllers), you may make use of the `authorizeResource` method in your controller's constructor. This method will attach the appropriate `can` middleware definitions to the resource controller's methods."
msgstr ""

#: ./docs/8.x/authorization.md:586
#: ./docs/9.x/authorization.md:664
#: ./docs/10.x/authorization.md:628
msgctxt "P"
msgid "The `authorizeResource` method accepts the model's class name as its first argument, and the name of the route / request parameter that will contain the model's ID as its second argument. You should ensure your [resource controller](/docs/{{version}}/controllers#resource-controllers) is created using the `--model` flag so that it has the required method signatures and type hints:"
msgstr ""

#: ./docs/11.x/authorization.md:588
#: ./docs/master/authorization.md:587
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): RedirectResponse\n"
"{\n"
"    Gate::authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n\n"
"    return redirect('/posts');\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:588
#: ./docs/9.x/authorization.md:666
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:605
msgctxt "CODE"
msgid "use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): RedirectResponse\n"
"{\n"
"    $this->authorize('create', Post::class);\n\n"
"    // The current user can create blog posts...\n\n"
"    return redirect('/posts');\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:609
#: ./docs/9.x/authorization.md:687
#: ./docs/10.x/authorization.md:648
msgctxt "P"
msgid "The following controller methods will be mapped to their corresponding policy method. When requests are routed to the given controller method, the corresponding policy method will automatically be invoked before the controller method is executed:"
msgstr ""

#: ./docs/master/authorization.md:609
msgctxt "P"
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware may be attached to a route using the `can` [middleware alias](/docs/{{version}}/middleware#middleware-alias), which is automatically registered by Laravel. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#: ./docs/11.x/authorization.md:610
msgctxt "P"
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware may be attached to a route using the `can` [middleware alias](/docs/{{version}}/middleware#middleware-aliases), which is automatically registered by Laravel. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#: ./docs/8.x/authorization.md:621
#: ./docs/9.x/authorization.md:700
#: ./docs/10.x/authorization.md:665
msgctxt "P"
msgid "You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr ""

#: ./docs/8.x/authorization.md:623
#: ./docs/9.x/authorization.md:702
#: ./docs/10.x/authorization.md:667
#: ./docs/11.x/authorization.md:607
#: ./docs/master/authorization.md:606
#~ msgctxt "P"
#~ msgid "<a name=\"via-middleware\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:624
#: ./docs/9.x/authorization.md:703
#: ./docs/10.x/authorization.md:668
#: ./docs/11.x/authorization.md:608
#: ./docs/master/authorization.md:607
msgctxt "H3"
msgid "Via Middleware"
msgstr ""

#: ./docs/8.x/authorization.md:626
#: ./docs/9.x/authorization.md:705
#: ./docs/10.x/authorization.md:670
msgctxt "P"
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware is assigned the `can` key in your `App\\Http\\Kernel` class. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#: ./docs/8.x/authorization.md:628
#: ./docs/9.x/authorization.md:707
#: ./docs/10.x/authorization.md:672
#: ./docs/11.x/authorization.md:612
#: ./docs/master/authorization.md:611
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->middleware('can:update,post');"
msgstr ""

#: ./docs/10.x/authorization.md:630
msgctxt "CODE"
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:634
#: ./docs/9.x/authorization.md:713
msgctxt "P"
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), a `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#: ./docs/8.x/authorization.md:636
#: ./docs/9.x/authorization.md:715
#: ./docs/10.x/authorization.md:680
#: ./docs/11.x/authorization.md:620
#: ./docs/master/authorization.md:619
msgctxt "P"
msgid "For convenience, you may also attach the `can` middleware to your route using the `can` method:"
msgstr ""

#: ./docs/8.x/authorization.md:638
#: ./docs/9.x/authorization.md:717
#: ./docs/10.x/authorization.md:682
#: ./docs/11.x/authorization.md:622
#: ./docs/master/authorization.md:621
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->can('update', 'post');"
msgstr ""

#: ./docs/8.x/authorization.md:644
#: ./docs/9.x/authorization.md:723
#: ./docs/10.x/authorization.md:688
#: ./docs/11.x/authorization.md:628
#: ./docs/master/authorization.md:627
#~ msgctxt "P"
#~ msgid "<a name=\"middleware-actions-that-dont-require-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:647
#: ./docs/9.x/authorization.md:726
#: ./docs/10.x/authorization.md:691
#: ./docs/11.x/authorization.md:631
#: ./docs/master/authorization.md:630
msgctxt "P"
msgid "Again, some policy methods like `create` do not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: ./docs/8.x/authorization.md:649
#: ./docs/9.x/authorization.md:728
#: ./docs/10.x/authorization.md:693
#: ./docs/11.x/authorization.md:633
#: ./docs/master/authorization.md:632
msgctxt "CODE"
msgid "Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->middleware('can:create,App\\Models\\Post');"
msgstr ""

#: ./docs/8.x/authorization.md:653
#: ./docs/9.x/authorization.md:732
#: ./docs/10.x/authorization.md:697
#: ./docs/11.x/authorization.md:637
#: ./docs/master/authorization.md:636
msgctxt "P"
msgid "Specifying the entire class name within a string middleware definition can become cumbersome. For that reason, you may choose to attach the `can` middleware to your route using the `can` method:"
msgstr ""

#: ./docs/8.x/authorization.md:655
#: ./docs/9.x/authorization.md:734
#: ./docs/10.x/authorization.md:699
#: ./docs/11.x/authorization.md:639
#: ./docs/master/authorization.md:638
msgctxt "CODE"
msgid "use App\\Models\\Post;\n\n"
"Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->can('create', Post::class);"
msgstr ""

#: ./docs/8.x/authorization.md:661
#: ./docs/9.x/authorization.md:740
#: ./docs/10.x/authorization.md:705
#: ./docs/11.x/authorization.md:645
#: ./docs/master/authorization.md:644
#~ msgctxt "P"
#~ msgid "<a name=\"via-blade-templates\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:662
#: ./docs/9.x/authorization.md:741
#: ./docs/10.x/authorization.md:706
#: ./docs/11.x/authorization.md:646
#: ./docs/master/authorization.md:645
msgctxt "H3"
msgid "Via Blade Templates"
msgstr ""

#: ./docs/8.x/authorization.md:664
#: ./docs/9.x/authorization.md:743
#: ./docs/10.x/authorization.md:708
#: ./docs/11.x/authorization.md:648
#: ./docs/master/authorization.md:647
msgctxt "P"
msgid "When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the `@can` and `@cannot` directives:"
msgstr ""

#: ./docs/8.x/authorization.md:666
#: ./docs/9.x/authorization.md:745
#: ./docs/10.x/authorization.md:710
#: ./docs/11.x/authorization.md:650
#: ./docs/master/authorization.md:649
msgctxt "CODE: html"
msgid "@can('update', $post)\n"
"    <!-- The current user can update the post... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create new posts... -->\n"
"@else\n"
"    <!-- ... -->\n"
"@endcan\n\n"
"@cannot('update', $post)\n"
"    <!-- The current user cannot update the post... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user cannot create new posts... -->\n"
"@endcannot"
msgstr ""

#: ./docs/10.x/authorization.md:678
#: ./docs/11.x/authorization.md:618
#: ./docs/master/authorization.md:617
msgctxt "P"
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), an `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#: ./docs/8.x/authorization.md:682
#: ./docs/9.x/authorization.md:761
#: ./docs/10.x/authorization.md:726
#: ./docs/11.x/authorization.md:666
#: ./docs/master/authorization.md:665
msgctxt "P"
msgid "These directives are convenient shortcuts for writing `@if` and `@unless` statements. The `@can` and `@cannot` statements above are equivalent to the following statements:"
msgstr ""

#: ./docs/8.x/authorization.md:684
#: ./docs/9.x/authorization.md:763
#: ./docs/10.x/authorization.md:728
#: ./docs/11.x/authorization.md:668
#: ./docs/master/authorization.md:667
msgctxt "CODE: html"
msgid "@if (Auth::user()->can('update', $post))\n"
"    <!-- The current user can update the post... -->\n"
"@endif\n\n"
"@unless (Auth::user()->can('update', $post))\n"
"    <!-- The current user cannot update the post... -->\n"
"@endunless"
msgstr ""

#: ./docs/8.x/authorization.md:694
#: ./docs/9.x/authorization.md:773
#: ./docs/10.x/authorization.md:738
#: ./docs/11.x/authorization.md:678
#: ./docs/master/authorization.md:677
msgctxt "P"
msgid "You may also determine if a user is authorized to perform any action from a given array of actions. To accomplish this, use the `@canany` directive:"
msgstr ""

#: ./docs/8.x/authorization.md:696
#: ./docs/9.x/authorization.md:775
#: ./docs/10.x/authorization.md:740
#: ./docs/11.x/authorization.md:680
#: ./docs/master/authorization.md:679
msgctxt "CODE: html"
msgid "@canany(['update', 'view', 'delete'], $post)\n"
"    <!-- The current user can update, view, or delete the post... -->\n"
"@elsecanany(['create'], \\App\\Models\\Post::class)\n"
"    <!-- The current user can create a post... -->\n"
"@endcanany"
msgstr ""

#: ./docs/8.x/authorization.md:704
#: ./docs/9.x/authorization.md:783
#: ./docs/10.x/authorization.md:748
#: ./docs/11.x/authorization.md:688
#: ./docs/master/authorization.md:687
#~ msgctxt "P"
#~ msgid "<a name=\"blade-actions-that-dont-require-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:707
#: ./docs/9.x/authorization.md:786
#: ./docs/10.x/authorization.md:751
#: ./docs/11.x/authorization.md:691
#: ./docs/master/authorization.md:690
msgctxt "P"
msgid "Like most of the other authorization methods, you may pass a class name to the `@can` and `@cannot` directives if the action does not require a model instance:"
msgstr ""

#: ./docs/8.x/authorization.md:709
#: ./docs/9.x/authorization.md:788
#: ./docs/10.x/authorization.md:753
#: ./docs/11.x/authorization.md:693
#: ./docs/master/authorization.md:692
msgctxt "CODE: html"
msgid "@can('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create posts... -->\n"
"@endcan\n\n"
"@cannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can't create posts... -->\n"
"@endcannot"
msgstr ""

#: ./docs/11.x/authorization.md:719
#: ./docs/master/authorization.md:718
msgctxt "CODE"
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): RedirectResponse\n"
"{\n"
"    Gate::authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n\n"
"    return redirect('/posts');\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:719
#: ./docs/9.x/authorization.md:798
#: ./docs/10.x/authorization.md:763
#: ./docs/11.x/authorization.md:703
#: ./docs/master/authorization.md:702
#~ msgctxt "P"
#~ msgid "<a name=\"supplying-additional-context\"></a>"
#~ msgstr ""

#: ./docs/8.x/authorization.md:722
#: ./docs/9.x/authorization.md:801
#: ./docs/10.x/authorization.md:766
#: ./docs/11.x/authorization.md:706
#: ./docs/master/authorization.md:705
msgctxt "P"
msgid "When authorizing actions using policies, you may pass an array as the second argument to the various authorization functions and helpers. The first element in the array will be used to determine which policy should be invoked, while the rest of the array elements are passed as parameters to the policy method and can be used for additional context when making authorization decisions. For example, consider the following `PostPolicy` method definition which contains an additional `$category` parameter:"
msgstr ""

#: ./docs/8.x/authorization.md:724
#: ./docs/9.x/authorization.md:803
msgctxt "CODE"
msgid "/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @param  int  $category\n"
" * @return bool\n"
" */\n"
"public function update(User $user, Post $post, int $category)\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}"
msgstr ""

#: ./docs/11.x/authorization.md:733
#~ msgctxt "P"
#~ msgid "<a name=\"authorization-and-inertia\"></a>"
#~ msgstr ""

#: ./docs/11.x/authorization.md:734
msgctxt "H2"
msgid "Authorization & Inertia"
msgstr ""

#: ./docs/11.x/authorization.md:736
msgctxt "P"
msgid "Although authorization must always be handled on the server, it can often be convenient to provide your frontend application with authorization data in order to properly render your application's UI. Laravel does not define a required convention for exposing authorization information to an Inertia powered frontend."
msgstr ""

#: ./docs/11.x/authorization.md:738
msgctxt "P"
msgid "However, if you are using one of Laravel's Inertia-based [starter kits](/docs/{{version}}/starter-kits), your application already contains a `HandleInertiaRequests` middleware. Within this middleware's `share` method, you may return shared data that will be provided to all Inertia pages in your application. This shared data can serve as a convenient location to define authorization information for the user:"
msgstr ""

#: ./docs/8.x/authorization.md:738
#: ./docs/9.x/authorization.md:817
#: ./docs/10.x/authorization.md:777
#: ./docs/11.x/authorization.md:717
#: ./docs/master/authorization.md:716
msgctxt "P"
msgid "When attempting to determine if the authenticated user can update a given post, we can invoke this policy method like so:"
msgstr ""

#: ./docs/11.x/authorization.md:740
msgctxt "CODE: php"
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Inertia\\Middleware;\n\n"
"class HandleInertiaRequests extends Middleware\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Define the props that are shared by default.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function share(Request $request)\n"
"    {\n"
"        return [\n"
"            ...parent::share($request),\n"
"            'auth' => [\n"
"                'user' => $request->user(),\n"
"                'permissions' => [\n"
"                    'post' => [\n"
"                        'create' => $request->user()->can('create', Post::class),\n"
"                    ],\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/authorization.md:740
#: ./docs/9.x/authorization.md:819
msgctxt "CODE"
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post)\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:768
#: ./docs/11.x/authorization.md:708
#: ./docs/master/authorization.md:707
msgctxt "CODE"
msgid "/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post, int $category): bool\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}"
msgstr ""

#: ./docs/10.x/authorization.md:779
msgctxt "CODE"
msgid "/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): RedirectResponse\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n\n"
"    // The current user can update the blog post...\n\n"
"    return redirect('/posts');\n"
"}"
msgstr ""

