msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/scout.pot\n"
"X-Crowdin-File-ID: 149\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-11-05 13:30\n"

#: docs/10.x/scout.md:block 1 (header)
msgid "Laravel Scout"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Queueing](#queueing)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Configuring Model Indexes](#configuring-model-indexes)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Configuring Searchable Data](#configuring-searchable-data)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Configuring The Model ID](#configuring-the-model-id)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Configuring Search Engines Per Model](#configuring-search-engines-per-model)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Identifying Users](#identifying-users)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Database / Collection Engines](#database-and-collection-engines)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Database Engine](#database-engine)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Collection Engine](#collection-engine)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Indexing](#indexing)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Batch Import](#batch-import)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Adding Records](#adding-records)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Updating Records](#updating-records)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Removing Records](#removing-records)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Pausing Indexing](#pausing-indexing)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Conditionally Searchable Model Instances](#conditionally-searchable-model-instances)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Searching](#searching)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Where Clauses](#where-clauses)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Pagination](#pagination)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Soft Deleting](#soft-deleting)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Customizing Engine Searches](#customizing-engine-searches)"
msgstr ""

#: docs/10.x/scout.md:block 2 (unordered list)
msgid "[Custom Engines](#custom-engines)"
msgstr ""

#: docs/10.x/scout.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/scout.md:block 5 (paragraph)
msgid "[Laravel Scout](https://github.com/laravel/scout) provides a simple, driver based solution for adding full-text search to your [Eloquent models](/docs/{{version}}/eloquent). Using model observers, Scout will automatically keep your search indexes in sync with your Eloquent records."
msgstr ""

#: docs/10.x/scout.md:block 6 (paragraph)
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/), [Meilisearch](https://www.meilisearch.com), and MySQL / PostgreSQL (`database`) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: docs/10.x/scout.md:block 8 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/scout.md:block 9 (paragraph)
msgid "First, install Scout via the Composer package manager:"
msgstr ""

#: docs/10.x/scout.md:block 10 (code)
msgid "composer require laravel/scout\n"
msgstr ""

#: docs/10.x/scout.md:block 11 (paragraph)
msgid "After installing Scout, you should publish the Scout configuration file using the `vendor:publish` Artisan command. This command will publish the `scout.php` configuration file to your application's `config` directory:"
msgstr ""

#: docs/10.x/scout.md:block 12 (code)
msgid "php artisan vendor:publish --provider=\"Laravel\\Scout\\ScoutServiceProvider\"\n"
msgstr ""

#: docs/10.x/scout.md:block 13 (paragraph)
msgid "Finally, add the `Laravel\\Scout\\Searchable` trait to the model you would like to make searchable. This trait will register a model observer that will automatically keep the model in sync with your search driver:"
msgstr ""

#: docs/10.x/scout.md:block 14 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 16 (header)
msgid "Driver Prerequisites"
msgstr ""

#: docs/10.x/scout.md:block 18 (header)
msgid "Algolia"
msgstr ""

#: docs/10.x/scout.md:block 19 (paragraph)
msgid "When using the Algolia driver, you should configure your Algolia `id` and `secret` credentials in your `config/scout.php` configuration file. Once your credentials have been configured, you will also need to install the Algolia PHP SDK via the Composer package manager:"
msgstr ""

#: docs/10.x/scout.md:block 20 (code)
msgid "composer require algolia/algoliasearch-client-php\n"
msgstr ""

#: docs/10.x/scout.md:block 22 (header)
msgid "Meilisearch"
msgstr ""

#: docs/10.x/scout.md:block 23 (paragraph)
msgid "[Meilisearch](https://www.meilisearch.com) is a blazingly fast and open source search engine. If you aren't sure how to install Meilisearch on your local machine, you may use [Laravel Sail](/docs/{{version}}/sail#meilisearch), Laravel's officially supported Docker development environment."
msgstr ""

#: docs/10.x/scout.md:block 24 (paragraph)
msgid "When using the Meilisearch driver you will need to install the Meilisearch PHP SDK via the Composer package manager:"
msgstr ""

#: docs/10.x/scout.md:block 25 (code)
msgid "composer require meilisearch/meilisearch-php http-interop/http-factory-guzzle\n"
msgstr ""

#: docs/10.x/scout.md:block 26 (paragraph)
msgid "Then, set the `SCOUT_DRIVER` environment variable as well as your Meilisearch `host` and `key` credentials within your application's `.env` file:"
msgstr ""

#: docs/10.x/scout.md:block 27 (code)
msgid "SCOUT_DRIVER=meilisearch\n"
"MEILISEARCH_HOST=http://127.0.0.1:7700\n"
"MEILISEARCH_KEY=masterKey\n"
msgstr ""

#: docs/10.x/scout.md:block 28 (paragraph)
msgid "For more information regarding Meilisearch, please consult the [Meilisearch documentation](https://docs.meilisearch.com/learn/getting_started/quick_start.html)."
msgstr ""

#: docs/10.x/scout.md:block 29 (paragraph)
msgid "In addition, you should ensure that you install a version of `meilisearch/meilisearch-php` that is compatible with your Meilisearch binary version by reviewing [Meilisearch's documentation regarding binary compatibility](https://github.com/meilisearch/meilisearch-php#-compatibility-with-meilisearch)."
msgstr ""

#: docs/10.x/scout.md:block 30 (quote)
msgid "**Warning** When upgrading Scout on an application that utilizes Meilisearch, you should always [review any additional breaking changes](https://github.com/meilisearch/Meilisearch/releases) to the Meilisearch service itself."
msgstr ""

#: docs/10.x/scout.md:block 32 (header)
msgid "Queueing"
msgstr ""

#: docs/10.x/scout.md:block 33 (paragraph)
msgid "While not strictly required to use Scout, you should strongly consider configuring a [queue driver](/docs/{{version}}/queues) before using the library. Running a queue worker will allow Scout to queue all operations that sync your model information to your search indexes, providing much better response times for your application's web interface."
msgstr ""

#: docs/10.x/scout.md:block 34 (paragraph)
msgid "Once you have configured a queue driver, set the value of the `queue` option in your `config/scout.php` configuration file to `true`:"
msgstr ""

#: docs/10.x/scout.md:block 35 (code)
msgid "'queue' => true,\n"
msgstr ""

#: docs/10.x/scout.md:block 36 (paragraph)
msgid "Even when the `queue` option is set to `false`, it's important to remember that some Scout drivers like Algolia and Meilisearch always index records asynchronously. Meaning, even though the index operation has completed within your Laravel application, the search engine itself may not reflect the new and updated records immediately."
msgstr ""

#: docs/10.x/scout.md:block 37 (paragraph)
msgid "To specify the connection and queue that your Scout jobs utilize, you may define the `queue` configuration option as an array:"
msgstr ""

#: docs/10.x/scout.md:block 38 (code)
msgid "'queue' => [\n"
"    'connection' => 'redis',\n"
"    'queue' => 'scout'\n"
"],\n"
msgstr ""

#: docs/10.x/scout.md:block 40 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/scout.md:block 42 (header)
msgid "Configuring Model Indexes"
msgstr ""

#: docs/10.x/scout.md:block 43 (paragraph)
msgid "Each Eloquent model is synced with a given search \"index\", which contains all of the searchable records for that model. In other words, you can think of each index like a MySQL table. By default, each model will be persisted to an index matching the model's typical \"table\" name. Typically, this is the plural form of the model name; however, you are free to customize the model's index by overriding the `searchableAs` method on the model:"
msgstr ""

#: docs/10.x/scout.md:block 44 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the name of the index associated with the model.\n"
"     */\n"
"    public function searchableAs(): string\n"
"    {\n"
"        return 'posts_index';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 46 (header)
msgid "Configuring Searchable Data"
msgstr ""

#: docs/10.x/scout.md:block 47 (paragraph)
msgid "By default, the entire `toArray` form of a given model will be persisted to its search index. If you would like to customize the data that is synchronized to the search index, you may override the `toSearchableArray` method on the model:"
msgstr ""

#: docs/10.x/scout.md:block 48 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the indexable data array for the model.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function toSearchableArray(): array\n"
"    {\n"
"        $array = $this->toArray();\n\n"
"        // Customize the data array...\n\n"
"        return $array;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 49 (paragraph)
msgid "Some search engines such as Meilisearch will only perform filter operations (`>`, `<`, etc.) on data of the correct type. So, when using these search engines and customizing your searchable data, you should ensure that numeric values are cast to their correct type:"
msgstr ""

#: docs/10.x/scout.md:block 50 (code)
msgid "public function toSearchableArray()\n"
"{\n"
"    return [\n"
"        'id' => (int) $this->id,\n"
"        'name' => $this->name,\n"
"        'price' => (float) $this->price,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 52 (header)
msgid "Configuring Filterable Data & Index Settings (Meilisearch)"
msgstr ""

#: docs/10.x/scout.md:block 53 (paragraph)
msgid "Unlike Scout's other drivers, Meilisearch requires you to pre-define index search settings such as filterable attributes, sortable attributes, and [other supported settings fields](https://docs.meilisearch.com/reference/api/settings.html)."
msgstr ""

#: docs/10.x/scout.md:block 54 (paragraph)
msgid "Filterable attributes are any attributes you plan to filter on when invoking Scout's `where` method, while sortable attributes are any attributes you plan to sort by when invoking Scout's `orderBy` method. To define your index settings, adjust the `index-settings` portion of your `meilisearch` configuration entry in your application's `scout` configuration file:"
msgstr ""

#: docs/10.x/scout.md:block 55 (code)
msgid "use App\\Models\\User;\n"
"use App\\Models\\Flight;\n\n"
"'meilisearch' => [\n"
"    'host' => env('MEILISEARCH_HOST', 'http://localhost:7700'),\n"
"    'key' => env('MEILISEARCH_KEY', null),\n"
"    'index-settings' => [\n"
"        User::class => [\n"
"            'filterableAttributes'=> ['id', 'name', 'email'],\n"
"            'sortableAttributes' => ['created_at'],\n"
"            // Other settings fields...\n"
"        ],\n"
"        Flight::class => [\n"
"            'filterableAttributes'=> ['id', 'destination'],\n"
"            'sortableAttributes' => ['updated_at'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/scout.md:block 56 (paragraph)
msgid "If the model underlying a given index is soft deletable and is included in the `index-settings` array, Scout will automatically include support for filtering on soft deleted models on that index. If you have no other filterable or sortable attributes to define for a soft deletable model index, you may simply add an empty entry to the `index-settings` array for that model:"
msgstr ""

#: docs/10.x/scout.md:block 57 (code)
msgid "'index-settings' => [\n"
"    Flight::class => []\n"
"],\n"
msgstr ""

#: docs/10.x/scout.md:block 58 (paragraph)
msgid "After configuring your application's index settings, you must invoke the `scout:sync-index-settings` Artisan command. This command will inform Meilisearch of your currently configured index settings. For convenience, you may wish to make this command part of your deployment process:"
msgstr ""

#: docs/10.x/scout.md:block 59 (code)
msgid "php artisan scout:sync-index-settings\n"
msgstr ""

#: docs/10.x/scout.md:block 61 (header)
msgid "Configuring The Model ID"
msgstr ""

#: docs/10.x/scout.md:block 62 (paragraph)
msgid "By default, Scout will use the primary key of the model as the model's unique ID / key that is stored in the search index. If you need to customize this behavior, you may override the `getScoutKey` and the `getScoutKeyName` methods on the model:"
msgstr ""

#: docs/10.x/scout.md:block 63 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the value used to index the model.\n"
"     */\n"
"    public function getScoutKey(): mixed\n"
"    {\n"
"        return $this->email;\n"
"    }\n\n"
"    /**\n"
"     * Get the key name used to index the model.\n"
"     */\n"
"    public function getScoutKeyName(): mixed\n"
"    {\n"
"        return 'email';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 65 (header)
msgid "Configuring Search Engines Per Model"
msgstr ""

#: docs/10.x/scout.md:block 66 (paragraph)
msgid "When searching, Scout will typically use the default search engine specified in your application's `scout` configuration file. However, the search engine for a particular model can be changed by overriding the `searchableUsing` method on the model:"
msgstr ""

#: docs/10.x/scout.md:block 67 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Engines\\Engine;\n"
"use Laravel\\Scout\\EngineManager;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the engine used to index the model.\n"
"     */\n"
"    public function searchableUsing(): Engine\n"
"    {\n"
"        return app(EngineManager::class)->engine('meilisearch');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 69 (header)
msgid "Identifying Users"
msgstr ""

#: docs/10.x/scout.md:block 70 (paragraph)
msgid "Scout also allows you to auto identify users when using [Algolia](https://algolia.com). Associating the authenticated user with search operations may be helpful when viewing your search analytics within Algolia's dashboard. You can enable user identification by defining a `SCOUT_IDENTIFY` environment variable as `true` in your application's `.env` file:"
msgstr ""

#: docs/10.x/scout.md:block 71 (code)
msgid "SCOUT_IDENTIFY=true\n"
msgstr ""

#: docs/10.x/scout.md:block 72 (paragraph)
msgid "Enabling this feature will also pass the request's IP address and your authenticated user's primary identifier to Algolia so this data is associated with any search request that is made by the user."
msgstr ""

#: docs/10.x/scout.md:block 74 (header)
msgid "Database / Collection Engines"
msgstr ""

#: docs/10.x/scout.md:block 76 (header)
msgid "Database Engine"
msgstr ""

#: docs/10.x/scout.md:block 77 (quote)
msgid "**Warning** The database engine currently supports MySQL and PostgreSQL."
msgstr ""

#: docs/10.x/scout.md:block 78 (paragraph)
msgid "If your application interacts with small to medium sized databases or has a light workload, you may find it more convenient to get started with Scout's \"database\" engine. The database engine will use \"where like\" clauses and full text indexes when filtering results from your existing database to determine the applicable search results for your query."
msgstr ""

#: docs/10.x/scout.md:block 79 (paragraph)
msgid "To use the database engine, you may simply set the value of the `SCOUT_DRIVER` environment variable to `database`, or specify the `database` driver directly in your application's `scout` configuration file:"
msgstr ""

#: docs/10.x/scout.md:block 80 (code)
msgid "SCOUT_DRIVER=database\n"
msgstr ""

#: docs/10.x/scout.md:block 81 (paragraph)
msgid "Once you have specified the database engine as your preferred driver, you must [configure your searchable data](#configuring-searchable-data). Then, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or Meilisearch indexes, is unnecessary when using the database engine."
msgstr ""

#: docs/10.x/scout.md:block 82 (header)
msgid "Customizing Database Searching Strategies"
msgstr ""

#: docs/10.x/scout.md:block 83 (paragraph)
msgid "By default, the database engine will execute a \"where like\" query against every model attribute that you have [configured as searchable](#configuring-searchable-data). However, in some situations, this may result in poor performance. Therefore, the database engine's search strategy can be configured so that some specified columns utilize full text search queries or only use \"where like\" constraints to search the prefixes of strings (`example%`) instead of searching within the entire string (`%example%`)."
msgstr ""

#: docs/10.x/scout.md:block 84 (paragraph)
msgid "To define this behavior, you may assign PHP attributes to your model's `toSearchableArray` method. Any columns that are not assigned additional search strategy behavior will continue to use the default \"where like\" strategy:"
msgstr ""

#: docs/10.x/scout.md:block 85 (code)
msgid "use Laravel\\Scout\\Attributes\\SearchUsingFullText;\n"
"use Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n\n"
"/**\n"
" * Get the indexable data array for the model.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"#[SearchUsingPrefix(['id', 'email'])]\n"
"#[SearchUsingFullText(['bio'])]\n"
"public function toSearchableArray(): array\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'bio' => $this->bio,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 86 (quote)
msgid "**Warning** Before specifying that a column should use full text query constraints, ensure that the column has been assigned a [full text index](/docs/{{version}}/migrations#available-index-types)."
msgstr ""

#: docs/10.x/scout.md:block 88 (header)
msgid "Collection Engine"
msgstr ""

#: docs/10.x/scout.md:block 89 (paragraph)
msgid "While you are free to use the Algolia or Meilisearch search engines during local development, you may find it more convenient to get started with the \"collection\" engine. The collection engine will use \"where\" clauses and collection filtering on results from your existing database to determine the applicable search results for your query. When using this engine, it is not necessary to \"index\" your searchable models, as they will simply be retrieved from your local database."
msgstr ""

#: docs/10.x/scout.md:block 90 (paragraph)
msgid "To use the collection engine, you may simply set the value of the `SCOUT_DRIVER` environment variable to `collection`, or specify the `collection` driver directly in your application's `scout` configuration file:"
msgstr ""

#: docs/10.x/scout.md:block 91 (code)
msgid "SCOUT_DRIVER=collection\n"
msgstr ""

#: docs/10.x/scout.md:block 92 (paragraph)
msgid "Once you have specified the collection driver as your preferred driver, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or Meilisearch indexes, is unnecessary when using the collection engine."
msgstr ""

#: docs/10.x/scout.md:block 93 (header)
msgid "Differences From Database Engine"
msgstr ""

#: docs/10.x/scout.md:block 94 (paragraph)
msgid "On first glance, the \"database\" and \"collections\" engines are fairly similar. They both interact directly with your database to retrieve search results. However, the collection engine does not utilize full text indexes or `LIKE` clauses to find matching records. Instead, it pulls all possible records and uses Laravel's `Str::is` helper to determine if the search string exists within the model attribute values."
msgstr ""

#: docs/10.x/scout.md:block 95 (paragraph)
msgid "The collection engine is the most portable search engine as it works across all relational databases supported by Laravel (including SQLite and SQL Server); however, it is less efficient than Scout's database engine."
msgstr ""

#: docs/10.x/scout.md:block 97 (header)
msgid "Indexing"
msgstr ""

#: docs/10.x/scout.md:block 99 (header)
msgid "Batch Import"
msgstr ""

#: docs/10.x/scout.md:block 100 (paragraph)
msgid "If you are installing Scout into an existing project, you may already have database records you need to import into your indexes. Scout provides a `scout:import` Artisan command that you may use to import all of your existing records into your search indexes:"
msgstr ""

#: docs/10.x/scout.md:block 101 (code)
msgid "php artisan scout:import \"App\\Models\\Post\"\n"
msgstr ""

#: docs/10.x/scout.md:block 102 (paragraph)
msgid "The `flush` command may be used to remove all of a model's records from your search indexes:"
msgstr ""

#: docs/10.x/scout.md:block 103 (code)
msgid "php artisan scout:flush \"App\\Models\\Post\"\n"
msgstr ""

#: docs/10.x/scout.md:block 105 (header)
msgid "Modifying The Import Query"
msgstr ""

#: docs/10.x/scout.md:block 106 (paragraph)
msgid "If you would like to modify the query that is used to retrieve all of your models for batch importing, you may define a `makeAllSearchableUsing` method on your model. This is a great place to add any eager relationship loading that may be necessary before importing your models:"
msgstr ""

#: docs/10.x/scout.md:block 107 (code)
msgid "use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"/**\n"
" * Modify the query used to retrieve models when making all of the models searchable.\n"
" */\n"
"protected function makeAllSearchableUsing(Builder $query): Builder\n"
"{\n"
"    return $query->with('author');\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 108 (quote)
msgid "**Warning** The `makeAllSearchableUsing` method may not be applicable when using a queue to batch import models. Relationships are [not restored](/docs/{{version}}/queues#handling-relationships) when model collections are processed by jobs."
msgstr ""

#: docs/10.x/scout.md:block 110 (header)
msgid "Adding Records"
msgstr ""

#: docs/10.x/scout.md:block 111 (paragraph)
msgid "Once you have added the `Laravel\\Scout\\Searchable` trait to a model, all you need to do is `save` or `create` a model instance and it will automatically be added to your search index. If you have configured Scout to [use queues](#queueing) this operation will be performed in the background by your queue worker:"
msgstr ""

#: docs/10.x/scout.md:block 112 (code)
msgid "use App\\Models\\Order;\n\n"
"$order = new Order;\n\n"
"// ...\n\n"
"$order->save();\n"
msgstr ""

#: docs/10.x/scout.md:block 114 (header)
msgid "Adding Records Via Query"
msgstr ""

#: docs/10.x/scout.md:block 115 (paragraph)
msgid "If you would like to add a collection of models to your search index via an Eloquent query, you may chain the `searchable` method onto the Eloquent query. The `searchable` method will [chunk the results](/docs/{{version}}/eloquent#chunking-results) of the query and add the records to your search index. Again, if you have configured Scout to use queues, all of the chunks will be imported in the background by your queue workers:"
msgstr ""

#: docs/10.x/scout.md:block 116 (code)
msgid "use App\\Models\\Order;\n\n"
"Order::where('price', '>', 100)->searchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 117 (paragraph)
msgid "You may also call the `searchable` method on an Eloquent relationship instance:"
msgstr ""

#: docs/10.x/scout.md:block 118 (code)
msgid "$user->orders()->searchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 119 (paragraph)
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to add the model instances to their corresponding index:"
msgstr ""

#: docs/10.x/scout.md:block 120 (code)
msgid "$orders->searchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 121 (quote)
msgid "**Note** The `searchable` method can be considered an \"upsert\" operation. In other words, if the model record is already in your index, it will be updated. If it does not exist in the search index, it will be added to the index."
msgstr ""

#: docs/10.x/scout.md:block 123 (header)
msgid "Updating Records"
msgstr ""

#: docs/10.x/scout.md:block 124 (paragraph)
msgid "To update a searchable model, you only need to update the model instance's properties and `save` the model to your database. Scout will automatically persist the changes to your search index:"
msgstr ""

#: docs/10.x/scout.md:block 125 (code)
msgid "use App\\Models\\Order;\n\n"
"$order = Order::find(1);\n\n"
"// Update the order...\n\n"
"$order->save();\n"
msgstr ""

#: docs/10.x/scout.md:block 126 (paragraph)
msgid "You may also invoke the `searchable` method on an Eloquent query instance to update a collection of models. If the models do not exist in your search index, they will be created:"
msgstr ""

#: docs/10.x/scout.md:block 127 (code)
msgid "Order::where('price', '>', 100)->searchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 128 (paragraph)
msgid "If you would like to update the search index records for all of the models in a relationship, you may invoke the `searchable` on the relationship instance:"
msgstr ""

#: docs/10.x/scout.md:block 130 (paragraph)
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `searchable` method on the collection instance to update the model instances in their corresponding index:"
msgstr ""

#: docs/10.x/scout.md:block 133 (header)
msgid "Modifying Records Before Importing"
msgstr ""

#: docs/10.x/scout.md:block 134 (paragraph)
msgid "Sometimes you may need to prepare the collection of models before they are made searchable. For instance, you may want to eager load a relationship so that the relationship data can be efficiently added to your search index. To accomplish this, define a `makeSearchableUsing` method on the corresponding model:"
msgstr ""

#: docs/10.x/scout.md:block 135 (code)
msgid "use Illuminate\\Database\\Eloquent\\Collection;\n\n"
"/**\n"
" * Modify the collection of models being made searchable.\n"
" */\n"
"public function makeSearchableUsing(Collection $models): Collection\n"
"{\n"
"    return $models->load('author');\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 137 (header)
msgid "Removing Records"
msgstr ""

#: docs/10.x/scout.md:block 138 (paragraph)
msgid "To remove a record from your index you may simply `delete` the model from the database. This may be done even if you are using [soft deleted](/docs/{{version}}/eloquent#soft-deleting) models:"
msgstr ""

#: docs/10.x/scout.md:block 139 (code)
msgid "use App\\Models\\Order;\n\n"
"$order = Order::find(1);\n\n"
"$order->delete();\n"
msgstr ""

#: docs/10.x/scout.md:block 140 (paragraph)
msgid "If you do not want to retrieve the model before deleting the record, you may use the `unsearchable` method on an Eloquent query instance:"
msgstr ""

#: docs/10.x/scout.md:block 141 (code)
msgid "Order::where('price', '>', 100)->unsearchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 142 (paragraph)
msgid "If you would like to remove the search index records for all of the models in a relationship, you may invoke the `unsearchable` on the relationship instance:"
msgstr ""

#: docs/10.x/scout.md:block 143 (code)
msgid "$user->orders()->unsearchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 144 (paragraph)
msgid "Or, if you already have a collection of Eloquent models in memory, you may call the `unsearchable` method on the collection instance to remove the model instances from their corresponding index:"
msgstr ""

#: docs/10.x/scout.md:block 145 (code)
msgid "$orders->unsearchable();\n"
msgstr ""

#: docs/10.x/scout.md:block 147 (header)
msgid "Pausing Indexing"
msgstr ""

#: docs/10.x/scout.md:block 148 (paragraph)
msgid "Sometimes you may need to perform a batch of Eloquent operations on a model without syncing the model data to your search index. You may do this using the `withoutSyncingToSearch` method. This method accepts a single closure which will be immediately executed. Any model operations that occur within the closure will not be synced to the model's index:"
msgstr ""

#: docs/10.x/scout.md:block 149 (code)
msgid "use App\\Models\\Order;\n\n"
"Order::withoutSyncingToSearch(function () {\n"
"    // Perform model actions...\n"
"});\n"
msgstr ""

#: docs/10.x/scout.md:block 151 (header)
msgid "Conditionally Searchable Model Instances"
msgstr ""

#: docs/10.x/scout.md:block 152 (paragraph)
msgid "Sometimes you may need to only make a model searchable under certain conditions. For example, imagine you have `App\\Models\\Post` model that may be in one of two states: \"draft\" and \"published\". You may only want to allow \"published\" posts to be searchable. To accomplish this, you may define a `shouldBeSearchable` method on your model:"
msgstr ""

#: docs/10.x/scout.md:block 153 (code)
msgid "/**\n"
" * Determine if the model should be searchable.\n"
" */\n"
"public function shouldBeSearchable(): bool\n"
"{\n"
"    return $this->isPublished();\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 154 (paragraph)
msgid "The `shouldBeSearchable` method is only applied when manipulating models through the `save` and `create` methods, queries, or relationships. Directly making models or collections searchable using the `searchable` method will override the result of the `shouldBeSearchable` method."
msgstr ""

#: docs/10.x/scout.md:block 155 (quote)
msgid "**Warning** The `shouldBeSearchable` method is not applicable when using Scout's \"database\" engine, as all searchable data is always stored in the database. To achieve similar behavior when using the database engine, you should use [where clauses](#where-clauses) instead."
msgstr ""

#: docs/10.x/scout.md:block 157 (header)
msgid "Searching"
msgstr ""

#: docs/10.x/scout.md:block 158 (paragraph)
msgid "You may begin searching a model using the `search` method. The search method accepts a single string that will be used to search your models. You should then chain the `get` method onto the search query to retrieve the Eloquent models that match the given search query:"
msgstr ""

#: docs/10.x/scout.md:block 159 (code)
msgid "use App\\Models\\Order;\n\n"
"$orders = Order::search('Star Trek')->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 160 (paragraph)
msgid "Since Scout searches return a collection of Eloquent models, you may even return the results directly from a route or controller and they will automatically be converted to JSON:"
msgstr ""

#: docs/10.x/scout.md:block 161 (code)
msgid "use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n\n"
"Route::get('/search', function (Request $request) {\n"
"    return Order::search($request->search)->get();\n"
"});\n"
msgstr ""

#: docs/10.x/scout.md:block 162 (paragraph)
msgid "If you would like to get the raw search results before they are converted to Eloquent models, you may use the `raw` method:"
msgstr ""

#: docs/10.x/scout.md:block 163 (code)
msgid "$orders = Order::search('Star Trek')->raw();\n"
msgstr ""

#: docs/10.x/scout.md:block 165 (header)
msgid "Custom Indexes"
msgstr ""

#: docs/10.x/scout.md:block 166 (paragraph)
msgid "Search queries will typically be performed on the index specified by the model's [`searchableAs`](#configuring-model-indexes) method. However, you may use the `within` method to specify a custom index that should be searched instead:"
msgstr ""

#: docs/10.x/scout.md:block 167 (code)
msgid "$orders = Order::search('Star Trek')\n"
"    ->within('tv_shows_popularity_desc')\n"
"    ->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 169 (header)
msgid "Where Clauses"
msgstr ""

#: docs/10.x/scout.md:block 170 (paragraph)
msgid "Scout allows you to add simple \"where\" clauses to your search queries. Currently, these clauses only support basic numeric equality checks and are primarily useful for scoping search queries by an owner ID:"
msgstr ""

#: docs/10.x/scout.md:block 171 (code)
msgid "use App\\Models\\Order;\n\n"
"$orders = Order::search('Star Trek')->where('user_id', 1)->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 172 (paragraph)
msgid "In addition, the `whereIn` method may be used to verify that a given column's value is contained within the given array:"
msgstr ""

#: docs/10.x/scout.md:block 173 (code)
msgid "$orders = Order::search('Star Trek')->whereIn(\n"
"    'status', ['open', 'paid']\n"
")->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 174 (paragraph)
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""

#: docs/10.x/scout.md:block 175 (code)
msgid "$orders = Order::search('Star Trek')->whereNotIn(\n"
"    'status', ['closed']\n"
")->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 176 (paragraph)
msgid "Since a search index is not a relational database, more advanced \"where\" clauses are not currently supported."
msgstr ""

#: docs/10.x/scout.md:block 177 (quote)
msgid "**Warning** If your application is using Meilisearch, you must configure your application's [filterable attributes](#configuring-filterable-data-for-meilisearch) before utilizing Scout's \"where\" clauses."
msgstr ""

#: docs/10.x/scout.md:block 179 (header)
msgid "Pagination"
msgstr ""

#: docs/10.x/scout.md:block 180 (paragraph)
msgid "In addition to retrieving a collection of models, you may paginate your search results using the `paginate` method. This method will return an `Illuminate\\Pagination\\LengthAwarePaginator` instance just as if you had [paginated a traditional Eloquent query](/docs/{{version}}/pagination):"
msgstr ""

#: docs/10.x/scout.md:block 181 (code)
msgid "use App\\Models\\Order;\n\n"
"$orders = Order::search('Star Trek')->paginate();\n"
msgstr ""

#: docs/10.x/scout.md:block 182 (paragraph)
msgid "You may specify how many models to retrieve per page by passing the amount as the first argument to the `paginate` method:"
msgstr ""

#: docs/10.x/scout.md:block 183 (code)
msgid "$orders = Order::search('Star Trek')->paginate(15);\n"
msgstr ""

#: docs/10.x/scout.md:block 184 (paragraph)
msgid "Once you have retrieved the results, you may display the results and render the page links using [Blade](/docs/{{version}}/blade) just as if you had paginated a traditional Eloquent query:"
msgstr ""

#: docs/10.x/scout.md:block 185 (code)
msgid "<div class=\"container\">\n"
"    @foreach ($orders as $order)\n"
"        {{ $order->price }}\n"
"    @endforeach\n"
"</div>\n\n"
"{{ $orders->links() }}\n"
msgstr ""

#: docs/10.x/scout.md:block 186 (paragraph)
msgid "Of course, if you would like to retrieve the pagination results as JSON, you may return the paginator instance directly from a route or controller:"
msgstr ""

#: docs/10.x/scout.md:block 187 (code)
msgid "use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n\n"
"Route::get('/orders', function (Request $request) {\n"
"    return Order::search($request->input('query'))->paginate(15);\n"
"});\n"
msgstr ""

#: docs/10.x/scout.md:block 188 (quote)
msgid "**Warning** Since search engines are not aware of your Eloquent model's global scope definitions, you should not utilize global scopes in applications that utilize Scout pagination. Or, you should recreate the global scope's constraints when searching via Scout."
msgstr ""

#: docs/10.x/scout.md:block 190 (header)
msgid "Soft Deleting"
msgstr ""

#: docs/10.x/scout.md:block 191 (paragraph)
msgid "If your indexed models are [soft deleting](/docs/{{version}}/eloquent#soft-deleting) and you need to search your soft deleted models, set the `soft_delete` option of the `config/scout.php` configuration file to `true`:"
msgstr ""

#: docs/10.x/scout.md:block 192 (code)
msgid "'soft_delete' => true,\n"
msgstr ""

#: docs/10.x/scout.md:block 193 (paragraph)
msgid "When this configuration option is `true`, Scout will not remove soft deleted models from the search index. Instead, it will set a hidden `__soft_deleted` attribute on the indexed record. Then, you may use the `withTrashed` or `onlyTrashed` methods to retrieve the soft deleted records when searching:"
msgstr ""

#: docs/10.x/scout.md:block 194 (code)
msgid "use App\\Models\\Order;\n\n"
"// Include trashed records when retrieving results...\n"
"$orders = Order::search('Star Trek')->withTrashed()->get();\n\n"
"// Only include trashed records when retrieving results...\n"
"$orders = Order::search('Star Trek')->onlyTrashed()->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 195 (quote)
msgid "**Note** When a soft deleted model is permanently deleted using `forceDelete`, Scout will remove it from the search index automatically."
msgstr ""

#: docs/10.x/scout.md:block 197 (header)
msgid "Customizing Engine Searches"
msgstr ""

#: docs/10.x/scout.md:block 198 (paragraph)
msgid "If you need to perform advanced customization of the search behavior of an engine you may pass a closure as the second argument to the `search` method. For example, you could use this callback to add geo-location data to your search options before the search query is passed to Algolia:"
msgstr ""

#: docs/10.x/scout.md:block 199 (code)
msgid "use Algolia\\AlgoliaSearch\\SearchIndex;\n"
"use App\\Models\\Order;\n\n"
"Order::search(\n"
"    'Star Trek',\n"
"    function (SearchIndex $algolia, string $query, array $options) {\n"
"        $options['body']['query']['bool']['filter']['geo_distance'] = [\n"
"            'distance' => '1000km',\n"
"            'location' => ['lat' => 36, 'lon' => 111],\n"
"        ];\n\n"
"        return $algolia->search($query, $options);\n"
"    }\n"
")->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 201 (header)
msgid "Customizing The Eloquent Results Query"
msgstr ""

#: docs/10.x/scout.md:block 202 (paragraph)
msgid "After Scout retrieves a list of matching Eloquent models from your application's search engine, Eloquent is used to retrieve all of the matching models by their primary keys. You may customize this query by invoking the `query` method. The `query` method accepts a closure that will receive the Eloquent query builder instance as an argument:"
msgstr ""

#: docs/10.x/scout.md:block 203 (code)
msgid "use App\\Models\\Order;\n"
"use Illuminate\\Database\\Eloquent\\Builder;\n\n"
"$orders = Order::search('Star Trek')\n"
"    ->query(fn (Builder $query) => $query->with('invoices'))\n"
"    ->get();\n"
msgstr ""

#: docs/10.x/scout.md:block 204 (paragraph)
msgid "Since this callback is invoked after the relevant models have already been retrieved from your application's search engine, the `query` method should not be used for \"filtering\" results. Instead, you should use [Scout where clauses](#where-clauses)."
msgstr ""

#: docs/10.x/scout.md:block 206 (header)
msgid "Custom Engines"
msgstr ""

#: docs/10.x/scout.md:block 208 (header)
msgid "Writing The Engine"
msgstr ""

#: docs/10.x/scout.md:block 209 (paragraph)
msgid "If one of the built-in Scout search engines doesn't fit your needs, you may write your own custom engine and register it with Scout. Your engine should extend the `Laravel\\Scout\\Engines\\Engine` abstract class. This abstract class contains eight methods your custom engine must implement:"
msgstr ""

#: docs/10.x/scout.md:block 210 (code)
msgid "use Laravel\\Scout\\Builder;\n\n"
"abstract public function update($models);\n"
"abstract public function delete($models);\n"
"abstract public function search(Builder $builder);\n"
"abstract public function paginate(Builder $builder, $perPage, $page);\n"
"abstract public function mapIds($results);\n"
"abstract public function map(Builder $builder, $results, $model);\n"
"abstract public function getTotalCount($results);\n"
"abstract public function flush($model);\n"
msgstr ""

#: docs/10.x/scout.md:block 211 (paragraph)
msgid "You may find it helpful to review the implementations of these methods on the `Laravel\\Scout\\Engines\\AlgoliaEngine` class. This class will provide you with a good starting point for learning how to implement each of these methods in your own engine."
msgstr ""

#: docs/10.x/scout.md:block 213 (header)
msgid "Registering The Engine"
msgstr ""

#: docs/10.x/scout.md:block 214 (paragraph)
msgid "Once you have written your custom engine, you may register it with Scout using the `extend` method of the Scout engine manager. Scout's engine manager may be resolved from the Laravel service container. You should call the `extend` method from the `boot` method of your `App\\Providers\\AppServiceProvider` class or any other service provider used by your application:"
msgstr ""

#: docs/10.x/scout.md:block 215 (code)
msgid "use App\\ScoutExtensions\\MySqlSearchEngine;\n"
"use Laravel\\Scout\\EngineManager;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    resolve(EngineManager::class)->extend('mysql', function () {\n"
"        return new MySqlSearchEngine;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/scout.md:block 216 (paragraph)
msgid "Once your engine has been registered, you may specify it as your default Scout `driver` in your application's `config/scout.php` configuration file:"
msgstr ""

#: docs/10.x/scout.md:block 217 (code)
msgid "'driver' => 'mysql',\n"
msgstr ""

#: docs/8.x/scout.md:block 2 (unordered list)
msgid "[Local Development](#local-development)"
msgstr ""

#: docs/8.x/scout.md:block 2 (unordered list)
msgid "[Builder Macros](#builder-macros)"
msgstr ""

#: docs/8.x/scout.md:block 6 (paragraph)
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/) and [MeiliSearch](https://www.meilisearch.com) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: docs/8.x/scout.md:block 22 (header)
msgid "MeiliSearch"
msgstr ""

#: docs/8.x/scout.md:block 23 (paragraph)
msgid "[MeiliSearch](https://www.meilisearch.com) is a blazingly fast and open source search engine. If you aren't sure how to install MeiliSearch on your local machine, you may use [Laravel Sail](/docs/{{version}}/sail#meilisearch), Laravel's officially supported Docker development environment."
msgstr ""

#: docs/8.x/scout.md:block 24 (paragraph)
msgid "When using the MeiliSearch driver you will need to install the MeiliSearch PHP SDK via the Composer package manager:"
msgstr ""

#: docs/8.x/scout.md:block 26 (paragraph)
msgid "Then, set the `SCOUT_DRIVER` environment variable as well as your MeiliSearch `host` and `key` credentials within your application's `.env` file:"
msgstr ""

#: docs/8.x/scout.md:block 28 (paragraph)
msgid "For more information regarding MeiliSearch, please consult the [MeiliSearch documentation](https://docs.meilisearch.com/learn/getting_started/quick_start.html)."
msgstr ""

#: docs/8.x/scout.md:block 29 (paragraph)
msgid "In addition, you should ensure that you install a version of `meilisearch/meilisearch-php` that is compatible with your MeiliSearch binary version by reviewing [MeiliSearch's documentation regarding binary compatibility](https://github.com/meilisearch/meilisearch-php#-compatibility-with-meilisearch)."
msgstr ""

#: docs/8.x/scout.md:block 30 (quote)
msgid "{note} When upgrading Scout on an application that utilizes MeiliSearch, you should always [review any additional breaking changes](https://github.com/meilisearch/MeiliSearch/releases) to the MeiliSearch service itself."
msgstr ""

#: docs/8.x/scout.md:block 41 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the name of the index associated with the model.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function searchableAs()\n"
"    {\n"
"        return 'posts_index';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 45 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class Post extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the indexable data array for the model.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function toSearchableArray()\n"
"    {\n"
"        $array = $this->toArray();\n\n"
"        // Customize the data array...\n\n"
"        return $array;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 48 (paragraph)
msgid "By default, Scout will use the primary key of the model as model's unique ID / key that is stored in the search index. If you need to customize this behavior, you may override the `getScoutKey` and the `getScoutKeyName` methods on the model:"
msgstr ""

#: docs/8.x/scout.md:block 49 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the value used to index the model.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getScoutKey()\n"
"    {\n"
"        return $this->email;\n"
"    }\n\n"
"    /**\n"
"     * Get the key name used to index the model.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getScoutKeyName()\n"
"    {\n"
"        return 'email';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 54 (paragraph)
msgid "Enabling this feature this will also pass the request's IP address and your authenticated user's primary identifier to Algolia so this data is associated with any search request that is made by the user."
msgstr ""

#: docs/8.x/scout.md:block 56 (header)
msgid "Local Development"
msgstr ""

#: docs/8.x/scout.md:block 57 (paragraph)
msgid "While you are free to use the Algolia or MeiliSearch search engines during local development, you may find it more convenient to get started with the \"collection\" engine. The collection engine will use \"where\" clauses and collection filtering on results from your existing database to determine the applicable search results for your query. When using this engine, it is not necessary to \"index\" your searchable models, as they will simply be retrieved from your local database."
msgstr ""

#: docs/8.x/scout.md:block 60 (paragraph)
msgid "Once you have specified the collection driver as your preferred driver, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or MeiliSearch indexes, is unnecessary when using the collection engine."
msgstr ""

#: docs/8.x/scout.md:block 72 (code)
msgid "/**\n"
" * Modify the query used to retrieve models when making all of the models searchable.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n"
" * @return \\Illuminate\\Database\\Eloquent\\Builder\n"
" */\n"
"protected function makeAllSearchableUsing($query)\n"
"{\n"
"    return $query->with('author');\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 85 (quote)
msgid "{tip} The `searchable` method can be considered an \"upsert\" operation. In other words, if the model record is already in your index, it will be updated. If it does not exist in the search index, it will be added to the index."
msgstr ""

#: docs/8.x/scout.md:block 113 (code)
msgid "/**\n"
" * Determine if the model should be searchable.\n"
" *\n"
" * @return bool\n"
" */\n"
"public function shouldBeSearchable()\n"
"{\n"
"    return $this->isPublished();\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 131 (paragraph)
msgid "You may use the `whereIn` method to constrain results against a given set of values:"
msgstr ""

#: docs/8.x/scout.md:block 132 (code)
msgid "$orders = Order::search('Star Trek')->whereIn(\n"
"    'status', ['paid', 'open']\n"
")->get();\n"
msgstr ""

#: docs/8.x/scout.md:block 150 (quote)
msgid "{tip} When a soft deleted model is permanently deleted using `forceDelete`, Scout will remove it from the search index automatically."
msgstr ""

#: docs/8.x/scout.md:block 165 (code)
msgid "use App\\ScoutExtensions\\MySqlSearchEngine\n"
"use Laravel\\Scout\\EngineManager;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    resolve(EngineManager::class)->extend('mysql', function () {\n"
"        return new MySqlSearchEngine;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 169 (header)
msgid "Builder Macros"
msgstr ""

#: docs/8.x/scout.md:block 170 (paragraph)
msgid "If you would like to define a custom Scout search builder method, you may use the `macro` method on the `Laravel\\Scout\\Builder` class. Typically, \"macros\" should be defined within a [service provider's](/docs/{{version}}/providers) `boot` method:"
msgstr ""

#: docs/8.x/scout.md:block 171 (code)
msgid "use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Scout\\Builder;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Builder::macro('count', function () {\n"
"        return $this->engine()->getTotalCount(\n"
"            $this->engine()->search($this)\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/scout.md:block 172 (paragraph)
msgid "The `macro` function accepts a macro name as its first argument and a closure as its second argument. The macro's closure will be executed when calling the macro name from a `Laravel\\Scout\\Builder` implementation:"
msgstr ""

#: docs/8.x/scout.md:block 173 (code)
msgid "use App\\Models\\Order;\n\n"
"Order::search('Star Trek')->count();\n"
msgstr ""

#: docs/9.x/scout.md:block 6 (paragraph)
msgid "Currently, Scout ships with [Algolia](https://www.algolia.com/), [MeiliSearch](https://www.meilisearch.com), and MySQL / PostgreSQL (`database`) drivers. In addition, Scout includes a \"collection\" driver that is designed for local development usage and does not require any external dependencies or third-party services. Furthermore, writing custom drivers is simple and you are free to extend Scout with your own search implementations."
msgstr ""

#: docs/9.x/scout.md:block 30 (quote)
msgid "**Warning** When upgrading Scout on an application that utilizes MeiliSearch, you should always [review any additional breaking changes](https://github.com/meilisearch/MeiliSearch/releases) to the MeiliSearch service itself."
msgstr ""

#: docs/9.x/scout.md:block 49 (paragraph)
msgid "Some search engines such as MeiliSearch will only perform filter operations (`>`, `<`, etc.) on data of the correct type. So, when using these search engines and customizing your searchable data, you should ensure that numeric values are cast to their correct type:"
msgstr ""

#: docs/9.x/scout.md:block 52 (header)
msgid "Configuring Filterable Data & Index Settings (MeiliSearch)"
msgstr ""

#: docs/9.x/scout.md:block 53 (paragraph)
msgid "Unlike Scout's other drivers, MeiliSearch requires you to pre-define index search settings such as filterable attributes, sortable attributes, and [other supported settings fields](https://docs.meilisearch.com/reference/api/settings.html)."
msgstr ""

#: docs/9.x/scout.md:block 58 (paragraph)
msgid "After configuring your application's index settings, you must invoke the `scout:sync-index-settings` Artisan command. This command will inform MeiliSearch of your currently configured index settings. For convenience, you may wish to make this command part of your deployment process:"
msgstr ""

#: docs/9.x/scout.md:block 67 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Laravel\\Scout\\EngineManager;\n"
"use Laravel\\Scout\\Searchable;\n\n"
"class User extends Model\n"
"{\n"
"    use Searchable;\n\n"
"    /**\n"
"     * Get the engine used to index the model.\n"
"     *\n"
"     * @return \\Laravel\\Scout\\Engines\\Engine\n"
"     */\n"
"    public function searchableUsing()\n"
"    {\n"
"        return app(EngineManager::class)->engine('meilisearch');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/scout.md:block 81 (paragraph)
msgid "Once you have specified the database engine as your preferred driver, you must [configure your searchable data](#configuring-searchable-data). Then, you may start [executing search queries](#searching) against your models. Search engine indexing, such as the indexing needed to seed Algolia or MeiliSearch indexes, is unnecessary when using the database engine."
msgstr ""

#: docs/9.x/scout.md:block 85 (code)
msgid "use Laravel\\Scout\\Attributes\\SearchUsingFullText;\n"
"use Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n\n"
"/**\n"
" * Get the indexable data array for the model.\n"
" *\n"
" * @return array\n"
" */\n"
"#[SearchUsingPrefix(['id', 'email'])]\n"
"#[SearchUsingFullText(['bio'])]\n"
"public function toSearchableArray()\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'bio' => $this->bio,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/scout.md:block 170 (quote)
msgid "**Warning** If your application is using MeiliSearch, you must configure your application's [filterable attributes](#configuring-filterable-data-for-meilisearch) before utilizing Scout's \"where\" clauses."
msgstr ""

#: docs/9.x/scout.md:block 196 (code)
msgid "use App\\Models\\Order;\n\n"
"$orders = Order::search('Star Trek')\n"
"    ->query(fn ($query) => $query->with('invoices'))\n"
"    ->get();\n"
msgstr ""

#: docs/master/scout.md:block 214 (code)
msgid "use Illuminate\\Support\\Facades\\Response;\n"
"use Illuminate\\Support\\ServiceProvider;\n"
"use Laravel\\Scout\\Builder;\n\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Builder::macro('count', function () {\n"
"        return $this->engine()->getTotalCount(\n"
"            $this->engine()->search($this)\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

