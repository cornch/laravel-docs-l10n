msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2023-02-11 10:28\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/mix.pot\n"
"X-Crowdin-File-ID: 105\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

# H1
#: ./docs/8.x/mix.md:1
msgid "Compiling Assets (Mix)"
msgstr "編譯資源 (Mix)"

# H1
#: ./docs/9.x/mix.md:1
#: ./docs/10.x/mix.md:1
#: ./docs/11.x/mix.md:1
#: ./docs/master/mix.md:1
msgid "Laravel Mix"
msgstr "Laravel Mix"

# P
#: ./docs/8.x/mix.md:3
#: ./docs/9.x/mix.md:3
#: ./docs/10.x/mix.md:3
#: ./docs/11.x/mix.md:3
#: ./docs/master/mix.md:3
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# P
#: ./docs/8.x/mix.md:4
msgid "[Installation & Setup](#installation)"
msgstr "[安裝與設定](#installation)"

# P
#: ./docs/8.x/mix.md:5
msgid "[Running Mix](#running-mix)"
msgstr "[執行 Mix](#running-mix)"

# P
#: ./docs/8.x/mix.md:6
msgid "[Working With Stylesheets](#working-with-stylesheets)"
msgstr "[處理樣式表](#working-with-stylesheets)"

# P
#: ./docs/8.x/mix.md:7
msgid "[Tailwind CSS](#tailwindcss)"
msgstr "[Tailwind CSS](#tailwindcss)"

# P
#: ./docs/8.x/mix.md:8
msgid "[PostCSS](#postcss)"
msgstr "[PostCSS](#postcss)"

# P
#: ./docs/9.x/mix.md:8
#: ./docs/10.x/mix.md:8
#: ./docs/11.x/mix.md:8
#: ./docs/master/mix.md:8
msgid "[Laravel Mix](https://github.com/laravel-mix/laravel-mix), a package developed by [Laracasts](https://laracasts.com) creator Jeffrey Way, provides a fluent API for defining [webpack](https://webpack.js.org) build steps for your Laravel application using several common CSS and JavaScript pre-processors."
msgstr "[Laravel Mix](https://github.com/laravel-mix/laravel-mix) 是一個由 [Laracasts](https://laracasts.com) 作者 Jeffrey Way 開發的套件，該套件使用了各種常見的 CSS 與 JavaScript ^[預處理器](Pre-Processor)，可在 Laravel 專案上使用 Fluent API 來定義 [Webpack](https://webpack.js.org) 建置步驟。"

# P
#: ./docs/8.x/mix.md:9
msgid "[Sass](#sass)"
msgstr "[Sass](#sass)"

# P
#: ./docs/8.x/mix.md:10
msgid "[URL Processing](#url-processing)"
msgstr "[URL 的處理](#url-processing)"

# P
#: ./docs/8.x/mix.md:11
msgid "[Source Maps](#css-source-maps)"
msgstr "[Source Map](#css-source-maps)"

# P
#: ./docs/8.x/mix.md:12
msgid "[Working With JavaScript](#working-with-scripts)"
msgstr "[處理 JavaScript](#working-with-scripts)"

# P
#: ./docs/8.x/mix.md:13
msgid "[Vue](#vue)"
msgstr "[Vue](#vue)"

# P
#: ./docs/8.x/mix.md:14
msgid "[React](#react)"
msgstr "[React](#react)"

# P
#: ./docs/8.x/mix.md:15
msgid "[Vendor Extraction](#vendor-extraction)"
msgstr "[拆分出第三方函式庫](#vendor-extraction)"

# P
#: ./docs/8.x/mix.md:16
msgid "[Custom Webpack Configuration](#custom-webpack-configuration)"
msgstr "[自訂 Webpack 設定](#custom-webpack-configuration)"

# P
#: ./docs/8.x/mix.md:17
msgid "[Versioning / Cache Busting](#versioning-and-cache-busting)"
msgstr "[版本化 / 避免快取](#versioning-and-cache-busting)"

# P
#: ./docs/8.x/mix.md:18
msgid "[Browsersync Reloading](#browsersync-reloading)"
msgstr "[Browsersync 重新載入](#browsersync-reloading)"

# P
#: ./docs/8.x/mix.md:19
msgid "[Environment Variables](#environment-variables)"
msgstr "[環境變數](#environment-variables)"

# P
#: ./docs/8.x/mix.md:20
msgid "[Notifications](#notifications)"
msgstr "[通知](#notifications)"

# P
#: ./docs/9.x/mix.md:20
#: ./docs/10.x/mix.md:20
#: ./docs/11.x/mix.md:20
#: ./docs/master/mix.md:20
msgid "Vite has replaced Laravel Mix in new Laravel installations. For Mix documentation, please visit the [official Laravel Mix](https://laravel-mix.com/) website. If you would like to switch to Vite, please see our [Vite migration guide](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite)."
msgstr "在新安裝的 Laravel 中，Vite 已經取代了 Laravel Mix。若要瀏覽 Mix 的說明文件，請瀏覽 [Laravel Mix 官方網站](https://laravel-mix.com/)。若要切換至 Vite，請檢視我們的 [Vite 遷移指南](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite)。"

# P
#: ./docs/8.x/mix.md:22
#: ./docs/9.x/mix.md:5
#: ./docs/10.x/mix.md:5
#: ./docs/11.x/mix.md:5
#: ./docs/master/mix.md:5
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:23
#: ./docs/9.x/mix.md:6
#: ./docs/10.x/mix.md:6
#: ./docs/11.x/mix.md:6
#: ./docs/master/mix.md:6
msgid "Introduction"
msgstr "簡介"

# P
#: ./docs/8.x/mix.md:25
msgid "[Laravel Mix](https://github.com/JeffreyWay/laravel-mix), a package developed by [Laracasts](https://laracasts.com) creator Jeffrey Way, provides a fluent API for defining [webpack](https://webpack.js.org) build steps for your Laravel application using several common CSS and JavaScript pre-processors."
msgstr "[Laravel Mix](https://github.com/JeffreyWay/laravel-mix) 是一個由 [Laracasts](https://laracasts.com) 作者 Jeffrey Way 開發的套件，該套件使用了各種常見的 CSS 與 JavaScript ^[預處理器](Pre-Processor)，可在 Laravel 專案上使用 Fluent API 來定義 [Webpack](https://webpack.js.org) 建置步驟。"

# P
#: ./docs/8.x/mix.md:27
#: ./docs/9.x/mix.md:10
#: ./docs/10.x/mix.md:10
#: ./docs/11.x/mix.md:10
#: ./docs/master/mix.md:10
msgid "In other words, Mix makes it a cinch to compile and minify your application's CSS and JavaScript files. Through simple method chaining, you can fluently define your asset pipeline. For example:"
msgstr "換句話說，使用 Mix 就可以輕鬆地編譯並 ^[Minify](最小化 / 壓縮) 專案的 CSS 與 JavaScript 檔案。只要簡單地串接幾個方法，就可以流暢的定義^[素材管道](Asset Pipeline)。例如："

# CODE
# CODE: js
#: ./docs/8.x/mix.md:29
#: ./docs/9.x/mix.md:12
#: ./docs/10.x/mix.md:12
#: ./docs/11.x/mix.md:12
#: ./docs/master/mix.md:12
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"    .postCss('resources/css/app.css', 'public/css');"
msgstr ""

# P
#: ./docs/8.x/mix.md:32
#: ./docs/9.x/mix.md:17
#: ./docs/10.x/mix.md:17
#: ./docs/11.x/mix.md:17
#: ./docs/master/mix.md:17
msgid "If you've ever been confused and overwhelmed about getting started with webpack and asset compilation, you will love Laravel Mix. However, you are not required to use it while developing your application; you are free to use any asset pipeline tool you wish, or even none at all."
msgstr "若你搞不懂怎麼用 Webpack 與編輯素材、或是覺得很複雜的話，你一定會喜歡 Laravel Mix 的。不過，不一定要使用 Laravel Mix 也能開發你的網站。你可以自由決定要使用哪個素材管道工具，甚至也可以不使用任何工具。"

# P
#: ./docs/8.x/mix.md:34
msgid "If you need a head start building your application with Laravel and [Tailwind CSS](https://tailwindcss.com), check out one of our [application starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

# P
#: ./docs/8.x/mix.md:36
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:37
msgid "Installation & Setup"
msgstr "安裝與設定"

# P
#: ./docs/8.x/mix.md:39
#~ msgid "<a name=\"installing-node\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/mix.md:40
msgid "Installing Node"
msgstr "安裝 Node"

# P
#: ./docs/8.x/mix.md:42
msgid "Before running Mix, you must first ensure that Node.js and NPM are installed on your machine:"
msgstr "在執行 Mix 前，請先確保你的電腦上已安裝 Node.js 與 NPM："

# CODE
#: ./docs/8.x/mix.md:44
msgid ""
"node -v\n"
"npm -v"
msgstr ""

# P
#: ./docs/8.x/mix.md:47
msgid "You can easily install the latest version of Node and NPM using simple graphical installers from [the official Node website](https://nodejs.org/en/download/). Or, if you are using [Laravel Sail](/docs/{{version}}/sail), you may invoke Node and NPM through Sail:"
msgstr "可以從 [Node 官方網站]中取得圖形界面安裝程式來輕鬆地安裝最新版的 Node 與 NPM。或者，如果你用的是 [Laravel Sail](/docs/{{version}}/sail)，可以像這樣在 Sail 上叫用 Node 與 NPM："

# CODE
#: ./docs/8.x/mix.md:49
msgid ""
"./sail node -v\n"
"./sail npm -v"
msgstr ""

# P
#: ./docs/8.x/mix.md:52
#~ msgid "<a name=\"installing-laravel-mix\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/mix.md:53
msgid "Installing Laravel Mix"
msgstr "安裝 Laravel Mix"

# P
#: ./docs/8.x/mix.md:55
msgid "The only remaining step is to install Laravel Mix. Within a fresh installation of Laravel, you'll find a `package.json` file in the root of your directory structure. The default `package.json` file already includes everything you need to get started using Laravel Mix. Think of this file like your `composer.json` file, except it defines Node dependencies instead of PHP dependencies. You may install the dependencies it references by running:"
msgstr "剩下的步驟就是安裝 Laravel Mix 了。在新安裝的 Laravel 專案中，可以在專案根目錄上看到一個 `package.json` 檔案。使用預設的 `package.json` 檔就可以直接開始使用 Laravel Mix 了。可以把這個檔案像成跟 `composer.json` 檔一樣，只不過 `package.json` 定義的是不是 PHP 的相依性套件而是 Node 的相依性套件。可以像這樣安裝 `package.json` 中參照的相依性套件："

# CODE
#: ./docs/8.x/mix.md:57
msgid "npm install"
msgstr ""

# P
#: ./docs/8.x/mix.md:59
#~ msgid "<a name=\"running-mix\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:60
msgid "Running Mix"
msgstr "執行 Mix"

# P
#: ./docs/8.x/mix.md:62
msgid "Mix is a configuration layer on top of [webpack](https://webpack.js.org), so to run your Mix tasks you only need to execute one of the NPM scripts that are included in the default Laravel `package.json` file. When you run the `dev` or `production` scripts, all of your application's CSS and JavaScript assets will be compiled and placed in your application's `public` directory:"
msgstr "Mix 是基於 [Webpack](https://webpack.js.org) 的一個設定層。因此要執行 Mix 任務，只需要執行 Laravel 中預設 `package.json` 檔案內提供的其中一個 NPM ^[指令碼](Script)即可。執行 `dev` 或 `production` 指令碼後，專案中的所有 CSS 與 JavaScript 素材都會被編譯並放在專案的 `public` 目錄內："

# CODE
#: ./docs/8.x/mix.md:64
msgid ""
"// Run all Mix tasks...\n"
"npm run dev\n"
"\n"
"// Run all Mix tasks and minify output...\n"
"npm run prod"
msgstr ""

# P
#: ./docs/8.x/mix.md:70
#~ msgid "<a name=\"watching-assets-for-changes\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/mix.md:71
msgid "Watching Assets For Changes"
msgstr "監控素材的更改"

# P
#: ./docs/8.x/mix.md:73
msgid "The `npm run watch` command will continue running in your terminal and watch all relevant CSS and JavaScript files for changes. Webpack will automatically recompile your assets when it detects a change to one of these files:"
msgstr "`npm run watch` 指令會在終端機內持續執行，並^[監控](Watch)所有相關的 CSS 與 JavaScript 檔案有沒有被修改。若偵測到有檔案被更改過，Webpack 會自動重新編譯素材："

# CODE
#: ./docs/8.x/mix.md:75
msgid "npm run watch"
msgstr ""

# P
#: ./docs/8.x/mix.md:77
msgid "Webpack may not be able to detect your file changes in certain local development environments. If this is the case on your system, consider using the `watch-poll` command:"
msgstr "對於一些特定的本機開發環境，Webpack 肯跟沒辦法偵測到檔案修改。若在你的系統上有這個狀況，請考慮使用 `watch-poll` 指令："

# CODE
#: ./docs/8.x/mix.md:79
msgid "npm run watch-poll"
msgstr ""

# P
#: ./docs/8.x/mix.md:81
#~ msgid "<a name=\"working-with-stylesheets\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:82
msgid "Working With Stylesheets"
msgstr "處理樣式表"

# P
#: ./docs/8.x/mix.md:84
msgid "Your application's `webpack.mix.js` file is your entry point for all asset compilation. Think of it as a light configuration wrapper around [webpack](https://webpack.js.org). Mix tasks can be chained together to define exactly how your assets should be compiled."
msgstr "你的專案中的 `webpack.mix.js` 就是用來編譯所有素材的入口。可以把這個檔案想成是對 [Webpack] 設定的^[包裝](Wrapper)。可以將多個 Mix 任務串連在一起，以定義要怎麼編譯素材。"

# P
#: ./docs/8.x/mix.md:86
#~ msgid "<a name=\"tailwindcss\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:87
msgid "Tailwind CSS"
msgstr "Tailwind CSS"

# P
#: ./docs/8.x/mix.md:89
msgid "[Tailwind CSS](https://tailwindcss.com) is a modern, utility-first framework for building amazing sites without ever leaving your HTML. Let's dig into how to start using it in a Laravel project with Laravel Mix. First, we should install Tailwind using NPM and generate our Tailwind configuration file:"
msgstr "[Tailwind CSS](https://tailwindcss.com) 是一套現代的、^[Utility-First](Utility 優先)的框架，可在只接觸 HTML 的情況下製作出讓人驚艷的網站。我們來看看要怎麼在 Laravel 專案中搭配 Laravel Mix 使用 Tailwind CSS。首先，我們先使用 NPM 安裝 Tailwind，並產生 Tailwind 的設定檔："

# CODE
#: ./docs/8.x/mix.md:91
msgid ""
"npm install\n"
"\n"
"npm install -D tailwindcss\n"
"\n"
"npx tailwindcss init"
msgstr ""

# P
#: ./docs/8.x/mix.md:97
msgid "The `init` command will generate a `tailwind.config.js` file. The `content` section of this file allows you to configure the paths to all of your HTML templates, JavaScript components, and any other source files that contain Tailwind class names so that any CSS classes that are not used within these files will be purged from your production CSS build:"
msgstr "`init` 指令會產生一個 `tailwind.config.js` 檔案。在該檔案的 `content` 中，可用來定義專案中所有的 HTML 樣板、JavaScript 元件、以及其他包含 Tailwind Class 名稱的原始檔。在 `content` 中定義這些檔案的路徑後，Tailwind 才能在正式 CSS 組建中移除這些檔案未使用的 CSS Class："

# CODE: js
#: ./docs/8.x/mix.md:99
msgid ""
"content: [\n"
"    './storage/framework/views/*.php',\n"
"    './resources/**/*.blade.php',\n"
"    './resources/**/*.js',\n"
"    './resources/**/*.vue',\n"
"],"
msgstr ""

# P
#: ./docs/8.x/mix.md:108
msgid "Next, you should add each of Tailwind's \"layers\" to your application's `resources/css/app.css` file:"
msgstr "接著，我們在專案的 `resources/css/app.css` 檔案中加上 Tailwind 的各個「^[Layer](層)」："

# CODE: css
#: ./docs/8.x/mix.md:110
msgid ""
"@tailwind base;\n"
"@tailwind components;\n"
"@tailwind utilities;"
msgstr ""

# P
#: ./docs/8.x/mix.md:116
msgid "Once you have configured Tailwind's layers, you are ready to update your application's `webpack.mix.js` file to compile your Tailwind powered CSS:"
msgstr "設定好 Tailwind 的 Layer 後，就可以來修改專案的 `webpack.mix.js` 檔以編譯由 Tailwind 驅動的 CSS："

# CODE: js
#: ./docs/8.x/mix.md:118
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"    .postCss('resources/css/app.css', 'public/css', [\n"
"        require('tailwindcss'),\n"
"    ]);"
msgstr ""

# P
#: ./docs/8.x/mix.md:125
msgid "Finally, you should reference your stylesheet in your application's primary layout template. Many applications choose to store this template at `resources/views/layouts/app.blade.php`. In addition, ensure you add the responsive viewport `meta` tag if it's not already present:"
msgstr "最後，應在主要的 Layout 樣板中參考這個樣式表。大多數的專案都把主 Layout 保存在 `resources/views/layouts/app.blade.php` 中。此外，也請確保該樣板中有沒有加上^[回應式](Responsive) Viewport 的 `meta` 標籤："

# CODE: html
#: ./docs/8.x/mix.md:127
msgid ""
"<head>\n"
"    <meta charset=\"UTF-8\" />\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n"
"    <link href=\"/css/app.css\" rel=\"stylesheet\">\n"
"</head>"
msgstr ""

# P
#: ./docs/8.x/mix.md:135
#~ msgid "<a name=\"postcss\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:136
msgid "PostCSS"
msgstr "PostCSS"

# P
#: ./docs/8.x/mix.md:138
msgid "[PostCSS](https://postcss.org/), a powerful tool for transforming your CSS, is included with Laravel Mix out of the box. By default, Mix leverages the popular [Autoprefixer](https://github.com/postcss/autoprefixer) plugin to automatically apply all necessary CSS3 vendor prefixes. However, you're free to add any additional plugins that are appropriate for your application."
msgstr "[PostCSS](https://postcss.org/) 是一個可用來變換 CSS 的強力工具。Laravel Mix 中已內建支援。預設情況下，Mix 使用了很流行的 [Autoprefixer](https://github.com/postcss/autoprefixer) 外掛來自動套用任何需要的 CSS3 ^[Vendor Prefix](廠商前置詞)。不過，也可以自行增加專案所需要的其他外掛。"

# P
#: ./docs/8.x/mix.md:140
msgid "First, install the desired plugin through NPM and include it in your array of plugins when calling Mix's `postCss` method. The `postCss` method accepts the path to your CSS file as its first argument and the directory where the compiled file should be placed as its second argument:"
msgstr "首先，請通過 NPM 安裝所需的外掛，然後把這些外掛放在呼叫 Mix `postCSS` 方法時提供的陣列裡面。`postCss` 方法接受的第一個引數是 CSS 檔的路徑，而第二個引數則是編譯好的檔案要放置的目錄："

# CODE
#: ./docs/8.x/mix.md:142
msgid ""
"mix.postCss('resources/css/app.css', 'public/css', [\n"
"    require('postcss-custom-properties')\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/mix.md:146
msgid "Or, you may execute `postCss` with no additional plugins in order to achieve simple CSS compilation and minification:"
msgstr "或者，執行 `postCss` 時也可以不提供任何外掛，來做簡單的 CSS 編譯與 Minify："

# CODE
#: ./docs/8.x/mix.md:148
msgid "mix.postCss('resources/css/app.css', 'public/css');"
msgstr ""

# P
#: ./docs/8.x/mix.md:150
#~ msgid "<a name=\"sass\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:151
msgid "Sass"
msgstr "Sass"

# P
#: ./docs/8.x/mix.md:153
msgid "The `sass` method allows you to compile [Sass](https://sass-lang.com/) into CSS that can be understood by web browsers. The `sass` method accepts the path to your Sass file as its first argument and the directory where the compiled file should be placed as its second argument:"
msgstr "`sass` 方法可用來把 [Sass](https://sass-lang.com/) 編譯瀏覽器看得懂的 CSS。`sass` 方法接受 Sass 檔的路徑作為其第一個引數，以及編譯好的檔案要放置的目錄作為其第二個引數："

# CODE
#: ./docs/8.x/mix.md:155
msgid "mix.sass('resources/sass/app.scss', 'public/css');"
msgstr ""

# P
#: ./docs/8.x/mix.md:157
msgid "You may compile multiple Sass files into their own respective CSS files and even customize the output directory of the resulting CSS by calling the `sass` method multiple times:"
msgstr "可以呼叫多次 `sass` 方法來將多個 Sass 檔編譯到各個對應的 CSS 檔上，並設定產生 CSS 的輸出目錄："

# CODE
#: ./docs/8.x/mix.md:159
msgid ""
"mix.sass('resources/sass/app.sass', 'public/css')\n"
"    .sass('resources/sass/admin.sass', 'public/css/admin');"
msgstr ""

# P
#: ./docs/8.x/mix.md:162
#~ msgid "<a name=\"url-processing\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:163
msgid "URL Processing"
msgstr "URL 的處理"

# P
#: ./docs/8.x/mix.md:165
msgid "Because Laravel Mix is built on top of webpack, it's important to understand a few webpack concepts. For CSS compilation, webpack will rewrite and optimize any `url()` calls within your stylesheets. While this might initially sound strange, it's an incredibly powerful piece of functionality. Imagine that we want to compile Sass that includes a relative URL to an image:"
msgstr "由於 Laravel Mix 是基於 Webpack 製作的，因此我們最好也要瞭解一些 Webpack 的概念。在做 CSS 編譯時，Webpack 會複寫並最佳化樣式表中的 `url()` 呼叫。雖然一聽到這個狀況，感覺可能有點奇怪，但其實這時很實用的功能。我們先假設我們像編譯一個 Sass 檔，裡面包含了相對網址的圖片："

# CODE
#: ./docs/8.x/mix.md:167
msgid ""
".example {\n"
"    background: url('../images/example.png');\n"
"}"
msgstr ""

# P
#: ./docs/8.x/mix.md:171
msgid "Absolute paths for any given `url()` will be excluded from URL-rewriting. For example, `url('/images/thing.png')` or `url('http://example.com/images/thing.png')` won't be modified."
msgstr ""

# P
#: ./docs/8.x/mix.md:173
msgid "By default, Laravel Mix and webpack will find `example.png`, copy it to your `public/images` folder, and then rewrite the `url()` within your generated stylesheet. As such, your compiled CSS will be:"
msgstr "預設情況下，Laravel Mix 與 Webpack 會找到 `example.png` 這個檔案，並將其複製到 `public/images` 資料夾中，然後在產生的樣式表中複寫掉 `url()`。因此，編譯過的 CSS 會是這樣："

# CODE
#: ./docs/8.x/mix.md:175
msgid ""
".example {\n"
"    background: url(/images/example.png?d41d8cd98f00b204e9800998ecf8427e);\n"
"}"
msgstr ""

# P
#: ./docs/8.x/mix.md:179
msgid "As useful as this feature may be, your existing folder structure may already be configured in a way you like. If this is the case, you may disable `url()` rewriting like so:"
msgstr "雖然這個功能可能很實用，但你可能已經依照你的需求設定好資料夾結構了。這時，我們可以像這樣禁用 `url()` 複寫："

# CODE
#: ./docs/8.x/mix.md:181
msgid ""
"mix.sass('resources/sass/app.scss', 'public/css').options({\n"
"    processCssUrls: false\n"
"});"
msgstr ""

# P
#: ./docs/8.x/mix.md:185
msgid "With this addition to your `webpack.mix.js` file, Mix will no longer match any `url()` or copy assets to your public directory. In other words, the compiled CSS will look just like how you originally typed it:"
msgstr "在 `webpack.mix.js` 中這樣加上之後，Mix 就不會再尋找 `url()` 並幫你把素材複製到 public 目錄下了。換句話說，編譯好的 CSS 會跟你原本寫的一樣："

# CODE
#: ./docs/8.x/mix.md:187
msgid ""
".example {\n"
"    background: url(\"../images/thing.png\");\n"
"}"
msgstr ""

# P
#: ./docs/8.x/mix.md:191
#~ msgid "<a name=\"css-source-maps\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:192
msgid "Source Maps"
msgstr "Source Map"

# P
#: ./docs/8.x/mix.md:194
msgid "Though disabled by default, source maps may be activated by calling the `mix.sourceMaps()` method in your `webpack.mix.js` file. Though it comes with a compile/performance cost, this will provide extra debugging information to your browser's developer tools when using compiled assets:"
msgstr "雖然預設情況下沒有啟用 Source Map，但可以在 `webpack.mix.js` 檔案中呼叫 `mix.sourceMaps()` 方法來啟用。雖然這樣一來，編譯 / 效能的成本也會增加，但有了 Source Map，就算使用經過編譯的素材，也能為瀏覽器開發人員工具提供額外的偵錯資訊："

# CODE
#: ./docs/8.x/mix.md:196
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"    .sourceMaps();"
msgstr ""

# P
#: ./docs/8.x/mix.md:199
#~ msgid "<a name=\"style-of-source-mapping\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/mix.md:200
msgid "Style Of Source Mapping"
msgstr "Source Map 的格式"

# P
#: ./docs/8.x/mix.md:202
msgid "Webpack offers a variety of [source mapping styles](https://webpack.js.org/configuration/devtool/#devtool). By default, Mix's source mapping style is set to `eval-source-map`, which provides a fast rebuild time. If you want to change the mapping style, you may do so using the `sourceMaps` method:"
msgstr "Webpack 提供了多種 [Source Map 格式](https://webpack.js.org/configuration/devtool/#devtool)。預設情況下，Mix 的 Source Map 格式設為 `eval-source-map`，使用這種格式時建置時間會比較快。若想更改 Source Map 的格式，可使用 `sourceMaps` 方法："

# CODE
#: ./docs/8.x/mix.md:204
msgid ""
"let productionSourceMaps = false;\n"
"\n"
"mix.js('resources/js/app.js', 'public/js')\n"
"    .sourceMaps(productionSourceMaps, 'source-map');"
msgstr ""

# P
#: ./docs/8.x/mix.md:209
#~ msgid "<a name=\"working-with-scripts\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:210
msgid "Working With JavaScript"
msgstr "處理 JavaScript"

# P
#: ./docs/8.x/mix.md:212
msgid "Mix provides several features to help you work with your JavaScript files, such as compiling modern ECMAScript, module bundling, minification, and concatenating plain JavaScript files. Even better, this all works seamlessly, without requiring an ounce of custom configuration:"
msgstr "Mix 提供了多種可協助你處理 JavaScript 檔案的功能，如編譯現代的 ECMAScript、^[打包模組](Module Bundling)、Minify、合併多個純 JavaScript 檔案⋯⋯等。更好的是，這些功能全部都可流暢地互相配合使用，完全不需額外設定："

# CODE
#: ./docs/8.x/mix.md:214
msgid "mix.js('resources/js/app.js', 'public/js');"
msgstr ""

# P
#: ./docs/8.x/mix.md:216
msgid "With this single line of code, you may now take advantage of:"
msgstr "只要這一行程式碼，就可以使用："

# P
#: ./docs/8.x/mix.md:220
msgid "The latest EcmaScript syntax."
msgstr "最新的 ECMAScript 語法"

# P
#: ./docs/8.x/mix.md:221
msgid "Modules"
msgstr "模組 (Module)"

# P
#: ./docs/8.x/mix.md:222
msgid "Minification for production environments."
msgstr "為正式環境 Minify 原始碼"

# P
#: ./docs/8.x/mix.md:226
#~ msgid "<a name=\"vue\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:227
msgid "Vue"
msgstr "Vue"

# P
#: ./docs/8.x/mix.md:229
msgid "Mix will automatically install the Babel plugins necessary for Vue single-file component compilation support when using the `vue` method. No further configuration is required:"
msgstr "使用 `vue` 方法時，Mix 會自動安裝支援 Vue ^[單檔案元件](Single-File Component)所需的 Babel 外掛。不需要其他進一步的設定："

# CODE
#: ./docs/8.x/mix.md:231
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"   .vue();"
msgstr ""

# P
#: ./docs/8.x/mix.md:234
msgid "Once your JavaScript has been compiled, you can reference it in your application:"
msgstr "編譯好 JavaScript 後，就可以在專案中參照這個檔案："

# CODE: html
#: ./docs/8.x/mix.md:236
#: ./docs/8.x/mix.md:254
msgid ""
"<head>\n"
"    <!-- ... -->\n"
"\n"
"    <script src=\"/js/app.js\"></script>\n"
"</head>"
msgstr ""

# P
#: ./docs/8.x/mix.md:244
#~ msgid "<a name=\"react\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:245
msgid "React"
msgstr "React"

# P
#: ./docs/8.x/mix.md:247
msgid "Mix can automatically install the Babel plugins necessary for React support. To get started, add a call to the `react` method:"
msgstr "Mix 會自動安裝支援 React 所需的 Babel 外掛。要開始使用 React，請呼叫 `react` 方法："

# CODE
#: ./docs/8.x/mix.md:249
msgid ""
"mix.js('resources/js/app.jsx', 'public/js')\n"
"   .react();"
msgstr ""

# P
#: ./docs/8.x/mix.md:252
msgid "Behind the scenes, Mix will download and include the appropriate `babel-preset-react` Babel plugin. Once your JavaScript has been compiled, you can reference it in your application:"
msgstr "Mix 會在幕後下載並包含適當的 `babel-preset-react` Babel 外掛。編譯好 JavaScript 後，就可以像這樣在專案內參照該檔案："

# P
#: ./docs/8.x/mix.md:262
#~ msgid "<a name=\"vendor-extraction\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:263
msgid "Vendor Extraction"
msgstr "拆分出第三方函式庫"

# P
#: ./docs/8.x/mix.md:265
msgid "One potential downside to bundling all of your application-specific JavaScript with your vendor libraries such as React and Vue is that it makes long-term caching more difficult. For example, a single update to your application code will force the browser to re-download all of your vendor libraries even if they haven't changed."
msgstr "將所有用在專案內的 JavaScript 跟一些^[第三方函式庫](Vendor Library) (如 React 或 Vue) 一起打包可能會有個缺點，就是我們很難做長期的快取。舉例來說，只要更新專案內的一部分程式碼，就算沒更改第三方函式庫，瀏覽器還是必須重新下載整個第三方函式庫。"

# P
#: ./docs/8.x/mix.md:267
msgid "If you intend to make frequent updates to your application's JavaScript, you should consider extracting all of your vendor libraries into their own file. This way, a change to your application code will not affect the caching of your large `vendor.js` file. Mix's `extract` method makes this a breeze:"
msgstr "若常常更改專案的 JavaScript，應考慮將第三方函式庫拆分成獨立的檔案。這樣一來，更改專案的程式碼就不會影響 `vendor.js` 這個大檔案的快取。通過 Mix 的 `extract` 方法就可輕鬆實現："

# CODE
#: ./docs/8.x/mix.md:269
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"    .extract(['vue'])"
msgstr ""

# P
#: ./docs/8.x/mix.md:272
msgid "The `extract` method accepts an array of all libraries or modules that you wish to extract into a `vendor.js` file. Using the snippet above as an example, Mix will generate the following files:"
msgstr "`extract` 方法接收一組包含要拆分為獨立 `vendor.js` 檔案的函式庫或模組陣列。使用上述範例中的這個程式碼片段，Mix 會產生下列檔案："

# P
#: ./docs/8.x/mix.md:276
msgid "`public/js/manifest.js`: *The Webpack manifest runtime*"
msgstr "`public/js/manifest.js`: *Webpack Manifest Runtime*"

# P
#: ./docs/8.x/mix.md:277
msgid "`public/js/vendor.js`: *Your vendor libraries*"
msgstr "`public/js/vendor.js`: *第三方函式庫*"

# P
#: ./docs/8.x/mix.md:278
msgid "`public/js/app.js`: *Your application code*"
msgstr "`public/js/app.js`: *專案程式碼*"

# P
#: ./docs/8.x/mix.md:282
msgid "To avoid JavaScript errors, be sure to load these files in the proper order:"
msgstr "為了避免產生 JavaScript 錯誤，請確保使用正確的順序載入這些檔案："

# CODE
#: ./docs/8.x/mix.md:284
msgid ""
"<script src=\"/js/manifest.js\"></script>\n"
"<script src=\"/js/vendor.js\"></script>\n"
"<script src=\"/js/app.js\"></script>"
msgstr ""

# P
#: ./docs/8.x/mix.md:288
#~ msgid "<a name=\"custom-webpack-configuration\"></a>"
#~ msgstr ""

# H3
#: ./docs/8.x/mix.md:289
msgid "Custom Webpack Configuration"
msgstr "自訂 Webpack 設定"

# P
#: ./docs/8.x/mix.md:291
msgid "Occasionally, you may need to manually modify the underlying Webpack configuration. For example, you might have a special loader or plugin that needs to be referenced."
msgstr "有時候，我們可能會需要手動修改底層的 Webpack 設定。舉例來說，我們可能會想參照一個特別的 ^[Loader](載入程式)或外掛。"

# P
#: ./docs/8.x/mix.md:293
msgid "Mix provides a useful `webpackConfig` method that allows you to merge any short Webpack configuration overrides. This is particularly appealing, as it doesn't require you to copy and maintain your own copy of the `webpack.config.js` file. The `webpackConfig` method accepts an object, which should contain any [Webpack-specific configuration](https://webpack.js.org/configuration/) that you wish to apply."
msgstr "Mix 提供了一個實用的 `webpackConfig` 方法，能讓我們合併部分的 Webpack 設定。這樣做的好處是我們就不需要複製並維護一個完整的 `webpack.config.js`。`webpackConfig` 方法接受一個物件，該物件中應包含我們要套用的 [Webpack 設定](https://webpack.js.org/configuration/)。"

# CODE
#: ./docs/8.x/mix.md:295
msgid ""
"mix.webpackConfig({\n"
"    resolve: {\n"
"        modules: [\n"
"            path.resolve(__dirname, 'vendor/laravel/spark/resources/assets/js')\n"
"        ]\n"
"    }\n"
"});"
msgstr ""

# P
#: ./docs/8.x/mix.md:303
#~ msgid "<a name=\"versioning-and-cache-busting\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:304
msgid "Versioning / Cache Busting"
msgstr "版本化 / 避免快取"

# P
#: ./docs/8.x/mix.md:306
msgid "Many developers suffix their compiled assets with a timestamp or unique token to force browsers to load the fresh assets instead of serving stale copies of the code. Mix can automatically handle this for you using the `version` method."
msgstr "許多的開發人員都會在編譯過的素材檔名後方加上時戳或一些不重複的字串來讓瀏覽器不要載入舊版的程式碼，強制載入新的素材。使用 `version` 方法，就可以讓 Mix 自動處理這個部分。"

# P
#: ./docs/8.x/mix.md:308
msgid "The `version` method will append a unique hash to the filenames of all compiled files, allowing for more convenient cache busting:"
msgstr "`version` 方法會在所有編譯的檔案名稱後方加上一段不重複的雜湊，讓我們能更方便地避免檔案被快取："

# CODE
#: ./docs/8.x/mix.md:310
msgid ""
"mix.js('resources/js/app.js', 'public/js')\n"
"    .version();"
msgstr ""

# P
#: ./docs/8.x/mix.md:313
msgid "After generating the versioned file, you won't know the exact filename. So, you should use Laravel's global `mix` function within your [views](/docs/{{version}}/views) to load the appropriately hashed asset. The `mix` function will automatically determine the current name of the hashed file:"
msgstr "產生好版本化的檔案後，因為我們不知道實際的檔案名稱，所以可使用 Laravel 的 `mix` 全域函式來在 [View](/docs/{{version}}/views) 載入有加上適當雜湊的素材。`mix` 韓式會自動判斷有雜湊的檔案目前的名稱："

# CODE
#: ./docs/8.x/mix.md:315
msgid "<script src=\"{{ mix('/js/app.js') }}\"></script>"
msgstr ""

# P
#: ./docs/8.x/mix.md:317
msgid "Because versioned files are usually unnecessary in development, you may instruct the versioning process to only run during `npm run prod`:"
msgstr "由於在開發的時候通常不需要使用版本化的檔案，因此我們可以設定讓 Mix 只在 `npm run prod` 時才做版本化："

# CODE
#: ./docs/8.x/mix.md:319
msgid ""
"mix.js('resources/js/app.js', 'public/js');\n"
"\n"
"if (mix.inProduction()) {\n"
"    mix.version();\n"
"}"
msgstr ""

# P
#: ./docs/8.x/mix.md:325
#~ msgid "<a name=\"custom-mix-base-urls\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/mix.md:326
msgid "Custom Mix Base URLs"
msgstr "自訂 Mix 的基礎 URL"

# P
#: ./docs/8.x/mix.md:328
msgid "If your Mix compiled assets are deployed to a CDN separate from your application, you will need to change the base URL generated by the `mix` function. You may do so by adding a `mix_url` configuration option to your application's `config/app.php` configuration file:"
msgstr "若要將 Mix 編譯的素材部署到與你的網站不同的 CDN 上，則需要修改 `mix` 函式產生的^[基礎 URL](Base URL)。只需要在專案的 `config/app.php` 設定檔中加上 `mix_url` 設定即可："

# CODE
#: ./docs/8.x/mix.md:330
msgid "'mix_url' => env('MIX_ASSET_URL', null)"
msgstr ""

# P
#: ./docs/8.x/mix.md:332
msgid "After configuring the Mix URL, The `mix` function will prefix the configured URL when generating URLs to assets:"
msgstr "設定好 Mix URL 後，`mix` 函式在產生素材網址的時候，就會在前方加上剛才設定的 URL："

# CODE: bash
#: ./docs/8.x/mix.md:334
msgid "https://cdn.example.com/js/app.js?id=1964becbdd96414518cd"
msgstr ""

# P
#: ./docs/8.x/mix.md:338
#~ msgid "<a name=\"browsersync-reloading\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:339
msgid "Browsersync Reloading"
msgstr "Browsersync 重新整理"

# P
#: ./docs/8.x/mix.md:341
msgid "[BrowserSync](https://browsersync.io/) can automatically monitor your files for changes, and inject your changes into the browser without requiring a manual refresh. You may enable support for this by calling the `mix.browserSync()` method:"
msgstr "[BrowserSync](https://browsersync.io/) 可以自動偵測檔案更改，並在不需手動重新整理的情況下將這些修改插入到瀏覽器內。可以呼叫 `mix.browserSync()` 方法來啟用 BrowserSync 支援："

# CODE: js
#: ./docs/8.x/mix.md:343
msgid "mix.browserSync('laravel.test');"
msgstr ""

# P
#: ./docs/8.x/mix.md:347
msgid "[BrowserSync options](https://browsersync.io/docs/options) may be specified by passing a JavaScript object to the `browserSync` method:"
msgstr "可以傳入 JavaScript 物件給 `browserSync` 方法來指定 [BrowserSync選項](https://browsersync.io/docs/options)："

# CODE: js
#: ./docs/8.x/mix.md:349
msgid ""
"mix.browserSync({\n"
"    proxy: 'laravel.test'\n"
"});"
msgstr ""

# P
#: ./docs/8.x/mix.md:355
msgid "Next, start webpack's development server using the `npm run watch` command. Now, when you modify a script or PHP file you can watch as the browser instantly refreshes the page to reflect your changes."
msgstr "接著，使用 `npm run watch` 指令來開啟 Webpack 的開發伺服器。之後，當我們修改了監聽的 JavaScript 或 PHP 檔案時，瀏覽器就會即時重新整理頁面，並反映出所做的更改。"

# P
#: ./docs/8.x/mix.md:357
#~ msgid "<a name=\"environment-variables\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:358
msgid "Environment Variables"
msgstr "環境變數"

# P
#: ./docs/8.x/mix.md:360
msgid "You may inject environment variables into your `webpack.mix.js` script by prefixing one of the environment variables in your `.env` file with `MIX_`:"
msgstr "只要在 `.env` 檔案中定義的環境變數名稱前方加上 `MIX_`，就可以將這些環境變數插入到 `webpack.mix.js` 檔案中："

# CODE
#: ./docs/8.x/mix.md:362
msgid "MIX_SENTRY_DSN_PUBLIC=http://example.com"
msgstr ""

# P
#: ./docs/8.x/mix.md:364
msgid "After the variable has been defined in your `.env` file, you may access it via the `process.env` object. However, you will need to restart the task if the environment variable's value changes while the task is running:"
msgstr "在 `.env` 檔案中定義好環境變數後，就可以使用 `process.enb` 物件來存取這個變數。不過，若在任務執行時更改環境變數，則可能需要重新啟動該任務才能反映出更改過的值："

# CODE
#: ./docs/8.x/mix.md:366
msgid "process.env.MIX_SENTRY_DSN_PUBLIC"
msgstr ""

# P
#: ./docs/8.x/mix.md:368
#~ msgid "<a name=\"notifications\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/mix.md:369
msgid "Notifications"
msgstr "通知"

# P
#: ./docs/8.x/mix.md:371
msgid "When available, Mix will automatically display OS notifications when compiling, giving you instant feedback as to whether the compilation was successful or not. However, there may be instances when you would prefer to disable these notifications. One such example might be triggering Mix on your production server. Notifications may be deactivated using the `disableNotifications` method:"
msgstr "當可以顯示通知時，Mix 會自動在編譯的時候顯示系統通知，能讓你即時了解到是否有編譯成功。不過，有的情況下我們可能會想禁用通知。這種情況包含在正式環境伺服器上執行 Mix 時。可以使用 `disableNotifications` 方法來禁用通知："

# CODE
#: ./docs/8.x/mix.md:373
msgid "mix.disableNotifications();"
msgstr ""
