# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-16 04:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/errors.md:1
#, no-wrap
msgid "Error Handling"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/errors.md:12
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/errors.md:12
msgid "[Configuration](#configuration)"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:12
#, no-wrap
msgid ""
"- [The Exception Handler](#the-exception-handler)\n"
"    - [Reporting Exceptions](#reporting-exceptions)\n"
"    - [Ignoring Exceptions By Type](#ignoring-exceptions-by-type)\n"
"    - [Rendering Exceptions](#rendering-exceptions)\n"
"    - [Reportable & Renderable Exceptions](#renderable-exceptions)\n"
"- [HTTP Exceptions](#http-exceptions)\n"
"    - [Custom HTTP Error Pages](#custom-http-error-pages)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:14
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:14
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:17
msgid ""
"When you start a new Laravel project, error and exception handling is "
"already configured for you. The `App\\Exceptions\\Handler` class is where "
"all exceptions thrown by your application are logged and then rendered to "
"the user. We'll dive deeper into this class throughout this documentation."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:19
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:19
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:22
msgid ""
"The `debug` option in your `config/app.php` configuration file determines "
"how much information about an error is actually displayed to the user. By "
"default, this option is set to respect the value of the `APP_DEBUG` "
"environment variable, which is stored in your `.env` file."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:24
msgid ""
"During local development, you should set the `APP_DEBUG` environment "
"variable to `true`. **In your production environment, this value should "
"always be `false`. If the value is set to `true` in production, you risk "
"exposing sensitive configuration values to your application's end users.**"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:26
#, no-wrap
msgid "<a name=\"the-exception-handler\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:26
#, no-wrap
msgid "The Exception Handler"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:29
#, no-wrap
msgid "<a name=\"reporting-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:29
#, no-wrap
msgid "Reporting Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:32
msgid ""
"All exceptions are handled by the `App\\Exceptions\\Handler` class. This "
"class contains a `register` method where you may register custom exception "
"reporting and rendering callbacks. We'll examine each of these concepts in "
"detail. Exception reporting is used to log exceptions or send them to an "
"external service like [Flare](https://flareapp.io), "
"[Bugsnag](https://bugsnag.com) or "
"[Sentry](https://github.com/getsentry/sentry-laravel). By default, "
"exceptions will be logged based on your [logging](/docs/{{version}}/logging) "
"configuration. However, you are free to log exceptions however you wish."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:34
msgid ""
"For example, if you need to report different types of exceptions in "
"different ways, you may use the `reportable` method to register a closure "
"that should be executed when an exception of a given type needs to be "
"reported. Laravel will deduce what type of exception the closure reports by "
"examining the type-hint of the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:36 docs/8.x/errors.md:126 docs/8.x/errors.md:146
#, no-wrap
msgid "    use App\\Exceptions\\InvalidOrderException;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:48
#, no-wrap
msgid ""
"    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->reportable(function (InvalidOrderException $e) {\n"
"            //\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:50
msgid ""
"When you register a custom exception reporting callback using the "
"`reportable` method, Laravel will still log the exception using the default "
"logging configuration for the application. If you wish to stop the "
"propagation of the exception to the default logging stack, you may use the "
"`stop` method when defining your reporting callback or return `false` from "
"the callback:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:54
#, no-wrap
msgid ""
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    })->stop();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:58
#, no-wrap
msgid ""
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        return false;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:60
#, no-wrap
msgid ""
"> {tip} To customize the exception reporting for a given exception, you may "
"also utilize [reportable "
"exceptions](/docs/{{version}}/errors#renderable-exceptions).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:62
#, no-wrap
msgid "<a name=\"global-log-context\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:62
#, no-wrap
msgid "Global Log Context"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:65
msgid ""
"If available, Laravel automatically adds the current user's ID to every "
"exception's log message as contextual data. You may define your own global "
"contextual data by overriding the `context` method of your application's "
"`App\\Exceptions\\Handler` class. This information will be included in every "
"exception's log message written by your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:77
#, no-wrap
msgid ""
"    /**\n"
"     * Get the default context variables for logging.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    protected function context()\n"
"    {\n"
"        return array_merge(parent::context(), [\n"
"            'foo' => 'bar',\n"
"        ]);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:79
#, no-wrap
msgid "<a name=\"exception-log-context\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:79
#, no-wrap
msgid "Exception Log Context"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:82
msgid ""
"While adding context to every log message can be useful, sometimes a "
"particular exception may have unique context that you would like to include "
"in your logs. By defining a `context` method on one of your application's "
"custom exceptions, you may specify any data relevant to that exception that "
"should be added to the exception's log entry:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:84 docs/8.x/errors.md:165
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:86 docs/8.x/errors.md:167
#, no-wrap
msgid "    namespace App\\Exceptions;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:88 docs/8.x/errors.md:169
#, no-wrap
msgid "    use Exception;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:92
#, no-wrap
msgid ""
"    class InvalidOrderException extends Exception\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:103
#, no-wrap
msgid ""
"        /**\n"
"         * Get the exception's context information.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function context()\n"
"        {\n"
"            return ['order_id' => $this->orderId];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:105
#, no-wrap
msgid "<a name=\"the-report-helper\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/errors.md:105
#, no-wrap
msgid "The `report` Helper"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:108
msgid ""
"Sometimes you may need to report an exception but continue handling the "
"current request. The `report` helper function allows you to quickly report "
"an exception via the exception handler without rendering an error page to "
"the user:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:115
#, no-wrap
msgid ""
"    public function isValid($value)\n"
"    {\n"
"        try {\n"
"            // Validate the value...\n"
"        } catch (Throwable $e) {\n"
"            report($e);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:119
#, no-wrap
msgid ""
"            return false;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:121
#, no-wrap
msgid "<a name=\"ignoring-exceptions-by-type\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:121
#, no-wrap
msgid "Ignoring Exceptions By Type"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:124
msgid ""
"When building your application, there will be some types of exceptions you "
"simply want to ignore and never report. Your application's exception handler "
"contains a `$dontReport` property which is initialized to an empty "
"array. Any classes that you add to this property will never be reported; "
"however, they may still have custom rendering logic:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:135
#, no-wrap
msgid ""
"    /**\n"
"     * A list of the exception types that should not be reported.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $dontReport = [\n"
"        InvalidOrderException::class,\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:137
#, no-wrap
msgid ""
"> {tip} Behind the scenes, Laravel already ignores some types of errors for "
"you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 "
"HTTP responses generated by invalid CSRF tokens.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:139
#, no-wrap
msgid "<a name=\"rendering-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:139
#, no-wrap
msgid "Rendering Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:142
msgid ""
"By default, the Laravel exception handler will convert exceptions into an "
"HTTP response for you. However, you are free to register a custom rendering "
"closure for exceptions of a given type. You may accomplish this via the "
"`renderable` method of your exception handler."
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:144
msgid ""
"The closure passed to the `renderable` method should return an instance of "
"`Illuminate\\Http\\Response`, which may be generated via the `response` "
"helper. Laravel will deduce what type of exception the closure renders by "
"examining the type-hint of the closure:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:158
#, no-wrap
msgid ""
"    /**\n"
"     * Register the exception handling callbacks for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        $this->renderable(function (InvalidOrderException $e, $request) {\n"
"            return response()->view('errors.invalid-order', [], 500);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:160
#, no-wrap
msgid "<a name=\"renderable-exceptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:160
#, no-wrap
msgid "Reportable & Renderable Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:163
msgid ""
"Instead of type-checking exceptions in the exception handler's `register` "
"method, you may define `report` and `render` methods directly on your custom "
"exceptions. When these methods exist, they will be automatically called by "
"the framework:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:181
#, no-wrap
msgid ""
"    class InvalidOrderException extends Exception\n"
"    {\n"
"        /**\n"
"         * Report the exception.\n"
"         *\n"
"         * @return bool|null\n"
"         */\n"
"        public function report()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:193
#, no-wrap
msgid ""
"        /**\n"
"         * Render the exception into an HTTP response.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function render($request)\n"
"        {\n"
"            return response(...);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:195
msgid ""
"If your exception contains custom reporting logic that is only necessary "
"when certain conditions are met, you may need to instruct Laravel to "
"sometimes report the exception using the default exception handling "
"configuration. To accomplish this, you may return `false` from the "
"exception's `report` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:204
#, no-wrap
msgid ""
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        // Determine if the exception needs custom reporting...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:207
#, no-wrap
msgid ""
"        return false;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:209
#, no-wrap
msgid ""
"> {tip} You may type-hint any required dependencies of the `report` method "
"and they will automatically be injected into the method by Laravel's "
"[service container](/docs/{{version}}/container).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:211
#, no-wrap
msgid "<a name=\"http-exceptions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/errors.md:211
#, no-wrap
msgid "HTTP Exceptions"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:214
msgid ""
"Some exceptions describe HTTP error codes from the server. For example, this "
"may be a \"page not found\" error (404), an \"unauthorized error\" (401) or "
"even a developer generated 500 error. In order to generate such a response "
"from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:216
#, no-wrap
msgid "    abort(404);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:218
#, no-wrap
msgid "<a name=\"custom-http-error-pages\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/errors.md:218
#, no-wrap
msgid "Custom HTTP Error Pages"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:221
msgid ""
"Laravel makes it easy to display custom error pages for various HTTP status "
"codes. For example, if you wish to customize the error page for 404 HTTP "
"status codes, create a `resources/views/errors/404.blade.php`. This file "
"will be served on all 404 errors generated by your application. The views "
"within this directory should be named to match the HTTP status code they "
"correspond to. The "
"`Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised "
"by the `abort` function will be passed to the view as an `$exception` "
"variable:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:223
#, no-wrap
msgid "    <h2>{{ $exception->getMessage() }}</h2>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:225
msgid ""
"You may publish Laravel's default error page templates using the "
"`vendor:publish` Artisan command. Once the templates have been published, "
"you may customize them to your liking:"
msgstr ""

#. type: Plain text
#: docs/8.x/errors.md:226
#, no-wrap
msgid "    php artisan vendor:publish --tag=laravel-errors\n"
msgstr ""
