# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-23 04:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/http-tests.md:1
#, markdown-text, no-wrap
msgid "HTTP Tests"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Making Requests](#making-requests)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Customizing Request Headers](#customizing-request-headers)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Cookies](#cookies)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Session / Authentication](#session-and-authentication)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Debugging Responses](#debugging-responses)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Testing JSON APIs](#testing-json-apis)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Testing File Uploads](#testing-file-uploads)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Testing Views](#testing-views)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Rendering Blade & Components](#rendering-blade-and-components)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Response Assertions](#response-assertions)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/http-tests.md:16
#, markdown-text
msgid "[Authentication Assertions](#authentication-assertions)"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:18
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:18
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:21
#, markdown-text
msgid ""
"Laravel provides a very fluent API for making HTTP requests to your "
"application and examining the responses. For example, take a look at the "
"feature test defined below:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:23 docs/master/http-tests.md:55
#: docs/master/http-tests.md:85 docs/master/http-tests.md:113
#: docs/master/http-tests.md:137 docs/master/http-tests.md:153
#: docs/master/http-tests.md:181 docs/master/http-tests.md:213
#: docs/master/http-tests.md:249 docs/master/http-tests.md:279
#: docs/master/http-tests.md:307 docs/master/http-tests.md:363
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:25 docs/master/http-tests.md:57
#: docs/master/http-tests.md:87 docs/master/http-tests.md:115
#: docs/master/http-tests.md:139 docs/master/http-tests.md:155
#: docs/master/http-tests.md:183 docs/master/http-tests.md:215
#: docs/master/http-tests.md:251 docs/master/http-tests.md:281
#: docs/master/http-tests.md:309 docs/master/http-tests.md:365
#, markdown-text, no-wrap
msgid "    namespace Tests\\Feature;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:29 docs/master/http-tests.md:61
#: docs/master/http-tests.md:187
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:40 docs/master/http-tests.md:72
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_a_basic_request()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:44 docs/master/http-tests.md:76
#, markdown-text, no-wrap
msgid ""
"            $response->assertStatus(200);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:46
#, markdown-text
msgid ""
"The `get` method makes a `GET` request into the application, while the "
"`assertStatus` method asserts that the returned response should have the "
"given HTTP status code. In addition to this simple assertion, Laravel also "
"contains a variety of assertions for inspecting the response headers, "
"content, JSON structure, and more."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:48
#, markdown-text, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:48
#, markdown-text, no-wrap
msgid "Making Requests"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:51
#, markdown-text
msgid ""
"To make a request to your application, you may invoke the `get`, `post`, "
"`put`, `patch`, or `delete` methods within your test. These methods do not "
"actually issue a \"real\" HTTP request to your application. Instead, the "
"entire network request is simulated internally."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:53
#, markdown-text
msgid ""
"Instead of returning an `Illuminate\\Http\\Response` instance, test request "
"methods return an instance of `Illuminate\\Testing\\TestResponse`, which "
"provides a [variety of helpful assertions](#available-assertions) that allow "
"you to inspect your application's responses:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:78
#, markdown-text, no-wrap
msgid ""
"> {tip} For convenience, the CSRF middleware is automatically disabled when "
"running tests.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:80
#, markdown-text, no-wrap
msgid "<a name=\"customizing-request-headers\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:80
#, markdown-text, no-wrap
msgid "Customizing Request Headers"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:83
#, markdown-text
msgid ""
"You may use the `withHeaders` method to customize the request's headers "
"before it is sent to the application. This method allows you to add any "
"custom headers you would like to the request:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:89 docs/master/http-tests.md:117
#: docs/master/http-tests.md:141 docs/master/http-tests.md:217
#: docs/master/http-tests.md:253 docs/master/http-tests.md:283
#: docs/master/http-tests.md:367
#, markdown-text, no-wrap
msgid "    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:102
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_interacting_with_headers()\n"
"        {\n"
"            $response = $this->withHeaders([\n"
"                'X-Header' => 'Value',\n"
"            ])->post('/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:106
#, markdown-text, no-wrap
msgid ""
"            $response->assertStatus(201);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:108
#, markdown-text, no-wrap
msgid "<a name=\"cookies\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:108
#, markdown-text, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:111
#, markdown-text
msgid ""
"You may use the `withCookie` or `withCookies` methods to set cookie values "
"before making a request. The `withCookie` method accepts a cookie name and "
"value as its two arguments, while the `withCookies` method accepts an array "
"of name / value pairs:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:123
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_cookies()\n"
"        {\n"
"            $response = $this->withCookie('color', 'blue')->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:130
#, markdown-text, no-wrap
msgid ""
"            $response = $this->withCookies([\n"
"                'color' => 'blue',\n"
"                'name' => 'Taylor',\n"
"            ])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:132
#, markdown-text, no-wrap
msgid "<a name=\"session-and-authentication\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:132
#, markdown-text, no-wrap
msgid "Session / Authentication"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:135
#, markdown-text
msgid ""
"Laravel provides several helpers for interacting with the session during "
"HTTP testing. First, you may set the session data to a given array using the "
"`withSession` method. This is useful for loading the session with data "
"before issuing a request to your application:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:149
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_interacting_with_the_session()\n"
"        {\n"
"            $response = $this->withSession(['banned' => false])->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:151
#, markdown-text
msgid ""
"Laravel's session is typically used to maintain state for the currently "
"authenticated user. Therefore, the `actingAs` helper method provides a "
"simple way to authenticate a given user as the current user. For example, we "
"may use a [model "
"factory](/docs/{{version}}/database-testing#writing-factories) to generate "
"and authenticate a user:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:158
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:164
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_an_action_that_requires_authentication()\n"
"        {\n"
"            $user = User::factory()->create();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:170
#, markdown-text, no-wrap
msgid ""
"            $response = $this->actingAs($user)\n"
"                             ->withSession(['banned' => false])\n"
"                             ->get('/');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:172
#, markdown-text
msgid ""
"You may also specify which guard should be used to authenticate the given "
"user by passing the guard name as the second argument to the `actingAs` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:174
#, markdown-text, no-wrap
msgid "    $this->actingAs($user, 'api')\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:176
#, markdown-text, no-wrap
msgid "<a name=\"debugging-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:176
#, markdown-text, no-wrap
msgid "Debugging Responses"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:179
#, markdown-text
msgid ""
"After making a test request to your application, the `dump`, `dumpHeaders`, "
"and `dumpSession` methods may be used to examine and debug the response "
"contents:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:198
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_basic_test()\n"
"        {\n"
"            $response = $this->get('/');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:200
#, markdown-text, no-wrap
msgid "            $response->dumpHeaders();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:202
#, markdown-text, no-wrap
msgid "            $response->dumpSession();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:206
#, markdown-text, no-wrap
msgid ""
"            $response->dump();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:208
#, markdown-text, no-wrap
msgid "<a name=\"testing-json-apis\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:208
#, markdown-text, no-wrap
msgid "Testing JSON APIs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:211
#, markdown-text
msgid ""
"Laravel also provides several helpers for testing JSON APIs and their "
"responses. For example, the `json`, `getJson`, `postJson`, `putJson`, "
"`patchJson`, `deleteJson`, and `optionsJson` methods may be used to issue "
"JSON requests with various HTTP verbs. You may also easily pass data and "
"headers to these methods. To get started, let's write a test to make a "
"`POST` request to `/api/user` and assert that the expected JSON data was "
"returned:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:228
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_making_an_api_request()\n"
"        {\n"
"            $response = $this->postJson('/api/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:236
#, markdown-text, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:238
#, markdown-text
msgid ""
"In addition, JSON response data may be accessed as array variables on the "
"response, making it convenient for you to inspect the individual values "
"returned within a JSON response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:240
#, markdown-text, no-wrap
msgid "    $this->assertTrue($response['created']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:242
#, markdown-text, no-wrap
msgid ""
"> {tip} The `assertJson` method converts the response to an array and "
"utilizes `PHPUnit::assertArraySubset` to verify that the given array exists "
"within the JSON response returned by the application. So, if there are other "
"properties in the JSON response, this test will still pass as long as the "
"given fragment is present.\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:244
#, markdown-text, no-wrap
msgid "<a name=\"verifying-exact-match\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:244
#, markdown-text, no-wrap
msgid "Asserting Exact JSON Matches"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:247
#, markdown-text
msgid ""
"As previously mentioned, the `assertJson` method may be used to assert that "
"a fragment of JSON exists within the JSON response. If you would like to "
"verify that a given array **exactly matches** the JSON returned by your "
"application, you should use the `assertExactJson` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:264
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_an_exact_json_match()\n"
"        {\n"
"            $response = $this->json('POST', '/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:272
#, markdown-text, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertExactJson([\n"
"                    'created' => true,\n"
"                ]);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:274
#, markdown-text, no-wrap
msgid "<a name=\"verifying-json-paths\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:274
#, markdown-text, no-wrap
msgid "Asserting On JSON Paths"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:277
#, markdown-text
msgid ""
"If you would like to verify that the JSON response contains the given data "
"at a specified path, you should use the `assertJsonPath` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:294
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        /**\n"
"         * A basic functional test example.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function test_asserting_a_json_paths_value()\n"
"        {\n"
"            $response = $this->json('POST', '/user', ['name' => 'Sally']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:300
#, markdown-text, no-wrap
msgid ""
"            $response\n"
"                ->assertStatus(201)\n"
"                ->assertJsonPath('team.owner.name', 'Darian');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:302
#, markdown-text, no-wrap
msgid "<a name=\"testing-file-uploads\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:302
#, markdown-text, no-wrap
msgid "Testing File Uploads"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:305
#, markdown-text
msgid ""
"The `Illuminate\\Http\\UploadedFile` class provides a `fake` method which "
"may be used to generate dummy files or images for testing. This, combined "
"with the `Storage` facade's `fake` method, greatly simplifies the testing of "
"file uploads. For example, you may combine these two features to easily test "
"an avatar upload form:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:315
#, markdown-text, no-wrap
msgid ""
"    use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"    use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"    use Illuminate\\Http\\UploadedFile;\n"
"    use Illuminate\\Support\\Facades\\Storage;\n"
"    use Tests\\TestCase;\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:321
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_avatars_can_be_uploaded()\n"
"        {\n"
"            Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:323
#, markdown-text, no-wrap
msgid "            $file = UploadedFile::fake()->image('avatar.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:327
#, markdown-text, no-wrap
msgid ""
"            $response = $this->post('/avatar', [\n"
"                'avatar' => $file,\n"
"            ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:331
#, markdown-text, no-wrap
msgid ""
"            Storage::disk('avatars')->assertExists($file->hashName());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:333
#, markdown-text
msgid ""
"If you would like to assert that a given file does not exist, you may use "
"the `assertMissing` method provided by the `Storage` facade:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:335
#, markdown-text, no-wrap
msgid "    Storage::fake('avatars');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:337
#, markdown-text, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:339
#, markdown-text, no-wrap
msgid "    Storage::disk('avatars')->assertMissing('missing.jpg');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:341
#, markdown-text, no-wrap
msgid "<a name=\"fake-file-customization\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:341
#, markdown-text, no-wrap
msgid "Fake File Customization"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:344
#, markdown-text
msgid ""
"When creating files using the `fake` method provided by the `UploadedFile` "
"class, you may specify the width, height, and size of the image (in "
"kilobytes) in order to better test your application's validation rules:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:346
#, markdown-text, no-wrap
msgid "    UploadedFile::fake()->image('avatar.jpg', $width, $height)->size(100);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:348
#, markdown-text
msgid ""
"In addition to creating images, you may create files of any other type using "
"the `create` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:350
#, markdown-text, no-wrap
msgid "    UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:352
#, markdown-text
msgid ""
"If needed, you may pass a `$mimeType` argument to the method to explicitly "
"define the MIME type that should be returned by the file:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:356
#, markdown-text, no-wrap
msgid ""
"    UploadedFile::fake()->create(\n"
"        'document.pdf', $sizeInKilobytes, 'application/pdf'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:358
#, markdown-text, no-wrap
msgid "<a name=\"testing-views\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:358
#, markdown-text, no-wrap
msgid "Testing Views"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:361
#, markdown-text
msgid ""
"Laravel also allows you to render a view without making a simulated HTTP "
"request to the application. To accomplish this, you may call the `view` "
"method within your test. The `view` method accepts the view name and an "
"optional array of data. The method returns an instance of "
"`Illuminate\\Testing\\TestView`, which offers several methods to "
"conveniently make assertions about the view's contents:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:373
#, markdown-text, no-wrap
msgid ""
"    class ExampleTest extends TestCase\n"
"    {\n"
"        public function test_a_welcome_view_can_be_rendered()\n"
"        {\n"
"            $view = $this->view('welcome', ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:377
#, markdown-text, no-wrap
msgid ""
"            $view->assertSee('Taylor');\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:379
#, markdown-text
msgid ""
"The `TestView` class provides the following assertion methods: `assertSee`, "
"`assertSeeInOrder`, `assertSeeText`, `assertSeeTextInOrder`, "
"`assertDontSee`, and `assertDontSeeText`."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:381
#, markdown-text
msgid ""
"If needed, you may get the raw, rendered view contents by casting the "
"`TestView` instance to a string:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:383
#, markdown-text, no-wrap
msgid "    $contents = (string) $this->view('welcome');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:385
#, markdown-text, no-wrap
msgid "<a name=\"sharing-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:385
#, markdown-text, no-wrap
msgid "Sharing Errors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:388
#, markdown-text
msgid ""
"Some views may depend on errors shared in the [global error bag provided by "
"Laravel](/docs/{{version}}/validation#quick-displaying-the-validation-errors). "
"To hydrate the error bag with error messages, you may use the "
"`withViewErrors` method:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:392
#, markdown-text, no-wrap
msgid ""
"    $view = $this->withViewErrors([\n"
"        'name' => ['Please provide a valid name.']\n"
"    ])->view('form');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:394
#, markdown-text, no-wrap
msgid "    $view->assertSee('Please provide a valid name.');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:396
#, markdown-text, no-wrap
msgid "<a name=\"rendering-blade-and-components\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:396
#, markdown-text, no-wrap
msgid "Rendering Blade & Components"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:399
#, markdown-text
msgid ""
"If necessary, you may use the `blade` method to evaluate and render a raw "
"[Blade](/docs/{{version}}/blade) string. Like the `view` method, the `blade` "
"method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:404
#, markdown-text, no-wrap
msgid ""
"    $view = $this->blade(\n"
"        '<x-component :name=\"$name\" />',\n"
"        ['name' => 'Taylor']\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:406 docs/master/http-tests.md:412
#, markdown-text, no-wrap
msgid "    $view->assertSee('Taylor');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:408
#, markdown-text
msgid ""
"You may use the `component` method to evaluate and render a [Blade "
"component](/docs/{{version}}/blade#components). Like the `view` method, the "
"`component` method returns an instance of `Illuminate\\Testing\\TestView`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:410
#, markdown-text, no-wrap
msgid "    $view = $this->component(Profile::class, ['name' => 'Taylor']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:414
#, markdown-text, no-wrap
msgid "<a name=\"available-assertions\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/http-tests.md:414
#, markdown-text, no-wrap
msgid "Available Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:417
#, markdown-text, no-wrap
msgid "<a name=\"response-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:417
#, markdown-text, no-wrap
msgid "Response Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:420
#, markdown-text
msgid ""
"Laravel's `Illuminate\\Testing\\TestResponse` class provides a variety of "
"custom assertion methods that you may utilize when testing your "
"application. These assertions may be accessed on the response that is "
"returned by the `json`, `get`, `post`, `put`, and `delete` test methods:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:426
#, markdown-text, no-wrap
msgid ""
"<style>\n"
"    .collection-method-list > p {\n"
"        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n"
"        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:431
#, markdown-text, no-wrap
msgid ""
"    .collection-method-list a {\n"
"        display: block;\n"
"    }\n"
"</style>\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:433
#, markdown-text, no-wrap
msgid "<div class=\"collection-method-list\" markdown=\"1\">\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:479
#, markdown-text
msgid ""
"[assertCookie](#assert-cookie)  "
"[assertCookieExpired](#assert-cookie-expired)  "
"[assertCookieNotExpired](#assert-cookie-not-expired)  "
"[assertCookieMissing](#assert-cookie-missing)  "
"[assertCreated](#assert-created)  [assertDontSee](#assert-dont-see)  "
"[assertDontSeeText](#assert-dont-see-text)  "
"[assertExactJson](#assert-exact-json)  [assertForbidden](#assert-forbidden)  "
"[assertHeader](#assert-header)  "
"[assertHeaderMissing](#assert-header-missing)  [assertJson](#assert-json)  "
"[assertJsonCount](#assert-json-count)  "
"[assertJsonFragment](#assert-json-fragment)  "
"[assertJsonMissing](#assert-json-missing)  "
"[assertJsonMissingExact](#assert-json-missing-exact)  "
"[assertJsonMissingValidationErrors](#assert-json-missing-validation-errors)  "
"[assertJsonPath](#assert-json-path)  "
"[assertJsonStructure](#assert-json-structure)  "
"[assertJsonValidationErrors](#assert-json-validation-errors)  "
"[assertLocation](#assert-location)  [assertNoContent](#assert-no-content)  "
"[assertNotFound](#assert-not-found)  [assertOk](#assert-ok)  "
"[assertPlainCookie](#assert-plain-cookie)  "
"[assertRedirect](#assert-redirect)  [assertSee](#assert-see)  "
"[assertSeeInOrder](#assert-see-in-order)  [assertSeeText](#assert-see-text)  "
"[assertSeeTextInOrder](#assert-see-text-in-order)  "
"[assertSessionHas](#assert-session-has)  "
"[assertSessionHasInput](#assert-session-has-input)  "
"[assertSessionHasAll](#assert-session-has-all)  "
"[assertSessionHasErrors](#assert-session-has-errors)  "
"[assertSessionHasErrorsIn](#assert-session-has-errors-in)  "
"[assertSessionHasNoErrors](#assert-session-has-no-errors)  "
"[assertSessionDoesntHaveErrors](#assert-session-doesnt-have-errors)  "
"[assertSessionMissing](#assert-session-missing)  "
"[assertStatus](#assert-status)  [assertSuccessful](#assert-successful)  "
"[assertUnauthorized](#assert-unauthorized)  "
"[assertViewHas](#assert-view-has)  [assertViewHasAll](#assert-view-has-all)  "
"[assertViewIs](#assert-view-is)  [assertViewMissing](#assert-view-missing)"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:481
#, markdown-text, no-wrap
msgid "</div>\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:483
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:483
#, markdown-text, no-wrap
msgid "assertCookie"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:486
#, markdown-text
msgid "Assert that the response contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:488
#, markdown-text, no-wrap
msgid "    $response->assertCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:490
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:490
#, markdown-text, no-wrap
msgid "assertCookieExpired"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:493
#, markdown-text
msgid "Assert that the response contains the given cookie and it is expired:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:495
#, markdown-text, no-wrap
msgid "    $response->assertCookieExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:497
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie-not-expired\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:497
#, markdown-text, no-wrap
msgid "assertCookieNotExpired"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:500
#, markdown-text
msgid "Assert that the response contains the given cookie and it is not expired:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:502
#, markdown-text, no-wrap
msgid "    $response->assertCookieNotExpired($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:504
#, markdown-text, no-wrap
msgid "<a name=\"assert-cookie-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:504
#, markdown-text, no-wrap
msgid "assertCookieMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:507
#, markdown-text
msgid "Assert that the response does not contains the given cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:509
#, markdown-text, no-wrap
msgid "    $response->assertCookieMissing($cookieName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:511
#, markdown-text, no-wrap
msgid "<a name=\"assert-created\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:511
#, markdown-text, no-wrap
msgid "assertCreated"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:514
#, markdown-text
msgid "Assert that the response has a 201 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:516
#, markdown-text, no-wrap
msgid "    $response->assertCreated();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:518
#, markdown-text, no-wrap
msgid "<a name=\"assert-dont-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:518
#, markdown-text, no-wrap
msgid "assertDontSee"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:521
#, markdown-text
msgid ""
"Assert that the given string is not contained within the response returned "
"by the application. This assertion will automatically escape the given "
"string unless you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:523
#, markdown-text, no-wrap
msgid "    $response->assertDontSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:525
#, markdown-text, no-wrap
msgid "<a name=\"assert-dont-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:525
#, markdown-text, no-wrap
msgid "assertDontSeeText"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:528
#, markdown-text
msgid ""
"Assert that the given string is not contained within the response text. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`. This method will pass the response content to "
"the `strip_tags` PHP function before making the assertion:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:530
#, markdown-text, no-wrap
msgid "    $response->assertDontSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:532
#, markdown-text, no-wrap
msgid "<a name=\"assert-exact-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:532
#, markdown-text, no-wrap
msgid "assertExactJson"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:535
#, markdown-text
msgid "Assert that the response contains an exact match of the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:537
#, markdown-text, no-wrap
msgid "    $response->assertExactJson(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:539
#, markdown-text, no-wrap
msgid "<a name=\"assert-forbidden\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:539
#, markdown-text, no-wrap
msgid "assertForbidden"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:542
#, markdown-text
msgid "Assert that the response has a forbidden (403) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:544
#, markdown-text, no-wrap
msgid "    $response->assertForbidden();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:546
#, markdown-text, no-wrap
msgid "<a name=\"assert-header\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:546
#, markdown-text, no-wrap
msgid "assertHeader"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:549
#, markdown-text
msgid "Assert that the given header and value is present on the response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:551
#, markdown-text, no-wrap
msgid "    $response->assertHeader($headerName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:553
#, markdown-text, no-wrap
msgid "<a name=\"assert-header-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:553
#, markdown-text, no-wrap
msgid "assertHeaderMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:556
#, markdown-text
msgid "Assert that the given header is not present on the response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:558
#, markdown-text, no-wrap
msgid "    $response->assertHeaderMissing($headerName);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:560
#, markdown-text, no-wrap
msgid "<a name=\"assert-json\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:560
#, markdown-text, no-wrap
msgid "assertJson"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:563
#, markdown-text
msgid "Assert that the response contains the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:565
#, markdown-text, no-wrap
msgid "    $response->assertJson(array $data, $strict = false);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:567
#, markdown-text
msgid ""
"The `assertJson` method converts the response to an array and utilizes "
"`PHPUnit::assertArraySubset` to verify that the given array exists within "
"the JSON response returned by the application. So, if there are other "
"properties in the JSON response, this test will still pass as long as the "
"given fragment is present."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:569
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-count\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:569
#, markdown-text, no-wrap
msgid "assertJsonCount"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:572
#, markdown-text
msgid ""
"Assert that the response JSON has an array with the expected number of items "
"at the given key:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:574
#, markdown-text, no-wrap
msgid "    $response->assertJsonCount($count, $key = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:576
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-fragment\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:576
#, markdown-text, no-wrap
msgid "assertJsonFragment"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:579
#, markdown-text
msgid ""
"Assert that the response contains the given JSON data anywhere in the "
"response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:589
#, markdown-text, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return [\n"
"            'users' => [\n"
"                [\n"
"                    'name' => 'Taylor Otwell',\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:591
#, markdown-text, no-wrap
msgid "    $response->assertJsonFragment(['name' => 'Taylor Otwell']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:593
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:593
#, markdown-text, no-wrap
msgid "assertJsonMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:596
#, markdown-text
msgid "Assert that the response does not contain the given JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:598
#, markdown-text, no-wrap
msgid "    $response->assertJsonMissing(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:600
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-missing-exact\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:600
#, markdown-text, no-wrap
msgid "assertJsonMissingExact"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:603
#, markdown-text
msgid "Assert that the response does not contain the exact JSON data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:605
#, markdown-text, no-wrap
msgid "    $response->assertJsonMissingExact(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:607
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-missing-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:607
#, markdown-text, no-wrap
msgid "assertJsonMissingValidationErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:610
#, markdown-text
msgid "Assert that the response has no JSON validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:612
#, markdown-text, no-wrap
msgid "    $response->assertJsonMissingValidationErrors($keys);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:614
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-path\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:614
#, markdown-text, no-wrap
msgid "assertJsonPath"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:617
#, markdown-text
msgid "Assert that the response contains the given data at the specified path:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:619
#, markdown-text, no-wrap
msgid "    $response->assertJsonPath($path, array $data, $strict = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:621 docs/master/http-tests.md:642
#, markdown-text
msgid ""
"For example, if the JSON response returned by your application contains the "
"following data:"
msgstr ""

#. type: Fenced code block (js)
#: docs/master/http-tests.md:622 docs/master/http-tests.md:643
#, no-wrap
msgid ""
"{\n"
"    \"user\": {\n"
"        \"name\": \"Steve Schoger\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:631
#, markdown-text
msgid ""
"You may assert that the `name` property of the `user` object matches a given "
"value like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:633
#, markdown-text, no-wrap
msgid "    $response->assertJsonPath('user.name', 'Steve Schoger');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:635
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-structure\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:635
#, markdown-text, no-wrap
msgid "assertJsonStructure"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:638
#, markdown-text
msgid "Assert that the response has a given JSON structure:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:640
#, markdown-text, no-wrap
msgid "    $response->assertJsonStructure(array $structure);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:652
#, markdown-text
msgid "You may assert that the JSON structure matches your expectations like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:658
#, markdown-text, no-wrap
msgid ""
"    $response->assertJsonStructure([\n"
"        'user' => [\n"
"            'name',\n"
"        ]\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:660
#, markdown-text, no-wrap
msgid "<a name=\"assert-json-validation-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:660
#, markdown-text, no-wrap
msgid "assertJsonValidationErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:663
#, markdown-text
msgid ""
"Assert that the response has the given JSON validation errors for the given "
"keys. This method should be used when asserting against responses where the "
"validation errors are returned as a JSON structure instead of being flashed "
"to the session:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:665
#, markdown-text, no-wrap
msgid "    $response->assertJsonValidationErrors(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:667
#, markdown-text, no-wrap
msgid "<a name=\"assert-location\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:667
#, markdown-text, no-wrap
msgid "assertLocation"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:670
#, markdown-text
msgid "Assert that the response has the given URI value in the `Location` header:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:672
#, markdown-text, no-wrap
msgid "    $response->assertLocation($uri);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:674
#, markdown-text, no-wrap
msgid "<a name=\"assert-no-content\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:674
#, markdown-text, no-wrap
msgid "assertNoContent"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:677
#, markdown-text
msgid "Assert that the response has the given HTTP status code and no content:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:679
#, markdown-text, no-wrap
msgid "    $response->assertNoContent($status = 204);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:681
#, markdown-text, no-wrap
msgid "<a name=\"assert-not-found\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:681
#, markdown-text, no-wrap
msgid "assertNotFound"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:684
#, markdown-text
msgid "Assert that the response has a not found (404) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:686
#, markdown-text, no-wrap
msgid "    $response->assertNotFound();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:688
#, markdown-text, no-wrap
msgid "<a name=\"assert-ok\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:688
#, markdown-text, no-wrap
msgid "assertOk"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:691
#, markdown-text
msgid "Assert that the response has a 200 HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:693
#, markdown-text, no-wrap
msgid "    $response->assertOk();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:695
#, markdown-text, no-wrap
msgid "<a name=\"assert-plain-cookie\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:695
#, markdown-text, no-wrap
msgid "assertPlainCookie"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:698
#, markdown-text
msgid "Assert that the response contains the given unencrypted cookie:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:700
#, markdown-text, no-wrap
msgid "    $response->assertPlainCookie($cookieName, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:702
#, markdown-text, no-wrap
msgid "<a name=\"assert-redirect\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:702
#, markdown-text, no-wrap
msgid "assertRedirect"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:705
#, markdown-text
msgid "Assert that the response is a redirect to the given URI:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:707
#, markdown-text, no-wrap
msgid "    $response->assertRedirect($uri);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:709
#, markdown-text, no-wrap
msgid "<a name=\"assert-see\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:709
#, markdown-text, no-wrap
msgid "assertSee"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:712
#, markdown-text
msgid ""
"Assert that the given string is contained within the response. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:714
#, markdown-text, no-wrap
msgid "    $response->assertSee($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:716
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:716
#, markdown-text, no-wrap
msgid "assertSeeInOrder"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:719
#, markdown-text
msgid ""
"Assert that the given strings are contained in order within the "
"response. This assertion will automatically escape the given strings unless "
"you pass a second argument of `false`:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:721
#, markdown-text, no-wrap
msgid "    $response->assertSeeInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:723
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-text\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:723
#, markdown-text, no-wrap
msgid "assertSeeText"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:726
#, markdown-text
msgid ""
"Assert that the given string is contained within the response text. This "
"assertion will automatically escape the given string unless you pass a "
"second argument of `false`. The response content will be passed to the "
"`strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:728
#, markdown-text, no-wrap
msgid "    $response->assertSeeText($value, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:730
#, markdown-text, no-wrap
msgid "<a name=\"assert-see-text-in-order\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:730
#, markdown-text, no-wrap
msgid "assertSeeTextInOrder"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:733
#, markdown-text
msgid ""
"Assert that the given strings are contained in order within the response "
"text. This assertion will automatically escape the given strings unless you "
"pass a second argument of `false`. The response content will be passed to "
"the `strip_tags` PHP function before the assertion is made:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:735
#, markdown-text, no-wrap
msgid "    $response->assertSeeTextInOrder(array $values, $escaped = true);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:737
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:737
#, markdown-text, no-wrap
msgid "assertSessionHas"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:740
#, markdown-text
msgid "Assert that the session contains the given piece of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:742
#, markdown-text, no-wrap
msgid "    $response->assertSessionHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:744
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:744
#, markdown-text, no-wrap
msgid "assertSessionHasInput"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:747
#, markdown-text
msgid ""
"Assert that the session has a given value in the [flashed input "
"array](/docs/{{version}}/responses#redirecting-with-flashed-session-data):"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:749
#, markdown-text, no-wrap
msgid "    $response->assertSessionHasInput($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:751
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:751
#, markdown-text, no-wrap
msgid "assertSessionHasAll"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:754
#, markdown-text
msgid "Assert that the session contains a given array of key / value pairs:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:756
#, markdown-text, no-wrap
msgid "    $response->assertSessionHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:758
#, markdown-text
msgid ""
"For example, if your application's session contains `name` and `status` "
"keys, you may assert that both exist and have the specified values like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:763
#, markdown-text, no-wrap
msgid ""
"    $response->assertSessionHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'status' => 'active',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:765
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:765
#, markdown-text, no-wrap
msgid "assertSessionHasErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:768
#, markdown-text
msgid ""
"Assert that the session contains an error for the given `$keys`. If `$keys` "
"is an associative array, assert that the session contains a specific error "
"message (value) for each field (key). This method should be used when "
"testing routes that flash validation errors to the session instead of "
"returning them as a JSON structure:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:772
#, markdown-text, no-wrap
msgid ""
"    $response->assertSessionHasErrors(\n"
"        array $keys, $format = null, $errorBag = 'default'\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:774
#, markdown-text
msgid ""
"For example, to assert that the `name` and `email` field have validation "
"error messages that were flashed to the session, you may invoke the "
"`assertSessionHasErrors` method like so:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:776
#, markdown-text, no-wrap
msgid "    $response->assertSessionHasErrors(['name', 'email']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:778
#, markdown-text
msgid ""
"Or, you may assert that a given field has a particular validation error "
"message:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:782
#, markdown-text, no-wrap
msgid ""
"    $response->assertSessionHasErrors([\n"
"        'name' => 'The given name was invalid.'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:784
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has-errors-in\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:784
#, markdown-text, no-wrap
msgid "assertSessionHasErrorsIn"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:787
#, markdown-text
msgid ""
"Assert that the session contains an error for the given `$keys` within a "
"specific [error bag](/docs/{{version}}/validation#named-error-bags). If "
"`$keys` is an associative array, assert that the session contains a specific "
"error message (value) for each field (key), within the error bag:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:789
#, markdown-text, no-wrap
msgid ""
"    $response->assertSessionHasErrorsIn($errorBag, $keys = [], $format = "
"null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:791
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-has-no-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:791
#, markdown-text, no-wrap
msgid "assertSessionHasNoErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:794
#, markdown-text
msgid "Assert that the session has no validation errors:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:796
#, markdown-text, no-wrap
msgid "    $response->assertSessionHasNoErrors();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:798
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-doesnt-have-errors\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:798
#, markdown-text, no-wrap
msgid "assertSessionDoesntHaveErrors"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:801
#, markdown-text
msgid "Assert that the session has no validation errors for the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:803
#, markdown-text, no-wrap
msgid ""
"    $response->assertSessionDoesntHaveErrors($keys = [], $format = null, "
"$errorBag = 'default');\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:805
#, markdown-text, no-wrap
msgid "<a name=\"assert-session-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:805
#, markdown-text, no-wrap
msgid "assertSessionMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:808
#, markdown-text
msgid "Assert that the session does not contain the given key:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:810
#, markdown-text, no-wrap
msgid "    $response->assertSessionMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:812
#, markdown-text, no-wrap
msgid "<a name=\"assert-status\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:812
#, markdown-text, no-wrap
msgid "assertStatus"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:815
#, markdown-text
msgid "Assert that the response has a given HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:817
#, markdown-text, no-wrap
msgid "    $response->assertStatus($code);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:819
#, markdown-text, no-wrap
msgid "<a name=\"assert-successful\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:819
#, markdown-text, no-wrap
msgid "assertSuccessful"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:822
#, markdown-text, no-wrap
msgid ""
"Assert that the response has a successful (>= 200 and < 300) HTTP status "
"code:\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:824
#, markdown-text, no-wrap
msgid "    $response->assertSuccessful();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:826
#, markdown-text, no-wrap
msgid "<a name=\"assert-unauthorized\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:826
#, markdown-text, no-wrap
msgid "assertUnauthorized"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:829
#, markdown-text
msgid "Assert that the response has an unauthorized (401) HTTP status code:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:831
#, markdown-text, no-wrap
msgid "    $response->assertUnauthorized();\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:833
#, markdown-text, no-wrap
msgid "<a name=\"assert-view-has\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:833
#, markdown-text, no-wrap
msgid "assertViewHas"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:836
#, markdown-text
msgid "Assert that the response view contains given a piece of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:838
#, markdown-text, no-wrap
msgid "    $response->assertViewHas($key, $value = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:840
#, markdown-text
msgid ""
"In addition, view data may be accessed as array variables on the response, "
"allowing you to convenient inspect it:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:842
#, markdown-text, no-wrap
msgid "    $this->assertEquals('Taylor', $response['name']);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:844
#, markdown-text, no-wrap
msgid "<a name=\"assert-view-has-all\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:844
#, markdown-text, no-wrap
msgid "assertViewHasAll"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:847
#, markdown-text
msgid "Assert that the response view has a given list of data:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:849
#, markdown-text, no-wrap
msgid "    $response->assertViewHasAll(array $data);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:851
#, markdown-text
msgid ""
"This method may be used to assert that the view simply contains data "
"matching the given keys:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:856
#, markdown-text, no-wrap
msgid ""
"    $response->assertViewHasAll([\n"
"        'name',\n"
"        'email',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:858
#, markdown-text
msgid "Or, you may assert that the view data is present and has specific values:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:863
#, markdown-text, no-wrap
msgid ""
"    $response->assertViewHasAll([\n"
"        'name' => 'Taylor Otwell',\n"
"        'email' => 'taylor@example.com,',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:865
#, markdown-text, no-wrap
msgid "<a name=\"assert-view-is\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:865
#, markdown-text, no-wrap
msgid "assertViewIs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:868
#, markdown-text
msgid "Assert that the given view was returned by the route:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:870
#, markdown-text, no-wrap
msgid "    $response->assertViewIs($value);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:872
#, markdown-text, no-wrap
msgid "<a name=\"assert-view-missing\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:872
#, markdown-text, no-wrap
msgid "assertViewMissing"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:875
#, markdown-text
msgid ""
"Assert that the given data key was not made available to the view returned "
"in the application's response:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:877
#, markdown-text, no-wrap
msgid "    $response->assertViewMissing($key);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:879
#, markdown-text, no-wrap
msgid "<a name=\"authentication-assertions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/http-tests.md:879
#, markdown-text, no-wrap
msgid "Authentication Assertions"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:882
#, markdown-text
msgid ""
"Laravel also provides a variety of authentication related assertions that "
"you may utilize within your application's feature tests. Note that these "
"methods are invoked on the test class itself and not the "
"`Illuminate\\Testing\\TestResponse` instance returned by methods such as "
"`get` and `post`."
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:884
#, markdown-text, no-wrap
msgid "<a name=\"assert-authenticated\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:884
#, markdown-text, no-wrap
msgid "assertAuthenticated"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:887
#, markdown-text
msgid "Assert that a user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:889
#, markdown-text, no-wrap
msgid "    $this->assertAuthenticated($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:891
#, markdown-text, no-wrap
msgid "<a name=\"assert-guest\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:891
#, markdown-text, no-wrap
msgid "assertGuest"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:894
#, markdown-text
msgid "Assert that a user is not authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:896
#, markdown-text, no-wrap
msgid "    $this->assertGuest($guard = null);\n"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:898
#, markdown-text, no-wrap
msgid "<a name=\"assert-authenticated-as\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/http-tests.md:898
#, markdown-text, no-wrap
msgid "assertAuthenticatedAs"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:901
#, markdown-text
msgid "Assert that a specific user is authenticated:"
msgstr ""

#. type: Plain text
#: docs/master/http-tests.md:902
#, markdown-text, no-wrap
msgid "    $this->assertAuthenticatedAs($user, $guard = null);\n"
msgstr ""
