msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/mocking.pot\n"
"X-Crowdin-File-ID: 107\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-08-06 05:46\n"

#: docs/8.x/mocking.md:block 1 (header)
msgid "Mocking"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Mocking Objects](#mocking-objects)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Mocking Facades](#mocking-facades)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Facade Spies](#facade-spies)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Bus Fake](#bus-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Job Chains](#bus-job-chains)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Job Batches](#job-batches)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Event Fake](#event-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Scoped Event Fakes](#scoped-event-fakes)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[HTTP Fake](#http-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Mail Fake](#mail-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Notification Fake](#notification-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Queue Fake](#queue-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Job Chains](#job-chains)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Storage Fake](#storage-fake)"
msgstr ""

#: docs/8.x/mocking.md:block 2 (unordered list)
msgid "[Interacting With Time](#interacting-with-time)"
msgstr ""

#: docs/8.x/mocking.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/mocking.md:block 5 (paragraph)
msgid "When testing Laravel applications, you may wish to \"mock\" certain aspects of your application so they are not actually executed during a given test. For example, when testing a controller that dispatches an event, you may wish to mock the event listeners so they are not actually executed during the test. This allows you to only test the controller's HTTP response without worrying about the execution of the event listeners since the event listeners can be tested in their own test case."
msgstr ""

#: docs/8.x/mocking.md:block 6 (paragraph)
msgid "Laravel provides helpful methods for mocking events, jobs, and other facades out of the box. These helpers primarily provide a convenience layer over Mockery so you do not have to manually make complicated Mockery method calls."
msgstr ""

#: docs/8.x/mocking.md:block 8 (header)
msgid "Mocking Objects"
msgstr ""

#: docs/8.x/mocking.md:block 9 (paragraph)
msgid "When mocking an object that is going to be injected into your application via Laravel's [service container](/docs/{{version}}/container), you will need to bind your mocked instance into the container as an `instance` binding. This will instruct the container to use your mocked instance of the object instead of constructing the object itself:"
msgstr ""

#: docs/8.x/mocking.md:block 10 (code)
msgid "use App\\Service;\n"
"use Mockery;\n"
"use Mockery\\MockInterface;\n\n"
"public function test_something_can_be_mocked()\n"
"{\n"
"    $this->instance(\n"
"        Service::class,\n"
"        Mockery::mock(Service::class, function (MockInterface $mock) {\n"
"            $mock->shouldReceive('process')->once();\n"
"        })\n"
"    );\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 11 (paragraph)
msgid "In order to make this more convenient, you may use the `mock` method that is provided by Laravel's base test case class. For example, the following example is equivalent to the example above:"
msgstr ""

#: docs/8.x/mocking.md:block 12 (code)
msgid "use App\\Service;\n"
"use Mockery\\MockInterface;\n\n"
"$mock = $this->mock(Service::class, function (MockInterface $mock) {\n"
"    $mock->shouldReceive('process')->once();\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 13 (paragraph)
msgid "You may use the `partialMock` method when you only need to mock a few methods of an object. The methods that are not mocked will be executed normally when called:"
msgstr ""

#: docs/8.x/mocking.md:block 14 (code)
msgid "use App\\Service;\n"
"use Mockery\\MockInterface;\n\n"
"$mock = $this->partialMock(Service::class, function (MockInterface $mock) {\n"
"    $mock->shouldReceive('process')->once();\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 15 (paragraph)
msgid "Similarly, if you want to [spy](http://docs.mockery.io/en/latest/reference/spies.html) on an object, Laravel's base test case class offers a `spy` method as a convenient wrapper around the `Mockery::spy` method. Spies are similar to mocks; however, spies record any interaction between the spy and the code being tested, allowing you to make assertions after the code is executed:"
msgstr ""

#: docs/8.x/mocking.md:block 16 (code)
msgid "use App\\Service;\n\n"
"$spy = $this->spy(Service::class);\n\n"
"// ...\n\n"
"$spy->shouldHaveReceived('process');\n"
msgstr ""

#: docs/8.x/mocking.md:block 18 (header)
msgid "Mocking Facades"
msgstr ""

#: docs/8.x/mocking.md:block 19 (paragraph)
msgid "Unlike traditional static method calls, [facades](/docs/{{version}}/facades) (including [real-time facades](/docs/{{version}}/facades#real-time-facades)) may be mocked. This provides a great advantage over traditional static methods and grants you the same testability that you would have if you were using traditional dependency injection. When testing, you may often want to mock a call to a Laravel facade that occurs in one of your controllers. For example, consider the following controller action:"
msgstr ""

#: docs/8.x/mocking.md:block 20 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use Illuminate\\Support\\Facades\\Cache;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Retrieve a list of all users of the application.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        $value = Cache::get('key');\n\n"
"        //\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 21 (paragraph)
msgid "We can mock the call to the `Cache` facade by using the `shouldReceive` method, which will return an instance of a [Mockery](https://github.com/padraic/mockery) mock. Since facades are actually resolved and managed by the Laravel [service container](/docs/{{version}}/container), they have much more testability than a typical static class. For example, let's mock our call to the `Cache` facade's `get` method:"
msgstr ""

#: docs/8.x/mocking.md:block 22 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Cache;\n"
"use Tests\\TestCase;\n\n"
"class UserControllerTest extends TestCase\n"
"{\n"
"    public function testGetIndex()\n"
"    {\n"
"        Cache::shouldReceive('get')\n"
"                    ->once()\n"
"                    ->with('key')\n"
"                    ->andReturn('value');\n\n"
"        $response = $this->get('/users');\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 23 (quote)
msgid "{note} You should not mock the `Request` facade. Instead, pass the input you desire into the [HTTP testing methods](/docs/{{version}}/http-tests) such as `get` and `post` when running your test. Likewise, instead of mocking the `Config` facade, call the `Config::set` method in your tests."
msgstr ""

#: docs/8.x/mocking.md:block 25 (header)
msgid "Facade Spies"
msgstr ""

#: docs/8.x/mocking.md:block 26 (paragraph)
msgid "If you would like to [spy](http://docs.mockery.io/en/latest/reference/spies.html) on a facade, you may call the `spy` method on the corresponding facade. Spies are similar to mocks; however, spies record any interaction between the spy and the code being tested, allowing you to make assertions after the code is executed:"
msgstr ""

#: docs/8.x/mocking.md:block 27 (code)
msgid "use Illuminate\\Support\\Facades\\Cache;\n\n"
"public function test_values_are_be_stored_in_cache()\n"
"{\n"
"    Cache::spy();\n\n"
"    $response = $this->get('/');\n\n"
"    $response->assertStatus(200);\n\n"
"    Cache::shouldHaveReceived('put')->once()->with('name', 'Taylor', 10);\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 29 (header)
msgid "Bus Fake"
msgstr ""

#: docs/8.x/mocking.md:block 30 (paragraph)
msgid "When testing code that dispatches jobs, you typically want to assert that a given job was dispatched but not actually queue or execute the job. This is because the job's execution can normally be tested in a separate test class."
msgstr ""

#: docs/8.x/mocking.md:block 31 (paragraph)
msgid "You may use the `Bus` facade's `fake` method to prevent jobs from being dispatched to the queue. Then, after executing the code under test, you may inspect which jobs the application attempted to dispatch using the `assertDispatched` and `assertNotDispatched` methods:"
msgstr ""

#: docs/8.x/mocking.md:block 32 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Jobs\\ShipOrder;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Bus;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Bus::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that a job was dispatched...\n"
"        Bus::assertDispatched(ShipOrder::class);\n\n"
"        // Assert a job was not dispatched...\n"
"        Bus::assertNotDispatched(AnotherJob::class);\n\n"
"        // Assert that a job was dispatched synchronously...\n"
"        Bus::assertDispatchedSync(AnotherJob::class);\n\n"
"        // Assert that a job was not dipatched synchronously...\n"
"        Bus::assertNotDispatchedSync(AnotherJob::class);\n\n"
"        // Assert that a job was dispatched after the response was sent...\n"
"        Bus::assertDispatchedAfterResponse(AnotherJob::class);\n\n"
"        // Assert a job was not dispatched after response was sent...\n"
"        Bus::assertNotDispatchedAfterResponse(AnotherJob::class);\n\n"
"        // Assert no jobs were dispatched...\n"
"        Bus::assertNothingDispatched();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 33 (paragraph)
msgid "You may pass a closure to the available methods in order to assert that a job was dispatched that passes a given \"truth test\". If at least one job was dispatched that passes the given truth test then the assertion will be successful. For example, you may wish to assert that a job was dispatched for a specific order:"
msgstr ""

#: docs/8.x/mocking.md:block 34 (code)
msgid "Bus::assertDispatched(function (ShipOrder $job) use ($order) {\n"
"    return $job->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 36 (header)
msgid "Job Chains"
msgstr ""

#: docs/8.x/mocking.md:block 37 (paragraph)
msgid "The `Bus` facade's `assertChained` method may be used to assert that a [chain of jobs](/docs/{{version}}/queues#job-chaining) was dispatched. The `assertChained` method accepts an array of chained jobs as its first argument:"
msgstr ""

#: docs/8.x/mocking.md:block 38 (code)
msgid "use App\\Jobs\\RecordShipment;\n"
"use App\\Jobs\\ShipOrder;\n"
"use App\\Jobs\\UpdateInventory;\n"
"use Illuminate\\Support\\Facades\\Bus;\n\n"
"Bus::assertChained([\n"
"    ShipOrder::class,\n"
"    RecordShipment::class,\n"
"    UpdateInventory::class\n"
"]);\n"
msgstr ""

#: docs/8.x/mocking.md:block 39 (paragraph)
msgid "As you can see in the example above, the array of chained jobs may be an array of the job's class names. However, you may also provide an array of actual job instances. When doing so, Laravel will ensure that the job instances are of the same class and have the same property values of the chained jobs dispatched by your application:"
msgstr ""

#: docs/8.x/mocking.md:block 40 (code)
msgid "Bus::assertChained([\n"
"    new ShipOrder,\n"
"    new RecordShipment,\n"
"    new UpdateInventory,\n"
"]);\n"
msgstr ""

#: docs/8.x/mocking.md:block 42 (header)
msgid "Job Batches"
msgstr ""

#: docs/8.x/mocking.md:block 43 (paragraph)
msgid "The `Bus` facade's `assertBatched` method may be used to assert that a [batch of jobs](/docs/{{version}}/queues#job-batching) was dispatched. The closure given to the `assertBatched` method receives an instance of `Illuminate\\Bus\\PendingBatch`, which may be used to inspect the jobs within the batch:"
msgstr ""

#: docs/8.x/mocking.md:block 44 (code)
msgid "use Illuminate\\Bus\\PendingBatch;\n"
"use Illuminate\\Support\\Facades\\Bus;\n\n"
"Bus::assertBatched(function (PendingBatch $batch) {\n"
"    return $batch->name == 'import-csv' &&\n"
"           $batch->jobs->count() === 10;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 46 (header)
msgid "Event Fake"
msgstr ""

#: docs/8.x/mocking.md:block 47 (paragraph)
msgid "When testing code that dispatches events, you may wish to instruct Laravel to not actually execute the event's listeners. Using the `Event` facade's `fake` method, you may prevent listeners from executing, execute the code under test, and then assert which events were dispatched by your application using the `assertDispatched`, `assertNotDispatched`, and `assertNothingDispatched` methods:"
msgstr ""

#: docs/8.x/mocking.md:block 48 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Events\\OrderFailedToShip;\n"
"use App\\Events\\OrderShipped;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * Test order shipping.\n"
"     */\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Event::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that an event was dispatched...\n"
"        Event::assertDispatched(OrderShipped::class);\n\n"
"        // Assert an event was dispatched twice...\n"
"        Event::assertDispatched(OrderShipped::class, 2);\n\n"
"        // Assert an event was not dispatched...\n"
"        Event::assertNotDispatched(OrderFailedToShip::class);\n\n"
"        // Assert that no events were dispatched...\n"
"        Event::assertNothingDispatched();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 49 (paragraph)
msgid "You may pass a closure to the `assertDispatched` or `assertNotDispatched` methods in order to assert that an event was dispatched that passes a given \"truth test\". If at least one event was dispatched that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/8.x/mocking.md:block 50 (code)
msgid "Event::assertDispatched(function (OrderShipped $event) use ($order) {\n"
"    return $event->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 51 (paragraph)
msgid "If you would simply like to assert that an event listener is listening to a given event, you may use the `assertListening` method:"
msgstr ""

#: docs/8.x/mocking.md:block 52 (code)
msgid "Event::assertListening(\n"
"    OrderShipped::class,\n"
"    SendShipmentNotification::class\n"
");\n"
msgstr ""

#: docs/8.x/mocking.md:block 53 (quote)
msgid "{note} After calling `Event::fake()`, no event listeners will be executed. So, if your tests use model factories that rely on events, such as creating a UUID during a model's `creating` event, you should call `Event::fake()` **after** using your factories."
msgstr ""

#: docs/8.x/mocking.md:block 55 (header)
msgid "Faking A Subset Of Events"
msgstr ""

#: docs/8.x/mocking.md:block 56 (paragraph)
msgid "If you only want to fake event listeners for a specific set of events, you may pass them to the `fake` or `fakeFor` method:"
msgstr ""

#: docs/8.x/mocking.md:block 57 (code)
msgid "/**\n"
" * Test order process.\n"
" */\n"
"public function test_orders_can_be_processed()\n"
"{\n"
"    Event::fake([\n"
"        OrderCreated::class,\n"
"    ]);\n\n"
"    $order = Order::factory()->create();\n\n"
"    Event::assertDispatched(OrderCreated::class);\n\n"
"    // Other events are dispatched as normal...\n"
"    $order->update([...]);\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 59 (header)
msgid "Scoped Event Fakes"
msgstr ""

#: docs/8.x/mocking.md:block 60 (paragraph)
msgid "If you only want to fake event listeners for a portion of your test, you may use the `fakeFor` method:"
msgstr ""

#: docs/8.x/mocking.md:block 61 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Events\\OrderCreated;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Support\\Facades\\Event;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    /**\n"
"     * Test order process.\n"
"     */\n"
"    public function test_orders_can_be_processed()\n"
"    {\n"
"        $order = Event::fakeFor(function () {\n"
"            $order = Order::factory()->create();\n\n"
"            Event::assertDispatched(OrderCreated::class);\n\n"
"            return $order;\n"
"        });\n\n"
"        // Events are dispatched as normal and observers will run ...\n"
"        $order->update([...]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 63 (header)
msgid "HTTP Fake"
msgstr ""

#: docs/8.x/mocking.md:block 64 (paragraph)
msgid "The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made. For more information on faking outgoing HTTP requests, please consult the [HTTP Client testing documentation](/docs/{{version}}/http-client#testing)."
msgstr ""

#: docs/8.x/mocking.md:block 66 (header)
msgid "Mail Fake"
msgstr ""

#: docs/8.x/mocking.md:block 67 (paragraph)
msgid "You may use the `Mail` facade's `fake` method to prevent mail from being sent. Typically, sending mail is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given mailable."
msgstr ""

#: docs/8.x/mocking.md:block 68 (paragraph)
msgid "After calling the `Mail` facade's `fake` method, you may then assert that [mailables](/docs/{{version}}/mail) were instructed to be sent to users and even inspect the data the mailables received:"
msgstr ""

#: docs/8.x/mocking.md:block 69 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Mail::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 70 (paragraph)
msgid "If you are queueing mailables for delivery in the background, you should use the `assertQueued` method instead of `assertSent`:"
msgstr ""

#: docs/8.x/mocking.md:block 71 (code)
msgid "Mail::assertQueued(OrderShipped::class);\n\n"
"Mail::assertNotQueued(OrderShipped::class);\n\n"
"Mail::assertNothingQueued();\n"
msgstr ""

#: docs/8.x/mocking.md:block 72 (paragraph)
msgid "You may pass a closure to the `assertSent`, `assertNotSent`, `assertQueued`, or `assertNotQueued` methods in order to assert that a mailable was sent that passes a given \"truth test\". If at least one mailable was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/8.x/mocking.md:block 73 (code)
msgid "Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 74 (paragraph)
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the recipients of the mailable:"
msgstr ""

#: docs/8.x/mocking.md:block 75 (code)
msgid "Mail::assertSent(OrderShipped::class, function ($mail) use ($user) {\n"
"    return $mail->hasTo($user->email) &&\n"
"           $mail->hasCc('...') &&\n"
"           $mail->hasBcc('...');\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 76 (paragraph)
msgid "You may have noticed that there are two methods for asserting that mail was not sent: `assertNotSent` and `assertNotQueued`. Sometimes you may wish to assert that no mail was sent **or** queued. To accomplish this, you may use the `assertNothingOutgoing` and `assertNotOutgoing` methods:"
msgstr ""

#: docs/8.x/mocking.md:block 77 (code)
msgid "Mail::assertNothingOutgoing();\n\n"
"Mail::assertNotOutgoing(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 79 (header)
msgid "Notification Fake"
msgstr ""

#: docs/8.x/mocking.md:block 80 (paragraph)
msgid "You may use the `Notification` facade's `fake` method to prevent notifications from being sent. Typically, sending notifications is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given notification."
msgstr ""

#: docs/8.x/mocking.md:block 81 (paragraph)
msgid "After calling the `Notification` facade's `fake` method, you may then assert that [notifications](/docs/{{version}}/notifications) were instructed to be sent to users and even inspect the data the notifications received:"
msgstr ""

#: docs/8.x/mocking.md:block 82 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Notifications\\OrderShipped;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Notification::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no notifications were sent...\n"
"        Notification::assertNothingSent();\n\n"
"        // Assert a notification was sent to the given users...\n"
"        Notification::assertSentTo(\n"
"            [$user], OrderShipped::class\n"
"        );\n\n"
"        // Assert a notification was not sent...\n"
"        Notification::assertNotSentTo(\n"
"            [$user], AnotherNotification::class\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 83 (paragraph)
msgid "You may pass a closure to the `assertSentTo` or `assertNotSentTo` methods in order to assert that a notification was sent that passes a given \"truth test\". If at least one notification was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/8.x/mocking.md:block 84 (code)
msgid "Notification::assertSentTo(\n"
"    $user,\n"
"    function (OrderShipped $notification, $channels) use ($order) {\n"
"        return $notification->order->id === $order->id;\n"
"    }\n"
");\n"
msgstr ""

#: docs/8.x/mocking.md:block 86 (header)
msgid "On-Demand Notifications"
msgstr ""

#: docs/8.x/mocking.md:block 87 (paragraph)
msgid "If the code you are testing sends [on-demand notifications](/docs/{{version}}/notifications#on-demand-notifications), you will need to assert that the notification was sent to an `Illuminate\\Notifications\\AnonymousNotifiable` instance:"
msgstr ""

#: docs/8.x/mocking.md:block 88 (code)
msgid "use Illuminate\\Notifications\\AnonymousNotifiable;\n\n"
"Notification::assertSentTo(\n"
"    new AnonymousNotifiable, OrderShipped::class\n"
");\n"
msgstr ""

#: docs/8.x/mocking.md:block 89 (paragraph)
msgid "By passing a closure as the third argument to the notification assertion methods, you may determine if an on-demand notification was sent to the correct \"route\" address:"
msgstr ""

#: docs/8.x/mocking.md:block 90 (code)
msgid "Notification::assertSentTo(\n"
"    new AnonymousNotifiable,\n"
"    OrderShipped::class,\n"
"    function ($notification, $channels, $notifiable) use ($user) {\n"
"        return $notifiable->routes['mail'] === $user->email;\n"
"    }\n"
");\n"
msgstr ""

#: docs/8.x/mocking.md:block 92 (header)
msgid "Queue Fake"
msgstr ""

#: docs/8.x/mocking.md:block 93 (paragraph)
msgid "You may use the `Queue` facade's `fake` method to prevent queued jobs from being pushed to the queue. Most likely, it is sufficient to simply assert that Laravel was instructed to push a given job to the queue since the queued jobs themselves may be tested in another test class."
msgstr ""

#: docs/8.x/mocking.md:block 94 (paragraph)
msgid "After calling the `Queue` facade's `fake` method, you may then assert that the application attempted to push jobs to the queue:"
msgstr ""

#: docs/8.x/mocking.md:block 95 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Jobs\\AnotherJob;\n"
"use App\\Jobs\\FinalJob;\n"
"use App\\Jobs\\ShipOrder;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Queue;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Queue::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no jobs were pushed...\n"
"        Queue::assertNothingPushed();\n\n"
"        // Assert a job was pushed to a given queue...\n"
"        Queue::assertPushedOn('queue-name', ShipOrder::class);\n\n"
"        // Assert a job was pushed twice...\n"
"        Queue::assertPushed(ShipOrder::class, 2);\n\n"
"        // Assert a job was not pushed...\n"
"        Queue::assertNotPushed(AnotherJob::class);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 96 (paragraph)
msgid "You may pass a closure to the `assertPushed` or `assertNotPushed` methods in order to assert that a job was pushed that passes a given \"truth test\". If at least one job was pushed that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/8.x/mocking.md:block 97 (code)
msgid "Queue::assertPushed(function (ShipOrder $job) use ($order) {\n"
"    return $job->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/8.x/mocking.md:block 100 (paragraph)
msgid "The `Queue` facade's `assertPushedWithChain` and `assertPushedWithoutChain` methods may be used to inspect the job chain of a pushed job. The `assertPushedWithChain` method accepts the primary job as its first argument and an array of chained jobs as its second argument:"
msgstr ""

#: docs/8.x/mocking.md:block 101 (code)
msgid "use App\\Jobs\\RecordShipment;\n"
"use App\\Jobs\\ShipOrder;\n"
"use App\\Jobs\\UpdateInventory;\n"
"use Illuminate\\Support\\Facades\\Queue;\n\n"
"Queue::assertPushedWithChain(ShipOrder::class, [\n"
"    RecordShipment::class,\n"
"    UpdateInventory::class\n"
"]);\n"
msgstr ""

#: docs/8.x/mocking.md:block 103 (code)
msgid "Queue::assertPushedWithChain(ShipOrder::class, [\n"
"    new RecordShipment,\n"
"    new UpdateInventory,\n"
"]);\n"
msgstr ""

#: docs/8.x/mocking.md:block 104 (paragraph)
msgid "You may use the `assertPushedWithoutChain` method to assert that a job was pushed without a chain of jobs:"
msgstr ""

#: docs/8.x/mocking.md:block 105 (code)
msgid "Queue::assertPushedWithoutChain(ShipOrder::class);\n"
msgstr ""

#: docs/8.x/mocking.md:block 107 (header)
msgid "Storage Fake"
msgstr ""

#: docs/8.x/mocking.md:block 108 (paragraph)
msgid "The `Storage` facade's `fake` method allows you to easily generate a fake disk that, combined with the file generation utilities of the `Illuminate\\Http\\UploadedFile` class, greatly simplifies the testing of file uploads. For example:"
msgstr ""

#: docs/8.x/mocking.md:block 109 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_albums_can_be_uploaded()\n"
"    {\n"
"        Storage::fake('photos');\n\n"
"        $response = $this->json('POST', '/photos', [\n"
"            UploadedFile::fake()->image('photo1.jpg'),\n"
"            UploadedFile::fake()->image('photo2.jpg')\n"
"        ]);\n\n"
"        // Assert one or more files were stored...\n"
"        Storage::disk('photos')->assertExists('photo1.jpg');\n"
"        Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n"
"        // Assert one or more files were not stored...\n"
"        Storage::disk('photos')->assertMissing('missing.jpg');\n"
"        Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mocking.md:block 110 (paragraph)
msgid "For more information on testing file uploads, you may consult the [HTTP testing documentation's information on file uploads](/docs/{{version}}/http-tests#testing-file-uploads)."
msgstr ""

#: docs/8.x/mocking.md:block 111 (quote)
msgid "{tip} By default, the `fake` method will delete all files in its temporary directory. If you would like to keep these files, you may use the \"persistentFake\" method instead."
msgstr ""

#: docs/8.x/mocking.md:block 113 (header)
msgid "Interacting With Time"
msgstr ""

#: docs/8.x/mocking.md:block 114 (paragraph)
msgid "When testing, you may occasionally need to modify the time returned by helpers such as `now` or `Illuminate\\Support\\Carbon::now()`. Thankfully, Laravel's base feature test class includes helpers that allow you to manipulate the current time:"
msgstr ""

#: docs/8.x/mocking.md:block 115 (code)
msgid "public function testTimeCanBeManipulated()\n"
"{\n"
"    // Travel into the future...\n"
"    $this->travel(5)->milliseconds();\n"
"    $this->travel(5)->seconds();\n"
"    $this->travel(5)->minutes();\n"
"    $this->travel(5)->hours();\n"
"    $this->travel(5)->days();\n"
"    $this->travel(5)->weeks();\n"
"    $this->travel(5)->years();\n\n"
"    // Travel into the past...\n"
"    $this->travel(-5)->hours();\n\n"
"    // Travel to an explicit time...\n"
"    $this->travelTo(now()->subHours(6));\n\n"
"    // Return back to the present time...\n"
"    $this->travelBack();\n"
"}\n"
msgstr ""

#: docs/9.x/mocking.md:block 23 (quote)
msgid "**Warning** You should not mock the `Request` facade. Instead, pass the input you desire into the [HTTP testing methods](/docs/{{version}}/http-tests) such as `get` and `post` when running your test. Likewise, instead of mocking the `Config` facade, call the `Config::set` method in your tests."
msgstr ""

#: docs/9.x/mocking.md:block 53 (quote)
msgid "**Warning** After calling `Event::fake()`, no event listeners will be executed. So, if your tests use model factories that rely on events, such as creating a UUID during a model's `creating` event, you should call `Event::fake()` **after** using your factories."
msgstr ""

#: docs/9.x/mocking.md:block 58 (paragraph)
msgid "You may fake all events except for a set of specified events using the `fakeExcept` method:"
msgstr ""

#: docs/9.x/mocking.md:block 59 (code)
msgid "Event::fakeExcept([\n"
"    OrderCreated::class,\n"
"]);\n"
msgstr ""

#: docs/9.x/mocking.md:block 76 (paragraph)
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the mailable:"
msgstr ""

#: docs/9.x/mocking.md:block 77 (code)
msgid "Mail::assertSent(OrderShipped::class, function ($mail) use ($user) {\n"
"    return $mail->hasTo($user->email) &&\n"
"           $mail->hasCc('...') &&\n"
"           $mail->hasBcc('...') &&\n"
"           $mail->hasReplyTo('...') &&\n"
"           $mail->hasFrom('...') &&\n"
"           $mail->hasSubject('...');\n"
"});\n"
msgstr ""

#: docs/9.x/mocking.md:block 81 (header)
msgid "Testing Mailable Content"
msgstr ""

#: docs/9.x/mocking.md:block 82 (paragraph)
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test the content of your mailables, check out our documentation on the [testing mailables](/docs/{{version}}/mail#testing-mailables)."
msgstr ""

#: docs/9.x/mocking.md:block 87 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Notifications\\OrderShipped;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped()\n"
"    {\n"
"        Notification::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no notifications were sent...\n"
"        Notification::assertNothingSent();\n\n"
"        // Assert a notification was sent to the given users...\n"
"        Notification::assertSentTo(\n"
"            [$user], OrderShipped::class\n"
"        );\n\n"
"        // Assert a notification was not sent...\n"
"        Notification::assertNotSentTo(\n"
"            [$user], AnotherNotification::class\n"
"        );\n\n"
"        // Assert that a given number of notifications were sent...\n"
"        Notification::assertCount(3);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mocking.md:block 92 (paragraph)
msgid "If the code you are testing sends [on-demand notifications](/docs/{{version}}/notifications#on-demand-notifications), you can test that the on-demand notification was sent via the `assertSentOnDemand` method:"
msgstr ""

#: docs/9.x/mocking.md:block 93 (code)
msgid "Notification::assertSentOnDemand(OrderShipped::class);\n"
msgstr ""

#: docs/9.x/mocking.md:block 94 (paragraph)
msgid "By passing a closure as the second argument to the `assertSentOnDemand` method, you may determine if an on-demand notification was sent to the correct \"route\" address:"
msgstr ""

#: docs/9.x/mocking.md:block 95 (code)
msgid "Notification::assertSentOnDemand(\n"
"    OrderShipped::class,\n"
"    function ($notification, $channels, $notifiable) use ($user) {\n"
"        return $notifiable->routes['mail'] === $user->email;\n"
"    }\n"
");\n"
msgstr ""

#: docs/9.x/mocking.md:block 114 (code)
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Illuminate\\Http\\UploadedFile;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_albums_can_be_uploaded()\n"
"    {\n"
"        Storage::fake('photos');\n\n"
"        $response = $this->json('POST', '/photos', [\n"
"            UploadedFile::fake()->image('photo1.jpg'),\n"
"            UploadedFile::fake()->image('photo2.jpg')\n"
"        ]);\n\n"
"        // Assert one or more files were stored...\n"
"        Storage::disk('photos')->assertExists('photo1.jpg');\n"
"        Storage::disk('photos')->assertExists(['photo1.jpg', 'photo2.jpg']);\n\n"
"        // Assert one or more files were not stored...\n"
"        Storage::disk('photos')->assertMissing('missing.jpg');\n"
"        Storage::disk('photos')->assertMissing(['missing.jpg', 'non-existing.jpg']);\n\n"
"        // Assert that a given directory is empty...\n"
"        Storage::disk('photos')->assertDirectoryEmpty('/wallpapers');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mocking.md:block 115 (paragraph)
msgid "By default, the `fake` method will delete all files in its temporary directory. If you would like to keep these files, you may use the \"persistentFake\" method instead. For more information on testing file uploads, you may consult the [HTTP testing documentation's information on file uploads](/docs/{{version}}/http-tests#testing-file-uploads)."
msgstr ""

#: docs/9.x/mocking.md:block 116 (quote)
msgid "**Warning** The `image` method requires the [GD extension](https://www.php.net/manual/en/book.image.php)."
msgstr ""

#: docs/9.x/mocking.md:block 120 (code)
msgid "use Illuminate\\Support\\Carbon;\n\n"
"public function testTimeCanBeManipulated()\n"
"{\n"
"    // Travel into the future...\n"
"    $this->travel(5)->milliseconds();\n"
"    $this->travel(5)->seconds();\n"
"    $this->travel(5)->minutes();\n"
"    $this->travel(5)->hours();\n"
"    $this->travel(5)->days();\n"
"    $this->travel(5)->weeks();\n"
"    $this->travel(5)->years();\n\n"
"    // Freeze time and resume normal time after executing closure...\n"
"    $this->freezeTime(function (Carbon $time) {\n"
"        // ...\n"
"    });\n\n"
"    // Travel into the past...\n"
"    $this->travel(-5)->hours();\n\n"
"    // Travel to an explicit time...\n"
"    $this->travelTo(now()->subHours(6));\n\n"
"    // Return back to the present time...\n"
"    $this->travelBack();\n"
"}\n"
msgstr ""

