# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-29 13:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/http-client.md, line: 1
# File: docs/master/http-client.md, line: 1
#, no-wrap
msgid "HTTP Client"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Making Requests](#making-requests)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Request Data](#request-data)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Headers](#headers)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Authentication](#authentication)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Timeout](#timeout)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Retries](#retries)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Error Handling](#error-handling)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Guzzle Options](#guzzle-options)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Concurrent Requests](#concurrent-requests)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Macros](#macros)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Testing](#testing)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Faking Responses](#faking-responses)"
msgstr ""
#
#. type: Bullet: '    - '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Inspecting Requests](#inspecting-requests)"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/http-client.md, line: 18
# File: docs/master/http-client.md, line: 18
msgid "[Events](#events)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 20
# File: docs/master/http-client.md, line: 20
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 20
# File: docs/master/http-client.md, line: 20
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 23
# File: docs/master/http-client.md, line: 23
msgid "Laravel provides an expressive, minimal API around the [Guzzle HTTP client](http://docs.guzzlephp.org/en/stable/), allowing you to quickly make outgoing HTTP requests to communicate with other web applications. Laravel's wrapper around Guzzle is focused on its most common use cases and a wonderful developer experience."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 25
# File: docs/master/http-client.md, line: 25
msgid "Before getting started, you should ensure that you have installed the Guzzle package as a dependency of your application. By default, Laravel automatically includes this dependency. However, if you have previously removed the package, you may install it again via Composer:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 27
# File: docs/master/http-client.md, line: 27
#, no-wrap
msgid "    composer require guzzlehttp/guzzle\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 29
# File: docs/master/http-client.md, line: 29
#, no-wrap
msgid "<a name=\"making-requests\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 29
# File: docs/master/http-client.md, line: 29
#, no-wrap
msgid "Making Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 32
# File: docs/master/http-client.md, line: 32
msgid "To make requests, you may use the `get`, `post`, `put`, `patch`, and `delete` methods provided by the `Http` facade. First, let's examine how to make a basic `GET` request to another URL:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 34
# File: docs/8.x/http-client.md, line: 69
# File: docs/8.x/http-client.md, line: 309
# File: docs/master/http-client.md, line: 34
# File: docs/master/http-client.md, line: 69
# File: docs/master/http-client.md, line: 315
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 36
# File: docs/master/http-client.md, line: 36
#, no-wrap
msgid "    $response = Http::get('http://example.com');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 38
# File: docs/master/http-client.md, line: 38
msgid "The `get` method returns an instance of `Illuminate\\Http\\Client\\Response`, which provides a variety of methods that may be used to inspect the response:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 51
# File: docs/master/http-client.md, line: 51
#, no-wrap
msgid ""
"    $response->body() : string;\n"
"    $response->json() : array|mixed;\n"
"    $response->object() : object;\n"
"    $response->collect() : Illuminate\\Support\\Collection;\n"
"    $response->status() : int;\n"
"    $response->ok() : bool;\n"
"    $response->successful() : bool;\n"
"    $response->failed() : bool;\n"
"    $response->serverError() : bool;\n"
"    $response->clientError() : bool;\n"
"    $response->header($header) : string;\n"
"    $response->headers() : array;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 53
# File: docs/master/http-client.md, line: 53
msgid "The `Illuminate\\Http\\Client\\Response` object also implements the PHP `ArrayAccess` interface, allowing you to access JSON response data directly on the response:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 55
# File: docs/master/http-client.md, line: 55
#, no-wrap
msgid "    return Http::get('http://example.com/users/1')['name'];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 57
# File: docs/master/http-client.md, line: 57
#, no-wrap
msgid "<a name=\"dumping-requests\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 57
# File: docs/master/http-client.md, line: 57
#, no-wrap
msgid "Dumping Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 60
# File: docs/master/http-client.md, line: 60
msgid "If you would like to dump the outgoing request instance before it is sent and terminate the script's execution, you may add the `dd` method to the beginning of your request definition:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 62
# File: docs/master/http-client.md, line: 62
#, no-wrap
msgid "    return Http::dd()->get('http://example.com');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 64
# File: docs/master/http-client.md, line: 64
#, no-wrap
msgid "<a name=\"request-data\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 64
# File: docs/master/http-client.md, line: 64
#, no-wrap
msgid "Request Data"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 67
# File: docs/master/http-client.md, line: 67
msgid "Of course, it is common when making `POST`, `PUT`, and `PATCH` requests to send additional data with your request, so these methods accept an array of data as their second argument. By default, data will be sent using the `application/json` content type:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 74
# File: docs/master/http-client.md, line: 74
#, no-wrap
msgid ""
"    $response = Http::post('http://example.com/users', [\n"
"        'name' => 'Steve',\n"
"        'role' => 'Network Administrator',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 76
# File: docs/master/http-client.md, line: 76
#, no-wrap
msgid "<a name=\"get-request-query-parameters\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 76
# File: docs/master/http-client.md, line: 76
#, no-wrap
msgid "GET Request Query Parameters"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 79
# File: docs/master/http-client.md, line: 79
msgid "When making `GET` requests, you may either append a query string to the URL directly or pass an array of key / value pairs as the second argument to the `get` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 84
# File: docs/master/http-client.md, line: 84
#, no-wrap
msgid ""
"    $response = Http::get('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'page' => 1,\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 86
# File: docs/master/http-client.md, line: 86
#, no-wrap
msgid "<a name=\"sending-form-url-encoded-requests\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 86
# File: docs/master/http-client.md, line: 86
#, no-wrap
msgid "Sending Form URL Encoded Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 89
# File: docs/master/http-client.md, line: 89
msgid "If you would like to send data using the `application/x-www-form-urlencoded` content type, you should call the `asForm` method before making your request:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 94
# File: docs/master/http-client.md, line: 94
#, no-wrap
msgid ""
"    $response = Http::asForm()->post('http://example.com/users', [\n"
"        'name' => 'Sara',\n"
"        'role' => 'Privacy Consultant',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 96
# File: docs/master/http-client.md, line: 96
#, no-wrap
msgid "<a name=\"sending-a-raw-request-body\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 96
# File: docs/master/http-client.md, line: 96
#, no-wrap
msgid "Sending A Raw Request Body"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 99
# File: docs/master/http-client.md, line: 99
msgid "You may use the `withBody` method if you would like to provide a raw request body when making a request. The content type may be provided via the method's second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 103
# File: docs/master/http-client.md, line: 103
#, no-wrap
msgid ""
"    $response = Http::withBody(\n"
"        base64_encode($photo), 'image/jpeg'\n"
"    )->post('http://example.com/photo');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 105
# File: docs/master/http-client.md, line: 105
#, no-wrap
msgid "<a name=\"multi-part-requests\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 105
# File: docs/master/http-client.md, line: 105
#, no-wrap
msgid "Multi-Part Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 108
# File: docs/master/http-client.md, line: 108
msgid "If you would like to send files as multi-part requests, you should call the `attach` method before making your request. This method accepts the name of the file and its contents. If needed, you may provide a third argument which will be considered the file's filename:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 112
# File: docs/master/http-client.md, line: 112
#, no-wrap
msgid ""
"    $response = Http::attach(\n"
"        'attachment', file_get_contents('photo.jpg'), 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 114
# File: docs/master/http-client.md, line: 114
msgid "Instead of passing the raw contents of a file, you may pass a stream resource:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 116
# File: docs/master/http-client.md, line: 116
#, no-wrap
msgid "    $photo = fopen('photo.jpg', 'r');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 120
# File: docs/master/http-client.md, line: 120
#, no-wrap
msgid ""
"    $response = Http::attach(\n"
"        'attachment', $photo, 'photo.jpg'\n"
"    )->post('http://example.com/attachments');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 122
# File: docs/master/http-client.md, line: 122
#, no-wrap
msgid "<a name=\"headers\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 122
# File: docs/master/http-client.md, line: 122
#, no-wrap
msgid "Headers"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 125
# File: docs/master/http-client.md, line: 125
msgid "Headers may be added to requests using the `withHeaders` method. This `withHeaders` method accepts an array of key / value pairs:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 132
# File: docs/master/http-client.md, line: 132
#, no-wrap
msgid ""
"    $response = Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"        'X-Second' => 'bar'\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 134
# File: docs/master/http-client.md, line: 134
msgid "You may use the `accept` method to specify the content type that your application is expecting in response to your request:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 136
# File: docs/master/http-client.md, line: 136
#, no-wrap
msgid "    $response = Http::accept('application/json')->get('http://example.com/users');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 138
# File: docs/master/http-client.md, line: 138
msgid "For convenience, you may use the `acceptJson` method to quickly specify that your application expects the `application/json` content type in response to your request:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 140
# File: docs/master/http-client.md, line: 140
#, no-wrap
msgid "    $response = Http::acceptJson()->get('http://example.com/users');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 142
# File: docs/master/http-client.md, line: 142
#, no-wrap
msgid "<a name=\"authentication\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 142
# File: docs/master/http-client.md, line: 142
#, no-wrap
msgid "Authentication"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 145
# File: docs/master/http-client.md, line: 145
msgid "You may specify basic and digest authentication credentials using the `withBasicAuth` and `withDigestAuth` methods, respectively:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 148
# File: docs/master/http-client.md, line: 148
#, no-wrap
msgid ""
"    // Basic authentication...\n"
"    $response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 151
# File: docs/master/http-client.md, line: 151
#, no-wrap
msgid ""
"    // Digest authentication...\n"
"    $response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 153
# File: docs/master/http-client.md, line: 153
#, no-wrap
msgid "<a name=\"bearer-tokens\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 153
# File: docs/master/http-client.md, line: 153
#, no-wrap
msgid "Bearer Tokens"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 156
# File: docs/master/http-client.md, line: 156
msgid "If you would like to quickly add a bearer token to the request's `Authorization` header, you may use the `withToken` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 158
# File: docs/master/http-client.md, line: 158
#, no-wrap
msgid "    $response = Http::withToken('token')->post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 160
# File: docs/master/http-client.md, line: 160
#, no-wrap
msgid "<a name=\"timeout\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 160
# File: docs/master/http-client.md, line: 160
#, no-wrap
msgid "Timeout"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 163
# File: docs/master/http-client.md, line: 163
msgid "The `timeout` method may be used to specify the maximum number of seconds to wait for a response:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 165
# File: docs/master/http-client.md, line: 165
#, no-wrap
msgid "    $response = Http::timeout(3)->get(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 167
# File: docs/master/http-client.md, line: 167
msgid "If the given timeout is exceeded, an instance of `Illuminate\\Http\\Client\\ConnectionException` will be thrown."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 169
# File: docs/master/http-client.md, line: 173
#, no-wrap
msgid "<a name=\"retries\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 169
# File: docs/master/http-client.md, line: 173
#, no-wrap
msgid "Retries"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 172
# File: docs/master/http-client.md, line: 176
msgid "If you would like HTTP client to automatically retry the request if a client or server error occurs, you may use the `retry` method. The `retry` method accepts the maximum number of times the request should be attempted and the number of milliseconds that Laravel should wait in between attempts:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 174
# File: docs/master/http-client.md, line: 178
#, no-wrap
msgid "    $response = Http::retry(3, 100)->post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 176
# File: docs/master/http-client.md, line: 180
msgid "If needed, you may pass a third argument to the `retry` method. The third argument should be a callable that determines if the retries should actually be attempted. For example, you may wish to only retry the request if the initial request encounters an `ConnectionException`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 180
# File: docs/master/http-client.md, line: 184
#, no-wrap
msgid ""
"    $response = Http::retry(3, 100, function ($exception) {\n"
"        return $exception instanceof ConnectionException;\n"
"    })->post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 182
msgid "If all of the requests fail, an instance of `Illuminate\\Http\\Client\\RequestException` will be thrown."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 184
# File: docs/master/http-client.md, line: 190
#, no-wrap
msgid "<a name=\"error-handling\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 184
# File: docs/master/http-client.md, line: 190
#, no-wrap
msgid "Error Handling"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 187
# File: docs/master/http-client.md, line: 193
msgid "Unlike Guzzle's default behavior, Laravel's HTTP client wrapper does not throw exceptions on client or server errors (`400` and `500` level responses from servers). You may determine if one of these errors was returned using the `successful`, `clientError`, or `serverError` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 190
# File: docs/master/http-client.md, line: 196
#, no-wrap
msgid ""
"    // Determine if the status code is >= 200 and < 300...\n"
"    $response->successful();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 193
# File: docs/master/http-client.md, line: 199
#, no-wrap
msgid ""
"    // Determine if the status code is >= 400...\n"
"    $response->failed();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 196
# File: docs/master/http-client.md, line: 202
#, no-wrap
msgid ""
"    // Determine if the response has a 400 level status code...\n"
"    $response->clientError();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 199
# File: docs/master/http-client.md, line: 205
#, no-wrap
msgid ""
"    // Determine if the response has a 500 level status code...\n"
"    $response->serverError();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 201
# File: docs/master/http-client.md, line: 207
#, no-wrap
msgid "<a name=\"throwing-exceptions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 201
# File: docs/master/http-client.md, line: 207
#, no-wrap
msgid "Throwing Exceptions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 204
# File: docs/master/http-client.md, line: 210
msgid "If you have a response instance and would like to throw an instance of `Illuminate\\Http\\Client\\RequestException` if the response status code indicates a client or server error, you may use the `throw` or `throwIf` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 206
# File: docs/8.x/http-client.md, line: 313
# File: docs/master/http-client.md, line: 212
# File: docs/master/http-client.md, line: 319
#, no-wrap
msgid "    $response = Http::post(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 209
# File: docs/master/http-client.md, line: 215
#, no-wrap
msgid ""
"    // Throw an exception if a client or server error occurred...\n"
"    $response->throw();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 212
# File: docs/master/http-client.md, line: 218
#, no-wrap
msgid ""
"    // Throw an exception if an error occurred and the given condition is true...\n"
"    $response->throwIf($condition);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 214
# File: docs/master/http-client.md, line: 220
#, no-wrap
msgid "    return $response['user']['id'];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 216
# File: docs/master/http-client.md, line: 222
msgid "The `Illuminate\\Http\\Client\\RequestException` instance has a public `$response` property which will allow you to inspect the returned response."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 218
# File: docs/master/http-client.md, line: 224
msgid "The `throw` method returns the response instance if no error occurred, allowing you to chain other operations onto the `throw` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 220
# File: docs/master/http-client.md, line: 226
#, no-wrap
msgid "    return Http::post(...)->throw()->json();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 222
# File: docs/master/http-client.md, line: 228
msgid "If you would like to perform some additional logic before the exception is thrown, you may pass a closure to the `throw` method. The exception will be thrown automatically after the closure is invoked, so you do not need to re-throw the exception from within the closure:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 226
# File: docs/master/http-client.md, line: 232
#, no-wrap
msgid ""
"    return Http::post(...)->throw(function ($response, $e) {\n"
"        //\n"
"    })->json();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 228
# File: docs/master/http-client.md, line: 234
#, no-wrap
msgid "<a name=\"guzzle-options\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 228
# File: docs/master/http-client.md, line: 234
#, no-wrap
msgid "Guzzle Options"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 231
# File: docs/master/http-client.md, line: 237
msgid "You may specify additional [Guzzle request options](http://docs.guzzlephp.org/en/stable/request-options.html) using the `withOptions` method. The `withOptions` method accepts an array of key / value pairs:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 235
# File: docs/master/http-client.md, line: 241
#, no-wrap
msgid ""
"    $response = Http::withOptions([\n"
"        'debug' => true,\n"
"    ])->get('http://example.com/users');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 237
# File: docs/master/http-client.md, line: 243
#, no-wrap
msgid "<a name=\"concurrent-requests\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 237
# File: docs/master/http-client.md, line: 243
#, no-wrap
msgid "Concurrent Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 240
# File: docs/master/http-client.md, line: 246
msgid "Sometimes, you may wish to make multiple HTTP requests concurrently. In other words, you want several requests to be dispatched at the same time instead of issuing the requests sequentially. This can lead to substantial performance improvements when interacting with slow HTTP APIs."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 242
# File: docs/master/http-client.md, line: 248
msgid "Thankfully, you may accomplish this using the `pool` method. The `pool` method accepts a closure which receives an `Illuminate\\Http\\Client\\Pool` instance, allowing you to easily add requests to the request pool for dispatching:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 245
# File: docs/8.x/http-client.md, line: 260
# File: docs/master/http-client.md, line: 251
# File: docs/master/http-client.md, line: 266
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Client\\Pool;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 251
# File: docs/master/http-client.md, line: 257
#, no-wrap
msgid ""
"    $responses = Http::pool(fn (Pool $pool) => [\n"
"        $pool->get('http://localhost/first'),\n"
"        $pool->get('http://localhost/second'),\n"
"        $pool->get('http://localhost/third'),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 255
# File: docs/master/http-client.md, line: 261
#, no-wrap
msgid ""
"    return $responses[0]->ok() &&\n"
"           $responses[1]->ok() &&\n"
"           $responses[2]->ok();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 257
# File: docs/master/http-client.md, line: 263
msgid "As you can see, each response instance can be accessed based on the order it was added to the pool. If you wish, you can name the requests using the `as` method, which allows you to access the corresponding responses by name:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 266
# File: docs/master/http-client.md, line: 272
#, no-wrap
msgid ""
"    $responses = Http::pool(fn (Pool $pool) => [\n"
"        $pool->as('first')->get('http://localhost/first'),\n"
"        $pool->as('second')->get('http://localhost/second'),\n"
"        $pool->as('third')->get('http://localhost/third'),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 268
# File: docs/master/http-client.md, line: 274
#, no-wrap
msgid "    return $responses['first']->ok();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 270
# File: docs/master/http-client.md, line: 276
#, no-wrap
msgid "<a name=\"macros\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 270
# File: docs/master/http-client.md, line: 276
#, no-wrap
msgid "Macros"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 273
# File: docs/master/http-client.md, line: 279
msgid "The Laravel HTTP client allows you to define \"macros\", which can serve as a fluent, expressive mechanism to configure common request paths and headers when interacting with services throughout your application. To get started, you may define the macro within the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""
#
#. type: Fenced code block (php)
# File: docs/8.x/http-client.md, line: 274
# File: docs/master/http-client.md, line: 280
#, no-wrap
msgid ""
"use Illuminate\\Support\\Facades\\Http;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Http::macro('github', function () {\n"
"        return Http::withHeaders([\n"
"            'X-Example' => 'example',\n"
"        ])->baseUrl('https://github.com');\n"
"    });\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 293
# File: docs/master/http-client.md, line: 299
msgid "Once your macro has been configured, you may invoke it from anywhere in your application to create a pending request with the specified configuration:"
msgstr ""
#
#. type: Fenced code block (php)
# File: docs/8.x/http-client.md, line: 294
# File: docs/master/http-client.md, line: 300
#, no-wrap
msgid "$response = Http::github()->get('/');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 299
# File: docs/master/http-client.md, line: 305
#, no-wrap
msgid "<a name=\"testing\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 299
# File: docs/master/http-client.md, line: 305
#, no-wrap
msgid "Testing"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 302
# File: docs/master/http-client.md, line: 308
msgid "Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's HTTP wrapper is no exception. The `Http` facade's `fake` method allows you to instruct the HTTP client to return stubbed / dummy responses when requests are made."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 304
# File: docs/master/http-client.md, line: 310
#, no-wrap
msgid "<a name=\"faking-responses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 304
# File: docs/master/http-client.md, line: 310
#, no-wrap
msgid "Faking Responses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 307
# File: docs/master/http-client.md, line: 313
msgid "For example, to instruct the HTTP client to return empty, `200` status code responses for every request, you may call the `fake` method with no arguments:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 311
# File: docs/8.x/http-client.md, line: 388
# File: docs/8.x/http-client.md, line: 409
# File: docs/8.x/http-client.md, line: 422
# File: docs/master/http-client.md, line: 317
# File: docs/master/http-client.md, line: 394
# File: docs/master/http-client.md, line: 415
# File: docs/master/http-client.md, line: 428
#, no-wrap
msgid "    Http::fake();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 315
# File: docs/master/http-client.md, line: 321
#, no-wrap
msgid "> {note} When faking requests, HTTP client middleware are not executed. You should define expectations for faked responses as if these middleware have run correctly.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 317
# File: docs/master/http-client.md, line: 323
#, no-wrap
msgid "<a name=\"faking-specific-urls\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 317
# File: docs/master/http-client.md, line: 323
#, no-wrap
msgid "Faking Specific URLs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 320
# File: docs/master/http-client.md, line: 326
msgid "Alternatively, you may pass an array to the `fake` method. The array's keys should represent URL patterns that you wish to fake and their associated responses. The `*` character may be used as a wildcard character. Any requests made to URLs that have not been faked will actually be executed. You may use the `Http` facade's `response` method to construct stub / fake responses for these endpoints:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 324
# File: docs/master/http-client.md, line: 330
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 328
# File: docs/master/http-client.md, line: 334
#, no-wrap
msgid ""
"        // Stub a string response for Google endpoints...\n"
"        'google.com/*' => Http::response('Hello World', 200, $headers),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 330
# File: docs/master/http-client.md, line: 336
msgid "If you would like to specify a fallback URL pattern that will stub all unmatched URLs, you may use a single `*` character:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 334
# File: docs/master/http-client.md, line: 340
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a JSON response for GitHub endpoints...\n"
"        'github.com/*' => Http::response(['foo' => 'bar'], 200, ['Headers']),\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 338
# File: docs/master/http-client.md, line: 344
#, no-wrap
msgid ""
"        // Stub a string response for all other endpoints...\n"
"        '*' => Http::response('Hello World', 200, ['Headers']),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 340
# File: docs/master/http-client.md, line: 346
#, no-wrap
msgid "<a name=\"faking-response-sequences\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 340
# File: docs/master/http-client.md, line: 346
#, no-wrap
msgid "Faking Response Sequences"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 343
# File: docs/master/http-client.md, line: 349
msgid "Sometimes you may need to specify that a single URL should return a series of fake responses in a specific order. You may accomplish this using the `Http::sequence` method to build the responses:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 351
# File: docs/master/http-client.md, line: 357
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->pushStatus(404),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 353
# File: docs/master/http-client.md, line: 359
msgid "When all of the responses in a response sequence have been consumed, any further requests will cause the response sequence to throw an exception. If you would like to specify a default response that should be returned when a sequence is empty, you may use the `whenEmpty` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 361
# File: docs/master/http-client.md, line: 367
#, no-wrap
msgid ""
"    Http::fake([\n"
"        // Stub a series of responses for GitHub endpoints...\n"
"        'github.com/*' => Http::sequence()\n"
"                                ->push('Hello World', 200)\n"
"                                ->push(['foo' => 'bar'], 200)\n"
"                                ->whenEmpty(Http::response()),\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 363
# File: docs/master/http-client.md, line: 369
msgid "If you would like to fake a sequence of responses but do not need to specify a specific URL pattern that should be faked, you may use the `Http::fakeSequence` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 367
# File: docs/master/http-client.md, line: 373
#, no-wrap
msgid ""
"    Http::fakeSequence()\n"
"            ->push('Hello World', 200)\n"
"            ->whenEmpty(Http::response());\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 369
# File: docs/master/http-client.md, line: 375
#, no-wrap
msgid "<a name=\"fake-callback\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/http-client.md, line: 369
# File: docs/master/http-client.md, line: 375
#, no-wrap
msgid "Fake Callback"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 372
# File: docs/master/http-client.md, line: 378
msgid "If you require more complicated logic to determine what responses to return for certain endpoints, you may pass a closure to the `fake` method. This closure will receive an instance of `Illuminate\\Http\\Client\\Request` and should return a response instance. Within your closure, you may perform whatever logic is necessary to determine what type of response to return:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 376
# File: docs/master/http-client.md, line: 382
#, no-wrap
msgid ""
"    Http::fake(function ($request) {\n"
"        return Http::response('Hello World', 200);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 378
# File: docs/master/http-client.md, line: 384
#, no-wrap
msgid "<a name=\"inspecting-requests\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/http-client.md, line: 378
# File: docs/master/http-client.md, line: 384
#, no-wrap
msgid "Inspecting Requests"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 381
# File: docs/master/http-client.md, line: 387
msgid "When faking responses, you may occasionally wish to inspect the requests the client receives in order to make sure your application is sending the correct data or headers. You may accomplish this by calling the `Http::assertSent` method after calling `Http::fake`."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 383
# File: docs/master/http-client.md, line: 389
msgid "The `assertSent` method accepts a closure which will receive an `Illuminate\\Http\\Client\\Request` instance and should return a boolean value indicating if the request matches your expectations. In order for the test to pass, at least one request must have been issued matching the given expectations:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 386
# File: docs/8.x/http-client.md, line: 407
# File: docs/master/http-client.md, line: 392
# File: docs/master/http-client.md, line: 413
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Client\\Request;\n"
"    use Illuminate\\Support\\Facades\\Http;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 395
# File: docs/master/http-client.md, line: 401
#, no-wrap
msgid ""
"    Http::withHeaders([\n"
"        'X-First' => 'foo',\n"
"    ])->post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 402
# File: docs/master/http-client.md, line: 408
#, no-wrap
msgid ""
"    Http::assertSent(function (Request $request) {\n"
"        return $request->hasHeader('X-First', 'foo') &&\n"
"               $request->url() == 'http://example.com/users' &&\n"
"               $request['name'] == 'Taylor' &&\n"
"               $request['role'] == 'Developer';\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 404
# File: docs/master/http-client.md, line: 410
msgid "If needed, you may assert that a specific request was not sent using the `assertNotSent` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 414
# File: docs/master/http-client.md, line: 420
#, no-wrap
msgid ""
"    Http::post('http://example.com/users', [\n"
"        'name' => 'Taylor',\n"
"        'role' => 'Developer',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 418
# File: docs/master/http-client.md, line: 424
#, no-wrap
msgid ""
"    Http::assertNotSent(function (Request $request) {\n"
"        return $request->url() === 'http://example.com/posts';\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 420
# File: docs/master/http-client.md, line: 426
msgid "Or, you may use the `assertNothingSent` method to assert that no requests were sent during the test:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 424
# File: docs/master/http-client.md, line: 430
#, no-wrap
msgid "    Http::assertNothingSent();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 426
# File: docs/master/http-client.md, line: 432
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/http-client.md, line: 426
# File: docs/master/http-client.md, line: 432
#, no-wrap
msgid "Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 429
# File: docs/master/http-client.md, line: 435
msgid "Laravel fires three events during the process of sending HTTP requests. The `RequestSending` event is fired prior to a request being sent, while the `ResponseReceived` event is fired after a response is received for a given request. The `ConnectionFailed` event is fired if no response is received for a given request."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 431
# File: docs/master/http-client.md, line: 437
msgid "The `RequestSending` and `ConnectionFailed` events both contain a public `$request` property that you may use to inspect the `Illuminate\\Http\\Client\\Request` instance. Likewise, the `ResponseReceived` event contains a `$request` property as well as a `$response` property which may be used to inspect the `Illuminate\\Http\\Client\\Response` instance. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/http-client.md, line: 447
# File: docs/master/http-client.md, line: 453
#, no-wrap
msgid ""
"    /**\n"
"     * The event listener mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $listen = [\n"
"        'Illuminate\\Http\\Client\\Events\\RequestSending' => [\n"
"            'App\\Listeners\\LogRequestSending',\n"
"        ],\n"
"        'Illuminate\\Http\\Client\\Events\\ResponseReceived' => [\n"
"            'App\\Listeners\\LogResponseReceived',\n"
"        ],\n"
"        'Illuminate\\Http\\Client\\Events\\ConnectionFailed' => [\n"
"            'App\\Listeners\\LogConnectionFailed',\n"
"        ],\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/http-client.md, line: 169
msgid "You may specify the maximum number of seconds to wait while trying to connect to a server using the `connectTimeout` method:"
msgstr ""
#
#. type: Plain text
# File: docs/master/http-client.md, line: 171
#, no-wrap
msgid "    $response = Http::connectTimeout(3)->get(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/http-client.md, line: 186
msgid "If all of the requests fail, an instance of `Illuminate\\Http\\Client\\RequestException` will be thrown. If you would like to disable this behavior, you may provide a `throw` argument with a value of `false`. When disabled, the last response received by the client will be returned after all retries have been attempted:"
msgstr ""
#
#. type: Plain text
# File: docs/master/http-client.md, line: 188
#, no-wrap
msgid "    $response = Http::retry(3, 100, throw: false)->post(...);\n"
msgstr ""
