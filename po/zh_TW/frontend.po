msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/frontend.pot\n"
"X-Crowdin-File-ID: 176\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-01-25 07:03\n"

#: docs/9.x/frontend.md:block 1 (header)
msgid "Frontend"
msgstr "前端"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Using PHP](#using-php)"
msgstr "[使用 PHP](#using-php)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[PHP & Blade](#php-and-blade)"
msgstr "[PHP 與 Blade](#php-and-blade)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Livewire](#livewire)"
msgstr "[Livewire](#livewire)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Starter Kits](#php-starter-kits)"
msgstr "[入門套件](#php-starter-kits)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Using Vue / React](#using-vue-react)"
msgstr "[使用 Vue 或 React](#using-vue-react)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Inertia](#inertia)"
msgstr "[Inertia](#inertia)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Starter Kits](#inertia-starter-kits)"
msgstr "[入門套件](#inertia-starter-kits)"

#: docs/9.x/frontend.md:block 2 (unordered list)
msgid "[Bundling Assets](#bundling-assets)"
msgstr "[打包資源](#bundling-assets)"

#: docs/9.x/frontend.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/9.x/frontend.md:block 5 (paragraph)
msgid "Laravel is a backend framework that provides all of the features you need to build modern web applications, such as [routing](/docs/{{version}}/routing), [validation](/docs/{{version}}/validation), [caching](/docs/{{version}}/cache), [queues](/docs/{{version}}/queues), [file storage](/docs/{{version}}/filesystem), and more. However, we believe it's important to offer developers a beautiful full-stack experience, including powerful approaches for building your application's frontend."
msgstr "Laravel 是一個後端框架，提供了用來製作現代網頁 App 所需的所有功能。例如 [路由](/docs/{{version}}/routing)、[表單驗證](/docs/{{version}}/validation)、[快取](/docs/{{version}}/cache)、[佇列](/docs/{{version}}/queues)、[檔案儲存](/docs/{{version}}/filesystem)……等。不過，我們相信，為開發者提供美好的全端開發經驗是很重要的。所謂提供美好的全端開發經驗也包含要提供一種強大的方法讓開發者製作網站前端。"

#: docs/9.x/frontend.md:block 6 (paragraph)
msgid "There are two primary ways to tackle frontend development when building an application with Laravel, and which approach you choose is determined by whether you would like to build your frontend by leveraging PHP or by using JavaScript frameworks such as Vue and React. We'll discuss both of these options below so that you can make an informed decision regarding the best approach to frontend development for your application."
msgstr "在使用 Laravel 製作網站時，主要有兩種的前端開發方式。至於要選擇哪種方式，則取決於你是要使用 PHP 還是使用像 Vue 或 React 這樣的 JavaScript 框架來製作前端。我們稍後會來討論這幾種方式，好讓你可以決定哪種前端開發方式最適合。"

#: docs/9.x/frontend.md:block 8 (header)
msgid "Using PHP"
msgstr "使用 PHP"

#: docs/9.x/frontend.md:block 10 (header)
msgid "PHP & Blade"
msgstr "PHP 與 Blade"

#: docs/9.x/frontend.md:block 11 (paragraph)
msgid "In the past, most PHP applications rendered HTML to the browser using simple HTML templates interspersed with PHP `echo` statements which render data that was retrieved from a database during the request:"
msgstr "以前，大多數的 PHP 網站會在 Request 中使用簡單的 HTML 樣板，並在中間穿插一些 PHP 的 `echo` 陳述式來轉譯從資料庫中取出的資料，最終轉譯出 HTML 給瀏覽器："

#: docs/9.x/frontend.md:block 12 (code)
msgid "<div>\n"
"    <?php foreach ($users as $user): ?>\n"
"        Hello, <?php echo $user->name; ?> <br />\n"
"    <?php endforeach; ?>\n"
"</div>\n"
msgstr "<div>\n"
"    <?php foreach ($users as $user): ?>\n"
"        Hello, <?php echo $user->name; ?> <br />\n"
"    <?php endforeach; ?>\n"
"</div>\n"

#: docs/9.x/frontend.md:block 13 (paragraph)
msgid "In Laravel, this approach to rendering HTML can still be achieved using [views](/docs/{{version}}/views) and [Blade](/docs/{{version}}/blade). Blade is an extremely light-weight templating language that provides convenient, short syntax for displaying data, iterating over data, and more:"
msgstr "在 Laravel 中，我們還是可以通過 [View] 與 [Blade] 做到這種轉譯 HTML 的方法。Blade 是一種極為輕巧的樣板語言，讓我們能方便地使用簡短的語法來顯示資料、迭代資料……等："

#: docs/9.x/frontend.md:block 14 (code)
msgid "<div>\n"
"    @foreach ($users as $user)\n"
"        Hello, {{ $user->name }} <br />\n"
"    @endforeach\n"
"</div>\n"
msgstr "<div>\n"
"    @foreach ($users as $user)\n"
"        Hello, {{ $user->name }} <br />\n"
"    @endforeach\n"
"</div>\n"

#: docs/9.x/frontend.md:block 15 (paragraph)
msgid "When building applications in this fashion, form submissions and other page interactions typically receive an entirely new HTML document from the server and the entire page is re-rendered by the browser. Even today, many applications may be perfectly suited to having their frontends constructed in this way using simple Blade templates."
msgstr "使用這種方式製作網站時，若進行送出表單或其他的網頁互動，通常會從伺服器端收到一份全新的 HTML 文件，然後瀏覽器會重新轉譯這份 HTML。就算到了今天，使用簡單的 Blade 樣板來製作前端依然適用於許多的網站。"

#: docs/9.x/frontend.md:block 17 (header)
msgid "Growing Expectations"
msgstr "持續增加的期待"

#: docs/9.x/frontend.md:block 18 (paragraph)
msgid "However, as user expectations regarding web applications have matured, many developers have found the need to build more dynamic frontends with interactions that feel more polished. In light of this, some developers choose to begin building their application's frontend using JavaScript frameworks such as Vue and React."
msgstr "不過，使用者對於 Web App 的期待增加了，而許多開發人員也注意到必須製作互動起來更精緻的動態前端。因此，有些開發人員選擇使用如 Vue 或 React 這樣的 JavaScript 框架來製作網頁前端。"

#: docs/9.x/frontend.md:block 19 (paragraph)
msgid "Others, preferring to stick with the backend language they are comfortable with, have developed solutions that allow the construction of modern web application UIs while still primarily utilizing their backend language of choice. For example, in the [Rails](https://rubyonrails.org/) ecosystem, this has spurred the creation of libraries such as [Turbo](https://turbo.hotwired.dev/) [Hotwire](https://hotwired.dev/), and [Stimulus](https://stimulus.hotwired.dev/)."
msgstr "而其他想繼續使用慣用後端語言的開發者則開發出了一些解決方案，能讓我們在製作現代化 Web APP 的 UI 時，使用我們想用的後端語言來完成大部分的工作。舉例來說，在 [Rails](https://rubyonrails.org/) 生態圈中，就有如 [Turbo](https://turbo.hotwired.dev/) [Hotwire](https://hotwired.dev/) 或 [Stimulus](https://stimulus.hotwired.dev/) 等的套件。"

#: docs/9.x/frontend.md:block 20 (paragraph)
msgid "Within the Laravel ecosystem, the need to create modern, dynamic frontends by primarily using PHP has led to the creation of [Laravel Livewire](https://laravel-livewire.com) and [Alpine.js](https://alpinejs.dev/)."
msgstr "在 Laravel 的生態圈中，因為想使用 PHP 作為主要語言來製作現代化、動態的前端，因此就誕生了 [Laravel Livewire](https://laravel-livewire.com) 與 [Alpine.js](https://alpinejs.dev/)。"

#: docs/9.x/frontend.md:block 22 (header)
msgid "Livewire"
msgstr "Livewire"

#: docs/9.x/frontend.md:block 23 (paragraph)
msgid "[Laravel Livewire](https://laravel-livewire.com) is a framework for building Laravel powered frontends that feel dynamic, modern, and alive just like frontends built with modern JavaScript frameworks like Vue and React."
msgstr "[Laravel Livewire](https://laravel-livewire.com) 是一個框架，可以通過 Laravel 來製作前端，而且用 Livewire 製作出來的前端非常動態、現代化，就像是用 Vue 或 React 等現代 JavaScript 框架製作出來的一樣。"

#: docs/9.x/frontend.md:block 24 (paragraph)
msgid "When using Livewire, you will create Livewire \"components\" that render a discrete portion of your UI and expose methods and data that can be invoked and interacted with from your application's frontend. For example, a simple \"Counter\" component might look like the following:"
msgstr "使用 Livewire 時，我們可以建立一個 Livewire 的「元件」來轉譯 UI 中的某個抽象部分，並暴露 (Expose) 出一些網站前端中可叫用或互動的方法或資料。舉例來說，下面是一個簡單的「^[Counter](計數器)」元件："

#: docs/9.x/frontend.md:block 25 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Livewire;\n\n"
"use Livewire\\Component;\n\n"
"class Counter extends Component\n"
"{\n"
"    public $count = 0;\n\n"
"    public function increment()\n"
"    {\n"
"        $this->count++;\n"
"    }\n\n"
"    public function render()\n"
"    {\n"
"        return view('livewire.counter');\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Livewire;\n\n"
"use Livewire\\Component;\n\n"
"class Counter extends Component\n"
"{\n"
"    public $count = 0;\n\n"
"    public function increment()\n"
"    {\n"
"        $this->count++;\n"
"    }\n\n"
"    public function render()\n"
"    {\n"
"        return view('livewire.counter');\n"
"    }\n"
"}\n"

#: docs/9.x/frontend.md:block 26 (paragraph)
msgid "And, the corresponding template for the counter would be written like so:"
msgstr "接著，這個 Counter 對應的樣板可以像這樣寫："

#: docs/9.x/frontend.md:block 27 (code)
msgid "<div>\n"
"    <button wire:click=\"increment\">+</button>\n"
"    <h1>{{ $count }}</h1>\n"
"</div>\n"
msgstr "<div>\n"
"    <button wire:click=\"increment\">+</button>\n"
"    <h1>{{ $count }}</h1>\n"
"</div>\n"

#: docs/9.x/frontend.md:block 28 (paragraph)
msgid "As you can see, Livewire enables you to write new HTML attributes such as `wire:click` that connect your Laravel application's frontend and backend. In addition, you can render your component's current state using simple Blade expressions."
msgstr "就像這樣，使用 Livewire，就可以讓我們使用像 `wire:click` 這樣的新 HTML 屬性來將網站前端與 Laravel 後端連結起來。而且，我們只要使用簡單的 Blade 運算式，就能將元件目前的狀態轉譯出來。"

#: docs/9.x/frontend.md:block 29 (paragraph)
msgid "For many, Livewire has revolutionized frontend development with Laravel, allowing them to stay within the comfort of Laravel while constructing modern, dynamic web applications. Typically, developers using Livewire will also utilize [Alpine.js](https://alpinejs.dev/) to \"sprinkle\" JavaScript onto their frontend only where it is needed, such as in order to render a dialog window."
msgstr "對許多人來說，Livewire 徹底改變了 Laravel 的前端開發，讓我們能待在舒服的 Laravel 內製作現代化的動態 Web App。一般來說，使用 Livewire 的開發人員也會使用 [Alpine.js](https://alpinejs.dev/) 來在一些真的有需要用到 JavaScript 的地方「點綴」上一點 JavaScript，例如要轉譯對話方塊視窗等。"

#: docs/9.x/frontend.md:block 30 (paragraph)
msgid "If you're new to Laravel, we recommend getting familiar with the basic usage of [views](/docs/{{version}}/views) and [Blade](/docs/{{version}}/blade). Then, consult the official [Laravel Livewire documentation](https://laravel-livewire.com/docs) to learn how to take your application to the next level with interactive Livewire components."
msgstr "若讀者是 Laravel 初學者，我們建議可以先熟悉 [View](/docs/{{version}}/views) 與 [Blade](/docs/{{version}}/blade) 的基礎用法。然後，請參考官方的 [Laravel Livewire 說明文件](https://laravel-livewire.com/docs)來瞭解如何使用可互動的 Livewire 元件讓你的網站更好用。"

#: docs/9.x/frontend.md:block 32 (header)
msgid "Starter Kits"
msgstr "入門套件"

#: docs/9.x/frontend.md:block 33 (paragraph)
msgid "If you would like to build your frontend using PHP and Livewire, you can leverage our Breeze or Jetstream [starter kits](/docs/{{version}}/starter-kits) to jump-start your application's development. Both of these starter kits scaffold your application's backend and frontend authentication flow using [Blade](/docs/{{version}}/blade) and [Tailwind](https://tailwindcss.com) so that you can simply start building your next big idea."
msgstr "若想使用 PHP 與 Livewire 來製作前端，可參考我們的 Breeze 與 Jetstream [入門套件](/docs/{{version}}/starter-kits)以快速開始開發網站。這兩個入門套件都使用 [Blade] 與 [Tailwind] 來 Scaffold 網站的前後端登入流程，這樣一來你就能直接開始製作你的 Idea。"

#: docs/9.x/frontend.md:block 35 (header)
msgid "Using Vue / React"
msgstr "使用 Vue 或 React"

#: docs/9.x/frontend.md:block 36 (paragraph)
msgid "Although it's possible to build modern frontends using Laravel and Livewire, many developers still prefer to leverage the power of a JavaScript framework like Vue or React. This allows developers to take advantage of the rich ecosystem of JavaScript packages and tools available via NPM."
msgstr "雖然，也是可以使用 Laravel 與 Livewire 來製作現代化的前端，但許多開發者還是偏好使用如 Vue 或 React 等的 JavaScript 框架。這樣，開發者就能享受到 NPM 生態圈上眾多的 JavaScript 套件與工具。"

#: docs/9.x/frontend.md:block 37 (paragraph)
msgid "However, without additional tooling, pairing Laravel with Vue or React would leave us needing to solve a variety of complicated problems such as client-side routing, data hydration, and authentication. Client-side routing is often simplified by using opinionated Vue / React frameworks such as [Nuxt](https://nuxtjs.org/) and [Next](https://nextjs.org/); however, data hydration and authentication remain complicated and cumbersome problems to solve when pairing a backend framework like Laravel with these frontend frameworks."
msgstr "不過，若沒有額外工具，要把 Laravel 跟 Vue 或 React 搭配在一起使用會需要處理各種複雜的問題。如在用戶端進行路由、填入資料 (Hydration)、身份認證等。使用一些如 [Nuxt](https://nuxtjs.org/) 或 [Next](https://nextjs.org/) 等常用的 Vue / React 框架通常可簡化用戶端路由。不過，要讓這些前端框架與 Laravel 這樣的後端框架搭配使用時，要填入資料或是身份認證等的問題還是一樣複雜而且是個棘手的問題。"

#: docs/9.x/frontend.md:block 38 (paragraph)
msgid "In addition, developers are left maintaining two separate code repositories, often needing to coordinate maintenance, releases, and deployments across both repositories. While these problems are not insurmountable, we don't believe it's a productive or enjoyable way to develop applications."
msgstr "而且，一些開發者最後還必須維護兩個分開的 Repository，而且還常常需要在兩個 Repository 間互相協調其維護、Release、或開發。但這些問題並不是無解的，我們認為這種開發網站的方式並不是一種有效率且可享受的方法。"

#: docs/9.x/frontend.md:block 40 (header)
msgid "Inertia"
msgstr "Inertia"

#: docs/9.x/frontend.md:block 41 (paragraph)
msgid "Thankfully, Laravel offers the best of both worlds. [Inertia](https://inertiajs.com) bridges the gap between your Laravel application and your modern Vue or React frontend, allowing you to build full-fledged, modern frontends using Vue or React while leveraging Laravel routes and controllers for routing, data hydration, and authentication — all within a single code repository. With this approach, you can enjoy the full power of both Laravel and Vue / React without crippling the capabilities of either tool."
msgstr "幸好，Laravel 為前後端都提供了最好的解決方案。使用 [Inertia](https://inertiajs.com) ，就能將 Laravel 程式與你的現代化 Vue 或 React 前端連結起來，讓我們能在使用供 Laravel 來路由到 Controller、填充資料、進行身份認證等的同時，還能使用 Vue 或 React 來製作成熟的現代化前端。用這種方式的話，我們就能同時享受到 Laravel 與 Vue / React 的完整功能，而不前後端框架的任何功能妥協。"

#: docs/9.x/frontend.md:block 42 (paragraph)
msgid "After installing Inertia into your Laravel application, you will write routes and controllers like normal. However, instead of returning a Blade template from your controller, you will return an Inertia page:"
msgstr "將 Inertia 安裝到 Laravel 專案後，我們就可以像平常一樣寫 Route 與 Controller。不過，在這裡我們不在 Controller 內回傳 Blade 樣板，而是回傳 Inertia 頁面："

#: docs/9.x/frontend.md:block 43 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Inertia\\Inertia;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for a given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Inertia\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        return Inertia::render('Users/Profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Inertia\\Inertia;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for a given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Inertia\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        return Inertia::render('Users/Profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/9.x/frontend.md:block 44 (paragraph)
msgid "An Inertia page corresponds to a Vue or React component, typically stored within the `resources/js/Pages` directory of your application. The data given to the page via the `Inertia::render` method will be used to hydrate the \"props\" of the page component:"
msgstr "Inertia 頁面對應到 Vue 或 React 元件，這些元件通常存放在專案的 `resources/js/Pages` 目錄下。使用 `Inertia::render` 方法傳給頁面的資料會用來填入該頁面元件中的「^[props](屬性)」："

#: docs/9.x/frontend.md:block 45 (code)
msgid "<script setup>\n"
"import Layout from '@/Layouts/Authenticated.vue';\n"
"import { Head } from '@inertiajs/inertia-vue3';\n\n"
"const props = defineProps(['user']);\n"
"</script>\n\n"
"<template>\n"
"    <Head title=\"User Profile\" />\n\n"
"    <Layout>\n"
"        <template #header>\n"
"            <h2 class=\"font-semibold text-xl text-gray-800 leading-tight\">\n"
"                Profile\n"
"            </h2>\n"
"        </template>\n\n"
"        <div class=\"py-12\">\n"
"            Hello, {{ user.name }}\n"
"        </div>\n"
"    </Layout>\n"
"</template>\n"
msgstr "<script setup>\n"
"import Layout from '@/Layouts/Authenticated.vue';\n"
"import { Head } from '@inertiajs/inertia-vue3';\n\n"
"const props = defineProps(['user']);\n"
"</script>\n\n"
"<template>\n"
"    <Head title=\"User Profile\" />\n\n"
"    <Layout>\n"
"        <template #header>\n"
"            <h2 class=\"font-semibold text-xl text-gray-800 leading-tight\">\n"
"                Profile\n"
"            </h2>\n"
"        </template>\n\n"
"        <div class=\"py-12\">\n"
"            Hello, {{ user.name }}\n"
"        </div>\n"
"    </Layout>\n"
"</template>\n"

#: docs/9.x/frontend.md:block 46 (paragraph)
msgid "As you can see, Inertia allows you to leverage the full power of Vue or React when building your frontend, while providing a light-weight bridge between your Laravel powered backend and your JavaScript powered frontend."
msgstr "就像這樣，因為 Inertia 在 Laravel 後端與 JavaScript 前端間搭起了一座輕量的橋樑，因此我們在製作前端時就能享受到 Vue 與 React 的完整功能。"

#: docs/9.x/frontend.md:block 47 (header)
msgid "Server-Side Rendering"
msgstr "伺服器端轉譯"

#: docs/9.x/frontend.md:block 48 (paragraph)
msgid "If you're concerned about diving into Inertia because your application requires server-side rendering, don't worry. Inertia offers [server-side rendering support](https://inertiajs.com/server-side-rendering). And, when deploying your application via [Laravel Forge](https://forge.laravel.com), it's a breeze to ensure that Inertia's server-side rendering process is always running."
msgstr "若因為網站需要伺服器端轉譯而擔心無法使用 Inertia 的話，請別擔心。Inertia 有提供[伺服器端轉譯支援](https://inertiajs.com/server-side-rendering)。而且，在使用 [Laravel Forge](https://forge.laravel.com) 部署網站時，要確保 Inertia 的 SSR 處理程序有持續執行就跟呼吸一樣輕鬆。"

#: docs/9.x/frontend.md:block 51 (paragraph)
msgid "If you would like to build your frontend using Inertia and Vue / React, you can leverage our Breeze or Jetstream [starter kits](/docs/{{version}}/starter-kits#breeze-and-inertia) to jump-start your application's development. Both of these starter kits scaffold your application's backend and frontend authentication flow using Inertia, Vue / React, [Tailwind](https://tailwindcss.com), and [Vite](https://vitejs.dev) so that you can start building your next big idea."
msgstr "若想使用 Vue / React 來製作前端，可參考我們的 Breeze 與 Jetstream [入門套件](/docs/{{version}}/starter-kits#breeze-and-inertia)以快速開始開發網站。這兩個入門套件都使用 Inertia、Vue / React、[Tailwind](https://tailwindcss.com)、與 [Vite](https://vitejs.dev) 來 Scaffold 網站的前後端登入流程，這樣一來你就能直接開始製作你的 Idea。"

#: docs/9.x/frontend.md:block 53 (header)
msgid "Bundling Assets"
msgstr "打包資源"

#: docs/9.x/frontend.md:block 54 (paragraph)
msgid "Regardless of whether you choose to develop your frontend using Blade and Livewire or Vue / React and Inertia, you will likely need to bundle your application's CSS into production ready assets. Of course, if you choose to build your application's frontend with Vue or React, you will also need to bundle your components into browser ready JavaScript assets."
msgstr "無論讀者選擇使用 Blade 與 Livewire 來開發前端，還是使用 Vue / React 與 Inertia，通常都需要將專案的 CSS 打包成可在線上環境使用的素材。當然，若讀者選擇使用 Vue 或 React 來製作網站前端，那麼還需要將這些元件打包成瀏覽器可使用的 JavaScript 素材。"

#: docs/9.x/frontend.md:block 55 (paragraph)
msgid "By default, Laravel utilizes [Vite](https://vitejs.dev) to bundle your assets. Vite provides lightning-fast build times and near instantaneous Hot Module Replacement (HMR) during local development. In all new Laravel applications, including those using our [starter kits](/docs/{{version}}/starter-kits), you will find a `vite.config.js` file that loads our light-weight Laravel Vite plugin that makes Vite a joy to use with Laravel applications."
msgstr "預設情況下，Laravel 使用 [Vite](https://vitejs.dev) 來打包資源。Vite 在開發環境下提供了快速的建置，以及幾乎即時的 HMR (熱模組取代，Hot Module Replacement)。包含使用我們的[入門套件](/docs/{{version}}/starter-kits)在內，所有新安裝的 Laravel 專案中都有個 `vite.config.js` 檔案，其中載入了我們的輕型 Laravel Vite 外掛。Laravel 的 Vite 外掛能讓我們非常容易的將 Vite 搭配 Laravel 專案使用。"

#: docs/9.x/frontend.md:block 56 (paragraph)
msgid "The fastest way to get started with Laravel and Vite is by beginning your application's development using [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze), our simplest starter kit that jump-starts your application by providing frontend and backend authentication scaffolding."
msgstr "要開始使用 Laravel 與 Vite，最快的方法就是使用 [Laravel Breeze](/docs/{{version}}/starter-kits#laravel-breeze) 來開始開發專案。Laravel Breeze 是我們最簡單的入門套件，提供了身份認證前後端 Scaffolding，能讓我們直接開始開發專案。"

#: docs/9.x/frontend.md:block 57 (quote)
msgid "**Note** For more detailed documentation on utilizing Vite with Laravel, please see our [dedicated documentation on bundling and compiling your assets](/docs/{{version}}/vite)."
msgstr "**Note** 更多在 Laravel 中使用 Vite 的詳細說明文件，請參考有關[打包與編譯素材的說明文件](/docs/{{version}}/vite)。"

#: docs/master/frontend.md:block 43 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Controllers;\n\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\User;\n"
"use Inertia\\Inertia;\n"
"use Inertia\\Response;\n\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for a given user.\n"
"     */\n"
"    public function show(string $id): Response\n"
"    {\n"
"        return Inertia::render('Users/Profile', [\n"
"            'user' => User::findOrFail($id)\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr ""

