#
msgid ""
msgstr ""

#: docs/10.x/configuration.md:block 1 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Environment Configuration](#environment-configuration)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Environment Variable Types](#environment-variable-types)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Retrieving Environment Configuration](#retrieving-environment-configuration)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Determining the Current Environment](#determining-the-current-environment)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Encrypting Environment Files](#encrypting-environment-files)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Accessing Configuration Values](#accessing-configuration-values)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Configuration Caching](#configuration-caching)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Debug Mode](#debug-mode)"
msgstr ""

#: docs/10.x/configuration.md:block 2 (unordered list)
msgid "[Maintenance Mode](#maintenance-mode)"
msgstr ""

#: docs/10.x/configuration.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/configuration.md:block 5 (paragraph)
msgid "All of the configuration files for the Laravel framework are stored in the `config` directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you."
msgstr ""

#: docs/10.x/configuration.md:block 6 (paragraph)
msgid "These configuration files allow you to configure things like your database connection information, your mail server information, as well as various other core configuration values such as your application timezone and encryption key."
msgstr ""

#: docs/10.x/configuration.md:block 8 (header)
msgid "Application Overview"
msgstr ""

#: docs/10.x/configuration.md:block 9 (paragraph)
msgid "In a hurry? You can get a quick overview of your application's configuration, drivers, and environment via the `about` Artisan command:"
msgstr ""

#: docs/10.x/configuration.md:block 10 (code)
msgid "php artisan about\n"
msgstr ""

#: docs/10.x/configuration.md:block 11 (paragraph)
msgid "If you're only interested in a particular section of the application overview output, you may filter for that section using the `--only` option:"
msgstr ""

#: docs/10.x/configuration.md:block 12 (code)
msgid "php artisan about --only=environment\n"
msgstr ""

#: docs/10.x/configuration.md:block 13 (paragraph)
msgid "Or, to explore a specific configuration file's values in detail, you may use the `config:show` Artisan command:"
msgstr ""

#: docs/10.x/configuration.md:block 14 (code)
msgid "php artisan config:show database\n"
msgstr ""

#: docs/10.x/configuration.md:block 16 (header)
msgid "Environment Configuration"
msgstr ""

#: docs/10.x/configuration.md:block 17 (paragraph)
msgid "It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different cache driver locally than you do on your production server."
msgstr ""

#: docs/10.x/configuration.md:block 18 (paragraph)
msgid "To make this a cinch, Laravel utilizes the [DotEnv](https://github.com/vlucas/phpdotenv) PHP library. In a fresh Laravel installation, the root directory of your application will contain a `.env.example` file that defines many common environment variables. During the Laravel installation process, this file will automatically be copied to `.env`."
msgstr ""

#: docs/10.x/configuration.md:block 19 (paragraph)
msgid "Laravel's default `.env` file contains some common configuration values that may differ based on whether your application is running locally or on a production web server. These values are then retrieved from various Laravel configuration files within the `config` directory using Laravel's `env` function."
msgstr ""

#: docs/10.x/configuration.md:block 20 (paragraph)
msgid "If you are developing with a team, you may wish to continue including a `.env.example` file with your application. By putting placeholder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application."
msgstr ""

#: docs/10.x/configuration.md:block 21 (quote)
msgid "[!NOTE] Any variable in your `.env` file can be overridden by external environment variables such as server-level or system-level environment variables."
msgstr ""

#: docs/10.x/configuration.md:block 23 (header)
msgid "Environment File Security"
msgstr ""

#: docs/10.x/configuration.md:block 24 (paragraph)
msgid "Your `.env` file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed."
msgstr ""

#: docs/10.x/configuration.md:block 25 (paragraph)
msgid "However, it is possible to encrypt your environment file using Laravel's built-in [environment encryption](#encrypting-environment-files). Encrypted environment files may be placed in source control safely."
msgstr ""

#: docs/10.x/configuration.md:block 27 (header)
msgid "Additional Environment Files"
msgstr ""

#: docs/10.x/configuration.md:block 28 (paragraph)
msgid "Before loading your application's environment variables, Laravel determines if an `APP_ENV` environment variable has been externally provided or if the `--env` CLI argument has been specified. If so, Laravel will attempt to load an `.env.[APP_ENV]` file if it exists. If it does not exist, the default `.env` file will be loaded."
msgstr ""

#: docs/10.x/configuration.md:block 30 (header)
msgid "Environment Variable Types"
msgstr ""

#: docs/10.x/configuration.md:block 31 (paragraph)
msgid "All variables in your `.env` files are typically parsed as strings, so some reserved values have been created to allow you to return a wider range of types from the `env()` function:"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "`.env` Value"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "`env()` Value"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "true"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(bool) true"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(true)"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "false"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(bool) false"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(false)"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "empty"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(string) ''"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(empty)"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "null"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(null) null"
msgstr ""

#: docs/10.x/configuration.md:block 32 (table)
msgid "(null)"
msgstr ""

#: docs/10.x/configuration.md:block 33 (paragraph)
msgid "If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes:"
msgstr ""

#: docs/10.x/configuration.md:block 34 (code)
msgid "APP_NAME=\"My Application\"\n"
msgstr ""

#: docs/10.x/configuration.md:block 36 (header)
msgid "Retrieving Environment Configuration"
msgstr ""

#: docs/10.x/configuration.md:block 37 (paragraph)
msgid "All of the variables listed in the `.env` file will be loaded into the `$_ENV` PHP super-global when your application receives a request. However, you may use the `env` function to retrieve values from these variables in your configuration files. In fact, if you review the Laravel configuration files, you will notice many of the options are already using this function:"
msgstr ""

#: docs/10.x/configuration.md:block 38 (code)
msgid "'debug' => env('APP_DEBUG', false),\n"
msgstr ""

#: docs/10.x/configuration.md:block 39 (paragraph)
msgid "The second value passed to the `env` function is the \"default value\". This value will be returned if no environment variable exists for the given key."
msgstr ""

#: docs/10.x/configuration.md:block 41 (header)
msgid "Determining the Current Environment"
msgstr ""

#: docs/10.x/configuration.md:block 42 (paragraph)
msgid "The current application environment is determined via the `APP_ENV` variable from your `.env` file. You may access this value via the `environment` method on the `App` [facade](/docs/{{version}}/facades):"
msgstr ""

#: docs/10.x/configuration.md:block 43 (code)
msgid ""
"use Illuminate\\Support\\Facades\\App;\n"
"\n"
"$environment = App::environment();\n"
msgstr ""

#: docs/10.x/configuration.md:block 44 (paragraph)
msgid "You may also pass arguments to the `environment` method to determine if the environment matches a given value. The method will return `true` if the environment matches any of the given values:"
msgstr ""

#: docs/10.x/configuration.md:block 45 (code)
msgid ""
"if (App::environment('local')) {\n"
"    // The environment is local\n"
"}\n"
"\n"
"if (App::environment(['local', 'staging'])) {\n"
"    // The environment is either local OR staging...\n"
"}\n"
msgstr ""

#: docs/10.x/configuration.md:block 46 (quote)
msgid "[!NOTE] The current application environment detection can be overridden by defining a server-level `APP_ENV` environment variable."
msgstr ""

#: docs/10.x/configuration.md:block 48 (header)
msgid "Encrypting Environment Files"
msgstr ""

#: docs/10.x/configuration.md:block 49 (paragraph)
msgid "Unencrypted environment files should never be stored in source control. However, Laravel allows you to encrypt your environment files so that they may safely be added to source control with the rest of your application."
msgstr ""

#: docs/10.x/configuration.md:block 51 (header)
msgid "Encryption"
msgstr ""

#: docs/10.x/configuration.md:block 52 (paragraph)
msgid "To encrypt an environment file, you may use the `env:encrypt` command:"
msgstr ""

#: docs/10.x/configuration.md:block 53 (code)
msgid "php artisan env:encrypt\n"
msgstr ""

#: docs/10.x/configuration.md:block 54 (paragraph)
msgid "Running the `env:encrypt` command will encrypt your `.env` file and place the encrypted contents in an `.env.encrypted` file. The decryption key is presented in the output of the command and should be stored in a secure password manager. If you would like to provide your own encryption key you may use the `--key` option when invoking the command:"
msgstr ""

#: docs/10.x/configuration.md:block 55 (code)
msgid "php artisan env:encrypt --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF\n"
msgstr ""

#: docs/10.x/configuration.md:block 56 (quote)
msgid "[!NOTE] The length of the key provided should match the key length required by the encryption cipher being used. By default, Laravel will use the `AES-256-CBC` cipher which requires a 32 character key. You are free to use any cipher supported by Laravel's [encrypter](/docs/{{version}}/encryption) by passing the `--cipher` option when invoking the command."
msgstr ""

#: docs/10.x/configuration.md:block 57 (paragraph)
msgid "If your application has multiple environment files, such as `.env` and `.env.staging`, you may specify the environment file that should be encrypted by providing the environment name via the `--env` option:"
msgstr ""

#: docs/10.x/configuration.md:block 58 (code)
msgid "php artisan env:encrypt --env=staging\n"
msgstr ""

#: docs/10.x/configuration.md:block 60 (header)
msgid "Decryption"
msgstr ""

#: docs/10.x/configuration.md:block 61 (paragraph)
msgid "To decrypt an environment file, you may use the `env:decrypt` command. This command requires a decryption key, which Laravel will retrieve from the `LARAVEL_ENV_ENCRYPTION_KEY` environment variable:"
msgstr ""

#: docs/10.x/configuration.md:block 62 (code)
msgid "php artisan env:decrypt\n"
msgstr ""

#: docs/10.x/configuration.md:block 63 (paragraph)
msgid "Or, the key may be provided directly to the command via the `--key` option:"
msgstr ""

#: docs/10.x/configuration.md:block 64 (code)
msgid "php artisan env:decrypt --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF\n"
msgstr ""

#: docs/10.x/configuration.md:block 65 (paragraph)
msgid "When the `env:decrypt` command is invoked, Laravel will decrypt the contents of the `.env.encrypted` file and place the decrypted contents in the `.env` file."
msgstr ""

#: docs/10.x/configuration.md:block 66 (paragraph)
msgid "The `--cipher` option may be provided to the `env:decrypt` command in order to use a custom encryption cipher:"
msgstr ""

#: docs/10.x/configuration.md:block 67 (code)
msgid "php artisan env:decrypt --key=qUWuNRdfuImXcKxZ --cipher=AES-128-CBC\n"
msgstr ""

#: docs/10.x/configuration.md:block 68 (paragraph)
msgid "If your application has multiple environment files, such as `.env` and `.env.staging`, you may specify the environment file that should be decrypted by providing the environment name via the `--env` option:"
msgstr ""

#: docs/10.x/configuration.md:block 69 (code)
msgid "php artisan env:decrypt --env=staging\n"
msgstr ""

#: docs/10.x/configuration.md:block 70 (paragraph)
msgid "In order to overwrite an existing environment file, you may provide the `--force` option to the `env:decrypt` command:"
msgstr ""

#: docs/10.x/configuration.md:block 71 (code)
msgid "php artisan env:decrypt --force\n"
msgstr ""

#: docs/10.x/configuration.md:block 73 (header)
msgid "Accessing Configuration Values"
msgstr ""

#: docs/10.x/configuration.md:block 74 (paragraph)
msgid "You may easily access your configuration values using the `Config` facade or global `config` function from anywhere in your application. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:"
msgstr ""

#: docs/10.x/configuration.md:block 75 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Config;\n"
"\n"
"$value = Config::get('app.timezone');\n"
"\n"
"$value = config('app.timezone');\n"
"\n"
"// Retrieve a default value if the configuration value does not exist...\n"
"$value = config('app.timezone', 'Asia/Seoul');\n"
msgstr ""

#: docs/10.x/configuration.md:block 76 (paragraph)
msgid "To set configuration values at runtime, you may invoke the `Config` facade's `set` method or pass an array to the `config` function:"
msgstr ""

#: docs/10.x/configuration.md:block 77 (code)
msgid ""
"Config::set('app.timezone', 'America/Chicago');\n"
"\n"
"config(['app.timezone' => 'America/Chicago']);\n"
msgstr ""

#: docs/10.x/configuration.md:block 79 (header)
msgid "Configuration Caching"
msgstr ""

#: docs/10.x/configuration.md:block 80 (paragraph)
msgid "To give your application a speed boost, you should cache all of your configuration files into a single file using the `config:cache` Artisan command. This will combine all of the configuration options for your application into a single file which can be quickly loaded by the framework."
msgstr ""

#: docs/10.x/configuration.md:block 81 (paragraph)
msgid "You should typically run the `php artisan config:cache` command as part of your production deployment process. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application's development."
msgstr ""

#: docs/10.x/configuration.md:block 82 (paragraph)
msgid "Once the configuration has been cached, your application's `.env` file will not be loaded by the framework during requests or Artisan commands; therefore, the `env` function will only return external, system level environment variables."
msgstr ""

#: docs/10.x/configuration.md:block 83 (paragraph)
msgid "For this reason, you should ensure you are only calling the `env` function from within your application's configuration (`config`) files. You can see many examples of this by examining Laravel's default configuration files. Configuration values may be accessed from anywhere in your application using the `config` function [described above](#accessing-configuration-values)."
msgstr ""

#: docs/10.x/configuration.md:block 84 (paragraph)
msgid "The `config:clear` command may be used to purge the cached configuration:"
msgstr ""

#: docs/10.x/configuration.md:block 85 (code)
msgid "php artisan config:clear\n"
msgstr ""

#: docs/10.x/configuration.md:block 86 (quote)
msgid "[!WARNING] If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded; therefore, the `env` function will only return external, system level environment variables."
msgstr ""

#: docs/10.x/configuration.md:block 88 (header)
msgid "Debug Mode"
msgstr ""

#: docs/10.x/configuration.md:block 89 (paragraph)
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr ""

#: docs/10.x/configuration.md:block 90 (quote)
msgid "[!WARNING] For local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the variable is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#: docs/10.x/configuration.md:block 92 (header)
msgid "Maintenance Mode"
msgstr ""

#: docs/10.x/configuration.md:block 93 (paragraph)
msgid "When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance will be thrown with a status code of 503."
msgstr ""

#: docs/10.x/configuration.md:block 94 (paragraph)
msgid "To enable maintenance mode, execute the `down` Artisan command:"
msgstr ""

#: docs/10.x/configuration.md:block 95 (code)
msgid "php artisan down\n"
msgstr ""

#: docs/10.x/configuration.md:block 96 (paragraph)
msgid "If you would like the `Refresh` HTTP header to be sent with all maintenance mode responses, you may provide the `refresh` option when invoking the `down` command. The `Refresh` header will instruct the browser to automatically refresh the page after the specified number of seconds:"
msgstr ""

#: docs/10.x/configuration.md:block 97 (code)
msgid "php artisan down --refresh=15\n"
msgstr ""

#: docs/10.x/configuration.md:block 98 (paragraph)
msgid "You may also provide a `retry` option to the `down` command, which will be set as the `Retry-After` HTTP header's value, although browsers generally ignore this header:"
msgstr ""

#: docs/10.x/configuration.md:block 99 (code)
msgid "php artisan down --retry=60\n"
msgstr ""

#: docs/10.x/configuration.md:block 101 (header)
msgid "Bypassing Maintenance Mode"
msgstr ""

#: docs/10.x/configuration.md:block 102 (paragraph)
msgid "To allow maintenance mode to be bypassed using a secret token, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr ""

#: docs/10.x/configuration.md:block 103 (code)
msgid "php artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\n"
msgstr ""

#: docs/10.x/configuration.md:block 104 (paragraph)
msgid "After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:"
msgstr ""

#: docs/10.x/configuration.md:block 105 (code)
msgid "https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515\n"
msgstr ""

#: docs/10.x/configuration.md:block 106 (paragraph)
msgid "If you would like Laravel to generate the secret token for you, you may use the `with-secret` option. The secret will be displayed to you once the application is in maintenance mode:"
msgstr ""

#: docs/10.x/configuration.md:block 107 (code)
msgid "php artisan down --with-secret\n"
msgstr ""

#: docs/10.x/configuration.md:block 108 (paragraph)
msgid "When accessing this hidden route, you will then be redirected to the `/` route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode."
msgstr ""

#: docs/10.x/configuration.md:block 109 (quote)
msgid "[!NOTE] Your maintenance mode secret should typically consist of alpha-numeric characters and, optionally, dashes. You should avoid using characters that have special meaning in URLs such as `?` or `&`."
msgstr ""

#: docs/10.x/configuration.md:block 111 (header)
msgid "Pre-Rendering the Maintenance Mode View"
msgstr ""

#: docs/10.x/configuration.md:block 112 (paragraph)
msgid "If you utilize the `php artisan down` command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine."
msgstr ""

#: docs/10.x/configuration.md:block 113 (paragraph)
msgid "For this reason, Laravel allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the `down` command's `render` option:"
msgstr ""

#: docs/10.x/configuration.md:block 114 (code)
msgid "php artisan down --render=\"errors::503\"\n"
msgstr ""

#: docs/10.x/configuration.md:block 116 (header)
msgid "Redirecting Maintenance Mode Requests"
msgstr ""

#: docs/10.x/configuration.md:block 117 (paragraph)
msgid "While in maintenance mode, Laravel will display the maintenance mode view for all application URLs the user attempts to access. If you wish, you may instruct Laravel to redirect all requests to a specific URL. This may be accomplished using the `redirect` option. For example, you may wish to redirect all requests to the `/` URI:"
msgstr ""

#: docs/10.x/configuration.md:block 118 (code)
msgid "php artisan down --redirect=/\n"
msgstr ""

#: docs/10.x/configuration.md:block 120 (header)
msgid "Disabling Maintenance Mode"
msgstr ""

#: docs/10.x/configuration.md:block 121 (paragraph)
msgid "To disable maintenance mode, use the `up` command:"
msgstr ""

#: docs/10.x/configuration.md:block 122 (code)
msgid "php artisan up\n"
msgstr ""

#: docs/10.x/configuration.md:block 123 (quote)
msgid "[!NOTE] You may customize the default maintenance mode template by defining your own template at `resources/views/errors/503.blade.php`."
msgstr ""

#: docs/10.x/configuration.md:block 125 (header)
msgid "Maintenance Mode and Queues"
msgstr ""

#: docs/10.x/configuration.md:block 126 (paragraph)
msgid "While your application is in maintenance mode, no [queued jobs](/docs/{{version}}/queues) will be handled. The jobs will continue to be handled as normal once the application is out of maintenance mode."
msgstr ""

#: docs/10.x/configuration.md:block 128 (header)
msgid "Alternatives to Maintenance Mode"
msgstr ""

#: docs/10.x/configuration.md:block 129 (paragraph)
msgid "Since maintenance mode requires your application to have several seconds of downtime, consider alternatives like [Laravel Vapor](https://vapor.laravel.com) and [Envoyer](https://envoyer.io) to accomplish zero-downtime deployment with Laravel."
msgstr ""

#: docs/11.x/configuration.md:block 2 (unordered list)
msgid "[Configuration Publishing](#configuration-publishing)"
msgstr ""

#: docs/11.x/configuration.md:block 8 (header)
msgid "The `about` Command"
msgstr ""

#: docs/11.x/configuration.md:block 9 (paragraph)
msgid "Laravel can display an overview of your application's configuration, drivers, and environment via the `about` Artisan command."
msgstr ""

#: docs/11.x/configuration.md:block 19 (paragraph)
msgid "Laravel's default `.env` file contains some common configuration values that may differ based on whether your application is running locally or on a production web server. These values are then read by the configuration files within the `config` directory using Laravel's `env` function."
msgstr ""

#: docs/11.x/configuration.md:block 20 (paragraph)
msgid "If you are developing with a team, you may wish to continue including and updating the `.env.example` file with your application. By putting placeholder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application."
msgstr ""

#: docs/11.x/configuration.md:block 78 (paragraph)
msgid "To assist with static analysis, the `Config` facade also provides typed configuration retrieval methods. If the retrieved configuration value does not match the expected type, an exception will be thrown:"
msgstr ""

#: docs/11.x/configuration.md:block 79 (code)
msgid ""
"Config::string('config-key');\n"
"Config::integer('config-key');\n"
"Config::float('config-key');\n"
"Config::boolean('config-key');\n"
"Config::array('config-key');\n"
msgstr ""

#: docs/11.x/configuration.md:block 90 (header)
msgid "Configuration Publishing"
msgstr ""

#: docs/11.x/configuration.md:block 91 (paragraph)
msgid "Most of Laravel's configuration files are already published in your application's `config` directory; however, certain configuration files like `cors.php` and `view.php` are not published by default, as most applications will never need to modify them."
msgstr ""

#: docs/11.x/configuration.md:block 92 (paragraph)
msgid "However, you may use the `config:publish` Artisan command to publish any configuration files that are not published by default:"
msgstr ""

#: docs/11.x/configuration.md:block 93 (code)
msgid ""
"php artisan config:publish\n"
"\n"
"php artisan config:publish --all\n"
msgstr ""

#: docs/11.x/configuration.md:block 118 (header)
msgid "Maintenance Mode on Multiple Servers"
msgstr ""

#: docs/11.x/configuration.md:block 119 (paragraph)
msgid "By default, Laravel determines if your application is in maintenance mode using a file-based system. This means to activate maintenance mode, the `php artisan down` command has to be executed on each server hosting your application."
msgstr ""

#: docs/11.x/configuration.md:block 120 (paragraph)
msgid "Alternatively, Laravel offers a cache-based method for handling maintenance mode. This method requires running the `php artisan down` command on just one server. To use this approach, modify the \"driver\" setting in the `config/app.php` file of your application to `cache`. Then, select a cache `store` that is accessible by all your servers. This ensures the maintenance mode status is consistently maintained across every server:"
msgstr ""

#: docs/11.x/configuration.md:block 121 (code)
msgid ""
"'maintenance' => [\n"
"    'driver' => 'cache',\n"
"    'store' => 'database',\n"
"],\n"
msgstr ""

#: docs/8.x/configuration.md:block 2 (unordered list)
msgid "[Determining The Current Environment](#determining-the-current-environment)"
msgstr ""

#: docs/8.x/configuration.md:block 13 (quote)
msgid "{tip} Any variable in your `.env` file can be overridden by external environment variables such as server-level or system-level environment variables."
msgstr ""

#: docs/8.x/configuration.md:block 19 (paragraph)
msgid "Before loading your application's environment variables, Laravel determines if either the `APP_ENV` environment variable has been externally provided or if the `--env` CLI argument has been specified. If so, Laravel will attempt to load an `.env.[APP_ENV]` file if it exists. If it does not exist, the default `.env` file will be loaded."
msgstr ""

#: docs/8.x/configuration.md:block 28 (paragraph)
msgid "All of the variables listed in this file will be loaded into the `$_ENV` PHP super-global when your application receives a request. However, you may use the `env` helper to retrieve values from these variables in your configuration files. In fact, if you review the Laravel configuration files, you will notice many of the options are already using this helper:"
msgstr ""

#: docs/8.x/configuration.md:block 32 (header)
msgid "Determining The Current Environment"
msgstr ""

#: docs/8.x/configuration.md:block 37 (quote)
msgid "{tip} The current application environment detection can be overridden by defining a server-level `APP_ENV` environment variable."
msgstr ""

#: docs/8.x/configuration.md:block 40 (paragraph)
msgid "You may easily access your configuration values using the global `config` helper function from anywhere in your application. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:"
msgstr ""

#: docs/8.x/configuration.md:block 41 (code)
msgid ""
"$value = config('app.timezone');\n"
"\n"
"// Retrieve a default value if the configuration value does not exist...\n"
"$value = config('app.timezone', 'Asia/Seoul');\n"
msgstr ""

#: docs/8.x/configuration.md:block 42 (paragraph)
msgid "To set configuration values at runtime, pass an array to the `config` helper:"
msgstr ""

#: docs/8.x/configuration.md:block 43 (code)
msgid "config(['app.timezone' => 'America/Chicago']);\n"
msgstr ""

#: docs/8.x/configuration.md:block 48 (quote)
msgid "{note} If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded; therefore, the `env` function will only return external, system level environment variables."
msgstr ""

#: docs/8.x/configuration.md:block 52 (paragraph)
msgid "For local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the variable is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#: docs/8.x/configuration.md:block 64 (paragraph)
msgid "Even while in maintenance mode, you may use the `secret` option to specify a maintenance mode bypass token:"
msgstr ""

#: docs/8.x/configuration.md:block 69 (quote)
msgid "{tip} Your maintenance mode secret should typically consist of alpha-numeric characters and, optionally, dashes. You should avoid using characters that have special meaning in URLs such as `?` or `&`."
msgstr ""

#: docs/8.x/configuration.md:block 71 (header)
msgid "Pre-Rendering The Maintenance Mode View"
msgstr ""

#: docs/8.x/configuration.md:block 83 (quote)
msgid "{tip} You may customize the default maintenance mode template by defining your own template at `resources/views/errors/503.blade.php`."
msgstr ""

#: docs/8.x/configuration.md:block 85 (header)
msgid "Maintenance Mode & Queues"
msgstr ""

#: docs/8.x/configuration.md:block 88 (header)
msgid "Alternatives To Maintenance Mode"
msgstr ""

#: docs/9.x/configuration.md:block 19 (quote)
msgid "**Note** Any variable in your `.env` file can be overridden by external environment variables such as server-level or system-level environment variables."
msgstr ""

#: docs/9.x/configuration.md:block 44 (quote)
msgid "**Note** The current application environment detection can be overridden by defining a server-level `APP_ENV` environment variable."
msgstr ""

#: docs/9.x/configuration.md:block 54 (quote)
msgid "**Note** The length of the key provided should match the key length required by the encryption cipher being used. By default, Laravel will use the `AES-256-CBC` cipher which requires a 32 character key. You are free to use any cipher supported by Laravel's [encrypter](/docs/{{version}}/encryption) by passing the `--cipher` option when invoking the command."
msgstr ""

#: docs/9.x/configuration.md:block 72 (paragraph)
msgid "You may easily access your configuration values using the global `config` function from anywhere in your application. The configuration values may be accessed using \"dot\" syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:"
msgstr ""

#: docs/9.x/configuration.md:block 74 (paragraph)
msgid "To set configuration values at runtime, pass an array to the `config` function:"
msgstr ""

#: docs/9.x/configuration.md:block 82 (quote)
msgid "**Warning** If you execute the `config:cache` command during your deployment process, you should be sure that you are only calling the `env` function from within your configuration files. Once the configuration has been cached, the `.env` file will not be loaded; therefore, the `env` function will only return external, system level environment variables."
msgstr ""

#: docs/9.x/configuration.md:block 103 (quote)
msgid "**Note** Your maintenance mode secret should typically consist of alpha-numeric characters and, optionally, dashes. You should avoid using characters that have special meaning in URLs such as `?` or `&`."
msgstr ""

#: docs/9.x/configuration.md:block 117 (quote)
msgid "**Note** You may customize the default maintenance mode template by defining your own template at `resources/views/errors/503.blade.php`."
msgstr ""
