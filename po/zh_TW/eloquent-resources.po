msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent-resources.pot\n"
"X-Crowdin-File-ID: 57\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-02-13 07:50\n"

#: docs/8.x/eloquent-resources.md:block 1 (header)
msgid "Eloquent: API Resources"
msgstr "Eloquent：API 資源"

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Generating Resources](#generating-resources)"
msgstr "[產生 Resource](#generating-resources)"

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Concept Overview](#concept-overview)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Resource Collections](#resource-collections)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Writing Resources](#writing-resources)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Data Wrapping](#data-wrapping)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Pagination](#pagination)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Conditional Attributes](#conditional-attributes)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Conditional Relationships](#conditional-relationships)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Adding Meta Data](#adding-meta-data)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 2 (unordered list)
msgid "[Resource Responses](#resource-responses)"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 3 (paragraph)
msgid "<a name=\"introduction\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/eloquent-resources.md:block 5 (paragraph)
msgid "When building an API, you may need a transformation layer that sits between your Eloquent models and the JSON responses that are actually returned to your application's users. For example, you may wish to display certain attributes for a subset of users and not others, or you may wish to always include certain relationships in the JSON representation of your models. Eloquent's resource classes allow you to expressively and easily transform your models and model collections into JSON."
msgstr "在製作 API 的時候，我們可能會需要一個轉換層來將 Eloquent Model 轉換為實際要回傳給使用者的 JSON 回應。舉例來說，有一些屬性我們只希望特定使用者能看到，其他使用者不能看；或者，我們可能會希望在 Model 的 JSON 呈現上總是包含特定的關聯。Eloquent 的 Resource 類別能讓我們輕鬆自如地將 Model 與 Model Collection 轉換為 JSON。"

#: docs/8.x/eloquent-resources.md:block 6 (paragraph)
msgid "Of course, you may always convert Eloquent models or collections to JSON using their `toJson` methods; however, Eloquent resources provide more granular and robust control over the JSON serialization of your models and their relationships."
msgstr "當然，我們還是可以用 Eloquent Model 上的 `toJson` 方法來將其轉為 JSON。不過，Eloquent Resource 能讓我們對於 Model 與其關聯要怎麼被 JSON 序列化有更大的控制。"

#: docs/8.x/eloquent-resources.md:block 7 (paragraph)
msgid "<a name=\"generating-resources\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 8 (header)
msgid "Generating Resources"
msgstr "產生 Resource"

#: docs/8.x/eloquent-resources.md:block 9 (paragraph)
msgid "To generate a resource class, you may use the `make:resource` Artisan command. By default, resources will be placed in the `app/Http/Resources` directory of your application. Resources extend the `Illuminate\\Http\\Resources\\Json\\JsonResource` class:"
msgstr "若要產生 Resource 類別，可以使用 `make:resource` Artisan 指令。預設情況下，Resource 會被放在專案中的 `app/Http/Resources` 目錄。Resource 繼承自 `Illuminate\\Http\\Resources\\Json\\JsonResource` 類別："

#: docs/8.x/eloquent-resources.md:block 10 (code)
msgid "php artisan make:resource UserResource\n"
msgstr "php artisan make:resource UserResource\n"

#: docs/8.x/eloquent-resources.md:block 11 (paragraph)
msgid "<a name=\"generating-resource-collections\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 12 (header)
msgid "Resource Collections"
msgstr "Resource Collection"

#: docs/8.x/eloquent-resources.md:block 13 (paragraph)
msgid "In addition to generating resources that transform individual models, you may generate resources that are responsible for transforming collections of models. This allows your JSON responses to include links and other meta information that is relevant to an entire collection of a given resource."
msgstr "除了產生能轉換個別 Model 的 Resource 外，也可以產生一個 Resource 來轉換一組包含 Model 的 Collection。這樣以來，就可以在我們的 JSON 回應中包含連結或其他詮釋資訊等與該資源中整個 Collection 相關的資訊。"

#: docs/8.x/eloquent-resources.md:block 14 (paragraph)
msgid "To create a resource collection, you should use the `--collection` flag when creating the resource. Or, including the word `Collection` in the resource name will indicate to Laravel that it should create a collection resource. Collection resources extend the `Illuminate\\Http\\Resources\\Json\\ResourceCollection` class:"
msgstr "要建立 Resource Collection，應在建立資源時使用 `--collection` 旗標。或者，也可以在資源名稱後方加上 `Collection`，以讓 Laravel 知道我們要建立的是 Resource Collection。"

#: docs/8.x/eloquent-resources.md:block 15 (code)
msgid "php artisan make:resource User --collection\n\n"
"php artisan make:resource UserCollection\n"
msgstr "php artisan make:resource User --collection\n\n"
"php artisan make:resource UserCollection\n"

#: docs/8.x/eloquent-resources.md:block 16 (paragraph)
msgid "<a name=\"concept-overview\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 17 (header)
msgid "Concept Overview"
msgstr "概念概覽"

#: docs/8.x/eloquent-resources.md:block 18 (quote)
msgid "{tip} This is a high-level overview of resources and resource collections. You are highly encouraged to read the other sections of this documentation to gain a deeper understanding of the customization and power offered to you by resources."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 19 (paragraph)
msgid "Before diving into all of the options available to you when writing resources, let's first take a high-level look at how resources are used within Laravel. A resource class represents a single model that needs to be transformed into a JSON structure. For example, here is a simple `UserResource` resource class:"
msgstr "在深入瞭解撰寫 Resource 時可用的所有方法前，我們先來用一種高階的方式看看 Laravel 中可以怎麼使用 Resource。Resource 類別代表的是需要被轉換為 JSON 結構的單一 Model。舉例來說，下列是一個簡單的 `UserResource` Resource 類別："

#: docs/8.x/eloquent-resources.md:block 20 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\JsonResource;\n\n"
"class UserResource extends JsonResource\n"
"{\n"
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 21 (paragraph)
msgid "Every resource class defines a `toArray` method which returns the array of attributes that should be converted to JSON when the resource is returned as a response from a route or controller method."
msgstr "每個 Resource 類別都有一個 `toArray` 方法，`toArray` 方法回傳一組包含屬性的陣列，當資源從路由或 Controller 方法中作為回應回傳時，這些屬性會被轉為 JSON。"

#: docs/8.x/eloquent-resources.md:block 22 (paragraph)
msgid "Note that we can access model properties directly from the `$this` variable. This is because a resource class will automatically proxy property and method access down to the underlying model for convenient access. Once the resource is defined, it may be returned from a route or controller. The resource accepts the underlying model instance via its constructor:"
msgstr "可以注意到，我們直接使用 `$this` 變數來存取 Model 的屬性。這是因為，在存取屬性與方法時，Resource 類別會自動幫我們將這些存取代理 (Proxy) 到底層的 Model，以讓我們能方便地存取。定義好 Resource 之後，就可以從路由或 Controller 中回傳這個 Resource。該 Resource 的建構函式中接受底層的 Model 實體："

#: docs/8.x/eloquent-resources.md:block 23 (code)
msgid "use App\\Http\\Resources\\UserResource;\n"
"use App\\Models\\User;\n\n"
"Route::get('/user/{id}', function ($id) {\n"
"    return new UserResource(User::findOrFail($id));\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 24 (paragraph)
msgid "<a name=\"resource-collections\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 26 (paragraph)
msgid "If you are returning a collection of resources or a paginated response, you should use the `collection` method provided by your resource class when creating the resource instance in your route or controller:"
msgstr "在路由或 Controller 中回傳一組包含 Resource 的 Collection、或是有分頁的回應時，建立 Resource 的時候應使用 Resource 類別提供的 `collection` 方法："

#: docs/8.x/eloquent-resources.md:block 27 (code)
msgid "use App\\Http\\Resources\\UserResource;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return UserResource::collection(User::all());\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 28 (paragraph)
msgid "Note that this does not allow any addition of custom meta data that may need to be returned with your collection. If you would like to customize the resource collection response, you may create a dedicated resource to represent the collection:"
msgstr "請注意，在回傳 Collection 的同時，這麼做將無法附上額外的詮釋資料。若想自訂 Resource Collection 的回應，可以建立一個專門的 Resource 來代表該 Collection："

#: docs/8.x/eloquent-resources.md:block 29 (code)
msgid "php artisan make:resource UserCollection\n"
msgstr "php artisan make:resource UserCollection\n"

#: docs/8.x/eloquent-resources.md:block 30 (paragraph)
msgid "Once the resource collection class has been generated, you may easily define any meta data that should be included with the response:"
msgstr "產生好 Resource Collection 後，就可以輕鬆地定義要被包含在回應中的詮釋資料："

#: docs/8.x/eloquent-resources.md:block 31 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\n"
"class UserCollection extends ResourceCollection\n"
"{\n"
"    /**\n"
"     * Transform the resource collection into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'data' => $this->collection,\n"
"            'links' => [\n"
"                'self' => 'link-value',\n"
"            ],\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 32 (paragraph)
msgid "After defining your resource collection, it may be returned from a route or controller:"
msgstr "定義好 Resource Collection 後，就可以在路由或 Controller 內回傳這個 Resource Collection："

#: docs/8.x/eloquent-resources.md:block 33 (code)
msgid "use App\\Http\\Resources\\UserCollection;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return new UserCollection(User::all());\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 34 (paragraph)
msgid "<a name=\"preserving-collection-keys\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 35 (header)
msgid "Preserving Collection Keys"
msgstr "保留 Collection 的索引鍵"

#: docs/8.x/eloquent-resources.md:block 36 (paragraph)
msgid "When returning a resource collection from a route, Laravel resets the collection's keys so that they are in numerical order. However, you may add a `preserveKeys` property to your resource class indicating whether a collection's original keys should be preserved:"
msgstr "從路由內回傳 Resource Collection 的時候，Laravel 會重設該 Collection 的索引鍵，讓索引鍵按找數字順序排列。不過，可以在 Resource 類別中加上 `preserveKeys` 屬性來讓 Collection 保留其原始的索引鍵："

#: docs/8.x/eloquent-resources.md:block 37 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\JsonResource;\n\n"
"class UserResource extends JsonResource\n"
"{\n"
"    /**\n"
"     * Indicates if the resource's collection keys should be preserved.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    public $preserveKeys = true;\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 38 (paragraph)
msgid "When the `preserveKeys` property is set to `true`, collection keys will be preserved when the collection is returned from a route or controller:"
msgstr "`preservedKeys` 屬性設為 `true` 的時，當我們從路由或 Controller 內回傳這個 Collection 的時候，就會保留其中的索引鍵："

#: docs/8.x/eloquent-resources.md:block 39 (code)
msgid "use App\\Http\\Resources\\UserResource;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return UserResource::collection(User::all()->keyBy->id);\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 40 (paragraph)
msgid "<a name=\"customizing-the-underlying-resource-class\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 41 (header)
msgid "Customizing The Underlying Resource Class"
msgstr "自訂底層的 Resource 類別"

#: docs/8.x/eloquent-resources.md:block 42 (paragraph)
msgid "Typically, the `$this->collection` property of a resource collection is automatically populated with the result of mapping each item of the collection to its singular resource class. The singular resource class is assumed to be the collection's class name without the trailing `Collection` portion of the class name. In addition, depending on your personal preference, the singular resource class may or may not be suffixed with `Resource`."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 43 (paragraph)
msgid "For example, `UserCollection` will attempt to map the given user instances into the `UserResource` resource. To customize this behavior, you may override the `$collects` property of your resource collection:"
msgstr "舉例來說，`UserCollection` 會將給定的 User 實體映射到 `UserResource` 資源上。若要自訂此行為，可以複寫 Resource Collection 的 `$collects` 屬性："

#: docs/8.x/eloquent-resources.md:block 44 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\n"
"class UserCollection extends ResourceCollection\n"
"{\n"
"    /**\n"
"     * The resource that this resource collects.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $collects = Member::class;\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 45 (paragraph)
msgid "<a name=\"writing-resources\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 46 (header)
msgid "Writing Resources"
msgstr "撰寫 Resource"

#: docs/8.x/eloquent-resources.md:block 47 (quote)
msgid "{tip} If you have not read the [concept overview](#concept-overview), you are highly encouraged to do so before proceeding with this documentation."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 48 (paragraph)
msgid "In essence, resources are simple. They only need to transform a given model into an array. So, each resource contains a `toArray` method which translates your model's attributes into an API friendly array that can be returned from your application's routes or controllers:"
msgstr "從本質上來說，Resource 很簡單。Resource 只負責把給定的 Model 轉換為陣列。因此，每個 Resource 都包含了一個 `toArray` 方法，可用來將 Model 的屬性轉換為對適合用在 API 的陣列，並讓你能在路由或 Controller 內回傳這個陣列："

#: docs/8.x/eloquent-resources.md:block 50 (paragraph)
msgid "Once a resource has been defined, it may be returned directly from a route or controller:"
msgstr "定義好 Resource 後，我們就可以直接在路由或 Controller 內將其回傳："

#: docs/8.x/eloquent-resources.md:block 52 (paragraph)
msgid "<a name=\"relationships\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 53 (header)
msgid "Relationships"
msgstr "關聯"

#: docs/8.x/eloquent-resources.md:block 54 (paragraph)
msgid "If you would like to include related resources in your response, you may add them to the array returned by your resource's `toArray` method. In this example, we will use the `PostResource` resource's `collection` method to add the user's blog posts to the resource response:"
msgstr "若要定義想被包含在回應內的關聯資源，可直接將這些關聯加在 Resource 的 `toArray` 方法內。在這個例子中，我們會使用 `PostResource` Resource 的 `collection` 方法來講使用者的部落格貼文加到 Resource 回應內："

#: docs/8.x/eloquent-resources.md:block 55 (code)
msgid "use App\\Http\\Resources\\PostResource;\n\n"
"/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'posts' => PostResource::collection($this->posts),\n"
"        'created_at' => $this->created_at,\n"
"        'updated_at' => $this->updated_at,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 56 (quote)
msgid "{tip} If you would like to include relationships only when they have already been loaded, check out the documentation on [conditional relationships](#conditional-relationships)."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 57 (paragraph)
msgid "<a name=\"writing-resource-collections\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 59 (paragraph)
msgid "While resources transform a single model into an array, resource collections transform a collection of models into an array. However, it is not absolutely necessary to define a resource collection class for each one of your models since all resources provide a `collection` method to generate an \"ad-hoc\" resource collection on the fly:"
msgstr "Resource 會將單一 Model 轉換為陣列，Resource Collection 則將一組包含 Model 的 Collection 轉換為陣列。不過，並不需要為每個 Model 都應以一個對應的 Resource Collection，因為所有的 Resource 都有提供一個 `collection` 方法，可以讓你即時產生一個特別的 Resource Collection："

#: docs/8.x/eloquent-resources.md:block 61 (paragraph)
msgid "However, if you need to customize the meta data returned with the collection, it is necessary to define your own resource collection:"
msgstr "不過，若有需要定義與 Collection 一起回傳的詮釋資料 (Meta Data)，就需要定義你自己的 Resource Collection："

#: docs/8.x/eloquent-resources.md:block 63 (paragraph)
msgid "Like singular resources, resource collections may be returned directly from routes or controllers:"
msgstr "與單數 Resource 類似，Resource Collection 也可以直接在路由或 Controller 內回傳："

#: docs/8.x/eloquent-resources.md:block 65 (paragraph)
msgid "<a name=\"data-wrapping\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 66 (header)
msgid "Data Wrapping"
msgstr "資料包裝"

#: docs/8.x/eloquent-resources.md:block 67 (paragraph)
msgid "By default, your outermost resource is wrapped in a `data` key when the resource response is converted to JSON. So, for example, a typical resource collection response looks like the following:"
msgstr "預設情況下，當 Resource 回應被轉成 JSON 時，最外層的資源會被包裝在 `data` 索引鍵地下。因此，舉例來說，正常的 Resource Collection 回應會長這樣："

#: docs/8.x/eloquent-resources.md:block 68 (code)
msgid "{\n"
"    \"data\": [\n"
"        {\n"
"            \"id\": 1,\n"
"            \"name\": \"Eladio Schroeder Sr.\",\n"
"            \"email\": \"therese28@example.com\",\n"
"        },\n"
"        {\n"
"            \"id\": 2,\n"
"            \"name\": \"Liliana Mayert\",\n"
"            \"email\": \"evandervort@example.com\",\n"
"        }\n"
"    ]\n"
"}\n"
msgstr "{\n"
"    \"data\": [\n"
"        {\n"
"            \"id\": 1,\n"
"            \"name\": \"Eladio Schroeder Sr.\",\n"
"            \"email\": \"therese28@example.com\",\n"
"        },\n"
"        {\n"
"            \"id\": 2,\n"
"            \"name\": \"Liliana Mayert\",\n"
"            \"email\": \"evandervort@example.com\",\n"
"        }\n"
"    ]\n"
"}\n"

#: docs/8.x/eloquent-resources.md:block 69 (paragraph)
msgid "If you would like to use a custom key instead of `data`, you may define a `$wrap` attribute on the resource class:"
msgstr "若使用 `data` 以外的其他自訂索引鍵，可以在 Resource 類別內定義一個 `$wrap`屬性："

#: docs/8.x/eloquent-resources.md:block 70 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\JsonResource;\n\n"
"class UserResource extends JsonResource\n"
"{\n"
"    /**\n"
"     * The \"data\" wrapper that should be applied.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public static $wrap = 'user';\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 71 (paragraph)
msgid "If you would like to disable the wrapping of the outermost resource, you should invoke the `withoutWrapping` method on the base `Illuminate\\Http\\Resources\\Json\\JsonResource` class. Typically, you should call this method from your `AppServiceProvider` or another [service provider](/docs/{{version}}/providers) that is loaded on every request to your application:"
msgstr "若不想要包裝最外層的資源，請叫用基礎 `Illuminate\\Http\\Resources\\Json\\JsonResource` 類別底下的 `withoutWrapping` 方法。一般來說，應在 `AppServiceProvider` 或其他每個請求都會載入的 [Service Provider](/docs/{{version}}/providers) 內呼叫這個方法："

#: docs/8.x/eloquent-resources.md:block 72 (code)
msgid "<?php\n\n"
"namespace App\\Providers;\n\n"
"use Illuminate\\Http\\Resources\\Json\\JsonResource;\n"
"use Illuminate\\Support\\ServiceProvider;\n\n"
"class AppServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * Register any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function register()\n"
"    {\n"
"        //\n"
"    }\n\n"
"    /**\n"
"     * Bootstrap any application services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        JsonResource::withoutWrapping();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 73 (quote)
msgid "{note} The `withoutWrapping` method only affects the outermost response and will not remove `data` keys that you manually add to your own resource collections."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 74 (paragraph)
msgid "<a name=\"wrapping-nested-resources\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 75 (header)
msgid "Wrapping Nested Resources"
msgstr "包裝巢狀 Resource"

#: docs/8.x/eloquent-resources.md:block 76 (paragraph)
msgid "You have total freedom to determine how your resource's relationships are wrapped. If you would like all resource collections to be wrapped in a `data` key, regardless of their nesting, you should define a resource collection class for each resource and return the collection within a `data` key."
msgstr "對於要如何包裝 Resource 的關聯，開發人員擁有絕對的自由。若想讓所有無論是不是巢狀的 Resource Collection 都被包裝在 `data` 索引鍵內，則可以為每個 Resource 都定義一個 Resource Collection 類別，並以 `data` 索引鍵回傳 Collection。"

#: docs/8.x/eloquent-resources.md:block 77 (paragraph)
msgid "You may be wondering if this will cause your outermost resource to be wrapped in two `data` keys. Don't worry, Laravel will never let your resources be accidentally double-wrapped, so you don't have to be concerned about the nesting level of the resource collection you are transforming:"
msgstr "讀者可能會疑惑：這麼做會不會讓最外層的 Resource 被包裝在 `data` 索引鍵裡兩次？別擔心，Laravel 不會讓你不小心把 Resource 重複包裝的。因此，在轉換 Resource Collection 時，完全不需擔心 Resource Collection 的巢狀層級："

#: docs/8.x/eloquent-resources.md:block 78 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\n"
"class CommentsCollection extends ResourceCollection\n"
"{\n"
"    /**\n"
"     * Transform the resource collection into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return ['data' => $this->collection];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 79 (paragraph)
msgid "<a name=\"data-wrapping-and-pagination\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 80 (header)
msgid "Data Wrapping And Pagination"
msgstr "資料包裝與分頁"

#: docs/8.x/eloquent-resources.md:block 81 (paragraph)
msgid "When returning paginated collections via a resource response, Laravel will wrap your resource data in a `data` key even if the `withoutWrapping` method has been called. This is because paginated responses always contain `meta` and `links` keys with information about the paginator's state:"
msgstr "當使用 Resource 回應來回船分頁過的 Collection 時，就算有呼叫過 `withoutWrapper` 方法，Laravel 也會將這些 Resource 資料放在 `data` 索引鍵裡。這是因為，所有經過分頁的回應都會包含如 `meta` 與 `links` 等有關 Paginator 狀態的資訊："

#: docs/8.x/eloquent-resources.md:block 82 (code)
msgid "{\n"
"    \"data\": [\n"
"        {\n"
"            \"id\": 1,\n"
"            \"name\": \"Eladio Schroeder Sr.\",\n"
"            \"email\": \"therese28@example.com\",\n"
"        },\n"
"        {\n"
"            \"id\": 2,\n"
"            \"name\": \"Liliana Mayert\",\n"
"            \"email\": \"evandervort@example.com\",\n"
"        }\n"
"    ],\n"
"    \"links\":{\n"
"        \"first\": \"http://example.com/pagination?page=1\",\n"
"        \"last\": \"http://example.com/pagination?page=1\",\n"
"        \"prev\": null,\n"
"        \"next\": null\n"
"    },\n"
"    \"meta\":{\n"
"        \"current_page\": 1,\n"
"        \"from\": 1,\n"
"        \"last_page\": 1,\n"
"        \"path\": \"http://example.com/pagination\",\n"
"        \"per_page\": 15,\n"
"        \"to\": 10,\n"
"        \"total\": 10\n"
"    }\n"
"}\n"
msgstr "{\n"
"    \"data\": [\n"
"        {\n"
"            \"id\": 1,\n"
"            \"name\": \"Eladio Schroeder Sr.\",\n"
"            \"email\": \"therese28@example.com\",\n"
"        },\n"
"        {\n"
"            \"id\": 2,\n"
"            \"name\": \"Liliana Mayert\",\n"
"            \"email\": \"evandervort@example.com\",\n"
"        }\n"
"    ],\n"
"    \"links\":{\n"
"        \"first\": \"http://example.com/pagination?page=1\",\n"
"        \"last\": \"http://example.com/pagination?page=1\",\n"
"        \"prev\": null,\n"
"        \"next\": null\n"
"    },\n"
"    \"meta\":{\n"
"        \"current_page\": 1,\n"
"        \"from\": 1,\n"
"        \"last_page\": 1,\n"
"        \"path\": \"http://example.com/pagination\",\n"
"        \"per_page\": 15,\n"
"        \"to\": 10,\n"
"        \"total\": 10\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-resources.md:block 83 (paragraph)
msgid "<a name=\"pagination\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 84 (header)
msgid "Pagination"
msgstr "分頁"

#: docs/8.x/eloquent-resources.md:block 85 (paragraph)
msgid "You may pass a Laravel paginator instance to the `collection` method of a resource or to a custom resource collection:"
msgstr "可以將 Laravel 的 Paginator 實體傳入 Resource 的 `collection` 方法或自訂 Resource Collection 中："

#: docs/8.x/eloquent-resources.md:block 86 (code)
msgid "use App\\Http\\Resources\\UserCollection;\n"
"use App\\Models\\User;\n\n"
"Route::get('/users', function () {\n"
"    return new UserCollection(User::paginate());\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 87 (paragraph)
msgid "Paginated responses always contain `meta` and `links` keys with information about the paginator's state:"
msgstr "所有經過分頁的回應都會包含 `meta` 與 `links` 等關於 Paginator 狀態的資訊："

#: docs/8.x/eloquent-resources.md:block 89 (paragraph)
msgid "<a name=\"conditional-attributes\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 90 (header)
msgid "Conditional Attributes"
msgstr "有條件的屬性"

#: docs/8.x/eloquent-resources.md:block 91 (paragraph)
msgid "Sometimes you may wish to only include an attribute in a resource response if a given condition is met. For example, you may wish to only include a value if the current user is an \"administrator\". Laravel provides a variety of helper methods to assist you in this situation. The `when` method may be used to conditionally add an attribute to a resource response:"
msgstr "有時候，我們只想在滿足特定條件的時候才在 Resource 回應內包含某個屬性。舉例來說，我們或許會只在目前使用者是「管理員 (Administrator)」時才將某個值包含在回應內。Laravel 為這種情況提供了一個輔助函式。可以使用 `when` 來有條件地在 Resource 回應內新增屬性："

#: docs/8.x/eloquent-resources.md:block 92 (code)
msgid "use Illuminate\\Support\\Facades\\Auth;\n\n"
"/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'secret' => $this->when(Auth::user()->isAdmin(), 'secret-value'),\n"
"        'created_at' => $this->created_at,\n"
"        'updated_at' => $this->updated_at,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 93 (paragraph)
msgid "In this example, the `secret` key will only be returned in the final resource response if the authenticated user's `isAdmin` method returns `true`. If the method returns `false`, the `secret` key will be removed from the resource response before it is sent to the client. The `when` method allows you to expressively define your resources without resorting to conditional statements when building the array."
msgstr "在這個例子中，只有在已登入使用者的 `idAdmin` 方法回傳 `true` 時，最終的 Resource 回應內才會包含 `secret` 索引鍵。若 `isAdmin` 方法回傳 `false`，則在 Resource 回應回傳給用戶端之前，`secret` 索引鍵就會被移除。使用 `when` 方法就可以用一種語意化的方法來定義 Resource，而不需要建立陣列時使用條件式陳述式。"

#: docs/8.x/eloquent-resources.md:block 94 (paragraph)
msgid "The `when` method also accepts a closure as its second argument, allowing you to calculate the resulting value only if the given condition is `true`:"
msgstr "`when` 的第二個引數也可以傳入一個閉包。可以使用這個閉包來只在條件為 `true` 時計算結果值："

#: docs/8.x/eloquent-resources.md:block 95 (code)
msgid "'secret' => $this->when(Auth::user()->isAdmin(), function () {\n"
"    return 'secret-value';\n"
"}),\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 96 (paragraph)
msgid "<a name=\"merging-conditional-attributes\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 97 (header)
msgid "Merging Conditional Attributes"
msgstr "合併有條件的屬性"

#: docs/8.x/eloquent-resources.md:block 98 (paragraph)
msgid "Sometimes you may have several attributes that should only be included in the resource response based on the same condition. In this case, you may use the `mergeWhen` method to include the attributes in the response only when the given condition is `true`:"
msgstr "有時候，我們可能會有數個屬性想依據相同的條件來被包含在 Resource 回應中。在這種情況下，可以使用 `mergeWhen` 方法來只在給定條件為 `true` 時將這些屬性包含在回應中："

#: docs/8.x/eloquent-resources.md:block 99 (code)
msgid "/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        $this->mergeWhen(Auth::user()->isAdmin(), [\n"
"            'first-secret' => 'value',\n"
"            'second-secret' => 'value',\n"
"        ]),\n"
"        'created_at' => $this->created_at,\n"
"        'updated_at' => $this->updated_at,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 100 (paragraph)
msgid "Again, if the given condition is `false`, these attributes will be removed from the resource response before it is sent to the client."
msgstr "跟剛才一樣，如果給定條件為 `false`，則這些屬性將在傳回給用戶端前被從 Resource 回應中移除。"

#: docs/8.x/eloquent-resources.md:block 101 (quote)
msgid "{note} The `mergeWhen` method should not be used within arrays that mix string and numeric keys. Furthermore, it should not be used within arrays with numeric keys that are not ordered sequentially."
msgstr ""

#: docs/8.x/eloquent-resources.md:block 102 (paragraph)
msgid "<a name=\"conditional-relationships\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 103 (header)
msgid "Conditional Relationships"
msgstr "有條件的關聯"

#: docs/8.x/eloquent-resources.md:block 104 (paragraph)
msgid "In addition to conditionally loading attributes, you may conditionally include relationships on your resource responses based on if the relationship has already been loaded on the model. This allows your controller to decide which relationships should be loaded on the model and your resource can easily include them only when they have actually been loaded. Ultimately, this makes it easier to avoid \"N+1\" query problems within your resources."
msgstr "除了有條件地載入屬性外，我們還能依據關聯是否已載入到 Model 上來有條件地將關聯包含在 Resource 回應中。這樣一來，我們的 Controller 就能決定要載入哪些關聯，而 Resource 就可以輕鬆地在有載入這些關聯的時候才將這些關聯包含在回應中。最後，這麼做就能輕鬆地在 Resource 內避免「N+1」查詢。"

#: docs/8.x/eloquent-resources.md:block 105 (paragraph)
msgid "The `whenLoaded` method may be used to conditionally load a relationship. In order to avoid unnecessarily loading relationships, this method accepts the name of the relationship instead of the relationship itself:"
msgstr "可以使用 `whenLoaded` 方法來有條件地載入關聯。為了避免不必要地載入關聯，這個方法接受關聯的名稱，而非關聯物件本身："

#: docs/8.x/eloquent-resources.md:block 106 (code)
msgid "use App\\Http\\Resources\\PostResource;\n\n"
"/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'email' => $this->email,\n"
"        'posts' => PostResource::collection($this->whenLoaded('posts')),\n"
"        'created_at' => $this->created_at,\n"
"        'updated_at' => $this->updated_at,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 107 (paragraph)
msgid "In this example, if the relationship has not been loaded, the `posts` key will be removed from the resource response before it is sent to the client."
msgstr "在這個例子中，若尚未載入關聯，則在回傳給用戶端前 `posts` 索引鍵就會被移除。"

#: docs/8.x/eloquent-resources.md:block 108 (paragraph)
msgid "<a name=\"conditional-pivot-information\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 109 (header)
msgid "Conditional Pivot Information"
msgstr "有條件的樞紐 (Pivot) 資訊"

#: docs/8.x/eloquent-resources.md:block 110 (paragraph)
msgid "In addition to conditionally including relationship information in your resource responses, you may conditionally include data from the intermediate tables of many-to-many relationships using the `whenPivotLoaded` method. The `whenPivotLoaded` method accepts the name of the pivot table as its first argument. The second argument should be a closure that returns the value to be returned if the pivot information is available on the model:"
msgstr "除了有條件地將關聯資訊加到 Resource 回應內之外，我們還能使用 `whenPivotLoaded` 方法來有條件地包含 Many-to-many 關聯的中介資料表中的資料庫。`whenPivotLoaded` 方法的第一個引數為樞紐資料表的名稱，第二個引數則為一個閉包，該閉包應回傳當 Model 上有樞紐資訊時要回傳的值："

#: docs/8.x/eloquent-resources.md:block 111 (code)
msgid "/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'expires_at' => $this->whenPivotLoaded('role_user', function () {\n"
"            return $this->pivot->expires_at;\n"
"        }),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 112 (paragraph)
msgid "If your relationship is using a [custom intermediate table model](/docs/{{version}}/eloquent-relationships#defining-custom-intermediate-table-models), you may pass an instance of the intermediate table model as the first argument to the `whenPivotLoaded` method:"
msgstr "若關聯使用[自訂的中介資料表 Model](/docs/{{version}}/eloquent-relationships#defining-custom-intermediate-table-models)，則應講樞紐資料表的實體作為第一個引數傳給 `whenPivotLoaded` 方法："

#: docs/8.x/eloquent-resources.md:block 113 (code)
msgid "'expires_at' => $this->whenPivotLoaded(new Membership, function () {\n"
"    return $this->pivot->expires_at;\n"
"}),\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 114 (paragraph)
msgid "If your intermediate table is using an accessor other than `pivot`, you may use the `whenPivotLoadedAs` method:"
msgstr "若中介資料表使用 `pivot` 以外的存取方法，則可以使用 `whenPivotLoadesAs` 方法："

#: docs/8.x/eloquent-resources.md:block 115 (code)
msgid "/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'id' => $this->id,\n"
"        'name' => $this->name,\n"
"        'expires_at' => $this->whenPivotLoadedAs('subscription', 'role_user', function () {\n"
"            return $this->subscription->expires_at;\n"
"        }),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 116 (paragraph)
msgid "<a name=\"adding-meta-data\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 117 (header)
msgid "Adding Meta Data"
msgstr "新增詮釋資料"

#: docs/8.x/eloquent-resources.md:block 118 (paragraph)
msgid "Some JSON API standards require the addition of meta data to your resource and resource collections responses. This often includes things like `links` to the resource or related resources, or meta data about the resource itself. If you need to return additional meta data about a resource, include it in your `toArray` method. For example, you might include `link` information when transforming a resource collection:"
msgstr "有的 JSON API 標準中要求要有 Resource 與 Resource Collection 回應的詮釋資料 (Meta Data)。通常包含如 Resource 或關聯 Resource 的連結 (`links`)、或是有關 Resource 本身的詮釋資料等。若想回傳關於 Resource 的額外詮釋資料，請將這些資料包含在 `toArray` 方法內。舉例來說，我們可能會想在轉換 Resource Collection 時包含 `link` 資訊："

#: docs/8.x/eloquent-resources.md:block 119 (code)
msgid "/**\n"
" * Transform the resource into an array.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return array\n"
" */\n"
"public function toArray($request)\n"
"{\n"
"    return [\n"
"        'data' => $this->collection,\n"
"        'links' => [\n"
"            'self' => 'link-value',\n"
"        ],\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 120 (paragraph)
msgid "When returning additional meta data from your resources, you never have to worry about accidentally overriding the `links` or `meta` keys that are automatically added by Laravel when returning paginated responses. Any additional `links` you define will be merged with the links provided by the paginator."
msgstr "當從 Resource 內回傳額外的詮釋資料時，不需擔心是否會不小心複寫在回傳經過分頁的資料時 Laravel 自動新增的 `links` 或 `meta` 等資料。若有定義額外的 `links`，這些 `links` 會跟 Paginator 提供的連結合併在一起。"

#: docs/8.x/eloquent-resources.md:block 121 (paragraph)
msgid "<a name=\"top-level-meta-data\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 122 (header)
msgid "Top Level Meta Data"
msgstr "最上層的詮釋資料"

#: docs/8.x/eloquent-resources.md:block 123 (paragraph)
msgid "Sometimes you may wish to only include certain meta data with a resource response if the resource is the outermost resource being returned. Typically, this includes meta information about the response as a whole. To define this meta data, add a `with` method to your resource class. This method should return an array of meta data to be included with the resource response only when the resource is the outermost resource being transformed:"
msgstr "有時候，我們可能會想只在當目前 Resource 是回傳的最外層 Resource 時才包含某些詮釋資料。一般來說，這種情況的詮釋資料就是對於回應的詮釋資料。若要定義這種詮釋資料，可在 Resource 類別內加上一個 `with` 方法。這個方法應回傳一組包含詮釋資料的陣列，用以在目前 Resource 是最外層 Resource 時包含在 Resource 回應內："

#: docs/8.x/eloquent-resources.md:block 124 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\n"
"class UserCollection extends ResourceCollection\n"
"{\n"
"    /**\n"
"     * Transform the resource collection into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return parent::toArray($request);\n"
"    }\n\n"
"    /**\n"
"     * Get additional data that should be returned with the resource array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function with($request)\n"
"    {\n"
"        return [\n"
"            'meta' => [\n"
"                'key' => 'value',\n"
"            ],\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 125 (paragraph)
msgid "<a name=\"adding-meta-data-when-constructing-resources\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 126 (header)
msgid "Adding Meta Data When Constructing Resources"
msgstr "在建立 Resource 時加上詮釋資料"

#: docs/8.x/eloquent-resources.md:block 127 (paragraph)
msgid "You may also add top-level data when constructing resource instances in your route or controller. The `additional` method, which is available on all resources, accepts an array of data that should be added to the resource response:"
msgstr "我們也可以在路由或 Controller 內建構 Resource 時加上最上層的資料。 所有 Resource 內都提供了一個 `additional` 方法，可將要加到 Resource 回應內的資料放在陣列中傳給該方法："

#: docs/8.x/eloquent-resources.md:block 128 (code)
msgid "return (new UserCollection(User::all()->load('roles')))\n"
"                ->additional(['meta' => [\n"
"                    'key' => 'value',\n"
"                ]]);\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 129 (paragraph)
msgid "<a name=\"resource-responses\"></a>"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 130 (header)
msgid "Resource Responses"
msgstr "Resource 回應"

#: docs/8.x/eloquent-resources.md:block 131 (paragraph)
msgid "As you have already read, resources may be returned directly from routes and controllers:"
msgstr "剛才已經讀過，我們可以直接從路由或 Controller 內回傳 Resource："

#: docs/8.x/eloquent-resources.md:block 133 (paragraph)
msgid "However, sometimes you may need to customize the outgoing HTTP response before it is sent to the client. There are two ways to accomplish this. First, you may chain the `response` method onto the resource. This method will return an `Illuminate\\Http\\JsonResponse` instance, giving you full control over the response's headers:"
msgstr "不過，有的時候我們會需要在回應被傳回用戶端前自訂外連 HTTP 回應。有兩種方法可以自訂外連 HTTP 回應。第一種方法，我們可以將 `response` 方法串連到 Resource 後面。該方法會回傳一個 `Illuminate\\Http\\JsonResponse` 實體，讓我們能對回應的標頭有完整的控制權："

#: docs/8.x/eloquent-resources.md:block 134 (code)
msgid "use App\\Http\\Resources\\UserResource;\n"
"use App\\Models\\User;\n\n"
"Route::get('/user', function () {\n"
"    return (new UserResource(User::find(1)))\n"
"                ->response()\n"
"                ->header('X-Value', 'True');\n"
"});\n"
msgstr ""

#: docs/8.x/eloquent-resources.md:block 135 (paragraph)
msgid "Alternatively, you may define a `withResponse` method within the resource itself. This method will be called when the resource is returned as the outermost resource in a response:"
msgstr "或者，也可以在 Resource 裡面定義一個 `withResponse`。這個方法會在該 Resource 是回應中最外層 Resource 時被呼叫："

#: docs/8.x/eloquent-resources.md:block 136 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Resources;\n\n"
"use Illuminate\\Http\\Resources\\Json\\JsonResource;\n\n"
"class UserResource extends JsonResource\n"
"{\n"
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"        ];\n"
"    }\n\n"
"    /**\n"
"     * Customize the outgoing response for the resource.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Illuminate\\Http\\Response  $response\n"
"     * @return void\n"
"     */\n"
"    public function withResponse($request, $response)\n"
"    {\n"
"        $response->header('X-Value', 'True');\n"
"    }\n"
"}\n"
msgstr ""

