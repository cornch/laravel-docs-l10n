msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-01-29 05:45\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/artisan.pot\n"
"X-Crowdin-File-ID: 9\n"

# File: docs/8.x/artisan.md, line: 1
# File: docs/master/artisan.md, line: 1
#. type: Title #
#, no-wrap
msgid "Artisan Console"
msgstr "Artisan 主控台"

# File: docs/8.x/artisan.md, line: 24
# File: docs/master/artisan.md, line: 24
#. type: Plain text
#, no-wrap
msgid "- [Introduction](#introduction)\n"
"    - [Tinker (REPL)](#tinker)\n"
"- [Writing Commands](#writing-commands)\n"
"    - [Generating Commands](#generating-commands)\n"
"    - [Command Structure](#command-structure)\n"
"    - [Closure Commands](#closure-commands)\n"
"- [Defining Input Expectations](#defining-input-expectations)\n"
"    - [Arguments](#arguments)\n"
"    - [Options](#options)\n"
"    - [Input Arrays](#input-arrays)\n"
"    - [Input Descriptions](#input-descriptions)\n"
"- [Command I/O](#command-io)\n"
"    - [Retrieving Input](#retrieving-input)\n"
"    - [Prompting For Input](#prompting-for-input)\n"
"    - [Writing Output](#writing-output)\n"
"- [Registering Commands](#registering-commands)\n"
"- [Programmatically Executing Commands](#programmatically-executing-commands)\n"
"    - [Calling Commands From Other Commands](#calling-commands-from-other-commands)\n"
"- [Signal Handling](#signal-handling)\n"
"- [Stub Customization](#stub-customization)\n"
"- [Events](#events)\n"
msgstr "- [簡介](#introduction)\n"
"    - [Tinker (REPL)](#tinker)\n"
"- [撰寫指令](#writing-commands)\n"
"    - [產生指令](#generating-commands)\n"
"    - [指令架構](#command-structure)\n"
"    - [閉包指令](#closure-commands)\n"
"- [定義預期的輸入](#defining-input-expectations)\n"
"    - [引數](#arguments)\n"
"    - [選項](#options)\n"
"    - [輸入陣列](#input-arrays)\n"
"    - [輸入描述](#input-descriptions)\n"
"- [指令 I/O](#command-io)\n"
"    - [截取輸入](#retrieving-input)\n"
"    - [為輸入進行日式](#prompting-for-input)\n"
"    - [撰寫輸出](#writing-output)\n"
"- [註冊指令](#registering-commands)\n"
"- [通過程式碼執行指令](#programmatically-executing-commands)\n"
"    - [在其他指令內執行指令](#calling-commands-from-other-commands)\n"
"- [處理訊號](#signal-handling)\n"
"- [自定 Stub](#stub-customization)\n"
"- [事件](#events)\n"

# File: docs/8.x/artisan.md, line: 26
# File: docs/master/artisan.md, line: 26
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/artisan.md, line: 26
# File: docs/master/artisan.md, line: 26
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/artisan.md, line: 29
# File: docs/master/artisan.md, line: 29
#. type: Plain text
msgid "Artisan is the command line interface included with Laravel. Artisan exists at the root of your application as the `artisan` script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the `list` command:"
msgstr "Artisan 是 Laravel 內所包含的指令列界面。Artisan 是放在專案根目錄的 `artisan` 工序指令，提供多種實用指令來幫你撰寫你的專案。若要檢視所有可用的 Artisan 指令，可以使用 `list` 指令："

# File: docs/8.x/artisan.md, line: 31
# File: docs/master/artisan.md, line: 31
#. type: Plain text
#, no-wrap
msgid "    php artisan list\n"
msgstr "    php artisan list\n"

# File: docs/8.x/artisan.md, line: 33
# File: docs/master/artisan.md, line: 33
#. type: Plain text
msgid "Every command also includes a \"help\" screen which displays and describes the command's available arguments and options. To view a help screen, precede the name of the command with `help`:"
msgstr "每個指令也包含了一個「help」畫面，用於顯示指令的說明以及可用的引數與選項。若要檢視輔助說明畫面，請在指令名稱的前面加上 `help`："

# File: docs/8.x/artisan.md, line: 35
# File: docs/master/artisan.md, line: 35
#. type: Plain text
#, no-wrap
msgid "    php artisan help migrate\n"
msgstr "    php artisan help migrate\n"

# File: docs/8.x/artisan.md, line: 37
# File: docs/master/artisan.md, line: 37
#. type: Plain text
#, no-wrap
msgid "<a name=\"laravel-sail\"></a>\n"
msgstr "<a name=\"laravel-sail\"></a>\n"

# File: docs/8.x/artisan.md, line: 37
# File: docs/master/artisan.md, line: 37
#. type: Title ####
#, no-wrap
msgid "Laravel Sail"
msgstr "Laravel Sail"

# File: docs/8.x/artisan.md, line: 40
# File: docs/master/artisan.md, line: 40
#. type: Plain text
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail) as your local development environment, remember to use the `sail` command line to invoke Artisan commands. Sail will execute your Artisan commands within your application's Docker containers:"
msgstr "若使用 [Laravel Sail](/docs/{{version}}/sail) 作為本機開發環境，請記得使用 `sail` 指令列來叫用 Artisan 指令。Sail 會在專案的 Docker 容器內執行 Artisan 指令。"

# File: docs/8.x/artisan.md, line: 42
# File: docs/master/artisan.md, line: 42
#. type: Plain text
#, no-wrap
msgid "    ./sail artisan list\n"
msgstr "    ./sail artisan list\n"

# File: docs/8.x/artisan.md, line: 44
# File: docs/master/artisan.md, line: 44
#. type: Plain text
#, no-wrap
msgid "<a name=\"tinker\"></a>\n"
msgstr "<a name=\"tinker\"></a>\n"

# File: docs/8.x/artisan.md, line: 44
# File: docs/master/artisan.md, line: 44
#. type: Title ###
#, no-wrap
msgid "Tinker (REPL)"
msgstr "Tinker (REPL)"

# File: docs/8.x/artisan.md, line: 47
# File: docs/master/artisan.md, line: 47
#. type: Plain text
msgid "Laravel Tinker is a powerful REPL for the Laravel framework, powered by the [PsySH](https://github.com/bobthecow/psysh) package."
msgstr "Laravel Tinker 是用於 Laravel 框架的強大 REPL，由 [PsySH](https://github.com/bobthecow/psysh) 套件提供。"

# File: docs/8.x/artisan.md, line: 49
# File: docs/master/artisan.md, line: 49
#. type: Plain text
#, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr "<a name=\"installation\"></a>\n"

# File: docs/8.x/artisan.md, line: 49
# File: docs/master/artisan.md, line: 49
#. type: Title ####
#, no-wrap
msgid "Installation"
msgstr "安裝"

# File: docs/8.x/artisan.md, line: 52
# File: docs/master/artisan.md, line: 52
#. type: Plain text
msgid "All Laravel applications include Tinker by default. However, you may install Tinker using Composer if you have previously removed it from your application:"
msgstr "所有的 Laravel 專案預設都包含了 Tinker。但若先前曾自專案內移除 Tinker，則可使用 Composer 來安裝："

# File: docs/8.x/artisan.md, line: 54
# File: docs/master/artisan.md, line: 54
#. type: Plain text
#, no-wrap
msgid "    composer require laravel/tinker\n"
msgstr "    composer require laravel/tinker\n"

# File: docs/8.x/artisan.md, line: 56
# File: docs/master/artisan.md, line: 56
#. type: Plain text
#, no-wrap
msgid "> {tip} Looking for a graphical UI for interacting with your Laravel application? Check out [Tinkerwell](https://tinkerwell.app)!\n"
msgstr "> {tip} 想找個能與你的 Laravel 專案互動的圖形化 UI 嗎？試試 [Tinkerwell](https://tinkerwell.app) 吧！\n"

# File: docs/8.x/artisan.md, line: 58
# File: docs/master/artisan.md, line: 58
#. type: Plain text
#, no-wrap
msgid "<a name=\"usage\"></a>\n"
msgstr "<a name=\"usage\"></a>\n"

# File: docs/8.x/artisan.md, line: 58
# File: docs/master/artisan.md, line: 58
#. type: Title ####
#, no-wrap
msgid "Usage"
msgstr "使用"

# File: docs/8.x/artisan.md, line: 61
# File: docs/master/artisan.md, line: 61
#. type: Plain text
msgid "Tinker allows you to interact with your entire Laravel application on the command line, including your Eloquent models, jobs, events, and more. To enter the Tinker environment, run the `tinker` Artisan command:"
msgstr "Tinker 可讓你在指令列內與完整的 Laravel 專案進行互動，包含 Eloquent Model、任務、事件…等。要進入 Tinker 環境，請執行 `tinker` Artisan 指令："

# File: docs/8.x/artisan.md, line: 63
# File: docs/master/artisan.md, line: 63
#. type: Plain text
#, no-wrap
msgid "    php artisan tinker\n"
msgstr "    php artisan tinker\n"

# File: docs/8.x/artisan.md, line: 65
# File: docs/master/artisan.md, line: 65
#. type: Plain text
msgid "You can publish Tinker's configuration file using the `vendor:publish` command:"
msgstr "可以通過 `vendor:publish` 指令來安裝 Tinker 的組態設定檔："

# File: docs/8.x/artisan.md, line: 67
# File: docs/master/artisan.md, line: 67
#. type: Plain text
#, no-wrap
msgid "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr "    php artisan vendor:publish --provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"

# File: docs/8.x/artisan.md, line: 69
# File: docs/master/artisan.md, line: 69
#. type: Plain text
#, no-wrap
msgid "> {note} The `dispatch` helper function and `dispatch` method on the `Dispatchable` class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use `Bus::dispatch` or `Queue::push` to dispatch jobs.\n"
msgstr "> {note} `dispatch` 輔助函式與 `Dispatchable` 類別上的 `dispatch` 方法需要仰賴垃圾回收機制來將任務放進佇列中。因此，在使用 Tinker 時，應使用 `Bus::dispatch` 或 `Queue::push` 來分派任務。\n"

# File: docs/8.x/artisan.md, line: 71
# File: docs/master/artisan.md, line: 71
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-allow-list\"></a>\n"
msgstr "<a name=\"command-allow-list\"></a>\n"

# File: docs/8.x/artisan.md, line: 71
# File: docs/master/artisan.md, line: 71
#. type: Title ####
#, no-wrap
msgid "Command Allow List"
msgstr "指令允許列表"

# File: docs/8.x/artisan.md, line: 74
# File: docs/master/artisan.md, line: 74
#. type: Plain text
msgid "Tinker utilizes an \"allow\" list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` commands. If you would like to allow more commands you may add them to the `commands` array in your `tinker.php` configuration file:"
msgstr "Tinker 使用一個「allow」清單來判斷哪些 Artisan 指令可在其 Shell 內執行。預設情況下，可以執行 `clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize` 以及 `up` 指令。若想允許更多指令，可以將要允許的指令加在 `tinker.php` 組態設定檔中的 `commands` 陣列內："

# File: docs/8.x/artisan.md, line: 78
# File: docs/master/artisan.md, line: 78
#. type: Plain text
#, no-wrap
msgid "    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"
msgstr "    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"

# File: docs/8.x/artisan.md, line: 80
# File: docs/master/artisan.md, line: 80
#. type: Plain text
#, no-wrap
msgid "<a name=\"classes-that-should-not-be-aliased\"></a>\n"
msgstr "<a name=\"classes-that-should-not-be-aliased\"></a>\n"

# File: docs/8.x/artisan.md, line: 80
# File: docs/master/artisan.md, line: 80
#. type: Title ####
#, no-wrap
msgid "Classes That Should Not Be Aliased"
msgstr "不應以別名使用的類別"

# File: docs/8.x/artisan.md, line: 83
# File: docs/master/artisan.md, line: 83
#. type: Plain text
msgid "Typically, Tinker automatically aliases classes as you interact with them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the `dont_alias` array of your `tinker.php` configuration file:"
msgstr "一般來說，Tinker 會在使用過程中自動為類別加上別名。但有些類別可能不希望被設定別名。可以通過在 `tinker.php` 組態設定檔中的 `dont_alias` 陣列中列出這些不想被自動別名的類別來達成："

# File: docs/8.x/artisan.md, line: 87
# File: docs/master/artisan.md, line: 87
#. type: Plain text
#, no-wrap
msgid "    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"
msgstr "    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"

# File: docs/8.x/artisan.md, line: 89
# File: docs/master/artisan.md, line: 89
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-commands\"></a>\n"
msgstr "<a name=\"writing-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 89
# File: docs/master/artisan.md, line: 89
#. type: Title ##
#, no-wrap
msgid "Writing Commands"
msgstr "撰寫指令"

# File: docs/8.x/artisan.md, line: 92
# File: docs/master/artisan.md, line: 92
#. type: Plain text
msgid "In addition to the commands provided with Artisan, you may build your own custom commands. Commands are typically stored in the `app/Console/Commands` directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer."
msgstr "除了 Artisan 提供的指令外，也可以建制自己的自定指令。指令通常儲存於 `app/Console/Commands` 目錄內。但是，只要你的自定指令可以被 Composer 載入，也可以自行選擇儲存位置。"

# File: docs/8.x/artisan.md, line: 94
# File: docs/master/artisan.md, line: 94
#. type: Plain text
#, no-wrap
msgid "<a name=\"generating-commands\"></a>\n"
msgstr "<a name=\"generating-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 94
# File: docs/master/artisan.md, line: 94
#. type: Title ###
#, no-wrap
msgid "Generating Commands"
msgstr "產生指令"

# File: docs/8.x/artisan.md, line: 97
# File: docs/master/artisan.md, line: 97
#. type: Plain text
msgid "To create a new command, you may use the `make:command` Artisan command. This command will create a new command class in the `app/Console/Commands` directory. Don't worry if this directory does not exist in your application - it will be created the first time you run the `make:command` Artisan command:"
msgstr "若要建立新指令，可以使用 `make:command` Artisan 指令。該指令會在 `app/Console/Commands` 目錄下建立一個新的指令類別。若你的專案中沒有這個資料夾，請別擔心——第一次執行 `make:command` Artisan 指令的時候會自動建立該資料夾："

# File: docs/8.x/artisan.md, line: 99
# File: docs/master/artisan.md, line: 99
#. type: Plain text
#, no-wrap
msgid "    php artisan make:command SendEmails\n"
msgstr "    php artisan make:command SendEmails\n"

# File: docs/8.x/artisan.md, line: 101
# File: docs/master/artisan.md, line: 101
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-structure\"></a>\n"
msgstr "<a name=\"command-structure\"></a>\n"

# File: docs/8.x/artisan.md, line: 101
# File: docs/master/artisan.md, line: 101
#. type: Title ###
#, no-wrap
msgid "Command Structure"
msgstr "指令結構"

# File: docs/8.x/artisan.md, line: 104
# File: docs/master/artisan.md, line: 104
#. type: Plain text
msgid "After generating your command, you should define appropriate values for the `signature` and `description` properties of the class. These properties will be used when displaying your command on the `list` screen. The `signature` property also allows you to define [your command's input expectations](#defining-input-expectations). The `handle` method will be called when your command is executed. You may place your command logic in this method."
msgstr "產生指令後，應為類別的 `signature` 與 `description` 屬性定義適當的值。當在 `list` 畫面內顯示該指令時，就會用到這些屬性。`signature` 屬性可以用來定義 [指令預期的輸入](#defining-input-expectations)。`handle` 方法會在執行該指令時呼叫。可以將指令的邏輯放在該方法內。"

# File: docs/8.x/artisan.md, line: 106
# File: docs/master/artisan.md, line: 106
#. type: Plain text
msgid "Let's take a look at an example command. Note that we are able to request any dependencies we need via the command's `handle` method. The Laravel [service container](/docs/{{version}}/container) will automatically inject all dependencies that are type-hinted in this method's signature:"
msgstr "來看看一個範例指令。請注意，我們可以通過指令的 `handle` 方法來要求任意的相依性。Laravel 的 [Service Container](/docs/{{version}}/container) 會自動插入所有在方法簽章內有型別提示的相依性。"

# File: docs/8.x/artisan.md, line: 108
# File: docs/master/artisan.md, line: 108
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/artisan.md, line: 110
# File: docs/master/artisan.md, line: 110
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Console\\Commands;\n"
msgstr "    namespace App\\Console\\Commands;\n"

# File: docs/8.x/artisan.md, line: 114
# File: docs/master/artisan.md, line: 114
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"
msgstr "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"

# File: docs/8.x/artisan.md, line: 123
# File: docs/master/artisan.md, line: 123
#. type: Plain text
#, no-wrap
msgid "    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"
msgstr "    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"

# File: docs/8.x/artisan.md, line: 130
# File: docs/master/artisan.md, line: 130
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"
msgstr "        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"

# File: docs/8.x/artisan.md, line: 140
# File: docs/master/artisan.md, line: 140
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"
msgstr "        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"

# File: docs/8.x/artisan.md, line: 152
# File: docs/master/artisan.md, line: 152
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 154
# File: docs/master/artisan.md, line: 154
#. type: Plain text
#, no-wrap
msgid "> {tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example above, note that we inject a service class to do the \"heavy lifting\" of sending the e-mails.\n"
msgstr "> {tip} 為了提升程式碼重複使用率，最好保持主控台指令精簡，並將主要的內容都交給專案中其他服務來完成。在上方的例子中，可以注意到我們插入了一個服務類別 (Service Class) 來處理寄送 E-Mail 的這個「重責大任」。\n"

# File: docs/8.x/artisan.md, line: 156
# File: docs/master/artisan.md, line: 156
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-commands\"></a>\n"
msgstr "<a name=\"closure-commands\"></a>\n"

# File: docs/8.x/artisan.md, line: 156
# File: docs/master/artisan.md, line: 156
#. type: Title ###
#, no-wrap
msgid "Closure Commands"
msgstr "閉包指令"

# File: docs/8.x/artisan.md, line: 159
# File: docs/master/artisan.md, line: 159
#. type: Plain text
msgid "Closure based commands provide an alternative to defining console commands as classes. In the same way that route closures are an alternative to controllers, think of command closures as an alternative to command classes. Within the `commands` method of your `app/Console/Kernel.php` file, Laravel loads the `routes/console.php` file:"
msgstr "基於閉包的指令提供了以類別定義主控台指令外的另一個選擇。就如同使用閉包來定義路由可用來代替控制器一樣，可以將指令閉包想象成是指令類別的代替。在 `app/Console/Kernel.php` 檔中的 `commands` 方法內，Laravel 載入了 `routes/console.php` 檔："

# File: docs/8.x/artisan.md, line: 169
# File: docs/master/artisan.md, line: 169
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"
msgstr "    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"

# File: docs/8.x/artisan.md, line: 171
# File: docs/master/artisan.md, line: 171
#. type: Plain text
msgid "Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your closure based console commands using the `Artisan::command` method. The `command` method accepts two arguments: the [command signature](#defining-input-expectations) and a closure which receives the command's arguments and options:"
msgstr "這個檔案並沒有定義 HTTP 路由，而是定義從主控台「路由」進入專案的進入點。在該檔案內，可以通過 `Artisan::command` 方法來定義基於閉包的主控台指令。`command` 方法接受 2 個引數：[指令簽章](#defining-input-expectations)，以及一個用來接收指令引數與選項的閉包："

# File: docs/8.x/artisan.md, line: 175
# File: docs/master/artisan.md, line: 175
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"
msgstr "    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"

# File: docs/8.x/artisan.md, line: 177
# File: docs/master/artisan.md, line: 177
#. type: Plain text
msgid "The closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class."
msgstr "這裡的閉包有綁定到該指令的基礎類別執行個體，因此可以像在完整的指令類別內一樣存取所有的輔助函式。"

# File: docs/8.x/artisan.md, line: 179
# File: docs/master/artisan.md, line: 179
#. type: Plain text
#, no-wrap
msgid "<a name=\"type-hinting-dependencies\"></a>\n"
msgstr "<a name=\"type-hinting-dependencies\"></a>\n"

# File: docs/8.x/artisan.md, line: 179
# File: docs/master/artisan.md, line: 179
#. type: Title ####
#, no-wrap
msgid "Type-Hinting Dependencies"
msgstr "對依賴進行型別提示"

# File: docs/8.x/artisan.md, line: 182
# File: docs/master/artisan.md, line: 182
#. type: Plain text
msgid "In addition to receiving your command's arguments and options, command closures may also type-hint additional dependencies that you would like resolved out of the [service container](/docs/{{version}}/container):"
msgstr "除了接收指令的引數與選項外，指令閉包也可以通過型別提示來向 [Service Container](/docs/{{version}}/container) 解析額外的依賴。"

# File: docs/8.x/artisan.md, line: 185
# File: docs/master/artisan.md, line: 185
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 189
# File: docs/master/artisan.md, line: 189
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) {\n"
"        $drip->send(User::find($user));\n"
"    });\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 191
# File: docs/master/artisan.md, line: 191
#. type: Plain text
#, no-wrap
msgid "<a name=\"closure-command-descriptions\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 191
# File: docs/master/artisan.md, line: 191
#. type: Title ####
#, no-wrap
msgid "Closure Command Descriptions"
msgstr ""

# File: docs/8.x/artisan.md, line: 194
# File: docs/master/artisan.md, line: 194
#. type: Plain text
msgid "When defining a closure based command, you may use the `purpose` method to add a description to the command. This description will be displayed when you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

# File: docs/8.x/artisan.md, line: 198
# File: docs/master/artisan.md, line: 198
#. type: Plain text
#, no-wrap
msgid "    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 200
# File: docs/master/artisan.md, line: 200
#. type: Plain text
#, no-wrap
msgid "<a name=\"defining-input-expectations\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 200
# File: docs/master/artisan.md, line: 200
#. type: Title ##
#, no-wrap
msgid "Defining Input Expectations"
msgstr ""

# File: docs/8.x/artisan.md, line: 203
# File: docs/master/artisan.md, line: 203
#. type: Plain text
msgid "When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the `signature` property on your commands. The `signature` property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."
msgstr ""

# File: docs/8.x/artisan.md, line: 205
# File: docs/master/artisan.md, line: 205
#. type: Plain text
#, no-wrap
msgid "<a name=\"arguments\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 205
# File: docs/master/artisan.md, line: 205
#. type: Title ###
#, no-wrap
msgid "Arguments"
msgstr ""

# File: docs/8.x/artisan.md, line: 208
# File: docs/master/artisan.md, line: 208
#. type: Plain text
msgid "All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: `user`:"
msgstr ""

# File: docs/8.x/artisan.md, line: 215
# File: docs/master/artisan.md, line: 215
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 217
# File: docs/master/artisan.md, line: 217
#. type: Plain text
msgid "You may also make arguments optional or define default values for arguments:"
msgstr ""

# File: docs/8.x/artisan.md, line: 220
# File: docs/master/artisan.md, line: 220
#. type: Plain text
#, no-wrap
msgid "    // Optional argument...\n"
"    mail:send {user?}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 223
# File: docs/master/artisan.md, line: 223
#. type: Plain text
#, no-wrap
msgid "    // Optional argument with default value...\n"
"    mail:send {user=foo}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 225
# File: docs/master/artisan.md, line: 225
#. type: Plain text
#, no-wrap
msgid "<a name=\"options\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 225
# File: docs/master/artisan.md, line: 225
#. type: Title ###
#, no-wrap
msgid "Options"
msgstr ""

# File: docs/8.x/artisan.md, line: 228
# File: docs/master/artisan.md, line: 228
#. type: Plain text
msgid "Options, like arguments, are another form of user input. Options are prefixed by two hyphens (`--`) when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"
msgstr ""

# File: docs/8.x/artisan.md, line: 235
# File: docs/master/artisan.md, line: 235
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 237
# File: docs/master/artisan.md, line: 237
#. type: Plain text
msgid "In this example, the `--queue` switch may be specified when calling the Artisan command. If the `--queue` switch is passed, the value of the option will be `true`. Otherwise, the value will be `false`:"
msgstr ""

# File: docs/8.x/artisan.md, line: 239
# File: docs/master/artisan.md, line: 239
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 --queue\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 241
# File: docs/master/artisan.md, line: 241
#. type: Plain text
#, no-wrap
msgid "<a name=\"options-with-values\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 241
# File: docs/master/artisan.md, line: 241
#. type: Title ####
#, no-wrap
msgid "Options With Values"
msgstr ""

# File: docs/8.x/artisan.md, line: 244
# File: docs/master/artisan.md, line: 244
#. type: Plain text
msgid "Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a `=` sign:"
msgstr ""

# File: docs/8.x/artisan.md, line: 251
# File: docs/master/artisan.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 253
# File: docs/master/artisan.md, line: 253
#. type: Plain text
msgid "In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be `null`:"
msgstr ""

# File: docs/8.x/artisan.md, line: 255
# File: docs/master/artisan.md, line: 255
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 --queue=default\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 257
# File: docs/master/artisan.md, line: 257
#. type: Plain text
msgid "You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"
msgstr ""

# File: docs/8.x/artisan.md, line: 259
# File: docs/master/artisan.md, line: 259
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--queue=default}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 261
# File: docs/master/artisan.md, line: 261
#. type: Plain text
#, no-wrap
msgid "<a name=\"option-shortcuts\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 261
# File: docs/master/artisan.md, line: 261
#. type: Title ####
#, no-wrap
msgid "Option Shortcuts"
msgstr ""

# File: docs/8.x/artisan.md, line: 264
# File: docs/master/artisan.md, line: 264
#. type: Plain text
msgid "To assign a shortcut when defining an option, you may specify it before the option name and use the `|` character as a delimiter to separate the shortcut from the full option name:"
msgstr ""

# File: docs/8.x/artisan.md, line: 266
# File: docs/master/artisan.md, line: 266
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--Q|queue}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 268
# File: docs/master/artisan.md, line: 268
#. type: Plain text
msgid "When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen:"
msgstr ""

# File: docs/8.x/artisan.md, line: 270
# File: docs/master/artisan.md, line: 270
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send 1 -Q\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 272
# File: docs/master/artisan.md, line: 272
#. type: Plain text
#, no-wrap
msgid "<a name=\"input-arrays\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 272
# File: docs/master/artisan.md, line: 272
#. type: Title ###
#, no-wrap
msgid "Input Arrays"
msgstr ""

# File: docs/8.x/artisan.md, line: 275
# File: docs/master/artisan.md, line: 275
#. type: Plain text
msgid "If you would like to define arguments or options to expect multiple input values, you may use the `*` character. First, let's take a look at an example that specifies such an argument:"
msgstr ""

# File: docs/8.x/artisan.md, line: 277
# File: docs/master/artisan.md, line: 277
#. type: Plain text
#, no-wrap
msgid "    mail:send {user*}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 279
# File: docs/master/artisan.md, line: 279
#. type: Plain text
msgid "When calling this method, the `user` arguments may be passed in order to the command line. For example, the following command will set the value of `user` to an array with `foo` and `bar` as its values:"
msgstr ""

# File: docs/8.x/artisan.md, line: 281
# File: docs/master/artisan.md, line: 281
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send foo bar\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 283
# File: docs/master/artisan.md, line: 283
#. type: Plain text
msgid "This `*` character can be combined with an optional argument definition to allow zero or more instances of an argument:"
msgstr ""

# File: docs/8.x/artisan.md, line: 285
# File: docs/master/artisan.md, line: 285
#. type: Plain text
#, no-wrap
msgid "    mail:send {user?*}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 287
# File: docs/master/artisan.md, line: 287
#. type: Plain text
#, no-wrap
msgid "<a name=\"option-arrays\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 287
# File: docs/master/artisan.md, line: 287
#. type: Title ####
#, no-wrap
msgid "Option Arrays"
msgstr ""

# File: docs/8.x/artisan.md, line: 290
# File: docs/master/artisan.md, line: 290
#. type: Plain text
msgid "When defining an option that expects multiple input values, each option value passed to the command should be prefixed with the option name:"
msgstr ""

# File: docs/8.x/artisan.md, line: 292
# File: docs/master/artisan.md, line: 292
#. type: Plain text
#, no-wrap
msgid "    mail:send {user} {--id=*}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 294
# File: docs/master/artisan.md, line: 294
#. type: Plain text
#, no-wrap
msgid "    php artisan mail:send --id=1 --id=2\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 296
# File: docs/master/artisan.md, line: 296
#. type: Plain text
#, no-wrap
msgid "<a name=\"input-descriptions\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 296
# File: docs/master/artisan.md, line: 296
#. type: Title ###
#, no-wrap
msgid "Input Descriptions"
msgstr ""

# File: docs/8.x/artisan.md, line: 299
# File: docs/master/artisan.md, line: 299
#. type: Plain text
msgid "You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"
msgstr ""

# File: docs/8.x/artisan.md, line: 308
# File: docs/master/artisan.md, line: 308
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue : Whether the job should be queued}';\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 310
# File: docs/master/artisan.md, line: 310
#. type: Plain text
#, no-wrap
msgid "<a name=\"command-io\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 310
# File: docs/master/artisan.md, line: 310
#. type: Title ##
#, no-wrap
msgid "Command I/O"
msgstr ""

# File: docs/8.x/artisan.md, line: 313
# File: docs/master/artisan.md, line: 313
#. type: Plain text
#, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 313
# File: docs/master/artisan.md, line: 313
#. type: Title ###
#, no-wrap
msgid "Retrieving Input"
msgstr ""

# File: docs/8.x/artisan.md, line: 316
# File: docs/master/artisan.md, line: 316
#. type: Plain text
msgid "While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the `argument` and `option` methods. If an argument or option does not exist, `null` will be returned:"
msgstr ""

# File: docs/8.x/artisan.md, line: 325
# File: docs/master/artisan.md, line: 325
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 328
# File: docs/8.x/artisan.md, line: 588
# File: docs/master/artisan.md, line: 328
# File: docs/master/artisan.md, line: 588
#. type: Plain text
#, no-wrap
msgid "        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 330
# File: docs/master/artisan.md, line: 330
#. type: Plain text
msgid "If you need to retrieve all of the arguments as an `array`, call the `arguments` method:"
msgstr ""

# File: docs/8.x/artisan.md, line: 332
# File: docs/master/artisan.md, line: 332
#. type: Plain text
#, no-wrap
msgid "    $arguments = $this->arguments();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 334
# File: docs/master/artisan.md, line: 334
#. type: Plain text
msgid "Options may be retrieved just as easily as arguments using the `option` method. To retrieve all of the options as an array, call the `options` method:"
msgstr ""

# File: docs/8.x/artisan.md, line: 337
# File: docs/master/artisan.md, line: 337
#. type: Plain text
#, no-wrap
msgid "    // Retrieve a specific option...\n"
"    $queueName = $this->option('queue');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 340
# File: docs/master/artisan.md, line: 340
#. type: Plain text
#, no-wrap
msgid "    // Retrieve all options as an array...\n"
"    $options = $this->options();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 342
# File: docs/master/artisan.md, line: 342
#. type: Plain text
#, no-wrap
msgid "<a name=\"prompting-for-input\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 342
# File: docs/master/artisan.md, line: 342
#. type: Title ###
#, no-wrap
msgid "Prompting For Input"
msgstr ""

# File: docs/8.x/artisan.md, line: 345
# File: docs/master/artisan.md, line: 345
#. type: Plain text
msgid "In addition to displaying output, you may also ask the user to provide input during the execution of your command. The `ask` method will prompt the user with the given question, accept their input, and then return the user's input back to your command:"
msgstr ""

# File: docs/8.x/artisan.md, line: 355
# File: docs/master/artisan.md, line: 355
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 357
# File: docs/master/artisan.md, line: 357
#. type: Plain text
msgid "The `secret` method is similar to `ask`, but the user's input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as passwords:"
msgstr ""

# File: docs/8.x/artisan.md, line: 359
# File: docs/master/artisan.md, line: 359
#. type: Plain text
#, no-wrap
msgid "    $password = $this->secret('What is the password?');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 361
# File: docs/master/artisan.md, line: 361
#. type: Plain text
#, no-wrap
msgid "<a name=\"asking-for-confirmation\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 361
# File: docs/master/artisan.md, line: 361
#. type: Title ####
#, no-wrap
msgid "Asking For Confirmation"
msgstr ""

# File: docs/8.x/artisan.md, line: 364
# File: docs/master/artisan.md, line: 364
#. type: Plain text
msgid "If you need to ask the user for a simple \"yes or no\" confirmation, you may use the `confirm` method. By default, this method will return `false`. However, if the user enters `y` or `yes` in response to the prompt, the method will return `true`."
msgstr ""

# File: docs/8.x/artisan.md, line: 368
# File: docs/master/artisan.md, line: 368
#. type: Plain text
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 370
# File: docs/master/artisan.md, line: 370
#. type: Plain text
msgid "If necessary, you may specify that the confirmation prompt should return `true` by default by passing `true` as the second argument to the `confirm` method:"
msgstr ""

# File: docs/8.x/artisan.md, line: 374
# File: docs/master/artisan.md, line: 374
#. type: Plain text
#, no-wrap
msgid "    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 376
# File: docs/master/artisan.md, line: 376
#. type: Plain text
#, no-wrap
msgid "<a name=\"auto-completion\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 376
# File: docs/master/artisan.md, line: 376
#. type: Title ####
#, no-wrap
msgid "Auto-Completion"
msgstr ""

# File: docs/8.x/artisan.md, line: 379
# File: docs/master/artisan.md, line: 379
#. type: Plain text
msgid "The `anticipate` method can be used to provide auto-completion for possible choices. The user can still provide any answer, regardless of the auto-completion hints:"
msgstr ""

# File: docs/8.x/artisan.md, line: 381
# File: docs/master/artisan.md, line: 381
#. type: Plain text
#, no-wrap
msgid "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 383
# File: docs/master/artisan.md, line: 383
#. type: Plain text
msgid "Alternatively, you may pass a closure as the second argument to the `anticipate` method. The closure will be called each time the user types an input character. The closure should accept a string parameter containing the user's input so far, and return an array of options for auto-completion:"
msgstr ""

# File: docs/8.x/artisan.md, line: 387
# File: docs/master/artisan.md, line: 387
#. type: Plain text
#, no-wrap
msgid "    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // Return auto-completion options...\n"
"    });\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 389
# File: docs/master/artisan.md, line: 389
#. type: Plain text
#, no-wrap
msgid "<a name=\"multiple-choice-questions\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 389
# File: docs/master/artisan.md, line: 389
#. type: Title ####
#, no-wrap
msgid "Multiple Choice Questions"
msgstr ""

# File: docs/8.x/artisan.md, line: 392
# File: docs/master/artisan.md, line: 392
#. type: Plain text
msgid "If you need to give the user a predefined set of choices when asking a question, you may use the `choice` method. You may set the array index of the default value to be returned if no option is chosen by passing the index as the third argument to the method:"
msgstr ""

# File: docs/8.x/artisan.md, line: 398
# File: docs/master/artisan.md, line: 398
#. type: Plain text
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 400
# File: docs/master/artisan.md, line: 400
#. type: Plain text
msgid "In addition, the `choice` method accepts optional fourth and fifth arguments for determining the maximum number of attempts to select a valid response and whether multiple selections are permitted:"
msgstr ""

# File: docs/8.x/artisan.md, line: 408
# File: docs/master/artisan.md, line: 408
#. type: Plain text
#, no-wrap
msgid "    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 410
# File: docs/master/artisan.md, line: 410
#. type: Plain text
#, no-wrap
msgid "<a name=\"writing-output\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 410
# File: docs/master/artisan.md, line: 410
#. type: Title ###
#, no-wrap
msgid "Writing Output"
msgstr ""

# File: docs/8.x/artisan.md, line: 413
# File: docs/master/artisan.md, line: 413
#. type: Plain text
msgid "To send output to the console, you may use the `line`, `info`, `comment`, `question`, `warn`, and `error` methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the `info` method will display in the console as green colored text:"
msgstr ""

# File: docs/8.x/artisan.md, line: 422
# File: docs/master/artisan.md, line: 422
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 425
# File: docs/master/artisan.md, line: 425
#. type: Plain text
#, no-wrap
msgid "        $this->info('The command was successful!');\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 427
# File: docs/master/artisan.md, line: 427
#. type: Plain text
msgid "To display an error message, use the `error` method. Error message text is typically displayed in red:"
msgstr ""

# File: docs/8.x/artisan.md, line: 429
# File: docs/master/artisan.md, line: 429
#. type: Plain text
#, no-wrap
msgid "    $this->error('Something went wrong!');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 431
# File: docs/master/artisan.md, line: 431
#. type: Plain text
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

# File: docs/8.x/artisan.md, line: 433
# File: docs/master/artisan.md, line: 433
#. type: Plain text
#, no-wrap
msgid "    $this->line('Display this on the screen');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 435
# File: docs/master/artisan.md, line: 435
#. type: Plain text
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

# File: docs/8.x/artisan.md, line: 438
# File: docs/master/artisan.md, line: 438
#. type: Plain text
#, no-wrap
msgid "    // Write a single blank line...\n"
"    $this->newLine();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 441
# File: docs/master/artisan.md, line: 441
#. type: Plain text
#, no-wrap
msgid "    // Write three blank lines...\n"
"    $this->newLine(3);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 443
# File: docs/master/artisan.md, line: 443
#. type: Plain text
#, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 443
# File: docs/master/artisan.md, line: 443
#. type: Title ####
#, no-wrap
msgid "Tables"
msgstr ""

# File: docs/8.x/artisan.md, line: 447
# File: docs/master/artisan.md, line: 447
#. type: Plain text
msgid "The `table` method makes it easy to correctly format multiple rows / columns of data. All you need to do is provide the column names and the data for the table and Laravel will automatically calculate the appropriate width and height of the table for you:"
msgstr ""

# File: docs/8.x/artisan.md, line: 449
# File: docs/8.x/artisan.md, line: 461
# File: docs/master/artisan.md, line: 449
# File: docs/master/artisan.md, line: 461
#. type: Plain text
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 454
# File: docs/master/artisan.md, line: 454
#. type: Plain text
#, no-wrap
msgid "    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 456
# File: docs/master/artisan.md, line: 456
#. type: Plain text
#, no-wrap
msgid "<a name=\"progress-bars\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 456
# File: docs/master/artisan.md, line: 456
#. type: Title ####
#, no-wrap
msgid "Progress Bars"
msgstr ""

# File: docs/8.x/artisan.md, line: 459
# File: docs/master/artisan.md, line: 459
#. type: Plain text
msgid "For long running tasks, it can be helpful to show a progress bar that informs users how complete the task is. Using the `withProgressBar` method, Laravel will display a progress bar and advance its progress for each iteration over a given iterable value:"
msgstr ""

# File: docs/8.x/artisan.md, line: 465
# File: docs/master/artisan.md, line: 465
#. type: Plain text
#, no-wrap
msgid "    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 467
# File: docs/master/artisan.md, line: 467
#. type: Plain text
msgid "Sometimes, you may need more manual control over how a progress bar is advanced. First, define the total number of steps the process will iterate through. Then, advance the progress bar after processing each item:"
msgstr ""

# File: docs/8.x/artisan.md, line: 469
# File: docs/master/artisan.md, line: 469
#. type: Plain text
#, no-wrap
msgid "    $users = App\\Models\\User::all();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 471
# File: docs/master/artisan.md, line: 471
#. type: Plain text
#, no-wrap
msgid "    $bar = $this->output->createProgressBar(count($users));\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 473
# File: docs/master/artisan.md, line: 473
#. type: Plain text
#, no-wrap
msgid "    $bar->start();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 476
# File: docs/master/artisan.md, line: 476
#. type: Plain text
#, no-wrap
msgid "    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 479
# File: docs/master/artisan.md, line: 479
#. type: Plain text
#, no-wrap
msgid "        $bar->advance();\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 481
# File: docs/master/artisan.md, line: 481
#. type: Plain text
#, no-wrap
msgid "    $bar->finish();\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 483
# File: docs/master/artisan.md, line: 483
#. type: Plain text
#, no-wrap
msgid "> {tip} For more advanced options, check out the [Symfony Progress Bar component documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 485
# File: docs/master/artisan.md, line: 485
#. type: Plain text
#, no-wrap
msgid "<a name=\"registering-commands\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 485
# File: docs/master/artisan.md, line: 485
#. type: Title ##
#, no-wrap
msgid "Registering Commands"
msgstr ""

# File: docs/8.x/artisan.md, line: 488
# File: docs/master/artisan.md, line: 488
#. type: Plain text
msgid "All of your console commands are registered within your application's `App\\Console\\Kernel` class, which is your application's \"console kernel\". Within the `commands` method of this class, you will see a call to the kernel's `load` method. The `load` method will scan the `app/Console/Commands` directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the `load` method to scan other directories for Artisan commands:"
msgstr ""

# File: docs/8.x/artisan.md, line: 498
# File: docs/master/artisan.md, line: 498
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 501
# File: docs/master/artisan.md, line: 501
#. type: Plain text
#, no-wrap
msgid "        // ...\n"
"    }\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 503
# File: docs/master/artisan.md, line: 503
#. type: Plain text
msgid "If necessary, you may manually register commands by adding the command's class name to a `$commands` property within your `App\\Console\\Kernel` class. If this property is not already defined on your kernel, you should define it manually. When Artisan boots, all the commands listed in this property will be resolved by the [service container](/docs/{{version}}/container) and registered with Artisan:"
msgstr ""

# File: docs/8.x/artisan.md, line: 507
# File: docs/master/artisan.md, line: 507
#. type: Plain text
#, no-wrap
msgid "    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 509
# File: docs/master/artisan.md, line: 509
#. type: Plain text
#, no-wrap
msgid "<a name=\"programmatically-executing-commands\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 509
# File: docs/master/artisan.md, line: 509
#. type: Title ##
#, no-wrap
msgid "Programmatically Executing Commands"
msgstr ""

# File: docs/8.x/artisan.md, line: 512
# File: docs/master/artisan.md, line: 512
#. type: Plain text
msgid "Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to execute an Artisan command from a route or controller. You may use the `call` method on the `Artisan` facade to accomplish this. The `call` method accepts either the command's signature name or class name as its first argument, and an array of command parameters as the second argument. The exit code will be returned:"
msgstr ""

# File: docs/8.x/artisan.md, line: 514
# File: docs/8.x/artisan.md, line: 533
# File: docs/8.x/artisan.md, line: 555
# File: docs/master/artisan.md, line: 514
# File: docs/master/artisan.md, line: 533
# File: docs/master/artisan.md, line: 555
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 519
# File: docs/master/artisan.md, line: 519
#. type: Plain text
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 522
# File: docs/8.x/artisan.md, line: 563
# File: docs/master/artisan.md, line: 522
# File: docs/master/artisan.md, line: 563
#. type: Plain text
#, no-wrap
msgid "        //\n"
"    });\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 524
# File: docs/master/artisan.md, line: 524
#. type: Plain text
msgid "Alternatively, you may pass the entire Artisan command to the `call` method as a string:"
msgstr ""

# File: docs/8.x/artisan.md, line: 526
# File: docs/master/artisan.md, line: 526
#. type: Plain text
#, no-wrap
msgid "    Artisan::call('mail:send 1 --queue=default');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 528
# File: docs/master/artisan.md, line: 528
#. type: Plain text
#, no-wrap
msgid "<a name=\"passing-array-values\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 528
# File: docs/master/artisan.md, line: 528
#. type: Title ####
#, no-wrap
msgid "Passing Array Values"
msgstr ""

# File: docs/8.x/artisan.md, line: 531
# File: docs/master/artisan.md, line: 531
#. type: Plain text
msgid "If your command defines an option that accepts an array, you may pass an array of values to that option:"
msgstr ""

# File: docs/8.x/artisan.md, line: 539
# File: docs/master/artisan.md, line: 539
#. type: Plain text
#, no-wrap
msgid "    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 541
# File: docs/master/artisan.md, line: 541
#. type: Plain text
#, no-wrap
msgid "<a name=\"passing-boolean-values\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 541
# File: docs/master/artisan.md, line: 541
#. type: Title ####
#, no-wrap
msgid "Passing Boolean Values"
msgstr ""

# File: docs/8.x/artisan.md, line: 544
# File: docs/master/artisan.md, line: 544
#. type: Plain text
msgid "If you need to specify the value of an option that does not accept string values, such as the `--force` flag on the `migrate:refresh` command, you should pass `true` or `false` as the value of the option:"
msgstr ""

# File: docs/8.x/artisan.md, line: 548
# File: docs/master/artisan.md, line: 548
#. type: Plain text
#, no-wrap
msgid "    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 550
# File: docs/master/artisan.md, line: 550
#. type: Plain text
#, no-wrap
msgid "<a name=\"queueing-artisan-commands\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 550
# File: docs/master/artisan.md, line: 550
#. type: Title ####
#, no-wrap
msgid "Queueing Artisan Commands"
msgstr ""

# File: docs/8.x/artisan.md, line: 553
# File: docs/master/artisan.md, line: 553
#. type: Plain text
msgid "Using the `queue` method on the `Artisan` facade, you may even queue Artisan commands so they are processed in the background by your [queue workers](/docs/{{version}}/queues). Before using this method, make sure you have configured your queue and are running a queue listener:"
msgstr ""

# File: docs/8.x/artisan.md, line: 560
# File: docs/master/artisan.md, line: 560
#. type: Plain text
#, no-wrap
msgid "    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 565
# File: docs/master/artisan.md, line: 565
#. type: Plain text
msgid "Using the `onConnection` and `onQueue` methods, you may specify the connection or queue the Artisan command should be dispatched to:"
msgstr ""

# File: docs/8.x/artisan.md, line: 569
# File: docs/master/artisan.md, line: 569
#. type: Plain text
#, no-wrap
msgid "    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 571
# File: docs/master/artisan.md, line: 571
#. type: Plain text
#, no-wrap
msgid "<a name=\"calling-commands-from-other-commands\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 571
# File: docs/master/artisan.md, line: 571
#. type: Title ###
#, no-wrap
msgid "Calling Commands From Other Commands"
msgstr ""

# File: docs/8.x/artisan.md, line: 574
# File: docs/master/artisan.md, line: 574
#. type: Plain text
msgid "Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the `call` method. This `call` method accepts the command name and an array of command arguments / options:"
msgstr ""

# File: docs/8.x/artisan.md, line: 585
# File: docs/master/artisan.md, line: 585
#. type: Plain text
#, no-wrap
msgid "    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 590
# File: docs/master/artisan.md, line: 590
#. type: Plain text
msgid "If you would like to call another console command and suppress all of its output, you may use the `callSilently` method. The `callSilently` method has the same signature as the `call` method:"
msgstr ""

# File: docs/8.x/artisan.md, line: 594
# File: docs/master/artisan.md, line: 594
#. type: Plain text
#, no-wrap
msgid "    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 596
# File: docs/master/artisan.md, line: 596
#. type: Plain text
#, no-wrap
msgid "<a name=\"signal-handling\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 596
# File: docs/master/artisan.md, line: 596
#. type: Title ##
#, no-wrap
msgid "Signal Handling"
msgstr ""

# File: docs/8.x/artisan.md, line: 599
# File: docs/master/artisan.md, line: 599
#. type: Plain text
msgid "The Symfony Console component, which powers the Artisan console, allows you to indicate which process signals (if any) your command handles. For example, you may indicate that your command handles the `SIGINT` and `SIGTERM` signals."
msgstr ""

# File: docs/8.x/artisan.md, line: 601
# File: docs/master/artisan.md, line: 601
#. type: Plain text
msgid "To get started, you should implement the `Symfony\\Component\\Console\\Command\\SignalableCommandInterface` interface on your Artisan command class. This interface requires you to define two methods: `getSubscribedSignals` and `handleSignal`:"
msgstr ""

# File: docs/8.x/artisan.md, line: 602
# File: docs/master/artisan.md, line: 602
#. type: Code fence info string
#, no-wrap
msgid "php"
msgstr ""

# File: docs/8.x/artisan.md, line: 602
# File: docs/master/artisan.md, line: 602
#. type: Plain text
#, no-wrap
msgid "<?php\n\n"
"use Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n\n"
"class StartServer extends Command implements SignalableCommandInterface\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the list of signals handled by the command.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function getSubscribedSignals(): array\n"
"    {\n"
"        return [SIGINT, SIGTERM];\n"
"    }\n\n"
"    /**\n"
"     * Handle an incoming signal.\n"
"     *\n"
"     * @param  int  $signal\n"
"     * @return void\n"
"     */\n"
"    public function handleSignal(int $signal): void\n"
"    {\n"
"        if ($signal === SIGINT) {\n"
"            $this->stopServer();\n\n"
"            return;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 639
# File: docs/master/artisan.md, line: 639
#. type: Plain text
msgid "As you might expect, the `getSubscribedSignals` method should return an array of the signals that your command can handle, while the `handleSignal` method receives the signal and can respond accordingly."
msgstr ""

# File: docs/8.x/artisan.md, line: 641
# File: docs/master/artisan.md, line: 641
#. type: Plain text
#, no-wrap
msgid "<a name=\"stub-customization\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 641
# File: docs/master/artisan.md, line: 641
#. type: Title ##
#, no-wrap
msgid "Stub Customization"
msgstr ""

# File: docs/8.x/artisan.md, line: 644
# File: docs/master/artisan.md, line: 644
#. type: Plain text
msgid "The Artisan console's `make` commands are used to create a variety of classes, such as controllers, jobs, migrations, and tests. These classes are generated using \"stub\" files that are populated with values based on your input. However, you may want to make small changes to files generated by Artisan. To accomplish this, you may use the `stub:publish` command to publish the most common stubs to your application so that you can customize them:"
msgstr ""

# File: docs/8.x/artisan.md, line: 646
# File: docs/master/artisan.md, line: 646
#. type: Plain text
#, no-wrap
msgid "    php artisan stub:publish\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 648
# File: docs/master/artisan.md, line: 648
#. type: Plain text
msgid "The published stubs will be located within a `stubs` directory in the root of your application. Any changes you make to these stubs will be reflected when you generate their corresponding classes using Artisan's `make` commands."
msgstr ""

# File: docs/8.x/artisan.md, line: 650
# File: docs/master/artisan.md, line: 650
#. type: Plain text
#, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

# File: docs/8.x/artisan.md, line: 650
# File: docs/master/artisan.md, line: 650
#. type: Title ##
#, no-wrap
msgid "Events"
msgstr ""

# File: docs/8.x/artisan.md, line: 652
# File: docs/master/artisan.md, line: 652
#. type: Plain text
msgid "Artisan dispatches three events when running commands: `Illuminate\\Console\\Events\\ArtisanStarting`, `Illuminate\\Console\\Events\\CommandStarting`, and `Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event is dispatched immediately when Artisan starts running. Next, the `CommandStarting` event is dispatched immediately before a command runs. Finally, the `CommandFinished` event is dispatched once a command finishes executing."
msgstr ""

