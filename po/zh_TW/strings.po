msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/strings.pot\n"
"X-Crowdin-File-ID: 192\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-06-30 08:27\n"

#: docs/10.x/strings.md:block 1 (header)
msgid "Strings"
msgstr ""

#: docs/10.x/strings.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/strings.md:block 2 (unordered list)
msgid "[Available Methods](#available-methods)"
msgstr ""

#: docs/10.x/strings.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/strings.md:block 5 (paragraph)
msgid "Laravel includes a variety of functions for manipulating string values. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient."
msgstr ""

#: docs/10.x/strings.md:block 7 (header)
msgid "Available Methods"
msgstr ""

#: docs/10.x/strings.md:block 12 (paragraph)
msgid "[__](#method-__) [class_basename](#method-class-basename) [e](#method-e) [preg_replace_array](#method-preg-replace-array) [Str::after](#method-str-after) [Str::afterLast](#method-str-after-last) [Str::ascii](#method-str-ascii) [Str::before](#method-str-before) [Str::beforeLast](#method-str-before-last) [Str::between](#method-str-between) [Str::betweenFirst](#method-str-between-first) [Str::camel](#method-camel-case) [Str::contains](#method-str-contains) [Str::containsAll](#method-str-contains-all) [Str::endsWith](#method-ends-with) [Str::excerpt](#method-excerpt) [Str::finish](#method-str-finish) [Str::headline](#method-str-headline) [Str::inlineMarkdown](#method-str-inline-markdown) [Str::is](#method-str-is) [Str::isAscii](#method-str-is-ascii) [Str::isJson](#method-str-is-json) [Str::isUlid](#method-str-is-ulid) [Str::isUrl](#method-str-is-url) [Str::isUuid](#method-str-is-uuid) [Str::kebab](#method-kebab-case) [Str::lcfirst](#method-str-lcfirst) [Str::length](#method-str-length) [Str::limit](#method-str-limit) [Str::lower](#method-str-lower) [Str::markdown](#method-str-markdown) [Str::mask](#method-str-mask) [Str::orderedUuid](#method-str-ordered-uuid) [Str::padBoth](#method-str-padboth) [Str::padLeft](#method-str-padleft) [Str::padRight](#method-str-padright) [Str::password](#method-str-password) [Str::plural](#method-str-plural) [Str::pluralStudly](#method-str-plural-studly) [Str::position](#method-str-position) [Str::random](#method-str-random) [Str::remove](#method-str-remove) [Str::repeat](#method-str-repeat) [Str::replace](#method-str-replace) [Str::replaceArray](#method-str-replace-array) [Str::replaceFirst](#method-str-replace-first) [Str::replaceLast](#method-str-replace-last) [Str::replaceMatches](#method-str-replace-matches) [Str::replaceStart](#method-str-replace-start) [Str::replaceEnd](#method-str-replace-end) [Str::reverse](#method-str-reverse) [Str::singular](#method-str-singular) [Str::slug](#method-str-slug) [Str::snake](#method-snake-case) [Str::squish](#method-str-squish) [Str::start](#method-str-start) [Str::startsWith](#method-starts-with) [Str::studly](#method-studly-case) [Str::substr](#method-str-substr) [Str::substrCount](#method-str-substrcount) [Str::substrReplace](#method-str-substrreplace) [Str::swap](#method-str-swap) [Str::take](#method-take) [Str::title](#method-title-case) [Str::toHtmlString](#method-str-to-html-string) [Str::ucfirst](#method-str-ucfirst) [Str::ucsplit](#method-str-ucsplit) [Str::upper](#method-str-upper) [Str::ulid](#method-str-ulid) [Str::uuid](#method-str-uuid) [Str::wordCount](#method-str-word-count) [Str::wordWrap](#method-str-word-wrap) [Str::words](#method-str-words) [Str::wrap](#method-str-wrap) [str](#method-str) [trans](#method-trans) [trans_choice](#method-trans-choice)"
msgstr ""

#: docs/10.x/strings.md:block 15 (header)
msgid "Fluent Strings"
msgstr ""

#: docs/10.x/strings.md:block 17 (paragraph)
msgid "[after](#method-fluent-str-after) [afterLast](#method-fluent-str-after-last) [append](#method-fluent-str-append) [ascii](#method-fluent-str-ascii) [basename](#method-fluent-str-basename) [before](#method-fluent-str-before) [beforeLast](#method-fluent-str-before-last) [between](#method-fluent-str-between) [betweenFirst](#method-fluent-str-between-first) [camel](#method-fluent-str-camel) [classBasename](#method-fluent-str-class-basename) [contains](#method-fluent-str-contains) [containsAll](#method-fluent-str-contains-all) [dirname](#method-fluent-str-dirname) [endsWith](#method-fluent-str-ends-with) [excerpt](#method-fluent-str-excerpt) [exactly](#method-fluent-str-exactly) [explode](#method-fluent-str-explode) [finish](#method-fluent-str-finish) [headline](#method-fluent-str-headline) [inlineMarkdown](#method-fluent-str-inline-markdown) [is](#method-fluent-str-is) [isAscii](#method-fluent-str-is-ascii) [isEmpty](#method-fluent-str-is-empty) [isNotEmpty](#method-fluent-str-is-not-empty) [isJson](#method-fluent-str-is-json) [isUlid](#method-fluent-str-is-ulid) [isUrl](#method-fluent-str-is-url) [isUuid](#method-fluent-str-is-uuid) [kebab](#method-fluent-str-kebab) [lcfirst](#method-fluent-str-lcfirst) [length](#method-fluent-str-length) [limit](#method-fluent-str-limit) [lower](#method-fluent-str-lower) [ltrim](#method-fluent-str-ltrim) [markdown](#method-fluent-str-markdown) [mask](#method-fluent-str-mask) [match](#method-fluent-str-match) [matchAll](#method-fluent-str-match-all) [isMatch](#method-fluent-str-is-match) [newLine](#method-fluent-str-new-line) [padBoth](#method-fluent-str-padboth) [padLeft](#method-fluent-str-padleft) [padRight](#method-fluent-str-padright) [pipe](#method-fluent-str-pipe) [plural](#method-fluent-str-plural) [position](#method-fluent-str-position) [prepend](#method-fluent-str-prepend) [remove](#method-fluent-str-remove) [repeat](#method-fluent-str-repeat) [replace](#method-fluent-str-replace) [replaceArray](#method-fluent-str-replace-array) [replaceFirst](#method-fluent-str-replace-first) [replaceLast](#method-fluent-str-replace-last) [replaceMatches](#method-fluent-str-replace-matches) [replaceStart](#method-fluent-str-replace-start) [replaceEnd](#method-fluent-str-replace-end) [rtrim](#method-fluent-str-rtrim) [scan](#method-fluent-str-scan) [singular](#method-fluent-str-singular) [slug](#method-fluent-str-slug) [snake](#method-fluent-str-snake) [split](#method-fluent-str-split) [squish](#method-fluent-str-squish) [start](#method-fluent-str-start) [startsWith](#method-fluent-str-starts-with) [studly](#method-fluent-str-studly) [substr](#method-fluent-str-substr) [substrReplace](#method-fluent-str-substrreplace) [swap](#method-fluent-str-swap) [take](#method-fluent-str-take) [tap](#method-fluent-str-tap) [test](#method-fluent-str-test) [title](#method-fluent-str-title) [trim](#method-fluent-str-trim) [ucfirst](#method-fluent-str-ucfirst) [ucsplit](#method-fluent-str-ucsplit) [upper](#method-fluent-str-upper) [when](#method-fluent-str-when) [whenContains](#method-fluent-str-when-contains) [whenContainsAll](#method-fluent-str-when-contains-all) [whenEmpty](#method-fluent-str-when-empty) [whenNotEmpty](#method-fluent-str-when-not-empty) [whenStartsWith](#method-fluent-str-when-starts-with) [whenEndsWith](#method-fluent-str-when-ends-with) [whenExactly](#method-fluent-str-when-exactly) [whenNotExactly](#method-fluent-str-when-not-exactly) [whenIs](#method-fluent-str-when-is) [whenIsAscii](#method-fluent-str-when-is-ascii) [whenIsUlid](#method-fluent-str-when-is-ulid) [whenIsUuid](#method-fluent-str-when-is-uuid) [whenTest](#method-fluent-str-when-test) [wordCount](#method-fluent-str-word-count) [words](#method-fluent-str-words)"
msgstr ""

#: docs/10.x/strings.md:block 22 (header)
msgid "`__()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 23 (paragraph)
msgid "The `__` function translates the given translation string or translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: docs/10.x/strings.md:block 24 (code)
msgid "echo __('Welcome to our application');\n\n"
"echo __('messages.welcome');\n"
msgstr ""

#: docs/10.x/strings.md:block 25 (paragraph)
msgid "If the specified translation string or key does not exist, the `__` function will return the given value. So, using the example above, the `__` function would return `messages.welcome` if that translation key does not exist."
msgstr ""

#: docs/10.x/strings.md:block 27 (header)
msgid "`class_basename()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 28 (paragraph)
msgid "The `class_basename` function returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: docs/10.x/strings.md:block 29 (code)
msgid "$class = class_basename('Foo\\Bar\\Baz');\n\n"
"// Baz\n"
msgstr ""

#: docs/10.x/strings.md:block 31 (header)
msgid "`e()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 32 (paragraph)
msgid "The `e` function runs PHP's `htmlspecialchars` function with the `double_encode` option set to `true` by default:"
msgstr ""

#: docs/10.x/strings.md:block 33 (code)
msgid "echo e('<html>foo</html>');\n\n"
"// &lt;html&gt;foo&lt;/html&gt;\n"
msgstr ""

#: docs/10.x/strings.md:block 35 (header)
msgid "`preg_replace_array()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 36 (paragraph)
msgid "The `preg_replace_array` function replaces a given pattern in the string sequentially using an array:"
msgstr ""

#: docs/10.x/strings.md:block 37 (code)
msgid "$string = 'The event will take place between :start and :end';\n\n"
"$replaced = preg_replace_array('/:[a-z_]+/', ['8:30', '9:00'], $string);\n\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/strings.md:block 39 (header)
msgid "`Str::after()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 40 (paragraph)
msgid "The `Str::after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/strings.md:block 41 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::after('This is my name', 'This is');\n\n"
"// ' my name'\n"
msgstr ""

#: docs/10.x/strings.md:block 43 (header)
msgid "`Str::afterLast()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 44 (paragraph)
msgid "The `Str::afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/strings.md:block 45 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::afterLast('App\\Http\\Controllers\\Controller', '\\\\');\n\n"
"// 'Controller'\n"
msgstr ""

#: docs/10.x/strings.md:block 47 (header)
msgid "`Str::ascii()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 48 (paragraph)
msgid "The `Str::ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: docs/10.x/strings.md:block 49 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::ascii('û');\n\n"
"// 'u'\n"
msgstr ""

#: docs/10.x/strings.md:block 51 (header)
msgid "`Str::before()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 52 (paragraph)
msgid "The `Str::before` method returns everything before the given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 53 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::before('This is my name', 'my name');\n\n"
"// 'This is '\n"
msgstr ""

#: docs/10.x/strings.md:block 55 (header)
msgid "`Str::beforeLast()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 56 (paragraph)
msgid "The `Str::beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 57 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::beforeLast('This is my name', 'is');\n\n"
"// 'This '\n"
msgstr ""

#: docs/10.x/strings.md:block 59 (header)
msgid "`Str::between()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 60 (paragraph)
msgid "The `Str::between` method returns the portion of a string between two values:"
msgstr ""

#: docs/10.x/strings.md:block 61 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::between('This is my name', 'This', 'name');\n\n"
"// ' is my '\n"
msgstr ""

#: docs/10.x/strings.md:block 63 (header)
msgid "`Str::betweenFirst()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 64 (paragraph)
msgid "The `Str::betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: docs/10.x/strings.md:block 65 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::betweenFirst('[a] bc [d]', '[', ']');\n\n"
"// 'a'\n"
msgstr ""

#: docs/10.x/strings.md:block 67 (header)
msgid "`Str::camel()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 68 (paragraph)
msgid "The `Str::camel` method converts the given string to `camelCase`:"
msgstr ""

#: docs/10.x/strings.md:block 69 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::camel('foo_bar');\n\n"
"// fooBar\n"
msgstr ""

#: docs/10.x/strings.md:block 71 (header)
msgid "`Str::contains()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 72 (paragraph)
msgid "The `Str::contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: docs/10.x/strings.md:block 73 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$contains = Str::contains('This is my name', 'my');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 74 (paragraph)
msgid "You may also pass an array of values to determine if the given string contains any of the values in the array:"
msgstr ""

#: docs/10.x/strings.md:block 75 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$contains = Str::contains('This is my name', ['my', 'foo']);\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 77 (header)
msgid "`Str::containsAll()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 78 (paragraph)
msgid "The `Str::containsAll` method determines if the given string contains all of the values in a given array:"
msgstr ""

#: docs/10.x/strings.md:block 79 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$containsAll = Str::containsAll('This is my name', ['my', 'name']);\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 81 (header)
msgid "`Str::endsWith()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 82 (paragraph)
msgid "The `Str::endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: docs/10.x/strings.md:block 83 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::endsWith('This is my name', 'name');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 84 (paragraph)
msgid "You may also pass an array of values to determine if the given string ends with any of the values in the array:"
msgstr ""

#: docs/10.x/strings.md:block 85 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::endsWith('This is my name', ['name', 'foo']);\n\n"
"// true\n\n"
"$result = Str::endsWith('This is my name', ['this', 'foo']);\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 87 (header)
msgid "`Str::excerpt()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 88 (paragraph)
msgid "The `Str::excerpt` method extracts an excerpt from a given string that matches the first instance of a phrase within that string:"
msgstr ""

#: docs/10.x/strings.md:block 89 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$excerpt = Str::excerpt('This is my name', 'my', [\n"
"    'radius' => 3\n"
"]);\n\n"
"// '...is my na...'\n"
msgstr ""

#: docs/10.x/strings.md:block 90 (paragraph)
msgid "The `radius` option, which defaults to `100`, allows you to define the number of characters that should appear on each side of the truncated string."
msgstr ""

#: docs/10.x/strings.md:block 91 (paragraph)
msgid "In addition, you may use the `omission` option to define the string that will be prepended and appended to the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 92 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$excerpt = Str::excerpt('This is my name', 'name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n\n"
"// '(...) my name'\n"
msgstr ""

#: docs/10.x/strings.md:block 94 (header)
msgid "`Str::finish()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 95 (paragraph)
msgid "The `Str::finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: docs/10.x/strings.md:block 96 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$adjusted = Str::finish('this/string', '/');\n\n"
"// this/string/\n\n"
"$adjusted = Str::finish('this/string/', '/');\n\n"
"// this/string/\n"
msgstr ""

#: docs/10.x/strings.md:block 98 (header)
msgid "`Str::headline()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 99 (paragraph)
msgid "The `Str::headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: docs/10.x/strings.md:block 100 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$headline = Str::headline('steve_jobs');\n\n"
"// Steve Jobs\n\n"
"$headline = Str::headline('EmailNotificationSent');\n\n"
"// Email Notification Sent\n"
msgstr ""

#: docs/10.x/strings.md:block 102 (header)
msgid "`Str::inlineMarkdown()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 103 (paragraph)
msgid "The `Str::inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: docs/10.x/strings.md:block 104 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$html = Str::inlineMarkdown('**Laravel**');\n\n"
"// <strong>Laravel</strong>\n"
msgstr ""

#: docs/10.x/strings.md:block 106 (header)
msgid "`Str::is()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 107 (paragraph)
msgid "The `Str::is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values:"
msgstr ""

#: docs/10.x/strings.md:block 108 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$matches = Str::is('foo*', 'foobar');\n\n"
"// true\n\n"
"$matches = Str::is('baz*', 'foobar');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 110 (header)
msgid "`Str::isAscii()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 111 (paragraph)
msgid "The `Str::isAscii` method determines if a given string is 7 bit ASCII:"
msgstr ""

#: docs/10.x/strings.md:block 112 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$isAscii = Str::isAscii('Taylor');\n\n"
"// true\n\n"
"$isAscii = Str::isAscii('ü');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 114 (header)
msgid "`Str::isJson()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 115 (paragraph)
msgid "The `Str::isJson` method determines if the given string is valid JSON:"
msgstr ""

#: docs/10.x/strings.md:block 116 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::isJson('[1,2,3]');\n\n"
"// true\n\n"
"$result = Str::isJson('{\"first\": \"John\", \"last\": \"Doe\"}');\n\n"
"// true\n\n"
"$result = Str::isJson('{first: \"John\", last: \"Doe\"}');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 118 (header)
msgid "`Str::isUrl()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 119 (paragraph)
msgid "The `Str::isUrl` method determines if the given string is a valid URL:"
msgstr ""

#: docs/10.x/strings.md:block 120 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$isUrl = Str::isUrl('http://example.com');\n\n"
"// true\n\n"
"$isUrl = Str::isUrl('laravel');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 122 (header)
msgid "`Str::isUlid()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 123 (paragraph)
msgid "The `Str::isUlid` method determines if the given string is a valid ULID:"
msgstr ""

#: docs/10.x/strings.md:block 124 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$isUlid = Str::isUlid('01gd6r360bp37zj17nxb55yv40');\n\n"
"// true\n\n"
"$isUlid = Str::isUlid('laravel');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 126 (header)
msgid "`Str::isUuid()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 127 (paragraph)
msgid "The `Str::isUuid` method determines if the given string is a valid UUID:"
msgstr ""

#: docs/10.x/strings.md:block 128 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$isUuid = Str::isUuid('a0a2a2d2-0b87-4a18-83f2-2529882be2de');\n\n"
"// true\n\n"
"$isUuid = Str::isUuid('laravel');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 130 (header)
msgid "`Str::kebab()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 131 (paragraph)
msgid "The `Str::kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: docs/10.x/strings.md:block 132 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::kebab('fooBar');\n\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/strings.md:block 134 (header)
msgid "`Str::lcfirst()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 135 (paragraph)
msgid "The `Str::lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: docs/10.x/strings.md:block 136 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::lcfirst('Foo Bar');\n\n"
"// foo Bar\n"
msgstr ""

#: docs/10.x/strings.md:block 138 (header)
msgid "`Str::length()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 139 (paragraph)
msgid "The `Str::length` method returns the length of the given string:"
msgstr ""

#: docs/10.x/strings.md:block 140 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$length = Str::length('Laravel');\n\n"
"// 7\n"
msgstr ""

#: docs/10.x/strings.md:block 142 (header)
msgid "`Str::limit()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 143 (paragraph)
msgid "The `Str::limit` method truncates the given string to the specified length:"
msgstr ""

#: docs/10.x/strings.md:block 144 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20);\n\n"
"// The quick brown fox...\n"
msgstr ""

#: docs/10.x/strings.md:block 145 (paragraph)
msgid "You may pass a third argument to the method to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 146 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$truncated = Str::limit('The quick brown fox jumps over the lazy dog', 20, ' (...)');\n\n"
"// The quick brown fox (...)\n"
msgstr ""

#: docs/10.x/strings.md:block 148 (header)
msgid "`Str::lower()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 149 (paragraph)
msgid "The `Str::lower` method converts the given string to lowercase:"
msgstr ""

#: docs/10.x/strings.md:block 150 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::lower('LARAVEL');\n\n"
"// laravel\n"
msgstr ""

#: docs/10.x/strings.md:block 152 (header)
msgid "`Str::markdown()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 153 (paragraph)
msgid "The `Str::markdown` method converts GitHub flavored Markdown into HTML using [CommonMark](https://commonmark.thephpleague.com/):"
msgstr ""

#: docs/10.x/strings.md:block 154 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$html = Str::markdown('# Laravel');\n\n"
"// <h1>Laravel</h1>\n\n"
"$html = Str::markdown('# Taylor <b>Otwell</b>', [\n"
"    'html_input' => 'strip',\n"
"]);\n\n"
"// <h1>Taylor Otwell</h1>\n"
msgstr ""

#: docs/10.x/strings.md:block 156 (header)
msgid "`Str::mask()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 157 (paragraph)
msgid "The `Str::mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: docs/10.x/strings.md:block 158 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::mask('taylor@example.com', '*', 3);\n\n"
"// tay***************\n"
msgstr ""

#: docs/10.x/strings.md:block 159 (paragraph)
msgid "If needed, you provide a negative number as the third argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: docs/10.x/strings.md:block 160 (code)
msgid "$string = Str::mask('taylor@example.com', '*', -15, 3);\n\n"
"// tay***@example.com\n"
msgstr ""

#: docs/10.x/strings.md:block 162 (header)
msgid "`Str::orderedUuid()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 163 (paragraph)
msgid "The `Str::orderedUuid` method generates a \"timestamp first\" UUID that may be efficiently stored in an indexed database column. Each UUID that is generated using this method will be sorted after UUIDs previously generated using the method:"
msgstr ""

#: docs/10.x/strings.md:block 164 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"return (string) Str::orderedUuid();\n"
msgstr ""

#: docs/10.x/strings.md:block 166 (header)
msgid "`Str::padBoth()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 167 (paragraph)
msgid "The `Str::padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/strings.md:block 168 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::padBoth('James', 10, '_');\n\n"
"// '__James___'\n\n"
"$padded = Str::padBoth('James', 10);\n\n"
"// '  James   '\n"
msgstr ""

#: docs/10.x/strings.md:block 170 (header)
msgid "`Str::padLeft()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 171 (paragraph)
msgid "The `Str::padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/strings.md:block 172 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::padLeft('James', 10, '-=');\n\n"
"// '-=-=-James'\n\n"
"$padded = Str::padLeft('James', 10);\n\n"
"// '     James'\n"
msgstr ""

#: docs/10.x/strings.md:block 174 (header)
msgid "`Str::padRight()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 175 (paragraph)
msgid "The `Str::padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches a desired length:"
msgstr ""

#: docs/10.x/strings.md:block 176 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::padRight('James', 10, '-');\n\n"
"// 'James-----'\n\n"
"$padded = Str::padRight('James', 10);\n\n"
"// 'James     '\n"
msgstr ""

#: docs/10.x/strings.md:block 178 (header)
msgid "`Str::password()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 179 (paragraph)
msgid "The `Str::password` method may be used to generate a secure, random password of a given length. The password will consist of a combination of letters, numbers, symbols, and spaces. By default, passwords are 32 characters long:"
msgstr ""

#: docs/10.x/strings.md:block 180 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$password = Str::password();\n\n"
"// 'EbJo2vE-AS:U,$%_gkrV4n,q~1xy/-_4'\n\n"
"$password = Str::password(12);\n\n"
"// 'qwuar>#V|i]N'\n"
msgstr ""

#: docs/10.x/strings.md:block 182 (header)
msgid "`Str::plural()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 183 (paragraph)
msgid "The `Str::plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/strings.md:block 184 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::plural('car');\n\n"
"// cars\n\n"
"$plural = Str::plural('child');\n\n"
"// children\n"
msgstr ""

#: docs/10.x/strings.md:block 185 (paragraph)
msgid "You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:"
msgstr ""

#: docs/10.x/strings.md:block 186 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::plural('child', 2);\n\n"
"// children\n\n"
"$singular = Str::plural('child', 1);\n\n"
"// child\n"
msgstr ""

#: docs/10.x/strings.md:block 188 (header)
msgid "`Str::pluralStudly()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 189 (paragraph)
msgid "The `Str::pluralStudly` method converts a singular word string formatted in studly caps case to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/strings.md:block 190 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::pluralStudly('VerifiedHuman');\n\n"
"// VerifiedHumans\n\n"
"$plural = Str::pluralStudly('UserFeedback');\n\n"
"// UserFeedback\n"
msgstr ""

#: docs/10.x/strings.md:block 192 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::pluralStudly('VerifiedHuman', 2);\n\n"
"// VerifiedHumans\n\n"
"$singular = Str::pluralStudly('VerifiedHuman', 1);\n\n"
"// VerifiedHuman\n"
msgstr ""

#: docs/10.x/strings.md:block 194 (header)
msgid "`Str::position()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 195 (paragraph)
msgid "The `Str::position` method returns the position of the first occurrence of a substring in a string. If the substring does not exist in the given string, `false` is returned:"
msgstr ""

#: docs/10.x/strings.md:block 196 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$position = Str::position('Hello, World!', 'Hello');\n\n"
"// 0\n\n"
"$position = Str::position('Hello, World!', 'W');\n\n"
"// 7\n"
msgstr ""

#: docs/10.x/strings.md:block 198 (header)
msgid "`Str::random()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 199 (paragraph)
msgid "The `Str::random` method generates a random string of the specified length. This function uses PHP's `random_bytes` function:"
msgstr ""

#: docs/10.x/strings.md:block 200 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$random = Str::random(40);\n"
msgstr ""

#: docs/10.x/strings.md:block 202 (header)
msgid "`Str::remove()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 203 (paragraph)
msgid "The `Str::remove` method removes the given value or array of values from the string:"
msgstr ""

#: docs/10.x/strings.md:block 204 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = 'Peter Piper picked a peck of pickled peppers.';\n\n"
"$removed = Str::remove('e', $string);\n\n"
"// Ptr Pipr pickd a pck of pickld ppprs.\n"
msgstr ""

#: docs/10.x/strings.md:block 205 (paragraph)
msgid "You may also pass `false` as a third argument to the `remove` method to ignore case when removing strings."
msgstr ""

#: docs/10.x/strings.md:block 207 (header)
msgid "`Str::repeat()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 208 (paragraph)
msgid "The `Str::repeat` method repeats the given string:"
msgstr ""

#: docs/10.x/strings.md:block 209 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = 'a';\n\n"
"$repeat = Str::repeat($string, 5);\n\n"
"// aaaaa\n"
msgstr ""

#: docs/10.x/strings.md:block 211 (header)
msgid "`Str::replace()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 212 (paragraph)
msgid "The `Str::replace` method replaces a given string within the string:"
msgstr ""

#: docs/10.x/strings.md:block 213 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = 'Laravel 8.x';\n\n"
"$replaced = Str::replace('8.x', '9.x', $string);\n\n"
"// Laravel 9.x\n"
msgstr ""

#: docs/10.x/strings.md:block 214 (paragraph)
msgid "The `replace` method also accepts a `caseSensitive` argument. By default, the `replace` method is case sensitive:"
msgstr ""

#: docs/10.x/strings.md:block 215 (code)
msgid "Str::replace('Framework', 'Laravel', caseSensitive: false);\n"
msgstr ""

#: docs/10.x/strings.md:block 217 (header)
msgid "`Str::replaceArray()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 218 (paragraph)
msgid "The `Str::replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: docs/10.x/strings.md:block 219 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = 'The event will take place between ? and ?';\n\n"
"$replaced = Str::replaceArray('?', ['8:30', '9:00'], $string);\n\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/strings.md:block 221 (header)
msgid "`Str::replaceFirst()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 222 (paragraph)
msgid "The `Str::replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 223 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceFirst('the', 'a', 'the quick brown fox jumps over the lazy dog');\n\n"
"// a quick brown fox jumps over the lazy dog\n"
msgstr ""

#: docs/10.x/strings.md:block 225 (header)
msgid "`Str::replaceLast()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 226 (paragraph)
msgid "The `Str::replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 227 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceLast('the', 'a', 'the quick brown fox jumps over the lazy dog');\n\n"
"// the quick brown fox jumps over a lazy dog\n"
msgstr ""

#: docs/10.x/strings.md:block 229 (header)
msgid "`Str::replaceMatches()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 230 (paragraph)
msgid "The `Str::replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#: docs/10.x/strings.md:block 231 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceMatches(\n"
"    pattern: '/[^A-Za-z0-9]++/',\n"
"    replace: '',\n"
"    subject: '(+1) 501-555-1000'\n"
")\n\n"
"// '15015551000'\n"
msgstr ""

#: docs/10.x/strings.md:block 232 (paragraph)
msgid "The `replaceMatches` method also accepts a closure that will be invoked with each portion of the string matching the given pattern, allowing you to perform the replacement logic within the closure and return the replaced value:"
msgstr ""

#: docs/10.x/strings.md:block 233 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceMatches('/\\d/', function (array $matches) {\n"
"    return '['.$matches[0].']';\n"
"}, '123');\n\n"
"// '[1][2][3]'\n"
msgstr ""

#: docs/10.x/strings.md:block 235 (header)
msgid "`Str::replaceStart()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 236 (paragraph)
msgid "The `Str::replaceStart` method replaces the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: docs/10.x/strings.md:block 237 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceStart('Hello', 'Laravel', 'Hello World');\n\n"
"// Laravel World\n\n"
"$replaced = Str::replaceStart('World', 'Laravel', 'Hello World');\n\n"
"// Hello World\n"
msgstr ""

#: docs/10.x/strings.md:block 239 (header)
msgid "`Str::replaceEnd()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 240 (paragraph)
msgid "The `Str::replaceEnd` method replaces the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: docs/10.x/strings.md:block 241 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::replaceEnd('World', 'Laravel', 'Hello World');\n\n"
"// Hello Laravel\n\n"
"$replaced = Str::replaceEnd('Hello', 'Laravel', 'Hello World');\n\n"
"// Hello World\n"
msgstr ""

#: docs/10.x/strings.md:block 243 (header)
msgid "`Str::reverse()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 244 (paragraph)
msgid "The `Str::reverse` method reverses the given string:"
msgstr ""

#: docs/10.x/strings.md:block 245 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$reversed = Str::reverse('Hello World');\n\n"
"// dlroW olleH\n"
msgstr ""

#: docs/10.x/strings.md:block 247 (header)
msgid "`Str::singular()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 248 (paragraph)
msgid "The `Str::singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/strings.md:block 249 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$singular = Str::singular('cars');\n\n"
"// car\n\n"
"$singular = Str::singular('children');\n\n"
"// child\n"
msgstr ""

#: docs/10.x/strings.md:block 251 (header)
msgid "`Str::slug()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 252 (paragraph)
msgid "The `Str::slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: docs/10.x/strings.md:block 253 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slug = Str::slug('Laravel 5 Framework', '-');\n\n"
"// laravel-5-framework\n"
msgstr ""

#: docs/10.x/strings.md:block 255 (header)
msgid "`Str::snake()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 256 (paragraph)
msgid "The `Str::snake` method converts the given string to `snake_case`:"
msgstr ""

#: docs/10.x/strings.md:block 257 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::snake('fooBar');\n\n"
"// foo_bar\n\n"
"$converted = Str::snake('fooBar', '-');\n\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/strings.md:block 259 (header)
msgid "`Str::squish()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 260 (paragraph)
msgid "The `Str::squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: docs/10.x/strings.md:block 261 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::squish('    laravel    framework    ');\n\n"
"// laravel framework\n"
msgstr ""

#: docs/10.x/strings.md:block 263 (header)
msgid "`Str::start()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 264 (paragraph)
msgid "The `Str::start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: docs/10.x/strings.md:block 265 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$adjusted = Str::start('this/string', '/');\n\n"
"// /this/string\n\n"
"$adjusted = Str::start('/this/string', '/');\n\n"
"// /this/string\n"
msgstr ""

#: docs/10.x/strings.md:block 267 (header)
msgid "`Str::startsWith()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 268 (paragraph)
msgid "The `Str::startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: docs/10.x/strings.md:block 269 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::startsWith('This is my name', 'This');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 270 (paragraph)
msgid "If an array of possible values is passed, the `startsWith` method will return `true` if the string begins with any of the given values:"
msgstr ""

#: docs/10.x/strings.md:block 271 (code)
msgid "$result = Str::startsWith('This is my name', ['This', 'That', 'There']);\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 273 (header)
msgid "`Str::studly()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 274 (paragraph)
msgid "The `Str::studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: docs/10.x/strings.md:block 275 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::studly('foo_bar');\n\n"
"// FooBar\n"
msgstr ""

#: docs/10.x/strings.md:block 277 (header)
msgid "`Str::substr()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 278 (paragraph)
msgid "The `Str::substr` method returns the portion of string specified by the start and length parameters:"
msgstr ""

#: docs/10.x/strings.md:block 279 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::substr('The Laravel Framework', 4, 7);\n\n"
"// Laravel\n"
msgstr ""

#: docs/10.x/strings.md:block 281 (header)
msgid "`Str::substrCount()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 282 (paragraph)
msgid "The `Str::substrCount` method returns the number of occurrences of a given value in the given string:"
msgstr ""

#: docs/10.x/strings.md:block 283 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$count = Str::substrCount('If you like ice cream, you will like snow cones.', 'like');\n\n"
"// 2\n"
msgstr ""

#: docs/10.x/strings.md:block 285 (header)
msgid "`Str::substrReplace()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 286 (paragraph)
msgid "The `Str::substrReplace` method replaces text within a portion of a string, starting at the position specified by the third argument and replacing the number of characters specified by the fourth argument. Passing `0` to the method's fourth argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: docs/10.x/strings.md:block 287 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::substrReplace('1300', ':', 2);\n"
"// 13:\n\n"
"$result = Str::substrReplace('1300', ':', 2, 0);\n"
"// 13:00\n"
msgstr ""

#: docs/10.x/strings.md:block 289 (header)
msgid "`Str::swap()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 290 (paragraph)
msgid "The `Str::swap` method replaces multiple values in the given string using PHP's `strtr` function:"
msgstr ""

#: docs/10.x/strings.md:block 291 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::swap([\n"
"    'Tacos' => 'Burritos',\n"
"    'great' => 'fantastic',\n"
"], 'Tacos are great!');\n\n"
"// Burritos are fantastic!\n"
msgstr ""

#: docs/10.x/strings.md:block 293 (header)
msgid "`Str::take()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 294 (paragraph)
msgid "The `Str::take` method returns a specified number of characters from the beginning of a string:"
msgstr ""

#: docs/10.x/strings.md:block 295 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$taken = Str::take('Build something amazing!', 5);\n\n"
"// Build\n"
msgstr ""

#: docs/10.x/strings.md:block 297 (header)
msgid "`Str::title()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 298 (paragraph)
msgid "The `Str::title` method converts the given string to `Title Case`:"
msgstr ""

#: docs/10.x/strings.md:block 299 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::title('a nice title uses the correct case');\n\n"
"// A Nice Title Uses The Correct Case\n"
msgstr ""

#: docs/10.x/strings.md:block 301 (header)
msgid "`Str::toHtmlString()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 302 (paragraph)
msgid "The `Str::toHtmlString` method converts the string instance to an instance of `Illuminate\\Support\\HtmlString`, which may be displayed in Blade templates:"
msgstr ""

#: docs/10.x/strings.md:block 303 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$htmlString = Str::of('Nuno Maduro')->toHtmlString();\n"
msgstr ""

#: docs/10.x/strings.md:block 305 (header)
msgid "`Str::ucfirst()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 306 (paragraph)
msgid "The `Str::ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: docs/10.x/strings.md:block 307 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::ucfirst('foo bar');\n\n"
"// Foo bar\n"
msgstr ""

#: docs/10.x/strings.md:block 309 (header)
msgid "`Str::ucsplit()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 310 (paragraph)
msgid "The `Str::ucsplit` method splits the given string into an array by uppercase characters:"
msgstr ""

#: docs/10.x/strings.md:block 311 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$segments = Str::ucsplit('FooBar');\n\n"
"// [0 => 'Foo', 1 => 'Bar']\n"
msgstr ""

#: docs/10.x/strings.md:block 313 (header)
msgid "`Str::upper()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 314 (paragraph)
msgid "The `Str::upper` method converts the given string to uppercase:"
msgstr ""

#: docs/10.x/strings.md:block 315 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::upper('laravel');\n\n"
"// LARAVEL\n"
msgstr ""

#: docs/10.x/strings.md:block 317 (header)
msgid "`Str::ulid()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 318 (paragraph)
msgid "The `Str::ulid` method generates a ULID, which is a compact, time-ordered unique identifier:"
msgstr ""

#: docs/10.x/strings.md:block 319 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"return (string) Str::ulid();\n\n"
"// 01gd6r360bp37zj17nxb55yv40\n"
msgstr ""

#: docs/10.x/strings.md:block 320 (paragraph)
msgid "If you would like to retrieve a `Illuminate\\Support\\Carbon` date instance representing the date and time that a given ULID was created, you may use the `createFromId` method provided by Laravel's Carbon integration:"
msgstr ""

#: docs/10.x/strings.md:block 321 (code)
msgid "use Illuminate\\Support\\Carbon;\n"
"use Illuminate\\Support\\Str;\n\n"
"$date = Carbon::createFromId((string) Str::ulid());\n"
msgstr ""

#: docs/10.x/strings.md:block 323 (header)
msgid "`Str::uuid()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 324 (paragraph)
msgid "The `Str::uuid` method generates a UUID (version 4):"
msgstr ""

#: docs/10.x/strings.md:block 325 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"return (string) Str::uuid();\n"
msgstr ""

#: docs/10.x/strings.md:block 327 (header)
msgid "`Str::wordCount()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 328 (paragraph)
msgid "The `Str::wordCount` method returns the number of words that a string contains:"
msgstr ""

#: docs/10.x/strings.md:block 329 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Str::wordCount('Hello, world!'); // 2\n"
msgstr ""

#: docs/10.x/strings.md:block 331 (header)
msgid "`Str::wordWrap()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 332 (paragraph)
msgid "The `Str::wordWrap` method wraps a string to a given number of characters:"
msgstr ""

#: docs/10.x/strings.md:block 333 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$text = \"The quick brown fox jumped over the lazy dog.\"\n\n"
"Str::wordWrap($text, characters: 20, break: \"<br />\\n\");\n\n"
"/*\n"
"The quick brown fox<br />\n"
"jumped over the lazy<br />\n"
"dog.\n"
"*/\n"
msgstr ""

#: docs/10.x/strings.md:block 335 (header)
msgid "`Str::words()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 336 (paragraph)
msgid "The `Str::words` method limits the number of words in a string. An additional string may be passed to this method via its third argument to specify which string should be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 337 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"return Str::words('Perfectly balanced, as all things should be.', 3, ' >>>');\n\n"
"// Perfectly balanced, as >>>\n"
msgstr ""

#: docs/10.x/strings.md:block 339 (header)
msgid "`Str::wrap()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 340 (paragraph)
msgid "The `Str::wrap` method wraps the given string with an additional string or pair of strings:"
msgstr ""

#: docs/10.x/strings.md:block 341 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Str::wrap('Laravel', '\"');\n\n"
"// \"Laravel\"\n\n"
"Str::wrap('is', before: 'This ', after: ' Laravel!');\n\n"
"// This is Laravel!\n"
msgstr ""

#: docs/10.x/strings.md:block 343 (header)
msgid "`str()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 344 (paragraph)
msgid "The `str` function returns a new `Illuminate\\Support\\Stringable` instance of the given string. This function is equivalent to the `Str::of` method:"
msgstr ""

#: docs/10.x/strings.md:block 345 (code)
msgid "$string = str('Taylor')->append(' Otwell');\n\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/strings.md:block 346 (paragraph)
msgid "If no argument is provided to the `str` function, the function returns an instance of `Illuminate\\Support\\Str`:"
msgstr ""

#: docs/10.x/strings.md:block 347 (code)
msgid "$snake = str()->snake('FooBar');\n\n"
"// 'foo_bar'\n"
msgstr ""

#: docs/10.x/strings.md:block 349 (header)
msgid "`trans()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 350 (paragraph)
msgid "The `trans` function translates the given translation key using your [language files](/docs/{{version}}/localization):"
msgstr ""

#: docs/10.x/strings.md:block 351 (code)
msgid "echo trans('messages.welcome');\n"
msgstr ""

#: docs/10.x/strings.md:block 352 (paragraph)
msgid "If the specified translation key does not exist, the `trans` function will return the given key. So, using the example above, the `trans` function would return `messages.welcome` if the translation key does not exist."
msgstr ""

#: docs/10.x/strings.md:block 354 (header)
msgid "`trans_choice()` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 355 (paragraph)
msgid "The `trans_choice` function translates the given translation key with inflection:"
msgstr ""

#: docs/10.x/strings.md:block 356 (code)
msgid "echo trans_choice('messages.notifications', $unreadCount);\n"
msgstr ""

#: docs/10.x/strings.md:block 357 (paragraph)
msgid "If the specified translation key does not exist, the `trans_choice` function will return the given key. So, using the example above, the `trans_choice` function would return `messages.notifications` if the translation key does not exist."
msgstr ""

#: docs/10.x/strings.md:block 360 (paragraph)
msgid "Fluent strings provide a more fluent, object-oriented interface for working with string values, allowing you to chain multiple string operations together using a more readable syntax compared to traditional string operations."
msgstr ""

#: docs/10.x/strings.md:block 362 (header)
msgid "`after` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 363 (paragraph)
msgid "The `after` method returns everything after the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/strings.md:block 364 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::of('This is my name')->after('This is');\n\n"
"// ' my name'\n"
msgstr ""

#: docs/10.x/strings.md:block 366 (header)
msgid "`afterLast` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 367 (paragraph)
msgid "The `afterLast` method returns everything after the last occurrence of the given value in a string. The entire string will be returned if the value does not exist within the string:"
msgstr ""

#: docs/10.x/strings.md:block 368 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::of('App\\Http\\Controllers\\Controller')->afterLast('\\\\');\n\n"
"// 'Controller'\n"
msgstr ""

#: docs/10.x/strings.md:block 370 (header)
msgid "`append` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 371 (paragraph)
msgid "The `append` method appends the given values to the string:"
msgstr ""

#: docs/10.x/strings.md:block 372 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Taylor')->append(' Otwell');\n\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/strings.md:block 374 (header)
msgid "`ascii` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 375 (paragraph)
msgid "The `ascii` method will attempt to transliterate the string into an ASCII value:"
msgstr ""

#: docs/10.x/strings.md:block 376 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('ü')->ascii();\n\n"
"// 'u'\n"
msgstr ""

#: docs/10.x/strings.md:block 378 (header)
msgid "`basename` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 379 (paragraph)
msgid "The `basename` method will return the trailing name component of the given string:"
msgstr ""

#: docs/10.x/strings.md:block 380 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('/foo/bar/baz')->basename();\n\n"
"// 'baz'\n"
msgstr ""

#: docs/10.x/strings.md:block 381 (paragraph)
msgid "If needed, you may provide an \"extension\" that will be removed from the trailing component:"
msgstr ""

#: docs/10.x/strings.md:block 382 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('/foo/bar/baz.jpg')->basename('.jpg');\n\n"
"// 'baz'\n"
msgstr ""

#: docs/10.x/strings.md:block 384 (header)
msgid "`before` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 385 (paragraph)
msgid "The `before` method returns everything before the given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 386 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::of('This is my name')->before('my name');\n\n"
"// 'This is '\n"
msgstr ""

#: docs/10.x/strings.md:block 388 (header)
msgid "`beforeLast` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 389 (paragraph)
msgid "The `beforeLast` method returns everything before the last occurrence of the given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 390 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slice = Str::of('This is my name')->beforeLast('is');\n\n"
"// 'This '\n"
msgstr ""

#: docs/10.x/strings.md:block 392 (header)
msgid "`between` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 393 (paragraph)
msgid "The `between` method returns the portion of a string between two values:"
msgstr ""

#: docs/10.x/strings.md:block 394 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('This is my name')->between('This', 'name');\n\n"
"// ' is my '\n"
msgstr ""

#: docs/10.x/strings.md:block 396 (header)
msgid "`betweenFirst` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 397 (paragraph)
msgid "The `betweenFirst` method returns the smallest possible portion of a string between two values:"
msgstr ""

#: docs/10.x/strings.md:block 398 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('[a] bc [d]')->betweenFirst('[', ']');\n\n"
"// 'a'\n"
msgstr ""

#: docs/10.x/strings.md:block 400 (header)
msgid "`camel` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 401 (paragraph)
msgid "The `camel` method converts the given string to `camelCase`:"
msgstr ""

#: docs/10.x/strings.md:block 402 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('foo_bar')->camel();\n\n"
"// fooBar\n"
msgstr ""

#: docs/10.x/strings.md:block 404 (header)
msgid "`classBasename` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 405 (paragraph)
msgid "The `classBasename` method returns the class name of the given class with the class's namespace removed:"
msgstr ""

#: docs/10.x/strings.md:block 406 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$class = Str::of('Foo\\Bar\\Baz')->classBasename();\n\n"
"// Baz\n"
msgstr ""

#: docs/10.x/strings.md:block 408 (header)
msgid "`contains` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 409 (paragraph)
msgid "The `contains` method determines if the given string contains the given value. This method is case sensitive:"
msgstr ""

#: docs/10.x/strings.md:block 410 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$contains = Str::of('This is my name')->contains('my');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 412 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$contains = Str::of('This is my name')->contains(['my', 'foo']);\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 414 (header)
msgid "`containsAll` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 415 (paragraph)
msgid "The `containsAll` method determines if the given string contains all of the values in the given array:"
msgstr ""

#: docs/10.x/strings.md:block 416 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$containsAll = Str::of('This is my name')->containsAll(['my', 'name']);\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 418 (header)
msgid "`dirname` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 419 (paragraph)
msgid "The `dirname` method returns the parent directory portion of the given string:"
msgstr ""

#: docs/10.x/strings.md:block 420 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('/foo/bar/baz')->dirname();\n\n"
"// '/foo/bar'\n"
msgstr ""

#: docs/10.x/strings.md:block 421 (paragraph)
msgid "If necessary, you may specify how many directory levels you wish to trim from the string:"
msgstr ""

#: docs/10.x/strings.md:block 422 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('/foo/bar/baz')->dirname(2);\n\n"
"// '/foo'\n"
msgstr ""

#: docs/10.x/strings.md:block 424 (header)
msgid "`excerpt` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 425 (paragraph)
msgid "The `excerpt` method extracts an excerpt from the string that matches the first instance of a phrase within that string:"
msgstr ""

#: docs/10.x/strings.md:block 426 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$excerpt = Str::of('This is my name')->excerpt('my', [\n"
"    'radius' => 3\n"
"]);\n\n"
"// '...is my na...'\n"
msgstr ""

#: docs/10.x/strings.md:block 428 (paragraph)
msgid "In addition, you may use the `omission` option to change the string that will be prepended and appended to the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 429 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$excerpt = Str::of('This is my name')->excerpt('name', [\n"
"    'radius' => 3,\n"
"    'omission' => '(...) '\n"
"]);\n\n"
"// '(...) my name'\n"
msgstr ""

#: docs/10.x/strings.md:block 431 (header)
msgid "`endsWith` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 432 (paragraph)
msgid "The `endsWith` method determines if the given string ends with the given value:"
msgstr ""

#: docs/10.x/strings.md:block 433 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('This is my name')->endsWith('name');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 435 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('This is my name')->endsWith(['name', 'foo']);\n\n"
"// true\n\n"
"$result = Str::of('This is my name')->endsWith(['this', 'foo']);\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 437 (header)
msgid "`exactly` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 438 (paragraph)
msgid "The `exactly` method determines if the given string is an exact match with another string:"
msgstr ""

#: docs/10.x/strings.md:block 439 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('Laravel')->exactly('Laravel');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 441 (header)
msgid "`explode` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 442 (paragraph)
msgid "The `explode` method splits the string by the given delimiter and returns a collection containing each section of the split string:"
msgstr ""

#: docs/10.x/strings.md:block 443 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$collection = Str::of('foo bar baz')->explode(' ');\n\n"
"// collect(['foo', 'bar', 'baz'])\n"
msgstr ""

#: docs/10.x/strings.md:block 445 (header)
msgid "`finish` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 446 (paragraph)
msgid "The `finish` method adds a single instance of the given value to a string if it does not already end with that value:"
msgstr ""

#: docs/10.x/strings.md:block 447 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$adjusted = Str::of('this/string')->finish('/');\n\n"
"// this/string/\n\n"
"$adjusted = Str::of('this/string/')->finish('/');\n\n"
"// this/string/\n"
msgstr ""

#: docs/10.x/strings.md:block 449 (header)
msgid "`headline` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 450 (paragraph)
msgid "The `headline` method will convert strings delimited by casing, hyphens, or underscores into a space delimited string with each word's first letter capitalized:"
msgstr ""

#: docs/10.x/strings.md:block 451 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$headline = Str::of('taylor_otwell')->headline();\n\n"
"// Taylor Otwell\n\n"
"$headline = Str::of('EmailNotificationSent')->headline();\n\n"
"// Email Notification Sent\n"
msgstr ""

#: docs/10.x/strings.md:block 453 (header)
msgid "`inlineMarkdown` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 454 (paragraph)
msgid "The `inlineMarkdown` method converts GitHub flavored Markdown into inline HTML using [CommonMark](https://commonmark.thephpleague.com/). However, unlike the `markdown` method, it does not wrap all generated HTML in a block-level element:"
msgstr ""

#: docs/10.x/strings.md:block 455 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$html = Str::of('**Laravel**')->inlineMarkdown();\n\n"
"// <strong>Laravel</strong>\n"
msgstr ""

#: docs/10.x/strings.md:block 457 (header)
msgid "`is` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 458 (paragraph)
msgid "The `is` method determines if a given string matches a given pattern. Asterisks may be used as wildcard values"
msgstr ""

#: docs/10.x/strings.md:block 459 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$matches = Str::of('foobar')->is('foo*');\n\n"
"// true\n\n"
"$matches = Str::of('foobar')->is('baz*');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 461 (header)
msgid "`isAscii` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 462 (paragraph)
msgid "The `isAscii` method determines if a given string is an ASCII string:"
msgstr ""

#: docs/10.x/strings.md:block 463 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('Taylor')->isAscii();\n\n"
"// true\n\n"
"$result = Str::of('ü')->isAscii();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 465 (header)
msgid "`isEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 466 (paragraph)
msgid "The `isEmpty` method determines if the given string is empty:"
msgstr ""

#: docs/10.x/strings.md:block 467 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('  ')->trim()->isEmpty();\n\n"
"// true\n\n"
"$result = Str::of('Laravel')->trim()->isEmpty();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 469 (header)
msgid "`isNotEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 470 (paragraph)
msgid "The `isNotEmpty` method determines if the given string is not empty:"
msgstr ""

#: docs/10.x/strings.md:block 471 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('  ')->trim()->isNotEmpty();\n\n"
"// false\n\n"
"$result = Str::of('Laravel')->trim()->isNotEmpty();\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 473 (header)
msgid "`isJson` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 474 (paragraph)
msgid "The `isJson` method determines if a given string is valid JSON:"
msgstr ""

#: docs/10.x/strings.md:block 475 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('[1,2,3]')->isJson();\n\n"
"// true\n\n"
"$result = Str::of('{\"first\": \"John\", \"last\": \"Doe\"}')->isJson();\n\n"
"// true\n\n"
"$result = Str::of('{first: \"John\", last: \"Doe\"}')->isJson();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 477 (header)
msgid "`isUlid` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 478 (paragraph)
msgid "The `isUlid` method determines if a given string is a ULID:"
msgstr ""

#: docs/10.x/strings.md:block 479 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('01gd6r360bp37zj17nxb55yv40')->isUlid();\n\n"
"// true\n\n"
"$result = Str::of('Taylor')->isUlid();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 481 (header)
msgid "`isUrl` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 482 (paragraph)
msgid "The `isUrl` method determines if a given string is a URL:"
msgstr ""

#: docs/10.x/strings.md:block 483 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('http://example.com')->isUrl();\n\n"
"// true\n\n"
"$result = Str::of('Taylor')->isUrl();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 485 (header)
msgid "`isUuid` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 486 (paragraph)
msgid "The `isUuid` method determines if a given string is a UUID:"
msgstr ""

#: docs/10.x/strings.md:block 487 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('5ace9ab9-e9cf-4ec6-a19d-5881212a452c')->isUuid();\n\n"
"// true\n\n"
"$result = Str::of('Taylor')->isUuid();\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 489 (header)
msgid "`kebab` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 490 (paragraph)
msgid "The `kebab` method converts the given string to `kebab-case`:"
msgstr ""

#: docs/10.x/strings.md:block 491 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('fooBar')->kebab();\n\n"
"// foo-bar\n"
msgstr ""

#: docs/10.x/strings.md:block 493 (header)
msgid "`lcfirst` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 494 (paragraph)
msgid "The `lcfirst` method returns the given string with the first character lowercased:"
msgstr ""

#: docs/10.x/strings.md:block 495 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Foo Bar')->lcfirst();\n\n"
"// foo Bar\n"
msgstr ""

#: docs/10.x/strings.md:block 497 (header)
msgid "`length` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 498 (paragraph)
msgid "The `length` method returns the length of the given string:"
msgstr ""

#: docs/10.x/strings.md:block 499 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$length = Str::of('Laravel')->length();\n\n"
"// 7\n"
msgstr ""

#: docs/10.x/strings.md:block 501 (header)
msgid "`limit` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 502 (paragraph)
msgid "The `limit` method truncates the given string to the specified length:"
msgstr ""

#: docs/10.x/strings.md:block 503 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20);\n\n"
"// The quick brown fox...\n"
msgstr ""

#: docs/10.x/strings.md:block 504 (paragraph)
msgid "You may also pass a second argument to change the string that will be appended to the end of the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 505 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$truncated = Str::of('The quick brown fox jumps over the lazy dog')->limit(20, ' (...)');\n\n"
"// The quick brown fox (...)\n"
msgstr ""

#: docs/10.x/strings.md:block 507 (header)
msgid "`lower` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 508 (paragraph)
msgid "The `lower` method converts the given string to lowercase:"
msgstr ""

#: docs/10.x/strings.md:block 509 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('LARAVEL')->lower();\n\n"
"// 'laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 511 (header)
msgid "`ltrim` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 512 (paragraph)
msgid "The `ltrim` method trims the left side of the string:"
msgstr ""

#: docs/10.x/strings.md:block 513 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('  Laravel  ')->ltrim();\n\n"
"// 'Laravel  '\n\n"
"$string = Str::of('/Laravel/')->ltrim('/');\n\n"
"// 'Laravel/'\n"
msgstr ""

#: docs/10.x/strings.md:block 515 (header)
msgid "`markdown` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 516 (paragraph)
msgid "The `markdown` method converts GitHub flavored Markdown into HTML:"
msgstr ""

#: docs/10.x/strings.md:block 517 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$html = Str::of('# Laravel')->markdown();\n\n"
"// <h1>Laravel</h1>\n\n"
"$html = Str::of('# Taylor <b>Otwell</b>')->markdown([\n"
"    'html_input' => 'strip',\n"
"]);\n\n"
"// <h1>Taylor Otwell</h1>\n"
msgstr ""

#: docs/10.x/strings.md:block 519 (header)
msgid "`mask` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 520 (paragraph)
msgid "The `mask` method masks a portion of a string with a repeated character, and may be used to obfuscate segments of strings such as email addresses and phone numbers:"
msgstr ""

#: docs/10.x/strings.md:block 521 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('taylor@example.com')->mask('*', 3);\n\n"
"// tay***************\n"
msgstr ""

#: docs/10.x/strings.md:block 522 (paragraph)
msgid "If needed, you may provide negative numbers as the third or fourth argument to the `mask` method, which will instruct the method to begin masking at the given distance from the end of the string:"
msgstr ""

#: docs/10.x/strings.md:block 523 (code)
msgid "$string = Str::of('taylor@example.com')->mask('*', -15, 3);\n\n"
"// tay***@example.com\n\n"
"$string = Str::of('taylor@example.com')->mask('*', 4, -4);\n\n"
"// tayl**********.com\n"
msgstr ""

#: docs/10.x/strings.md:block 525 (header)
msgid "`match` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 526 (paragraph)
msgid "The `match` method will return the portion of a string that matches a given regular expression pattern:"
msgstr ""

#: docs/10.x/strings.md:block 527 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('foo bar')->match('/bar/');\n\n"
"// 'bar'\n\n"
"$result = Str::of('foo bar')->match('/foo (.*)/');\n\n"
"// 'bar'\n"
msgstr ""

#: docs/10.x/strings.md:block 529 (header)
msgid "`matchAll` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 530 (paragraph)
msgid "The `matchAll` method will return a collection containing the portions of a string that match a given regular expression pattern:"
msgstr ""

#: docs/10.x/strings.md:block 531 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('bar foo bar')->matchAll('/bar/');\n\n"
"// collect(['bar', 'bar'])\n"
msgstr ""

#: docs/10.x/strings.md:block 532 (paragraph)
msgid "If you specify a matching group within the expression, Laravel will return a collection of that group's matches:"
msgstr ""

#: docs/10.x/strings.md:block 533 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('bar fun bar fly')->matchAll('/f(\\w*)/');\n\n"
"// collect(['un', 'ly']);\n"
msgstr ""

#: docs/10.x/strings.md:block 534 (paragraph)
msgid "If no matches are found, an empty collection will be returned."
msgstr ""

#: docs/10.x/strings.md:block 536 (header)
msgid "`isMatch` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 537 (paragraph)
msgid "The `isMatch` method will return `true` if the string matches a given regular expression:"
msgstr ""

#: docs/10.x/strings.md:block 538 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('foo bar')->isMatch('/foo (.*)/');\n\n"
"// true\n\n"
"$result = Str::of('laravel')->isMatch('/foo (.*)/');\n\n"
"// false\n"
msgstr ""

#: docs/10.x/strings.md:block 540 (header)
msgid "`newLine` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 541 (paragraph)
msgid "The `newLine` method appends an \"end of line\" character to a string:"
msgstr ""

#: docs/10.x/strings.md:block 542 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::of('Laravel')->newLine()->append('Framework');\n\n"
"// 'Laravel\n"
"//  Framework'\n"
msgstr ""

#: docs/10.x/strings.md:block 544 (header)
msgid "`padBoth` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 545 (paragraph)
msgid "The `padBoth` method wraps PHP's `str_pad` function, padding both sides of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/strings.md:block 546 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::of('James')->padBoth(10, '_');\n\n"
"// '__James___'\n\n"
"$padded = Str::of('James')->padBoth(10);\n\n"
"// '  James   '\n"
msgstr ""

#: docs/10.x/strings.md:block 548 (header)
msgid "`padLeft` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 549 (paragraph)
msgid "The `padLeft` method wraps PHP's `str_pad` function, padding the left side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/strings.md:block 550 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::of('James')->padLeft(10, '-=');\n\n"
"// '-=-=-James'\n\n"
"$padded = Str::of('James')->padLeft(10);\n\n"
"// '     James'\n"
msgstr ""

#: docs/10.x/strings.md:block 552 (header)
msgid "`padRight` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 553 (paragraph)
msgid "The `padRight` method wraps PHP's `str_pad` function, padding the right side of a string with another string until the final string reaches the desired length:"
msgstr ""

#: docs/10.x/strings.md:block 554 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$padded = Str::of('James')->padRight(10, '-');\n\n"
"// 'James-----'\n\n"
"$padded = Str::of('James')->padRight(10);\n\n"
"// 'James     '\n"
msgstr ""

#: docs/10.x/strings.md:block 556 (header)
msgid "`pipe` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 557 (paragraph)
msgid "The `pipe` method allows you to transform the string by passing its current value to the given callable:"
msgstr ""

#: docs/10.x/strings.md:block 558 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$hash = Str::of('Laravel')->pipe('md5')->prepend('Checksum: ');\n\n"
"// 'Checksum: a5c95b86291ea299fcbe64458ed12702'\n\n"
"$closure = Str::of('foo')->pipe(function (Stringable $str) {\n"
"    return 'bar';\n"
"});\n\n"
"// 'bar'\n"
msgstr ""

#: docs/10.x/strings.md:block 560 (header)
msgid "`plural` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 561 (paragraph)
msgid "The `plural` method converts a singular word string to its plural form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/strings.md:block 562 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::of('car')->plural();\n\n"
"// cars\n\n"
"$plural = Str::of('child')->plural();\n\n"
"// children\n"
msgstr ""

#: docs/10.x/strings.md:block 564 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$plural = Str::of('child')->plural(2);\n\n"
"// children\n\n"
"$plural = Str::of('child')->plural(1);\n\n"
"// child\n"
msgstr ""

#: docs/10.x/strings.md:block 566 (header)
msgid "`position` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 567 (paragraph)
msgid "The `position` method returns the position of the first occurrence of a substring in a string. If the substring does not exist within the string, `false` is returned:"
msgstr ""

#: docs/10.x/strings.md:block 568 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$position = Str::of('Hello, World!')->position('Hello');\n\n"
"// 0\n\n"
"$position = Str::of('Hello, World!')->position('W');\n\n"
"// 7\n"
msgstr ""

#: docs/10.x/strings.md:block 570 (header)
msgid "`prepend` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 571 (paragraph)
msgid "The `prepend` method prepends the given values onto the string:"
msgstr ""

#: docs/10.x/strings.md:block 572 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Framework')->prepend('Laravel ');\n\n"
"// Laravel Framework\n"
msgstr ""

#: docs/10.x/strings.md:block 574 (header)
msgid "`remove` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 575 (paragraph)
msgid "The `remove` method removes the given value or array of values from the string:"
msgstr ""

#: docs/10.x/strings.md:block 576 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Arkansas is quite beautiful!')->remove('quite');\n\n"
"// Arkansas is beautiful!\n"
msgstr ""

#: docs/10.x/strings.md:block 577 (paragraph)
msgid "You may also pass `false` as a second parameter to ignore case when removing strings."
msgstr ""

#: docs/10.x/strings.md:block 579 (header)
msgid "`repeat` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 580 (paragraph)
msgid "The `repeat` method repeats the given string:"
msgstr ""

#: docs/10.x/strings.md:block 581 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$repeated = Str::of('a')->repeat(5);\n\n"
"// aaaaa\n"
msgstr ""

#: docs/10.x/strings.md:block 583 (header)
msgid "`replace` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 584 (paragraph)
msgid "The `replace` method replaces a given string within the string:"
msgstr ""

#: docs/10.x/strings.md:block 585 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('Laravel 6.x')->replace('6.x', '7.x');\n\n"
"// Laravel 7.x\n"
msgstr ""

#: docs/10.x/strings.md:block 587 (code)
msgid "$replaced = Str::of('macOS 13.x')->replace(\n"
"    'macOS', 'iOS', caseSensitive: false\n"
");\n"
msgstr ""

#: docs/10.x/strings.md:block 589 (header)
msgid "`replaceArray` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 590 (paragraph)
msgid "The `replaceArray` method replaces a given value in the string sequentially using an array:"
msgstr ""

#: docs/10.x/strings.md:block 591 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = 'The event will take place between ? and ?';\n\n"
"$replaced = Str::of($string)->replaceArray('?', ['8:30', '9:00']);\n\n"
"// The event will take place between 8:30 and 9:00\n"
msgstr ""

#: docs/10.x/strings.md:block 593 (header)
msgid "`replaceFirst` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 594 (paragraph)
msgid "The `replaceFirst` method replaces the first occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 595 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceFirst('the', 'a');\n\n"
"// a quick brown fox jumps over the lazy dog\n"
msgstr ""

#: docs/10.x/strings.md:block 597 (header)
msgid "`replaceLast` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 598 (paragraph)
msgid "The `replaceLast` method replaces the last occurrence of a given value in a string:"
msgstr ""

#: docs/10.x/strings.md:block 599 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('the quick brown fox jumps over the lazy dog')->replaceLast('the', 'a');\n\n"
"// the quick brown fox jumps over a lazy dog\n"
msgstr ""

#: docs/10.x/strings.md:block 601 (header)
msgid "`replaceMatches` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 602 (paragraph)
msgid "The `replaceMatches` method replaces all portions of a string matching a pattern with the given replacement string:"
msgstr ""

#: docs/10.x/strings.md:block 603 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('(+1) 501-555-1000')->replaceMatches('/[^A-Za-z0-9]++/', '')\n\n"
"// '15015551000'\n"
msgstr ""

#: docs/10.x/strings.md:block 605 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('123')->replaceMatches('/\\d/', function (array $matches) {\n"
"    return '['.$matches[0].']';\n"
"});\n\n"
"// '[1][2][3]'\n"
msgstr ""

#: docs/10.x/strings.md:block 607 (header)
msgid "`replaceStart` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 608 (paragraph)
msgid "The `replaceStart` method replaces the first occurrence of the given value only if the value appears at the start of the string:"
msgstr ""

#: docs/10.x/strings.md:block 609 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('Hello World')->replaceStart('Hello', 'Laravel');\n\n"
"// Laravel World\n\n"
"$replaced = Str::of('Hello World')->replaceStart('World', 'Laravel');\n\n"
"// Hello World\n"
msgstr ""

#: docs/10.x/strings.md:block 611 (header)
msgid "`replaceEnd` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 612 (paragraph)
msgid "The `replaceEnd` method replaces the last occurrence of the given value only if the value appears at the end of the string:"
msgstr ""

#: docs/10.x/strings.md:block 613 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$replaced = Str::of('Hello World')->replaceEnd('World', 'Laravel');\n\n"
"// Hello Laravel\n\n"
"$replaced = Str::of('Hello World')->replaceEnd('Hello', 'Laravel');\n\n"
"// Hello World\n"
msgstr ""

#: docs/10.x/strings.md:block 615 (header)
msgid "`rtrim` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 616 (paragraph)
msgid "The `rtrim` method trims the right side of the given string:"
msgstr ""

#: docs/10.x/strings.md:block 617 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('  Laravel  ')->rtrim();\n\n"
"// '  Laravel'\n\n"
"$string = Str::of('/Laravel/')->rtrim('/');\n\n"
"// '/Laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 619 (header)
msgid "`scan` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 620 (paragraph)
msgid "The `scan` method parses input from a string into a collection according to a format supported by the [`sscanf` PHP function](https://www.php.net/manual/en/function.sscanf.php):"
msgstr ""

#: docs/10.x/strings.md:block 621 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$collection = Str::of('filename.jpg')->scan('%[^.].%s');\n\n"
"// collect(['filename', 'jpg'])\n"
msgstr ""

#: docs/10.x/strings.md:block 623 (header)
msgid "`singular` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 624 (paragraph)
msgid "The `singular` method converts a string to its singular form. This function supports [any of the languages support by Laravel's pluralizer](/docs/{{version}}/localization#pluralization-language):"
msgstr ""

#: docs/10.x/strings.md:block 625 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$singular = Str::of('cars')->singular();\n\n"
"// car\n\n"
"$singular = Str::of('children')->singular();\n\n"
"// child\n"
msgstr ""

#: docs/10.x/strings.md:block 627 (header)
msgid "`slug` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 628 (paragraph)
msgid "The `slug` method generates a URL friendly \"slug\" from the given string:"
msgstr ""

#: docs/10.x/strings.md:block 629 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$slug = Str::of('Laravel Framework')->slug('-');\n\n"
"// laravel-framework\n"
msgstr ""

#: docs/10.x/strings.md:block 631 (header)
msgid "`snake` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 632 (paragraph)
msgid "The `snake` method converts the given string to `snake_case`:"
msgstr ""

#: docs/10.x/strings.md:block 633 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('fooBar')->snake();\n\n"
"// foo_bar\n"
msgstr ""

#: docs/10.x/strings.md:block 635 (header)
msgid "`split` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 636 (paragraph)
msgid "The `split` method splits a string into a collection using a regular expression:"
msgstr ""

#: docs/10.x/strings.md:block 637 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$segments = Str::of('one, two, three')->split('/[\\s,]+/');\n\n"
"// collect([\"one\", \"two\", \"three\"])\n"
msgstr ""

#: docs/10.x/strings.md:block 639 (header)
msgid "`squish` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 640 (paragraph)
msgid "The `squish` method removes all extraneous white space from a string, including extraneous white space between words:"
msgstr ""

#: docs/10.x/strings.md:block 641 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('    laravel    framework    ')->squish();\n\n"
"// laravel framework\n"
msgstr ""

#: docs/10.x/strings.md:block 643 (header)
msgid "`start` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 644 (paragraph)
msgid "The `start` method adds a single instance of the given value to a string if it does not already start with that value:"
msgstr ""

#: docs/10.x/strings.md:block 645 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$adjusted = Str::of('this/string')->start('/');\n\n"
"// /this/string\n\n"
"$adjusted = Str::of('/this/string')->start('/');\n\n"
"// /this/string\n"
msgstr ""

#: docs/10.x/strings.md:block 647 (header)
msgid "`startsWith` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 648 (paragraph)
msgid "The `startsWith` method determines if the given string begins with the given value:"
msgstr ""

#: docs/10.x/strings.md:block 649 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('This is my name')->startsWith('This');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 651 (header)
msgid "`studly` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 652 (paragraph)
msgid "The `studly` method converts the given string to `StudlyCase`:"
msgstr ""

#: docs/10.x/strings.md:block 653 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('foo_bar')->studly();\n\n"
"// FooBar\n"
msgstr ""

#: docs/10.x/strings.md:block 655 (header)
msgid "`substr` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 656 (paragraph)
msgid "The `substr` method returns the portion of the string specified by the given start and length parameters:"
msgstr ""

#: docs/10.x/strings.md:block 657 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Laravel Framework')->substr(8);\n\n"
"// Framework\n\n"
"$string = Str::of('Laravel Framework')->substr(8, 5);\n\n"
"// Frame\n"
msgstr ""

#: docs/10.x/strings.md:block 659 (header)
msgid "`substrReplace` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 660 (paragraph)
msgid "The `substrReplace` method replaces text within a portion of a string, starting at the position specified by the second argument and replacing the number of characters specified by the third argument. Passing `0` to the method's third argument will insert the string at the specified position without replacing any of the existing characters in the string:"
msgstr ""

#: docs/10.x/strings.md:block 661 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('1300')->substrReplace(':', 2);\n\n"
"// 13:\n\n"
"$string = Str::of('The Framework')->substrReplace(' Laravel', 3, 0);\n\n"
"// The Laravel Framework\n"
msgstr ""

#: docs/10.x/strings.md:block 663 (header)
msgid "`swap` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 664 (paragraph)
msgid "The `swap` method replaces multiple values in the string using PHP's `strtr` function:"
msgstr ""

#: docs/10.x/strings.md:block 665 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Tacos are great!')\n"
"    ->swap([\n"
"        'Tacos' => 'Burritos',\n"
"        'great' => 'fantastic',\n"
"    ]);\n\n"
"// Burritos are fantastic!\n"
msgstr ""

#: docs/10.x/strings.md:block 667 (header)
msgid "`take` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 668 (paragraph)
msgid "The `take` method returns a specified number of characters from the beginning of the string:"
msgstr ""

#: docs/10.x/strings.md:block 669 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$taken = Str::of('Build something amazing!')->take(5);\n\n"
"// Build\n"
msgstr ""

#: docs/10.x/strings.md:block 671 (header)
msgid "`tap` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 672 (paragraph)
msgid "The `tap` method passes the string to the given closure, allowing you to examine and interact with the string while not affecting the string itself. The original string is returned by the `tap` method regardless of what is returned by the closure:"
msgstr ""

#: docs/10.x/strings.md:block 673 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('Laravel')\n"
"    ->append(' Framework')\n"
"    ->tap(function (Stringable $string) {\n"
"        dump('String after append: '.$string);\n"
"    })\n"
"    ->upper();\n\n"
"// LARAVEL FRAMEWORK\n"
msgstr ""

#: docs/10.x/strings.md:block 675 (header)
msgid "`test` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 676 (paragraph)
msgid "The `test` method determines if a string matches the given regular expression pattern:"
msgstr ""

#: docs/10.x/strings.md:block 677 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$result = Str::of('Laravel Framework')->test('/Laravel/');\n\n"
"// true\n"
msgstr ""

#: docs/10.x/strings.md:block 679 (header)
msgid "`title` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 680 (paragraph)
msgid "The `title` method converts the given string to `Title Case`:"
msgstr ""

#: docs/10.x/strings.md:block 681 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$converted = Str::of('a nice title uses the correct case')->title();\n\n"
"// A Nice Title Uses The Correct Case\n"
msgstr ""

#: docs/10.x/strings.md:block 683 (header)
msgid "`trim` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 684 (paragraph)
msgid "The `trim` method trims the given string:"
msgstr ""

#: docs/10.x/strings.md:block 685 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('  Laravel  ')->trim();\n\n"
"// 'Laravel'\n\n"
"$string = Str::of('/Laravel/')->trim('/');\n\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 687 (header)
msgid "`ucfirst` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 688 (paragraph)
msgid "The `ucfirst` method returns the given string with the first character capitalized:"
msgstr ""

#: docs/10.x/strings.md:block 689 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('foo bar')->ucfirst();\n\n"
"// Foo bar\n"
msgstr ""

#: docs/10.x/strings.md:block 691 (header)
msgid "`ucsplit` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 692 (paragraph)
msgid "The `ucsplit` method splits the given string into a collection by uppercase characters:"
msgstr ""

#: docs/10.x/strings.md:block 693 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Foo Bar')->ucsplit();\n\n"
"// collect(['Foo', 'Bar'])\n"
msgstr ""

#: docs/10.x/strings.md:block 695 (header)
msgid "`upper` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 696 (paragraph)
msgid "The `upper` method converts the given string to uppercase:"
msgstr ""

#: docs/10.x/strings.md:block 697 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$adjusted = Str::of('laravel')->upper();\n\n"
"// LARAVEL\n"
msgstr ""

#: docs/10.x/strings.md:block 699 (header)
msgid "`when` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 700 (paragraph)
msgid "The `when` method invokes the given closure if a given condition is `true`. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 701 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('Taylor')\n"
"                ->when(true, function (Stringable $string) {\n"
"                    return $string->append(' Otwell');\n"
"                });\n\n"
"// 'Taylor Otwell'\n"
msgstr ""

#: docs/10.x/strings.md:block 702 (paragraph)
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the condition parameter evaluates to `false`."
msgstr ""

#: docs/10.x/strings.md:block 704 (header)
msgid "`whenContains` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 705 (paragraph)
msgid "The `whenContains` method invokes the given closure if the string contains the given value. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 706 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains('tony', function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/10.x/strings.md:block 707 (paragraph)
msgid "If necessary, you may pass another closure as the third parameter to the `when` method. This closure will execute if the string does not contain the given value."
msgstr ""

#: docs/10.x/strings.md:block 709 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('tony stark')\n"
"            ->whenContains(['tony', 'hulk'], function (Stringable $string) {\n"
"                return $string->title();\n"
"            });\n\n"
"// Tony Stark\n"
msgstr ""

#: docs/10.x/strings.md:block 711 (header)
msgid "`whenContainsAll` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 712 (paragraph)
msgid "The `whenContainsAll` method invokes the given closure if the string contains all of the given sub-strings. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 713 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('tony stark')\n"
"                ->whenContainsAll(['tony', 'stark'], function (Stringable $string) {\n"
"                    return $string->title();\n"
"                });\n\n"
"// 'Tony Stark'\n"
msgstr ""

#: docs/10.x/strings.md:block 716 (header)
msgid "`whenEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 717 (paragraph)
msgid "The `whenEmpty` method invokes the given closure if the string is empty. If the closure returns a value, that value will also be returned by the `whenEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: docs/10.x/strings.md:block 718 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('  ')->whenEmpty(function (Stringable $string) {\n"
"    return $string->trim()->prepend('Laravel');\n"
"});\n\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 720 (header)
msgid "`whenNotEmpty` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 721 (paragraph)
msgid "The `whenNotEmpty` method invokes the given closure if the string is not empty. If the closure returns a value, that value will also be returned by the `whenNotEmpty` method. If the closure does not return a value, the fluent string instance will be returned:"
msgstr ""

#: docs/10.x/strings.md:block 722 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('Framework')->whenNotEmpty(function (Stringable $string) {\n"
"    return $string->prepend('Laravel ');\n"
"});\n\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/10.x/strings.md:block 724 (header)
msgid "`whenStartsWith` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 725 (paragraph)
msgid "The `whenStartsWith` method invokes the given closure if the string starts with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 726 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('disney world')->whenStartsWith('disney', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Disney World'\n"
msgstr ""

#: docs/10.x/strings.md:block 728 (header)
msgid "`whenEndsWith` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 729 (paragraph)
msgid "The `whenEndsWith` method invokes the given closure if the string ends with the given sub-string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 730 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('disney world')->whenEndsWith('world', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Disney World'\n"
msgstr ""

#: docs/10.x/strings.md:block 732 (header)
msgid "`whenExactly` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 733 (paragraph)
msgid "The `whenExactly` method invokes the given closure if the string exactly matches the given string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 734 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('laravel')->whenExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 736 (header)
msgid "`whenNotExactly` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 737 (paragraph)
msgid "The `whenNotExactly` method invokes the given closure if the string does not exactly match the given string. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 738 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('framework')->whenNotExactly('laravel', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Framework'\n"
msgstr ""

#: docs/10.x/strings.md:block 740 (header)
msgid "`whenIs` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 741 (paragraph)
msgid "The `whenIs` method invokes the given closure if the string matches a given pattern. Asterisks may be used as wildcard values. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 742 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('foo/bar')->whenIs('foo/*', function (Stringable $string) {\n"
"    return $string->append('/baz');\n"
"});\n\n"
"// 'foo/bar/baz'\n"
msgstr ""

#: docs/10.x/strings.md:block 744 (header)
msgid "`whenIsAscii` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 745 (paragraph)
msgid "The `whenIsAscii` method invokes the given closure if the string is 7 bit ASCII. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 746 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('laravel')->whenIsAscii(function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Laravel'\n"
msgstr ""

#: docs/10.x/strings.md:block 748 (header)
msgid "`whenIsUlid` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 749 (paragraph)
msgid "The `whenIsUlid` method invokes the given closure if the string is a valid ULID. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 750 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('01gd6r360bp37zj17nxb55yv40')->whenIsUlid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n\n"
"// '01gd6r36'\n"
msgstr ""

#: docs/10.x/strings.md:block 752 (header)
msgid "`whenIsUuid` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 753 (paragraph)
msgid "The `whenIsUuid` method invokes the given closure if the string is a valid UUID. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 754 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('a0a2a2d2-0b87-4a18-83f2-2529882be2de')->whenIsUuid(function (Stringable $string) {\n"
"    return $string->substr(0, 8);\n"
"});\n\n"
"// 'a0a2a2d2'\n"
msgstr ""

#: docs/10.x/strings.md:block 756 (header)
msgid "`whenTest` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 757 (paragraph)
msgid "The `whenTest` method invokes the given closure if the string matches the given regular expression. The closure will receive the fluent string instance:"
msgstr ""

#: docs/10.x/strings.md:block 758 (code)
msgid "use Illuminate\\Support\\Str;\n"
"use Illuminate\\Support\\Stringable;\n\n"
"$string = Str::of('laravel framework')->whenTest('/laravel/', function (Stringable $string) {\n"
"    return $string->title();\n"
"});\n\n"
"// 'Laravel Framework'\n"
msgstr ""

#: docs/10.x/strings.md:block 760 (header)
msgid "`wordCount` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 761 (paragraph)
msgid "The `wordCount` method returns the number of words that a string contains:"
msgstr ""

#: docs/10.x/strings.md:block 762 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Str::of('Hello, world!')->wordCount(); // 2\n"
msgstr ""

#: docs/10.x/strings.md:block 764 (header)
msgid "`words` {.collection-method}"
msgstr ""

#: docs/10.x/strings.md:block 765 (paragraph)
msgid "The `words` method limits the number of words in a string. If necessary, you may specify an additional string that will be appended to the truncated string:"
msgstr ""

#: docs/10.x/strings.md:block 766 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"$string = Str::of('Perfectly balanced, as all things should be.')->words(3, ' >>>');\n\n"
"// Perfectly balanced, as >>>\n"
msgstr ""

