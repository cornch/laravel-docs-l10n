msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/lifecycle.pot\n"
"X-Crowdin-File-ID: 93\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-02-11 10:27\n"

#: docs/10.x/lifecycle.md:block 1 (header)
msgid "Request Lifecycle"
msgstr "Request 的生命週期"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Lifecycle Overview](#lifecycle-overview)"
msgstr "[生命週期概覽](#lifecycle-overview)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[First Steps](#first-steps)"
msgstr "[第一步](#first-steps)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[HTTP / Console Kernels](#http-console-kernels)"
msgstr "[HTTP Kernel 與 Console Kernel](#http-console-kernels)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Service Providers](#service-providers)"
msgstr "[Service Provider](#service-providers)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Routing](#routing)"
msgstr "[路由](#routing)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Finishing Up](#finishing-up)"
msgstr "[結束](#finishing-up)"

#: docs/10.x/lifecycle.md:block 2 (unordered list)
msgid "[Focus On Service Providers](#focus-on-service-providers)"
msgstr "[專注於 Service Provider](#focus-on-service-providers)"

#: docs/10.x/lifecycle.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/10.x/lifecycle.md:block 5 (paragraph)
msgid "When using any tool in the \"real world\", you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable and confident using them."
msgstr "在使用任何「真實世界」的工具時，如果我們能瞭解這個工具是怎麼運作的，通常用起來也會比較有自信。程式開發也是一樣。瞭解開發工具怎麼運作後，我們使用起來便更自在、更有自信。"

#: docs/10.x/lifecycle.md:block 6 (paragraph)
msgid "The goal of this document is to give you a good, high-level overview of how the Laravel framework works. By getting to know the overall framework better, everything feels less \"magical\" and you will be more confident building your applications. If you don't understand all of the terms right away, don't lose heart! Just try to get a basic grasp of what is going on, and your knowledge will grow as you explore other sections of the documentation."
msgstr "本片說明文件的目標在於提供讀者對 Laravel 框架如何運作的一個好的、高階的概覽。在更加瞭解 Laravel 之後，便不再會覺得所有東西都是「Magic (魔術)」，我們也能在撰寫程式時更有自信。讀者在閱讀時若遇到不了解的名詞，請先別放棄！請先試著對發生什麼事情有初步的了解，之後在閱讀本說明文件的其他部分時，讀者的知識也會持續增加。"

#: docs/10.x/lifecycle.md:block 8 (header)
msgid "Lifecycle Overview"
msgstr "生命週期概覽"

#: docs/10.x/lifecycle.md:block 10 (header)
msgid "First Steps"
msgstr "第一步"

#: docs/10.x/lifecycle.md:block 11 (paragraph)
msgid "The entry point for all requests to a Laravel application is the `public/index.php` file. All requests are directed to this file by your web server (Apache / Nginx) configuration. The `index.php` file doesn't contain much code. Rather, it is a starting point for loading the rest of the framework."
msgstr "所有 Request 進入 Laravel 程式的起點都是 `public/index.php` 檔案。所有的 Request 都會通過你的網頁伺服器 (Apache / Nginx) 設定檔被導向到這個檔案內。`index.php` 檔案內沒有包含太多的程式碼。裡面只是用來載入 Laravel 中其他部分的起始點。"

#: docs/10.x/lifecycle.md:block 12 (paragraph)
msgid "The `index.php` file loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from `bootstrap/app.php`. The first action taken by Laravel itself is to create an instance of the application / [service container](/docs/{{version}}/container)."
msgstr "`index.php` 檔案會載入由 Composer 產生的 Autoloader 定義，然後接著我們會從 `bootstrap/app.php` 中取得 Laravel 應用程式的實體。真正由 Laravel 自己做的第一個步驟是建立應用程式 / [Service Container](/docs/{{version}}/container) 的實體。"

#: docs/10.x/lifecycle.md:block 14 (header)
msgid "HTTP / Console Kernels"
msgstr "HTTP 與 Console 的 Kernel"

#: docs/10.x/lifecycle.md:block 15 (paragraph)
msgid "Next, the incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application. These two kernels serve as the central location that all requests flow through. For now, let's just focus on the HTTP kernel, which is located in `app/Http/Kernel.php`."
msgstr "接著，根據進入應用程式的 Request 種類，所有連入的 Request 不是被送到 HTTP Kernel 就是 Console Kernel。這兩種 Kernel (核心) 是提供所有 Request 流向的中心點。現在，我們先只看 HTTP Kernel。該檔案位在 `app/Http/Kernel.php`。"

#: docs/10.x/lifecycle.md:block 16 (paragraph)
msgid "The HTTP kernel extends the `Illuminate\\Foundation\\Http\\Kernel` class, which defines an array of `bootstrappers` that will be run before the request is executed. These bootstrappers configure error handling, configure logging, [detect the application environment](/docs/{{version}}/configuration#environment-configuration), and perform other tasks that need to be done before the request is actually handled. Typically, these classes handle internal Laravel configuration that you do not need to worry about."
msgstr "HTTP Kernel 繼承了 `Illuminate\\Foundation\\Http\\Kernel` 類別，該類別定義了一個 `bootstrappers` 的陣列。這個陣列會在 Request 被執行前回傳。這些 Bootstrappers 分別設定了錯誤處理常式、設定 Log、[偵測應用程式執行的環境](/docs/{{version}}/configuration#environment-configuration)、然後進行一些我們在實際處理 Request 前要進行的其他任務。一般來說，這些類別負責處理一些你不需要擔心的 Laravel 內部設定。"

#: docs/10.x/lifecycle.md:block 17 (paragraph)
msgid "The HTTP kernel also defines a list of HTTP [middleware](/docs/{{version}}/middleware) that all requests must pass through before being handled by the application. These middleware handle reading and writing the [HTTP session](/docs/{{version}}/session), determining if the application is in maintenance mode, [verifying the CSRF token](/docs/{{version}}/csrf), and more. We'll talk more about these soon."
msgstr "HTTP Kernel 還定義了一個 HTTP [Middleware (中介軟體)](/docs/{{version}}/middleware) 列表。Request 必須要通過這些 Middleware，然後才會被應用程式處理。這些 Middleware 會負責處理讀寫 [HTTP Session](/docs/{{version}}/session)、判斷應用程式是否在維護模式下、[認證 CSRF Token (權杖)](/docs/{{version}}/csrf)⋯⋯等。我們稍後會再討論這些。"

#: docs/10.x/lifecycle.md:block 18 (paragraph)
msgid "The method signature for the HTTP kernel's `handle` method is quite simple: it receives a `Request` and returns a `Response`. Think of the kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses."
msgstr "HTTP Kernel 中 `handle` 方法的簽名 (Signature) 很簡單：handle 方法接受一個 `Request` 然後回傳 `Response`。可以把這個 Kernel 想像成一個大大的黑盒子，這個黑盒子就代表了你的整個應用程式。我們把 HTTP Request 扔給這個黑盒子，黑盒子就會回傳 HTTP Response 給我們。"

#: docs/10.x/lifecycle.md:block 20 (header)
msgid "Service Providers"
msgstr "Service Provider"

#: docs/10.x/lifecycle.md:block 21 (paragraph)
msgid "One of the most important kernel bootstrapping actions is loading the [service providers](/docs/{{version}}/providers) for your application. Service providers are responsible for bootstrapping all of the framework's various components, such as the database, queue, validation, and routing components. All of the service providers for the application are configured in the `config/app.php` configuration file's `providers` array."
msgstr "Kernel 啟動時，其中一個最重要的動作就是為程式載入 [Service Provider](/docs/{{version}}/providers)。Service Provider 負責啟動框架中所有的元件，如資料庫、Queu、表單驗證、路由原件。程式中所有的 Service Provider 都在 `config/app.php` 設定檔中的 `providers` 陣列內設定。"

#: docs/10.x/lifecycle.md:block 22 (paragraph)
msgid "Laravel will iterate through this list of providers and instantiate each of them. After instantiating the providers, the `register` method will be called on all of the providers. Then, once all of the providers have been registered, the `boot` method will be called on each provider. This is so service providers may depend on every container binding being registered and available by the time their `boot` method is executed."
msgstr "Laravel 會迭代這個 Service Provider 列表，然後將逐一初始化這些 Provider。初始化好 Provider 後，就會呼叫所有 Provider 的 `register` (註冊) 方法。接著，註冊好所有 Provider 後，就會呼叫每個 Provider 的 `boot` (啟動) 方法。這樣一來，在執行 `boot` 方法時，Service Provider 就能相依所有註冊好的 Container Binding (容器繫結)。"

#: docs/10.x/lifecycle.md:block 23 (paragraph)
msgid "Essentially every major feature offered by Laravel is bootstrapped and configured by a service provider. Since they bootstrap and configure so many features offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process."
msgstr "基本上來說，Laravel 所提供的所有主要功能都是使用 Service Provider 來啟動並設定的。由於 Service Provider 需要啟動並設定框架中許多的功能，因此 Service Provider 是整個 Laravel 啟動過程中最重要的一個部分。"

#: docs/10.x/lifecycle.md:block 25 (header)
msgid "Routing"
msgstr "路由"

#: docs/10.x/lifecycle.md:block 26 (paragraph)
msgid "One of the most important service providers in your application is the `App\\Providers\\RouteServiceProvider`. This service provider loads the route files contained within your application's `routes` directory. Go ahead, crack open the `RouteServiceProvider` code and take a look at how it works!"
msgstr "你的程式中，最重要的一個 Service Provider 就是 `App\\Providers\\RouteServiceProvider` 了。這個 Service Provider 負責載入專案 `routes` 目錄下的路由檔案。現在就去打開 `RouteServiceProvider` 的程式碼然後看看這個檔案是怎麼運作的吧！"

#: docs/10.x/lifecycle.md:block 27 (paragraph)
msgid "Once the application has been bootstrapped and all service providers have been registered, the `Request` will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware."
msgstr "啟動好應用程式且註冊好所有 Service Provider 後，`Request` 就會接著被傳給 Router 來分派 (Dispatch)。Router 會將 Request 分派給一個 Route (路由) 或 Controller (控制器)，並執行任何由 Route 指定的 Middleware。"

#: docs/10.x/lifecycle.md:block 28 (paragraph)
msgid "Middleware provide a convenient mechanism for filtering or examining HTTP requests entering your application. For example, Laravel includes a middleware that verifies if the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to the login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application. Some middleware are assigned to all routes within the application, like those defined in the `$middleware` property of your HTTP kernel, while some are only assigned to specific routes or route groups. You can learn more about middleware by reading the complete [middleware documentation](/docs/{{version}}/middleware)."
msgstr "若要對進入應用程式的 HTTP Request 進行過濾或檢驗，Middleware 提供了一個方便的機制。舉例來說，Laravel 中提供了一個用來認證應用程式使用者是否已登入的 Middleware。若使用者未登入，該 Middleware 會把使用者重新導向到登入畫面。不過，若使用者未登入，則該 Middleware 就會讓 Request 繼續進入應用程式。有的 Middleware 被指派給應用程式內的所有 Route，例如定義在 HTTP Kernel 中 `$middleware` 屬性內的那些 Middleware；有的 Middleware 則只被指派給特定的 Route 或 Route 群組。你可以閱讀完整的 [Middleware 說明文件](/docs/{{version}}/middleware)來瞭解更多有關 Middleware 的資訊。"

#: docs/10.x/lifecycle.md:block 29 (paragraph)
msgid "If the request passes through all of the matched route's assigned middleware, the route or controller method will be executed and the response returned by the route or controller method will be sent back through the route's chain of middleware."
msgstr "若 Request 通過了所有 Route 指定的 Middleware，則會執行 Route 或 Controller，並將 Route 或 Controller 回傳的 Response 送回給 Route 的 MIddleware 鏈。"

#: docs/10.x/lifecycle.md:block 31 (header)
msgid "Finishing Up"
msgstr "結束"

#: docs/10.x/lifecycle.md:block 32 (paragraph)
msgid "Once the route or controller method returns a response, the response will travel back outward through the route's middleware, giving the application a chance to modify or examine the outgoing response."
msgstr "Route 或 Controller 方法回傳 Response 之後，這個 Response 會再反過來通過 Route 的 Middleware，能讓應用程式有機會對要輸出的 Response 作修改或檢驗。"

#: docs/10.x/lifecycle.md:block 33 (paragraph)
msgid "Finally, once the response travels back through the middleware, the HTTP kernel's `handle` method returns the response object and the `index.php` file calls the `send` method on the returned response. The `send` method sends the response content to the user's web browser. We've finished our journey through the entire Laravel request lifecycle!"
msgstr "最後，當 Response 回頭走過所有 Middleware 後，HTTP Kernel 的 `handle` 方法就會回傳 Response 物件，然後 `index.php` 檔案則會呼叫這個 Response 物件上的 `send` 方法。`send` 方法會將 Response 的內容送到使用者的網頁瀏覽器上。到這裡，我們走完整個 Laravel Request 生命週期的旅程了！"

#: docs/10.x/lifecycle.md:block 35 (header)
msgid "Focus On Service Providers"
msgstr "專注於 Service Provider"

#: docs/10.x/lifecycle.md:block 36 (paragraph)
msgid "Service providers are truly the key to bootstrapping a Laravel application. The application instance is created, the service providers are registered, and the request is handed to the bootstrapped application. It's really that simple!"
msgstr "Service Provider 真的是啟動 Laravel 應用程式的關鍵。建立應用程式實體，然後註冊 Service Provider、最後再將 Request 交給已啟動的應用程式。真的就只有這麼簡單！"

#: docs/10.x/lifecycle.md:block 37 (paragraph)
msgid "Having a firm grasp of how a Laravel application is built and bootstrapped via service providers is very valuable. Your application's default service providers are stored in the `app/Providers` directory."
msgstr "稍微瞭解 Laravel 應用程式是怎麼通過 Service Provider 製作與啟動的非常重要。你的應用程式預設的 Service Provider 就放在 `app/Providers` 目錄下。"

#: docs/10.x/lifecycle.md:block 38 (paragraph)
msgid "By default, the `AppServiceProvider` is fairly empty. This provider is a great place to add your application's own bootstrapping and service container bindings. For large applications, you may wish to create several service providers, each with more granular bootstrapping for specific services used by your application."
msgstr "預設情況下，`AppServiceProvider` 很空。這個 Provider 是為你的應用程式加上啟動程式以及 Service Container 繫結中的一個絕佳地點。對於大型的應用程式，則可能會想建立多個 Service Provider，每個 Service Provider 負責啟動應用程式中的一個特定服務。"

#: docs/8.x/lifecycle.md:block 21 (paragraph)
msgid "One of the most important kernel bootstrapping actions is loading the [service providers](/docs/{{version}}/providers) for your application. All of the service providers for the application are configured in the `config/app.php` configuration file's `providers` array."
msgstr "Kernel 啟動過程中最重要的一部分就是載入應用程式的 [Service Provider](/docs/{{version}}/providers)。應用程式中，所有的 Service Provider 都設定在 `config/app.php` 設定檔的 `providers` 陣列中。"

#: docs/8.x/lifecycle.md:block 23 (paragraph)
msgid "Service providers are responsible for bootstrapping all of the framework's various components, such as the database, queue, validation, and routing components. Essentially every major feature offered by Laravel is bootstrapped and configured by a service provider. Since they bootstrap and configure so many features offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process."
msgstr "Service Provider 還負責啟動 Laravel 中各種框架元件，如資料庫、佇列、認證、路由⋯⋯等。Laravel 提供的所有主要功能都由 Service Provider 進行設定。由於這些 Service Provider 負責啟動與設定 Laravel 框架中很多的功能，因此在 Laravel 啟動過程中，Service Provider 時最重要的一環。"

