# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-07 15:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/eloquent-mutators.md, line: 1
# File: docs/master/eloquent-mutators.md, line: 1
#, no-wrap
msgid "Eloquent: Mutators & Casting"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 19
# File: docs/master/eloquent-mutators.md, line: 19
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 19
# File: docs/master/eloquent-mutators.md, line: 19
#, no-wrap
msgid ""
"- [Accessors & Mutators](#accessors-and-mutators)\n"
"    - [Defining An Accessor](#defining-an-accessor)\n"
"    - [Defining A Mutator](#defining-a-mutator)\n"
"- [Attribute Casting](#attribute-casting)\n"
"    - [Array & JSON Casting](#array-and-json-casting)\n"
"    - [Date Casting](#date-casting)\n"
"    - [Enum Casting](#enum-casting)\n"
"    - [Encrypted Casting](#encrypted-casting)\n"
"    - [Query Time Casting](#query-time-casting)\n"
"- [Custom Casts](#custom-casts)\n"
"    - [Value Object Casting](#value-object-casting)\n"
"    - [Array / JSON Serialization](#array-json-serialization)\n"
"    - [Inbound Casting](#inbound-casting)\n"
"    - [Cast Parameters](#cast-parameters)\n"
"    - [Castables](#castables)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 21
# File: docs/master/eloquent-mutators.md, line: 21
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/eloquent-mutators.md, line: 21
# File: docs/master/eloquent-mutators.md, line: 21
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 24
# File: docs/master/eloquent-mutators.md, line: 24
msgid "Accessors, mutators, and attribute casting allow you to transform Eloquent attribute values when you retrieve or set them on model instances. For example, you may want to use the [Laravel encrypter](/docs/{{version}}/encryption) to encrypt a value while it is stored in the database, and then automatically decrypt the attribute when you access it on an Eloquent model. Or, you may want to convert a JSON string that is stored in your database to an array when it is accessed via your Eloquent model."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 26
# File: docs/master/eloquent-mutators.md, line: 26
#, no-wrap
msgid "<a name=\"accessors-and-mutators\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/eloquent-mutators.md, line: 26
# File: docs/master/eloquent-mutators.md, line: 26
#, no-wrap
msgid "Accessors & Mutators"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 29
# File: docs/master/eloquent-mutators.md, line: 29
#, no-wrap
msgid "<a name=\"defining-an-accessor\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 29
# File: docs/master/eloquent-mutators.md, line: 29
#, no-wrap
msgid "Defining An Accessor"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 32
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a `get{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 34
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 36
# File: docs/8.x/eloquent-mutators.md, line: 85
# File: docs/8.x/eloquent-mutators.md, line: 149
# File: docs/8.x/eloquent-mutators.md, line: 189
# File: docs/8.x/eloquent-mutators.md, line: 213
# File: docs/8.x/eloquent-mutators.md, line: 397
# File: docs/8.x/eloquent-mutators.md, line: 436
# File: docs/8.x/eloquent-mutators.md, line: 462
# File: docs/8.x/eloquent-mutators.md, line: 549
# File: docs/8.x/eloquent-mutators.md, line: 619
# File: docs/8.x/eloquent-mutators.md, line: 653
# File: docs/master/eloquent-mutators.md, line: 36
# File: docs/master/eloquent-mutators.md, line: 130
# File: docs/master/eloquent-mutators.md, line: 227
# File: docs/master/eloquent-mutators.md, line: 267
# File: docs/master/eloquent-mutators.md, line: 291
# File: docs/master/eloquent-mutators.md, line: 475
# File: docs/master/eloquent-mutators.md, line: 514
# File: docs/master/eloquent-mutators.md, line: 540
# File: docs/master/eloquent-mutators.md, line: 627
# File: docs/master/eloquent-mutators.md, line: 697
# File: docs/master/eloquent-mutators.md, line: 731
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 38
# File: docs/8.x/eloquent-mutators.md, line: 87
# File: docs/8.x/eloquent-mutators.md, line: 151
# File: docs/8.x/eloquent-mutators.md, line: 191
# File: docs/8.x/eloquent-mutators.md, line: 215
# File: docs/8.x/eloquent-mutators.md, line: 438
# File: docs/8.x/eloquent-mutators.md, line: 621
# File: docs/8.x/eloquent-mutators.md, line: 655
# File: docs/master/eloquent-mutators.md, line: 38
# File: docs/master/eloquent-mutators.md, line: 132
# File: docs/master/eloquent-mutators.md, line: 229
# File: docs/master/eloquent-mutators.md, line: 269
# File: docs/master/eloquent-mutators.md, line: 293
# File: docs/master/eloquent-mutators.md, line: 516
# File: docs/master/eloquent-mutators.md, line: 699
# File: docs/master/eloquent-mutators.md, line: 733
#, no-wrap
msgid "    namespace App\\Models;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 40
# File: docs/8.x/eloquent-mutators.md, line: 89
# File: docs/8.x/eloquent-mutators.md, line: 153
# File: docs/8.x/eloquent-mutators.md, line: 217
# File: docs/master/eloquent-mutators.md, line: 231
# File: docs/master/eloquent-mutators.md, line: 295
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 54
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return string\n"
"         */\n"
"        public function getFirstNameAttribute($value)\n"
"        {\n"
"            return ucfirst($value);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 56
# File: docs/master/eloquent-mutators.md, line: 60
msgid "As you can see, the original value of the column is passed to the accessor, allowing you to manipulate and return the value. To access the value of the accessor, you may simply access the `first_name` attribute on a model instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 58
# File: docs/8.x/eloquent-mutators.md, line: 107
# File: docs/8.x/eloquent-mutators.md, line: 233
# File: docs/8.x/eloquent-mutators.md, line: 513
# File: docs/master/eloquent-mutators.md, line: 62
# File: docs/master/eloquent-mutators.md, line: 97
# File: docs/master/eloquent-mutators.md, line: 156
# File: docs/master/eloquent-mutators.md, line: 311
# File: docs/master/eloquent-mutators.md, line: 591
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 60
# File: docs/8.x/eloquent-mutators.md, line: 109
# File: docs/8.x/eloquent-mutators.md, line: 235
# File: docs/8.x/eloquent-mutators.md, line: 247
# File: docs/8.x/eloquent-mutators.md, line: 256
# File: docs/8.x/eloquent-mutators.md, line: 515
# File: docs/master/eloquent-mutators.md, line: 64
# File: docs/master/eloquent-mutators.md, line: 99
# File: docs/master/eloquent-mutators.md, line: 158
# File: docs/master/eloquent-mutators.md, line: 313
# File: docs/master/eloquent-mutators.md, line: 325
# File: docs/master/eloquent-mutators.md, line: 334
# File: docs/master/eloquent-mutators.md, line: 593
#, no-wrap
msgid "    $user = User::find(1);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 62
# File: docs/master/eloquent-mutators.md, line: 66
#, no-wrap
msgid "    $firstName = $user->first_name;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 64
msgid "You are not limited to interacting with a single attribute within your accessor. You may also use accessors to return new, computed values from existing attributes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 74
#, no-wrap
msgid ""
"    /**\n"
"     * Get the user's full name.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function getFullNameAttribute()\n"
"    {\n"
"        return \"{$this->first_name} {$this->last_name}\";\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 76
# File: docs/master/eloquent-mutators.md, line: 68
#, no-wrap
msgid "> {tip} If you would like these computed values to be added to the array / JSON representations of your model, [you will need to append them](/docs/{{version}}/eloquent-serialization#appending-values-to-json).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 78
# File: docs/master/eloquent-mutators.md, line: 125
#, no-wrap
msgid "<a name=\"defining-a-mutator\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 78
# File: docs/master/eloquent-mutators.md, line: 125
#, no-wrap
msgid "Defining A Mutator"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 81
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, define a `set{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 83
msgid "Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 103
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Set the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return void\n"
"         */\n"
"        public function setFirstNameAttribute($value)\n"
"        {\n"
"            $this->attributes['first_name'] = strtolower($value);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 105
msgid "The mutator will receive the value that is being set on the attribute, allowing you to manipulate the value and set the manipulated value on the Eloquent model's internal `$attributes` property. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 111
# File: docs/master/eloquent-mutators.md, line: 160
#, no-wrap
msgid "    $user->first_name = 'Sally';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 113
msgid "In this example, the `setFirstNameAttribute` function will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the internal `$attributes` array."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 115
# File: docs/master/eloquent-mutators.md, line: 193
#, no-wrap
msgid "<a name=\"attribute-casting\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/eloquent-mutators.md, line: 115
# File: docs/master/eloquent-mutators.md, line: 193
#, no-wrap
msgid "Attribute Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 118
# File: docs/master/eloquent-mutators.md, line: 196
msgid "Attribute casting provides functionality similar to accessors and mutators without requiring you to define any additional methods on your model. Instead, your model's `$casts` property provides a convenient method of converting attributes to common data types."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 120
# File: docs/master/eloquent-mutators.md, line: 198
msgid "The `$casts` property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 122
# File: docs/master/eloquent-mutators.md, line: 200
#, no-wrap
msgid "<div class=\"content-list\" markdown=\"1\">\n"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`array`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`AsStringable::class`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`boolean`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`collection`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`date`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`datetime`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`immutable_date`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`immutable_datetime`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`decimal:`<code>&lt;digits&gt;</code>"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`double`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`encrypted`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`encrypted:array`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`encrypted:collection`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`encrypted:object`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`float`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`integer`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`object`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`real`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`string`"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/eloquent-mutators.md, line: 143
# File: docs/master/eloquent-mutators.md, line: 221
msgid "`timestamp`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 145
# File: docs/master/eloquent-mutators.md, line: 223
#, no-wrap
msgid "</div>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 147
# File: docs/master/eloquent-mutators.md, line: 225
msgid "To demonstrate attribute casting, let's cast the `is_admin` attribute, which is stored in our database as an integer (`0` or `1`) to a boolean value:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 165
# File: docs/master/eloquent-mutators.md, line: 243
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'is_admin' => 'boolean',\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 167
# File: docs/master/eloquent-mutators.md, line: 245
msgid "After defining the cast, the `is_admin` attribute will always be cast to a boolean when you access it, even if the underlying value is stored in the database as an integer:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 169
# File: docs/master/eloquent-mutators.md, line: 247
#, no-wrap
msgid "    $user = App\\Models\\User::find(1);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 173
# File: docs/master/eloquent-mutators.md, line: 251
#, no-wrap
msgid ""
"    if ($user->is_admin) {\n"
"        //\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 175
# File: docs/master/eloquent-mutators.md, line: 253
msgid "If you need to add a new, temporary cast at runtime, you may use the `mergeCasts` method. These cast definitions will be added to any of the casts already defined on the model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 180
# File: docs/master/eloquent-mutators.md, line: 258
#, no-wrap
msgid ""
"    $user->mergeCasts([\n"
"        'is_admin' => 'integer',\n"
"        'options' => 'object',\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 182
# File: docs/master/eloquent-mutators.md, line: 260
#, no-wrap
msgid "> {note} Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 184
# File: docs/master/eloquent-mutators.md, line: 262
#, no-wrap
msgid "<a name=\"stringable-casting\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/eloquent-mutators.md, line: 184
# File: docs/master/eloquent-mutators.md, line: 262
#, no-wrap
msgid "Stringable Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 187
# File: docs/master/eloquent-mutators.md, line: 265
msgid "You may use the `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` cast class to cast a model attribute to a [fluent `Illuminate\\Support\\Stringable` object](/docs/{{version}}/helpers#fluent-strings-method-list):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 194
# File: docs/master/eloquent-mutators.md, line: 272
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 206
# File: docs/master/eloquent-mutators.md, line: 284
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'directory' => AsStringable::class,\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 208
# File: docs/master/eloquent-mutators.md, line: 286
#, no-wrap
msgid "<a name=\"array-and-json-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 208
# File: docs/master/eloquent-mutators.md, line: 286
#, no-wrap
msgid "Array & JSON Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 211
# File: docs/master/eloquent-mutators.md, line: 289
msgid "The `array` cast is particularly useful when working with columns that are stored as serialized JSON. For example, if your database has a `JSON` or `TEXT` field type that contains serialized JSON, adding the `array` cast to that attribute will automatically deserialize the attribute to a PHP array when you access it on your Eloquent model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 229
# File: docs/master/eloquent-mutators.md, line: 307
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => 'array',\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 231
# File: docs/master/eloquent-mutators.md, line: 309
msgid "Once the cast is defined, you may access the `options` attribute and it will automatically be deserialized from JSON into a PHP array. When you set the value of the `options` attribute, the given array will automatically be serialized back into JSON for storage:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 237
# File: docs/master/eloquent-mutators.md, line: 315
#, no-wrap
msgid "    $options = $user->options;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 239
# File: docs/master/eloquent-mutators.md, line: 317
#, no-wrap
msgid "    $options['key'] = 'value';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 241
# File: docs/master/eloquent-mutators.md, line: 319
#, no-wrap
msgid "    $user->options = $options;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 243
# File: docs/8.x/eloquent-mutators.md, line: 519
# File: docs/master/eloquent-mutators.md, line: 104
# File: docs/master/eloquent-mutators.md, line: 321
# File: docs/master/eloquent-mutators.md, line: 597
#, no-wrap
msgid "    $user->save();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 245
# File: docs/master/eloquent-mutators.md, line: 323
#, no-wrap
msgid "To update a single field of a JSON attribute with a more terse syntax, you may use the `->` operator when calling the `update` method:\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 249
# File: docs/master/eloquent-mutators.md, line: 327
#, no-wrap
msgid "    $user->update(['options->key' => 'value']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 251
# File: docs/master/eloquent-mutators.md, line: 329
#, no-wrap
msgid "<a name=\"array-object-and-collection-casting\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/eloquent-mutators.md, line: 251
# File: docs/master/eloquent-mutators.md, line: 329
#, no-wrap
msgid "Array Object & Collection Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 254
# File: docs/master/eloquent-mutators.md, line: 332
msgid "Although the standard `array` cast is sufficient for many applications, it does have some disadvantages. Since the `array` cast returns a primitive type, it is not possible to mutate an offset of the array directly. For example, the following code will trigger a PHP error:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 258
# File: docs/master/eloquent-mutators.md, line: 336
#, no-wrap
msgid "    $user->options['key'] = $value;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 260
# File: docs/master/eloquent-mutators.md, line: 338
msgid "To solve this, Laravel offers an `AsArrayObject` cast that casts your JSON attribute to an [ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) class. This feature is implemented using Laravel's [custom cast](#custom-casts) implementation, which allows Laravel to intelligently cache and transform the mutated object such that individual offsets may be modified without triggering a PHP error. To use the `AsArrayObject` cast, simply assign it to an attribute:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 262
# File: docs/master/eloquent-mutators.md, line: 340
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 271
# File: docs/master/eloquent-mutators.md, line: 349
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsArrayObject::class,\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 273
# File: docs/master/eloquent-mutators.md, line: 351
msgid "Similarly, Laravel offers an `AsCollection` cast that casts your JSON attribute to a Laravel [Collection](/docs/{{version}}/collections) instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 275
# File: docs/master/eloquent-mutators.md, line: 353
#, no-wrap
msgid "    use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 284
# File: docs/master/eloquent-mutators.md, line: 362
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => AsCollection::class,\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 286
# File: docs/master/eloquent-mutators.md, line: 364
#, no-wrap
msgid "<a name=\"date-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 286
# File: docs/master/eloquent-mutators.md, line: 364
#, no-wrap
msgid "Date Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 289
# File: docs/master/eloquent-mutators.md, line: 367
msgid "By default, Eloquent will cast the `created_at` and `updated_at` columns to instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends the PHP `DateTime` class and provides an assortment of helpful methods. You may cast additional date attributes by defining additional date casts within your model's `$casts` property array. Typically, dates should be cast using the `datetime` or `immutable_datetime` cast types."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 291
# File: docs/master/eloquent-mutators.md, line: 369
msgid "When defining a `date` or `datetime` cast, you may also specify the date's format. This format will be used when the [model is serialized to an array or JSON](/docs/{{version}}/eloquent-serialization):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 300
# File: docs/master/eloquent-mutators.md, line: 378
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'created_at' => 'datetime:Y-m-d',\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 302
# File: docs/master/eloquent-mutators.md, line: 380
msgid "When a column is cast as a date, you may set the corresponding model attribute value to a UNIX timestamp, date string (`Y-m-d`), date-time string, or a `DateTime` / `Carbon` instance. The date's value will be correctly converted and stored in your database."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 304
# File: docs/master/eloquent-mutators.md, line: 382
msgid "You may customize the default serialization format for all of your model's dates by defining a `serializeDate` method on your model. This method does not affect how your dates are formatted for storage in the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 315
# File: docs/master/eloquent-mutators.md, line: 393
#, no-wrap
msgid ""
"    /**\n"
"     * Prepare a date for array / JSON serialization.\n"
"     *\n"
"     * @param  \\DateTimeInterface  $date\n"
"     * @return string\n"
"     */\n"
"    protected function serializeDate(DateTimeInterface $date)\n"
"    {\n"
"        return $date->format('Y-m-d');\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 317
# File: docs/master/eloquent-mutators.md, line: 395
msgid "To specify the format that should be used when actually storing a model's dates within your database, you should define a `$dateFormat` property on your model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 324
# File: docs/master/eloquent-mutators.md, line: 402
#, no-wrap
msgid ""
"    /**\n"
"     * The storage format of the model's date columns.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $dateFormat = 'U';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 326
# File: docs/master/eloquent-mutators.md, line: 404
#, no-wrap
msgid "<a name=\"date-casting-and-timezones\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/eloquent-mutators.md, line: 326
# File: docs/master/eloquent-mutators.md, line: 404
#, no-wrap
msgid "Date Casting, Serialization, & Timezones"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 329
# File: docs/master/eloquent-mutators.md, line: 407
msgid "By default, the `date` and `datetime` casts will serialize dates to a UTC ISO-8601 date string (`1986-05-28T21:05:54.000000Z`), regardless of the timezone specified in your application's `timezone` configuration option. You are strongly encouraged to always use this serialization format, as well as to store your application's dates in the UTC timezone by not changing your application's `timezone` configuration option from its default `UTC` value. Consistently using the UTC timezone throughout your application will provide the maximum level of interoperability with other date manipulation libraries written in PHP and JavaScript."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 331
# File: docs/master/eloquent-mutators.md, line: 409
msgid "If a custom format is applied to the `date` or `datetime` cast, such as `datetime:Y-m-d H:i:s`, the inner timezone of the Carbon instance will be used during date serialization. Typically, this will be the timezone specified in your application's `timezone` configuration option."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 333
# File: docs/master/eloquent-mutators.md, line: 411
#, no-wrap
msgid "<a name=\"enum-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 333
# File: docs/master/eloquent-mutators.md, line: 411
#, no-wrap
msgid "Enum Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 336
# File: docs/master/eloquent-mutators.md, line: 414
#, no-wrap
msgid "> {note} Enum casting is only available for PHP 8.1+.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 338
# File: docs/master/eloquent-mutators.md, line: 416
msgid "Eloquent also allows you to cast your attribute values to PHP enums. To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 340
# File: docs/master/eloquent-mutators.md, line: 418
#, no-wrap
msgid "    use App\\Enums\\ServerStatus;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 349
# File: docs/master/eloquent-mutators.md, line: 427
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'status' => ServerStatus::class,\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 351
# File: docs/master/eloquent-mutators.md, line: 429
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 354
# File: docs/master/eloquent-mutators.md, line: 432
#, no-wrap
msgid ""
"    if ($server->status == ServerStatus::provisioned) {\n"
"        $server->status = ServerStatus::ready;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 357
# File: docs/master/eloquent-mutators.md, line: 435
#, no-wrap
msgid ""
"        $server->save();\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 359
# File: docs/master/eloquent-mutators.md, line: 437
#, no-wrap
msgid "<a name=\"encrypted-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 359
# File: docs/master/eloquent-mutators.md, line: 437
#, no-wrap
msgid "Encrypted Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 362
# File: docs/master/eloquent-mutators.md, line: 440
msgid "The `encrypted` cast will encrypt a model's attribute value using Laravel's built-in [encryption](/docs/{{version}}/encryption) features. In addition, the `encrypted:array`, `encrypted:collection`, `encrypted:object`, `AsEncryptedArrayObject`, and `AsEncryptedCollection` casts work like their unencrypted counterparts; however, as you might expect, the underlying value is encrypted when stored in your database."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 364
# File: docs/master/eloquent-mutators.md, line: 442
msgid "As the final length of the encrypted text is not predictable and is longer than its plain text counterpart, make sure the associated database column is of `TEXT` type or larger. In addition, since the values are encrypted in the database, you will not be able to query or search encrypted attribute values."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 366
# File: docs/master/eloquent-mutators.md, line: 444
#, no-wrap
msgid "<a name=\"query-time-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 366
# File: docs/master/eloquent-mutators.md, line: 444
#, no-wrap
msgid "Query Time Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 369
# File: docs/master/eloquent-mutators.md, line: 447
msgid "Sometimes you may need to apply casts while executing a query, such as when selecting a raw value from a table. For example, consider the following query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 372
# File: docs/master/eloquent-mutators.md, line: 450
#, no-wrap
msgid ""
"    use App\\Models\\Post;\n"
"    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 378
# File: docs/master/eloquent-mutators.md, line: 456
#, no-wrap
msgid ""
"    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 380
# File: docs/master/eloquent-mutators.md, line: 458
msgid "The `last_posted_at` attribute on the results of this query will be a simple string. It would be wonderful if we could apply a `datetime` cast to this attribute when executing the query. Thankfully, we may accomplish this using the `withCasts` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 388
# File: docs/master/eloquent-mutators.md, line: 466
#, no-wrap
msgid ""
"    $users = User::select([\n"
"        'users.*',\n"
"        'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"                ->whereColumn('user_id', 'users.id')\n"
"    ])->withCasts([\n"
"        'last_posted_at' => 'datetime'\n"
"    ])->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 390
# File: docs/master/eloquent-mutators.md, line: 468
#, no-wrap
msgid "<a name=\"custom-casts\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/eloquent-mutators.md, line: 390
# File: docs/master/eloquent-mutators.md, line: 468
#, no-wrap
msgid "Custom Casts"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 393
# File: docs/master/eloquent-mutators.md, line: 471
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. You may accomplish this by defining a class that implements the `CastsAttributes` interface."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 395
# File: docs/master/eloquent-mutators.md, line: 473
msgid "Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 399
# File: docs/8.x/eloquent-mutators.md, line: 464
# File: docs/8.x/eloquent-mutators.md, line: 551
# File: docs/master/eloquent-mutators.md, line: 477
# File: docs/master/eloquent-mutators.md, line: 542
# File: docs/master/eloquent-mutators.md, line: 629
#, no-wrap
msgid "    namespace App\\Casts;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 401
# File: docs/master/eloquent-mutators.md, line: 479
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 417
# File: docs/master/eloquent-mutators.md, line: 495
#, no-wrap
msgid ""
"    class Json implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_decode($value, true);\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 432
# File: docs/master/eloquent-mutators.md, line: 510
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return json_encode($value);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 434
# File: docs/master/eloquent-mutators.md, line: 512
msgid "Once you have defined a custom cast type, you may attach it to a model attribute using its class name:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 441
# File: docs/master/eloquent-mutators.md, line: 519
#, no-wrap
msgid ""
"    use App\\Casts\\Json;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 453
# File: docs/master/eloquent-mutators.md, line: 531
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * The attributes that should be cast.\n"
"         *\n"
"         * @var array\n"
"         */\n"
"        protected $casts = [\n"
"            'options' => Json::class,\n"
"        ];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 455
# File: docs/master/eloquent-mutators.md, line: 533
#, no-wrap
msgid "<a name=\"value-object-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 455
# File: docs/master/eloquent-mutators.md, line: 533
#, no-wrap
msgid "Value Object Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 458
# File: docs/master/eloquent-mutators.md, line: 536
msgid "You are not limited to casting values to primitive types. You may also cast values to objects. Defining custom casts that cast values to objects is very similar to casting to primitive types; however, the `set` method should return an array of key / value pairs that will be used to set raw, storable values on the model."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 460
# File: docs/master/eloquent-mutators.md, line: 538
msgid "As an example, we will define a custom cast class that casts multiple model values into a single `Address` value object. We will assume the `Address` value has two public properties: `lineOne` and `lineTwo`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 468
# File: docs/master/eloquent-mutators.md, line: 546
#, no-wrap
msgid ""
"    use App\\Models\\Address as AddressModel;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"    use InvalidArgumentException;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 487
# File: docs/master/eloquent-mutators.md, line: 565
#, no-wrap
msgid ""
"    class Address implements CastsAttributes\n"
"    {\n"
"        /**\n"
"         * Cast the given value.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  mixed  $value\n"
"         * @param  array  $attributes\n"
"         * @return \\App\\Models\\Address\n"
"         */\n"
"        public function get($model, $key, $value, $attributes)\n"
"        {\n"
"            return new AddressModel(\n"
"                $attributes['address_line_one'],\n"
"                $attributes['address_line_two']\n"
"            );\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 502
# File: docs/master/eloquent-mutators.md, line: 580
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  \\App\\Models\\Address  $value\n"
"         * @param  array  $attributes\n"
"         * @return array\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            if (! $value instanceof AddressModel) {\n"
"                throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"            }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 509
# File: docs/master/eloquent-mutators.md, line: 587
#, no-wrap
msgid ""
"            return [\n"
"                'address_line_one' => $value->lineOne,\n"
"                'address_line_two' => $value->lineTwo,\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 511
# File: docs/master/eloquent-mutators.md, line: 589
msgid "When casting to value objects, any changes made to the value object will automatically be synced back to the model before the model is saved:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 517
# File: docs/master/eloquent-mutators.md, line: 595
#, no-wrap
msgid "    $user->address->lineOne = 'Updated Address Value';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 521
# File: docs/master/eloquent-mutators.md, line: 599
#, no-wrap
msgid "> {tip} If you plan to serialize your Eloquent models containing value objects to JSON or arrays, you should implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces on the value object.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 523
# File: docs/master/eloquent-mutators.md, line: 601
#, no-wrap
msgid "<a name=\"array-json-serialization\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 523
# File: docs/master/eloquent-mutators.md, line: 601
#, no-wrap
msgid "Array / JSON Serialization"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 526
# File: docs/master/eloquent-mutators.md, line: 604
msgid "When an Eloquent model is converted to an array or JSON using the `toArray` and `toJson` methods, your custom cast value objects will typically be serialized as well as long as they implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces. However, when using value objects provided by third-party libraries, you may not have the ability to add these interfaces to the object."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 528
# File: docs/master/eloquent-mutators.md, line: 606
msgid "Therefore, you may specify that your custom cast class will be responsible for serializing the value object. To do so, your custom cast class should implement the `Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` interface. This interface states that your class should contain a `serialize` method which should return the serialized form of your value object:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 542
# File: docs/master/eloquent-mutators.md, line: 620
#, no-wrap
msgid ""
"    /**\n"
"     * Get the serialized representation of the value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return mixed\n"
"     */\n"
"    public function serialize($model, string $key, $value, array $attributes)\n"
"    {\n"
"        return (string) $value;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 544
# File: docs/master/eloquent-mutators.md, line: 622
#, no-wrap
msgid "<a name=\"inbound-casting\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 544
# File: docs/master/eloquent-mutators.md, line: 622
#, no-wrap
msgid "Inbound Casting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 547
# File: docs/master/eloquent-mutators.md, line: 625
msgid "Occasionally, you may need to write a custom cast that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model. A classic example of an inbound only cast is a \"hashing\" cast. Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 553
# File: docs/master/eloquent-mutators.md, line: 631
#, no-wrap
msgid "    use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 562
# File: docs/master/eloquent-mutators.md, line: 640
#, no-wrap
msgid ""
"    class Hash implements CastsInboundAttributes\n"
"    {\n"
"        /**\n"
"         * The hashing algorithm.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $algorithm;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 573
# File: docs/master/eloquent-mutators.md, line: 651
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new cast class instance.\n"
"         *\n"
"         * @param  string|null  $algorithm\n"
"         * @return void\n"
"         */\n"
"        public function __construct($algorithm = null)\n"
"        {\n"
"            $this->algorithm = $algorithm;\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 590
# File: docs/master/eloquent-mutators.md, line: 668
#, no-wrap
msgid ""
"        /**\n"
"         * Prepare the given value for storage.\n"
"         *\n"
"         * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"         * @param  string  $key\n"
"         * @param  array  $value\n"
"         * @param  array  $attributes\n"
"         * @return string\n"
"         */\n"
"        public function set($model, $key, $value, $attributes)\n"
"        {\n"
"            return is_null($this->algorithm)\n"
"                        ? bcrypt($value)\n"
"                        : hash($this->algorithm, $value);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 592
# File: docs/master/eloquent-mutators.md, line: 670
#, no-wrap
msgid "<a name=\"cast-parameters\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 592
# File: docs/master/eloquent-mutators.md, line: 670
#, no-wrap
msgid "Cast Parameters"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 595
# File: docs/master/eloquent-mutators.md, line: 673
msgid "When attaching a custom cast to a model, cast parameters may be specified by separating them from the class name using a `:` character and comma-delimiting multiple parameters. The parameters will be passed to the constructor of the cast class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 604
# File: docs/master/eloquent-mutators.md, line: 682
#, no-wrap
msgid ""
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'secret' => Hash::class.':sha256',\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 606
# File: docs/master/eloquent-mutators.md, line: 684
#, no-wrap
msgid "<a name=\"castables\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/eloquent-mutators.md, line: 606
# File: docs/master/eloquent-mutators.md, line: 684
#, no-wrap
msgid "Castables"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 609
# File: docs/master/eloquent-mutators.md, line: 687
msgid "You may want to allow your application's value objects to define their own custom cast classes. Instead of attaching the custom cast class to your model, you may alternatively attach a value object class that implements the `Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 611
# File: docs/8.x/eloquent-mutators.md, line: 642
# File: docs/master/eloquent-mutators.md, line: 689
# File: docs/master/eloquent-mutators.md, line: 720
#, no-wrap
msgid "    use App\\Models\\Address;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 615
# File: docs/master/eloquent-mutators.md, line: 693
#, no-wrap
msgid ""
"    protected $casts = [\n"
"        'address' => Address::class,\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 617
# File: docs/master/eloquent-mutators.md, line: 695
msgid "Objects that implement the `Castable` interface must define a `castUsing` method that returns the class name of the custom caster class that is responsible for casting to and from the `Castable` class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 624
# File: docs/master/eloquent-mutators.md, line: 702
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use App\\Casts\\Address as AddressCast;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 638
# File: docs/master/eloquent-mutators.md, line: 716
#, no-wrap
msgid ""
"    class Address implements Castable\n"
"    {\n"
"        /**\n"
"         * Get the name of the caster class to use when casting from / to this cast target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return AddressCast::class;\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 640
# File: docs/master/eloquent-mutators.md, line: 718
msgid "When using `Castable` classes, you may still provide arguments in the `$casts` definition. The arguments will be passed to the `castUsing` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 646
# File: docs/master/eloquent-mutators.md, line: 724
#, no-wrap
msgid ""
"    protected $casts = [\n"
"        'address' => Address::class.':argument',\n"
"    ];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 648
# File: docs/master/eloquent-mutators.md, line: 726
#, no-wrap
msgid "<a name=\"anonymous-cast-classes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/eloquent-mutators.md, line: 648
# File: docs/master/eloquent-mutators.md, line: 726
#, no-wrap
msgid "Castables & Anonymous Cast Classes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 651
# File: docs/master/eloquent-mutators.md, line: 729
msgid "By combining \"castables\" with PHP's [anonymous classes](https://www.php.net/manual/en/language.oop5.anonymous.php), you may define a value object and its casting logic as a single castable object. To accomplish this, return an anonymous class from your value object's `castUsing` method. The anonymous class should implement the `CastsAttributes` interface:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 658
# File: docs/master/eloquent-mutators.md, line: 736
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"    use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 662
# File: docs/master/eloquent-mutators.md, line: 740
#, no-wrap
msgid ""
"    class Address implements Castable\n"
"    {\n"
"        // ...\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 680
# File: docs/master/eloquent-mutators.md, line: 758
#, no-wrap
msgid ""
"        /**\n"
"         * Get the caster class to use when casting from / to this cast target.\n"
"         *\n"
"         * @param  array  $arguments\n"
"         * @return object|string\n"
"         */\n"
"        public static function castUsing(array $arguments)\n"
"        {\n"
"            return new class implements CastsAttributes\n"
"            {\n"
"                public function get($model, $key, $value, $attributes)\n"
"                {\n"
"                    return new Address(\n"
"                        $attributes['address_line_one'],\n"
"                        $attributes['address_line_two']\n"
"                    );\n"
"                }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/eloquent-mutators.md, line: 690
# File: docs/master/eloquent-mutators.md, line: 768
#, no-wrap
msgid ""
"                public function set($model, $key, $value, $attributes)\n"
"                {\n"
"                    return [\n"
"                        'address_line_one' => $value->lineOne,\n"
"                        'address_line_two' => $value->lineTwo,\n"
"                    ];\n"
"                }\n"
"            };\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 32
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a protected method on your model to represent the accessible attribute. This method name should correspond to the \"camel case\" representation of the true underlying model attribute / database column when applicable."
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 34
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute. All attribute accessor / mutator methods must declare a return type-hint of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 41
# File: docs/master/eloquent-mutators.md, line: 135
#, no-wrap
msgid ""
"    use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"    use Illuminate\\Database\\Eloquent\\Model;\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 56
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Get the user's first name.\n"
"         *\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"         */\n"
"        protected function firstName(): Attribute\n"
"        {\n"
"            return new Attribute(\n"
"                get: fn ($value) => ucfirst($value),\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 58
msgid "All accessor methods return an `Attribute` instance which defines how the attribute will be accessed and, optionally, mutated. In this example, we are only defining how the attribute will be accessed. To do so, we supply the `get` argument to the `Attribute` class constructor."
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 70
#, no-wrap
msgid "<a name=\"building-value-objects-from-multiple-attributes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/master/eloquent-mutators.md, line: 70
#, no-wrap
msgid "Building Value Objects From Multiple Attributes"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 73
msgid "Sometimes your accessor may need to transform multiple model attributes into a single \"value object\". To do so, your `get` closure may accept a second argument of `$attributes`, which will be automatically supplied to the closure and will contain an array of all of the model's current attributes:"
msgstr ""
#
#. type: Code fence info string
# File: docs/master/eloquent-mutators.md, line: 74
# File: docs/master/eloquent-mutators.md, line: 107
# File: docs/master/eloquent-mutators.md, line: 168
#, no-wrap
msgid "php"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 74
#, no-wrap
msgid ""
"use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 95
msgid "When returning value objects from accessors, any changes made to the value object will automatically be synced back to the model before the model is saved. This is possible because Eloquent retains instances returned by accessors so it can be return the same instance each time the accessor is invoked:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 102
#, no-wrap
msgid ""
"    $user->address->lineOne = 'Updated Address Line 1 Value';\n"
"    $user->address->lineTwo = 'Updated Address Line 2 Value';\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 106
msgid "If you would like to disable the object caching behavior of attributes, you may invoke the `withoutObjectCaching` method when defining the attribute:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 107
#, no-wrap
msgid ""
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"public function address(): Attribute\n"
"{\n"
"    return (new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    ))->withoutObjectCaching();\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 128
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, you may provide the `set` argument when defining your attribute. Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 152
#, no-wrap
msgid ""
"    class User extends Model\n"
"    {\n"
"        /**\n"
"         * Interact with the user's first name.\n"
"         *\n"
"         * @param  string  $value\n"
"         * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"         */\n"
"        protected function firstName(): Attribute\n"
"        {\n"
"            return new Attribute(\n"
"                get: fn ($value) => ucfirst($value),\n"
"                set: fn ($value) => strtolower($value),\n"
"            );\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 154
msgid "The mutator closure will receive the value that is being set on the attribute, allowing you to manipulate the value and return the manipulated value. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 162
msgid "In this example, the `set` callback will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in model's the internal `$attributes` array."
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 164
#, no-wrap
msgid "<a name=\"mutating-multiple-attributes\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/master/eloquent-mutators.md, line: 164
#, no-wrap
msgid "Mutating Multiple Attributes"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 167
msgid "Sometimes your mutator may need to set multiple attributes on the underlying model. To do so, you may return an array from the `set` closure. Each key in the array should correspond with an underlying attribute / database column associated with the model:"
msgstr ""
#
#. type: Plain text
# File: docs/master/eloquent-mutators.md, line: 168
#, no-wrap
msgid ""
"use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"public function address(): Attribute\n"
"{\n"
"    return new Attribute(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""
