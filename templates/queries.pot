# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-02-07 15:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/queries.md, line: 1
# File: docs/master/queries.md, line: 1
#, no-wrap
msgid "Database: Query Builder"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/queries.md, line: 34
# File: docs/master/queries.md, line: 35
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 34
#, no-wrap
msgid ""
"- [Running Database Queries](#running-database-queries)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Streaming Results Lazily](#streaming-results-lazily)\n"
"    - [Aggregates](#aggregates)\n"
"- [Select Statements](#select-statements)\n"
"- [Raw Expressions](#raw-expressions)\n"
"- [Joins](#joins)\n"
"- [Unions](#unions)\n"
"- [Basic Where Clauses](#basic-where-clauses)\n"
"    - [Where Clauses](#where-clauses)\n"
"    - [Or Where Clauses](#or-where-clauses)\n"
"    - [JSON Where Clauses](#json-where-clauses)\n"
"    - [Additional Where Clauses](#additional-where-clauses)\n"
"    - [Logical Grouping](#logical-grouping)\n"
"- [Advanced Where Clauses](#advanced-where-clauses)\n"
"    - [Where Exists Clauses](#where-exists-clauses)\n"
"    - [Subquery Where Clauses](#subquery-where-clauses)\n"
"- [Ordering, Grouping, Limit & Offset](#ordering-grouping-limit-and-offset)\n"
"    - [Ordering](#ordering)\n"
"    - [Grouping](#grouping)\n"
"    - [Limit & Offset](#limit-and-offset)\n"
"- [Conditional Clauses](#conditional-clauses)\n"
"- [Insert Statements](#insert-statements)\n"
"    - [Upserts](#upserts)\n"
"- [Update Statements](#update-statements)\n"
"    - [Updating JSON Columns](#updating-json-columns)\n"
"    - [Increment & Decrement](#increment-and-decrement)\n"
"- [Delete Statements](#delete-statements)\n"
"- [Pessimistic Locking](#pessimistic-locking)\n"
"- [Debugging](#debugging)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 36
# File: docs/master/queries.md, line: 37
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 36
# File: docs/master/queries.md, line: 37
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 39
# File: docs/master/queries.md, line: 40
msgid "Laravel's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application and works perfectly with all of Laravel's supported database systems."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 41
# File: docs/master/queries.md, line: 42
msgid "The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 43
# File: docs/8.x/queries.md, line: 435
# File: docs/master/queries.md, line: 44
# File: docs/master/queries.md, line: 436
#, no-wrap
msgid "> {note} PDO does not support binding column names. Therefore, you should never allow user input to dictate the column names referenced by your queries, including \"order by\" columns.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 45
# File: docs/master/queries.md, line: 46
#, no-wrap
msgid "<a name=\"running-database-queries\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 45
# File: docs/master/queries.md, line: 46
#, no-wrap
msgid "Running Database Queries"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 48
# File: docs/master/queries.md, line: 49
#, no-wrap
msgid "<a name=\"retrieving-all-rows-from-a-table\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 48
# File: docs/master/queries.md, line: 49
#, no-wrap
msgid "Retrieving All Rows From A Table"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 51
# File: docs/master/queries.md, line: 52
msgid "You may use the `table` method provided by the `DB` facade to begin a query. The `table` method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the `get` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 53
# File: docs/master/queries.md, line: 54
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 55
# File: docs/master/queries.md, line: 56
#, no-wrap
msgid "    namespace App\\Http\\Controllers;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 58
# File: docs/master/queries.md, line: 59
#, no-wrap
msgid ""
"    use App\\Http\\Controllers\\Controller;\n"
"    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 69
# File: docs/master/queries.md, line: 70
#, no-wrap
msgid ""
"    class UserController extends Controller\n"
"    {\n"
"        /**\n"
"         * Show a list of all of the application's users.\n"
"         *\n"
"         * @return \\Illuminate\\Http\\Response\n"
"         */\n"
"        public function index()\n"
"        {\n"
"            $users = DB::table('users')->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 73
# File: docs/master/queries.md, line: 74
#, no-wrap
msgid ""
"            return view('user.index', ['users' => $users]);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 75
# File: docs/master/queries.md, line: 76
msgid "The `get` method returns an `Illuminate\\Support\\Collection` instance containing the results of the query where each result is an instance of the PHP `stdClass` object. You may access each column's value by accessing the column as a property of the object:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 77
# File: docs/8.x/queries.md, line: 109
# File: docs/8.x/queries.md, line: 130
# File: docs/8.x/queries.md, line: 190
# File: docs/8.x/queries.md, line: 223
# File: docs/8.x/queries.md, line: 313
# File: docs/8.x/queries.md, line: 383
# File: docs/master/queries.md, line: 78
# File: docs/master/queries.md, line: 110
# File: docs/master/queries.md, line: 131
# File: docs/master/queries.md, line: 191
# File: docs/master/queries.md, line: 224
# File: docs/master/queries.md, line: 314
# File: docs/master/queries.md, line: 384
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\DB;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 79
# File: docs/master/queries.md, line: 80
#, no-wrap
msgid "    $users = DB::table('users')->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 83
# File: docs/master/queries.md, line: 84
#, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        echo $user->name;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 85
# File: docs/master/queries.md, line: 86
#, no-wrap
msgid "> {tip} Laravel collections provide a variety of extremely powerful methods for mapping and reducing data. For more information on Laravel collections, check out the [collection documentation](/docs/{{version}}/collections).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 87
# File: docs/master/queries.md, line: 88
#, no-wrap
msgid "<a name=\"retrieving-a-single-row-column-from-a-table\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 87
# File: docs/master/queries.md, line: 88
#, no-wrap
msgid "Retrieving A Single Row / Column From A Table"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 90
# File: docs/master/queries.md, line: 91
msgid "If you just need to retrieve a single row from a database table, you may use the `DB` facade's `first` method. This method will return a single `stdClass` object:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 92
# File: docs/master/queries.md, line: 93
#, no-wrap
msgid "    $user = DB::table('users')->where('name', 'John')->first();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 94
# File: docs/master/queries.md, line: 95
#, no-wrap
msgid "    return $user->email;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 96
# File: docs/master/queries.md, line: 97
msgid "If you don't need an entire row, you may extract a single value from a record using the `value` method. This method will return the value of the column directly:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 98
# File: docs/master/queries.md, line: 99
#, no-wrap
msgid "    $email = DB::table('users')->where('name', 'John')->value('email');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 100
# File: docs/master/queries.md, line: 101
msgid "To retrieve a single row by its `id` column value, use the `find` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 102
# File: docs/master/queries.md, line: 103
#, no-wrap
msgid "    $user = DB::table('users')->find(3);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 104
# File: docs/master/queries.md, line: 105
#, no-wrap
msgid "<a name=\"retrieving-a-list-of-column-values\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 104
# File: docs/master/queries.md, line: 105
#, no-wrap
msgid "Retrieving A List Of Column Values"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 107
# File: docs/master/queries.md, line: 108
msgid "If you would like to retrieve an `Illuminate\\Support\\Collection` instance containing the values of a single column, you may use the `pluck` method. In this example, we'll retrieve a collection of user titles:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 111
# File: docs/master/queries.md, line: 112
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 115
# File: docs/master/queries.md, line: 116
#, no-wrap
msgid ""
"    foreach ($titles as $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 117
# File: docs/master/queries.md, line: 118
#, no-wrap
msgid " You may specify the column that the resulting collection should use as its keys by providing a second argument to the `pluck` method:\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 119
# File: docs/master/queries.md, line: 120
#, no-wrap
msgid "    $titles = DB::table('users')->pluck('title', 'name');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 123
# File: docs/master/queries.md, line: 124
#, no-wrap
msgid ""
"    foreach ($titles as $name => $title) {\n"
"        echo $title;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 125
# File: docs/master/queries.md, line: 126
#, no-wrap
msgid "<a name=\"chunking-results\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 125
# File: docs/master/queries.md, line: 126
#, no-wrap
msgid "Chunking Results"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 128
# File: docs/master/queries.md, line: 129
msgid "If you need to work with thousands of database records, consider using the `chunk` method provided by the `DB` facade. This method retrieves a small chunk of results at a time and feeds each chunk into a closure for processing. For example, let's retrieve the entire `users` table in chunks of 100 records at a time:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 136
# File: docs/master/queries.md, line: 137
#, no-wrap
msgid ""
"    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        foreach ($users as $user) {\n"
"            //\n"
"        }\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 138
# File: docs/master/queries.md, line: 139
msgid "You may stop further chunks from being processed by returning `false` from the closure:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 141
# File: docs/master/queries.md, line: 142
#, no-wrap
msgid ""
"    DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"        // Process the records...\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 144
# File: docs/master/queries.md, line: 145
#, no-wrap
msgid ""
"        return false;\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 146
# File: docs/master/queries.md, line: 147
msgid "If you are updating database records while chunking results, your chunk results could change in unexpected ways. If you plan to update the retrieved records while chunking, it is always best to use the `chunkById` method instead. This method will automatically paginate the results based on the record's primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 155
# File: docs/master/queries.md, line: 156
#, no-wrap
msgid ""
"    DB::table('users')->where('active', false)\n"
"        ->chunkById(100, function ($users) {\n"
"            foreach ($users as $user) {\n"
"                DB::table('users')\n"
"                    ->where('id', $user->id)\n"
"                    ->update(['active' => true]);\n"
"            }\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 157
# File: docs/master/queries.md, line: 158
#, no-wrap
msgid "> {note} When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 159
# File: docs/master/queries.md, line: 160
#, no-wrap
msgid "<a name=\"streaming-results-lazily\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 159
# File: docs/master/queries.md, line: 160
#, no-wrap
msgid "Streaming Results Lazily"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 162
# File: docs/master/queries.md, line: 163
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that it executes the query in chunks. However, instead of passing each chunk into a callback, the `lazy()` method returns a [`LazyCollection`](/docs/{{version}}/collections#lazy-collections), which lets you interact with the results as a single stream:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/queries.md, line: 163
# File: docs/8.x/queries.md, line: 173
# File: docs/master/queries.md, line: 164
# File: docs/master/queries.md, line: 174
#, no-wrap
msgid "php"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 163
# File: docs/master/queries.md, line: 164
#, no-wrap
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->lazy()->each(function ($user) {\n"
"    //\n"
"});\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 172
# File: docs/master/queries.md, line: 173
msgid "Once again, if you plan to update the retrieved records while iterating over them, it is best to use the `lazyById` or `lazyByIdDesc` methods instead. These methods will automatically paginate the results based on the record's primary key:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 173
# File: docs/master/queries.md, line: 174
#, no-wrap
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->lazyById()->each(function ($user) {\n"
"        DB::table('users')\n"
"            ->where('id', $user->id)\n"
"            ->update(['active' => true]);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 183
# File: docs/master/queries.md, line: 184
#, no-wrap
msgid "> {note} When updating or deleting records while iterating over them, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the results.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 185
# File: docs/master/queries.md, line: 186
#, no-wrap
msgid "<a name=\"aggregates\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 185
# File: docs/master/queries.md, line: 186
#, no-wrap
msgid "Aggregates"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 188
# File: docs/master/queries.md, line: 189
msgid "The query builder also provides a variety of methods for retrieving aggregate values like `count`, `max`, `min`, `avg`, and `sum`. You may call any of these methods after constructing your query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 192
# File: docs/master/queries.md, line: 193
#, no-wrap
msgid "    $users = DB::table('users')->count();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 194
# File: docs/master/queries.md, line: 195
#, no-wrap
msgid "    $price = DB::table('orders')->max('price');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 196
# File: docs/master/queries.md, line: 197
msgid "Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 200
# File: docs/master/queries.md, line: 201
#, no-wrap
msgid ""
"    $price = DB::table('orders')\n"
"                    ->where('finalized', 1)\n"
"                    ->avg('price');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 202
# File: docs/master/queries.md, line: 203
#, no-wrap
msgid "<a name=\"determining-if-records-exist\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 202
# File: docs/master/queries.md, line: 203
#, no-wrap
msgid "Determining If Records Exist"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 205
# File: docs/master/queries.md, line: 206
msgid "Instead of using the `count` method to determine if any records exist that match your query's constraints, you may use the `exists` and `doesntExist` methods:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 209
# File: docs/master/queries.md, line: 210
#, no-wrap
msgid ""
"    if (DB::table('orders')->where('finalized', 1)->exists()) {\n"
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 213
# File: docs/master/queries.md, line: 214
#, no-wrap
msgid ""
"    if (DB::table('orders')->where('finalized', 1)->doesntExist()) {\n"
"        // ...\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 215
# File: docs/master/queries.md, line: 216
#, no-wrap
msgid "<a name=\"select-statements\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 215
# File: docs/master/queries.md, line: 216
#, no-wrap
msgid "Select Statements"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 218
# File: docs/master/queries.md, line: 219
#, no-wrap
msgid "<a name=\"specifying-a-select-clause\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 218
# File: docs/master/queries.md, line: 219
#, no-wrap
msgid "Specifying A Select Clause"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 221
# File: docs/master/queries.md, line: 222
msgid "You may not always want to select all columns from a database table. Using the `select` method, you can specify a custom \"select\" clause for the query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 227
# File: docs/master/queries.md, line: 228
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->select('name', 'email as user_email')\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 229
# File: docs/master/queries.md, line: 230
msgid "The `distinct` method allows you to force the query to return distinct results:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 231
# File: docs/master/queries.md, line: 232
#, no-wrap
msgid "    $users = DB::table('users')->distinct()->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 233
# File: docs/master/queries.md, line: 234
msgid "If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the `addSelect` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 235
# File: docs/master/queries.md, line: 236
#, no-wrap
msgid "    $query = DB::table('users')->select('name');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 237
# File: docs/master/queries.md, line: 238
#, no-wrap
msgid "    $users = $query->addSelect('age')->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 239
# File: docs/master/queries.md, line: 240
#, no-wrap
msgid "<a name=\"raw-expressions\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 239
# File: docs/master/queries.md, line: 240
#, no-wrap
msgid "Raw Expressions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 242
# File: docs/master/queries.md, line: 243
msgid "Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may use the `raw` method provided by the `DB` facade:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 248
# File: docs/master/queries.md, line: 249
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                 ->select(DB::raw('count(*) as user_count, status'))\n"
"                 ->where('status', '<>', 1)\n"
"                 ->groupBy('status')\n"
"                 ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 250
# File: docs/master/queries.md, line: 251
#, no-wrap
msgid "> {note} Raw statements will be injected into the query as strings, so you should be extremely careful to avoid creating SQL injection vulnerabilities.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 252
# File: docs/master/queries.md, line: 253
#, no-wrap
msgid "<a name=\"raw-methods\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 252
# File: docs/master/queries.md, line: 253
#, no-wrap
msgid "Raw Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 255
# File: docs/master/queries.md, line: 256
msgid "Instead of using the `DB::raw` method, you may also use the following methods to insert a raw expression into various parts of your query. **Remember, Laravel can not guarantee that any query using raw expressions is protected against SQL injection vulnerabilities.**"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 257
# File: docs/master/queries.md, line: 258
#, no-wrap
msgid "<a name=\"selectraw\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 257
# File: docs/master/queries.md, line: 258
#, no-wrap
msgid "`selectRaw`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 260
# File: docs/master/queries.md, line: 261
msgid "The `selectRaw` method can be used in place of `addSelect(DB::raw(...))`. This method accepts an optional array of bindings as its second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 264
# File: docs/master/queries.md, line: 265
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->selectRaw('price * ? as price_with_tax', [1.0825])\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 266
# File: docs/master/queries.md, line: 267
#, no-wrap
msgid "<a name=\"whereraw-orwhereraw\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 266
# File: docs/master/queries.md, line: 267
#, no-wrap
msgid "`whereRaw / orWhereRaw`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 269
# File: docs/master/queries.md, line: 270
msgid "The `whereRaw` and `orWhereRaw` methods can be used to inject a raw \"where\" clause into your query. These methods accept an optional array of bindings as their second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 273
# File: docs/master/queries.md, line: 274
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 275
# File: docs/master/queries.md, line: 276
#, no-wrap
msgid "<a name=\"havingraw-orhavingraw\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 275
# File: docs/master/queries.md, line: 276
#, no-wrap
msgid "`havingRaw / orHavingRaw`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 278
# File: docs/master/queries.md, line: 279
msgid "The `havingRaw` and `orHavingRaw` methods may be used to provide a raw string as the value of the \"having\" clause. These methods accept an optional array of bindings as their second argument:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 284
# File: docs/master/queries.md, line: 285
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->select('department', DB::raw('SUM(price) as total_sales'))\n"
"                    ->groupBy('department')\n"
"                    ->havingRaw('SUM(price) > ?', [2500])\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 286
# File: docs/master/queries.md, line: 287
#, no-wrap
msgid "<a name=\"orderbyraw\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 286
# File: docs/master/queries.md, line: 287
#, no-wrap
msgid "`orderByRaw`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 289
# File: docs/master/queries.md, line: 290
msgid "The `orderByRaw` method may be used to provide a raw string as the value of the \"order by\" clause:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 293
# File: docs/master/queries.md, line: 294
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->orderByRaw('updated_at - created_at DESC')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 295
# File: docs/master/queries.md, line: 296
#, no-wrap
msgid "<a name=\"groupbyraw\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 295
# File: docs/master/queries.md, line: 296
#, no-wrap
msgid "`groupByRaw`"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 298
# File: docs/master/queries.md, line: 299
msgid "The `groupByRaw` method may be used to provide a raw string as the value of the `group by` clause:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 303
# File: docs/master/queries.md, line: 304
#, no-wrap
msgid ""
"    $orders = DB::table('orders')\n"
"                    ->select('city', 'state')\n"
"                    ->groupByRaw('city, state')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 305
# File: docs/master/queries.md, line: 306
#, no-wrap
msgid "<a name=\"joins\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 305
# File: docs/master/queries.md, line: 306
#, no-wrap
msgid "Joins"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 308
# File: docs/master/queries.md, line: 309
#, no-wrap
msgid "<a name=\"inner-join-clause\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 308
# File: docs/master/queries.md, line: 309
#, no-wrap
msgid "Inner Join Clause"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 311
# File: docs/master/queries.md, line: 312
msgid "The query builder may also be used to add join clauses to your queries. To perform a basic \"inner join\", you may use the `join` method on a query builder instance. The first argument passed to the `join` method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You may even join multiple tables in a single query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 319
# File: docs/master/queries.md, line: 320
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->join('contacts', 'users.id', '=', 'contacts.user_id')\n"
"                ->join('orders', 'users.id', '=', 'orders.user_id')\n"
"                ->select('users.*', 'contacts.phone', 'orders.price')\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 321
# File: docs/master/queries.md, line: 322
#, no-wrap
msgid "<a name=\"left-join-right-join-clause\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 321
# File: docs/master/queries.md, line: 322
#, no-wrap
msgid "Left Join / Right Join Clause"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 324
# File: docs/master/queries.md, line: 325
msgid "If you would like to perform a \"left join\" or \"right join\" instead of an \"inner join\", use the `leftJoin` or `rightJoin` methods. These methods have the same signature as the `join` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 328
# File: docs/master/queries.md, line: 329
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 332
# File: docs/master/queries.md, line: 333
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 334
# File: docs/master/queries.md, line: 335
#, no-wrap
msgid "<a name=\"cross-join-clause\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 334
# File: docs/master/queries.md, line: 335
#, no-wrap
msgid "Cross Join Clause"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 337
# File: docs/master/queries.md, line: 338
msgid "You may use the `crossJoin` method to perform a \"cross join\". Cross joins generate a cartesian product between the first table and the joined table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 341
# File: docs/master/queries.md, line: 342
#, no-wrap
msgid ""
"    $sizes = DB::table('sizes')\n"
"                ->crossJoin('colors')\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 343
# File: docs/master/queries.md, line: 344
#, no-wrap
msgid "<a name=\"advanced-join-clauses\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 343
# File: docs/master/queries.md, line: 344
#, no-wrap
msgid "Advanced Join Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 346
# File: docs/master/queries.md, line: 347
msgid "You may also specify more advanced join clauses. To get started, pass a closure as the second argument to the `join` method. The closure will receive a `Illuminate\\Database\\Query\\JoinClause` instance which allows you to specify constraints on the \"join\" clause:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 352
# File: docs/master/queries.md, line: 353
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n"
"            })\n"
"            ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 354
# File: docs/master/queries.md, line: 355
msgid "If you would like to use a \"where\" clause on your joins, you may use the `where` and `orWhere` methods provided by the `JoinClause` instance. Instead of comparing two columns, these methods will compare the column against a value:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 361
# File: docs/master/queries.md, line: 362
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->join('contacts', function ($join) {\n"
"                $join->on('users.id', '=', 'contacts.user_id')\n"
"                     ->where('contacts.user_id', '>', 5);\n"
"            })\n"
"            ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 363
# File: docs/master/queries.md, line: 364
#, no-wrap
msgid "<a name=\"subquery-joins\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 363
# File: docs/master/queries.md, line: 364
#, no-wrap
msgid "Subquery Joins"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 366
# File: docs/master/queries.md, line: 367
msgid "You may use the `joinSub`, `leftJoinSub`, and `rightJoinSub` methods to join a query to a subquery. Each of these methods receives three arguments: the subquery, its table alias, and a closure that defines the related columns. In this example, we will retrieve a collection of users where each user record also contains the `created_at` timestamp of the user's most recently published blog post:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 371
# File: docs/master/queries.md, line: 372
#, no-wrap
msgid ""
"    $latestPosts = DB::table('posts')\n"
"                       ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n"
"                       ->where('is_published', true)\n"
"                       ->groupBy('user_id');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 376
# File: docs/master/queries.md, line: 377
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"            ->joinSub($latestPosts, 'latest_posts', function ($join) {\n"
"                $join->on('users.id', '=', 'latest_posts.user_id');\n"
"            })->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 378
# File: docs/master/queries.md, line: 379
#, no-wrap
msgid "<a name=\"unions\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 378
# File: docs/master/queries.md, line: 379
#, no-wrap
msgid "Unions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 381
# File: docs/master/queries.md, line: 382
msgid "The query builder also provides a convenient method to \"union\" two or more queries together. For example, you may create an initial query and use the `union` method to union it with more queries:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 386
# File: docs/master/queries.md, line: 387
#, no-wrap
msgid ""
"    $first = DB::table('users')\n"
"                ->whereNull('first_name');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 391
# File: docs/master/queries.md, line: 392
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->whereNull('last_name')\n"
"                ->union($first)\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 393
# File: docs/master/queries.md, line: 394
msgid "In addition to the `union` method, the query builder provides a `unionAll` method. Queries that are combined using the `unionAll` method will not have their duplicate results removed. The `unionAll` method has the same method signature as the `union` method."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 395
# File: docs/master/queries.md, line: 396
#, no-wrap
msgid "<a name=\"basic-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 395
# File: docs/master/queries.md, line: 396
#, no-wrap
msgid "Basic Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 398
# File: docs/master/queries.md, line: 399
#, no-wrap
msgid "<a name=\"where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 398
# File: docs/master/queries.md, line: 399
#, no-wrap
msgid "Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 401
# File: docs/master/queries.md, line: 402
msgid "You may use the query builder's `where` method to add \"where\" clauses to the query. The most basic call to the `where` method requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. The third argument is the value to compare against the column's value."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 403
# File: docs/master/queries.md, line: 404
msgid "For example, the following query retrieves users where the value of the `votes` column is equal to `100` and the value of the `age` column is greater than `35`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 408
# File: docs/master/queries.md, line: 409
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '=', 100)\n"
"                    ->where('age', '>', 35)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 410
# File: docs/master/queries.md, line: 411
msgid "For convenience, if you want to verify that a column is `=` to a given value, you may pass the value as the second argument to the `where` method. Laravel will assume you would like to use the `=` operator:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 412
# File: docs/master/queries.md, line: 413
#, no-wrap
msgid "    $users = DB::table('users')->where('votes', 100)->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 414
# File: docs/master/queries.md, line: 415
msgid "As previously mentioned, you may use any operator that is supported by your database system:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 418
# File: docs/master/queries.md, line: 419
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '>=', 100)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 422
# File: docs/master/queries.md, line: 423
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('votes', '<>', 100)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 426
# File: docs/master/queries.md, line: 427
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('name', 'like', 'T%')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 428
# File: docs/master/queries.md, line: 429
msgid "You may also pass an array of conditions to the `where` function. Each element of the array should be an array containing the three arguments typically passed to the `where` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 433
# File: docs/master/queries.md, line: 434
#, no-wrap
msgid ""
"    $users = DB::table('users')->where([\n"
"        ['status', '=', '1'],\n"
"        ['subscribed', '<>', '1'],\n"
"    ])->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 437
# File: docs/master/queries.md, line: 438
#, no-wrap
msgid "<a name=\"or-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 437
# File: docs/master/queries.md, line: 438
#, no-wrap
msgid "Or Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 440
# File: docs/master/queries.md, line: 441
msgid "When chaining together calls to the query builder's `where` method, the \"where\" clauses will be joined together using the `and` operator. However, you may use the `orWhere` method to join a clause to the query using the `or` operator. The `orWhere` method accepts the same arguments as the `where` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 445
# File: docs/master/queries.md, line: 446
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->where('votes', '>', 100)\n"
"                        ->orWhere('name', 'John')\n"
"                        ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 447
# File: docs/master/queries.md, line: 448
msgid "If you need to group an \"or\" condition within parentheses, you may pass a closure as the first argument to the `orWhere` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 455
# File: docs/master/queries.md, line: 456
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                ->where('votes', '>', 100)\n"
"                ->orWhere(function($query) {\n"
"                    $query->where('name', 'Abigail')\n"
"                          ->where('votes', '>', 50);\n"
"                })\n"
"                ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 457
# File: docs/master/queries.md, line: 458
msgid "The example above will produce the following SQL:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/queries.md, line: 458
# File: docs/8.x/queries.md, line: 613
# File: docs/8.x/queries.md, line: 637
# File: docs/master/queries.md, line: 459
# File: docs/master/queries.md, line: 614
# File: docs/master/queries.md, line: 638
#, no-wrap
msgid "sql"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 458
# File: docs/master/queries.md, line: 459
#, no-wrap
msgid "select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 463
# File: docs/8.x/queries.md, line: 618
# File: docs/master/queries.md, line: 464
# File: docs/master/queries.md, line: 619
#, no-wrap
msgid "> {note} You should always group `orWhere` calls in order to avoid unexpected behavior when global scopes are applied.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 465
# File: docs/master/queries.md, line: 466
#, no-wrap
msgid "<a name=\"json-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 465
# File: docs/master/queries.md, line: 466
#, no-wrap
msgid "JSON Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 468
# File: docs/master/queries.md, line: 469
#, no-wrap
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7+, PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 472
# File: docs/master/queries.md, line: 473
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->where('preferences->dining->meal', 'salad')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 474
# File: docs/master/queries.md, line: 475
msgid "You may use `whereJsonContains` to query JSON arrays. This feature is not supported by the SQLite database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 478
# File: docs/master/queries.md, line: 479
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', 'en')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 480
# File: docs/master/queries.md, line: 481
msgid "If your application uses the MySQL or PostgreSQL databases, you may pass an array of values to the `whereJsonContains` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 484
# File: docs/master/queries.md, line: 485
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonContains('options->languages', ['en', 'de'])\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 486
# File: docs/master/queries.md, line: 487
msgid "You may use `whereJsonLength` method to query JSON arrays by their length:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 490
# File: docs/master/queries.md, line: 491
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', 0)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 494
# File: docs/master/queries.md, line: 495
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereJsonLength('options->languages', '>', 1)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 496
# File: docs/master/queries.md, line: 497
#, no-wrap
msgid "<a name=\"additional-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 496
# File: docs/master/queries.md, line: 497
#, no-wrap
msgid "Additional Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 499
# File: docs/master/queries.md, line: 500
#, no-wrap
msgid "**whereBetween / orWhereBetween**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 501
# File: docs/master/queries.md, line: 502
msgid "The `whereBetween` method verifies that a column's value is between two values:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 505
# File: docs/master/queries.md, line: 506
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->whereBetween('votes', [1, 100])\n"
"               ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 507
# File: docs/master/queries.md, line: 508
#, no-wrap
msgid "**whereNotBetween / orWhereNotBetween**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 509
# File: docs/master/queries.md, line: 510
msgid "The `whereNotBetween` method verifies that a column's value lies outside of two values:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 513
# File: docs/master/queries.md, line: 514
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereNotBetween('votes', [1, 100])\n"
"                        ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 515
# File: docs/master/queries.md, line: 516
#, no-wrap
msgid "**whereIn / whereNotIn / orWhereIn / orWhereNotIn**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 517
# File: docs/master/queries.md, line: 518
msgid "The `whereIn` method verifies that a given column's value is contained within the given array:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 521
# File: docs/master/queries.md, line: 522
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 523
# File: docs/master/queries.md, line: 524
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 527
# File: docs/master/queries.md, line: 528
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                        ->whereNotIn('id', [1, 2, 3])\n"
"                        ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 529
# File: docs/master/queries.md, line: 530
#, no-wrap
msgid "> {note} If you are adding a large array of integer bindings to your query, the `whereIntegerInRaw` or `whereIntegerNotInRaw` methods may be used to greatly reduce your memory usage.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 531
# File: docs/master/queries.md, line: 532
#, no-wrap
msgid "**whereNull / whereNotNull / orWhereNull / orWhereNotNull**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 533
# File: docs/master/queries.md, line: 534
msgid "The `whereNull` method verifies that the value of the given column is `NULL`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 537
# File: docs/master/queries.md, line: 538
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereNull('updated_at')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 539
# File: docs/master/queries.md, line: 540
msgid "The `whereNotNull` method verifies that the column's value is not `NULL`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 543
# File: docs/master/queries.md, line: 544
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereNotNull('updated_at')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 545
# File: docs/master/queries.md, line: 546
#, no-wrap
msgid "**whereDate / whereMonth / whereDay / whereYear / whereTime**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 547
# File: docs/master/queries.md, line: 548
msgid "The `whereDate` method may be used to compare a column's value against a date:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 551
# File: docs/master/queries.md, line: 552
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereDate('created_at', '2016-12-31')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 553
# File: docs/master/queries.md, line: 554
msgid "The `whereMonth` method may be used to compare a column's value against a specific month:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 557
# File: docs/master/queries.md, line: 558
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereMonth('created_at', '12')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 559
# File: docs/master/queries.md, line: 560
msgid "The `whereDay` method may be used to compare a column's value against a specific day of the month:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 563
# File: docs/master/queries.md, line: 564
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereDay('created_at', '31')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 565
# File: docs/master/queries.md, line: 566
msgid "The `whereYear` method may be used to compare a column's value against a specific year:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 569
# File: docs/master/queries.md, line: 570
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereYear('created_at', '2016')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 571
# File: docs/master/queries.md, line: 572
msgid "The `whereTime` method may be used to compare a column's value against a specific time:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 575
# File: docs/master/queries.md, line: 576
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereTime('created_at', '=', '11:20:45')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 577
# File: docs/master/queries.md, line: 578
#, no-wrap
msgid "**whereColumn / orWhereColumn**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 579
# File: docs/master/queries.md, line: 580
msgid "The `whereColumn` method may be used to verify that two columns are equal:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 583
# File: docs/master/queries.md, line: 584
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn('first_name', 'last_name')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 585
# File: docs/master/queries.md, line: 586
msgid "You may also pass a comparison operator to the `whereColumn` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 589
# File: docs/master/queries.md, line: 590
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn('updated_at', '>', 'created_at')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 591
# File: docs/master/queries.md, line: 592
msgid "You may also pass an array of column comparisons to the `whereColumn` method. These conditions will be joined using the `and` operator:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 597
# File: docs/master/queries.md, line: 598
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->whereColumn([\n"
"                        ['first_name', '=', 'last_name'],\n"
"                        ['updated_at', '>', 'created_at'],\n"
"                    ])->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 599
# File: docs/master/queries.md, line: 600
#, no-wrap
msgid "<a name=\"logical-grouping\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 599
# File: docs/master/queries.md, line: 600
#, no-wrap
msgid "Logical Grouping"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 602
# File: docs/master/queries.md, line: 603
msgid "Sometimes you may need to group several \"where\" clauses within parentheses in order to achieve your query's desired logical grouping. In fact, you should generally always group calls to the `orWhere` method in parentheses in order to avoid unexpected query behavior. To accomplish this, you may pass a closure to the `where` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 610
# File: docs/master/queries.md, line: 611
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->where('name', '=', 'John')\n"
"               ->where(function ($query) {\n"
"                   $query->where('votes', '>', 100)\n"
"                         ->orWhere('title', '=', 'Admin');\n"
"               })\n"
"               ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 612
# File: docs/master/queries.md, line: 613
msgid "As you can see, passing a closure into the `where` method instructs the query builder to begin a constraint group. The closure will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 613
# File: docs/master/queries.md, line: 614
#, no-wrap
msgid "select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 620
# File: docs/master/queries.md, line: 621
#, no-wrap
msgid "<a name=\"advanced-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 620
# File: docs/master/queries.md, line: 621
#, no-wrap
msgid "Advanced Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 623
# File: docs/master/queries.md, line: 624
#, no-wrap
msgid "<a name=\"where-exists-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 623
# File: docs/master/queries.md, line: 624
#, no-wrap
msgid "Where Exists Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 626
# File: docs/master/queries.md, line: 627
msgid "The `whereExists` method allows you to write \"where exists\" SQL clauses. The `whereExists` method accepts a closure which will receive a query builder instance, allowing you to define the query that should be placed inside of the \"exists\" clause:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 634
# File: docs/master/queries.md, line: 635
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->whereExists(function ($query) {\n"
"                   $query->select(DB::raw(1))\n"
"                         ->from('orders')\n"
"                         ->whereColumn('orders.user_id', 'users.id');\n"
"               })\n"
"               ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 636
# File: docs/master/queries.md, line: 637
msgid "The query above will produce the following SQL:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 637
# File: docs/master/queries.md, line: 638
#, no-wrap
msgid ""
"select * from users\n"
"where exists (\n"
"    select 1\n"
"    from orders\n"
"    where orders.user_id = users.id\n"
")\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 647
# File: docs/master/queries.md, line: 648
#, no-wrap
msgid "<a name=\"subquery-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 647
# File: docs/master/queries.md, line: 648
#, no-wrap
msgid "Subquery Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 650
# File: docs/master/queries.md, line: 651
msgid "Sometimes you may need to construct a \"where\" clause that compares the results of a subquery to a given value. You may accomplish this by passing a closure and a value to the `where` method. For example, the following query will retrieve all users who have a recent \"membership\" of a given type;"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 652
# File: docs/master/queries.md, line: 653
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 660
# File: docs/master/queries.md, line: 661
#, no-wrap
msgid ""
"    $users = User::where(function ($query) {\n"
"        $query->select('type')\n"
"            ->from('membership')\n"
"            ->whereColumn('membership.user_id', 'users.id')\n"
"            ->orderByDesc('membership.start_date')\n"
"            ->limit(1);\n"
"    }, 'Pro')->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 662
# File: docs/master/queries.md, line: 663
msgid "Or, you may need to construct a \"where\" clause that compares a column to the results of a subquery. You may accomplish this by passing a column, operator, and closure to the `where` method. For example, the following query will retrieve all income records where the amount is less than average;"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 664
# File: docs/master/queries.md, line: 665
#, no-wrap
msgid "    use App\\Models\\Income;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 668
# File: docs/master/queries.md, line: 669
#, no-wrap
msgid ""
"    $incomes = Income::where('amount', '<', function ($query) {\n"
"        $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"    })->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 670
# File: docs/master/queries.md, line: 682
#, no-wrap
msgid "<a name=\"ordering-grouping-limit-and-offset\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 670
# File: docs/master/queries.md, line: 682
#, no-wrap
msgid "Ordering, Grouping, Limit & Offset"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 673
# File: docs/master/queries.md, line: 685
#, no-wrap
msgid "<a name=\"ordering\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 673
# File: docs/master/queries.md, line: 685
#, no-wrap
msgid "Ordering"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 676
# File: docs/master/queries.md, line: 688
#, no-wrap
msgid "<a name=\"orderby\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 676
# File: docs/master/queries.md, line: 688
#, no-wrap
msgid "The `orderBy` Method"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 679
# File: docs/master/queries.md, line: 691
msgid "The `orderBy` method allows you to sort the results of the query by a given column. The first argument accepted by the `orderBy` method should be the column you wish to sort by, while the second argument determines the direction of the sort and may be either `asc` or `desc`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 683
# File: docs/master/queries.md, line: 695
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 685
# File: docs/master/queries.md, line: 697
msgid "To sort by multiple columns, you may simply invoke `orderBy` as many times as necessary:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 690
# File: docs/master/queries.md, line: 702
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->orderBy('name', 'desc')\n"
"                    ->orderBy('email', 'asc')\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 692
# File: docs/master/queries.md, line: 704
#, no-wrap
msgid "<a name=\"latest-oldest\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 692
# File: docs/master/queries.md, line: 704
#, no-wrap
msgid "The `latest` & `oldest` Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 695
# File: docs/master/queries.md, line: 707
msgid "The `latest` and `oldest` methods allow you to easily order results by date. By default, the result will be ordered by the table's `created_at` column. Or, you may pass the column name that you wish to sort by:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 699
# File: docs/master/queries.md, line: 711
#, no-wrap
msgid ""
"    $user = DB::table('users')\n"
"                    ->latest()\n"
"                    ->first();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 701
# File: docs/master/queries.md, line: 713
#, no-wrap
msgid "<a name=\"random-ordering\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 701
# File: docs/master/queries.md, line: 713
#, no-wrap
msgid "Random Ordering"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 704
# File: docs/master/queries.md, line: 716
msgid "The `inRandomOrder` method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 708
# File: docs/master/queries.md, line: 720
#, no-wrap
msgid ""
"    $randomUser = DB::table('users')\n"
"                    ->inRandomOrder()\n"
"                    ->first();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 710
# File: docs/master/queries.md, line: 722
#, no-wrap
msgid "<a name=\"removing-existing-orderings\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 710
# File: docs/master/queries.md, line: 722
#, no-wrap
msgid "Removing Existing Orderings"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 713
# File: docs/master/queries.md, line: 725
msgid "The `reorder` method removes all of the \"order by\" clauses that have previously been applied to the query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 715
# File: docs/8.x/queries.md, line: 721
# File: docs/master/queries.md, line: 727
# File: docs/master/queries.md, line: 733
#, no-wrap
msgid "    $query = DB::table('users')->orderBy('name');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 717
# File: docs/master/queries.md, line: 729
#, no-wrap
msgid "    $unorderedUsers = $query->reorder()->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 719
# File: docs/master/queries.md, line: 731
msgid "You may pass a column and direction when calling the `reorder` method in order to remove all existing \"order by\" clauses and apply an entirely new order to the query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 723
# File: docs/master/queries.md, line: 735
#, no-wrap
msgid "    $usersOrderedByEmail = $query->reorder('email', 'desc')->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 725
# File: docs/master/queries.md, line: 737
#, no-wrap
msgid "<a name=\"grouping\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 725
# File: docs/master/queries.md, line: 737
#, no-wrap
msgid "Grouping"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 728
# File: docs/master/queries.md, line: 740
#, no-wrap
msgid "<a name=\"groupby-having\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 728
# File: docs/master/queries.md, line: 740
#, no-wrap
msgid "The `groupBy` & `having` Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 731
# File: docs/master/queries.md, line: 743
msgid "As you might expect, the `groupBy` and `having` methods may be used to group the query results. The `having` method's signature is similar to that of the `where` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 736
# File: docs/master/queries.md, line: 748
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->groupBy('account_id')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 738
# File: docs/master/queries.md, line: 750
msgid "You can use the `havingBetween` method to filter the results within a given range:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 744
# File: docs/master/queries.md, line: 756
#, no-wrap
msgid ""
"    $report = DB::table('orders')\n"
"                    ->selectRaw('count(id) as number_of_orders, customer_id')\n"
"                    ->groupBy('customer_id')\n"
"                    ->havingBetween('number_of_orders', [5, 15])\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 746
# File: docs/master/queries.md, line: 758
msgid "You may pass multiple arguments to the `groupBy` method to group by multiple columns:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 751
# File: docs/master/queries.md, line: 763
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->groupBy('first_name', 'status')\n"
"                    ->having('account_id', '>', 100)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 753
# File: docs/master/queries.md, line: 765
msgid "To build more advanced `having` statements, see the [`havingRaw`](#raw-methods) method."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 755
# File: docs/master/queries.md, line: 767
#, no-wrap
msgid "<a name=\"limit-and-offset\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 755
# File: docs/master/queries.md, line: 767
#, no-wrap
msgid "Limit & Offset"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 758
# File: docs/master/queries.md, line: 770
#, no-wrap
msgid "<a name=\"skip-take\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 758
# File: docs/master/queries.md, line: 770
#, no-wrap
msgid "The `skip` & `take` Methods"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 761
# File: docs/master/queries.md, line: 773
msgid "You may use the `skip` and `take` methods to limit the number of results returned from the query or to skip a given number of results in the query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 763
# File: docs/master/queries.md, line: 775
#, no-wrap
msgid "    $users = DB::table('users')->skip(10)->take(5)->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 765
# File: docs/master/queries.md, line: 777
msgid "Alternatively, you may use the `limit` and `offset` methods. These methods are functionally equivalent to the `take` and `skip` methods, respectively:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 770
# File: docs/master/queries.md, line: 782
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->offset(10)\n"
"                    ->limit(5)\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 772
# File: docs/master/queries.md, line: 784
#, no-wrap
msgid "<a name=\"conditional-clauses\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 772
# File: docs/master/queries.md, line: 784
#, no-wrap
msgid "Conditional Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 775
# File: docs/master/queries.md, line: 787
msgid "Sometimes you may want certain query clauses to apply to a query based on another condition. For instance, you may only want to apply a `where` statement if a given input value is present on the incoming HTTP request. You may accomplish this using the `when` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 777
# File: docs/master/queries.md, line: 789
#, no-wrap
msgid "    $role = $request->input('role');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 783
# File: docs/master/queries.md, line: 795
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->when($role, function ($query, $role) {\n"
"                        return $query->where('role_id', $role);\n"
"                    })\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 785
# File: docs/master/queries.md, line: 797
msgid "The `when` method only executes the given closure when the first argument is `true`. If the first argument is `false`, the closure will not be executed. So, in the example above, the closure given to the `when` method will only be invoked if the `role` field is present on the incoming request and evaluates to `true`."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 787
# File: docs/master/queries.md, line: 799
msgid "You may pass another closure as the third argument to the `when` method. This closure will only execute if the first argument evaluates as `false`. To illustrate how this feature may be used, we will use it to configure the default ordering of a query:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 789
# File: docs/master/queries.md, line: 801
#, no-wrap
msgid "    $sortByVotes = $request->input('sort_by_votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 797
# File: docs/master/queries.md, line: 809
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"                    ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                        return $query->orderBy('votes');\n"
"                    }, function ($query) {\n"
"                        return $query->orderBy('name');\n"
"                    })\n"
"                    ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 799
# File: docs/master/queries.md, line: 811
#, no-wrap
msgid "<a name=\"insert-statements\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 799
# File: docs/master/queries.md, line: 811
#, no-wrap
msgid "Insert Statements"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 802
# File: docs/master/queries.md, line: 814
msgid "The query builder also provides an `insert` method that may be used to insert records into the database table. The `insert` method accepts an array of column names and values:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 807
# File: docs/master/queries.md, line: 819
#, no-wrap
msgid ""
"    DB::table('users')->insert([\n"
"        'email' => 'kayla@example.com',\n"
"        'votes' => 0\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 809
# File: docs/master/queries.md, line: 821
msgid "You may insert several records at once by passing an array of arrays. Each array represents a record that should be inserted into the table:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 814
# File: docs/master/queries.md, line: 826
#, no-wrap
msgid ""
"    DB::table('users')->insert([\n"
"        ['email' => 'picard@example.com', 'votes' => 0],\n"
"        ['email' => 'janeway@example.com', 'votes' => 0],\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 816
# File: docs/master/queries.md, line: 828
msgid "The `insertOrIgnore` method will ignore errors while inserting records into the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 821
# File: docs/master/queries.md, line: 833
#, no-wrap
msgid ""
"    DB::table('users')->insertOrIgnore([\n"
"        ['id' => 1, 'email' => 'sisko@example.com'],\n"
"        ['id' => 2, 'email' => 'archer@example.com'],\n"
"    ]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 823
# File: docs/master/queries.md, line: 835
#, no-wrap
msgid "> {note} `insertOrIgnore` will ignore duplicate records and also may ignore other types of errors depending on the database engine. For example, `insertOrIgnore` will [bypass MySQL's strict mode](https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-effect-on-execution).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 825
# File: docs/master/queries.md, line: 837
#, no-wrap
msgid "<a name=\"auto-incrementing-ids\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 825
# File: docs/master/queries.md, line: 837
#, no-wrap
msgid "Auto-Incrementing IDs"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 828
# File: docs/master/queries.md, line: 840
msgid "If the table has an auto-incrementing id, use the `insertGetId` method to insert a record and then retrieve the ID:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 832
# File: docs/master/queries.md, line: 844
#, no-wrap
msgid ""
"    $id = DB::table('users')->insertGetId(\n"
"        ['email' => 'john@example.com', 'votes' => 0]\n"
"    );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 834
# File: docs/master/queries.md, line: 846
#, no-wrap
msgid "> {note} When using PostgreSQL the `insertGetId` method expects the auto-incrementing column to be named `id`. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the `insertGetId` method.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 836
# File: docs/master/queries.md, line: 848
#, no-wrap
msgid "<a name=\"upserts\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 836
# File: docs/master/queries.md, line: 848
#, no-wrap
msgid "Upserts"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 839
# File: docs/master/queries.md, line: 851
msgid "The `upsert` method will insert records that do not exist and update the records that already exist with new values that you may specify. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of columns that should be updated if a matching record already exists in the database:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 844
# File: docs/master/queries.md, line: 856
#, no-wrap
msgid ""
"    DB::table('flights')->upsert([\n"
"        ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"        ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"    ], ['departure', 'destination'], ['price']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 846
# File: docs/master/queries.md, line: 858
msgid "In the example above, Laravel will attempt to insert two records. If a record already exists with the same `departure` and `destination` column values, Laravel will update that record's `price` column."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 848
# File: docs/master/queries.md, line: 860
#, no-wrap
msgid "> {note} All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MySQL database driver ignores the second argument of the `upsert` method and always uses the \"primary\" and \"unique\" indexes of the table to detect existing records.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 850
# File: docs/master/queries.md, line: 862
#, no-wrap
msgid "<a name=\"update-statements\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 850
# File: docs/master/queries.md, line: 862
#, no-wrap
msgid "Update Statements"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 853
# File: docs/master/queries.md, line: 865
msgid "In addition to inserting records into the database, the query builder can also update existing records using the `update` method. The `update` method, like the `insert` method, accepts an array of column and value pairs indicating the columns to be updated. The `update` method returns the number of affected rows. You may constrain the `update` query using `where` clauses:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 857
# File: docs/master/queries.md, line: 869
#, no-wrap
msgid ""
"    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['votes' => 1]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 859
# File: docs/master/queries.md, line: 871
#, no-wrap
msgid "<a name=\"update-or-insert\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 859
# File: docs/master/queries.md, line: 871
#, no-wrap
msgid "Update Or Insert"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 862
# File: docs/master/queries.md, line: 874
msgid "Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the `updateOrInsert` method may be used. The `updateOrInsert` method accepts two arguments: an array of conditions by which to find the record, and an array of column and value pairs indicating the columns to be updated."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 864
# File: docs/master/queries.md, line: 876
msgid "The `updateOrInsert` method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 870
# File: docs/master/queries.md, line: 882
#, no-wrap
msgid ""
"    DB::table('users')\n"
"        ->updateOrInsert(\n"
"            ['email' => 'john@example.com', 'name' => 'John'],\n"
"            ['votes' => '2']\n"
"        );\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 872
# File: docs/master/queries.md, line: 884
#, no-wrap
msgid "<a name=\"updating-json-columns\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 872
# File: docs/master/queries.md, line: 884
#, no-wrap
msgid "Updating JSON Columns"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 875
# File: docs/master/queries.md, line: 887
#, no-wrap
msgid "When updating a JSON column, you should use `->` syntax to update the appropriate key in the JSON object. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+:\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 879
# File: docs/master/queries.md, line: 891
#, no-wrap
msgid ""
"    $affected = DB::table('users')\n"
"                  ->where('id', 1)\n"
"                  ->update(['options->enabled' => true]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 881
# File: docs/master/queries.md, line: 893
#, no-wrap
msgid "<a name=\"increment-and-decrement\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/queries.md, line: 881
# File: docs/master/queries.md, line: 893
#, no-wrap
msgid "Increment & Decrement"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 884
# File: docs/master/queries.md, line: 896
msgid "The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of these methods accept at least one argument: the column to modify. A second argument may be provided to specify the amount by which the column should be incremented or decremented:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 886
# File: docs/master/queries.md, line: 898
#, no-wrap
msgid "    DB::table('users')->increment('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 888
# File: docs/master/queries.md, line: 900
#, no-wrap
msgid "    DB::table('users')->increment('votes', 5);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 890
# File: docs/master/queries.md, line: 902
#, no-wrap
msgid "    DB::table('users')->decrement('votes');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 892
# File: docs/master/queries.md, line: 904
#, no-wrap
msgid "    DB::table('users')->decrement('votes', 5);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 894
# File: docs/master/queries.md, line: 906
msgid "You may also specify additional columns to update during the operation:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 896
# File: docs/master/queries.md, line: 908
#, no-wrap
msgid "    DB::table('users')->increment('votes', 1, ['name' => 'John']);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 898
# File: docs/master/queries.md, line: 910
#, no-wrap
msgid "<a name=\"delete-statements\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 898
# File: docs/master/queries.md, line: 910
#, no-wrap
msgid "Delete Statements"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 901
# File: docs/master/queries.md, line: 913
msgid "The query builder's `delete` method may be used to delete records from the table. The `delete` method returns the number of affected rows. You may constrain `delete` statements by adding \"where\" clauses before calling the `delete` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 903
# File: docs/master/queries.md, line: 915
#, no-wrap
msgid "    $deleted = DB::table('users')->delete();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 905
# File: docs/master/queries.md, line: 917
#, no-wrap
msgid "    $deleted = DB::table('users')->where('votes', '>', 100)->delete();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 907
# File: docs/master/queries.md, line: 919
msgid "If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to zero, you may use the `truncate` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 909
# File: docs/master/queries.md, line: 921
#, no-wrap
msgid "    DB::table('users')->truncate();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 911
# File: docs/master/queries.md, line: 923
#, no-wrap
msgid "<a name=\"table-truncation-and-postgresql\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/queries.md, line: 911
# File: docs/master/queries.md, line: 923
#, no-wrap
msgid "Table Truncation & PostgreSQL"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 914
# File: docs/master/queries.md, line: 926
msgid "When truncating a PostgreSQL database, the `CASCADE` behavior will be applied. This means that all foreign key related records in other tables will be deleted as well."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 916
# File: docs/master/queries.md, line: 928
#, no-wrap
msgid "<a name=\"pessimistic-locking\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 916
# File: docs/master/queries.md, line: 928
#, no-wrap
msgid "Pessimistic Locking"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 919
# File: docs/master/queries.md, line: 931
msgid "The query builder also includes a few functions to help you achieve \"pessimistic locking\" when executing your `select` statements. To execute a statement with a \"shared lock\", you may call the `sharedLock` method. A shared lock prevents the selected rows from being modified until your transaction is committed:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 924
# File: docs/master/queries.md, line: 936
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->sharedLock()\n"
"            ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 926
# File: docs/master/queries.md, line: 938
msgid "Alternatively, you may use the `lockForUpdate` method. A \"for update\" lock prevents the selected records from being modified or from being selected with another shared lock:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 931
# File: docs/master/queries.md, line: 943
#, no-wrap
msgid ""
"    DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->lockForUpdate()\n"
"            ->get();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 933
# File: docs/master/queries.md, line: 945
#, no-wrap
msgid "<a name=\"debugging\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/queries.md, line: 933
# File: docs/master/queries.md, line: 945
#, no-wrap
msgid "Debugging"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 936
# File: docs/master/queries.md, line: 948
msgid "You may use the `dd` and `dump` methods while building a query to dump the current query bindings and SQL. The `dd` method will display the debug information and then stop executing the request. The `dump` method will display the debug information but allow the request to continue executing:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 938
# File: docs/master/queries.md, line: 950
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dd();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/queries.md, line: 939
# File: docs/master/queries.md, line: 951
#, no-wrap
msgid "    DB::table('users')->where('votes', '>', 100)->dump();\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/queries.md, line: 35
#, no-wrap
msgid ""
"- [Running Database Queries](#running-database-queries)\n"
"    - [Chunking Results](#chunking-results)\n"
"    - [Streaming Results Lazily](#streaming-results-lazily)\n"
"    - [Aggregates](#aggregates)\n"
"- [Select Statements](#select-statements)\n"
"- [Raw Expressions](#raw-expressions)\n"
"- [Joins](#joins)\n"
"- [Unions](#unions)\n"
"- [Basic Where Clauses](#basic-where-clauses)\n"
"    - [Where Clauses](#where-clauses)\n"
"    - [Or Where Clauses](#or-where-clauses)\n"
"    - [JSON Where Clauses](#json-where-clauses)\n"
"    - [Additional Where Clauses](#additional-where-clauses)\n"
"    - [Logical Grouping](#logical-grouping)\n"
"- [Advanced Where Clauses](#advanced-where-clauses)\n"
"    - [Where Exists Clauses](#where-exists-clauses)\n"
"    - [Subquery Where Clauses](#subquery-where-clauses)\n"
"    - [Full Text Where Clauses](#full-text-where-clauses)\n"
"- [Ordering, Grouping, Limit & Offset](#ordering-grouping-limit-and-offset)\n"
"    - [Ordering](#ordering)\n"
"    - [Grouping](#grouping)\n"
"    - [Limit & Offset](#limit-and-offset)\n"
"- [Conditional Clauses](#conditional-clauses)\n"
"- [Insert Statements](#insert-statements)\n"
"    - [Upserts](#upserts)\n"
"- [Update Statements](#update-statements)\n"
"    - [Updating JSON Columns](#updating-json-columns)\n"
"    - [Increment & Decrement](#increment-and-decrement)\n"
"- [Delete Statements](#delete-statements)\n"
"- [Pessimistic Locking](#pessimistic-locking)\n"
"- [Debugging](#debugging)\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/queries.md, line: 671
#, no-wrap
msgid "<a name=\"full-text-where-clauses\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/master/queries.md, line: 671
#, no-wrap
msgid "Full Text Where Clauses"
msgstr ""
#
#. type: Plain text
# File: docs/master/queries.md, line: 674
#, no-wrap
msgid "> {note} Full text where clauses are currently supported by MySQL and PostgreSQL.\n"
msgstr ""
#
#. type: Plain text
# File: docs/master/queries.md, line: 676
msgid "The `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr ""
#
#. type: Plain text
# File: docs/master/queries.md, line: 680
#, no-wrap
msgid ""
"    $users = DB::table('users')\n"
"               ->whereFullText('bio', 'web developer')\n"
"               ->get();\n"
msgstr ""
