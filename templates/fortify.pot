#
msgid ""
msgstr ""

#: docs/10.x/fortify.md:block 1 (header)
msgid "Laravel Fortify"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[What Is Fortify?](#what-is-fortify)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[When Should I Use Fortify?](#when-should-i-use-fortify)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[The Fortify Service Provider](#the-fortify-service-provider)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Fortify Features](#fortify-features)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Disabling Views](#disabling-views)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Authentication](#authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Customizing User Authentication](#customizing-user-authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Customizing The Authentication Pipeline](#customizing-the-authentication-pipeline)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Customizing Redirects](#customizing-authentication-redirects)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Two Factor Authentication](#two-factor-authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Enabling Two Factor Authentication](#enabling-two-factor-authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Authenticating With Two Factor Authentication](#authenticating-with-two-factor-authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Disabling Two Factor Authentication](#disabling-two-factor-authentication)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Registration](#registration)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Customizing Registration](#customizing-registration)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Password Reset](#password-reset)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Requesting A Password Reset Link](#requesting-a-password-reset-link)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Resetting The Password](#resetting-the-password)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Customizing Password Resets](#customizing-password-resets)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Email Verification](#email-verification)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Protecting Routes](#protecting-routes)"
msgstr ""

#: docs/10.x/fortify.md:block 2 (unordered list)
msgid "[Password Confirmation](#password-confirmation)"
msgstr ""

#: docs/10.x/fortify.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/fortify.md:block 5 (paragraph)
msgid "[Laravel Fortify](https://github.com/laravel/fortify) is a frontend agnostic authentication backend implementation for Laravel. Fortify registers the routes and controllers needed to implement all of Laravel's authentication features, including login, registration, password reset, email verification, and more. After installing Fortify, you may run the `route:list` Artisan command to see the routes that Fortify has registered."
msgstr ""

#: docs/10.x/fortify.md:block 6 (paragraph)
msgid "Since Fortify does not provide its own user interface, it is meant to be paired with your own user interface which makes requests to the routes it registers. We will discuss exactly how to make requests to these routes in the remainder of this documentation."
msgstr ""

#: docs/10.x/fortify.md:block 7 (quote)
msgid "**Note** Remember, Fortify is a package that is meant to give you a head start implementing Laravel's authentication features. **You are not required to use it.** You are always free to manually interact with Laravel's authentication services by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation."
msgstr ""

#: docs/10.x/fortify.md:block 9 (header)
msgid "What Is Fortify?"
msgstr ""

#: docs/10.x/fortify.md:block 10 (paragraph)
msgid "As mentioned previously, Laravel Fortify is a frontend agnostic authentication backend implementation for Laravel. Fortify registers the routes and controllers needed to implement all of Laravel's authentication features, including login, registration, password reset, email verification, and more."
msgstr ""

#: docs/10.x/fortify.md:block 11 (paragraph)
msgid "**You are not required to use Fortify in order to use Laravel's authentication features.** You are always free to manually interact with Laravel's authentication services by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation."
msgstr ""

#: docs/10.x/fortify.md:block 12 (paragraph)
msgid "If you are new to Laravel, you may wish to explore the [Laravel Breeze](/docs/{{version}}/starter-kits) application starter kit before attempting to use Laravel Fortify. Laravel Breeze provides an authentication scaffolding for your application that includes a user interface built with [Tailwind CSS](https://tailwindcss.com). Unlike Fortify, Breeze publishes its routes and controllers directly into your application. This allows you to study and get comfortable with Laravel's authentication features before allowing Laravel Fortify to implement these features for you."
msgstr ""

#: docs/10.x/fortify.md:block 13 (paragraph)
msgid "Laravel Fortify essentially takes the routes and controllers of Laravel Breeze and offers them as a package that does not include a user interface. This allows you to still quickly scaffold the backend implementation of your application's authentication layer without being tied to any particular frontend opinions."
msgstr ""

#: docs/10.x/fortify.md:block 15 (header)
msgid "When Should I Use Fortify?"
msgstr ""

#: docs/10.x/fortify.md:block 16 (paragraph)
msgid "You may be wondering when it is appropriate to use Laravel Fortify. First, if you are using one of Laravel's [application starter kits](/docs/{{version}}/starter-kits), you do not need to install Laravel Fortify since all of Laravel's application starter kits already provide a full authentication implementation."
msgstr ""

#: docs/10.x/fortify.md:block 17 (paragraph)
msgid "If you are not using an application starter kit and your application needs authentication features, you have two options: manually implement your application's authentication features or use Laravel Fortify to provide the backend implementation of these features."
msgstr ""

#: docs/10.x/fortify.md:block 18 (paragraph)
msgid "If you choose to install Fortify, your user interface will make requests to Fortify's authentication routes that are detailed in this documentation in order to authenticate and register users."
msgstr ""

#: docs/10.x/fortify.md:block 19 (paragraph)
msgid "If you choose to manually interact with Laravel's authentication services instead of using Fortify, you may do so by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation."
msgstr ""

#: docs/10.x/fortify.md:block 21 (header)
msgid "Laravel Fortify & Laravel Sanctum"
msgstr ""

#: docs/10.x/fortify.md:block 22 (paragraph)
msgid "Some developers become confused regarding the difference between [Laravel Sanctum](/docs/{{version}}/sanctum) and Laravel Fortify. Because the two packages solve two different but related problems, Laravel Fortify and Laravel Sanctum are not mutually exclusive or competing packages."
msgstr ""

#: docs/10.x/fortify.md:block 23 (paragraph)
msgid "Laravel Sanctum is only concerned with managing API tokens and authenticating existing users using session cookies or tokens. Sanctum does not provide any routes that handle user registration, password reset, etc."
msgstr ""

#: docs/10.x/fortify.md:block 24 (paragraph)
msgid "If you are attempting to manually build the authentication layer for an application that offers an API or serves as the backend for a single-page application, it is entirely possible that you will utilize both Laravel Fortify (for user registration, password reset, etc.) and Laravel Sanctum (API token management, session authentication)."
msgstr ""

#: docs/10.x/fortify.md:block 26 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/fortify.md:block 27 (paragraph)
msgid "To get started, install Fortify using the Composer package manager:"
msgstr ""

#: docs/10.x/fortify.md:block 28 (code)
msgid "composer require laravel/fortify\n"
msgstr ""

#: docs/10.x/fortify.md:block 29 (paragraph)
msgid "Next, publish Fortify's resources using the `vendor:publish` command:"
msgstr ""

#: docs/10.x/fortify.md:block 30 (code)
msgid "php artisan vendor:publish --provider=\"Laravel\\Fortify\\FortifyServiceProvider\"\n"
msgstr ""

#: docs/10.x/fortify.md:block 31 (paragraph)
msgid "This command will publish Fortify's actions to your `app/Actions` directory, which will be created if it does not exist. In addition, the `FortifyServiceProvider`, configuration file, and all necessary database migrations will be published."
msgstr ""

#: docs/10.x/fortify.md:block 32 (paragraph)
msgid "Next, you should migrate your database:"
msgstr ""

#: docs/10.x/fortify.md:block 33 (code)
msgid "php artisan migrate\n"
msgstr ""

#: docs/10.x/fortify.md:block 35 (header)
msgid "The Fortify Service Provider"
msgstr ""

#: docs/10.x/fortify.md:block 36 (paragraph)
msgid "The `vendor:publish` command discussed above will also publish the `App\\Providers\\FortifyServiceProvider` class. You should ensure this class is registered within the `providers` array of your application's `config/app.php` configuration file."
msgstr ""

#: docs/10.x/fortify.md:block 37 (paragraph)
msgid "The Fortify service provider registers the actions that Fortify published and instructs Fortify to use them when their respective tasks are executed by Fortify."
msgstr ""

#: docs/10.x/fortify.md:block 39 (header)
msgid "Fortify Features"
msgstr ""

#: docs/10.x/fortify.md:block 40 (paragraph)
msgid "The `fortify` configuration file contains a `features` configuration array. This array defines which backend routes / features Fortify will expose by default. If you are not using Fortify in combination with [Laravel Jetstream](https://jetstream.laravel.com), we recommend that you only enable the following features, which are the basic authentication features provided by most Laravel applications:"
msgstr ""

#: docs/10.x/fortify.md:block 41 (code)
msgid ""
"'features' => [\n"
"    Features::registration(),\n"
"    Features::resetPasswords(),\n"
"    Features::emailVerification(),\n"
"],\n"
msgstr ""

#: docs/10.x/fortify.md:block 43 (header)
msgid "Disabling Views"
msgstr ""

#: docs/10.x/fortify.md:block 44 (paragraph)
msgid "By default, Fortify defines routes that are intended to return views, such as a login screen or registration screen. However, if you are building a JavaScript driven single-page application, you may not need these routes. For that reason, you may disable these routes entirely by setting the `views` configuration value within your application's `config/fortify.php` configuration file to `false`:"
msgstr ""

#: docs/10.x/fortify.md:block 45 (code)
msgid "'views' => false,\n"
msgstr ""

#: docs/10.x/fortify.md:block 47 (header)
msgid "Disabling Views & Password Reset"
msgstr ""

#: docs/10.x/fortify.md:block 48 (paragraph)
msgid "If you choose to disable Fortify's views and you will be implementing password reset features for your application, you should still define a route named `password.reset` that is responsible for displaying your application's \"reset password\" view. This is necessary because Laravel's `Illuminate\\Auth\\Notifications\\ResetPassword` notification will generate the password reset URL via the `password.reset` named route."
msgstr ""

#: docs/10.x/fortify.md:block 50 (header)
msgid "Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 51 (paragraph)
msgid "To get started, we need to instruct Fortify how to return our \"login\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/10.x/fortify.md:block 52 (paragraph)
msgid "All of the authentication view's rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class. Fortify will take care of defining the `/login` route that returns this view:"
msgstr ""

#: docs/10.x/fortify.md:block 53 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::loginView(function () {\n"
"        return view('auth.login');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 54 (paragraph)
msgid "Your login template should include a form that makes a POST request to `/login`. The `/login` endpoint expects a string `email` / `username` and a `password`. The name of the email / username field should match the `username` value within the `config/fortify.php` configuration file. In addition, a boolean `remember` field may be provided to indicate that the user would like to use the \"remember me\" functionality provided by Laravel."
msgstr ""

#: docs/10.x/fortify.md:block 55 (paragraph)
msgid "If the login attempt is successful, Fortify will redirect you to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 56 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the login screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with the 422 HTTP response."
msgstr ""

#: docs/10.x/fortify.md:block 58 (header)
msgid "Customizing User Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 59 (paragraph)
msgid "Fortify will automatically retrieve and authenticate the user based on the provided credentials and the authentication guard that is configured for your application. However, you may sometimes wish to have full customization over how login credentials are authenticated and users are retrieved. Thankfully, Fortify allows you to easily accomplish this using the `Fortify::authenticateUsing` method."
msgstr ""

#: docs/10.x/fortify.md:block 60 (paragraph)
msgid "This method accepts a closure which receives the incoming HTTP request. The closure is responsible for validating the login credentials attached to the request and returning the associated user instance. If the credentials are invalid or no user can be found, `null` or `false` should be returned by the closure. Typically, this method should be called from the `boot` method of your `FortifyServiceProvider`:"
msgstr ""

#: docs/10.x/fortify.md:block 61 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::authenticateUsing(function (Request $request) {\n"
"        $user = User::where('email', $request->email)->first();\n"
"\n"
"        if ($user &&\n"
"            Hash::check($request->password, $user->password)) {\n"
"            return $user;\n"
"        }\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 63 (header)
msgid "Authentication Guard"
msgstr ""

#: docs/10.x/fortify.md:block 64 (paragraph)
msgid "You may customize the authentication guard used by Fortify within your application's `fortify` configuration file. However, you should ensure that the configured guard is an implementation of `Illuminate\\Contracts\\Auth\\StatefulGuard`. If you are attempting to use Laravel Fortify to authenticate an SPA, you should use Laravel's default `web` guard in combination with [Laravel Sanctum](https://laravel.com/docs/sanctum)."
msgstr ""

#: docs/10.x/fortify.md:block 66 (header)
msgid "Customizing The Authentication Pipeline"
msgstr ""

#: docs/10.x/fortify.md:block 67 (paragraph)
msgid "Laravel Fortify authenticates login requests through a pipeline of invokable classes. If you would like, you may define a custom pipeline of classes that login requests should be piped through. Each class should have an `__invoke` method which receives the incoming `Illuminate\\Http\\Request` instance and, like [middleware](/docs/{{version}}/middleware), a `$next` variable that is invoked in order to pass the request to the next class in the pipeline."
msgstr ""

#: docs/10.x/fortify.md:block 68 (paragraph)
msgid "To define your custom pipeline, you may use the `Fortify::authenticateThrough` method. This method accepts a closure which should return the array of classes to pipe the login request through. Typically, this method should be called from the `boot` method of your `App\\Providers\\FortifyServiceProvider` class."
msgstr ""

#: docs/10.x/fortify.md:block 69 (paragraph)
msgid "The example below contains the default pipeline definition that you may use as a starting point when making your own modifications:"
msgstr ""

#: docs/10.x/fortify.md:block 70 (code)
msgid ""
"use Laravel\\Fortify\\Actions\\AttemptToAuthenticate;\n"
"use Laravel\\Fortify\\Actions\\EnsureLoginIsNotThrottled;\n"
"use Laravel\\Fortify\\Actions\\PrepareAuthenticatedSession;\n"
"use Laravel\\Fortify\\Actions\\RedirectIfTwoFactorAuthenticatable;\n"
"use Laravel\\Fortify\\Fortify;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"Fortify::authenticateThrough(function (Request $request) {\n"
"    return array_filter([\n"
"            config('fortify.limiters.login') ? null : EnsureLoginIsNotThrottled::class,\n"
"            Features::enabled(Features::twoFactorAuthentication()) ? RedirectIfTwoFactorAuthenticatable::class : null,\n"
"            AttemptToAuthenticate::class,\n"
"            PrepareAuthenticatedSession::class,\n"
"    ]);\n"
"});\n"
msgstr ""

#: docs/10.x/fortify.md:block 72 (header)
msgid "Customizing Redirects"
msgstr ""

#: docs/10.x/fortify.md:block 73 (paragraph)
msgid "If the login attempt is successful, Fortify will redirect you to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 200 HTTP response will be returned. After a user logs out of the application, the user will be redirected to the `/` URI."
msgstr ""

#: docs/10.x/fortify.md:block 74 (paragraph)
msgid "If you need advanced customization of this behavior, you may bind implementations of the `LoginResponse` and `LogoutResponse` contracts into the Laravel [service container](/docs/{{version}}/container). Typically, this should be done within the `register` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#: docs/10.x/fortify.md:block 75 (code)
msgid ""
"use Laravel\\Fortify\\Contracts\\LogoutResponse;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->instance(LogoutResponse::class, new class implements LogoutResponse {\n"
"        public function toResponse($request)\n"
"        {\n"
"            return redirect('/');\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 77 (header)
msgid "Two Factor Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 78 (paragraph)
msgid "When Fortify's two factor authentication feature is enabled, the user is required to input a six digit numeric token during the authentication process. This token is generated using a time-based one-time password (TOTP) that can be retrieved from any TOTP compatible mobile authentication application such as Google Authenticator."
msgstr ""

#: docs/10.x/fortify.md:block 79 (paragraph)
msgid "Before getting started, you should first ensure that your application's `App\\Models\\User` model uses the `Laravel\\Fortify\\TwoFactorAuthenticatable` trait:"
msgstr ""

#: docs/10.x/fortify.md:block 80 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Laravel\\Fortify\\TwoFactorAuthenticatable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable, TwoFactorAuthenticatable;\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 81 (paragraph)
msgid "Next, you should build a screen within your application where users can manage their two factor authentication settings. This screen should allow the user to enable and disable two factor authentication, as well as regenerate their two factor authentication recovery codes."
msgstr ""

#: docs/10.x/fortify.md:block 82 (quote)
msgid "By default, the `features` array of the `fortify` configuration file instructs Fortify's two factor authentication settings to require password confirmation before modification. Therefore, your application should implement Fortify's [password confirmation](#password-confirmation) feature before continuing."
msgstr ""

#: docs/10.x/fortify.md:block 84 (header)
msgid "Enabling Two Factor Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 85 (paragraph)
msgid "To begin enabling two factor authentication, your application should make a POST request to the `/user/two-factor-authentication` endpoint defined by Fortify. If the request is successful, the user will be redirected back to the previous URL and the `status` session variable will be set to `two-factor-authentication-enabled`. You may detect this `status` session variable within your templates to display the appropriate success message. If the request was an XHR request, `200` HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 86 (paragraph)
msgid "After choosing to enable two factor authentication, the user must still \"confirm\" their two factor authentication configuration by providing a valid two factor authentication code. So, your \"success\" message should instruct the user that two factor authentication confirmation is still required:"
msgstr ""

#: docs/10.x/fortify.md:block 87 (code)
msgid ""
"@if (session('status') == 'two-factor-authentication-enabled')\n"
"    <div class=\"mb-4 font-medium text-sm\">\n"
"        Please finish configuring two factor authentication below.\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/10.x/fortify.md:block 88 (paragraph)
msgid "Next, you should display the two factor authentication QR code for the user to scan into their authenticator application. If you are using Blade to render your application's frontend, you may retrieve the QR code SVG using the `twoFactorQrCodeSvg` method available on the user instance:"
msgstr ""

#: docs/10.x/fortify.md:block 89 (code)
msgid "$request->user()->twoFactorQrCodeSvg();\n"
msgstr ""

#: docs/10.x/fortify.md:block 90 (paragraph)
msgid "If you are building a JavaScript powered frontend, you may make an XHR GET request to the `/user/two-factor-qr-code` endpoint to retrieve the user's two factor authentication QR code. This endpoint will return a JSON object containing an `svg` key."
msgstr ""

#: docs/10.x/fortify.md:block 92 (header)
msgid "Confirming Two Factor Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 93 (paragraph)
msgid "In addition to displaying the user's two factor authentication QR code, you should provide a text input where the user can supply a valid authentication code to \"confirm\" their two factor authentication configuration. This code should be provided to the Laravel application via a POST request to the `/user/confirmed-two-factor-authentication` endpoint defined by Fortify."
msgstr ""

#: docs/10.x/fortify.md:block 94 (paragraph)
msgid "If the request is successful, the user will be redirected back to the previous URL and the `status` session variable will be set to `two-factor-authentication-confirmed`:"
msgstr ""

#: docs/10.x/fortify.md:block 95 (code)
msgid ""
"@if (session('status') == 'two-factor-authentication-confirmed')\n"
"    <div class=\"mb-4 font-medium text-sm\">\n"
"        Two factor authentication confirmed and enabled successfully.\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/10.x/fortify.md:block 96 (paragraph)
msgid "If the request to the two factor authentication confirmation endpoint was made via an XHR request, a `200` HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 98 (header)
msgid "Displaying The Recovery Codes"
msgstr ""

#: docs/10.x/fortify.md:block 99 (paragraph)
msgid "You should also display the user's two factor recovery codes. These recovery codes allow the user to authenticate if they lose access to their mobile device. If you are using Blade to render your application's frontend, you may access the recovery codes via the authenticated user instance:"
msgstr ""

#: docs/10.x/fortify.md:block 100 (code)
msgid "(array) $request->user()->recoveryCodes()\n"
msgstr ""

#: docs/10.x/fortify.md:block 101 (paragraph)
msgid "If you are building a JavaScript powered frontend, you may make an XHR GET request to the `/user/two-factor-recovery-codes` endpoint. This endpoint will return a JSON array containing the user's recovery codes."
msgstr ""

#: docs/10.x/fortify.md:block 102 (paragraph)
msgid "To regenerate the user's recovery codes, your application should make a POST request to the `/user/two-factor-recovery-codes` endpoint."
msgstr ""

#: docs/10.x/fortify.md:block 104 (header)
msgid "Authenticating With Two Factor Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 105 (paragraph)
msgid "During the authentication process, Fortify will automatically redirect the user to your application's two factor authentication challenge screen. However, if your application is making an XHR login request, the JSON response returned after a successful authentication attempt will contain a JSON object that has a `two_factor` boolean property. You should inspect this value to know whether you should redirect to your application's two factor authentication challenge screen."
msgstr ""

#: docs/10.x/fortify.md:block 106 (paragraph)
msgid "To begin implementing two factor authentication functionality, we need to instruct Fortify how to return our two factor authentication challenge view. All of Fortify's authentication view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#: docs/10.x/fortify.md:block 107 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::twoFactorChallengeView(function () {\n"
"        return view('auth.two-factor-challenge');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 108 (paragraph)
msgid "Fortify will take care of defining the `/two-factor-challenge` route that returns this view. Your `two-factor-challenge` template should include a form that makes a POST request to the `/two-factor-challenge` endpoint. The `/two-factor-challenge` action expects a `code` field that contains a valid TOTP token or a `recovery_code` field that contains one of the user's recovery codes."
msgstr ""

#: docs/10.x/fortify.md:block 109 (paragraph)
msgid "If the login attempt is successful, Fortify will redirect the user to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 204 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 110 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the two factor challenge screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#: docs/10.x/fortify.md:block 112 (header)
msgid "Disabling Two Factor Authentication"
msgstr ""

#: docs/10.x/fortify.md:block 113 (paragraph)
msgid "To disable two factor authentication, your application should make a DELETE request to the `/user/two-factor-authentication` endpoint. Remember, Fortify's two factor authentication endpoints require [password confirmation](#password-confirmation) prior to being called."
msgstr ""

#: docs/10.x/fortify.md:block 115 (header)
msgid "Registration"
msgstr ""

#: docs/10.x/fortify.md:block 116 (paragraph)
msgid "To begin implementing our application's registration functionality, we need to instruct Fortify how to return our \"register\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/10.x/fortify.md:block 117 (paragraph)
msgid "All of Fortify's view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#: docs/10.x/fortify.md:block 118 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::registerView(function () {\n"
"        return view('auth.register');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 119 (paragraph)
msgid "Fortify will take care of defining the `/register` route that returns this view. Your `register` template should include a form that makes a POST request to the `/register` endpoint defined by Fortify."
msgstr ""

#: docs/10.x/fortify.md:block 120 (paragraph)
msgid "The `/register` endpoint expects a string `name`, string email address / username, `password`, and `password_confirmation` fields. The name of the email / username field should match the `username` configuration value defined within your application's `fortify` configuration file."
msgstr ""

#: docs/10.x/fortify.md:block 121 (paragraph)
msgid "If the registration attempt is successful, Fortify will redirect the user to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the request was an XHR request, a 201 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 122 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the registration screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#: docs/10.x/fortify.md:block 124 (header)
msgid "Customizing Registration"
msgstr ""

#: docs/10.x/fortify.md:block 125 (paragraph)
msgid "The user validation and creation process may be customized by modifying the `App\\Actions\\Fortify\\CreateNewUser` action that was generated when you installed Laravel Fortify."
msgstr ""

#: docs/10.x/fortify.md:block 127 (header)
msgid "Password Reset"
msgstr ""

#: docs/10.x/fortify.md:block 129 (header)
msgid "Requesting A Password Reset Link"
msgstr ""

#: docs/10.x/fortify.md:block 130 (paragraph)
msgid "To begin implementing our application's password reset functionality, we need to instruct Fortify how to return our \"forgot password\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/10.x/fortify.md:block 131 (paragraph)
msgid "All of Fortify's view rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#: docs/10.x/fortify.md:block 132 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::requestPasswordResetLinkView(function () {\n"
"        return view('auth.forgot-password');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 133 (paragraph)
msgid "Fortify will take care of defining the `/forgot-password` endpoint that returns this view. Your `forgot-password` template should include a form that makes a POST request to the `/forgot-password` endpoint."
msgstr ""

#: docs/10.x/fortify.md:block 134 (paragraph)
msgid "The `/forgot-password` endpoint expects a string `email` field. The name of this field / database column should match the `email` configuration value within your application's `fortify` configuration file."
msgstr ""

#: docs/10.x/fortify.md:block 136 (header)
msgid "Handling The Password Reset Link Request Response"
msgstr ""

#: docs/10.x/fortify.md:block 137 (paragraph)
msgid "If the password reset link request was successful, Fortify will redirect the user back to the `/forgot-password` endpoint and send an email to the user with a secure link they can use to reset their password. If the request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 138 (paragraph)
msgid "After being redirected back to the `/forgot-password` endpoint after a successful request, the `status` session variable may be used to display the status of the password reset link request attempt."
msgstr ""

#: docs/10.x/fortify.md:block 139 (paragraph)
msgid "The value of the `$status` session variable will match one of the translation strings defined within your application's `passwords` [language file](/docs/{{version}}/localization). If you would like to customize this value and have not published Laravel's language files, you may do so via the `lang:publish` Artisan command:"
msgstr ""

#: docs/10.x/fortify.md:block 140 (code)
msgid ""
"@if (session('status'))\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        {{ session('status') }}\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/10.x/fortify.md:block 141 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the request password reset link screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#: docs/10.x/fortify.md:block 143 (header)
msgid "Resetting The Password"
msgstr ""

#: docs/10.x/fortify.md:block 144 (paragraph)
msgid "To finish implementing our application's password reset functionality, we need to instruct Fortify how to return our \"reset password\" view."
msgstr ""

#: docs/10.x/fortify.md:block 146 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::resetPasswordView(function (Request $request) {\n"
"        return view('auth.reset-password', ['request' => $request]);\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 147 (paragraph)
msgid "Fortify will take care of defining the route to display this view. Your `reset-password` template should include a form that makes a POST request to `/reset-password`."
msgstr ""

#: docs/10.x/fortify.md:block 148 (paragraph)
msgid "The `/reset-password` endpoint expects a string `email` field, a `password` field, a `password_confirmation` field, and a hidden field named `token` that contains the value of `request()->route('token')`. The name of the \"email\" field / database column should match the `email` configuration value defined within your application's `fortify` configuration file."
msgstr ""

#: docs/10.x/fortify.md:block 150 (header)
msgid "Handling The Password Reset Response"
msgstr ""

#: docs/10.x/fortify.md:block 151 (paragraph)
msgid "If the password reset request was successful, Fortify will redirect back to the `/login` route so that the user can log in with their new password. In addition, a `status` session variable will be set so that you may display the successful status of the reset on your login screen:"
msgstr ""

#: docs/10.x/fortify.md:block 153 (paragraph)
msgid "If the request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 154 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the reset password screen and the validation errors will be available to you via the shared `$errors` [Blade template variable](/docs/{{version}}/validation#quick-displaying-the-validation-errors). Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#: docs/10.x/fortify.md:block 156 (header)
msgid "Customizing Password Resets"
msgstr ""

#: docs/10.x/fortify.md:block 157 (paragraph)
msgid "The password reset process may be customized by modifying the `App\\Actions\\ResetUserPassword` action that was generated when you installed Laravel Fortify."
msgstr ""

#: docs/10.x/fortify.md:block 159 (header)
msgid "Email Verification"
msgstr ""

#: docs/10.x/fortify.md:block 160 (paragraph)
msgid "After registration, you may wish for users to verify their email address before they continue accessing your application. To get started, ensure the `emailVerification` feature is enabled in your `fortify` configuration file's `features` array. Next, you should ensure that your `App\\Models\\User` class implements the `Illuminate\\Contracts\\Auth\\MustVerifyEmail` interface."
msgstr ""

#: docs/10.x/fortify.md:block 161 (paragraph)
msgid "Once these two setup steps have been completed, newly registered users will receive an email prompting them to verify their email address ownership. However, we need to inform Fortify how to display the email verification screen which informs the user that they need to go click the verification link in the email."
msgstr ""

#: docs/10.x/fortify.md:block 162 (paragraph)
msgid "All of Fortify's view's rendering logic may be customized using the appropriate methods available via the `Laravel\\Fortify\\Fortify` class. Typically, you should call this method from the `boot` method of your application's `App\\Providers\\FortifyServiceProvider` class:"
msgstr ""

#: docs/10.x/fortify.md:block 163 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::verifyEmailView(function () {\n"
"        return view('auth.verify-email');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 164 (paragraph)
msgid "Fortify will take care of defining the route that displays this view when a user is redirected to the `/email/verify` endpoint by Laravel's built-in `verified` middleware."
msgstr ""

#: docs/10.x/fortify.md:block 165 (paragraph)
msgid "Your `verify-email` template should include an informational message instructing the user to click the email verification link that was sent to their email address."
msgstr ""

#: docs/10.x/fortify.md:block 167 (header)
msgid "Resending Email Verification Links"
msgstr ""

#: docs/10.x/fortify.md:block 168 (paragraph)
msgid "If you wish, you may add a button to your application's `verify-email` template that triggers a POST request to the `/email/verification-notification` endpoint. When this endpoint receives a request, a new verification email link will be emailed to the user, allowing the user to get a new verification link if the previous one was accidentally deleted or lost."
msgstr ""

#: docs/10.x/fortify.md:block 169 (paragraph)
msgid "If the request to resend the verification link email was successful, Fortify will redirect the user back to the `/email/verify` endpoint with a `status` session variable, allowing you to display an informational message to the user informing them the operation was successful. If the request was an XHR request, a 202 HTTP response will be returned:"
msgstr ""

#: docs/10.x/fortify.md:block 170 (code)
msgid ""
"@if (session('status') == 'verification-link-sent')\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        A new email verification link has been emailed to you!\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/10.x/fortify.md:block 172 (header)
msgid "Protecting Routes"
msgstr ""

#: docs/10.x/fortify.md:block 173 (paragraph)
msgid "To specify that a route or group of routes requires that the user has verified their email address, you should attach Laravel's built-in `verified` middleware to the route. This middleware is registered within your application's `App\\Http\\Kernel` class:"
msgstr ""

#: docs/10.x/fortify.md:block 174 (code)
msgid ""
"Route::get('/dashboard', function () {\n"
"    // ...\n"
"})->middleware(['verified']);\n"
msgstr ""

#: docs/10.x/fortify.md:block 176 (header)
msgid "Password Confirmation"
msgstr ""

#: docs/10.x/fortify.md:block 177 (paragraph)
msgid "While building your application, you may occasionally have actions that should require the user to confirm their password before the action is performed. Typically, these routes are protected by Laravel's built-in `password.confirm` middleware."
msgstr ""

#: docs/10.x/fortify.md:block 178 (paragraph)
msgid "To begin implementing password confirmation functionality, we need to instruct Fortify how to return our application's \"password confirmation\" view. Remember, Fortify is a headless authentication library. If you would like a frontend implementation of Laravel's authentication features that are already completed for you, you should use an [application starter kit](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/10.x/fortify.md:block 180 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Fortify::confirmPasswordView(function () {\n"
"        return view('auth.confirm-password');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/fortify.md:block 181 (paragraph)
msgid "Fortify will take care of defining the `/user/confirm-password` endpoint that returns this view. Your `confirm-password` template should include a form that makes a POST request to the `/user/confirm-password` endpoint. The `/user/confirm-password` endpoint expects a `password` field that contains the user's current password."
msgstr ""

#: docs/10.x/fortify.md:block 182 (paragraph)
msgid "If the password matches the user's current password, Fortify will redirect the user to the route they were attempting to access. If the request was an XHR request, a 201 HTTP response will be returned."
msgstr ""

#: docs/10.x/fortify.md:block 183 (paragraph)
msgid "If the request was not successful, the user will be redirected back to the confirm password screen and the validation errors will be available to you via the shared `$errors` Blade template variable. Or, in the case of an XHR request, the validation errors will be returned with a 422 HTTP response."
msgstr ""

#: docs/8.x/fortify.md:block 7 (quote)
msgid "{tip} Remember, Fortify is a package that is meant to give you a head start implementing Laravel's authentication features. **You are not required to use it.** You are always free to manually interact with Laravel's authentication services by following the documentation available in the [authentication](/docs/{{version}}/authentication), [password reset](/docs/{{version}}/passwords), and [email verification](/docs/{{version}}/verification) documentation."
msgstr ""

#: docs/8.x/fortify.md:block 31 (paragraph)
msgid "This command will publish Fortify's actions to your `app/Actions` directory, which will be created if it does not exist. In addition, Fortify's configuration file and migrations will be published."
msgstr ""

#: docs/8.x/fortify.md:block 53 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::loginView(function () {\n"
"        return view('auth.login');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 61 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Hash;\n"
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::authenticateUsing(function (Request $request) {\n"
"        $user = User::where('email', $request->email)->first();\n"
"\n"
"        if ($user &&\n"
"            Hash::check($request->password, $user->password)) {\n"
"            return $user;\n"
"        }\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 75 (code)
msgid ""
"use Laravel\\Fortify\\Contracts\\LogoutResponse;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->instance(LogoutResponse::class, new class implements LogoutResponse {\n"
"        public function toResponse($request)\n"
"        {\n"
"            return redirect('/');\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 85 (paragraph)
msgid "To enable two factor authentication, your application should make a POST request to the `/user/two-factor-authentication` endpoint defined by Fortify. If the request is successful, the user will be redirected back to the previous URL and the `status` session variable will be set to `two-factor-authentication-enabled`. You may detect this `status` session variable within your templates to display the appropriate success message. If the request was an XHR request, `200` HTTP response will be returned:"
msgstr ""

#: docs/8.x/fortify.md:block 86 (code)
msgid ""
"@if (session('status') == 'two-factor-authentication-enabled')\n"
"    <div class=\"mb-4 font-medium text-sm text-green-600\">\n"
"        Two factor authentication has been enabled.\n"
"    </div>\n"
"@endif\n"
msgstr ""

#: docs/8.x/fortify.md:block 100 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::twoFactorChallengeView(function () {\n"
"        return view('auth.two-factor-challenge');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 111 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::registerView(function () {\n"
"        return view('auth.register');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 114 (paragraph)
msgid "If the registration attempt is successful, Fortify will redirect the user to the URI configured via the `home` configuration option within your application's `fortify` configuration file. If the login request was an XHR request, a 200 HTTP response will be returned."
msgstr ""

#: docs/8.x/fortify.md:block 125 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::requestPasswordResetLinkView(function () {\n"
"        return view('auth.forgot-password');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 131 (paragraph)
msgid "After being redirected back to the `/forgot-password` endpoint after a successful request, the `status` session variable may be used to display the status of the password reset link request attempt. The value of this session variable will match one of the translation strings defined within your application's `passwords` [language file](/docs/{{version}}/localization):"
msgstr ""

#: docs/8.x/fortify.md:block 138 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::resetPasswordView(function ($request) {\n"
"        return view('auth.reset-password', ['request' => $request]);\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 155 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::verifyEmailView(function () {\n"
"        return view('auth.verify-email');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/fortify.md:block 172 (code)
msgid ""
"use Laravel\\Fortify\\Fortify;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Fortify::confirmPasswordView(function () {\n"
"        return view('auth.confirm-password');\n"
"    });\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/master/fortify.md:block 75 (code)
msgid ""
"use Laravel\\Fortify\\Contracts\\LogoutResponse;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->app->instance(LogoutResponse::class, new class implements LogoutResponse {\n"
"        public function toResponse(Request $request): RedirectResponse\n"
"        {\n"
"            return redirect('/');\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""
