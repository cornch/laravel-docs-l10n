# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-09-13 00:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/master/artisan.md:1
#, markdown-text, no-wrap
msgid "Artisan Console"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Tinker (REPL)](#tinker)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Writing Commands](#writing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Generating Commands](#generating-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Command Structure](#command-structure)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Closure Commands](#closure-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Defining Input Expectations](#defining-input-expectations)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Arguments](#arguments)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Options](#options)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Input Arrays](#input-arrays)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Input Descriptions](#input-descriptions)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Command I/O](#command-io)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Retrieving Input](#retrieving-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Prompting For Input](#prompting-for-input)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Writing Output](#writing-output)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Registering Commands](#registering-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Programmatically Executing Commands](#programmatically-executing-commands)"
msgstr ""

#. type: Bullet: '    - '
#: docs/master/artisan.md:23
#, markdown-text
msgid ""
"[Calling Commands From Other "
"Commands](#calling-commands-from-other-commands)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Stub Customization](#stub-customization)"
msgstr ""

#. type: Bullet: '- '
#: docs/master/artisan.md:23
#, markdown-text
msgid "[Events](#events)"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:25
#, markdown-text, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:25
#, markdown-text, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:28
#, markdown-text
msgid ""
"Artisan is the command line interface included with Laravel. Artisan exists "
"at the root of your application as the `artisan` script and provides a "
"number of helpful commands that can assist you while you build your "
"application. To view a list of all available Artisan commands, you may use "
"the `list` command:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:30
#, markdown-text, no-wrap
msgid "    php artisan list\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:32
#, markdown-text
msgid ""
"Every command also includes a \"help\" screen which displays and describes "
"the command's available arguments and options. To view a help screen, "
"precede the name of the command with `help`:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:34
#, markdown-text, no-wrap
msgid "    php artisan help migrate\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:36
#, markdown-text, no-wrap
msgid "<a name=\"laravel-sail\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:36
#, markdown-text, no-wrap
msgid "Laravel Sail"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:39
#, markdown-text
msgid ""
"If you are using [Laravel Sail](/docs/{{version}}/sail) as your local "
"development environment, remember to use the `sail` command line to invoke "
"Artisan commands. Sail will execute your Artisan commands within your "
"application's Docker containers:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:41
#, markdown-text, no-wrap
msgid "    ./sail artisan list\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:43
#, markdown-text, no-wrap
msgid "<a name=\"tinker\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:43
#, markdown-text, no-wrap
msgid "Tinker (REPL)"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:46
#, markdown-text
msgid ""
"Laravel Tinker is a powerful REPL for the Laravel framework, powered by the "
"[PsySH](https://github.com/bobthecow/psysh) package."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:48
#, markdown-text, no-wrap
msgid "<a name=\"installation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:48
#, markdown-text, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:51
#, markdown-text
msgid ""
"All Laravel applications include Tinker by default. However, you may install "
"Tinker using Composer if you have previously removed it from your "
"application:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:53
#, markdown-text, no-wrap
msgid "    composer require laravel/tinker\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:55
#, markdown-text, no-wrap
msgid ""
"> {tip} Looking for a graphical UI for interacting with your Laravel "
"application? Check out [Tinkerwell](https://tinkerwell.app)!\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:57
#, markdown-text, no-wrap
msgid "<a name=\"usage\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:57
#, markdown-text, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:60
#, markdown-text
msgid ""
"Tinker allows you to interact with your entire Laravel application on the "
"command line, including your Eloquent models, jobs, events, and more. To "
"enter the Tinker environment, run the `tinker` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:62
#, markdown-text, no-wrap
msgid "    php artisan tinker\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:64
#, markdown-text
msgid ""
"You can publish Tinker's configuration file using the `vendor:publish` "
"command:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:66
#, markdown-text, no-wrap
msgid ""
"    php artisan vendor:publish "
"--provider=\"Laravel\\Tinker\\TinkerServiceProvider\"\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:68
#, markdown-text, no-wrap
msgid ""
"> {note} The `dispatch` helper function and `dispatch` method on the "
"`Dispatchable` class depends on garbage collection to place the job on the "
"queue. Therefore, when using tinker, you should use `Bus::dispatch` or "
"`Queue::push` to dispatch jobs.\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:70
#, markdown-text, no-wrap
msgid "<a name=\"command-allow-list\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:70
#, markdown-text, no-wrap
msgid "Command Allow List"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:73
#, markdown-text
msgid ""
"Tinker utilizes an \"allow\" list to determine which Artisan commands are "
"allowed to be run within its shell. By default, you may run the "
"`clear-compiled`, `down`, `env`, `inspire`, `migrate`, `optimize`, and `up` "
"commands. If you would like to allow more commands you may add them to the "
"`commands` array in your `tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:77
#, markdown-text, no-wrap
msgid ""
"    'commands' => [\n"
"        // App\\Console\\Commands\\ExampleCommand::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:79
#, markdown-text, no-wrap
msgid "<a name=\"classes-that-should-not-be-aliased\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:79
#, markdown-text, no-wrap
msgid "Classes That Should Not Be Aliased"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:82
#, markdown-text
msgid ""
"Typically, Tinker automatically aliases classes as you interact with them in "
"Tinker. However, you may wish to never alias some classes. You may "
"accomplish this by listing the classes in the `dont_alias` array of your "
"`tinker.php` configuration file:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:86
#, markdown-text, no-wrap
msgid ""
"    'dont_alias' => [\n"
"        App\\Models\\User::class,\n"
"    ],\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:88
#, markdown-text, no-wrap
msgid "<a name=\"writing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:88
#, markdown-text, no-wrap
msgid "Writing Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:91
#, markdown-text
msgid ""
"In addition to the commands provided with Artisan, you may build your own "
"custom commands. Commands are typically stored in the `app/Console/Commands` "
"directory; however, you are free to choose your own storage location as long "
"as your commands can be loaded by Composer."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:93
#, markdown-text, no-wrap
msgid "<a name=\"generating-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:93
#, markdown-text, no-wrap
msgid "Generating Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:96
#, markdown-text
msgid ""
"To create a new command, you may use the `make:command` Artisan "
"command. This command will create a new command class in the "
"`app/Console/Commands` directory. Don't worry if this directory does not "
"exist in your application - it will be created the first time you run the "
"`make:command` Artisan command:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:98
#, markdown-text, no-wrap
msgid "    php artisan make:command SendEmails\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:100
#, markdown-text, no-wrap
msgid "<a name=\"command-structure\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:100
#, markdown-text, no-wrap
msgid "Command Structure"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:103
#, markdown-text
msgid ""
"After generating your command, you should define appropriate values for the "
"`signature` and `description` properties of the class. These properties will "
"be used when displaying your command on the `list` screen. The `signature` "
"property also allows you to define [your command's input "
"expectations](#defining-input-expectations). The `handle` method will be "
"called when your command is executed. You may place your command logic in "
"this method."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:105
#, markdown-text
msgid ""
"Let's take a look at an example command. Note that we are able to request "
"any dependencies we need via the command's `handle` method. The Laravel "
"[service container](/docs/{{version}}/container) will automatically inject "
"all dependencies that are type-hinted in this method's signature:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:107
#, markdown-text, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:109
#, markdown-text, no-wrap
msgid "    namespace App\\Console\\Commands;\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:113
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
"    use Illuminate\\Console\\Command;\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:122
#, markdown-text, no-wrap
msgid ""
"    class SendEmails extends Command\n"
"    {\n"
"        /**\n"
"         * The name and signature of the console command.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:129
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * The console command description.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        protected $description = 'Send a marketing email to a user';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:139
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Create a new command instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            parent::__construct();\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:151
#, markdown-text, no-wrap
msgid ""
"        /**\n"
"         * Execute the console command.\n"
"         *\n"
"         * @param  \\App\\Support\\DripEmailer  $drip\n"
"         * @return mixed\n"
"         */\n"
"        public function handle(DripEmailer $drip)\n"
"        {\n"
"            $drip->send(User::find($this->argument('user')));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:153
#, markdown-text, no-wrap
msgid ""
"> {tip} For greater code reuse, it is good practice to keep your console "
"commands light and let them defer to application services to accomplish "
"their tasks. In the example above, note that we inject a service class to do "
"the \"heavy lifting\" of sending the e-mails.\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:155
#, markdown-text, no-wrap
msgid "<a name=\"closure-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:155
#, markdown-text, no-wrap
msgid "Closure Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:158
#, markdown-text
msgid ""
"Closure based commands provide an alternative to defining console commands "
"as classes. In the same way that route closures are an alternative to "
"controllers, think of command closures as an alternative to command "
"classes. Within the `commands` method of your `app/Console/Kernel.php` file, "
"Laravel loads the `routes/console.php` file:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:168
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Register the closure based commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        require base_path('routes/console.php');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:170
#, markdown-text
msgid ""
"Even though this file does not define HTTP routes, it defines console based "
"entry points (routes) into your application. Within this file, you may "
"define all of your closure based console commands using the "
"`Artisan::command` method. The `command` method accepts two arguments: the "
"[command signature](#defining-input-expectations) and a closure which "
"receives the command's arguments and options:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:174
#, markdown-text, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function ($user) {\n"
"        $this->info(\"Sending email to: {$user}!\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:176
#, markdown-text
msgid ""
"The closure is bound to the underlying command instance, so you have full "
"access to all of the helper methods you would typically be able to access on "
"a full command class."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:178
#, markdown-text, no-wrap
msgid "<a name=\"type-hinting-dependencies\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:178
#, markdown-text, no-wrap
msgid "Type-Hinting Dependencies"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:181
#, markdown-text
msgid ""
"In addition to receiving your command's arguments and options, command "
"closures may also type-hint additional dependencies that you would like "
"resolved out of the [service container](/docs/{{version}}/container):"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:184
#, markdown-text, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use App\\Support\\DripEmailer;\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:188
#, markdown-text, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function (DripEmailer $drip, $user) "
"{\n"
"        $drip->send(User::find($user));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:190
#, markdown-text, no-wrap
msgid "<a name=\"closure-command-descriptions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:190
#, markdown-text, no-wrap
msgid "Closure Command Descriptions"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:193
#, markdown-text
msgid ""
"When defining a closure based command, you may use the `purpose` method to "
"add a description to the command. This description will be displayed when "
"you run the `php artisan list` or `php artisan help` commands:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:197
#, markdown-text, no-wrap
msgid ""
"    Artisan::command('mail:send {user}', function ($user) {\n"
"        // ...\n"
"    })->purpose('Send a marketing email to a user');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:199
#, markdown-text, no-wrap
msgid "<a name=\"defining-input-expectations\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:199
#, markdown-text, no-wrap
msgid "Defining Input Expectations"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:202
#, markdown-text
msgid ""
"When writing console commands, it is common to gather input from the user "
"through arguments or options. Laravel makes it very convenient to define the "
"input you expect from the user using the `signature` property on your "
"commands. The `signature` property allows you to define the name, arguments, "
"and options for the command in a single, expressive, route-like syntax."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:204
#, markdown-text, no-wrap
msgid "<a name=\"arguments\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:204
#, markdown-text, no-wrap
msgid "Arguments"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:207
#, markdown-text
msgid ""
"All user supplied arguments and options are wrapped in curly braces. In the "
"following example, the command defines one required argument: `user`:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:214
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user}';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:216
#, markdown-text
msgid "You may also make arguments optional or define default values for arguments:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:219
#, markdown-text, no-wrap
msgid ""
"    // Optional argument...\n"
"    mail:send {user?}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:222
#, markdown-text, no-wrap
msgid ""
"    // Optional argument with default value...\n"
"    mail:send {user=foo}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:224
#, markdown-text, no-wrap
msgid "<a name=\"options\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:224
#, markdown-text, no-wrap
msgid "Options"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:227
#, markdown-text
msgid ""
"Options, like arguments, are another form of user input. Options are "
"prefixed by two hyphens (`--`) when they are provided via the command "
"line. There are two types of options: those that receive a value and those "
"that don't. Options that don't receive a value serve as a boolean "
"\"switch\". Let's take a look at an example of this type of option:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:234
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue}';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:236
#, markdown-text
msgid ""
"In this example, the `--queue` switch may be specified when calling the "
"Artisan command. If the `--queue` switch is passed, the value of the option "
"will be `true`. Otherwise, the value will be `false`:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:238
#, markdown-text, no-wrap
msgid "    php artisan mail:send 1 --queue\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:240
#, markdown-text, no-wrap
msgid "<a name=\"options-with-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:240
#, markdown-text, no-wrap
msgid "Options With Values"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:243
#, markdown-text
msgid ""
"Next, let's take a look at an option that expects a value. If the user must "
"specify a value for an option, you should suffix the option name with a `=` "
"sign:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:250
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send {user} {--queue=}';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:252
#, markdown-text
msgid ""
"In this example, the user may pass a value for the option like so. If the "
"option is not specified when invoking the command, its value will be `null`:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:254
#, markdown-text, no-wrap
msgid "    php artisan mail:send 1 --queue=default\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:256
#, markdown-text
msgid ""
"You may assign default values to options by specifying the default value "
"after the option name. If no option value is passed by the user, the default "
"value will be used:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:258
#, markdown-text, no-wrap
msgid "    mail:send {user} {--queue=default}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:260
#, markdown-text, no-wrap
msgid "<a name=\"option-shortcuts\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:260
#, markdown-text, no-wrap
msgid "Option Shortcuts"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:263
#, markdown-text
msgid ""
"To assign a shortcut when defining an option, you may specify it before the "
"option name and use the `|` character as a delimiter to separate the "
"shortcut from the full option name:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:265
#, markdown-text, no-wrap
msgid "    mail:send {user} {--Q|queue}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:267
#, markdown-text, no-wrap
msgid "<a name=\"input-arrays\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:267
#, markdown-text, no-wrap
msgid "Input Arrays"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:270
#, markdown-text
msgid ""
"If you would like to define arguments or options to expect multiple input "
"values, you may use the `*` character. First, let's take a look at an "
"example that specifies such an argument:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:272
#, markdown-text, no-wrap
msgid "    mail:send {user*}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:274
#, markdown-text
msgid ""
"When calling this method, the `user` arguments may be passed in order to the "
"command line. For example, the following command will set the value of "
"`user` to an array with `foo` and `bar` as its values:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:276
#, markdown-text, no-wrap
msgid "    php artisan mail:send foo bar\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:278
#, markdown-text, no-wrap
msgid "<a name=\"option-arrays\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:278
#, markdown-text, no-wrap
msgid "Option Arrays"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:281
#, markdown-text
msgid ""
"When defining an option that expects multiple input values, each option "
"value passed to the command should be prefixed with the option name:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:283
#, markdown-text, no-wrap
msgid "    mail:send {user} {--id=*}\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:285
#, markdown-text, no-wrap
msgid "    php artisan mail:send --id=1 --id=2\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:287
#, markdown-text, no-wrap
msgid "<a name=\"input-descriptions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:287
#, markdown-text, no-wrap
msgid "Input Descriptions"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:290
#, markdown-text
msgid ""
"You may assign descriptions to input arguments and options by separating the "
"argument name from the description using a colon. If you need a little extra "
"room to define your command, feel free to spread the definition across "
"multiple lines:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:299
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'mail:send\n"
"                            {user : The ID of the user}\n"
"                            {--queue= : Whether the job should be "
"queued}';\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:301
#, markdown-text, no-wrap
msgid "<a name=\"command-io\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:301
#, markdown-text, no-wrap
msgid "Command I/O"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:304
#, markdown-text, no-wrap
msgid "<a name=\"retrieving-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:304
#, markdown-text, no-wrap
msgid "Retrieving Input"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:307
#, markdown-text
msgid ""
"While your command is executing, you will likely need to access the values "
"for the arguments and options accepted by your command. To do so, you may "
"use the `argument` and `option` methods. If an argument or option does not "
"exist, `null` will be returned:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:316
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return int\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $userId = $this->argument('user');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:319 docs/master/artisan.md:579
#, markdown-text, no-wrap
msgid ""
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:321
#, markdown-text
msgid ""
"If you need to retrieve all of the arguments as an `array`, call the "
"`arguments` method:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:323
#, markdown-text, no-wrap
msgid "    $arguments = $this->arguments();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:325
#, markdown-text
msgid ""
"Options may be retrieved just as easily as arguments using the `option` "
"method. To retrieve all of the options as an array, call the `options` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:328
#, markdown-text, no-wrap
msgid ""
"    // Retrieve a specific option...\n"
"    $queueName = $this->option('queue');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:331
#, markdown-text, no-wrap
msgid ""
"    // Retrieve all options as an array...\n"
"    $options = $this->options();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:333
#, markdown-text, no-wrap
msgid "<a name=\"prompting-for-input\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:333
#, markdown-text, no-wrap
msgid "Prompting For Input"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:336
#, markdown-text
msgid ""
"In addition to displaying output, you may also ask the user to provide input "
"during the execution of your command. The `ask` method will prompt the user "
"with the given question, accept their input, and then return the user's "
"input back to your command:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:346
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $name = $this->ask('What is your name?');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:348
#, markdown-text
msgid ""
"The `secret` method is similar to `ask`, but the user's input will not be "
"visible to them as they type in the console. This method is useful when "
"asking for sensitive information such as passwords:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:350
#, markdown-text, no-wrap
msgid "    $password = $this->secret('What is the password?');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:352
#, markdown-text, no-wrap
msgid "<a name=\"asking-for-confirmation\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:352
#, markdown-text, no-wrap
msgid "Asking For Confirmation"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:355
#, markdown-text
msgid ""
"If you need to ask the user for a simple \"yes or no\" confirmation, you may "
"use the `confirm` method. By default, this method will return "
"`false`. However, if the user enters `y` or `yes` in response to the prompt, "
"the method will return `true`."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:359
#, markdown-text, no-wrap
msgid ""
"    if ($this->confirm('Do you wish to continue?')) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:361
#, markdown-text
msgid ""
"If necessary, you may specify that the confirmation prompt should return "
"`true` by default by passing `true` as the second argument to the `confirm` "
"method:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:365
#, markdown-text, no-wrap
msgid ""
"    if ($this->confirm('Do you wish to continue?', true)) {\n"
"        //\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:367
#, markdown-text, no-wrap
msgid "<a name=\"auto-completion\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:367
#, markdown-text, no-wrap
msgid "Auto-Completion"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:370
#, markdown-text
msgid ""
"The `anticipate` method can be used to provide auto-completion for possible "
"choices. The user can still provide any answer, regardless of the "
"auto-completion hints:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:372
#, markdown-text, no-wrap
msgid "    $name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:374
#, markdown-text
msgid ""
"Alternatively, you may pass a closure as the second argument to the "
"`anticipate` method. The closure will be called each time the user types an "
"input character. The closure should accept a string parameter containing the "
"user's input so far, and return an array of options for auto-completion:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:378
#, markdown-text, no-wrap
msgid ""
"    $name = $this->anticipate('What is your address?', function ($input) {\n"
"        // Return auto-completion options...\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:380
#, markdown-text, no-wrap
msgid "<a name=\"multiple-choice-questions\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:380
#, markdown-text, no-wrap
msgid "Multiple Choice Questions"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:383
#, markdown-text
msgid ""
"If you need to give the user a predefined set of choices when asking a "
"question, you may use the `choice` method. You may set the array index of "
"the default value to be returned if no option is chosen by passing the index "
"as the third argument to the method:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:389
#, markdown-text, no-wrap
msgid ""
"    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:391
#, markdown-text
msgid ""
"In addition, the `choice` method accepts optional fourth and fifth arguments "
"for determining the maximum number of attempts to select a valid response "
"and whether multiple selections are permitted:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:399
#, markdown-text, no-wrap
msgid ""
"    $name = $this->choice(\n"
"        'What is your name?',\n"
"        ['Taylor', 'Dayle'],\n"
"        $defaultIndex,\n"
"        $maxAttempts = null,\n"
"        $allowMultipleSelections = false\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:401
#, markdown-text, no-wrap
msgid "<a name=\"writing-output\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:401
#, markdown-text, no-wrap
msgid "Writing Output"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:404
#, markdown-text
msgid ""
"To send output to the console, you may use the `line`, `info`, `comment`, "
"`question` and `error` methods. Each of these methods will use appropriate "
"ANSI colors for their purpose. For example, let's display some general "
"information to the user. Typically, the `info` method will display in the "
"console as green colored text:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:413
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:416
#, markdown-text, no-wrap
msgid ""
"        $this->info('The command was successful!');\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:418
#, markdown-text
msgid ""
"To display an error message, use the `error` method. Error message text is "
"typically displayed in red:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:420
#, markdown-text, no-wrap
msgid "    $this->error('Something went wrong!');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:422
#, markdown-text
msgid "You may use the `line` method to display plain, uncolored text:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:424
#, markdown-text, no-wrap
msgid "    $this->line('Display this on the screen');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:426
#, markdown-text
msgid "You may use the `newLine` method to display a blank line:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:429
#, markdown-text, no-wrap
msgid ""
"    // Write a single blank line...\n"
"    $this->newLine();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:432
#, markdown-text, no-wrap
msgid ""
"    // Write three blank lines...\n"
"    $this->newLine(3);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:434
#, markdown-text, no-wrap
msgid "<a name=\"tables\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:434
#, markdown-text, no-wrap
msgid "Tables"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:438
#, markdown-text
msgid ""
"The `table` method makes it easy to correctly format multiple rows / columns "
"of data. All you need to do is provide the column names and the data for the "
"table and Laravel will automatically calculate the appropriate width and "
"height of the table for you:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:440 docs/master/artisan.md:452
#, markdown-text, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:445
#, markdown-text, no-wrap
msgid ""
"    $this->table(\n"
"        ['Name', 'Email'],\n"
"        User::all(['name', 'email'])->toArray()\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:447
#, markdown-text, no-wrap
msgid "<a name=\"progress-bars\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:447
#, markdown-text, no-wrap
msgid "Progress Bars"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:450
#, markdown-text
msgid ""
"For long running tasks, it can be helpful to show a progress bar that "
"informs users how complete the task is. Using the `withProgressBar` method, "
"Laravel will display a progress bar and advance its progress for each "
"iteration over a given iterable value:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:456
#, markdown-text, no-wrap
msgid ""
"    $users = $this->withProgressBar(User::all(), function ($user) {\n"
"        $this->performTask($user);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:458
#, markdown-text
msgid ""
"Sometimes, you may need more manual control over how a progress bar is "
"advanced. First, define the total number of steps the process will iterate "
"through. Then, advance the progress bar after processing each item:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:460
#, markdown-text, no-wrap
msgid "    $users = App\\Models\\User::all();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:462
#, markdown-text, no-wrap
msgid "    $bar = $this->output->createProgressBar(count($users));\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:464
#, markdown-text, no-wrap
msgid "    $bar->start();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:467
#, markdown-text, no-wrap
msgid ""
"    foreach ($users as $user) {\n"
"        $this->performTask($user);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:470
#, markdown-text, no-wrap
msgid ""
"        $bar->advance();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:472
#, markdown-text, no-wrap
msgid "    $bar->finish();\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:474
#, markdown-text, no-wrap
msgid ""
"> {tip} For more advanced options, check out the [Symfony Progress Bar "
"component "
"documentation](https://symfony.com/doc/current/components/console/helpers/progressbar.html).\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:476
#, markdown-text, no-wrap
msgid "<a name=\"registering-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:476
#, markdown-text, no-wrap
msgid "Registering Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:479
#, markdown-text
msgid ""
"All of your console commands are registered within your application's "
"`App\\Console\\Kernel` class, which is your application's \"console "
"kernel\". Within the `commands` method of this class, you will see a call to "
"the kernel's `load` method. The `load` method will scan the "
"`app/Console/Commands` directory and automatically register each command it "
"contains with Artisan. You are even free to make additional calls to the "
"`load` method to scan other directories for Artisan commands:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:489
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Register the commands for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function commands()\n"
"    {\n"
"        $this->load(__DIR__.'/Commands');\n"
"        $this->load(__DIR__.'/../Domain/Orders/Commands');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:492
#, markdown-text, no-wrap
msgid ""
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:494
#, markdown-text
msgid ""
"If necessary, you may manually register commands by adding the command's "
"class name to the `$commands` property of your `App\\Console\\Kernel` "
"class. When Artisan boots, all the commands listed in this property will be "
"resolved by the [service container](/docs/{{version}}/container) and "
"registered with Artisan:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:498
#, markdown-text, no-wrap
msgid ""
"    protected $commands = [\n"
"        Commands\\SendEmails::class\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:500
#, markdown-text, no-wrap
msgid "<a name=\"programmatically-executing-commands\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:500
#, markdown-text, no-wrap
msgid "Programmatically Executing Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:503
#, markdown-text
msgid ""
"Sometimes you may wish to execute an Artisan command outside of the CLI. For "
"example, you may wish to execute an Artisan command from a route or "
"controller. You may use the `call` method on the `Artisan` facade to "
"accomplish this. The `call` method accepts either the command's signature "
"name or class name as its first argument, and an array of command parameters "
"as the second argument. The exit code will be returned:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:505 docs/master/artisan.md:524
#: docs/master/artisan.md:546
#, markdown-text, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Artisan;\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:510
#, markdown-text, no-wrap
msgid ""
"    Route::post('/user/{user}/mail', function ($user) {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:513 docs/master/artisan.md:554
#, markdown-text, no-wrap
msgid ""
"        //\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:515
#, markdown-text
msgid ""
"Alternatively, you may pass the entire Artisan command to the `call` method "
"as a string:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:517
#, markdown-text, no-wrap
msgid "    Artisan::call('mail:send 1 --queue=default');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:519
#, markdown-text, no-wrap
msgid "<a name=\"passing-array-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:519
#, markdown-text, no-wrap
msgid "Passing Array Values"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:522
#, markdown-text
msgid ""
"If your command defines an option that accepts an array, you may pass an "
"array of values to that option:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:530
#, markdown-text, no-wrap
msgid ""
"    Route::post('/mail', function () {\n"
"        $exitCode = Artisan::call('mail:send', [\n"
"            '--id' => [5, 13]\n"
"        ]);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:532
#, markdown-text, no-wrap
msgid "<a name=\"passing-boolean-values\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:532
#, markdown-text, no-wrap
msgid "Passing Boolean Values"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:535
#, markdown-text
msgid ""
"If you need to specify the value of an option that does not accept string "
"values, such as the `--force` flag on the `migrate:refresh` command, you "
"should pass `true` or `false` as the value of the option:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:539
#, markdown-text, no-wrap
msgid ""
"    $exitCode = Artisan::call('migrate:refresh', [\n"
"        '--force' => true,\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:541
#, markdown-text, no-wrap
msgid "<a name=\"queueing-artisan-commands\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/master/artisan.md:541
#, markdown-text, no-wrap
msgid "Queueing Artisan Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:544
#, markdown-text
msgid ""
"Using the `queue` method on the `Artisan` facade, you may even queue Artisan "
"commands so they are processed in the background by your [queue "
"workers](/docs/{{version}}/queues). Before using this method, make sure you "
"have configured your queue and are running a queue listener:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:551
#, markdown-text, no-wrap
msgid ""
"    Route::post('/user/{user}/mail', function ($user) {\n"
"        Artisan::queue('mail:send', [\n"
"            'user' => $user, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:556
#, markdown-text
msgid ""
"Using the `onConnection` and `onQueue` methods, you may specify the "
"connection or queue the Artisan command should be dispatched to:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:560
#, markdown-text, no-wrap
msgid ""
"    Artisan::queue('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ])->onConnection('redis')->onQueue('commands');\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:562
#, markdown-text, no-wrap
msgid "<a name=\"calling-commands-from-other-commands\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/master/artisan.md:562
#, markdown-text, no-wrap
msgid "Calling Commands From Other Commands"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:565
#, markdown-text
msgid ""
"Sometimes you may wish to call other commands from an existing Artisan "
"command. You may do so using the `call` method. This `call` method accepts "
"the command name and an array of command arguments / options:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:576
#, markdown-text, no-wrap
msgid ""
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        $this->call('mail:send', [\n"
"            'user' => 1, '--queue' => 'default'\n"
"        ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:581
#, markdown-text
msgid ""
"If you would like to call another console command and suppress all of its "
"output, you may use the `callSilently` method. The `callSilently` method has "
"the same signature as the `call` method:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:585
#, markdown-text, no-wrap
msgid ""
"    $this->callSilently('mail:send', [\n"
"        'user' => 1, '--queue' => 'default'\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:587
#, markdown-text, no-wrap
msgid "<a name=\"stub-customization\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:587
#, markdown-text, no-wrap
msgid "Stub Customization"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:590
#, markdown-text
msgid ""
"The Artisan console's `make` commands are used to create a variety of "
"classes, such as controllers, jobs, migrations, and tests. These classes are "
"generated using \"stub\" files that are populated with values based on your "
"input. However, you may want to to make small changes to files generated by "
"Artisan. To accomplish this, you may use the `stub:publish` command to "
"publish the most common stubs to your application so that you can customize "
"them:"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:592
#, markdown-text, no-wrap
msgid "    php artisan stub:publish\n"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:594
#, markdown-text
msgid ""
"The published stubs will be located within a `stubs` directory in the root "
"of your application. Any changes you make to these stubs will be reflected "
"when you generate their corresponding classes using Artisan's `make` "
"commands."
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:596
#, markdown-text, no-wrap
msgid "<a name=\"events\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/master/artisan.md:596
#, markdown-text, no-wrap
msgid "Events"
msgstr ""

#. type: Plain text
#: docs/master/artisan.md:598
#, markdown-text
msgid ""
"Artisan dispatches three events when running commands: "
"`Illuminate\\Console\\Events\\ArtisanStarting`, "
"`Illuminate\\Console\\Events\\CommandStarting`, and "
"`Illuminate\\Console\\Events\\CommandFinished`. The `ArtisanStarting` event "
"is dispatched immediately when Artisan starts running. Next, the "
"`CommandStarting` event is dispatched immediately before a command "
"runs. Finally, the `CommandFinished` event is dispatched once a command "
"finishes executing."
msgstr ""
