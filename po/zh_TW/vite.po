msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/vite.pot\n"
"X-Crowdin-File-ID: 180\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-01-25 18:14\n"

#: docs/9.x/vite.md:block 1 (header)
msgid "Asset Bundling (Vite)"
msgstr "打包素材 (Vite)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installation & Setup](#installation)"
msgstr "[安裝與設定](#installation)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installing Node](#installing-node)"
msgstr "[安裝 Node](#installing-node)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Installing Vite And The Laravel Plugin](#installing-vite-and-laravel-plugin)"
msgstr "[安裝 Vite 與 Laravel 外掛](#installing-vite-and-laravel-plugin)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Configuring Vite](#configuring-vite)"
msgstr "[設定 Vite](#configuring-vite)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Loading Your Scripts And Styles](#loading-your-scripts-and-styles)"
msgstr "[載入 Script 與 CSS](#loading-your-scripts-and-styles)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Running Vite](#running-vite)"
msgstr "[執行 Vite](#running-vite)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With JavaScript](#working-with-scripts)"
msgstr "[處理 JavaScript](#working-with-scripts)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Aliases](#aliases)"
msgstr "[別名](#aliases)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Vue](#vue)"
msgstr "[Vue](#vue)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[React](#react)"
msgstr "[React](#react)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Inertia](#inertia)"
msgstr "[Inertia](#inertia)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[URL Processing](#url-processing)"
msgstr "[URL 的處理](#url-processing)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With Stylesheets](#working-with-stylesheets)"
msgstr "[處理 CSS](#working-with-stylesheets)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Working With Blade & Routes](#working-with-blade-and-routes)"
msgstr "[處理 Blade 與 Route](#working-with-blade-and-routes)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Processing Static Assets With Vite](#blade-processing-static-assets)"
msgstr "[使用 Vite 處理靜態素材](#blade-processing-static-assets)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Refreshing On Save](#blade-refreshing-on-save)"
msgstr "[保存時重新整理](#blade-refreshing-on-save)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Aliases](#blade-aliases)"
msgstr "[別名](#blade-aliases)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Custom Base URLs](#custom-base-urls)"
msgstr "[自定 Base URL](#custom-base-urls)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Environment Variables](#environment-variables)"
msgstr "[環境變數](#environment-variables)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Disabling Vite In Tests](#disabling-vite-in-tests)"
msgstr "[在測試中禁用 Vite](#disabling-vite-in-tests)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Server-Side Rendering (SSR)](#ssr)"
msgstr "[伺服器端轉譯 (SSR)](#ssr)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Script & Style Tag Attributes](#script-and-style-attributes)"
msgstr "[Script 與 Style 標籤的屬性](#script-and-style-attributes)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Content Security Policy (CSP) Nonce](#content-security-policy-csp-nonce)"
msgstr "[Content Security Policy (CSP) Nonce](#content-security-policy-csp-nonce)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Subresource Integrity (SRI)](#subresource-integrity-sri)"
msgstr "[Subresource Integrity (SRI)](#subresource-integrity-sri)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Arbitrary Attributes](#arbitrary-attributes)"
msgstr "[任意屬性](#arbitrary-attributes)"

#: docs/9.x/vite.md:block 2 (unordered list)
msgid "[Advanced Customization](#advanced-customization)"
msgstr "[進階客製化](#advanced-customization)"

#: docs/9.x/vite.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/9.x/vite.md:block 5 (paragraph)
msgid "[Vite](https://vitejs.dev) is a modern frontend build tool that provides an extremely fast development environment and bundles your code for production. When building applications with Laravel, you will typically use Vite to bundle your application's CSS and JavaScript files into production ready assets."
msgstr "[Vite](https://vitejs.dev) 是現代化的前端建置工具，提供快速的開發環境，並可快速為正式環境打包程式碼。在使用 Laravel 製作程式時，我們通常會用 Vite 來將專案的 CSS 與 JavaScript 檔案打包成可在正式環境使用的資源。"

#: docs/9.x/vite.md:block 6 (paragraph)
msgid "Laravel integrates seamlessly with Vite by providing an official plugin and Blade directive to load your assets for development and production."
msgstr "Laravel 與 Vite 進行了無縫整合，並提供了官方的外掛程式以及 Blade 指示詞來讓在開發環境與正式環境上載入資源。"

#: docs/9.x/vite.md:block 7 (quote)
msgid "**Note** Are you running Laravel Mix? Vite has replaced Laravel Mix in new Laravel installations. For Mix documentation, please visit the [Laravel Mix](https://laravel-mix.com/) website. If you would like to switch to Vite, please see our [migration guide](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite)."
msgstr "**Note** 已經在使用 Laravel Mix 了嗎？在新安裝的 Laravel 中，Vite 已經取代了 Laravel Mix。若要瀏覽 Mix 的說明文件，請瀏覽 [Laravel Mix 網站](https://laravel-mix.com/)。若要切換至 Vite，請檢視我們的 [Vite 遷移指南](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite)。"

#: docs/9.x/vite.md:block 9 (header)
msgid "Choosing Between Vite And Laravel Mix"
msgstr "該選擇 Vite 還是 Laravel Mix"

#: docs/9.x/vite.md:block 10 (paragraph)
msgid "Before transitioning to Vite, new Laravel applications utilized [Mix](https://laravel-mix.com/), which is powered by [webpack](https://webpack.js.org/), when bundling assets. Vite focuses on providing a faster and more productive experience when building rich JavaScript applications. If you are developing a Single Page Application (SPA), including those developed with tools like [Inertia](https://inertiajs.com), Vite will be the perfect fit."
msgstr "在改用 Vite 前，新的 Laravel 專案使用的都是 [Mix](https://laravel-mix.com/)。Mix 在打包資源時使用的是 [webpack](https://webpack.js.org/)。Vite 則重點在為大量使用 JavaScript 的專案提供更快速更有生產力的環境。若要開發的專案有使用 SPA  (單頁應用程式，Single Page Application)，甚至可能還是使用了 [Inertia](https://inertiajs.com) 等工具來開發時，則最適合使用 Vite。"

#: docs/9.x/vite.md:block 11 (paragraph)
msgid "Vite also works well with traditional server-side rendered applications with JavaScript \"sprinkles\", including those using [Livewire](https://laravel-livewire.com). However, it lacks some features that Laravel Mix supports, such as the ability to copy arbitrary assets into the build that are not referenced directly in your JavaScript application."
msgstr "若在開發的專案是一些只使用 JavaScript 來「點綴」的傳統伺服器端轉譯的專案，或是使用 [Livewire](https://laravel-livewire.com) 時，也可以使用 Vite。不過，有一些功能是只有 Laravel Mix 支援而 Vite 不支援的，例如將一些資源直接複製到建置結果中，並且不直接在 JavaScript 程式中參照這些資源。"

#: docs/9.x/vite.md:block 13 (header)
msgid "Migrating Back To Mix"
msgstr "遷移回 Mix"

#: docs/9.x/vite.md:block 14 (paragraph)
msgid "Have you started a new Laravel application using our Vite scaffolding but need to move back to Laravel Mix and webpack? No problem. Please consult our [official guide on migrating from Vite to Mix](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-vite-to-laravel-mix)."
msgstr "剛開始建立新 Laravel 專案，但用到了 Vite Scaffolding 而需要遷移回 Laravel Mix 與 Webpack 嗎？沒問題。請參考我們的[官方 Vite 至 Mix 遷移指南 (英語)](https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-vite-to-laravel-mix)。"

#: docs/9.x/vite.md:block 16 (header)
msgid "Installation & Setup"
msgstr "安裝與設定"

#: docs/9.x/vite.md:block 17 (quote)
msgid "**Note** The following documentation discusses how to manually install and configure the Laravel Vite plugin. However, Laravel's [starter kits](/docs/{{version}}/starter-kits) already include all of this scaffolding and are the fastest way to get started with Laravel and Vite."
msgstr "**注意** 下列文件討論的是如何手動安裝與設定 Laravel Vite 外掛。不過，Laravel 的[入門套件](/docs/{{version}}/starter-kits)中已經包含了所有的 Vite Scaffolding。這些入門套件是要開始使用 Laravel 與 Vite 最快的方法。"

#: docs/9.x/vite.md:block 19 (header)
msgid "Installing Node"
msgstr "安裝 Node"

#: docs/9.x/vite.md:block 20 (paragraph)
msgid "You must ensure that Node.js (16+) and NPM are installed before running Vite and the Laravel plugin:"
msgstr "請確定有安裝 Node.js (16 版以上)與 NPM，才能開始執行 Vite 與 Laravel 的外掛："

#: docs/9.x/vite.md:block 21 (code)
msgid "node -v\n"
"npm -v\n"
msgstr "node -v\n"
"npm -v\n"

#: docs/9.x/vite.md:block 22 (paragraph)
msgid "You can easily install the latest version of Node and NPM using simple graphical installers from [the official Node website](https://nodejs.org/en/download/). Or, if you are using [Laravel Sail](https://laravel.com/docs/{{version}}/sail), you may invoke Node and NPM through Sail:"
msgstr "可以從 [Node 官方網站](https://nodejs.org/en/download/)中取得圖形界面安裝程式來輕鬆地安裝最新版的 Node 與 NPM。或者，如果你用的是 [Laravel Sail](/docs/{{version}}/sail)，可以像這樣在 Sail 上叫用 Node 與 NPM："

#: docs/9.x/vite.md:block 23 (code)
msgid "./vendor/bin/sail node -v\n"
"./vendor/bin/sail npm -v\n"
msgstr "./vendor/bin/sail node -v\n"
"./vendor/bin/sail npm -v\n"

#: docs/9.x/vite.md:block 25 (header)
msgid "Installing Vite And The Laravel Plugin"
msgstr "安裝 Vite 與 Laravel 外掛"

#: docs/9.x/vite.md:block 26 (paragraph)
msgid "Within a fresh installation of Laravel, you will find a `package.json` file in the root of your application's directory structure. The default `package.json` file already includes everything you need to get started using Vite and the Laravel plugin. You may install your application's frontend dependencies via NPM:"
msgstr "在新安裝的 Laravel 中，可以看到專案根目錄下有個 `package.json`。預設的 `package.json` 檔案已包含了所有開始使用 Vite 與 Laravel Vite 外掛所需的東西。可以使用 NPM 來安裝專案的前端相依套件："

#: docs/9.x/vite.md:block 27 (code)
msgid "npm install\n"
msgstr "npm install\n"

#: docs/9.x/vite.md:block 29 (header)
msgid "Configuring Vite"
msgstr "設定 Vite"

#: docs/9.x/vite.md:block 30 (paragraph)
msgid "Vite is configured via a `vite.config.js` file in the root of your project. You are free to customize this file based on your needs, and you may also install any other plugins your application requires, such as `@vitejs/plugin-vue` or `@vitejs/plugin-react`."
msgstr "Vite 使用專案根目錄的 `vite.config.js` 檔案來設定。可以依據需求隨意更改該檔案，也可以依照需求來安裝其他的外掛，如 `@vitejs/plugin-vue` 或 `@vitejs/plugin-react`。"

#: docs/9.x/vite.md:block 31 (paragraph)
msgid "The Laravel Vite plugin requires you to specify the entry points for your application. These may be JavaScript or CSS files, and include preprocessed languages such as TypeScript, JSX, TSX, and Sass."
msgstr "要使用 Laravel 的 Vite 外掛，需要指定專案的 ^[Entry Point](進入點)。Entry Point 可以是 JavaScript 或 CSS 檔，也可以是使用預處理語言的檔案，如 TypeScript、JSX、TSX、或 Sass。"

#: docs/9.x/vite.md:block 32 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css',\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css',\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 33 (paragraph)
msgid "If you are building an SPA, including applications built using Inertia, Vite works best without CSS entry points:"
msgstr "若要製作 SPA，或是使用 Intertia 建置的程式，則在 Vite 中最好不使用 CSS Entry Point："

#: docs/9.x/vite.md:block 34 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css', // [tl! remove]\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel([\n"
"            'resources/css/app.css', // [tl! remove]\n"
"            'resources/js/app.js',\n"
"        ]),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 35 (paragraph)
msgid "Instead, you should import your CSS via JavaScript. Typically, this would be done in your application's `resources/js/app.js` file:"
msgstr "不要使用 CSS 進入點，而應該在 JavaScript 中 Import CSS 檔。一般來說，就是在 `resources/js/app.js` 檔案內 Import："

#: docs/9.x/vite.md:block 36 (code)
msgid "import './bootstrap';\n"
"import '../css/app.css'; // [tl! add]\n"
msgstr "import './bootstrap';\n"
"import '../css/app.css'; // [tl! add]\n"

#: docs/9.x/vite.md:block 37 (paragraph)
msgid "The Laravel plugin also supports multiple entry points and advanced configuration options such as [SSR entry points](#ssr)."
msgstr "Laravel 的 Vite 外掛也支援多個 Entry Point，且還有一些進階的設定選項，如 [SSR Entry Point](#ssr)。"

#: docs/9.x/vite.md:block 39 (header)
msgid "Working With A Secure Development Server"
msgstr "在 HTTPS 的開發伺服器使用 Vite"

#: docs/9.x/vite.md:block 40 (paragraph)
msgid "If your local development web server is serving your application via HTTPS, you may run into issues connecting to the Vite development server."
msgstr "若你的本機開發環境使用 HTTPS，則在連線到 Vite 開發伺服器時可能會遇到一些問題。"

#: docs/9.x/vite.md:block 41 (paragraph)
msgid "If you are using [Laravel Valet](/docs/{{version}}/valet) for local development and have run the [secure command](/docs/{{version}}/valet#securing-sites) against your application, you may configure the Vite development server to automatically use Valet's generated TLS certificates:"
msgstr "如果你使用 [Laravel Valet](/docs/{{version}}/valet) 來作為本機開發環境，並對專案使用了 [secure 指令](/docs/{{version}}/valet#securing-sites)，那麼可以設定讓 Vite 開發伺服器自動使用 Valet 所產生的 TLS 憑證："

#: docs/9.x/vite.md:block 42 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            valetTls: 'my-app.test', // [tl! add]\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            valetTls: 'my-app.test', // [tl! add]\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 43 (paragraph)
msgid "When using another web server, you should generate a trusted certificate and manually configure Vite to use the generated certificates:"
msgstr "使用其他網頁伺服器時，應產生受信任的憑證，並手動設定 Vite 使用所產生的憑證："

#: docs/9.x/vite.md:block 44 (code)
msgid "// ...\n"
"import fs from 'fs'; // [tl! add]\n\n"
"const host = 'my-app.test'; // [tl! add]\n\n"
"export default defineConfig({\n"
"    // ...\n"
"    server: { // [tl! add]\n"
"        host, // [tl! add]\n"
"        hmr: { host }, // [tl! add]\n"
"        https: { // [tl! add]\n"
"            key: fs.readFileSync(`/path/to/${host}.key`), // [tl! add]\n"
"            cert: fs.readFileSync(`/path/to/${host}.crt`), // [tl! add]\n"
"        }, // [tl! add]\n"
"    }, // [tl! add]\n"
"});\n"
msgstr "// ...\n"
"import fs from 'fs'; // [tl! add]\n\n"
"const host = 'my-app.test'; // [tl! add]\n\n"
"export default defineConfig({\n"
"    // ...\n"
"    server: { // [tl! add]\n"
"        host, // [tl! add]\n"
"        hmr: { host }, // [tl! add]\n"
"        https: { // [tl! add]\n"
"            key: fs.readFileSync(`/path/to/${host}.key`), // [tl! add]\n"
"            cert: fs.readFileSync(`/path/to/${host}.crt`), // [tl! add]\n"
"        }, // [tl! add]\n"
"    }, // [tl! add]\n"
"});\n"

#: docs/9.x/vite.md:block 45 (paragraph)
msgid "If you are unable to generate a trusted certificate for your system, you may install and configure the [`@vitejs/plugin-basic-ssl` plugin](https://github.com/vitejs/vite-plugin-basic-ssl). When using untrusted certificates, you will need to accept the certificate warning for Vite's development server in your browser by following the \"Local\" link in your console when running the `npm run dev` command."
msgstr "若無法產生系統所信任的憑證，可以安裝並設定 [`@vitejs/plugin-basic-ssl` 外掛](https://github.com/vitejs/vite-plugin-basic-ssl)。在使用未受信任的憑證時，就需要打開執行 `npm run dev` 指令時顯示在主控台的「Local」連結，以在瀏覽器中接受 Vite 開發伺服器的憑證警告。"

#: docs/9.x/vite.md:block 47 (header)
msgid "Loading Your Scripts And Styles"
msgstr "載入 Script 與 CSS"

#: docs/9.x/vite.md:block 48 (paragraph)
msgid "With your Vite entry points configured, you only need reference them in a `@vite()` Blade directive that you add to the `<head>` of your application's root template:"
msgstr "設定好 Vite 的 Entry Point 後，我們接著就只需要在專案根樣板中的 `<head>` 內使用 `@vite()` Blade 指示詞來參照這些 Entry Point 即可："

#: docs/9.x/vite.md:block 49 (code)
msgid "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    @vite(['resources/css/app.css', 'resources/js/app.js'])\n"
"</head>\n"
msgstr "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    @vite(['resources/css/app.css', 'resources/js/app.js'])\n"
"</head>\n"

#: docs/9.x/vite.md:block 50 (paragraph)
msgid "If you're importing your CSS via JavaScript, you only need to include the JavaScript entry point:"
msgstr "若使用 JavaScript 來匯入 CSS，則只需要加上 JavaScript 的 Entry Point 即可："

#: docs/9.x/vite.md:block 51 (code)
msgid "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    @vite('resources/js/app.js')\n"
"</head>\n"
msgstr "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    @vite('resources/js/app.js')\n"
"</head>\n"

#: docs/9.x/vite.md:block 52 (paragraph)
msgid "The `@vite` directive will automatically detect the Vite development server and inject the Vite client to enable Hot Module Replacement. In build mode, the directive will load your compiled and versioned assets, including any imported CSS."
msgstr "`@vite` 指示詞會自動偵測到 Vite 的開發伺服器，並自動注入 Vite 的用戶端，讓我們可以使用 HMR (熱模組取代，Hot Module Replacement)。在建置模式時，該指示詞會自動載入編譯過、加上版本的素材，並包含任何已匯入的 CSS。"

#: docs/9.x/vite.md:block 53 (paragraph)
msgid "If needed, you may also specify the build path of your compiled assets when invoking the `@vite` directive:"
msgstr "若有需要，也可以在呼叫 `@vite` 指示詞時指定編譯資源的建置路徑："

#: docs/9.x/vite.md:block 54 (code)
msgid "<!doctype html>\n"
"<head>\n"
"    {{-- Given build path is relative to public path. --}}\n\n"
"    @vite('resources/js/app.js', 'vendor/courier/build')\n"
"</head>\n"
msgstr "<!doctype html>\n"
"<head>\n"
"    {{-- 提供相對於 public 路徑的建置路徑。 --}}\n\n"
"    @vite('resources/js/app.js', 'vendor/courier/build')\n"
"</head>\n"

#: docs/9.x/vite.md:block 56 (header)
msgid "Running Vite"
msgstr "執行 Vite"

#: docs/9.x/vite.md:block 57 (paragraph)
msgid "There are two ways you can run Vite. You may run the development server via the `dev` command, which is useful while developing locally. The development server will automatically detect changes to your files and instantly reflect them in any open browser windows."
msgstr "要執行 Vite 有兩種方法。一種是使用 `dev` 指令來執行開發伺服器，適合用在本機環境開發時。開發伺服器會自動偵測任何檔案的修改，並自動反應到所有開啟的瀏覽器視窗中。"

#: docs/9.x/vite.md:block 58 (paragraph)
msgid "Or, running the `build` command will version and bundle your application's assets and get them ready for you to deploy to production:"
msgstr "或者，也可以執行 `build` 指令。`build` 指令會為專案的素材加上版本，並打包這些素材，讓我們可以將其部署到正式環境中："

#: docs/9.x/vite.md:block 59 (code)
msgid "# Run the Vite development server...\n"
"npm run dev\n\n"
"# Build and version the assets for production...\n"
"npm run build\n"
msgstr "# 執行 Vite 的開發伺服器...\n"
"npm run dev\n\n"
"# 建置素材並加上版本以在正式環境下使用...\n"
"npm run build\n"

#: docs/9.x/vite.md:block 61 (header)
msgid "Working With JavaScript"
msgstr "處理 JavaScript"

#: docs/9.x/vite.md:block 63 (header)
msgid "Aliases"
msgstr "別名"

#: docs/9.x/vite.md:block 64 (paragraph)
msgid "By default, The Laravel plugin provides a common alias to help you hit the ground running and conveniently import your application's assets:"
msgstr "預設情況下，Laravel 的 Vite 外掛提供了一個常見的別名，來讓你快速開始並方便地匯入專案素材："

#: docs/9.x/vite.md:block 65 (code)
msgid "{\n"
"    '@' => '/resources/js'\n"
"}\n"
msgstr "{\n"
"    '@' => '/resources/js'\n"
"}\n"

#: docs/9.x/vite.md:block 66 (paragraph)
msgid "You may overwrite the `'@'` alias by adding your own to the `vite.config.js` configuration file:"
msgstr "也可以在 `vite.config.js` 設定檔中加上你自己的設定來複寫這個 `'@'` 別名："

#: docs/9.x/vite.md:block 67 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/ts/app.tsx']),\n"
"    ],\n"
"    resolve: {\n"
"        alias: {\n"
"            '@': '/resources/ts',\n"
"        },\n"
"    },\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/ts/app.tsx']),\n"
"    ],\n"
"    resolve: {\n"
"        alias: {\n"
"            '@': '/resources/ts',\n"
"        },\n"
"    },\n"
"});\n"

#: docs/9.x/vite.md:block 69 (header)
msgid "Vue"
msgstr "Vue"

#: docs/9.x/vite.md:block 70 (paragraph)
msgid "There are a few additional options you will need to include in the `vite.config.js` configuration file when using the Vue plugin with the Laravel plugin:"
msgstr "若要讓 Vue 外掛與 Laravel 的 Vite 外掛一起使用，還需要在 `vite.config.js` 設定檔中加上一些其他的設定："

#: docs/9.x/vite.md:block 71 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import vue from '@vitejs/plugin-vue';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/js/app.js']),\n"
"        vue({\n"
"            template: {\n"
"                transformAssetUrls: {\n"
"                    // The Vue plugin will re-write asset URLs, when referenced\n"
"                    // in Single File Components, to point to the Laravel web\n"
"                    // server. Setting this to `null` allows the Laravel plugin\n"
"                    // to instead re-write asset URLs to point to the Vite\n"
"                    // server instead.\n"
"                    base: null,\n\n"
"                    // The Vue plugin will parse absolute URLs and treat them\n"
"                    // as absolute paths to files on disk. Setting this to\n"
"                    // `false` will leave absolute URLs un-touched so they can\n"
"                    // reference assets in the public directory as expected.\n"
"                    includeAbsolute: false,\n"
"                },\n"
"            },\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import vue from '@vitejs/plugin-vue';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel(['resources/js/app.js']),\n"
"        vue({\n"
"            template: {\n"
"                transformAssetUrls: {\n"
"                    // Vue 外掛會在使用 SFC (單檔案元件) 時複寫 (Re-write) 素材 URL\n"
"                    // 以指向 Laravel 網頁伺服器。將此設定值改為 `null`，可讓 Laravel\n"
"                    // 外掛改將複寫的素材 URL 重新指向 Vite 伺服器。\n"
"                    base: null,\n\n"
"                    // Vue 外掛會解析絕對 URL，並將這些 URL 視為磁碟上的檔案路徑。\n"
"                    // 將此設定改為 `false`，就會使這些 URL 保持不動，以按照逾期地\n"
"                    // 參照到 public 目錄下的素材。\n"
"                    includeAbsolute: false,\n"
"                },\n"
"            },\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 72 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Vue, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Vue, and Vite."
msgstr "**Note** Laravel 的[入門套件](/docs/{{version}}/starter-kits)中已經包含了適當的 Laravel、Vue、與 Vite 設定。請參考看看使用 [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia)，來用最快的速度開始使用 Laravel、Vue、與 Vite。"

#: docs/9.x/vite.md:block 74 (header)
msgid "React"
msgstr "React"

#: docs/9.x/vite.md:block 75 (paragraph)
msgid "When using Vite with React, you will need to ensure that any files containing JSX have a `.jsx` or `.tsx` extension, remembering to update your entry point, if required, as [shown above](#configuring-vite). You will also need to include the additional `@viteReactRefresh` Blade directive alongside your existing `@vite` directive."
msgstr "在 Vite 中使用 React 時，需要確定任何包含 JSX 的檔案都使用 `.jsx` 或 `.tsx` 副檔名，並請記得，若有需要的話要[像剛才提到的一樣](#configuring-vite)更新 Entry Point。除了現有的 `@vite` 指示詞外，可能也許要再加上額外的 `@viteReactRefresh` Blade 指示詞。"

#: docs/9.x/vite.md:block 76 (code)
msgid "@viteReactRefresh\n"
"@vite('resources/js/app.jsx')\n"
msgstr "@viteReactRefresh\n"
"@vite('resources/js/app.jsx')\n"

#: docs/9.x/vite.md:block 77 (paragraph)
msgid "The `@viteReactRefresh` directive must be called before the `@vite` directive."
msgstr "`@viteReactRefresh` 指示詞必須在 `@vite` 指示詞前呼叫。"

#: docs/9.x/vite.md:block 78 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, React, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, React, and Vite."
msgstr "**Note** Laravel 的[入門套件](/docs/{{version}}/starter-kits)中已經包含了適當的 Laravel、React、與 Vite 設定。請參考看看使用 [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia)，來用最快的速度開始使用 Laravel、React、與 Vite。"

#: docs/9.x/vite.md:block 80 (header)
msgid "Inertia"
msgstr "Inertia"

#: docs/9.x/vite.md:block 81 (paragraph)
msgid "The Laravel Vite plugin provides a convenient `resolvePageComponent` function to help you resolve your Inertia page components. Below is an example of the helper in use with Vue 3; however, you may also utilize the function in other frameworks such as React:"
msgstr "Laravel 的 Vite 外掛中提供了一個方便的 `resolvePageComponent` 函式，來協助我們解析 Inertia 的頁面元件。下面是搭配 Vue 3 使用該輔助函式的範例。除了在 Vue 3 上使用外，也可以在如 React 等其他的框架上使用該函式："

#: docs/9.x/vite.md:block 82 (code)
msgid "import { createApp, h } from 'vue';\n"
"import { createInertiaApp } from '@inertiajs/vue3';\n"
"import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';\n\n"
"createInertiaApp({\n"
"  resolve: (name) => resolvePageComponent(`./Pages/${name}.vue`, import.meta.glob('./Pages/**/*.vue')),\n"
"  setup({ el, App, props, plugin }) {\n"
"    return createApp({ render: () => h(App, props) })\n"
"      .use(plugin)\n"
"      .mount(el)\n"
"  },\n"
"});\n"
msgstr "import { createApp, h } from 'vue';\n"
"import { createInertiaApp } from '@inertiajs/vue3';\n"
"import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';\n\n"
"createInertiaApp({\n"
"  resolve: (name) => resolvePageComponent(`./Pages/${name}.vue`, import.meta.glob('./Pages/**/*.vue')),\n"
"  setup({ el, App, props, plugin }) {\n"
"    return createApp({ render: () => h(App, props) })\n"
"      .use(plugin)\n"
"      .mount(el)\n"
"  },\n"
"});\n"

#: docs/9.x/vite.md:block 83 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Inertia, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Inertia, and Vite."
msgstr "**Note** Laravel 的[入門套件](/docs/{{version}}/starter-kits)中已經包含了適當的 Laravel、Inertia、與 Vite 設定。請參考看看使用 [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia)，來用最快的速度開始使用 Laravel、Inertia、與 Vite。"

#: docs/9.x/vite.md:block 85 (header)
msgid "URL Processing"
msgstr "URL 的處理"

#: docs/9.x/vite.md:block 86 (paragraph)
msgid "When using Vite and referencing assets in your application's HTML, CSS, or JS, there are a couple of caveats to consider. First, if you reference assets with an absolute path, Vite will not include the asset in the build; therefore, you should ensure that the asset is available in your public directory."
msgstr "使用 Vite 並在專案的 HTML、CSS、JS 等地方參照素材時，還需要考慮到幾點。首先，若要參照的資源使用絕對路徑，則 Vite 將不會在建置的結果中包含該資源；同時，還需要確定該素材是否在 public 目錄下可用。"

#: docs/9.x/vite.md:block 87 (paragraph)
msgid "When referencing relative asset paths, you should remember that the paths are relative to the file where they are referenced. Any assets referenced via a relative path will be re-written, versioned, and bundled by Vite."
msgstr "使用相對路徑參照素材時，請記得，路徑是相對於正在參照該資源的檔案。Vite 會複寫使用相對路徑所參照的素材，並為其加上版本，然後進行打包。"

#: docs/9.x/vite.md:block 88 (paragraph)
msgid "Consider the following project structure:"
msgstr "來看一下下面這樣的專案結構："

#: docs/9.x/vite.md:block 89 (code)
msgid "public/\n"
"  taylor.png\n"
"resources/\n"
"  js/\n"
"    Pages/\n"
"      Welcome.vue\n"
"  images/\n"
"    abigail.png\n"
msgstr "public/\n"
"  taylor.png\n"
"resources/\n"
"  js/\n"
"    Pages/\n"
"      Welcome.vue\n"
"  images/\n"
"    abigail.png\n"

#: docs/9.x/vite.md:block 90 (paragraph)
msgid "The following example demonstrates how Vite will treat relative and absolute URLs:"
msgstr "下列範例展示 Vite 如何處理相對與絕對 URL："

#: docs/9.x/vite.md:block 91 (code)
msgid "<!-- This asset is not handled by Vite and will not be included in the build -->\n"
"<img src=\"/taylor.png\">\n\n"
"<!-- This asset will be re-written, versioned, and bundled by Vite -->\n"
"<img src=\"../../images/abigail.png\">\n"
msgstr "<!-- 該素材不會被 Vite 出列，且不會包含在建置結果中 -->\n"
"<img src=\"/taylor.png\">\n\n"
"<!-- 該素材會被 Vite 複寫，且會加上版本並打包 -->\n"
"<img src=\"../../images/abigail.png\">\n"

#: docs/9.x/vite.md:block 93 (header)
msgid "Working With Stylesheets"
msgstr "處理 CSS"

#: docs/9.x/vite.md:block 94 (paragraph)
msgid "You can learn more about Vite's CSS support within the [Vite documentation](https://vitejs.dev/guide/features.html#css). If you are using PostCSS plugins such as [Tailwind](https://tailwindcss.com), you may create a `postcss.config.js` file in the root of your project and Vite will automatically apply it:"
msgstr "你可以在 [Vite 說明文件](https://vitejs.dev/guide/features.html#css)中瞭解更多有關 Vite 對 CSS 的支援。若使用如 [Tailwind](https://tailwindcss.com) 等的 PostCSS 外掛，可在專案根目錄中建立一個 `postcss.config.js` 檔。Vite 會自動套用該檔案中的設定："

#: docs/9.x/vite.md:block 95 (code)
msgid "module.exports = {\n"
"    plugins: {\n"
"        tailwindcss: {},\n"
"        autoprefixer: {},\n"
"    },\n"
"};\n"
msgstr "module.exports = {\n"
"    plugins: {\n"
"        tailwindcss: {},\n"
"        autoprefixer: {},\n"
"    },\n"
"};\n"

#: docs/9.x/vite.md:block 97 (header)
msgid "Working With Blade & Routes"
msgstr "處理 Blade 與 Route"

#: docs/9.x/vite.md:block 99 (header)
msgid "Processing Static Assets With Vite"
msgstr "使用 Vite 處理靜態素材"

#: docs/9.x/vite.md:block 100 (paragraph)
msgid "When referencing assets in your JavaScript or CSS, Vite automatically processes and versions them. In addition, when building Blade based applications, Vite can also process and version static assets that you reference solely in Blade templates."
msgstr "在 JavaScript 或 CSS 中參照素材時，Vite 會自動處理這些素材並為其加上版本。此外，在建置基於 Blade 的專案時，也可以使用 Vite 來處理只在 Blade 中被參照的靜態資源，並為這些資源加上版本。"

#: docs/9.x/vite.md:block 101 (paragraph)
msgid "However, in order to accomplish this, you need to make Vite aware of your assets by importing the static assets into the application's entry point. For example, if you want to process and version all images stored in `resources/images` and all fonts stored in `resources/fonts`, you should add the following in your application's `resources/js/app.js` entry point:"
msgstr "不過，若要達成此目的，我們需要先在專案的 ^[Entry Point](進入點) 匯入這些素材，好讓 Vite 知道有這些素材的存在。舉例來說，若想處理並為所有 `resources/images` 下的圖片、以及 `resources/fonts` 下的所有字體加上版本，就需要在專案的 `resources/js/app.js` Entry Point 內加上下列程式碼："

#: docs/9.x/vite.md:block 102 (code)
msgid "import.meta.glob([\n"
"  '../images/**',\n"
"  '../fonts/**',\n"
"]);\n"
msgstr "import.meta.glob([\n"
"  '../images/**',\n"
"  '../fonts/**',\n"
"]);\n"

#: docs/9.x/vite.md:block 103 (paragraph)
msgid "These assets will now be processed by Vite when running `npm run build`. You can then reference these assets in Blade templates using the `Vite::asset` method, which will return the versioned URL for a given asset:"
msgstr "接著在執行 `npm run build` 時，這些素材就會自動被 Vite 處理。我們接著就可以在 Blade 樣板中使用 `Vite::asset` 方法來參照這些素材。該方法會回傳給定資源加上版本後的 URL："

#: docs/9.x/vite.md:block 104 (code)
msgid "<img src=\"{{ Vite::asset('resources/images/logo.png') }}\">\n"
msgstr "<img src=\"{{ Vite::asset('resources/images/logo.png') }}\">\n"

#: docs/9.x/vite.md:block 106 (header)
msgid "Refreshing On Save"
msgstr "保存時重新整理"

#: docs/9.x/vite.md:block 107 (paragraph)
msgid "When your application is built using traditional server-side rendering with Blade, Vite can improve your development workflow by automatically refreshing the browser when you make changes to view files in your application. To get started, you can simply specify the `refresh` option as `true`."
msgstr "若專案使用 Blade 這樣傳統式的伺服器端轉譯，則 Vite 可以在 View 檔案被修改的時候幫你自動重新整理瀏覽器來改進開發流程。若要開始讓 Vite 自動重新整理，只需要將 `refresh` 選項設為 `true` 即可。"

#: docs/9.x/vite.md:block 108 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: true,\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: true,\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 109 (paragraph)
msgid "When the `refresh` option is `true`, saving files in the following directories will trigger the browser to perform a full page refresh while you are running `npm run dev`:"
msgstr "當 `refresh` 選項設為 `true` 後，在執行 `npm run dev` 時，一旦在下列目錄中保存檔案，就會觸發瀏覽器進行整頁的重新整理："

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`app/View/Components/**`"
msgstr "`app/View/Components/**`"

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`lang/**`"
msgstr "`lang/**`"

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`resources/lang/**`"
msgstr "`resources/lang/**`"

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`resources/views/**`"
msgstr "`resources/views/**`"

#: docs/9.x/vite.md:block 110 (unordered list)
msgid "`routes/**`"
msgstr "`routes/**`"

#: docs/9.x/vite.md:block 111 (paragraph)
msgid "Watching the `routes/**` directory is useful if you are utilizing [Ziggy](https://github.com/tighten/ziggy) to generate route links within your application's frontend."
msgstr "若使用 [Ziggy](https://github.com/tighten/ziggy) 來在網頁前端中產生 Route 連結，監看 `routes/**` 目錄就很實用。"

#: docs/9.x/vite.md:block 112 (paragraph)
msgid "If these default paths do not suit your needs, you can specify your own list of paths to watch:"
msgstr "若這些預設的路徑不符合你的需求，也可以自行指定一組要監看的路徑清單："

#: docs/9.x/vite.md:block 113 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: ['resources/views/**'],\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: ['resources/views/**'],\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 114 (paragraph)
msgid "Under the hood, the Laravel Vite plugin uses the [`vite-plugin-full-reload`](https://github.com/ElMassimo/vite-plugin-full-reload) package, which offers some advanced configuration options to fine-tune this feature's behavior. If you need this level of customization, you may provide a `config` definition:"
msgstr "其實，Laravel 的 Vite 外掛使用了 [`vite-plugin-full-reload`](https://github.com/ElMassimo/vite-plugin-full-reload) 套件，該套件還提供了一些選項，能微調這個重新整理功能的行為。若有需要自定這類微調，可以加上一個 `config` 定義："

#: docs/9.x/vite.md:block 115 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: [{\n"
"                paths: ['path/to/watch/**'],\n"
"                config: { delay: 300 }\n"
"            }],\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"            refresh: [{\n"
"                paths: ['path/to/watch/**'],\n"
"                config: { delay: 300 }\n"
"            }],\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 118 (paragraph)
msgid "It is common in JavaScript applications to [create aliases](#aliases) to regularly referenced directories. But, you may also create aliases to use in Blade by using the `macro` method on the `Illuminate\\Support\\Vite` class. Typically, \"macros\" should be defined within the `boot` method of a [service provider](/docs/{{version}}/providers):"
msgstr "在 JavaScript 專案中，為常用的目錄[建立別名](#aliases)是很常見的。不過，我們也可以使用 `Illuminate\\Support\\Vite` 類別的 `macro` 方法來建立能在 Blade 中使用的別名。一般來說，「^[Macro](巨集)」應在某個 [Service Provider](/docs/{{version}}/providers) 內定義："

#: docs/9.x/vite.md:block 119 (code)
msgid "/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Vite::macro('image', fn ($asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Vite::macro('image', fn ($asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"

#: docs/9.x/vite.md:block 120 (paragraph)
msgid "Once a macro has been defined, it can be invoked within your templates. For example, we can use the `image` macro defined above to reference an asset located at `resources/images/logo.png`:"
msgstr "定義好 Macro 後，就可以在樣板中呼叫。舉例來說，我們可以使用 `image` Macro 定義來參照到位在 `resources/images/logo.png` 的素材："

#: docs/9.x/vite.md:block 121 (code)
msgid "<img src=\"{{ Vite::image('logo.png') }}\" alt=\"Laravel Logo\">\n"
msgstr "<img src=\"{{ Vite::image('logo.png') }}\" alt=\"Laravel Logo\">\n"

#: docs/9.x/vite.md:block 123 (header)
msgid "Custom Base URLs"
msgstr "自定 Base URL"

#: docs/9.x/vite.md:block 124 (paragraph)
msgid "If your Vite compiled assets are deployed to a domain separate from your application, such as via a CDN, you must specify the `ASSET_URL` environment variable within your application's `.env` file:"
msgstr "若由 Vite 編譯出來的素材會被部署到與專案不同的網域上，如 CDN 等，則可在專案的 `.env` 檔案中指定 `ASSET_URL` 環境變數："

#: docs/9.x/vite.md:block 125 (code)
msgid "ASSET_URL=https://cdn.example.com\n"
msgstr "ASSET_URL=https://cdn.example.com\n"

#: docs/9.x/vite.md:block 126 (paragraph)
msgid "After configuring the asset URL, all re-written URLs to your assets will be prefixed with the configured value:"
msgstr "設定好素材 URL 後，所有被複寫的素材 URL 的前方都會被加上該設定值："

#: docs/9.x/vite.md:block 127 (code)
msgid "https://cdn.example.com/build/assets/app.9dce8d17.js\n"
msgstr "https://cdn.example.com/build/assets/app.9dce8d17.js\n"

#: docs/9.x/vite.md:block 128 (paragraph)
msgid "Remember that [absolute URLs are not re-written by Vite](#url-processing), so they will not be prefixed."
msgstr "請記得，[Vite 不會複寫絕對 URL](#url-processing)，所以這些絕對 URL 會被保持原樣。"

#: docs/9.x/vite.md:block 130 (header)
msgid "Environment Variables"
msgstr "環境變數"

#: docs/9.x/vite.md:block 131 (paragraph)
msgid "You may inject environment variables into your JavaScript by prefixing them with `VITE_` in your application's `.env` file:"
msgstr "在專案的 `.env` 檔中，只要為環境變數名稱冠上 `VITE_` 前置詞，就可將這些環境變數注入到 JavaScript 中："

#: docs/9.x/vite.md:block 132 (code)
msgid "VITE_SENTRY_DSN_PUBLIC=http://example.com\n"
msgstr "VITE_SENTRY_DSN_PUBLIC=http://example.com\n"

#: docs/9.x/vite.md:block 133 (paragraph)
msgid "You may access injected environment variables via the `import.meta.env` object:"
msgstr "可以使用 `import.meta.env` 物件來存取注入的變數："

#: docs/9.x/vite.md:block 134 (code)
msgid "import.meta.env.VITE_SENTRY_DSN_PUBLIC\n"
msgstr "import.meta.env.VITE_SENTRY_DSN_PUBLIC\n"

#: docs/9.x/vite.md:block 136 (header)
msgid "Disabling Vite In Tests"
msgstr "在測試時禁用 Vite"

#: docs/9.x/vite.md:block 137 (paragraph)
msgid "Laravel's Vite integration will attempt to resolve your assets while running your tests, which requires you to either run the Vite development server or build your assets."
msgstr "Laravel 的 Vite 整合會在執行測試時嘗試解析素材，要能解析素材就必須要執行 Vite 開發伺服器或建置素材。"

#: docs/9.x/vite.md:block 138 (paragraph)
msgid "If you would prefer to mock Vite during testing, you may call the `withoutVite` method, which is is available for any tests that extend Laravel's `TestCase` class:"
msgstr "若想在測試時 Mock (模擬) Vite，可呼叫 `withoutVite` 方法。該方法可在任何繼承了 Laravel  `TestCase` 的類別中使用："

#: docs/9.x/vite.md:block 139 (code)
msgid "use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example()\n"
"    {\n"
"        $this->withoutVite();\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example()\n"
"    {\n"
"        $this->withoutVite();\n\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/9.x/vite.md:block 140 (paragraph)
msgid "If you would like to disable Vite for all tests, you may call the `withoutVite` method from the `setUp` method on your base `TestCase` class:"
msgstr "若想在所有測試中禁用 Vite，可在基礎 `TestCase` 類別的 `setUp` 方法中呼叫 `withoutVite` 方法："

#: docs/9.x/vite.md:block 141 (code)
msgid "<?php\n\n"
"namespace Tests;\n\n"
"use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\n"
"abstract class TestCase extends BaseTestCase\n"
"{\n"
"    use CreatesApplication;\n\n"
"    protected function setUp(): void// [tl! add:start]\n"
"    {\n"
"        parent::setUp();\n\n"
"        $this->withoutVite();\n"
"    }// [tl! add:end]\n"
"}\n"
msgstr "<?php\n\n"
"namespace Tests;\n\n"
"use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\n"
"abstract class TestCase extends BaseTestCase\n"
"{\n"
"    use CreatesApplication;\n\n"
"    protected function setUp(): void// [tl! add:start]\n"
"    {\n"
"        parent::setUp();\n\n"
"        $this->withoutVite();\n"
"    }// [tl! add:end]\n"
"}\n"

#: docs/9.x/vite.md:block 143 (header)
msgid "Server-Side Rendering (SSR)"
msgstr "伺服器端轉譯 (SSR)"

#: docs/9.x/vite.md:block 144 (paragraph)
msgid "The Laravel Vite plugin makes it painless to set up server-side rendering with Vite. To get started, create an SSR entry point at `resources/js/ssr.js` and specify the entry point by passing a configuration option to the Laravel plugin:"
msgstr "使用 Laravel 的 Vite 外掛，就可以無痛在 Vite 上設定伺服器端轉譯 (SSR, Server Side Rendering)。若要開始設定 SSR，請建立一個 `resources/js/ssr.js` 來作為 SSR 的進入點，並在 Laravel 的 Vite 外掛上傳入一組設定來指定該進入點："

#: docs/9.x/vite.md:block 145 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            input: 'resources/js/app.js',\n"
"            ssr: 'resources/js/ssr.js',\n"
"        }),\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            input: 'resources/js/app.js',\n"
"            ssr: 'resources/js/ssr.js',\n"
"        }),\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 146 (paragraph)
msgid "To ensure you don't forget to rebuild the SSR entry point, we recommend augmenting the \"build\" script in your application's `package.json` to create your SSR build:"
msgstr "為了避免我們忘記要重新建置 SSR 進入點，建議調整專案的 `package.json` 內的「build」指令來建立 SSR 建置："

#: docs/9.x/vite.md:block 147 (code)
msgid "\"scripts\": {\n"
"     \"dev\": \"vite\",\n"
"     \"build\": \"vite build\" // [tl! remove]\n"
"     \"build\": \"vite build && vite build --ssr\" // [tl! add]\n"
"}\n"
msgstr "\"scripts\": {\n"
"     \"dev\": \"vite\",\n"
"     \"build\": \"vite build\" // [tl! remove]\n"
"     \"build\": \"vite build && vite build --ssr\" // [tl! add]\n"
"}\n"

#: docs/9.x/vite.md:block 148 (paragraph)
msgid "Then, to build and start the SSR server, you may run the following commands:"
msgstr "接著，若要開始建置並執行 SSR 伺服器，可執行下列指令："

#: docs/9.x/vite.md:block 149 (code)
msgid "npm run build\n"
"node bootstrap/ssr/ssr.mjs\n"
msgstr "npm run build\n"
"node bootstrap/ssr/ssr.mjs\n"

#: docs/9.x/vite.md:block 150 (quote)
msgid "**Note** Laravel's [starter kits](/docs/{{version}}/starter-kits) already include the proper Laravel, Inertia SSR, and Vite configuration. Check out [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia) for the fastest way to get started with Laravel, Inertia SSR, and Vite."
msgstr "**Note** Laravel 的[入門套件](/docs/{{version}}/starter-kits)中已經包含了適當的 Laravel、Inertia SSR、與 Vite 設定。請參考看看使用 [Laravel Breeze](/docs/{{version}}/starter-kits#breeze-and-inertia)，來用最快的速度開始使用 Laravel、Inertia SSR、與 Vite。"

#: docs/9.x/vite.md:block 152 (header)
msgid "Script & Style Tag Attributes"
msgstr "Script 與 Style 標籤的屬性"

#: docs/9.x/vite.md:block 154 (header)
msgid "Content Security Policy (CSP) Nonce"
msgstr "內容安全性原則 (CSP) 的 Nonce"

#: docs/9.x/vite.md:block 155 (paragraph)
msgid "If you wish to include a [`nonce` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) on your script and style tags as part of your [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), you may generate or specify a nonce using the `useCspNonce` method within a custom [middleware](/docs/{{version}}/middleware):"
msgstr "若想在 script 與 style 上為[內容安全性原則 (CSP, Content Security Policy)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 加上 [`nonce` 屬性](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce)，可以自定一個 [Middleware](/docs/{{version}}/middleware) 來使用 `useCspNonce` 方法來產生或指定一個 Nonce。"

#: docs/9.x/vite.md:block 156 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Support\\Facades\\Vite;\n\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        Vite::useCspNonce();\n\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Support\\Facades\\Vite;\n\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        Vite::useCspNonce();\n\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"

#: docs/9.x/vite.md:block 157 (paragraph)
msgid "After invoking the `useCspNonce` method, Laravel will automatically include the `nonce` attributes on all generated script and style tags."
msgstr "呼叫 `useCspNonce` 方法後，Laravel 就會自動在所有產生的 script 與 style 標籤上包含一個 `nonce` 屬性。"

#: docs/9.x/vite.md:block 158 (paragraph)
msgid "If you need to specify the nonce elsewhere, including the [Ziggy `@route` directive](https://github.com/tighten/ziggy#using-routes-with-a-content-security-policy) included with Laravel's [starter kits](/docs/{{version}}/starter-kits), you may retrieve it using the `cspNonce` method:"
msgstr "若有需要在別處指定 Nonce，如在 Laravel [入門套件](/docs/{{version}}/starter-kits)中所包含的 [Ziggy `@route` 指示詞](https://github.com/tighten/ziggy#using-routes-with-a-content-security-policy)，則可以使用 `cspNonce` 方法來取得該 Nonce："

#: docs/9.x/vite.md:block 159 (code)
msgid "@routes(nonce: Vite::cspNonce())\n"
msgstr "@routes(nonce: Vite::cspNonce())\n"

#: docs/9.x/vite.md:block 160 (paragraph)
msgid "If you already have a nonce that you would like to instruct Laravel to use, you may pass the nonce to the `useCspNonce` method:"
msgstr "若已有 Nonce，且想讓 Laravel 使用該 Nonce，則可傳入該 Nonce 給 `useCspNonce` 方法："

#: docs/9.x/vite.md:block 161 (code)
msgid "Vite::useCspNonce($nonce);\n"
msgstr "Vite::useCspNonce($nonce);\n"

#: docs/9.x/vite.md:block 163 (header)
msgid "Subresource Integrity (SRI)"
msgstr "子資源完整性 (SRI)"

#: docs/9.x/vite.md:block 164 (paragraph)
msgid "If your Vite manifest includes `integrity` hashes for your assets, Laravel will automatically add the `integrity` attribute on any script and style tags it generates in order to enforce [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity). By default, Vite does not include the `integrity` hash in its manifest, but you may enable it by installing the [`vite-plugin-manifest-uri`](https://www.npmjs.com/package/vite-plugin-manifest-sri) NPM plugin:"
msgstr "若 Vite Manifest 中有包含資源的 ^[`integrity`](完整性) 雜湊，則 Laravel 會自動在所有 Vite 產生的 script 與 style 標籤上加上 `integrity` 屬性，已強制確保[子資源完整性 (SRI, Subresource Integrity)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)。預設情況下，Vite 不會在其 Manifest 檔中包含 `integrity` 雜湊。但只要安裝 [`vite-plugin-manifest-uri`](https://www.npmjs.com/package/vite-plugin-manifest-sri) NPM 外掛，就可啟用該功能："

#: docs/9.x/vite.md:block 165 (code)
msgid "npm install -D vite-plugin-manifest-sri\n"
msgstr "npm install -D vite-plugin-manifest-sri\n"

#: docs/9.x/vite.md:block 166 (paragraph)
msgid "You may then enable this plugin in your `vite.config.js` file:"
msgstr "可以在 `vite.config.js` 檔中啟用該外掛："

#: docs/9.x/vite.md:block 167 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import manifestSRI from 'vite-plugin-manifest-sri';// [tl! add]\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"        }),\n"
"        manifestSRI(),// [tl! add]\n"
"    ],\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n"
"import manifestSRI from 'vite-plugin-manifest-sri';// [tl! add]\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            // ...\n"
"        }),\n"
"        manifestSRI(),// [tl! add]\n"
"    ],\n"
"});\n"

#: docs/9.x/vite.md:block 168 (paragraph)
msgid "If required, you may also customize the manifest key where the integrity hash can be found:"
msgstr "若有需要，也可以指定 Manifest 中保存 Integrity 雜湊的索引鍵："

#: docs/9.x/vite.md:block 169 (code)
msgid "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useIntegrityKey('custom-integrity-key');\n"
msgstr "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useIntegrityKey('custom-integrity-key');\n"

#: docs/9.x/vite.md:block 170 (paragraph)
msgid "If you would like to disable this auto-detection completely, you may pass `false` to the `useIntegrityKey` method:"
msgstr "若有需要完全禁用自動偵測，可傳入 `false` 給 `useIntegrityKey` 方法："

#: docs/9.x/vite.md:block 171 (code)
msgid "Vite::useIntegrityKey(false);\n"
msgstr "Vite::useIntegrityKey(false);\n"

#: docs/9.x/vite.md:block 173 (header)
msgid "Arbitrary Attributes"
msgstr "任意屬性"

#: docs/9.x/vite.md:block 174 (paragraph)
msgid "If you need to include additional attributes on your script and style tags, such as the [`data-turbo-track`](https://turbo.hotwired.dev/handbook/drive#reloading-when-assets-change) attribute, you may specify them via the `useScriptTagAttributes` and `useStyleTagAttributes` methods. Typically, this methods should be invoked from a [service provider](/docs/{{version}}/providers):"
msgstr "若有需要在 script 與 style 標籤上加入其他的額外屬性，如 [`data-turbo-track`](https://turbo.hotwired.dev/handbook/drive#reloading-when-assets-change) 等，則可使用 `useScriptTagAttributes` 與 `useStyleTagAttributes` 方法。一般來說，應該在某個 [Service Provider](/docs/{{version}}/providers) 中叫用該方法："

#: docs/9.x/vite.md:block 175 (code)
msgid "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useScriptTagAttributes([\n"
"    'data-turbo-track' => 'reload', // Specify a value for the attribute...\n"
"    'async' => true, // Specify an attribute without a value...\n"
"    'integrity' => false, // Exclude an attribute that would otherwise be included...\n"
"]);\n\n"
"Vite::useStyleTagAttributes([\n"
"    'data-turbo-track' => 'reload',\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useScriptTagAttributes([\n"
"    'data-turbo-track' => 'reload', // 為屬性指定值...\n"
"    'async' => true, // 指定一個沒有值的屬性...\n"
"    'integrity' => false, // 排除掉一個原本會被包含的屬性...\n"
"]);\n\n"
"Vite::useStyleTagAttributes([\n"
"    'data-turbo-track' => 'reload',\n"
"]);\n"

#: docs/9.x/vite.md:block 176 (paragraph)
msgid "If you need to conditionally add attributes, you may pass a callback that will receive the asset source path, its URL, its manifest chunk, and the entire manifest:"
msgstr "若有需要有條件地新增屬性，則可傳入一個回呼。該回呼會收到素材的原始檔路徑、其 URL、該素材的 Manifest Chunk、以及整個 Manifest："

#: docs/9.x/vite.md:block 177 (code)
msgid "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useScriptTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $src === 'resources/js/app.js' ? 'reload' : false,\n"
"]);\n\n"
"Vite::useStyleTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $chunk && $chunk['isEntry'] ? 'reload' : false,\n"
"]);\n"
msgstr "use Illuminate\\Support\\Facades\\Vite;\n\n"
"Vite::useScriptTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $src === 'resources/js/app.js' ? 'reload' : false,\n"
"]);\n\n"
"Vite::useStyleTagAttributes(fn (string $src, string $url, array|null $chunk, array|null $manifest) => [\n"
"    'data-turbo-track' => $chunk && $chunk['isEntry'] ? 'reload' : false,\n"
"]);\n"

#: docs/9.x/vite.md:block 178 (quote)
msgid "**Warning** The `$chunk` and `$manifest` arguments will be `null` while the Vite development server is running."
msgstr "**Warning** 在執行 Vite 開發伺服器時，`$chunk` 與 `$manifest` 屬性會是 `null`。"

#: docs/9.x/vite.md:block 180 (header)
msgid "Advanced Customization"
msgstr "進階客製化"

#: docs/9.x/vite.md:block 181 (paragraph)
msgid "Out of the box, Laravel's Vite plugin uses sensible conventions that should work for the majority of applications; however, sometimes you may need to customize Vite's behavior. To enable additional customization options, we offer the following methods and options which can be used in place of the `@vite` Blade directive:"
msgstr "在新安裝好的 Laravel Vite 外掛中使用到了一些合理的慣例。這些慣例應該適用於大多數專案。不過，有時候我們還是需要自定 Vite 的姓外。若要啟用額外的客製化選項，Laravel 提供了下列方法與選項，可用於替代 `@vite` Blade 指示詞："

#: docs/9.x/vite.md:block 182 (code)
msgid "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    {{\n"
"        Vite::useHotFile(storage_path('vite.hot')) // Customize the \"hot\" file...\n"
"            ->useBuildDirectory('bundle') // Customize the build directory...\n"
"            ->useManifestFilename('assets.json') // Customize the manifest filename...\n"
"            ->withEntryPoints(['resources/js/app.js']) // Specify the entry points...\n"
"    }}\n"
"</head>\n"
msgstr "<!doctype html>\n"
"<head>\n"
"    {{-- ... --}}\n\n"
"    {{\n"
"        Vite::useHotFile(storage_path('vite.hot')) // 自定「Hot」檔...\n"
"            ->useBuildDirectory('bundle') // 自定建置目錄...\n"
"            ->useManifestFilename('assets.json') // 自定 Manifest 檔名...\n"
"            ->withEntryPoints(['resources/js/app.js']) // 指定 Entry Point...\n"
"    }}\n"
"</head>\n"

#: docs/9.x/vite.md:block 183 (paragraph)
msgid "Within the `vite.config.js` file, you should then specify the same configuration:"
msgstr "在 `vite.config.js` 中，也可以指定相同的設定："

#: docs/9.x/vite.md:block 184 (code)
msgid "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            hotFile: 'storage/vite.hot', // Customize the \"hot\" file...\n"
"            buildDirectory: 'bundle', // Customize the build directory...\n"
"            input: ['resources/js/app.js'], // Specify the entry points...\n"
"        }),\n"
"    ],\n"
"    build: {\n"
"      manifest: 'assets.json', // Customize the manifest filename...\n"
"    },\n"
"});\n"
msgstr "import { defineConfig } from 'vite';\n"
"import laravel from 'laravel-vite-plugin';\n\n"
"export default defineConfig({\n"
"    plugins: [\n"
"        laravel({\n"
"            hotFile: 'storage/vite.hot', // 自定「Hot」檔名...\n"
"            buildDirectory: 'bundle', // 自定建置目錄...\n"
"            input: ['resources/js/app.js'], // 自定 Entry Point...\n"
"        }),\n"
"    ],\n"
"    build: {\n"
"      manifest: 'assets.json', // 自定 Manifest 檔名...\n"
"    },\n"
"});\n"

#: docs/master/vite.md:block 119 (code)
msgid "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Vite::macro('image', fn (string $asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"
msgstr "/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Vite::macro('image', fn (string $asset) => $this->asset(\"resources/images/{$asset}\"));\n"
"}\n"

#: docs/master/vite.md:block 139 (code)
msgid "use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example(): void\n"
"    {\n"
"        $this->withoutVite();\n\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr "use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_without_vite_example(): void\n"
"    {\n"
"        $this->withoutVite();\n\n"
"        // ...\n"
"    }\n"
"}\n"

#: docs/master/vite.md:block 156 (code)
msgid "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Vite;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next, string $role): Response\n"
"    {\n"
"        Vite::useCspNonce();\n\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Http\\Middleware;\n\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Vite;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n\n"
"class AddContentSecurityPolicyHeaders\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next, string $role): Response\n"
"    {\n"
"        Vite::useCspNonce();\n\n"
"        return $next($request)->withHeaders([\n"
"            'Content-Security-Policy' => \"script-src 'nonce-\".Vite::cspNonce().\"'\",\n"
"        ]);\n"
"    }\n"
"}\n"

