# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2021-04-05 10:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/responses.md:1
#, no-wrap
msgid "HTTP Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:18
#, no-wrap
msgid ""
"- [Creating Responses](#creating-responses)\n"
"    - [Attaching Headers To Responses](#attaching-headers-to-responses)\n"
"    - [Attaching Cookies To Responses](#attaching-cookies-to-responses)\n"
"    - [Cookies & Encryption](#cookies-and-encryption)\n"
"- [Redirects](#redirects)\n"
"    - [Redirecting To Named Routes](#redirecting-named-routes)\n"
"    - [Redirecting To Controller Actions](#redirecting-controller-actions)\n"
"    - [Redirecting To External Domains](#redirecting-external-domains)\n"
"    - [Redirecting With Flashed Session "
"Data](#redirecting-with-flashed-session-data)\n"
"- [Other Response Types](#other-response-types)\n"
"    - [View Responses](#view-responses)\n"
"    - [JSON Responses](#json-responses)\n"
"    - [File Downloads](#file-downloads)\n"
"    - [File Responses](#file-responses)\n"
"- [Response Macros](#response-macros)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:20
#, no-wrap
msgid "<a name=\"creating-responses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:20
#, no-wrap
msgid "Creating Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:23
#, no-wrap
msgid "<a name=\"strings-arrays\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:23
#, no-wrap
msgid "Strings & Arrays"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:26
msgid ""
"All routes and controllers should return a response to be sent back to the "
"user's browser. Laravel provides several different ways to return "
"responses. The most basic response is returning a string from a route or "
"controller. The framework will automatically convert the string into a full "
"HTTP response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:30
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return 'Hello World';\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:32
msgid ""
"In addition to returning strings from your routes and controllers, you may "
"also return arrays. The framework will automatically convert the array into "
"a JSON response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:36
#, no-wrap
msgid ""
"    Route::get('/', function () {\n"
"        return [1, 2, 3];\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:38
#, no-wrap
msgid ""
"> {tip} Did you know you can also return [Eloquent "
"collections](/docs/{{version}}/eloquent-collections) from your routes or "
"controllers? They will automatically be converted to JSON. Give it a shot!\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:40
#, no-wrap
msgid "<a name=\"response-objects\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:40
#, no-wrap
msgid "Response Objects"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:43
msgid ""
"Typically, you won't just be returning simple strings or arrays from your "
"route actions. Instead, you will be returning full "
"`Illuminate\\Http\\Response` instances or [views](/docs/{{version}}/views)."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:45
msgid ""
"Returning a full `Response` instance allows you to customize the response's "
"HTTP status code and headers. A `Response` instance inherits from the "
"`Symfony\\Component\\HttpFoundation\\Response` class, which provides a "
"variety of methods for building HTTP responses:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:50
#, no-wrap
msgid ""
"    Route::get('/home', function () {\n"
"        return response('Hello World', 200)\n"
"                      ->header('Content-Type', 'text/plain');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:52
#, no-wrap
msgid "<a name=\"eloquent-models-and-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:52
#, no-wrap
msgid "Eloquent Models & Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:55
msgid ""
"You may also return [Eloquent ORM](/docs/{{version}}/eloquent) models and "
"collections directly from your routes and controllers. When you do, Laravel "
"will automatically convert the models and collections to JSON responses "
"while respecting the model's [hidden "
"attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json):"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:57
#, no-wrap
msgid "    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:61
#, no-wrap
msgid ""
"    Route::get('/user/{user}', function (User $user) {\n"
"        return $user;\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:63
#, no-wrap
msgid "<a name=\"attaching-headers-to-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:63
#, no-wrap
msgid "Attaching Headers To Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:66
msgid ""
"Keep in mind that most response methods are chainable, allowing for the "
"fluent construction of response instances. For example, you may use the "
"`header` method to add a series of headers to the response before sending it "
"back to the user:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:71
#, no-wrap
msgid ""
"    return response($content)\n"
"                ->header('Content-Type', $type)\n"
"                ->header('X-Header-One', 'Header Value')\n"
"                ->header('X-Header-Two', 'Header Value');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:73
msgid ""
"Or, you may use the `withHeaders` method to specify an array of headers to "
"be added to the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:80
#, no-wrap
msgid ""
"    return response($content)\n"
"                ->withHeaders([\n"
"                    'Content-Type' => $type,\n"
"                    'X-Header-One' => 'Header Value',\n"
"                    'X-Header-Two' => 'Header Value',\n"
"                ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:82
#, no-wrap
msgid "<a name=\"cache-control-middleware\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:82
#, no-wrap
msgid "Cache Control Middleware"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:85
msgid ""
"Laravel includes a `cache.headers` middleware, which may be used to quickly "
"set the `Cache-Control` header for a group of routes. If `etag` is specified "
"in the list of directives, an MD5 hash of the response content will "
"automatically be set as the ETag identifier:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:90
#, no-wrap
msgid ""
"    "
"Route::middleware('cache.headers:public;max_age=2628000;etag')->group(function "
"() {\n"
"        Route::get('/privacy', function () {\n"
"            // ...\n"
"        });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:95
#, no-wrap
msgid ""
"        Route::get('/terms', function () {\n"
"            // ...\n"
"        });\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:97
#, no-wrap
msgid "<a name=\"attaching-cookies-to-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:97
#, no-wrap
msgid "Attaching Cookies To Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:100
msgid ""
"You may attach a cookie to an outgoing `Illuminate\\Http\\Response` instance "
"using the `cookie` method. You should pass the name, value, and the number "
"of minutes the cookie should be considered valid to this method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:104
#, no-wrap
msgid ""
"    return response('Hello World')->cookie(\n"
"        'name', 'value', $minutes\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:106
msgid ""
"The `cookie` method also accepts a few more arguments which are used less "
"frequently. Generally, these arguments have the same purpose and meaning as "
"the arguments that would be given to PHP's native "
"[setcookie](https://secure.php.net/manual/en/function.setcookie.php) method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:110
#, no-wrap
msgid ""
"    return response('Hello World')->cookie(\n"
"        'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:112
msgid ""
"If you would like to ensure that a cookie is sent with the outgoing response "
"but you do not yet have an instance of that response, you can use the "
"`Cookie` facade to \"queue\" cookies for attachment to the response when it "
"is sent. The `queue` method accepts the arguments needed to create a cookie "
"instance. These cookies will be attached to the outgoing response before it "
"is sent to the browser:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:114
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Cookie;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:116
#, no-wrap
msgid "    Cookie::queue('name', 'value', $minutes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:118
#, no-wrap
msgid "<a name=\"generating-cookie-instances\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:118
#, no-wrap
msgid "Generating Cookie Instances"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:121
msgid ""
"If you would like to generate a `Symfony\\Component\\HttpFoundation\\Cookie` "
"instance that can be attached to a response instance at a later time, you "
"may use the global `cookie` helper. This cookie will not be sent back to the "
"client unless it is attached to a response instance:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:123
#, no-wrap
msgid "    $cookie = cookie('name', 'value', $minutes);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:125
#, no-wrap
msgid "    return response('Hello World')->cookie($cookie);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:127
#, no-wrap
msgid "<a name=\"expiring-cookies-early\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:127
#, no-wrap
msgid "Expiring Cookies Early"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:130
msgid ""
"You may remove a cookie by expiring it via the `withoutCookie` method of an "
"outgoing response:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:132
#, no-wrap
msgid "    return response('Hello World')->withoutCookie('name');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:134
msgid ""
"If you do not yet have an instance of the outgoing response, you may use the "
"`Cookie` facade's `queue` method to expire a cookie:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:136
#, no-wrap
msgid "    Cookie::queue(Cookie::forget('name'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:138
#, no-wrap
msgid "<a name=\"cookies-and-encryption\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:138
#, no-wrap
msgid "Cookies & Encryption"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:141
msgid ""
"By default, all cookies generated by Laravel are encrypted and signed so "
"that they can't be modified or read by the client. If you would like to "
"disable encryption for a subset of cookies generated by your application, "
"you may use the `$except` property of the "
"`App\\Http\\Middleware\\EncryptCookies` middleware, which is located in the "
"`app/Http/Middleware` directory:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:150
#, no-wrap
msgid ""
"    /**\n"
"     * The names of the cookies that should not be encrypted.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $except = [\n"
"        'cookie_name',\n"
"    ];\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:152
#, no-wrap
msgid "<a name=\"redirects\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:152
#, no-wrap
msgid "Redirects"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:155
msgid ""
"Redirect responses are instances of the `Illuminate\\Http\\RedirectResponse` "
"class, and contain the proper headers needed to redirect the user to another "
"URL. There are several ways to generate a `RedirectResponse` instance. The "
"simplest method is to use the global `redirect` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:159
#, no-wrap
msgid ""
"    Route::get('/dashboard', function () {\n"
"        return redirect('home/dashboard');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:161
msgid ""
"Sometimes you may wish to redirect the user to their previous location, such "
"as when a submitted form is invalid. You may do so by using the global "
"`back` helper function. Since this feature utilizes the "
"[session](/docs/{{version}}/session), make sure the route calling the `back` "
"function is using the `web` middleware group:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:164
#, no-wrap
msgid ""
"    Route::post('/user/profile', function () {\n"
"        // Validate the request...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:167
#, no-wrap
msgid ""
"        return back()->withInput();\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:169
#, no-wrap
msgid "<a name=\"redirecting-named-routes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:169
#, no-wrap
msgid "Redirecting To Named Routes"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:172
msgid ""
"When you call the `redirect` helper with no parameters, an instance of "
"`Illuminate\\Routing\\Redirector` is returned, allowing you to call any "
"method on the `Redirector` instance. For example, to generate a "
"`RedirectResponse` to a named route, you may use the `route` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:174
#, no-wrap
msgid "    return redirect()->route('login');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:176
msgid ""
"If your route has parameters, you may pass them as the second argument to "
"the `route` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:178 docs/8.x/responses.md:187
#, no-wrap
msgid "    // For a route with the following URI: /profile/{id}\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:180
#, no-wrap
msgid "    return redirect()->route('profile', ['id' => 1]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:182
#, no-wrap
msgid "<a name=\"populating-parameters-via-eloquent-models\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:182
#, no-wrap
msgid "Populating Parameters Via Eloquent Models"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:185
msgid ""
"If you are redirecting to a route with an \"ID\" parameter that is being "
"populated from an Eloquent model, you may pass the model itself. The ID will "
"be extracted automatically:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:189
#, no-wrap
msgid "    return redirect()->route('profile', [$user]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:191
msgid ""
"If you would like to customize the value that is placed in the route "
"parameter, you can specify the column in the route parameter definition "
"(`/profile/{id:slug}`) or you can override the `getRouteKey` method on your "
"Eloquent model:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:201
#, no-wrap
msgid ""
"    /**\n"
"     * Get the value of the model's route key.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function getRouteKey()\n"
"    {\n"
"        return $this->slug;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:203
#, no-wrap
msgid "<a name=\"redirecting-controller-actions\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:203
#, no-wrap
msgid "Redirecting To Controller Actions"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:206
msgid ""
"You may also generate redirects to [controller "
"actions](/docs/{{version}}/controllers). To do so, pass the controller and "
"action name to the `action` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:208
#, no-wrap
msgid "    use App\\Http\\Controllers\\UserController;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:210
#, no-wrap
msgid "    return redirect()->action([UserController::class, 'index']);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:212
msgid ""
"If your controller route requires parameters, you may pass them as the "
"second argument to the `action` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:216
#, no-wrap
msgid ""
"    return redirect()->action(\n"
"        [UserController::class, 'profile'], ['id' => 1]\n"
"    );\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:218
#, no-wrap
msgid "<a name=\"redirecting-external-domains\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:218
#, no-wrap
msgid "Redirecting To External Domains"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:221
msgid ""
"Sometimes you may need to redirect to a domain outside of your "
"application. You may do so by calling the `away` method, which creates a "
"`RedirectResponse` without any additional URL encoding, validation, or "
"verification:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:223
#, no-wrap
msgid "    return redirect()->away('https://www.google.com');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:225
#, no-wrap
msgid "<a name=\"redirecting-with-flashed-session-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:225
#, no-wrap
msgid "Redirecting With Flashed Session Data"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:228
msgid ""
"Redirecting to a new URL and [flashing data to the "
"session](/docs/{{version}}/session#flash-data) are usually done at the same "
"time. Typically, this is done after successfully performing an action when "
"you flash a success message to the session. For convenience, you may create "
"a `RedirectResponse` instance and flash data to the session in a single, "
"fluent method chain:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:231
#, no-wrap
msgid ""
"    Route::post('/user/profile', function () {\n"
"        // ...\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:234
#, no-wrap
msgid ""
"        return redirect('dashboard')->with('status', 'Profile updated!');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:236
msgid ""
"After the user is redirected, you may display the flashed message from the "
"[session](/docs/{{version}}/session). For example, using [Blade "
"syntax](/docs/{{version}}/blade):"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:242
#, no-wrap
msgid ""
"    @if (session('status'))\n"
"        <div class=\"alert alert-success\">\n"
"            {{ session('status') }}\n"
"        </div>\n"
"    @endif\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:244
#, no-wrap
msgid "<a name=\"redirecting-with-input\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:244
#, no-wrap
msgid "Redirecting With Input"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:247
msgid ""
"You may use the `withInput` method provided by the `RedirectResponse` "
"instance to flash the current request's input data to the session before "
"redirecting the user to a new location. This is typically done if the user "
"has encountered a validation error. Once the input has been flashed to the "
"session, you may easily [retrieve "
"it](/docs/{{version}}/requests#retrieving-old-input) during the next request "
"to repopulate the form:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:249
#, no-wrap
msgid "    return back()->withInput();\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:251
#, no-wrap
msgid "<a name=\"other-response-types\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:251
#, no-wrap
msgid "Other Response Types"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:254
msgid ""
"The `response` helper may be used to generate other types of response "
"instances. When the `response` helper is called without arguments, an "
"implementation of the `Illuminate\\Contracts\\Routing\\ResponseFactory` "
"[contract](/docs/{{version}}/contracts) is returned. This contract provides "
"several helpful methods for generating responses."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:256
#, no-wrap
msgid "<a name=\"view-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:256
#, no-wrap
msgid "View Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:259
msgid ""
"If you need control over the response's status and headers but also need to "
"return a [view](/docs/{{version}}/views) as the response's content, you "
"should use the `view` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:263
#, no-wrap
msgid ""
"    return response()\n"
"                ->view('hello', $data, 200)\n"
"                ->header('Content-Type', $type);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:265
msgid ""
"Of course, if you do not need to pass a custom HTTP status code or custom "
"headers, you may use the global `view` helper function."
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:267
#, no-wrap
msgid "<a name=\"json-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:267
#, no-wrap
msgid "JSON Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:270
msgid ""
"The `json` method will automatically set the `Content-Type` header to "
"`application/json`, as well as convert the given array to JSON using the "
"`json_encode` PHP function:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:275
#, no-wrap
msgid ""
"    return response()->json([\n"
"        'name' => 'Abigail',\n"
"        'state' => 'CA',\n"
"    ]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:277
msgid ""
"If you would like to create a JSONP response, you may use the `json` method "
"in combination with the `withCallback` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:281
#, no-wrap
msgid ""
"    return response()\n"
"                ->json(['name' => 'Abigail', 'state' => 'CA'])\n"
"                ->withCallback($request->input('callback'));\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:283
#, no-wrap
msgid "<a name=\"file-downloads\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:283
#, no-wrap
msgid "File Downloads"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:286
msgid ""
"The `download` method may be used to generate a response that forces the "
"user's browser to download the file at the given path. The `download` method "
"accepts a filename as the second argument to the method, which will "
"determine the filename that is seen by the user downloading the "
"file. Finally, you may pass an array of HTTP headers as the third argument "
"to the method:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:288
#, no-wrap
msgid "    return response()->download($pathToFile);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:290
#, no-wrap
msgid "    return response()->download($pathToFile, $name, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:292
#, no-wrap
msgid ""
"> {note} Symfony HttpFoundation, which manages file downloads, requires the "
"file being downloaded to have an ASCII filename.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:294
#, no-wrap
msgid "<a name=\"streamed-downloads\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/responses.md:294
#, no-wrap
msgid "Streamed Downloads"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:297
msgid ""
"Sometimes you may wish to turn the string response of a given operation into "
"a downloadable response without having to write the contents of the "
"operation to disk. You may use the `streamDownload` method in this "
"scenario. This method accepts a callback, filename, and an optional array of "
"headers as its arguments:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:299
#, no-wrap
msgid "    use App\\Services\\GitHub;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:305
#, no-wrap
msgid ""
"    return response()->streamDownload(function () {\n"
"        echo GitHub::api('repo')\n"
"                    ->contents()\n"
"                    ->readme('laravel', 'laravel')['contents'];\n"
"    }, 'laravel-readme.md');\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:307
#, no-wrap
msgid "<a name=\"file-responses\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/responses.md:307
#, no-wrap
msgid "File Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:310
msgid ""
"The `file` method may be used to display a file, such as an image or PDF, "
"directly in the user's browser instead of initiating a download. This method "
"accepts the path to the file as its first argument and an array of headers "
"as its second argument:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:312
#, no-wrap
msgid "    return response()->file($pathToFile);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:314
#, no-wrap
msgid "    return response()->file($pathToFile, $headers);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:316
#, no-wrap
msgid "<a name=\"response-macros\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/responses.md:316
#, no-wrap
msgid "Response Macros"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:319
msgid ""
"If you would like to define a custom response that you can re-use in a "
"variety of your routes and controllers, you may use the `macro` method on "
"the `Response` facade. Typically, you should call this method from the "
"`boot` method of one of your application's [service "
"providers](/docs/{{version}}/providers), such as the "
"`App\\Providers\\AppServiceProvider` service provider:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:321
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:323
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:326
#, no-wrap
msgid ""
"    use Illuminate\\Support\\Facades\\Response;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:341
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            Response::macro('caps', function ($value) {\n"
"                return Response::make(strtoupper($value));\n"
"            });\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:343
msgid ""
"The `macro` function accepts a name as its first argument and a closure as "
"its second argument. The macro's closure will be executed when calling the "
"macro name from a `ResponseFactory` implementation or the `response` helper:"
msgstr ""

#. type: Plain text
#: docs/8.x/responses.md:344
#, no-wrap
msgid "    return response()->caps('foo');\n"
msgstr ""
