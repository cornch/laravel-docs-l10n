#
msgid ""
msgstr ""

#: docs/10.x/mail.md:block 1 (header)
msgid "Mail"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Driver Prerequisites](#driver-prerequisites)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Failover Configuration](#failover-configuration)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Round Robin Configuration](#round-robin-configuration)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Generating Mailables](#generating-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Writing Mailables](#writing-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Configuring the Sender](#configuring-the-sender)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Configuring the View](#configuring-the-view)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[View Data](#view-data)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Attachments](#attachments)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Inline Attachments](#inline-attachments)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Attachable Objects](#attachable-objects)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Headers](#headers)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Tags and Metadata](#tags-and-metadata)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Customizing the Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Markdown Mailables](#markdown-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Generating Markdown Mailables](#generating-markdown-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Writing Markdown Messages](#writing-markdown-messages)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Customizing the Components](#customizing-the-components)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Sending Mail](#sending-mail)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Queueing Mail](#queueing-mail)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Rendering Mailables](#rendering-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Previewing Mailables in the Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Localizing Mailables](#localizing-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Testing](#testing-mailables)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Testing Mailable Content](#testing-mailable-content)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Testing Mailable Sending](#testing-mailable-sending)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Mail and Local Development](#mail-and-local-development)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Events](#events)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Custom Transports](#custom-transports)"
msgstr ""

#: docs/10.x/mail.md:block 2 (unordered list)
msgid "[Additional Symfony Transports](#additional-symfony-transports)"
msgstr ""

#: docs/10.x/mail.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.2/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/10.x/mail.md:block 7 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/mail.md:block 8 (paragraph)
msgid "Laravel's email services may be configured via your application's `config/mail.php` configuration file. Each mailer configured within this file may have its own unique configuration and even its own unique \"transport\", allowing your application to use different email services to send certain email messages. For example, your application might use Postmark to send transactional emails while using Amazon SES to send bulk emails."
msgstr ""

#: docs/10.x/mail.md:block 9 (paragraph)
msgid "Within your `mail` configuration file, you will find a `mailers` configuration array. This array contains a sample configuration entry for each of the major mail drivers / transports supported by Laravel, while the `default` configuration value determines which mailer will be used by default when your application needs to send an email message."
msgstr ""

#: docs/10.x/mail.md:block 11 (header)
msgid "Driver / Transport Prerequisites"
msgstr ""

#: docs/10.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun, Postmark, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: docs/10.x/mail.md:block 14 (header)
msgid "Mailgun Driver"
msgstr ""

#: docs/10.x/mail.md:block 15 (paragraph)
msgid "To use the Mailgun driver, install Symfony's Mailgun Mailer transport via Composer:"
msgstr ""

#: docs/10.x/mail.md:block 16 (code)
msgid "composer require symfony/mailgun-mailer symfony/http-client\n"
msgstr ""

#: docs/10.x/mail.md:block 17 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/10.x/mail.md:block 18 (code)
msgid ""
"'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 19 (paragraph)
msgid "If you are not using the United States [Mailgun region](https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions), you may define your region's endpoint in the `services` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 20 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 22 (header)
msgid "Postmark Driver"
msgstr ""

#: docs/10.x/mail.md:block 23 (paragraph)
msgid "To use the Postmark driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: docs/10.x/mail.md:block 24 (code)
msgid "composer require symfony/postmark-mailer symfony/http-client\n"
msgstr ""

#: docs/10.x/mail.md:block 25 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/10.x/mail.md:block 26 (code)
msgid ""
"'postmark' => [\n"
"    'token' => env('POSTMARK_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 27 (paragraph)
msgid "If you would like to specify the Postmark message stream that should be used by a given mailer, you may add the `message_stream_id` configuration option to the mailer's configuration array. This configuration array can be found in your application's `config/mail.php` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 28 (code)
msgid ""
"'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 29 (paragraph)
msgid "This way you are also able to set up multiple Postmark mailers with different message streams."
msgstr ""

#: docs/10.x/mail.md:block 31 (header)
msgid "SES Driver"
msgstr ""

#: docs/10.x/mail.md:block 32 (paragraph)
msgid "To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library via the Composer package manager:"
msgstr ""

#: docs/10.x/mail.md:block 33 (code)
msgid "composer require aws/aws-sdk-php\n"
msgstr ""

#: docs/10.x/mail.md:block 34 (paragraph)
msgid "Next, set the `default` option in your `config/mail.php` configuration file to `ses` and verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/10.x/mail.md:block 35 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 36 (paragraph)
msgid "To utilize AWS [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) via a session token, you may add a `token` key to your application's SES configuration:"
msgstr ""

#: docs/10.x/mail.md:block 37 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'token' => env('AWS_SESSION_TOKEN'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 38 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-sesv2-2019-09-27.html#sendemail) that Laravel should pass to the AWS SDK's `SendEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: docs/10.x/mail.md:block 39 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'EmailTags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 41 (header)
msgid "MailerSend Driver"
msgstr ""

#: docs/10.x/mail.md:block 42 (paragraph)
msgid "[MailerSend](https://www.mailersend.com/), a transactional email and SMS service, maintains their own API based mail driver for Laravel. The package containing the driver may be installed via the Composer package manager:"
msgstr ""

#: docs/10.x/mail.md:block 43 (code)
msgid "composer require mailersend/laravel-driver\n"
msgstr ""

#: docs/10.x/mail.md:block 44 (paragraph)
msgid "Once the package is installed, add the `MAILERSEND_API_KEY` environment variable to your application's `.env` file. In addition, the `MAIL_MAILER` environment variable should be defined as `mailersend`:"
msgstr ""

#: docs/10.x/mail.md:block 45 (code)
msgid ""
"MAIL_MAILER=mailersend\n"
"MAIL_FROM_ADDRESS=app@yourdomain.com\n"
"MAIL_FROM_NAME=\"App Name\"\n"
"\n"
"MAILERSEND_API_KEY=your-api-key\n"
msgstr ""

#: docs/10.x/mail.md:block 46 (paragraph)
msgid "To learn more about MailerSend, including how to use hosted templates, consult the [MailerSend driver documentation](https://github.com/mailersend/mailersend-laravel-driver#usage)."
msgstr ""

#: docs/10.x/mail.md:block 48 (header)
msgid "Failover Configuration"
msgstr ""

#: docs/10.x/mail.md:block 49 (paragraph)
msgid "Sometimes, an external service you have configured to send your application's mail may be down. In these cases, it can be useful to define one or more backup mail delivery configurations that will be used in case your primary delivery driver is down."
msgstr ""

#: docs/10.x/mail.md:block 50 (paragraph)
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which configured mailers should be chosen for delivery:"
msgstr ""

#: docs/10.x/mail.md:block 51 (code)
msgid ""
"'mailers' => [\n"
"    'failover' => [\n"
"        'transport' => 'failover',\n"
"        'mailers' => [\n"
"            'postmark',\n"
"            'mailgun',\n"
"            'sendmail',\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 52 (paragraph)
msgid "Once your failover mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 53 (code)
msgid "'default' => env('MAIL_MAILER', 'failover'),\n"
msgstr ""

#: docs/10.x/mail.md:block 55 (header)
msgid "Round Robin Configuration"
msgstr ""

#: docs/10.x/mail.md:block 56 (paragraph)
msgid "The `roundrobin` transport allows you to distribute your mailing workload across multiple mailers. To get started, define a mailer within your application's `mail` configuration file that uses the `roundrobin` transport. The configuration array for your application's `roundrobin` mailer should contain an array of `mailers` that reference which configured mailers should be used for delivery:"
msgstr ""

#: docs/10.x/mail.md:block 57 (code)
msgid ""
"'mailers' => [\n"
"    'roundrobin' => [\n"
"        'transport' => 'roundrobin',\n"
"        'mailers' => [\n"
"            'ses',\n"
"            'postmark',\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 58 (paragraph)
msgid "Once your round robin mailer has been defined, you should set this mailer as the default mailer used by your application by specifying its name as the value of the `default` configuration key within your application's `mail` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 59 (code)
msgid "'default' => env('MAIL_MAILER', 'roundrobin'),\n"
msgstr ""

#: docs/10.x/mail.md:block 60 (paragraph)
msgid "The round robin transport selects a random mailer from the list of configured mailers and then switches to the next available mailer for each subsequent email. In contrast to `failover` transport, which helps to achieve *[high availability](https://en.wikipedia.org/wiki/High_availability)*, the `roundrobin` transport provides *[load balancing](https://en.wikipedia.org/wiki/Load_balancing_(computing))*."
msgstr ""

#: docs/10.x/mail.md:block 62 (header)
msgid "Generating Mailables"
msgstr ""

#: docs/10.x/mail.md:block 63 (paragraph)
msgid "When building Laravel applications, each type of email sent by your application is represented as a \"mailable\" class. These classes are stored in the `app/Mail` directory. Don't worry if you don't see this directory in your application, since it will be generated for you when you create your first mailable class using the `make:mail` Artisan command:"
msgstr ""

#: docs/10.x/mail.md:block 64 (code)
msgid "php artisan make:mail OrderShipped\n"
msgstr ""

#: docs/10.x/mail.md:block 66 (header)
msgid "Writing Mailables"
msgstr ""

#: docs/10.x/mail.md:block 67 (paragraph)
msgid "Once you have generated a mailable class, open it up so we can explore its contents. Mailable class configuration is done in several methods, including the `envelope`, `content`, and `attachments` methods."
msgstr ""

#: docs/10.x/mail.md:block 68 (paragraph)
msgid "The `envelope` method returns an `Illuminate\\Mail\\Mailables\\Envelope` object that defines the subject and, sometimes, the recipients of the message. The `content` method returns an `Illuminate\\Mail\\Mailables\\Content` object that defines the [Blade template](/docs/{{version}}/blade) that will be used to generate the message content."
msgstr ""

#: docs/10.x/mail.md:block 70 (header)
msgid "Configuring the Sender"
msgstr ""

#: docs/10.x/mail.md:block 72 (header)
msgid "Using the Envelope"
msgstr ""

#: docs/10.x/mail.md:block 73 (paragraph)
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may specify the \"from\" address on your message's envelope:"
msgstr ""

#: docs/10.x/mail.md:block 74 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 75 (paragraph)
msgid "If you would like, you may also specify a `replyTo` address:"
msgstr ""

#: docs/10.x/mail.md:block 76 (code)
msgid ""
"return new Envelope(\n"
"    from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"    replyTo: [\n"
"        new Address('taylor@example.com', 'Taylor Otwell'),\n"
"    ],\n"
"    subject: 'Order Shipped',\n"
");\n"
msgstr ""

#: docs/10.x/mail.md:block 78 (header)
msgid "Using a Global `from` Address"
msgstr ""

#: docs/10.x/mail.md:block 79 (paragraph)
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to add it to each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#: docs/10.x/mail.md:block 80 (code)
msgid ""
"'from' => [\n"
"    'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n"
"    'name' => env('MAIL_FROM_NAME', 'Example'),\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 81 (paragraph)
msgid "In addition, you may define a global \"reply_to\" address within your `config/mail.php` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 82 (code)
msgid "'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/10.x/mail.md:block 84 (header)
msgid "Configuring the View"
msgstr ""

#: docs/10.x/mail.md:block 85 (paragraph)
msgid "Within a mailable class's `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: docs/10.x/mail.md:block 86 (code)
msgid ""
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 87 (quote)
msgid "[!NOTE] You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: docs/10.x/mail.md:block 89 (header)
msgid "Plain Text Emails"
msgstr ""

#: docs/10.x/mail.md:block 90 (paragraph)
msgid "If you would like to define a plain-text version of your email, you may specify the plain-text template when creating the message's `Content` definition. Like the `view` parameter, the `text` parameter should be a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#: docs/10.x/mail.md:block 91 (code)
msgid ""
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        view: 'mail.orders.shipped',\n"
"        text: 'mail.orders.shipped-text'\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 92 (paragraph)
msgid "For clarity, the `html` parameter may be used as an alias of the `view` parameter:"
msgstr ""

#: docs/10.x/mail.md:block 93 (code)
msgid ""
"return new Content(\n"
"    html: 'mail.orders.shipped',\n"
"    text: 'mail.orders.shipped-text'\n"
");\n"
msgstr ""

#: docs/10.x/mail.md:block 95 (header)
msgid "View Data"
msgstr ""

#: docs/10.x/mail.md:block 97 (header)
msgid "Via Public Properties"
msgstr ""

#: docs/10.x/mail.md:block 98 (paragraph)
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class's constructor and set that data to public properties defined on the class:"
msgstr ""

#: docs/10.x/mail.md:block 99 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        public Order $order,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 100 (paragraph)
msgid "Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: docs/10.x/mail.md:block 101 (code)
msgid ""
"<div>\n"
"    Price: {{ $order->price }}\n"
"</div>\n"
msgstr ""

#: docs/10.x/mail.md:block 103 (header)
msgid "Via the `with` Parameter:"
msgstr ""

#: docs/10.x/mail.md:block 104 (paragraph)
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class's constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr ""

#: docs/10.x/mail.md:block 105 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected Order $order,\n"
"    ) {}\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     */\n"
"    public function content(): Content\n"
"    {\n"
"        return new Content(\n"
"            view: 'mail.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 106 (paragraph)
msgid "Once the data has been passed to the `with` method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:"
msgstr ""

#: docs/10.x/mail.md:block 107 (code)
msgid ""
"<div>\n"
"    Price: {{ $orderPrice }}\n"
"</div>\n"
msgstr ""

#: docs/10.x/mail.md:block 109 (header)
msgid "Attachments"
msgstr ""

#: docs/10.x/mail.md:block 110 (paragraph)
msgid "To add attachments to an email, you will add attachments to the array returned by the message's `attachments` method. First, you may add an attachment by providing a file path to the `fromPath` method provided by the `Attachment` class:"
msgstr ""

#: docs/10.x/mail.md:block 111 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 112 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type for the attachment using the `as` and `withMime` methods:"
msgstr ""

#: docs/10.x/mail.md:block 113 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 115 (header)
msgid "Attaching Files From Disk"
msgstr ""

#: docs/10.x/mail.md:block 116 (paragraph)
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `fromStorage` attachment method:"
msgstr ""

#: docs/10.x/mail.md:block 117 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 118 (paragraph)
msgid "Of course, you may also specify the attachment's name and MIME type:"
msgstr ""

#: docs/10.x/mail.md:block 119 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 120 (paragraph)
msgid "The `fromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#: docs/10.x/mail.md:block 121 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 123 (header)
msgid "Raw Data Attachments"
msgstr ""

#: docs/10.x/mail.md:block 124 (paragraph)
msgid "The `fromData` attachment method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `fromData` method accepts a closure which resolves the raw data bytes as well as the name that the attachment should be assigned:"
msgstr ""

#: docs/10.x/mail.md:block 125 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 127 (header)
msgid "Inline Attachments"
msgstr ""

#: docs/10.x/mail.md:block 128 (paragraph)
msgid "Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails. To embed an inline image, use the `embed` method on the `$message` variable within your email template. Laravel automatically makes the `$message` variable available to all of your email templates, so you don't need to worry about passing it in manually:"
msgstr ""

#: docs/10.x/mail.md:block 129 (code)
msgid ""
"<body>\n"
"    Here is an image:\n"
"\n"
"    <img src=\"{{ $message->embed($pathToImage) }}\">\n"
"</body>\n"
msgstr ""

#: docs/10.x/mail.md:block 130 (quote)
msgid "[!WARNING] The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: docs/10.x/mail.md:block 132 (header)
msgid "Embedding Raw Data Attachments"
msgstr ""

#: docs/10.x/mail.md:block 133 (paragraph)
msgid "If you already have a raw image data string you wish to embed into an email template, you may call the `embedData` method on the `$message` variable. When calling the `embedData` method, you will need to provide a filename that should be assigned to the embedded image:"
msgstr ""

#: docs/10.x/mail.md:block 134 (code)
msgid ""
"<body>\n"
"    Here is an image from raw data:\n"
"\n"
"    <img src=\"{{ $message->embedData($data, 'example-image.jpg') }}\">\n"
"</body>\n"
msgstr ""

#: docs/10.x/mail.md:block 136 (header)
msgid "Attachable Objects"
msgstr ""

#: docs/10.x/mail.md:block 137 (paragraph)
msgid "While attaching files to messages via simple string paths is often sufficient, in many cases the attachable entities within your application are represented by classes. For example, if your application is attaching a photo to a message, your application may also have a `Photo` model that represents that photo. When that is the case, wouldn't it be convenient to simply pass the `Photo` model to the `attach` method? Attachable objects allow you to do just that."
msgstr ""

#: docs/10.x/mail.md:block 138 (paragraph)
msgid "To get started, implement the `Illuminate\\Contracts\\Mail\\Attachable` interface on the object that will be attachable to messages. This interface dictates that your class defines a `toMailAttachment` method that returns an `Illuminate\\Mail\\Attachment` instance:"
msgstr ""

#: docs/10.x/mail.md:block 139 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n"
"\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     */\n"
"    public function toMailAttachment(): Attachment\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 140 (paragraph)
msgid "Once you have defined your attachable object, you may return an instance of that object from the `attachments` method when building an email message:"
msgstr ""

#: docs/10.x/mail.md:block 141 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n"
" */\n"
"public function attachments(): array\n"
"{\n"
"    return [$this->photo];\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 142 (paragraph)
msgid "Of course, attachment data may be stored on a remote file storage service such as Amazon S3. So, Laravel also allows you to generate attachment instances from data that is stored on one of your application's [filesystem disks](/docs/{{version}}/filesystem):"
msgstr ""

#: docs/10.x/mail.md:block 143 (code)
msgid ""
"// Create an attachment from a file on your default disk...\n"
"return Attachment::fromStorage($this->path);\n"
"\n"
"// Create an attachment from a file on a specific disk...\n"
"return Attachment::fromStorageDisk('backblaze', $this->path);\n"
msgstr ""

#: docs/10.x/mail.md:block 144 (paragraph)
msgid "In addition, you may create attachment instances via data that you have in memory. To accomplish this, provide a closure to the `fromData` method. The closure should return the raw data that represents the attachment:"
msgstr ""

#: docs/10.x/mail.md:block 145 (code)
msgid "return Attachment::fromData(fn () => $this->content, 'Photo Name');\n"
msgstr ""

#: docs/10.x/mail.md:block 146 (paragraph)
msgid "Laravel also provides additional methods that you may use to customize your attachments. For example, you may use the `as` and `withMime` methods to customize the file's name and MIME type:"
msgstr ""

#: docs/10.x/mail.md:block 147 (code)
msgid ""
"return Attachment::fromPath('/path/to/file')\n"
"        ->as('Photo Name')\n"
"        ->withMime('image/jpeg');\n"
msgstr ""

#: docs/10.x/mail.md:block 149 (header)
msgid "Headers"
msgstr ""

#: docs/10.x/mail.md:block 150 (paragraph)
msgid "Sometimes you may need to attach additional headers to the outgoing message. For instance, you may need to set a custom `Message-Id` or other arbitrary text headers."
msgstr ""

#: docs/10.x/mail.md:block 151 (paragraph)
msgid "To accomplish this, define a `headers` method on your mailable. The `headers` method should return an `Illuminate\\Mail\\Mailables\\Headers` instance. This class accepts `messageId`, `references`, and `text` parameters. Of course, you may provide only the parameters you need for your particular message:"
msgstr ""

#: docs/10.x/mail.md:block 152 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Headers;\n"
"\n"
"/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 154 (header)
msgid "Tags and Metadata"
msgstr ""

#: docs/10.x/mail.md:block 155 (paragraph)
msgid "Some third-party email providers such as Mailgun and Postmark support message \"tags\" and \"metadata\", which may be used to group and track emails sent by your application. You may add tags and metadata to an email message via your `Envelope` definition:"
msgstr ""

#: docs/10.x/mail.md:block 156 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 157 (paragraph)
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) and [metadata](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: docs/10.x/mail.md:block 158 (paragraph)
msgid "If your application is using Amazon SES to send emails, you should use the `metadata` method to attach [SES \"tags\"](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html) to the message."
msgstr ""

#: docs/10.x/mail.md:block 160 (header)
msgid "Customizing the Symfony Message"
msgstr ""

#: docs/10.x/mail.md:block 161 (paragraph)
msgid "Laravel's mail capabilities are powered by Symfony Mailer. Laravel allows you to register custom callbacks that will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is sent. To accomplish this, define a `using` parameter on your `Envelope` definition:"
msgstr ""

#: docs/10.x/mail.md:block 162 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" */\n"
"public function envelope(): Envelope\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 164 (header)
msgid "Markdown Mailables"
msgstr ""

#: docs/10.x/mail.md:block 165 (paragraph)
msgid "Markdown mailable messages allow you to take advantage of the pre-built templates and components of [mail notifications](/docs/{{version}}/notifications#mail-notifications) in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: docs/10.x/mail.md:block 167 (header)
msgid "Generating Markdown Mailables"
msgstr ""

#: docs/10.x/mail.md:block 168 (paragraph)
msgid "To generate a mailable with a corresponding Markdown template, you may use the `--markdown` option of the `make:mail` Artisan command:"
msgstr ""

#: docs/10.x/mail.md:block 169 (code)
msgid "php artisan make:mail OrderShipped --markdown=mail.orders.shipped\n"
msgstr ""

#: docs/10.x/mail.md:block 170 (paragraph)
msgid "Then, when configuring the mailable `Content` definition within its `content` method, use the `markdown` parameter instead of the `view` parameter:"
msgstr ""

#: docs/10.x/mail.md:block 171 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Content;\n"
"\n"
"/**\n"
" * Get the message content definition.\n"
" */\n"
"public function content(): Content\n"
"{\n"
"    return new Content(\n"
"        markdown: 'mail.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 173 (header)
msgid "Writing Markdown Messages"
msgstr ""

#: docs/10.x/mail.md:block 174 (paragraph)
msgid "Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel's pre-built email UI components:"
msgstr ""

#: docs/10.x/mail.md:block 175 (code)
msgid ""
"<x-mail::message>\n"
"# Order Shipped\n"
"\n"
"Your order has been shipped!\n"
"\n"
"<x-mail::button :url=\"$url\">\n"
"View Order\n"
"</x-mail::button>\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"</x-mail::message>\n"
msgstr ""

#: docs/10.x/mail.md:block 176 (quote)
msgid "[!NOTE] Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: docs/10.x/mail.md:block 178 (header)
msgid "Button Component"
msgstr ""

#: docs/10.x/mail.md:block 179 (paragraph)
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `success`, and `error`. You may add as many button components to a message as you wish:"
msgstr ""

#: docs/10.x/mail.md:block 180 (code)
msgid ""
"<x-mail::button :url=\"$url\" color=\"success\">\n"
"View Order\n"
"</x-mail::button>\n"
msgstr ""

#: docs/10.x/mail.md:block 182 (header)
msgid "Panel Component"
msgstr ""

#: docs/10.x/mail.md:block 183 (paragraph)
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:"
msgstr ""

#: docs/10.x/mail.md:block 184 (code)
msgid ""
"<x-mail::panel>\n"
"This is the panel content.\n"
"</x-mail::panel>\n"
msgstr ""

#: docs/10.x/mail.md:block 186 (header)
msgid "Table Component"
msgstr ""

#: docs/10.x/mail.md:block 187 (paragraph)
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: docs/10.x/mail.md:block 188 (code)
msgid ""
"<x-mail::table>\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"</x-mail::table>\n"
msgstr ""

#: docs/10.x/mail.md:block 190 (header)
msgid "Customizing the Components"
msgstr ""

#: docs/10.x/mail.md:block 191 (paragraph)
msgid "You may export all of the Markdown mail components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: docs/10.x/mail.md:block 192 (code)
msgid "php artisan vendor:publish --tag=laravel-mail\n"
msgstr ""

#: docs/10.x/mail.md:block 193 (paragraph)
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: docs/10.x/mail.md:block 195 (header)
msgid "Customizing the CSS"
msgstr ""

#: docs/10.x/mail.md:block 196 (paragraph)
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be converted to inline CSS styles within the HTML representations of your Markdown mail messages."
msgstr ""

#: docs/10.x/mail.md:block 197 (paragraph)
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of your application's `config/mail.php` configuration file to match the name of your new theme."
msgstr ""

#: docs/10.x/mail.md:block 198 (paragraph)
msgid "To customize the theme for an individual mailable, you may set the `$theme` property of the mailable class to the name of the theme that should be used when sending that mailable."
msgstr ""

#: docs/10.x/mail.md:block 200 (header)
msgid "Sending Mail"
msgstr ""

#: docs/10.x/mail.md:block 201 (paragraph)
msgid "To send a message, use the `to` method on the `Mail` [facade](/docs/{{version}}/facades). The `to` method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their `email` and `name` properties when determining the email's recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the `send` method:"
msgstr ""

#: docs/10.x/mail.md:block 202 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Ship the order...\n"
"\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"\n"
"        return redirect('/orders');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 203 (paragraph)
msgid "You are not limited to just specifying the \"to\" recipients when sending a message. You are free to set \"to\", \"cc\", and \"bcc\" recipients by chaining their respective methods together:"
msgstr ""

#: docs/10.x/mail.md:block 204 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/10.x/mail.md:block 206 (header)
msgid "Looping Over Recipients"
msgstr ""

#: docs/10.x/mail.md:block 207 (paragraph)
msgid "Occasionally, you may need to send a mailable to a list of recipients by iterating over an array of recipients / email addresses. However, since the `to` method appends email addresses to the mailable's list of recipients, each iteration through the loop will send another email to every previous recipient. Therefore, you should always re-create the mailable instance for each recipient:"
msgstr ""

#: docs/10.x/mail.md:block 208 (code)
msgid ""
"foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {\n"
"    Mail::to($recipient)->send(new OrderShipped($order));\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 210 (header)
msgid "Sending Mail via a Specific Mailer"
msgstr ""

#: docs/10.x/mail.md:block 211 (paragraph)
msgid "By default, Laravel will send email using the mailer configured as the `default` mailer in your application's `mail` configuration file. However, you may use the `mailer` method to send a message using a specific mailer configuration:"
msgstr ""

#: docs/10.x/mail.md:block 212 (code)
msgid ""
"Mail::mailer('postmark')\n"
"        ->to($request->user())\n"
"        ->send(new OrderShipped($order));\n"
msgstr ""

#: docs/10.x/mail.md:block 214 (header)
msgid "Queueing Mail"
msgstr ""

#: docs/10.x/mail.md:block 216 (header)
msgid "Queueing a Mail Message"
msgstr ""

#: docs/10.x/mail.md:block 217 (paragraph)
msgid "Since sending email messages can negatively impact the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in [unified queue API](/docs/{{version}}/queues). To queue a mail message, use the `queue` method on the `Mail` facade after specifying the message's recipients:"
msgstr ""

#: docs/10.x/mail.md:block 218 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue(new OrderShipped($order));\n"
msgstr ""

#: docs/10.x/mail.md:block 219 (paragraph)
msgid "This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to [configure your queues](/docs/{{version}}/queues) before using this feature."
msgstr ""

#: docs/10.x/mail.md:block 221 (header)
msgid "Delayed Message Queueing"
msgstr ""

#: docs/10.x/mail.md:block 222 (paragraph)
msgid "If you wish to delay the delivery of a queued email message, you may use the `later` method. As its first argument, the `later` method accepts a `DateTime` instance indicating when the message should be sent:"
msgstr ""

#: docs/10.x/mail.md:block 223 (code)
msgid ""
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->later(now()->addMinutes(10), new OrderShipped($order));\n"
msgstr ""

#: docs/10.x/mail.md:block 225 (header)
msgid "Pushing to Specific Queues"
msgstr ""

#: docs/10.x/mail.md:block 226 (paragraph)
msgid "Since all mailable classes generated using the `make:mail` command make use of the `Illuminate\\Bus\\Queueable` trait, you may call the `onQueue` and `onConnection` methods on any mailable class instance, allowing you to specify the connection and queue name for the message:"
msgstr ""

#: docs/10.x/mail.md:block 227 (code)
msgid ""
"$message = (new OrderShipped($order))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('emails');\n"
"\n"
"Mail::to($request->user())\n"
"    ->cc($moreUsers)\n"
"    ->bcc($evenMoreUsers)\n"
"    ->queue($message);\n"
msgstr ""

#: docs/10.x/mail.md:block 229 (header)
msgid "Queueing by Default"
msgstr ""

#: docs/10.x/mail.md:block 230 (paragraph)
msgid "If you have mailable classes that you want to always be queued, you may implement the `ShouldQueue` contract on the class. Now, even if you call the `send` method when mailing, the mailable will still be queued since it implements the contract:"
msgstr ""

#: docs/10.x/mail.md:block 231 (code)
msgid ""
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 233 (header)
msgid "Queued Mailables and Database Transactions"
msgstr ""

#: docs/10.x/mail.md:block 234 (paragraph)
msgid "When queued mailables are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your mailable depends on these models, unexpected errors can occur when the job that sends the queued mailable is processed."
msgstr ""

#: docs/10.x/mail.md:block 235 (paragraph)
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued mailable should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the mail message:"
msgstr ""

#: docs/10.x/mail.md:block 236 (code)
msgid ""
"Mail::to($request->user())->send(\n"
"    (new OrderShipped($order))->afterCommit()\n"
");\n"
msgstr ""

#: docs/10.x/mail.md:block 237 (paragraph)
msgid "Alternatively, you may call the `afterCommit` method from your mailable's constructor:"
msgstr ""

#: docs/10.x/mail.md:block 238 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 239 (quote)
msgid "[!NOTE] To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/10.x/mail.md:block 241 (header)
msgid "Rendering Mailables"
msgstr ""

#: docs/10.x/mail.md:block 242 (paragraph)
msgid "Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the `render` method of the mailable. This method will return the evaluated HTML content of the mailable as a string:"
msgstr ""

#: docs/10.x/mail.md:block 243 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\Invoice;\n"
"\n"
"$invoice = Invoice::find(1);\n"
"\n"
"return (new InvoicePaid($invoice))->render();\n"
msgstr ""

#: docs/10.x/mail.md:block 245 (header)
msgid "Previewing Mailables in the Browser"
msgstr ""

#: docs/10.x/mail.md:block 246 (paragraph)
msgid "When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: docs/10.x/mail.md:block 247 (code)
msgid ""
"Route::get('/mailable', function () {\n"
"    $invoice = App\\Models\\Invoice::find(1);\n"
"\n"
"    return new App\\Mail\\InvoicePaid($invoice);\n"
"});\n"
msgstr ""

#: docs/10.x/mail.md:block 249 (header)
msgid "Localizing Mailables"
msgstr ""

#: docs/10.x/mail.md:block 250 (paragraph)
msgid "Laravel allows you to send mailables in a locale other than the request's current locale, and will even remember this locale if the mail is queued."
msgstr ""

#: docs/10.x/mail.md:block 251 (paragraph)
msgid "To accomplish this, the `Mail` facade offers a `locale` method to set the desired language. The application will change into this locale when the mailable's template is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: docs/10.x/mail.md:block 252 (code)
msgid ""
"Mail::to($request->user())->locale('es')->send(\n"
"    new OrderShipped($order)\n"
");\n"
msgstr ""

#: docs/10.x/mail.md:block 254 (header)
msgid "User Preferred Locales"
msgstr ""

#: docs/10.x/mail.md:block 255 (paragraph)
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:"
msgstr ""

#: docs/10.x/mail.md:block 256 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     */\n"
"    public function preferredLocale(): string\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 257 (paragraph)
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: docs/10.x/mail.md:block 258 (code)
msgid "Mail::to($request->user())->send(new OrderShipped($order));\n"
msgstr ""

#: docs/10.x/mail.md:block 260 (header)
msgid "Testing"
msgstr ""

#: docs/10.x/mail.md:block 262 (header)
msgid "Testing Mailable Content"
msgstr ""

#: docs/10.x/mail.md:block 263 (paragraph)
msgid "Laravel provides a variety of methods for inspecting your mailable's structure. In addition, Laravel provides several convenient methods for testing that your mailable contains the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInOrderInHtml`, `assertSeeInText`, `assertDontSeeInText`, `assertSeeInOrderInText`, `assertHasAttachment`, `assertHasAttachedData`, `assertHasAttachmentFromStorage`, and `assertHasAttachmentFromStorageDisk`."
msgstr ""

#: docs/10.x/mail.md:block 264 (paragraph)
msgid "As you might expect, the \"HTML\" assertions assert that the HTML version of your mailable contains a given string, while the \"text\" assertions assert that the plain-text version of your mailable contains a given string:"
msgstr ""

#: docs/10.x/mail.md:block 265 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content(): void\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 267 (header)
msgid "Testing Mailable Sending"
msgstr ""

#: docs/10.x/mail.md:block 268 (paragraph)
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. Typically, the content of mailables is not relevant to the code you are testing, and it is sufficient to simply assert that Laravel was instructed to send a given mailable."
msgstr ""

#: docs/10.x/mail.md:block 269 (paragraph)
msgid "You may use the `Mail` facade's `fake` method to prevent mail from being sent. After calling the `Mail` facade's `fake` method, you may then assert that mailables were instructed to be sent to users and even inspect the data the mailables received:"
msgstr ""

#: docs/10.x/mail.md:block 270 (code)
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Mail::fake();\n"
"\n"
"        // Perform order shipping...\n"
"\n"
"        // Assert that no mailables were sent...\n"
"        Mail::assertNothingSent();\n"
"\n"
"        // Assert that a mailable was sent...\n"
"        Mail::assertSent(OrderShipped::class);\n"
"\n"
"        // Assert a mailable was sent twice...\n"
"        Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"        // Assert a mailable was not sent...\n"
"        Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"        // Assert 3 total mailables were sent...\n"
"        Mail::assertSentCount(3);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 271 (paragraph)
msgid "If you are queueing mailables for delivery in the background, you should use the `assertQueued` method instead of `assertSent`:"
msgstr ""

#: docs/10.x/mail.md:block 272 (code)
msgid ""
"Mail::assertQueued(OrderShipped::class);\n"
"Mail::assertNotQueued(OrderShipped::class);\n"
"Mail::assertNothingQueued();\n"
"Mail::assertQueuedCount(3);\n"
msgstr ""

#: docs/10.x/mail.md:block 273 (paragraph)
msgid "You may pass a closure to the `assertSent`, `assertNotSent`, `assertQueued`, or `assertNotQueued` methods in order to assert that a mailable was sent that passes a given \"truth test\". If at least one mailable was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: docs/10.x/mail.md:block 274 (code)
msgid ""
"Mail::assertSent(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/10.x/mail.md:block 275 (paragraph)
msgid "When calling the `Mail` facade's assertion methods, the mailable instance accepted by the provided closure exposes helpful methods for examining the mailable:"
msgstr ""

#: docs/10.x/mail.md:block 276 (code)
msgid ""
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($user) {\n"
"    return $mail->hasTo($user->email) &&\n"
"           $mail->hasCc('...') &&\n"
"           $mail->hasBcc('...') &&\n"
"           $mail->hasReplyTo('...') &&\n"
"           $mail->hasFrom('...') &&\n"
"           $mail->hasSubject('...');\n"
"});\n"
msgstr ""

#: docs/10.x/mail.md:block 277 (paragraph)
msgid "The mailable instance also includes several helpful methods for examining the attachments on a mailable:"
msgstr ""

#: docs/10.x/mail.md:block 278 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf')\n"
"    );\n"
"});\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"    );\n"
"});\n"
"\n"
"Mail::assertSent(OrderShipped::class, function (OrderShipped $mail) use ($pdfData) {\n"
"    return $mail->hasAttachment(\n"
"        Attachment::fromData(fn () => $pdfData, 'name.pdf')\n"
"    );\n"
"});\n"
msgstr ""

#: docs/10.x/mail.md:block 279 (paragraph)
msgid "You may have noticed that there are two methods for asserting that mail was not sent: `assertNotSent` and `assertNotQueued`. Sometimes you may wish to assert that no mail was sent **or** queued. To accomplish this, you may use the `assertNothingOutgoing` and `assertNotOutgoing` methods:"
msgstr ""

#: docs/10.x/mail.md:block 280 (code)
msgid ""
"Mail::assertNothingOutgoing();\n"
"\n"
"Mail::assertNotOutgoing(function (OrderShipped $mail) use ($order) {\n"
"    return $mail->order->id === $order->id;\n"
"});\n"
msgstr ""

#: docs/10.x/mail.md:block 282 (header)
msgid "Mail and Local Development"
msgstr ""

#: docs/10.x/mail.md:block 283 (paragraph)
msgid "When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to \"disable\" the actual sending of emails during local development."
msgstr ""

#: docs/10.x/mail.md:block 285 (header)
msgid "Log Driver"
msgstr ""

#: docs/10.x/mail.md:block 286 (paragraph)
msgid "Instead of sending your emails, the `log` mail driver will write all email messages to your log files for inspection. Typically, this driver would only be used during local development. For more information on configuring your application per environment, check out the [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#: docs/10.x/mail.md:block 288 (header)
msgid "HELO / Mailtrap / Mailpit"
msgstr ""

#: docs/10.x/mail.md:block 289 (paragraph)
msgid "Alternatively, you may use a service like [HELO](https://usehelo.com) or [Mailtrap](https://mailtrap.io) and the `smtp` driver to send your email messages to a \"dummy\" mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap's message viewer."
msgstr ""

#: docs/10.x/mail.md:block 290 (paragraph)
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [Mailpit](https://github.com/axllent/mailpit). When Sail is running, you may access the Mailpit interface at: `http://localhost:8025`."
msgstr ""

#: docs/10.x/mail.md:block 292 (header)
msgid "Using a Global `to` Address"
msgstr ""

#: docs/10.x/mail.md:block 293 (paragraph)
msgid "Finally, you may specify a global \"to\" address by invoking the `alwaysTo` method offered by the `Mail` facade. Typically, this method should be called from the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/10.x/mail.md:block 294 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 296 (header)
msgid "Events"
msgstr ""

#: docs/10.x/mail.md:block 297 (paragraph)
msgid "Laravel fires two events during the process of sending mail messages. The `MessageSending` event is fired prior to a message being sent, while the `MessageSent` event is fired after a message has been sent. Remember, these events are fired when the mail is being *sent*, not when it is queued. You may register event listeners for this event in your `App\\Providers\\EventServiceProvider` service provider:"
msgstr ""

#: docs/10.x/mail.md:block 298 (code)
msgid ""
"use App\\Listeners\\LogSendingMessage;\n"
"use App\\Listeners\\LogSentMessage;\n"
"use Illuminate\\Mail\\Events\\MessageSending;\n"
"use Illuminate\\Mail\\Events\\MessageSent;\n"
"\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    MessageSending::class => [\n"
"        LogSendingMessage::class,\n"
"    ],\n"
"\n"
"    MessageSent::class => [\n"
"        LogSentMessage::class,\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/10.x/mail.md:block 300 (header)
msgid "Custom Transports"
msgstr ""

#: docs/10.x/mail.md:block 301 (paragraph)
msgid "Laravel includes a variety of mail transports; however, you may wish to write your own transports to deliver email via other services that Laravel does not support out of the box. To get started, define a class that extends the `Symfony\\Component\\Mailer\\Transport\\AbstractTransport` class. Then, implement the `doSend` and `__toString()` methods on your transport:"
msgstr ""

#: docs/10.x/mail.md:block 302 (code)
msgid ""
"use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\Address;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n"
"\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     */\n"
"    public function __construct(\n"
"        protected ApiClient $client,\n"
"    ) {\n"
"        parent::__construct();\n"
"    }\n"
"\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n"
"\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function (Address $email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 303 (paragraph)
msgid "Once you've defined your custom transport, you may register it via the `extend` method provided by the `Mail` facade. Typically, this should be done within the `boot` method of your application's `AppServiceProvider` service provider. A `$config` argument will be passed to the closure provided to the `extend` method. This argument will contain the configuration array defined for the mailer in the application's `config/mail.php` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 304 (code)
msgid ""
"use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 305 (paragraph)
msgid "Once your custom transport has been defined and registered, you may create a mailer definition within your application's `config/mail.php` configuration file that utilizes the new transport:"
msgstr ""

#: docs/10.x/mail.md:block 306 (code)
msgid ""
"'mailchimp' => [\n"
"    'transport' => 'mailchimp',\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 308 (header)
msgid "Additional Symfony Transports"
msgstr ""

#: docs/10.x/mail.md:block 309 (paragraph)
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Brevo\" (formerly \"Sendinblue\") Symfony mailer:"
msgstr ""

#: docs/10.x/mail.md:block 310 (code)
msgid "composer require symfony/brevo-mailer symfony/http-client\n"
msgstr ""

#: docs/10.x/mail.md:block 311 (paragraph)
msgid "Once the Brevo mailer package has been installed, you may add an entry for your Brevo API credentials to your application's `services` configuration file:"
msgstr ""

#: docs/10.x/mail.md:block 312 (code)
msgid ""
"'brevo' => [\n"
"    'key' => 'your-api-key',\n"
"],\n"
msgstr ""

#: docs/10.x/mail.md:block 313 (paragraph)
msgid "Next, you may use the `Mail` facade's `extend` method to register the transport with Laravel. Typically, this should be done within the `boot` method of a service provider:"
msgstr ""

#: docs/10.x/mail.md:block 314 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Brevo\\Transport\\BrevoTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Mail::extend('brevo', function () {\n"
"        return (new BrevoTransportFactory)->create(\n"
"            new Dsn(\n"
"                'brevo+api',\n"
"                'default',\n"
"                config('services.brevo.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/mail.md:block 315 (paragraph)
msgid "Once your transport has been registered, you may create a mailer definition within your application's config/mail.php configuration file that utilizes the new transport:"
msgstr ""

#: docs/10.x/mail.md:block 316 (code)
msgid ""
"'brevo' => [\n"
"    'transport' => 'brevo',\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Resend, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/11.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun, Postmark, Resend, and MailerSend are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: docs/11.x/mail.md:block 17 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `mailgun` and add the following configuration array to your array of `mailers`:"
msgstr ""

#: docs/11.x/mail.md:block 18 (code)
msgid ""
"'mailgun' => [\n"
"    'transport' => 'mailgun',\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 19 (paragraph)
msgid "After configuring your application's default mailer, add the following options to your `config/services.php` configuration file:"
msgstr ""

#: docs/11.x/mail.md:block 20 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 22 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"    'endpoint' => env('MAILGUN_ENDPOINT', 'api.eu.mailgun.net'),\n"
"    'scheme' => 'https',\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 25 (paragraph)
msgid "To use the [Postmark](https://postmarkapp.com/) driver, install Symfony's Postmark Mailer transport via Composer:"
msgstr ""

#: docs/11.x/mail.md:block 27 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `postmark`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/11.x/mail.md:block 30 (code)
msgid ""
"'postmark' => [\n"
"    'transport' => 'postmark',\n"
"    'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),\n"
"    // 'client' => [\n"
"    //     'timeout' => 5,\n"
"    // ],\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 33 (header)
msgid "Resend Driver"
msgstr ""

#: docs/11.x/mail.md:block 34 (paragraph)
msgid "To use the [Resend](https://resend.com/) driver, install Resend's PHP SDK via Composer:"
msgstr ""

#: docs/11.x/mail.md:block 35 (code)
msgid "composer require resend/resend-php\n"
msgstr ""

#: docs/11.x/mail.md:block 36 (paragraph)
msgid "Next, set the `default` option in your application's `config/mail.php` configuration file to `resend`. After configuring your application's default mailer, ensure that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/11.x/mail.md:block 37 (code)
msgid ""
"'resend' => [\n"
"    'key' => env('RESEND_KEY'),\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 46 (paragraph)
msgid "To interact with SES's [subscription management features](https://docs.aws.amazon.com/ses/latest/dg/sending-email-subscription-management.html), you may return the `X-Ses-List-Management-Options` header in the array returned by the [`headers`](#headers) method of a mail message:"
msgstr ""

#: docs/11.x/mail.md:block 47 (code)
msgid ""
"/**\n"
" * Get the message headers.\n"
" */\n"
"public function headers(): Headers\n"
"{\n"
"    return new Headers(\n"
"        text: [\n"
"            'X-Ses-List-Management-Options' => 'contactListName=MyContactList;topicName=MyTopic',\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/11.x/mail.md:block 56 (paragraph)
msgid "Finally, add MailerSend to the `mailers` array in your application's `config/mail.php` configuration file:"
msgstr ""

#: docs/11.x/mail.md:block 57 (code)
msgid ""
"'mailersend' => [\n"
"    'transport' => 'mailersend',\n"
"],\n"
msgstr ""

#: docs/11.x/mail.md:block 277 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"test('mailable content', function () {\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"});\n"
msgstr ""

#: docs/11.x/mail.md:block 283 (code)
msgid ""
"<?php\n"
"\n"
"use App\\Mail\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"test('orders can be shipped', function () {\n"
"    Mail::fake();\n"
"\n"
"    // Perform order shipping...\n"
"\n"
"    // Assert that no mailables were sent...\n"
"    Mail::assertNothingSent();\n"
"\n"
"    // Assert that a mailable was sent...\n"
"    Mail::assertSent(OrderShipped::class);\n"
"\n"
"    // Assert a mailable was sent twice...\n"
"    Mail::assertSent(OrderShipped::class, 2);\n"
"\n"
"    // Assert a mailable was not sent...\n"
"    Mail::assertNotSent(AnotherMailable::class);\n"
"\n"
"    // Assert 3 total mailables were sent...\n"
"    Mail::assertSentCount(3);\n"
"});\n"
msgstr ""

#: docs/11.x/mail.md:block 311 (paragraph)
msgid "Laravel dispatches two events while sending mail messages. The `MessageSending` event is dispatched prior to a message being sent, while the `MessageSent` event is dispatched after a message has been sent. Remember, these events are dispatched when the mail is being *sent*, not when it is queued. You may create [event listeners](/docs/{{version}}/events) for these events within your application:"
msgstr ""

#: docs/11.x/mail.md:block 312 (code)
msgid ""
"use Illuminate\\Mail\\Events\\MessageSending;\n"
"// use Illuminate\\Mail\\Events\\MessageSent;\n"
"\n"
"class LogMessage\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(MessageSending $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The Sender](#configuring-the-sender)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Configuring The View](#configuring-the-view)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The SwiftMailer Message](#customizing-the-swiftmailer-message)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Previewing Mailables In The Browser](#previewing-mailables-in-the-browser)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Testing Mailables](#testing-mailables)"
msgstr ""

#: docs/8.x/mail.md:block 2 (unordered list)
msgid "[Mail & Local Development](#mail-and-local-development)"
msgstr ""

#: docs/8.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [SwiftMailer](https://swiftmailer.symfony.com/) library. Laravel and SwiftMailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/8.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers. All of the API based drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:"
msgstr ""

#: docs/8.x/mail.md:block 13 (code)
msgid "composer require guzzlehttp/guzzle\n"
msgstr ""

#: docs/8.x/mail.md:block 16 (paragraph)
msgid "To use the Mailgun driver, first install the Guzzle HTTP library. Then, set the `default` option in your `config/mail.php` configuration file to `mailgun`. Next, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/8.x/mail.md:block 17 (code)
msgid ""
"'mailgun' => [\n"
"    'domain' => env('MAILGUN_DOMAIN'),\n"
"    'secret' => env('MAILGUN_SECRET'),\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 22 (paragraph)
msgid "To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:"
msgstr ""

#: docs/8.x/mail.md:block 23 (code)
msgid "composer require wildbit/swiftmailer-postmark\n"
msgstr ""

#: docs/8.x/mail.md:block 24 (paragraph)
msgid "Next, install the Guzzle HTTP library and set the `default` option in your `config/mail.php` configuration file to `postmark`. Finally, verify that your `config/services.php` configuration file contains the following options:"
msgstr ""

#: docs/8.x/mail.md:block 37 (paragraph)
msgid "If you would like to define [additional options](https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail) that Laravel should pass to the AWS SDK's `SendRawEmail` method when sending an email, you may define an `options` array within your `ses` configuration:"
msgstr ""

#: docs/8.x/mail.md:block 38 (code)
msgid ""
"'ses' => [\n"
"    'key' => env('AWS_ACCESS_KEY_ID'),\n"
"    'secret' => env('AWS_SECRET_ACCESS_KEY'),\n"
"    'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n"
"    'options' => [\n"
"        'ConfigurationSetName' => 'MyConfigurationSet',\n"
"        'Tags' => [\n"
"            ['Name' => 'foo', 'Value' => 'bar'],\n"
"        ],\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/mail.md:block 42 (paragraph)
msgid "To accomplish this, you should define a mailer within your application's `mail` configuration file that uses the `failover` transport. The configuration array for your application's `failover` mailer should contain an array of `mailers` that reference the order in which mail drivers should be chosen for delivery:"
msgstr ""

#: docs/8.x/mail.md:block 52 (paragraph)
msgid "Once you have generated a mailable class, open it up so we can explore its contents. First, note that all of a mailable class' configuration is done in the `build` method. Within this method, you may call various methods such as `from`, `subject`, `view`, and `attach` to configure the email's presentation and delivery."
msgstr ""

#: docs/8.x/mail.md:block 53 (quote)
msgid "{tip} You may type-hint dependencies on the mailable's `build` method. The Laravel [service container](/docs/{{version}}/container) automatically injects these dependencies."
msgstr ""

#: docs/8.x/mail.md:block 55 (header)
msgid "Configuring The Sender"
msgstr ""

#: docs/8.x/mail.md:block 57 (header)
msgid "Using The `from` Method"
msgstr ""

#: docs/8.x/mail.md:block 58 (paragraph)
msgid "First, let's explore configuring the sender of the email. Or, in other words, who the email is going to be \"from\". There are two ways to configure the sender. First, you may use the `from` method within your mailable class' `build` method:"
msgstr ""

#: docs/8.x/mail.md:block 59 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com', 'Example')\n"
"                ->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 61 (header)
msgid "Using A Global `from` Address"
msgstr ""

#: docs/8.x/mail.md:block 62 (paragraph)
msgid "However, if your application uses the same \"from\" address for all of its emails, it can become cumbersome to call the `from` method in each mailable class you generate. Instead, you may specify a global \"from\" address in your `config/mail.php` configuration file. This address will be used if no other \"from\" address is specified within the mailable class:"
msgstr ""

#: docs/8.x/mail.md:block 63 (code)
msgid "'from' => ['address' => 'example@example.com', 'name' => 'App Name'],\n"
msgstr ""

#: docs/8.x/mail.md:block 67 (header)
msgid "Configuring The View"
msgstr ""

#: docs/8.x/mail.md:block 68 (paragraph)
msgid "Within a mailable class' `build` method, you may use the `view` method to specify which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: docs/8.x/mail.md:block 69 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 70 (quote)
msgid "{tip} You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: docs/8.x/mail.md:block 73 (paragraph)
msgid "If you would like to define a plain-text version of your email, you may use the `text` method. Like the `view` method, the `text` method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:"
msgstr ""

#: docs/8.x/mail.md:block 74 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->text('emails.orders.shipped_plain');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 79 (paragraph)
msgid "Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class' constructor and set that data to public properties defined on the class:"
msgstr ""

#: docs/8.x/mail.md:block 80 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 84 (header)
msgid "Via The `with` Method:"
msgstr ""

#: docs/8.x/mail.md:block 85 (paragraph)
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `with` method. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template. Then, when calling the `with` method, pass an array of data that you wish to make available to the template:"
msgstr ""

#: docs/8.x/mail.md:block 86 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Build the message.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function build()\n"
"    {\n"
"        return $this->view('emails.orders.shipped')\n"
"                    ->with([\n"
"                        'orderName' => $this->order->name,\n"
"                        'orderPrice' => $this->order->price,\n"
"                    ]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 91 (paragraph)
msgid "To add attachments to an email, use the `attach` method within the mailable class' `build` method. The `attach` method accepts the full path to the file as its first argument:"
msgstr ""

#: docs/8.x/mail.md:block 92 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 93 (paragraph)
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: docs/8.x/mail.md:block 94 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 97 (paragraph)
msgid "If you have stored a file on one of your [filesystem disks](/docs/{{version}}/filesystem), you may attach it to the email using the `attachFromStorage` method:"
msgstr ""

#: docs/8.x/mail.md:block 98 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 99 (paragraph)
msgid "If necessary, you may specify the file's attachment name and additional options using the second and third arguments to the `attachFromStorage` method:"
msgstr ""

#: docs/8.x/mail.md:block 100 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorage('/path/to/file', 'name.pdf', [\n"
"                   'mime' => 'application/pdf'\n"
"               ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 101 (paragraph)
msgid "The `attachFromStorageDisk` method may be used if you need to specify a storage disk other than your default disk:"
msgstr ""

#: docs/8.x/mail.md:block 102 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"   return $this->view('emails.orders.shipped')\n"
"               ->attachFromStorageDisk('s3', '/path/to/file');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 105 (paragraph)
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The `attachData` method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:"
msgstr ""

#: docs/8.x/mail.md:block 106 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->view('emails.orders.shipped')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 111 (quote)
msgid "{note} The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: docs/8.x/mail.md:block 117 (header)
msgid "Customizing The SwiftMailer Message"
msgstr ""

#: docs/8.x/mail.md:block 118 (paragraph)
msgid "The `withSwiftMessage` method of the `Mailable` base class allows you to register a closure which will be invoked with the SwiftMailer message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: docs/8.x/mail.md:block 119 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    $this->view('emails.orders.shipped');\n"
"\n"
"    $this->withSwiftMessage(function ($message) {\n"
"        $message->getHeaders()->addTextHeader(\n"
"            'Custom-Header', 'Header Value'\n"
"        );\n"
"    });\n"
"\n"
"    return $this;\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 126 (code)
msgid "php artisan make:mail OrderShipped --markdown=emails.orders.shipped\n"
msgstr ""

#: docs/8.x/mail.md:block 127 (paragraph)
msgid "Then, when configuring the mailable within its `build` method, call the `markdown` method instead of the `view` method. The `markdown` method accepts the name of the Markdown template and an optional array of data to make available to the template:"
msgstr ""

#: docs/8.x/mail.md:block 128 (code)
msgid ""
"/**\n"
" * Build the message.\n"
" *\n"
" * @return $this\n"
" */\n"
"public function build()\n"
"{\n"
"    return $this->from('example@example.com')\n"
"                ->markdown('emails.orders.shipped', [\n"
"                    'url' => $this->orderUrl,\n"
"                ]);\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 132 (code)
msgid ""
"@component('mail::message')\n"
"# Order Shipped\n"
"\n"
"Your order has been shipped!\n"
"\n"
"@component('mail::button', ['url' => $url])\n"
"View Order\n"
"@endcomponent\n"
"\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 133 (quote)
msgid "{tip} Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: docs/8.x/mail.md:block 137 (code)
msgid ""
"@component('mail::button', ['url' => $url, 'color' => 'success'])\n"
"View Order\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 141 (code)
msgid ""
"@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 145 (code)
msgid ""
"@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent\n"
msgstr ""

#: docs/8.x/mail.md:block 147 (header)
msgid "Customizing The Components"
msgstr ""

#: docs/8.x/mail.md:block 152 (header)
msgid "Customizing The CSS"
msgstr ""

#: docs/8.x/mail.md:block 159 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Mail\\OrderShipped;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"class OrderShipmentController extends Controller\n"
"{\n"
"    /**\n"
"     * Ship the given order.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        $order = Order::findOrFail($request->order_id);\n"
"\n"
"        // Ship the order...\n"
"\n"
"        Mail::to($request->user())->send(new OrderShipped($order));\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 167 (header)
msgid "Sending Mail Via A Specific Mailer"
msgstr ""

#: docs/8.x/mail.md:block 173 (header)
msgid "Queueing A Mail Message"
msgstr ""

#: docs/8.x/mail.md:block 182 (header)
msgid "Pushing To Specific Queues"
msgstr ""

#: docs/8.x/mail.md:block 186 (header)
msgid "Queueing By Default"
msgstr ""

#: docs/8.x/mail.md:block 188 (code)
msgid ""
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    //\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 190 (header)
msgid "Queued Mailables & Database Transactions"
msgstr ""

#: docs/8.x/mail.md:block 195 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable implements ShouldQueue\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 196 (quote)
msgid "{tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/8.x/mail.md:block 202 (header)
msgid "Previewing Mailables In The Browser"
msgstr ""

#: docs/8.x/mail.md:block 205 (quote)
msgid "{note} [Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [MailHog](https://github.com/mailhog/MailHog) or [HELO](https://usehelo.com)."
msgstr ""

#: docs/8.x/mail.md:block 214 (code)
msgid ""
"use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n"
"\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 218 (header)
msgid "Testing Mailables"
msgstr ""

#: docs/8.x/mail.md:block 219 (paragraph)
msgid "Laravel provides several convenient methods for testing that your mailables contain the content that you expect. These methods are: `assertSeeInHtml`, `assertDontSeeInHtml`, `assertSeeInText`, and `assertDontSeeInText`."
msgstr ""

#: docs/8.x/mail.md:block 221 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInText('Invoice Paid');\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 224 (paragraph)
msgid "We suggest testing the content of your mailables separately from your tests that assert that a given mailable was \"sent\" to a specific user. To learn how to test that mailables were sent, check out our documentation on the [Mail fake](/docs/{{version}}/mocking#mail-fake)."
msgstr ""

#: docs/8.x/mail.md:block 226 (header)
msgid "Mail & Local Development"
msgstr ""

#: docs/8.x/mail.md:block 232 (header)
msgid "HELO / Mailtrap / MailHog"
msgstr ""

#: docs/8.x/mail.md:block 234 (paragraph)
msgid "If you are using [Laravel Sail](/docs/{{version}}/sail), you may preview your messages using [MailHog](https://github.com/mailhog/MailHog). When Sail is running, you may access the MailHog interface at: `http://localhost:8025`."
msgstr ""

#: docs/8.x/mail.md:block 236 (header)
msgid "Using A Global `to` Address"
msgstr ""

#: docs/8.x/mail.md:block 238 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        Mail::alwaysTo('taylor@example.com');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/mail.md:block 242 (code)
msgid ""
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Mail\\Events\\MessageSending' => [\n"
"        'App\\Listeners\\LogSendingMessage',\n"
"    ],\n"
"    'Illuminate\\Mail\\Events\\MessageSent' => [\n"
"        'App\\Listeners\\LogSentMessage',\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Tags & Metadata](#tags-and-metadata)"
msgstr ""

#: docs/9.x/mail.md:block 2 (unordered list)
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: docs/9.x/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/6.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""

#: docs/9.x/mail.md:block 12 (paragraph)
msgid "The API based drivers such as Mailgun and Postmark are often simpler and faster than sending mail via SMTP servers. Whenever possible, we recommend that you use one of these drivers."
msgstr ""

#: docs/9.x/mail.md:block 58 (header)
msgid "Using The Envelope"
msgstr ""

#: docs/9.x/mail.md:block 60 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Address;\n"
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        from: new Address('jeffrey@example.com', 'Jeffrey Way'),\n"
"        subject: 'Order Shipped',\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 71 (paragraph)
msgid "Within a mailable class' `content` method, you may define the `view`, or which template should be used when rendering the email's contents. Since each email typically uses a [Blade template](/docs/{{version}}/blade) to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:"
msgstr ""

#: docs/9.x/mail.md:block 72 (code)
msgid ""
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 73 (quote)
msgid "**Note** You may wish to create a `resources/views/emails` directory to house all of your email templates; however, you are free to place them wherever you wish within your `resources/views` directory."
msgstr ""

#: docs/9.x/mail.md:block 77 (code)
msgid ""
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        view: 'emails.orders.shipped',\n"
"        text: 'emails.orders.shipped-text'\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 79 (code)
msgid ""
"return new Content(\n"
"    html: 'emails.orders.shipped',\n"
"    text: 'emails.orders.shipped-text'\n"
");\n"
msgstr ""

#: docs/9.x/mail.md:block 85 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    public $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 89 (header)
msgid "Via The `with` Parameter:"
msgstr ""

#: docs/9.x/mail.md:block 90 (paragraph)
msgid "If you would like to customize the format of your email's data before it is sent to the template, you may manually pass your data to the view via the `Content` definition's `with` parameter. Typically, you will still pass data via the mailable class' constructor; however, you should set this data to `protected` or `private` properties so the data is not automatically made available to the template:"
msgstr ""

#: docs/9.x/mail.md:block 91 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Mail;\n"
"\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Mail\\Mailable;\n"
"use Illuminate\\Mail\\Mailables\\Content;\n"
"use Illuminate\\Queue\\SerializesModels;\n"
"\n"
"class OrderShipped extends Mailable\n"
"{\n"
"    use Queueable, SerializesModels;\n"
"\n"
"    /**\n"
"     * The order instance.\n"
"     *\n"
"     * @var \\App\\Models\\Order\n"
"     */\n"
"    protected $order;\n"
"\n"
"    /**\n"
"     * Create a new message instance.\n"
"     *\n"
"     * @param  \\App\\Models\\Order  $order\n"
"     * @return void\n"
"     */\n"
"    public function __construct(Order $order)\n"
"    {\n"
"        $this->order = $order;\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the message content definition.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Mailables\\Content\n"
"     */\n"
"    public function content()\n"
"    {\n"
"        return new Content(\n"
"            view: 'emails.orders.shipped',\n"
"            with: [\n"
"                'orderName' => $this->order->name,\n"
"                'orderPrice' => $this->order->price,\n"
"            ],\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 97 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Attachment;\n"
"\n"
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 99 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromPath('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 103 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 105 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorage('/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 107 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromStorageDisk('s3', '/path/to/file')\n"
"                ->as('name.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 111 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Attachment[]\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [\n"
"        Attachment::fromData(fn () => $this->pdf, 'Report.pdf')\n"
"                ->withMime('application/pdf'),\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 116 (quote)
msgid "**Warning** The `$message` variable is not available in plain-text message templates since plain-text messages do not utilize inline attachments."
msgstr ""

#: docs/9.x/mail.md:block 125 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Contracts\\Mail\\Attachable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use Illuminate\\Mail\\Attachment;\n"
"\n"
"class Photo extends Model implements Attachable\n"
"{\n"
"    /**\n"
"     * Get the attachable representation of the model.\n"
"     *\n"
"     * @return \\Illuminate\\Mail\\Attachment\n"
"     */\n"
"    public function toMailAttachment()\n"
"    {\n"
"        return Attachment::fromPath('/path/to/file');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 127 (code)
msgid ""
"/**\n"
" * Get the attachments for the message.\n"
" *\n"
" * @return array\n"
" */\n"
"public function attachments()\n"
"{\n"
"    return [$this->photo];\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 138 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Headers;\n"
"\n"
"/**\n"
" * Get the message headers.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Headers\n"
" */\n"
"public function headers()\n"
"{\n"
"    return new Headers(\n"
"        messageId: 'custom-message-id@example.com',\n"
"        references: ['previous-message@example.com'],\n"
"        text: [\n"
"            'X-Custom-Header' => 'Custom Value',\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 140 (header)
msgid "Tags & Metadata"
msgstr ""

#: docs/9.x/mail.md:block 142 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        tags: ['shipment'],\n"
"        metadata: [\n"
"            'order_id' => $this->order->id,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 146 (header)
msgid "Customizing The Symfony Message"
msgstr ""

#: docs/9.x/mail.md:block 148 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Envelope;\n"
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"/**\n"
" * Get the message envelope.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Envelope\n"
" */\n"
"public function envelope()\n"
"{\n"
"    return new Envelope(\n"
"        subject: 'Order Shipped',\n"
"        using: [\n"
"            function (Email $message) {\n"
"                // ...\n"
"            },\n"
"        ]\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 157 (code)
msgid ""
"use Illuminate\\Mail\\Mailables\\Content;\n"
"\n"
"/**\n"
" * Get the message content definition.\n"
" *\n"
" * @return \\Illuminate\\Mail\\Mailables\\Content\n"
" */\n"
"public function content()\n"
"{\n"
"    return new Content(\n"
"        markdown: 'emails.orders.shipped',\n"
"        with: [\n"
"            'url' => $this->orderUrl,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 162 (quote)
msgid "**Note** Do not use excess indentation when writing Markdown emails. Per Markdown standards, Markdown parsers will render indented content as code blocks."
msgstr ""

#: docs/9.x/mail.md:block 225 (quote)
msgid "**Note** To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: docs/9.x/mail.md:block 234 (quote)
msgid "**Warning** [Inline attachments](#inline-attachments) will not be rendered when a mailable is previewed in your browser. To preview these mailables, you should send them to an email testing application such as [Mailpit](https://github.com/axllent/mailpit) or [HELO](https://usehelo.com)."
msgstr ""

#: docs/9.x/mail.md:block 250 (code)
msgid ""
"use App\\Mail\\InvoicePaid;\n"
"use App\\Models\\User;\n"
"\n"
"public function test_mailable_content()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    $mailable = new InvoicePaid($user);\n"
"\n"
"    $mailable->assertFrom('jeffrey@example.com');\n"
"    $mailable->assertTo('taylor@example.com');\n"
"    $mailable->assertHasCc('abigail@example.com');\n"
"    $mailable->assertHasBcc('victoria@example.com');\n"
"    $mailable->assertHasReplyTo('tyler@example.com');\n"
"    $mailable->assertHasSubject('Invoice Paid');\n"
"    $mailable->assertHasTag('example-tag');\n"
"    $mailable->assertHasMetadata('key', 'value');\n"
"\n"
"    $mailable->assertSeeInHtml($user->email);\n"
"    $mailable->assertSeeInHtml('Invoice Paid');\n"
"    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertSeeInText($user->email);\n"
"    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);\n"
"\n"
"    $mailable->assertHasAttachment('/path/to/file');\n"
"    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));\n"
"    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 275 (code)
msgid ""
"use MailchimpTransactional\\ApiClient;\n"
"use Symfony\\Component\\Mailer\\SentMessage;\n"
"use Symfony\\Component\\Mailer\\Transport\\AbstractTransport;\n"
"use Symfony\\Component\\Mime\\MessageConverter;\n"
"\n"
"class MailchimpTransport extends AbstractTransport\n"
"{\n"
"    /**\n"
"     * The Mailchimp API client.\n"
"     *\n"
"     * @var \\MailchimpTransactional\\ApiClient\n"
"     */\n"
"    protected $client;\n"
"\n"
"    /**\n"
"     * Create a new Mailchimp transport instance.\n"
"     *\n"
"     * @param  \\MailchimpTransactional\\ApiClient  $client\n"
"     * @return void\n"
"     */\n"
"    public function __construct(ApiClient $client)\n"
"    {\n"
"        parent::__construct();\n"
"        \n"
"        $this->client = $client;\n"
"    }\n"
"\n"
"    /**\n"
"     * {@inheritDoc}\n"
"     */\n"
"    protected function doSend(SentMessage $message): void\n"
"    {\n"
"        $email = MessageConverter::toEmail($message->getOriginalMessage());\n"
"\n"
"        $this->client->messages->send(['message' => [\n"
"            'from_email' => $email->getFrom(),\n"
"            'to' => collect($email->getTo())->map(function ($email) {\n"
"                return ['email' => $email->getAddress(), 'type' => 'to'];\n"
"            })->all(),\n"
"            'subject' => $email->getSubject(),\n"
"            'text' => $email->getTextBody(),\n"
"        ]]);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the string representation of the transport.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function __toString(): string\n"
"    {\n"
"        return 'mailchimp';\n"
"    }\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 277 (code)
msgid ""
"use App\\Mail\\MailchimpTransport;\n"
"use Illuminate\\Support\\Facades\\Mail;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('mailchimp', function (array $config = []) {\n"
"        return new MailchimpTransport(/* ... */);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 282 (paragraph)
msgid "Laravel includes support for some existing Symfony maintained mail transports like Mailgun and Postmark. However, you may wish to extend Laravel with support for additional Symfony maintained transports. You can do so by requiring the necessary Symfony mailer via Composer and registering the transport with Laravel. For example, you may install and register the \"Sendinblue\" Symfony mailer:"
msgstr ""

#: docs/9.x/mail.md:block 283 (code)
msgid "composer require symfony/sendinblue-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/mail.md:block 284 (paragraph)
msgid "Once the Sendinblue mailer package has been installed, you may add an entry for your Sendinblue API credentials to your application's `services` configuration file:"
msgstr ""

#: docs/9.x/mail.md:block 285 (code)
msgid ""
"'sendinblue' => [\n"
"    'key' => 'your-api-key',\n"
"],\n"
msgstr ""

#: docs/9.x/mail.md:block 287 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Mail;\n"
"use Symfony\\Component\\Mailer\\Bridge\\Sendinblue\\Transport\\SendinblueTransportFactory;\n"
"use Symfony\\Component\\Mailer\\Transport\\Dsn;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Mail::extend('sendinblue', function () {\n"
"        return (new SendinblueTransportFactory)->create(\n"
"            new Dsn(\n"
"                'sendinblue+api',\n"
"                'default',\n"
"                config('services.sendinblue.key')\n"
"            )\n"
"        );\n"
"    });\n"
"}\n"
msgstr ""

#: docs/9.x/mail.md:block 289 (code)
msgid ""
"'sendinblue' => [\n"
"    'transport' => 'sendinblue',\n"
"    // ...\n"
"],\n"
msgstr ""

#: docs/master/mail.md:block 5 (paragraph)
msgid "Sending email doesn't have to be complicated. Laravel provides a clean, simple email API powered by the popular [Symfony Mailer](https://symfony.com/doc/7.0/mailer.html) component. Laravel and Symfony Mailer provide drivers for sending email via SMTP, Mailgun, Postmark, Amazon SES, and `sendmail`, allowing you to quickly get started sending mail through a local or cloud based service of your choice."
msgstr ""
