#
msgid ""
msgstr ""

#: docs/8.x/upgrade.md:block 1 (header)
msgid "Upgrade Guide"
msgstr ""

#: docs/8.x/upgrade.md:block 2 (unordered list)
msgid "[Upgrading To 8.0 From 7.x](#upgrade-8.0)"
msgstr ""

#: docs/8.x/upgrade.md:block 4 (header)
msgid "High Impact Changes"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Model Factories](#model-factories)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `retryAfter` Method](#queue-retry-after-method)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `timeoutAt` Property](#queue-timeout-at-property)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `allOnQueue` and `allOnConnection`](#queue-allOnQueue-allOnConnection)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Pagination Defaults](#pagination-defaults)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Seeder & Factory Namespaces](#seeder-factory-namespaces)"
msgstr ""

#: docs/8.x/upgrade.md:block 9 (header)
msgid "Medium Impact Changes"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[PHP 7.3.0 Required](#php-7.3.0-required)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[Failed Jobs Table Batch Support](#failed-jobs-table-batch-support)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[Maintenance Mode Updates](#maintenance-mode-updates)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[The `php artisan down --message` Option](#artisan-down-message)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[The `assertExactJson` Method](#assert-exact-json-method)"
msgstr ""

#: docs/8.x/upgrade.md:block 14 (header)
msgid "Upgrading To 8.0 From 7.x"
msgstr ""

#: docs/8.x/upgrade.md:block 16 (header)
msgid "Estimated Upgrade Time: 15 Minutes"
msgstr ""

#: docs/8.x/upgrade.md:block 17 (quote)
msgid "{note} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application."
msgstr ""

#: docs/8.x/upgrade.md:block 19 (header)
msgid "PHP 7.3.0 Required"
msgstr ""

#: docs/8.x/upgrade.md:block 20 (paragraph)
msgid "**Likelihood Of Impact: Medium**"
msgstr ""

#: docs/8.x/upgrade.md:block 21 (paragraph)
msgid "The new minimum PHP version is now 7.3.0."
msgstr ""

#: docs/8.x/upgrade.md:block 23 (header)
msgid "Updating Dependencies"
msgstr ""

#: docs/8.x/upgrade.md:block 24 (paragraph)
msgid "Update the following dependencies in your `composer.json` file:"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`guzzlehttp/guzzle` to `^7.0.1`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`facade/ignition` to `^2.3.6`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/framework` to `^8.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/ui` to `^3.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`nunomaduro/collision` to `^5.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`phpunit/phpunit` to `^9.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 28 (paragraph)
msgid "The following first-party packages have new major releases to support Laravel 8. If applicable, you should read their individual upgrade guides before upgrading:"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Horizon v5.0](https://github.com/laravel/horizon/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Passport v10.0](https://github.com/laravel/passport/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Socialite v5.0](https://github.com/laravel/socialite/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Telescope v4.0](https://github.com/laravel/telescope/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 32 (paragraph)
msgid "In addition, the Laravel installer has been updated to support `composer create-project` and Laravel Jetstream. Any installer older than 4.0 will cease to work after October 2020. You should upgrade your global installer to `^4.0` as soon as possible."
msgstr ""

#: docs/8.x/upgrade.md:block 33 (paragraph)
msgid "Finally, examine any other third-party packages consumed by your application and verify you are using the proper version for Laravel 8 support."
msgstr ""

#: docs/8.x/upgrade.md:block 35 (header)
msgid "Collections"
msgstr ""

#: docs/8.x/upgrade.md:block 37 (header)
msgid "The `isset` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 38 (paragraph)
msgid "**Likelihood Of Impact: Low**"
msgstr ""

#: docs/8.x/upgrade.md:block 39 (paragraph)
msgid "To be consistent with typical PHP behavior, the `offsetExists` method of `Illuminate\\Support\\Collection` has been updated to use `isset` instead of `array_key_exists`. This may present a change in behavior when dealing with collection items that have a value of `null`:"
msgstr ""

#: docs/8.x/upgrade.md:block 40 (code)
msgid ""
"$collection = collect([null]);\n"
"\n"
"// Laravel 7.x - true\n"
"isset($collection[0]);\n"
"\n"
"// Laravel 8.x - false\n"
"isset($collection[0]);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 42 (header)
msgid "Database"
msgstr ""

#: docs/8.x/upgrade.md:block 44 (header)
msgid "Seeder & Factory Namespaces"
msgstr ""

#: docs/8.x/upgrade.md:block 45 (paragraph)
msgid "**Likelihood Of Impact: High**"
msgstr ""

#: docs/8.x/upgrade.md:block 46 (paragraph)
msgid "Seeders and factories are now namespaced. To accommodate for these changes, add the `Database\\Seeders` namespace to your seeder classes. In addition, the previous `database/seeds` directory should be renamed to `database/seeders`:"
msgstr ""

#: docs/8.x/upgrade.md:block 47 (code)
msgid ""
"<?php\n"
"\n"
"namespace Database\\Seeders;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Seeder;\n"
"\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Seed the application's database.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 48 (paragraph)
msgid "If you are choosing to use the `laravel/legacy-factories` package, no changes to your factory classes are required. However, if you are upgrading your factories, you should add the `Database\\Factories` namespace to those classes."
msgstr ""

#: docs/8.x/upgrade.md:block 49 (paragraph)
msgid "Next, in your `composer.json` file, remove `classmap` block from the `autoload` section and add the new namespaced class directory mappings:"
msgstr ""

#: docs/8.x/upgrade.md:block 50 (code)
msgid ""
"\"autoload\": {\n"
"    \"psr-4\": {\n"
"        \"App\\\\\": \"app/\",\n"
"        \"Database\\\\Factories\\\\\": \"database/factories/\",\n"
"        \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n"
"    }\n"
"},\n"
msgstr ""

#: docs/8.x/upgrade.md:block 52 (header)
msgid "Eloquent"
msgstr ""

#: docs/8.x/upgrade.md:block 54 (header)
msgid "Model Factories"
msgstr ""

#: docs/8.x/upgrade.md:block 56 (paragraph)
msgid "Laravel's [model factories](/docs/{{version}}/database-testing#defining-model-factories) feature has been totally rewritten to support classes and is not compatible with Laravel 7.x style factories. However, to ease the upgrade process, a new `laravel/legacy-factories` package has been created to continue using your existing factories with Laravel 8.x. You may install this package via Composer:"
msgstr ""

#: docs/8.x/upgrade.md:block 57 (code)
msgid "composer require laravel/legacy-factories\n"
msgstr ""

#: docs/8.x/upgrade.md:block 59 (header)
msgid "The `Castable` Interface"
msgstr ""

#: docs/8.x/upgrade.md:block 61 (paragraph)
msgid "The `castUsing` method of the `Castable` interface has been updated to accept an array of arguments. If you are implementing this interface you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 62 (code)
msgid "public static function castUsing(array $arguments);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 64 (header)
msgid "Increment / Decrement Events"
msgstr ""

#: docs/8.x/upgrade.md:block 66 (paragraph)
msgid "Proper \"update\" and \"save\" related model events will now be dispatched when executing the `increment` or `decrement` methods on Eloquent model instances."
msgstr ""

#: docs/8.x/upgrade.md:block 68 (header)
msgid "Events"
msgstr ""

#: docs/8.x/upgrade.md:block 70 (header)
msgid "The `EventServiceProvider` Class"
msgstr ""

#: docs/8.x/upgrade.md:block 72 (paragraph)
msgid "If your `App\\Providers\\EventServiceProvider` class contains a `register` function, you should ensure that you call `parent::register` at the beginning of this method. Otherwise, your application's events will not be registered."
msgstr ""

#: docs/8.x/upgrade.md:block 74 (header)
msgid "The `Dispatcher` Contract"
msgstr ""

#: docs/8.x/upgrade.md:block 76 (paragraph)
msgid "The `listen` method of the `Illuminate\\Contracts\\Events\\Dispatcher` contract has been updated to make the `$listener` property optional. This change was made to support automatic detection of handled event types via reflection. If you are manually implementing this interface, you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 77 (code)
msgid "public function listen($events, $listener = null);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 79 (header)
msgid "Framework"
msgstr ""

#: docs/8.x/upgrade.md:block 81 (header)
msgid "Maintenance Mode Updates"
msgstr ""

#: docs/8.x/upgrade.md:block 82 (paragraph)
msgid "**Likelihood Of Impact: Optional**"
msgstr ""

#: docs/8.x/upgrade.md:block 83 (paragraph)
msgid "The [maintenance mode](/docs/{{version}}/configuration#maintenance-mode) feature of Laravel has been improved in Laravel 8.x. Pre-rendering the maintenance mode template is now supported and eliminates the chances of end users encountering errors during maintenance mode. However, to support this, the following lines must be added to your `public/index.php` file. These lines should be placed directly under the existing `LARAVEL_START` constant definition:"
msgstr ""

#: docs/8.x/upgrade.md:block 84 (code)
msgid ""
"define('LARAVEL_START', microtime(true));\n"
"\n"
"if (file_exists(__DIR__.'/../storage/framework/maintenance.php')) {\n"
"    require __DIR__.'/../storage/framework/maintenance.php';\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 86 (header)
msgid "The `php artisan down --message` Option"
msgstr ""

#: docs/8.x/upgrade.md:block 88 (paragraph)
msgid "The `--message` option of the `php artisan down` command has been removed. As an alternative, consider [pre-rendering your maintenance mode views](/docs/{{version}}/configuration#maintenance-mode) with the message of your choice."
msgstr ""

#: docs/8.x/upgrade.md:block 90 (header)
msgid "The `php artisan serve --no-reload` Option"
msgstr ""

#: docs/8.x/upgrade.md:block 92 (paragraph)
msgid "A `--no-reload` option has been added to the `php artisan serve` command. This will instruct the built-in server to not reload the server when environment file changes are detected. This option is primarily helpful when running Laravel Dusk tests in a CI environment."
msgstr ""

#: docs/8.x/upgrade.md:block 94 (header)
msgid "Manager `$app` Property"
msgstr ""

#: docs/8.x/upgrade.md:block 96 (paragraph)
msgid "The previously deprecated `$app` property of the `Illuminate\\Support\\Manager` class has been removed. If you were relying on this property, you should use the `$container` property instead."
msgstr ""

#: docs/8.x/upgrade.md:block 98 (header)
msgid "The `elixir` Helper"
msgstr ""

#: docs/8.x/upgrade.md:block 100 (paragraph)
msgid "The previously deprecated `elixir` helper has been removed. Applications still using this method are encouraged to upgrade to [Laravel Mix](https://github.com/JeffreyWay/laravel-mix)."
msgstr ""

#: docs/8.x/upgrade.md:block 102 (header)
msgid "Mail"
msgstr ""

#: docs/8.x/upgrade.md:block 104 (header)
msgid "The `sendNow` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 106 (paragraph)
msgid "The previously deprecated `sendNow` method has been removed. Instead, please use the `send` method."
msgstr ""

#: docs/8.x/upgrade.md:block 108 (header)
msgid "Pagination"
msgstr ""

#: docs/8.x/upgrade.md:block 110 (header)
msgid "Pagination Defaults"
msgstr ""

#: docs/8.x/upgrade.md:block 112 (paragraph)
msgid "The paginator now uses the [Tailwind CSS framework](https://tailwindcss.com) for its default styling. In order to keep using Bootstrap, you should add the following method call to the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/8.x/upgrade.md:block 113 (code)
msgid ""
"use Illuminate\\Pagination\\Paginator;\n"
"\n"
"Paginator::useBootstrap();\n"
msgstr ""

#: docs/8.x/upgrade.md:block 115 (header)
msgid "Queue"
msgstr ""

#: docs/8.x/upgrade.md:block 117 (header)
msgid "The `retryAfter` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 119 (paragraph)
msgid "For consistency with other features of Laravel, the `retryAfter` method and `retryAfter` property of queued jobs, mailers, notifications, and listeners have been renamed to `backoff`. You should update the name of this method / property in the relevant classes in your application."
msgstr ""

#: docs/8.x/upgrade.md:block 121 (header)
msgid "The `timeoutAt` Property"
msgstr ""

#: docs/8.x/upgrade.md:block 123 (paragraph)
msgid "The `timeoutAt` property of queued jobs, notifications, and listeners has been renamed to `retryUntil`. You should update the name of this property in the relevant classes in your application."
msgstr ""

#: docs/8.x/upgrade.md:block 125 (header)
msgid "The `allOnQueue()` / `allOnConnection()` Methods"
msgstr ""

#: docs/8.x/upgrade.md:block 127 (paragraph)
msgid "For consistency with other dispatching methods, the `allOnQueue()` and `allOnConnection()` methods used with job chaining have been removed. You may use the `onQueue()` and `onConnection()` methods instead. These methods should be called before calling the `dispatch` method:"
msgstr ""

#: docs/8.x/upgrade.md:block 128 (code)
msgid ""
"ProcessPodcast::withChain([\n"
"    new OptimizePodcast,\n"
"    new ReleasePodcast\n"
"])->onConnection('redis')->onQueue('podcasts')->dispatch();\n"
msgstr ""

#: docs/8.x/upgrade.md:block 129 (paragraph)
msgid "Note that this change only affects code using the `withChain` method. The `allOnQueue()` and `allOnConnection()` are still available when using the global `dispatch()` helper."
msgstr ""

#: docs/8.x/upgrade.md:block 131 (header)
msgid "Failed Jobs Table Batch Support"
msgstr ""

#: docs/8.x/upgrade.md:block 133 (paragraph)
msgid "If you plan to use the [job batching](/docs/{{version}}/queues#job-batching) features of Laravel 8.x, your `failed_jobs` database table will need to be updated. First, a new `uuid` column should be added to your table:"
msgstr ""

#: docs/8.x/upgrade.md:block 134 (code)
msgid ""
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n"
"\n"
"Schema::table('failed_jobs', function (Blueprint $table) {\n"
"    $table->string('uuid')->after('id')->nullable()->unique();\n"
"});\n"
msgstr ""

#: docs/8.x/upgrade.md:block 135 (paragraph)
msgid "Next, the `failed.driver` configuration option within your `queue` configuration file should be updated to `database-uuids`."
msgstr ""

#: docs/8.x/upgrade.md:block 136 (paragraph)
msgid "In addition, you may wish to generate UUIDs for your existing failed jobs:"
msgstr ""

#: docs/8.x/upgrade.md:block 137 (code)
msgid ""
"DB::table('failed_jobs')->whereNull('uuid')->cursor()->each(function ($job) {\n"
"    DB::table('failed_jobs')\n"
"        ->where('id', $job->id)\n"
"        ->update(['uuid' => (string) Illuminate\\Support\\Str::uuid()]);\n"
"});\n"
msgstr ""

#: docs/8.x/upgrade.md:block 139 (header)
msgid "Routing"
msgstr ""

#: docs/8.x/upgrade.md:block 141 (header)
msgid "Automatic Controller Namespace Prefixing"
msgstr ""

#: docs/8.x/upgrade.md:block 143 (paragraph)
msgid "In previous releases of Laravel, the `RouteServiceProvider` class contained a `$namespace` property with a value of `App\\Http\\Controllers`. The value of this property was used to automatically prefix controller route declarations and controller route URL generation such as when calling the `action` helper."
msgstr ""

#: docs/8.x/upgrade.md:block 144 (paragraph)
msgid "In Laravel 8, this property is set to `null` by default. This allows your controller route declarations to use the standard PHP callable syntax, which provides better support for jumping to the controller class in many IDEs:"
msgstr ""

#: docs/8.x/upgrade.md:block 145 (code)
msgid ""
"use App\\Http\\Controllers\\UserController;\n"
"\n"
"// Using PHP callable syntax...\n"
"Route::get('/users', [UserController::class, 'index']);\n"
"\n"
"// Using string syntax...\n"
"Route::get('/users', 'App\\Http\\Controllers\\UserController@index');\n"
msgstr ""

#: docs/8.x/upgrade.md:block 146 (paragraph)
msgid "In most cases, this won't impact applications that are being upgraded because your `RouteServiceProvider` will still contain the `$namespace` property with its previous value. However, if you upgrade your application by creating a brand new Laravel project, you may encounter this as a breaking change."
msgstr ""

#: docs/8.x/upgrade.md:block 147 (paragraph)
msgid "If you would like to continue using the original auto-prefixed controller routing, you can simply set the value of the `$namespace` property within your `RouteServiceProvider` and update the route registrations within the `boot` method to use the `$namespace` property:"
msgstr ""

#: docs/8.x/upgrade.md:block 148 (code)
msgid ""
"class RouteServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The path to the \"home\" route for your application.\n"
"     *\n"
"     * This is used by Laravel authentication to redirect users after login.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public const HOME = '/home';\n"
"\n"
"    /**\n"
"     * If specified, this namespace is automatically applied to your controller routes.\n"
"     *\n"
"     * In addition, it is set as the URL generator's root namespace.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $namespace = 'App\\Http\\Controllers';\n"
"\n"
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->configureRateLimiting();\n"
"\n"
"        $this->routes(function () {\n"
"            Route::middleware('web')\n"
"                ->namespace($this->namespace)\n"
"                ->group(base_path('routes/web.php'));\n"
"\n"
"            Route::prefix('api')\n"
"                ->middleware('api')\n"
"                ->namespace($this->namespace)\n"
"                ->group(base_path('routes/api.php'));\n"
"        });\n"
"    }\n"
"\n"
"    /**\n"
"     * Configure the rate limiters for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function configureRateLimiting()\n"
"    {\n"
"        RateLimiter::for('api', function (Request $request) {\n"
"            return Limit::perMinute(60)->by(optional($request->user())->id ?: $request->ip());\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 150 (header)
msgid "Scheduling"
msgstr ""

#: docs/8.x/upgrade.md:block 152 (header)
msgid "The `cron-expression` Library"
msgstr ""

#: docs/8.x/upgrade.md:block 154 (paragraph)
msgid "Laravel's dependency on `dragonmantank/cron-expression` has been updated from `2.x` to `3.x`. This should not cause any breaking change in your application unless you are interacting with the `cron-expression` library directly. If you are interacting with this library directly, please review its [change log](https://github.com/dragonmantank/cron-expression/blob/master/CHANGELOG.md)."
msgstr ""

#: docs/8.x/upgrade.md:block 156 (header)
msgid "Session"
msgstr ""

#: docs/8.x/upgrade.md:block 158 (header)
msgid "The `Session` Contract"
msgstr ""

#: docs/8.x/upgrade.md:block 160 (paragraph)
msgid "The `Illuminate\\Contracts\\Session\\Session` contract has received a new `pull` method. If you are implementing this contract manually, you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 161 (code)
msgid ""
"/**\n"
" * Get the value of a given key and then forget it.\n"
" *\n"
" * @param  string  $key\n"
" * @param  mixed  $default\n"
" * @return mixed\n"
" */\n"
"public function pull($key, $default = null);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 163 (header)
msgid "Testing"
msgstr ""

#: docs/8.x/upgrade.md:block 165 (header)
msgid "The `decodeResponseJson` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 167 (paragraph)
msgid "The `decodeResponseJson` method that belongs to the `Illuminate\\Testing\\TestResponse` class no longer accepts any arguments. Please consider using the `json` method instead."
msgstr ""

#: docs/8.x/upgrade.md:block 169 (header)
msgid "The `assertExactJson` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 171 (paragraph)
msgid "The `assertExactJson` method now requires numeric keys of compared arrays to match and be in the same order. If you would like to compare JSON against an array without requiring numerically keyed arrays to have the same order, you may use the `assertSimilarJson` method instead."
msgstr ""

#: docs/8.x/upgrade.md:block 173 (header)
msgid "Validation"
msgstr ""

#: docs/8.x/upgrade.md:block 175 (header)
msgid "Database Rule Connections"
msgstr ""

#: docs/8.x/upgrade.md:block 177 (paragraph)
msgid "The `unique` and `exists` rules will now respect the specified connection name (accessed via the model's `getConnectionName` method) of Eloquent models when performing queries."
msgstr ""

#: docs/8.x/upgrade.md:block 179 (header)
msgid "Miscellaneous"
msgstr ""

#: docs/8.x/upgrade.md:block 180 (paragraph)
msgid "We also encourage you to view the changes in the `laravel/laravel` [GitHub repository](https://github.com/laravel/laravel). While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the [GitHub comparison tool](https://github.com/laravel/laravel/compare/7.x...8.x) and choose which updates are important to you."
msgstr ""

#: docs/9.x/upgrade.md:block 2 (unordered list)
msgid "[Upgrading To 9.0 From 8.x](#upgrade-9.0)"
msgstr ""

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Updating Dependencies](#updating-dependencies)"
msgstr ""

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Flysystem 3.x](#flysystem-3)"
msgstr ""

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Symfony Mailer](#symfony-mailer)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Belongs To Many `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods](#belongs-to-many-first-or-new)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Custom Casts & `null`](#custom-casts-and-null)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Default HTTP Client Timeout](#http-client-default-timeout)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[PHP Return Types](#php-return-types)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Postgres \"Schema\" Configuration](#postgres-schema-configuration)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `assertDeleted` Method](#the-assert-deleted-method)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `lang` Directory](#the-lang-directory)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `password` Rule](#the-password-rule)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `when` / `unless` Methods](#when-and-unless-methods)"
msgstr ""

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Unvalidated Array Keys](#unvalidated-array-keys)"
msgstr ""

#: docs/9.x/upgrade.md:block 14 (header)
msgid "Upgrading To 9.0 From 8.x"
msgstr ""

#: docs/9.x/upgrade.md:block 16 (header)
msgid "Estimated Upgrade Time: 30 Minutes"
msgstr ""

#: docs/9.x/upgrade.md:block 17 (quote)
msgid "{tip} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application. Want to save time? You can use [Laravel Shift](https://laravelshift.com/) to help automate your application upgrades."
msgstr ""

#: docs/9.x/upgrade.md:block 21 (header)
msgid "PHP 8.0.2 Required"
msgstr ""

#: docs/9.x/upgrade.md:block 22 (paragraph)
msgid "Laravel now requires PHP 8.0.2 or greater."
msgstr ""

#: docs/9.x/upgrade.md:block 23 (header)
msgid "Composer Dependencies"
msgstr ""

#: docs/9.x/upgrade.md:block 24 (paragraph)
msgid "You should update the following dependencies in your application's `composer.json` file:"
msgstr ""

#: docs/9.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/framework` to `^9.0`"
msgstr ""

#: docs/9.x/upgrade.md:block 26 (unordered list)
msgid "`nunomaduro/collision` to `^6.1`"
msgstr ""

#: docs/9.x/upgrade.md:block 28 (paragraph)
msgid "In addition, please replace `facade/ignition` with `\"spatie/laravel-ignition\": \"^1.0\"` in your application's `composer.json` file."
msgstr ""

#: docs/9.x/upgrade.md:block 29 (paragraph)
msgid "Furthermore, the following first-party packages have received new major releases to support Laravel 9.x. If applicable, you should read their individual upgrade guides before upgrading:"
msgstr ""

#: docs/9.x/upgrade.md:block 31 (unordered list)
msgid "[Vonage Notification Channel (v3.0)](https://github.com/laravel/vonage-notification-channel/blob/3.x/UPGRADE.md) (Replaces Nexmo)"
msgstr ""

#: docs/9.x/upgrade.md:block 33 (paragraph)
msgid "Finally, examine any other third-party packages consumed by your application and verify you are using the proper version for Laravel 9 support."
msgstr ""

#: docs/9.x/upgrade.md:block 35 (header)
msgid "PHP Return Types"
msgstr ""

#: docs/9.x/upgrade.md:block 36 (paragraph)
msgid "PHP is beginning to transition to requiring return type definitions on PHP methods such as `offsetGet`, `offsetSet`, etc. In light of this, Laravel 9 has implemented these return types in its code base. Typically, this should not affect user written code; however, if you are overriding one of these methods by extending Laravel's core classes, you will need to add these return types to your own application or package code:"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`count(): int`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`getIterator(): Traversable`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`getSize(): int`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`jsonSerialize(): array`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetExists($key): bool`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetGet($key): mixed`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetSet($key, $value): void`"
msgstr ""

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetUnset($key): void`"
msgstr ""

#: docs/9.x/upgrade.md:block 40 (paragraph)
msgid "In addition, return types were added to methods implementing PHP's `SessionHandlerInterface`. Again, it is unlikely that this change affects your own application or package code:"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`open($savePath, $sessionName): bool`"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`close(): bool`"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`read($sessionId): string|false`"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`write($sessionId, $data): bool`"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`destroy($sessionId): bool`"
msgstr ""

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`gc($lifetime): int`"
msgstr ""

#: docs/9.x/upgrade.md:block 45 (header)
msgid "Application"
msgstr ""

#: docs/9.x/upgrade.md:block 47 (header)
msgid "The `Application` Contract"
msgstr ""

#: docs/9.x/upgrade.md:block 49 (paragraph)
msgid "The `storagePath` method of the `Illuminate\\Contracts\\Foundation\\Application` interface has been updated to accept a `$path` argument. If you are implementing this interface you should update your implementation accordingly:"
msgstr ""

#: docs/9.x/upgrade.md:block 50 (code)
msgid "public function storagePath($path = '');\n"
msgstr ""

#: docs/9.x/upgrade.md:block 51 (paragraph)
msgid "Similarly, the `langPath` method of the `Illuminate\\Foundation\\Application` class has been updated to accept a `$path` argument:"
msgstr ""

#: docs/9.x/upgrade.md:block 52 (code)
msgid "public function langPath($path = '');\n"
msgstr ""

#: docs/9.x/upgrade.md:block 53 (header)
msgid "Exception Handler `ignore` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 55 (paragraph)
msgid "The exception handler's `ignore` method is now `public` instead of `protected`. This method is not included in the default application skeleton; however, if you have manually defined this method you should update its visibility to `public`:"
msgstr ""

#: docs/9.x/upgrade.md:block 56 (code)
msgid "public function ignore(string $class);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 57 (header)
msgid "Blade"
msgstr ""

#: docs/9.x/upgrade.md:block 58 (header)
msgid "Lazy Collections & The `$loop` Variable"
msgstr ""

#: docs/9.x/upgrade.md:block 60 (paragraph)
msgid "When iterating over a `LazyCollection` instance within a Blade template, the `$loop` variable is no longer available, as accessing this variable causes the entire `LazyCollection` to be loaded into memory, thus rendering the usage of lazy collections pointless in this scenario."
msgstr ""

#: docs/9.x/upgrade.md:block 61 (header)
msgid "Checked / Disabled / Selected Blade Directives"
msgstr ""

#: docs/9.x/upgrade.md:block 63 (paragraph)
msgid "The new `@checked`, `@disabled`, and `@selected` Blade directives may conflict with Vue events of the same name. You may use `@@` to escape the directives and avoid this conflict: `@@selected`."
msgstr ""

#: docs/9.x/upgrade.md:block 65 (header)
msgid "The `Enumerable` Contract"
msgstr ""

#: docs/9.x/upgrade.md:block 67 (paragraph)
msgid "The `Illuminate\\Support\\Enumerable` contract now defines a `sole` method. If you are manually implementing this interface, you should update your implementation to reflect this new method:"
msgstr ""

#: docs/9.x/upgrade.md:block 68 (code)
msgid "public function sole($key = null, $operator = null, $value = null);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 69 (header)
msgid "The `reduceWithKeys` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 70 (paragraph)
msgid "The `reduceWithKeys` method has been removed as the `reduce` method provides the same functionality. You may simply update your code to call `reduce` instead of `reduceWithKeys`."
msgstr ""

#: docs/9.x/upgrade.md:block 71 (header)
msgid "The `reduceMany` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 72 (paragraph)
msgid "The `reduceMany` method has been renamed to `reduceSpread` for naming consistency with other similar methods."
msgstr ""

#: docs/9.x/upgrade.md:block 73 (header)
msgid "Container"
msgstr ""

#: docs/9.x/upgrade.md:block 74 (header)
msgid "The `Container` Contract"
msgstr ""

#: docs/9.x/upgrade.md:block 75 (paragraph)
msgid "**Likelihood Of Impact: Very Low**"
msgstr ""

#: docs/9.x/upgrade.md:block 76 (paragraph)
msgid "The `Illuminate\\Contracts\\Container\\Container` contract has received two method definitions: `scoped` and `scopedIf`. If you are manually implementing this contract, you should update your implementation to reflect these new methods."
msgstr ""

#: docs/9.x/upgrade.md:block 77 (header)
msgid "The `ContextualBindingBuilder` Contract"
msgstr ""

#: docs/9.x/upgrade.md:block 79 (paragraph)
msgid "The `Illuminate\\Contracts\\Container\\ContextualBindingBuilder` contract now defines a `giveConfig` method. If you are manually implementing this interface, you should update your implementation to reflect this new method:"
msgstr ""

#: docs/9.x/upgrade.md:block 80 (code)
msgid "public function giveConfig($key, $default = null);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 83 (header)
msgid "Postgres \"Schema\" Configuration"
msgstr ""

#: docs/9.x/upgrade.md:block 85 (paragraph)
msgid "The `schema` configuration option used to configure Postgres connection search paths in your application's `config/database.php` configuration file should be renamed to `search_path`."
msgstr ""

#: docs/9.x/upgrade.md:block 87 (header)
msgid "Schema Builder `registerCustomDoctrineType` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 89 (paragraph)
msgid "The `registerCustomDoctrineType` method has been removed from the `Illuminate\\Database\\Schema\\Builder` class. You may use the `registerDoctrineType` method on the `DB` facade instead, or register custom Doctrine types in the `config/database.php` configuration file."
msgstr ""

#: docs/9.x/upgrade.md:block 92 (header)
msgid "Custom Casts & `null`"
msgstr ""

#: docs/9.x/upgrade.md:block 94 (paragraph)
msgid "In previous releases of Laravel, the `set` method of custom cast classes was not invoked if the cast attribute was being set to `null`. However, this behavior was inconsistent with the Laravel documentation. In Laravel 9.x, the `set` method of the cast class will be invoked with `null` as the provided `$value` argument. Therefore, you should ensure your custom casts are able to sufficiently handle this scenario:"
msgstr ""

#: docs/9.x/upgrade.md:block 95 (code)
msgid ""
"/**\n"
" * Prepare the given value for storage.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  AddressModel  $value\n"
" * @param  array  $attributes\n"
" * @return array\n"
" */\n"
"public function set($model, $key, $value, $attributes)\n"
"{\n"
"    if (! $value instanceof AddressModel) {\n"
"        throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"    }\n"
"\n"
"    return [\n"
"        'address_line_one' => $value->lineOne,\n"
"        'address_line_two' => $value->lineTwo,\n"
"    ];\n"
"}\n"
msgstr ""

#: docs/9.x/upgrade.md:block 97 (header)
msgid "Belongs To Many `firstOrNew`, `firstOrCreate`, and `updateOrCreate` Methods"
msgstr ""

#: docs/9.x/upgrade.md:block 99 (paragraph)
msgid "The `belongsToMany` relationship's `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods all accept an array of attributes as their first argument. In previous releases of Laravel, this array of attributes was compared against the \"pivot\" / intermediate table for existing records."
msgstr ""

#: docs/9.x/upgrade.md:block 100 (paragraph)
msgid "However, this behavior was unexpected and typically unwanted. Instead, these methods now compare the array of attributes against the table of the related model:"
msgstr ""

#: docs/9.x/upgrade.md:block 101 (code)
msgid ""
"$user->roles()->updateOrCreate([\n"
"    'name' => 'Administrator',\n"
"]);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 102 (paragraph)
msgid "In addition, the `firstOrCreate` method now accepts a `$values` array as its second argument. This array will be merged with the first argument to the method (`$attributes`) when creating the related model if one does not already exist. This change makes this method consistent with the `firstOrCreate` methods offered by other relationship types:"
msgstr ""

#: docs/9.x/upgrade.md:block 103 (code)
msgid ""
"$user->roles()->firstOrCreate([\n"
"    'name' => 'Administrator',\n"
"], [\n"
"    'created_by' => $user->id,\n"
"]);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 104 (header)
msgid "The `touch` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 106 (paragraph)
msgid "The `touch` method now accepts an attribute to touch. If you were previously overwriting this method, you should update your method signature to reflect this new argument:"
msgstr ""

#: docs/9.x/upgrade.md:block 107 (code)
msgid "public function touch($attribute = null);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 108 (header)
msgid "Encryption"
msgstr ""

#: docs/9.x/upgrade.md:block 109 (header)
msgid "The Encrypter Contract"
msgstr ""

#: docs/9.x/upgrade.md:block 111 (paragraph)
msgid "The `Illuminate\\Contracts\\Encryption\\Encrypter` contract now defines a `getKey` method. If you are manually implementing this interface, you should update your implementation accordingly:"
msgstr ""

#: docs/9.x/upgrade.md:block 112 (code)
msgid "public function getKey();\n"
msgstr ""

#: docs/9.x/upgrade.md:block 113 (header)
msgid "Facades"
msgstr ""

#: docs/9.x/upgrade.md:block 114 (header)
msgid "The `getFacadeAccessor` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 116 (paragraph)
msgid "The `getFacadeAccessor` method must always return a container binding key. In previous releases of Laravel, this method could return an object instance; however, this behavior is no longer supported. If you have written your own facades, you should ensure that this method returns a container binding string:"
msgstr ""

#: docs/9.x/upgrade.md:block 117 (code)
msgid ""
"/**\n"
" * Get the registered name of the component.\n"
" *\n"
" * @return string\n"
" */\n"
"protected static function getFacadeAccessor()\n"
"{\n"
"    return Example::class;\n"
"}\n"
msgstr ""

#: docs/9.x/upgrade.md:block 118 (header)
msgid "Filesystem"
msgstr ""

#: docs/9.x/upgrade.md:block 119 (header)
msgid "The `FILESYSTEM_DRIVER` Environment Variable"
msgstr ""

#: docs/9.x/upgrade.md:block 121 (paragraph)
msgid "The `FILESYSTEM_DRIVER` environment variable has been renamed to `FILESYSTEM_DISK` to more accurately reflect its usage. This change only affects the application skeleton; however, you are welcome to update your own application's environment variables to reflect this change if you wish."
msgstr ""

#: docs/9.x/upgrade.md:block 122 (header)
msgid "The \"Cloud\" Disk"
msgstr ""

#: docs/9.x/upgrade.md:block 124 (paragraph)
msgid "The `cloud` disk configuration option was removed from the default application skeleton in November of 2020. This change only affects the application skeleton. If you are using the `cloud` disk within your application, you should leave this configuration value in your own application's skeleton."
msgstr ""

#: docs/9.x/upgrade.md:block 126 (header)
msgid "Flysystem 3.x"
msgstr ""

#: docs/9.x/upgrade.md:block 128 (paragraph)
msgid "Laravel 9.x has migrated from [Flysystem](https://flysystem.thephpleague.com/v2/docs/) 1.x to 3.x. Under the hood, Flysystem powers all of the file manipulation methods provided by the `Storage` facade. In light of this, some changes may be required within your application; however, we have tried to make this transition as seamless as possible."
msgstr ""

#: docs/9.x/upgrade.md:block 129 (header)
msgid "Driver Prerequisites"
msgstr ""

#: docs/9.x/upgrade.md:block 130 (paragraph)
msgid "Before using the S3, FTP, or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr ""

#: docs/9.x/upgrade.md:block 131 (unordered list)
msgid "Amazon S3: `composer require -W league/flysystem-aws-s3-v3 \"^3.0\"`"
msgstr ""

#: docs/9.x/upgrade.md:block 131 (unordered list)
msgid "FTP: `composer require league/flysystem-ftp \"^3.0\"`"
msgstr ""

#: docs/9.x/upgrade.md:block 131 (unordered list)
msgid "SFTP: `composer require league/flysystem-sftp-v3 \"^3.0\"`"
msgstr ""

#: docs/9.x/upgrade.md:block 132 (header)
msgid "Overwriting Existing Files"
msgstr ""

#: docs/9.x/upgrade.md:block 133 (paragraph)
msgid "Write operations such as `put`, `write`, and `writeStream` now overwrite existing files by default. If you do not want to overwrite existing files, you should manually check for the file's existence before performing the write operation."
msgstr ""

#: docs/9.x/upgrade.md:block 134 (header)
msgid "Write Exceptions"
msgstr ""

#: docs/9.x/upgrade.md:block 135 (paragraph)
msgid "Write operations such as `put`, `write`, and `writeStream` no longer throw an exception when a write operation fails. Instead, `false` is returned. If you would like to preserve the previous behavior which threw exceptions, you may define the `throw` option within a filesystem disk's configuration array:"
msgstr ""

#: docs/9.x/upgrade.md:block 136 (code)
msgid ""
"'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],\n"
msgstr ""

#: docs/9.x/upgrade.md:block 137 (header)
msgid "Reading Missing Files"
msgstr ""

#: docs/9.x/upgrade.md:block 138 (paragraph)
msgid "Attempting to read from a file that does not exist now returns `null`. In previous releases of Laravel, an `Illuminate\\Contracts\\Filesystem\\FileNotFoundException` would have been thrown."
msgstr ""

#: docs/9.x/upgrade.md:block 139 (header)
msgid "Deleting Missing Files"
msgstr ""

#: docs/9.x/upgrade.md:block 140 (paragraph)
msgid "Attempting to `delete` a file that does not exist now returns `true`."
msgstr ""

#: docs/9.x/upgrade.md:block 141 (header)
msgid "Cached Adapters"
msgstr ""

#: docs/9.x/upgrade.md:block 142 (paragraph)
msgid "Flysystem no longer supports \"cached adapters\". Thus, they have been removed from Laravel and any relevant configuration (such as the `cache` key within disk configurations) can be removed."
msgstr ""

#: docs/9.x/upgrade.md:block 143 (header)
msgid "Custom Filesystems"
msgstr ""

#: docs/9.x/upgrade.md:block 144 (paragraph)
msgid "Slight changes have been made to the steps required to register custom filesystem drivers. Therefore, if you were defining your own custom filesystem drivers, or using packages that define custom drivers, you should update your code and dependencies."
msgstr ""

#: docs/9.x/upgrade.md:block 145 (paragraph)
msgid "For example, in Laravel 8.x, a custom filesystem driver might be registered like so:"
msgstr ""

#: docs/9.x/upgrade.md:block 146 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $client = new DropboxClient(\n"
"        $config['authorization_token']\n"
"    );\n"
"\n"
"    return new Filesystem(new DropboxAdapter($client));\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 147 (paragraph)
msgid "However, in Laravel 9.x, the callback given to the `Storage::extend` method should return an instance of `Illuminate\\Filesystem\\FilesystemAdapter` directly:"
msgstr ""

#: docs/9.x/upgrade.md:block 148 (code)
msgid ""
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $adapter = new DropboxAdapter(\n"
"        new DropboxClient($config['authorization_token'])\n"
"    );\n"
"\n"
"    return new FilesystemAdapter(\n"
"        new Filesystem($adapter, $config),\n"
"        $adapter,\n"
"        $config\n"
"    );\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 149 (header)
msgid "Helpers"
msgstr ""

#: docs/9.x/upgrade.md:block 151 (header)
msgid "The `data_get` Helper & Iterable Objects"
msgstr ""

#: docs/9.x/upgrade.md:block 153 (paragraph)
msgid "Previously, the `data_get` helper could be used to retrieve nested data on arrays and `Collection` instances; however, this helper can now retrieve nested data on all iterable objects."
msgstr ""

#: docs/9.x/upgrade.md:block 155 (header)
msgid "The `str` Helper"
msgstr ""

#: docs/9.x/upgrade.md:block 157 (paragraph)
msgid "Laravel 9.x now includes a global `str` [helper function](/docs/{{version}}/helpers#method-str). If you are defining a global `str` helper in your application, you should rename or remove it so that it does not conflict with Laravel's own `str` helper."
msgstr ""

#: docs/9.x/upgrade.md:block 159 (header)
msgid "The `when` / `unless` Methods"
msgstr ""

#: docs/9.x/upgrade.md:block 161 (paragraph)
msgid "As you may know, `when` and `unless` methods are offered by various classes throughout the framework. These methods can be used to conditionally perform an action if the boolean value of the first argument to the method evaluates to `true` or `false`:"
msgstr ""

#: docs/9.x/upgrade.md:block 162 (code)
msgid ""
"$collection->when(true, function ($collection) {\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 163 (paragraph)
msgid "Therefore, in previous releases of Laravel, passing a closure to the `when` or `unless` methods meant that the conditional operation would always execute, since a loose comparison against a closure object (or any other object) always evaluates to `true`. This often led to unexpected outcomes because developers expect the **result** of the closure to be used as the boolean value that determines if the conditional action executes."
msgstr ""

#: docs/9.x/upgrade.md:block 164 (paragraph)
msgid "So, in Laravel 9.x, any closures passed to the `when` or `unless` methods will be executed and the value returned by the closure will be considered the boolean value used by the `when` and `unless` methods:"
msgstr ""

#: docs/9.x/upgrade.md:block 165 (code)
msgid ""
"$collection->when(function ($collection) {\n"
"    // This closure is executed...\n"
"    return false;\n"
"}, function ($collection) {\n"
"    // Not executed since first closure returned \"false\"...\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 166 (header)
msgid "HTTP Client"
msgstr ""

#: docs/9.x/upgrade.md:block 168 (header)
msgid "Default Timeout"
msgstr ""

#: docs/9.x/upgrade.md:block 170 (paragraph)
msgid "The [HTTP client](/docs/{{version}}/http-client) now has a default timeout of 30 seconds. In other words, if the server does not respond within 30 seconds, an exception will be thrown. Previously, no default timeout length was configured on the HTTP client, causing requests to sometimes \"hang\" indefinitely."
msgstr ""

#: docs/9.x/upgrade.md:block 171 (paragraph)
msgid "If you wish to specify a longer timeout for a given request, you may do so using the `timeout` method:"
msgstr ""

#: docs/9.x/upgrade.md:block 172 (code)
msgid "$response = Http::timeout(120)->get(...);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 173 (header)
msgid "HTTP Fake & Middleware"
msgstr ""

#: docs/9.x/upgrade.md:block 175 (paragraph)
msgid "Previously, Laravel would not execute any provided Guzzle HTTP middleware when the [HTTP client](/docs/{{version}}/http-client) was \"faked\". However, in Laravel 9.x, Guzzle HTTP middleware will be executed even when the HTTP client is faked."
msgstr ""

#: docs/9.x/upgrade.md:block 176 (header)
msgid "HTTP Fake & Dependency Injection"
msgstr ""

#: docs/9.x/upgrade.md:block 178 (paragraph)
msgid "In previous releases of Laravel, invoking the `Http::fake()` method would not affect instances of the `Illuminate\\Http\\Client\\Factory` that were injected into class constructors. However, in Laravel 9.x, `Http::fake()` will ensure fake responses are returned by HTTP clients injected into other services via dependency injection. This behavior is more consistent with the behavior of other facades and fakes."
msgstr ""

#: docs/9.x/upgrade.md:block 180 (header)
msgid "Symfony Mailer"
msgstr ""

#: docs/9.x/upgrade.md:block 182 (paragraph)
msgid "One of the largest changes in Laravel 9.x is the transition from SwiftMailer, which is no longer maintained as of December 2021, to Symfony Mailer. However, we have tried to make this transition as seamless as possible for your applications. That being said, please thoroughly review the list of changes below to ensure your application is fully compatible."
msgstr ""

#: docs/9.x/upgrade.md:block 184 (paragraph)
msgid "To continue using the Mailgun transport, your application should require the `symfony/mailgun-mailer` and `symfony/http-client` Composer packages:"
msgstr ""

#: docs/9.x/upgrade.md:block 185 (code)
msgid "composer require symfony/mailgun-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/upgrade.md:block 186 (paragraph)
msgid "The `wildbit/swiftmailer-postmark` Composer package should be removed from your application. Instead, your application should require the `symfony/postmark-mailer` and `symfony/http-client` Composer packages:"
msgstr ""

#: docs/9.x/upgrade.md:block 187 (code)
msgid "composer require symfony/postmark-mailer symfony/http-client\n"
msgstr ""

#: docs/9.x/upgrade.md:block 188 (header)
msgid "Updated Return Types"
msgstr ""

#: docs/9.x/upgrade.md:block 189 (paragraph)
msgid "The `send`, `html`, `text`, and `plain` methods no longer return the number of recipients that received the message. Instead, an instance of `Illuminate\\Mail\\SentMessage` is returned. This object contains an instance of `Symfony\\Component\\Mailer\\SentMessage` that is accessible via the `getSymfonySentMessage` method or by dynamically invoking methods on the object."
msgstr ""

#: docs/9.x/upgrade.md:block 190 (header)
msgid "Renamed \"Swift\" Methods"
msgstr ""

#: docs/9.x/upgrade.md:block 191 (paragraph)
msgid "Various SwiftMailer related methods, some of which were undocumented, have been renamed to their Symfony Mailer counterparts. For example, the `withSwiftMessage` method has been renamed to `withSymfonyMessage`:"
msgstr ""

#: docs/9.x/upgrade.md:block 192 (code)
msgid ""
"// Laravel 8.x...\n"
"$this->withSwiftMessage(function ($message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n"
"\n"
"// Laravel 9.x...\n"
"use Symfony\\Component\\Mime\\Email;\n"
"\n"
"$this->withSymfonyMessage(function (Email $message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 193 (quote)
msgid "{note} Please thoroughly review the [Symfony Mailer documentation](https://symfony.com/doc/6.0/mailer.html#creating-sending-messages) for all possible interactions with the `Symfony\\Component\\Mime\\Email` object."
msgstr ""

#: docs/9.x/upgrade.md:block 194 (paragraph)
msgid "The list below contains a more thorough overview of renamed methods. Many of these methods are low-level methods used to interact with SwiftMailer / Symfony Mailer directly, so may not be commonly used within most Laravel applications:"
msgstr ""

#: docs/9.x/upgrade.md:block 195 (code)
msgid ""
"Message::getSwiftMessage();\n"
"Message::getSymfonyMessage();\n"
"\n"
"Mailable::withSwiftMessage($callback);\n"
"Mailable::withSymfonyMessage($callback);\n"
"\n"
"MailMessage::withSwiftMessage($callback);\n"
"MailMessage::withSymfonyMessage($callback);\n"
"\n"
"Mailer::getSwiftMailer();\n"
"Mailer::getSymfonyTransport();\n"
"\n"
"Mailer::setSwiftMailer($swift);\n"
"Mailer::setSymfonyTransport(TransportInterface $transport);\n"
"\n"
"MailManager::createTransport($config);\n"
"MailManager::createSymfonyTransport($config);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 196 (header)
msgid "Proxied `Illuminate\\Mail\\Message` Methods"
msgstr ""

#: docs/9.x/upgrade.md:block 197 (paragraph)
msgid "The `Illuminate\\Mail\\Message` typically proxied missing methods to the underlying `Swift_Message` instance. However, missing methods are now proxied to an instance of `Symfony\\Component\\Mime\\Email` instead. So, any code that was previously relying on missing methods to be proxied to SwiftMailer should be updated to their corresponding Symfony Mailer counterparts."
msgstr ""

#: docs/9.x/upgrade.md:block 198 (paragraph)
msgid "Again, many applications may not be interacting with these methods, as they are not documented within the Laravel documentation:"
msgstr ""

#: docs/9.x/upgrade.md:block 199 (code)
msgid ""
"// Laravel 8.x...\n"
"$message\n"
"    ->setFrom('taylor@laravel.com')\n"
"    ->setTo('example@example.org')\n"
"    ->setSubject('Order Shipped')\n"
"    ->setBody('<h1>HTML</h1>', 'text/html')\n"
"    ->addPart('Plain Text', 'text/plain');\n"
"\n"
"// Laravel 9.x...\n"
"$message\n"
"    ->from('taylor@laravel.com')\n"
"    ->to('example@example.org')\n"
"    ->subject('Order Shipped')\n"
"    ->html('<h1>HTML</h1>')\n"
"    ->text('Plain Text');\n"
msgstr ""

#: docs/9.x/upgrade.md:block 200 (header)
msgid "Generated Messages IDs"
msgstr ""

#: docs/9.x/upgrade.md:block 201 (paragraph)
msgid "SwiftMailer offered the ability to define a custom domain to include in generated Message IDs via the `mime.idgenerator.idright` configuration option. This is not supported by Symfony Mailer. Instead, Symfony Mailer will automatically generate a Message ID based on the sender."
msgstr ""

#: docs/9.x/upgrade.md:block 202 (header)
msgid "`MessageSent` Event Changes"
msgstr ""

#: docs/9.x/upgrade.md:block 203 (paragraph)
msgid "The `message` property of the `Illuminate\\Mail\\Events\\MessageSent` event now contains an instance of `Symfony\\Component\\Mime\\Email` instead of an instance of `Swift_Message`. This message represents the email **before** it is sent."
msgstr ""

#: docs/9.x/upgrade.md:block 204 (paragraph)
msgid "Additionally, a new `sent` property has been added to the `MessageSent` event. This property contains an instance of `Illuminate\\Mail\\SentMessage` and contains information about the sent email, such as the message ID."
msgstr ""

#: docs/9.x/upgrade.md:block 205 (header)
msgid "Forced Reconnections"
msgstr ""

#: docs/9.x/upgrade.md:block 206 (paragraph)
msgid "It is no longer possible to force a transport reconnection (for example when the mailer is running via a daemon process). Instead, Symfony Mailer will attempt to reconnect to the transport automatically and throw an exception if the reconnection fails."
msgstr ""

#: docs/9.x/upgrade.md:block 207 (header)
msgid "SMTP Stream Options"
msgstr ""

#: docs/9.x/upgrade.md:block 208 (paragraph)
msgid "Defining stream options for the SMTP transport is no longer supported. Instead, you must define the relevant options directly within the configuration if they are supported. For example, to disable TLS peer verification:"
msgstr ""

#: docs/9.x/upgrade.md:block 209 (code)
msgid ""
"'smtp' => [\n"
"    // Laravel 8.x...\n"
"    'stream' => [\n"
"        'ssl' => [\n"
"            'verify_peer' => false,\n"
"        ],\n"
"    ],\n"
"\n"
"    // Laravel 9.x...\n"
"    'verify_peer' => false,\n"
"],\n"
msgstr ""

#: docs/9.x/upgrade.md:block 210 (paragraph)
msgid "To learn more about the available configuration options, please review the [Symfony Mailer documentation](https://symfony.com/doc/6.0/mailer.html#transport-setup)."
msgstr ""

#: docs/9.x/upgrade.md:block 211 (quote)
msgid "{note} In spite of the example above, you are not generally advised to disable SSL verification since it introduces the possibility of \"man-in-the-middle\" attacks."
msgstr ""

#: docs/9.x/upgrade.md:block 212 (header)
msgid "SMTP `auth_mode`"
msgstr ""

#: docs/9.x/upgrade.md:block 213 (paragraph)
msgid "Defining the SMTP `auth_mode` in the `mail` configuration file is no longer required. The authentication mode will be automatically negotiated between Symfony Mailer and the SMTP server."
msgstr ""

#: docs/9.x/upgrade.md:block 214 (header)
msgid "Failed Recipients"
msgstr ""

#: docs/9.x/upgrade.md:block 215 (paragraph)
msgid "It is no longer possible to retrieve a list of failed recipients after sending a message. Instead, a `Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface` exception will be thrown if a message fails to send. Instead of relying on retrieving invalid email addresses after sending a message, we recommend that you validate email addresses before sending the message instead."
msgstr ""

#: docs/9.x/upgrade.md:block 216 (header)
msgid "Packages"
msgstr ""

#: docs/9.x/upgrade.md:block 218 (header)
msgid "The `lang` Directory"
msgstr ""

#: docs/9.x/upgrade.md:block 220 (paragraph)
msgid "In new Laravel applications, the `resources/lang` directory is now located in the root project directory (`lang`). If your package is publishing language files to this directory, you should ensure that your package is publishing to `app()->langPath()` instead of a hard-coded path."
msgstr ""

#: docs/9.x/upgrade.md:block 224 (header)
msgid "The `opis/closure` Library"
msgstr ""

#: docs/9.x/upgrade.md:block 226 (paragraph)
msgid "Laravel's dependency on `opis/closure` has been replaced by `laravel/serializable-closure`. This should not cause any breaking change in your application unless you are interacting with the `opis/closure` library directly. In addition, the previously deprecated `Illuminate\\Queue\\SerializableClosureFactory` and `Illuminate\\Queue\\SerializableClosure` classes have been removed. If you are interacting with `opis/closure` library directly or using any of the removed classes, you may use [Laravel Serializable Closure](https://github.com/laravel/serializable-closure) instead."
msgstr ""

#: docs/9.x/upgrade.md:block 227 (header)
msgid "The Failed Job Provider `flush` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 229 (paragraph)
msgid "The `flush` method defined by the `Illuminate\\Queue\\Failed\\FailedJobProviderInterface` interface now accepts an `$hours` argument which determines how old a failed job must be (in hours) before it is flushed by the `queue:flush` command. If you are manually implementing the `FailedJobProviderInterface` you should ensure that your implementation is updated to reflect this new argument:"
msgstr ""

#: docs/9.x/upgrade.md:block 230 (code)
msgid "public function flush($hours = null);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 232 (header)
msgid "The `getSession` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 234 (paragraph)
msgid "The `Symfony\\Component\\HttpFoundaton\\Request` class that is extended by Laravel's own `Illuminate\\Http\\Request` class offers a `getSession` method to get the current session storage handler. This method is not documented by Laravel as most Laravel applications interact with the session through Laravel's own `session` method."
msgstr ""

#: docs/9.x/upgrade.md:block 235 (paragraph)
msgid "The `getSession` method previously returned an instance of `Illuminate\\Session\\Store` or `null`; however, due to the Symfony 6.x release enforcing a return type of `Symfony\\Component\\HttpFoundation\\Session\\SessionInterface`, the `getSession` now correctly returns a `SessionInterface` implementation or throws an `\\Symfony\\Component\\HttpFoundation\\Exception\\SessionNotFoundException` exception when no session is available."
msgstr ""

#: docs/9.x/upgrade.md:block 238 (header)
msgid "The `assertDeleted` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 240 (paragraph)
msgid "All calls to the `assertDeleted` method should be updated to `assertModelMissing`."
msgstr ""

#: docs/9.x/upgrade.md:block 241 (header)
msgid "Trusted Proxies"
msgstr ""

#: docs/9.x/upgrade.md:block 243 (paragraph)
msgid "If you are upgrading your Laravel 8 project to Laravel 9 by importing your existing application code into a totally new Laravel 9 application skeleton, you may need to update your application's \"trusted proxy\" middleware."
msgstr ""

#: docs/9.x/upgrade.md:block 244 (paragraph)
msgid "Within your `app/Http/Middleware/TrustProxies.php` file, update `use Fideloper\\Proxy\\TrustProxies as Middleware` to `use Illuminate\\Http\\Middleware\\TrustProxies as Middleware`."
msgstr ""

#: docs/9.x/upgrade.md:block 245 (paragraph)
msgid "Next, within `app/Http/Middleware/TrustProxies.php`, you should update the `$headers` property definition:"
msgstr ""

#: docs/9.x/upgrade.md:block 246 (code)
msgid ""
"// Before...\n"
"protected $headers = Request::HEADER_X_FORWARDED_ALL;\n"
"\n"
"// After...\n"
"protected $headers =\n"
"    Request::HEADER_X_FORWARDED_FOR |\n"
"    Request::HEADER_X_FORWARDED_HOST |\n"
"    Request::HEADER_X_FORWARDED_PORT |\n"
"    Request::HEADER_X_FORWARDED_PROTO |\n"
"    Request::HEADER_X_FORWARDED_AWS_ELB;\n"
msgstr ""

#: docs/9.x/upgrade.md:block 247 (paragraph)
msgid "Finally, you can remove the `fideloper/proxy` Composer dependency from your application:"
msgstr ""

#: docs/9.x/upgrade.md:block 248 (code)
msgid "composer remove fideloper/proxy\n"
msgstr ""

#: docs/9.x/upgrade.md:block 250 (header)
msgid "Form Request `validated` Method"
msgstr ""

#: docs/9.x/upgrade.md:block 252 (paragraph)
msgid "The `validated` method offered by form requests now accepts `$key` and `$default` arguments. If you are manually overwriting the definition of this method, you should update your method's signature to reflect these new arguments:"
msgstr ""

#: docs/9.x/upgrade.md:block 253 (code)
msgid "public function validated($key = null, $default = null)\n"
msgstr ""

#: docs/9.x/upgrade.md:block 255 (header)
msgid "The `password` Rule"
msgstr ""

#: docs/9.x/upgrade.md:block 257 (paragraph)
msgid "The `password` rule, which validates that the given input value matches the authenticated user's current password, has been renamed to `current_password`."
msgstr ""

#: docs/9.x/upgrade.md:block 259 (header)
msgid "Unvalidated Array Keys"
msgstr ""

#: docs/9.x/upgrade.md:block 261 (paragraph)
msgid "In previous releases of Laravel, you were required to manually instruct Laravel's validator to exclude unvalidated array keys from the \"validated\" data it returns, especially in combination with an `array` rule that does not specify a list of allowed keys."
msgstr ""

#: docs/9.x/upgrade.md:block 262 (paragraph)
msgid "However, in Laravel 9.x, unvalidated array keys are always excluded from the \"validated\" data even when no allowed keys have been specified via the `array` rule. Typically, this behavior is the most expected behavior and the previous `excludeUnvalidatedArrayKeys` method was only added to Laravel 8.x as a temporary measure in order to preserve backwards compatibility."
msgstr ""

#: docs/9.x/upgrade.md:block 263 (paragraph)
msgid "Although it is not recommended, you may opt-in to the previous Laravel 8.x behavior by invoking a new `includeUnvalidatedArrayKeys` method within the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/9.x/upgrade.md:block 264 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Validator;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::includeUnvalidatedArrayKeys();\n"
"}\n"
msgstr ""

#: docs/9.x/upgrade.md:block 267 (paragraph)
msgid "We also encourage you to view the changes in the `laravel/laravel` [GitHub repository](https://github.com/laravel/laravel). While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the [GitHub comparison tool](https://github.com/laravel/laravel/compare/8.x...9.x) and choose which updates are important to you."
msgstr ""

#: docs/master/upgrade.md:block 130 (paragraph)
msgid "Write operations such as `put`, `write`, `writeStream` now overwrite existing files by default. If you do not want to overwrite existing files, you should manually check for the file's existence before performing the write operation."
msgstr ""

#: docs/master/upgrade.md:block 142 (code)
msgid ""
"use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n"
"\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $adapter = new DropboxAdapter(new DropboxClient(\n"
"        $config['authorization_token']\n"
"    ););\n"
"\n"
"    return new FilesystemAdapter(\n"
"        new Filesystem($adapter, $config),\n"
"        $adapter,\n"
"        $config\n"
"    );\n"
"});\n"
msgstr ""
