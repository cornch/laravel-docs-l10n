#
msgid ""
msgstr ""

#: docs/10.x/telescope.md:block 1 (header)
msgid "Laravel Telescope"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Local Only Installation](#local-only-installation)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Data Pruning](#data-pruning)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Dashboard Authorization](#dashboard-authorization)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Upgrading Telescope](#upgrading-telescope)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Filtering](#filtering)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Entries](#filtering-entries)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Batches](#filtering-batches)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Tagging](#tagging)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Available Watchers](#available-watchers)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Batch Watcher](#batch-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Cache Watcher](#cache-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Command Watcher](#command-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Dump Watcher](#dump-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Event Watcher](#event-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Exception Watcher](#exception-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Gate Watcher](#gate-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[HTTP Client Watcher](#http-client-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Job Watcher](#job-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Log Watcher](#log-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Mail Watcher](#mail-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Model Watcher](#model-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Notification Watcher](#notification-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Query Watcher](#query-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Redis Watcher](#redis-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Request Watcher](#request-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Schedule Watcher](#schedule-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[View Watcher](#view-watcher)"
msgstr ""

#: docs/10.x/telescope.md:block 2 (unordered list)
msgid "[Displaying User Avatars](#displaying-user-avatars)"
msgstr ""

#: docs/10.x/telescope.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/telescope.md:block 5 (paragraph)
msgid "[Laravel Telescope](https://github.com/laravel/telescope) makes a wonderful companion to your local Laravel development environment. Telescope provides insight into the requests coming into your application, exceptions, log entries, database queries, queued jobs, mail, notifications, cache operations, scheduled tasks, variable dumps, and more."
msgstr ""

#: docs/10.x/telescope.md:block 8 (header)
msgid "Installation"
msgstr ""

#: docs/10.x/telescope.md:block 9 (paragraph)
msgid "You may use the Composer package manager to install Telescope into your Laravel project:"
msgstr ""

#: docs/10.x/telescope.md:block 10 (code)
msgid "composer require laravel/telescope\n"
msgstr ""

#: docs/10.x/telescope.md:block 11 (paragraph)
msgid "After installing Telescope, publish its assets using the `telescope:install` Artisan command. After installing Telescope, you should also run the `migrate` command in order to create the tables needed to store Telescope's data:"
msgstr ""

#: docs/10.x/telescope.md:block 12 (code)
msgid ""
"php artisan telescope:install\n"
"\n"
"php artisan migrate\n"
msgstr ""

#: docs/10.x/telescope.md:block 14 (header)
msgid "Migration Customization"
msgstr ""

#: docs/10.x/telescope.md:block 15 (paragraph)
msgid "If you are not going to use Telescope's default migrations, you should call the `Telescope::ignoreMigrations` method in the `register` method of your application's `App\\Providers\\AppServiceProvider` class. You may export the default migrations using the following command: `php artisan vendor:publish --tag=telescope-migrations`"
msgstr ""

#: docs/10.x/telescope.md:block 17 (header)
msgid "Local Only Installation"
msgstr ""

#: docs/10.x/telescope.md:block 18 (paragraph)
msgid "If you plan to only use Telescope to assist your local development, you may install Telescope using the `--dev` flag:"
msgstr ""

#: docs/10.x/telescope.md:block 19 (code)
msgid ""
"composer require laravel/telescope --dev\n"
"\n"
"php artisan telescope:install\n"
"\n"
"php artisan migrate\n"
msgstr ""

#: docs/10.x/telescope.md:block 20 (paragraph)
msgid "After running `telescope:install`, you should remove the `TelescopeServiceProvider` service provider registration from your application's `config/app.php` configuration file. Instead, manually register Telescope's service providers in the `register` method of your `App\\Providers\\AppServiceProvider` class. We will ensure the current environment is `local` before registering the providers:"
msgstr ""

#: docs/10.x/telescope.md:block 21 (code)
msgid ""
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        $this->app->register(\\Laravel\\Telescope\\TelescopeServiceProvider::class);\n"
"        $this->app->register(TelescopeServiceProvider::class);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/telescope.md:block 22 (paragraph)
msgid "Finally, you should also prevent the Telescope package from being [auto-discovered](/docs/{{version}}/packages#package-discovery) by adding the following to your `composer.json` file:"
msgstr ""

#: docs/10.x/telescope.md:block 23 (code)
msgid ""
"\"extra\": {\n"
"    \"laravel\": {\n"
"        \"dont-discover\": [\n"
"            \"laravel/telescope\"\n"
"        ]\n"
"    }\n"
"},\n"
msgstr ""

#: docs/10.x/telescope.md:block 25 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/telescope.md:block 26 (paragraph)
msgid "After publishing Telescope's assets, its primary configuration file will be located at `config/telescope.php`. This configuration file allows you to configure your [watcher options](#available-watchers). Each configuration option includes a description of its purpose, so be sure to thoroughly explore this file."
msgstr ""

#: docs/10.x/telescope.md:block 27 (paragraph)
msgid "If desired, you may disable Telescope's data collection entirely using the `enabled` configuration option:"
msgstr ""

#: docs/10.x/telescope.md:block 28 (code)
msgid "'enabled' => env('TELESCOPE_ENABLED', true),\n"
msgstr ""

#: docs/10.x/telescope.md:block 30 (header)
msgid "Data Pruning"
msgstr ""

#: docs/10.x/telescope.md:block 31 (paragraph)
msgid "Without pruning, the `telescope_entries` table can accumulate records very quickly. To mitigate this, you should [schedule](/docs/{{version}}/scheduling) the `telescope:prune` Artisan command to run daily:"
msgstr ""

#: docs/10.x/telescope.md:block 32 (code)
msgid "$schedule->command('telescope:prune')->daily();\n"
msgstr ""

#: docs/10.x/telescope.md:block 33 (paragraph)
msgid "By default, all entries older than 24 hours will be pruned. You may use the `hours` option when calling the command to determine how long to retain Telescope data. For example, the following command will delete all records created over 48 hours ago:"
msgstr ""

#: docs/10.x/telescope.md:block 34 (code)
msgid "$schedule->command('telescope:prune --hours=48')->daily();\n"
msgstr ""

#: docs/10.x/telescope.md:block 36 (header)
msgid "Dashboard Authorization"
msgstr ""

#: docs/10.x/telescope.md:block 37 (paragraph)
msgid "The Telescope dashboard may be accessed at the `/telescope` route. By default, you will only be able to access this dashboard in the `local` environment. Within your `app/Providers/TelescopeServiceProvider.php` file, there is an [authorization gate](/docs/{{version}}/authorization#gates) definition. This authorization gate controls access to Telescope in **non-local** environments. You are free to modify this gate as needed to restrict access to your Telescope installation:"
msgstr ""

#: docs/10.x/telescope.md:block 38 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Register the Telescope gate.\n"
" *\n"
" * This gate determines who can access Telescope in non-local environments.\n"
" */\n"
"protected function gate(): void\n"
"{\n"
"    Gate::define('viewTelescope', function (User $user) {\n"
"        return in_array($user->email, [\n"
"            'taylor@laravel.com',\n"
"        ]);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/telescope.md:block 39 (quote)
msgid "**Warning** You should ensure you change your `APP_ENV` environment variable to `production` in your production environment. Otherwise, your Telescope installation will be publicly available."
msgstr ""

#: docs/10.x/telescope.md:block 41 (header)
msgid "Upgrading Telescope"
msgstr ""

#: docs/10.x/telescope.md:block 42 (paragraph)
msgid "When upgrading to a new major version of Telescope, it's important that you carefully review [the upgrade guide](https://github.com/laravel/telescope/blob/master/UPGRADE.md)."
msgstr ""

#: docs/10.x/telescope.md:block 43 (paragraph)
msgid "In addition, when upgrading to any new Telescope version, you should re-publish Telescope's assets:"
msgstr ""

#: docs/10.x/telescope.md:block 44 (code)
msgid "php artisan telescope:publish\n"
msgstr ""

#: docs/10.x/telescope.md:block 45 (paragraph)
msgid "To keep the assets up-to-date and avoid issues in future updates, you may add the `vendor:publish --tag=laravel-assets` command to the `post-update-cmd` scripts in your application's `composer.json` file:"
msgstr ""

#: docs/10.x/telescope.md:block 46 (code)
msgid ""
"{\n"
"    \"scripts\": {\n"
"        \"post-update-cmd\": [\n"
"            \"@php artisan vendor:publish --tag=laravel-assets --ansi --force\"\n"
"        ]\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/telescope.md:block 48 (header)
msgid "Filtering"
msgstr ""

#: docs/10.x/telescope.md:block 50 (header)
msgid "Entries"
msgstr ""

#: docs/10.x/telescope.md:block 51 (paragraph)
msgid "You may filter the data that is recorded by Telescope via the `filter` closure that is defined in your `App\\Providers\\TelescopeServiceProvider` class. By default, this closure records all data in the `local` environment and exceptions, failed jobs, scheduled tasks, and data with monitored tags in all other environments:"
msgstr ""

#: docs/10.x/telescope.md:block 52 (code)
msgid ""
"use Laravel\\Telescope\\IncomingEntry;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::filter(function (IncomingEntry $entry) {\n"
"        if ($this->app->environment('local')) {\n"
"            return true;\n"
"        }\n"
"\n"
"        return $entry->isReportableException() ||\n"
"            $entry->isFailedJob() ||\n"
"            $entry->isScheduledTask() ||\n"
"            $entry->isSlowQuery() ||\n"
"            $entry->hasMonitoredTag();\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/telescope.md:block 54 (header)
msgid "Batches"
msgstr ""

#: docs/10.x/telescope.md:block 55 (paragraph)
msgid "While the `filter` closure filters data for individual entries, you may use the `filterBatch` method to register a closure that filters all data for a given request or console command. If the closure returns `true`, all of the entries are recorded by Telescope:"
msgstr ""

#: docs/10.x/telescope.md:block 56 (code)
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Laravel\\Telescope\\IncomingEntry;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::filterBatch(function (Collection $entries) {\n"
"        if ($this->app->environment('local')) {\n"
"            return true;\n"
"        }\n"
"\n"
"        return $entries->contains(function (IncomingEntry $entry) {\n"
"            return $entry->isReportableException() ||\n"
"                $entry->isFailedJob() ||\n"
"                $entry->isScheduledTask() ||\n"
"                $entry->isSlowQuery() ||\n"
"                $entry->hasMonitoredTag();\n"
"            });\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/telescope.md:block 58 (header)
msgid "Tagging"
msgstr ""

#: docs/10.x/telescope.md:block 59 (paragraph)
msgid "Telescope allows you to search entries by \"tag\". Often, tags are Eloquent model class names or authenticated user IDs which Telescope automatically adds to entries. Occasionally, you may want to attach your own custom tags to entries. To accomplish this, you may use the `Telescope::tag` method. The `tag` method accepts a closure which should return an array of tags. The tags returned by the closure will be merged with any tags Telescope would automatically attach to the entry. Typically, you should call the `tag` method within the `register` method of your `App\\Providers\\TelescopeServiceProvider` class:"
msgstr ""

#: docs/10.x/telescope.md:block 60 (code)
msgid ""
"use Laravel\\Telescope\\IncomingEntry;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::tag(function (IncomingEntry $entry) {\n"
"        return $entry->type === 'request'\n"
"                    ? ['status:'.$entry->content['response_status']]\n"
"                    : [];\n"
"    });\n"
" }\n"
msgstr ""

#: docs/10.x/telescope.md:block 62 (header)
msgid "Available Watchers"
msgstr ""

#: docs/10.x/telescope.md:block 63 (paragraph)
msgid "Telescope \"watchers\" gather application data when a request or console command is executed. You may customize the list of watchers that you would like to enable within your `config/telescope.php` configuration file:"
msgstr ""

#: docs/10.x/telescope.md:block 64 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\CacheWatcher::class => true,\n"
"    Watchers\\CommandWatcher::class => true,\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 65 (paragraph)
msgid "Some watchers also allow you to provide additional customization options:"
msgstr ""

#: docs/10.x/telescope.md:block 66 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\QueryWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_QUERY_WATCHER', true),\n"
"        'slow' => 100,\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 68 (header)
msgid "Batch Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 69 (paragraph)
msgid "The batch watcher records information about queued [batches](/docs/{{version}}/queues#job-batching), including the job and connection information."
msgstr ""

#: docs/10.x/telescope.md:block 71 (header)
msgid "Cache Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 72 (paragraph)
msgid "The cache watcher records data when a cache key is hit, missed, updated and forgotten."
msgstr ""

#: docs/10.x/telescope.md:block 74 (header)
msgid "Command Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 75 (paragraph)
msgid "The command watcher records the arguments, options, exit code, and output whenever an Artisan command is executed. If you would like to exclude certain commands from being recorded by the watcher, you may specify the command in the `ignore` option within your `config/telescope.php` file:"
msgstr ""

#: docs/10.x/telescope.md:block 76 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\CommandWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_COMMAND_WATCHER', true),\n"
"        'ignore' => ['key:generate'],\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 78 (header)
msgid "Dump Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 79 (paragraph)
msgid "The dump watcher records and displays your variable dumps in Telescope. When using Laravel, variables may be dumped using the global `dump` function. The dump watcher tab must be open in a browser for the dump to be recorded, otherwise, the dumps will be ignored by the watcher."
msgstr ""

#: docs/10.x/telescope.md:block 81 (header)
msgid "Event Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 82 (paragraph)
msgid "The event watcher records the payload, listeners, and broadcast data for any [events](/docs/{{version}}/events) dispatched by your application. The Laravel framework's internal events are ignored by the Event watcher."
msgstr ""

#: docs/10.x/telescope.md:block 84 (header)
msgid "Exception Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 85 (paragraph)
msgid "The exception watcher records the data and stack trace for any reportable exceptions that are thrown by your application."
msgstr ""

#: docs/10.x/telescope.md:block 87 (header)
msgid "Gate Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 88 (paragraph)
msgid "The gate watcher records the data and result of [gate and policy](/docs/{{version}}/authorization) checks by your application. If you would like to exclude certain abilities from being recorded by the watcher, you may specify those in the `ignore_abilities` option in your `config/telescope.php` file:"
msgstr ""

#: docs/10.x/telescope.md:block 89 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\GateWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_GATE_WATCHER', true),\n"
"        'ignore_abilities' => ['viewNova'],\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 91 (header)
msgid "HTTP Client Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 92 (paragraph)
msgid "The HTTP client watcher records outgoing [HTTP client requests](/docs/{{version}}/http-client) made by your application."
msgstr ""

#: docs/10.x/telescope.md:block 94 (header)
msgid "Job Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 95 (paragraph)
msgid "The job watcher records the data and status of any [jobs](/docs/{{version}}/queues) dispatched by your application."
msgstr ""

#: docs/10.x/telescope.md:block 97 (header)
msgid "Log Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 98 (paragraph)
msgid "The log watcher records the [log data](/docs/{{version}}/logging) for any logs written by your application."
msgstr ""

#: docs/10.x/telescope.md:block 100 (header)
msgid "Mail Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 101 (paragraph)
msgid "The mail watcher allows you to view an in-browser preview of [emails](/docs/{{version}}/mail) sent by your application along with their associated data. You may also download the email as an `.eml` file."
msgstr ""

#: docs/10.x/telescope.md:block 103 (header)
msgid "Model Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 104 (paragraph)
msgid "The model watcher records model changes whenever an Eloquent [model event](/docs/{{version}}/eloquent#events) is dispatched. You may specify which model events should be recorded via the watcher's `events` option:"
msgstr ""

#: docs/10.x/telescope.md:block 105 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\ModelWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_MODEL_WATCHER', true),\n"
"        'events' => ['eloquent.created*', 'eloquent.updated*'],\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 106 (paragraph)
msgid "If you would like to record the number of models hydrated during a given request, enable the `hydrations` option:"
msgstr ""

#: docs/10.x/telescope.md:block 107 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\ModelWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_MODEL_WATCHER', true),\n"
"        'events' => ['eloquent.created*', 'eloquent.updated*'],\n"
"        'hydrations' => true,\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 109 (header)
msgid "Notification Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 110 (paragraph)
msgid "The notification watcher records all [notifications](/docs/{{version}}/notifications) sent by your application. If the notification triggers an email and you have the mail watcher enabled, the email will also be available for preview on the mail watcher screen."
msgstr ""

#: docs/10.x/telescope.md:block 112 (header)
msgid "Query Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 113 (paragraph)
msgid "The query watcher records the raw SQL, bindings, and execution time for all queries that are executed by your application. The watcher also tags any queries slower than 100 milliseconds as `slow`. You may customize the slow query threshold using the watcher's `slow` option:"
msgstr ""

#: docs/10.x/telescope.md:block 114 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\QueryWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_QUERY_WATCHER', true),\n"
"        'slow' => 50,\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 116 (header)
msgid "Redis Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 117 (paragraph)
msgid "The Redis watcher records all [Redis](/docs/{{version}}/redis) commands executed by your application. If you are using Redis for caching, cache commands will also be recorded by the Redis watcher."
msgstr ""

#: docs/10.x/telescope.md:block 119 (header)
msgid "Request Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 120 (paragraph)
msgid "The request watcher records the request, headers, session, and response data associated with any requests handled by the application. You may limit your recorded response data via the `size_limit` (in kilobytes) option:"
msgstr ""

#: docs/10.x/telescope.md:block 121 (code)
msgid ""
"'watchers' => [\n"
"    Watchers\\RequestWatcher::class => [\n"
"        'enabled' => env('TELESCOPE_REQUEST_WATCHER', true),\n"
"        'size_limit' => env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),\n"
"    ],\n"
"    ...\n"
"],\n"
msgstr ""

#: docs/10.x/telescope.md:block 123 (header)
msgid "Schedule Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 124 (paragraph)
msgid "The schedule watcher records the command and output of any [scheduled tasks](/docs/{{version}}/scheduling) run by your application."
msgstr ""

#: docs/10.x/telescope.md:block 126 (header)
msgid "View Watcher"
msgstr ""

#: docs/10.x/telescope.md:block 127 (paragraph)
msgid "The view watcher records the [view](/docs/{{version}}/views) name, path, data, and \"composers\" used when rendering views."
msgstr ""

#: docs/10.x/telescope.md:block 129 (header)
msgid "Displaying User Avatars"
msgstr ""

#: docs/10.x/telescope.md:block 130 (paragraph)
msgid "The Telescope dashboard displays the user avatar for the user that was authenticated when a given entry was saved. By default, Telescope will retrieve avatars using the Gravatar web service. However, you may customize the avatar URL by registering a callback in your `App\\Providers\\TelescopeServiceProvider` class. The callback will receive the user's ID and email address and should return the user's avatar image URL:"
msgstr ""

#: docs/10.x/telescope.md:block 131 (code)
msgid ""
"use App\\Models\\User;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    // ...\n"
"\n"
"    Telescope::avatar(function (string $id, string $email) {\n"
"        return '/avatars/'.User::find($id)->avatar_path;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 21 (code)
msgid ""
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    if ($this->app->environment('local')) {\n"
"        $this->app->register(\\Laravel\\Telescope\\TelescopeServiceProvider::class);\n"
"        $this->app->register(TelescopeServiceProvider::class);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 38 (code)
msgid ""
"/**\n"
" * Register the Telescope gate.\n"
" *\n"
" * This gate determines who can access Telescope in non-local environments.\n"
" *\n"
" * @return void\n"
" */\n"
"protected function gate()\n"
"{\n"
"    Gate::define('viewTelescope', function ($user) {\n"
"        return in_array($user->email, [\n"
"            'taylor@laravel.com',\n"
"        ]);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 39 (quote)
msgid "{note} You should ensure you change your `APP_ENV` environment variable to `production` in your production environment. Otherwise, your Telescope installation will be publicly available."
msgstr ""

#: docs/8.x/telescope.md:block 45 (paragraph)
msgid "To keep the assets up-to-date and avoid issues in future updates, you may add the `telescope:publish` command to the `post-update-cmd` scripts in your application's `composer.json` file:"
msgstr ""

#: docs/8.x/telescope.md:block 46 (code)
msgid ""
"{\n"
"    \"scripts\": {\n"
"        \"post-update-cmd\": [\n"
"            \"@php artisan telescope:publish --ansi\"\n"
"        ]\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 52 (code)
msgid ""
"use Laravel\\Telescope\\IncomingEntry;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::filter(function (IncomingEntry $entry) {\n"
"        if ($this->app->environment('local')) {\n"
"            return true;\n"
"        }\n"
"\n"
"        return $entry->isReportableException() ||\n"
"            $entry->isFailedJob() ||\n"
"            $entry->isScheduledTask() ||\n"
"            $entry->isSlowQuery() ||\n"
"            $entry->hasMonitoredTag();\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 56 (code)
msgid ""
"use Illuminate\\Support\\Collection;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::filterBatch(function (Collection $entries) {\n"
"        if ($this->app->environment('local')) {\n"
"            return true;\n"
"        }\n"
"\n"
"        return $entries->contains(function ($entry) {\n"
"            return $entry->isReportableException() ||\n"
"                $entry->isFailedJob() ||\n"
"                $entry->isScheduledTask() ||\n"
"                $entry->isSlowQuery() ||\n"
"                $entry->hasMonitoredTag();\n"
"            });\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/telescope.md:block 60 (code)
msgid ""
"use Laravel\\Telescope\\IncomingEntry;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->hideSensitiveRequestDetails();\n"
"\n"
"    Telescope::tag(function (IncomingEntry $entry) {\n"
"        return $entry->type === 'request'\n"
"                    ? ['status:'.$entry->content['response_status']]\n"
"                    : [];\n"
"    });\n"
" }\n"
msgstr ""

#: docs/8.x/telescope.md:block 131 (code)
msgid ""
"use App\\Models\\User;\n"
"use Laravel\\Telescope\\Telescope;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    // ...\n"
"\n"
"    Telescope::avatar(function ($id, $email) {\n"
"        return '/avatars/'.User::find($id)->avatar_path;\n"
"    });\n"
"}\n"
msgstr ""
