msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/eloquent-mutators.pot\n"
"X-Crowdin-File-ID: 53\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2023-01-25 10:52\n"

#: docs/8.x/eloquent-mutators.md:block 1 (header)
msgid "Eloquent: Mutators & Casting"
msgstr "Eloquent：更動子與型別轉換"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Accessors & Mutators](#accessors-and-mutators)"
msgstr "[Accessor 與 Mutator](#accessors-and-mutators)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Defining An Accessor](#defining-an-accessor)"
msgstr "[定義 Accessor](#defining-an-accessor)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Defining A Mutator](#defining-a-mutator)"
msgstr "[定義 Mutator](#defining-a-mutator)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Attribute Casting](#attribute-casting)"
msgstr "[屬性的型別轉換](#attribute-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Array & JSON Casting](#array-and-json-casting)"
msgstr "[陣列與 JSON 的型別轉換](#array-and-json-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Date Casting](#date-casting)"
msgstr "[日期的型別轉換](#date-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Enum Casting](#enum-casting)"
msgstr "[Enum 的型別轉換](#enum-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Encrypted Casting](#encrypted-casting)"
msgstr "[Encrypted 型別轉換](#encrypted-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Query Time Casting](#query-time-casting)"
msgstr "[查詢階段的型別轉換](#query-time-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Custom Casts](#custom-casts)"
msgstr "[自訂型別轉換](#custom-casts)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Value Object Casting](#value-object-casting)"
msgstr "[Value Object 的型別轉換](#value-object-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Array / JSON Serialization](#array-json-serialization)"
msgstr "[陣列與 JSON 的序列化](#array-json-serialization)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Inbound Casting](#inbound-casting)"
msgstr "[輸入型別轉換](#inbound-casting)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Cast Parameters](#cast-parameters)"
msgstr "[型別轉換的參數](#cast-parameters)"

#: docs/8.x/eloquent-mutators.md:block 2 (unordered list)
msgid "[Castables](#castables)"
msgstr "[Castable](#castables)"

#: docs/8.x/eloquent-mutators.md:block 4 (header)
msgid "Introduction"
msgstr "簡介"

#: docs/8.x/eloquent-mutators.md:block 5 (paragraph)
msgid "Accessors, mutators, and attribute casting allow you to transform Eloquent attribute values when you retrieve or set them on model instances. For example, you may want to use the [Laravel encrypter](/docs/{{version}}/encryption) to encrypt a value while it is stored in the database, and then automatically decrypt the attribute when you access it on an Eloquent model. Or, you may want to convert a JSON string that is stored in your database to an array when it is accessed via your Eloquent model."
msgstr "通過存取子 (Accessor)、更動子 (Mutator)、與型別轉換，便可在從 Model 實體上存取 Eloquent 屬性時轉換其值。舉例來說，我們可能想用 [Laravel 的加密功能](/docs/{{version}}/encryption) 來在資料庫內加密某個值，並在從 Eloquent Model 上存取該屬性時自動解密。或者，我們可能會想將某個值轉換為 JSON 字串來儲存進資料庫，然後在 Eloquent Model 上以陣列來存取。"

#: docs/8.x/eloquent-mutators.md:block 7 (header)
msgid "Accessors & Mutators"
msgstr "存取子 (Accessor) 與更動子 (Mutator)"

#: docs/8.x/eloquent-mutators.md:block 9 (header)
msgid "Defining An Accessor"
msgstr "定義存取子"

#: docs/8.x/eloquent-mutators.md:block 10 (paragraph)
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a `get{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr "存取子 (Accessor) 可在存取 Eloquent 屬性時轉換其值。若要定義存取子，可在 Model 中建立一個 `get{Attribute}Attribute` 方法。其中，`{Attribute}` 方法即為要存取的欄位之「Studly 命名法」大小寫的屬性名稱。"

#: docs/8.x/eloquent-mutators.md:block 11 (paragraph)
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute:"
msgstr "在這個例子中，我們會為 `first_name` 屬性定義存取子。在嘗試取得 `first_name` 屬性時，Eloquent 會自動呼叫該存取子："

#: docs/8.x/eloquent-mutators.md:block 12 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return string\n"
"     */\n"
"    public function getFirstNameAttribute($value)\n"
"    {\n"
"        return ucfirst($value);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return string\n"
"     */\n"
"    public function getFirstNameAttribute($value)\n"
"    {\n"
"        return ucfirst($value);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 13 (paragraph)
msgid "As you can see, the original value of the column is passed to the accessor, allowing you to manipulate and return the value. To access the value of the accessor, you may simply access the `first_name` attribute on a model instance:"
msgstr "如上所見，該欄位的原始值會傳給該存取子，讓你可以進行操作並回傳值。若要存取存取子的值，只需要在 Model 實體上存取 `first_name` 屬性即可："

#: docs/8.x/eloquent-mutators.md:block 14 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$firstName = $user->first_name;\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$firstName = $user->first_name;\n"

#: docs/8.x/eloquent-mutators.md:block 15 (paragraph)
msgid "You are not limited to interacting with a single attribute within your accessor. You may also use accessors to return new, computed values from existing attributes:"
msgstr "存取子也不一定得要與單一屬性互動。你也可以使用存取子來回傳一個從現有屬性組合來的新的值："

#: docs/8.x/eloquent-mutators.md:block 16 (code)
msgid "/**\n"
" * Get the user's full name.\n"
" *\n"
" * @return string\n"
" */\n"
"public function getFullNameAttribute()\n"
"{\n"
"    return \"{$this->first_name} {$this->last_name}\";\n"
"}\n"
msgstr "/**\n"
" * Get the user's full name.\n"
" *\n"
" * @return string\n"
" */\n"
"public function getFullNameAttribute()\n"
"{\n"
"    return \"{$this->first_name} {$this->last_name}\";\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 17 (quote)
msgid "{tip} If you would like these computed values to be added to the array / JSON representations of your model, [you will need to append them](/docs/{{version}}/eloquent-serialization#appending-values-to-json)."
msgstr "{tip} 若想讓過這些計算過的值包含在 Model 的陣列或 JSON 呈現上，則[需要將這些欄位附加上去](/docs/{{version}}/eloquent-serialization#appending-values-to-json)。"

#: docs/8.x/eloquent-mutators.md:block 19 (header)
msgid "Defining A Mutator"
msgstr "定義更動子"

#: docs/8.x/eloquent-mutators.md:block 20 (paragraph)
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, define a `set{Attribute}Attribute` method on your model where `{Attribute}` is the \"studly\" cased name of the column you wish to access."
msgstr "更動子 (Mutator) 可在寫入 Eloquent 屬性時轉換其值。若要定義更動子，可在 Model 中建立一個 `set{Attribute}Attribute` 方法。其中，`{Attribute}` 方法即為要存取的欄位之「Studly 命名法」大小寫的屬性名稱。"

#: docs/8.x/eloquent-mutators.md:block 21 (paragraph)
msgid "Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr "我們來為 `first_name` 屬性定義更動子。該更動子會在嘗試於 Model 上設定 `first_name` 屬性值時被呼叫："

#: docs/8.x/eloquent-mutators.md:block 22 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Set the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return void\n"
"     */\n"
"    public function setFirstNameAttribute($value)\n"
"    {\n"
"        $this->attributes['first_name'] = strtolower($value);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Set the user's first name.\n"
"     *\n"
"     * @param  string  $value\n"
"     * @return void\n"
"     */\n"
"    public function setFirstNameAttribute($value)\n"
"    {\n"
"        $this->attributes['first_name'] = strtolower($value);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 23 (paragraph)
msgid "The mutator will receive the value that is being set on the attribute, allowing you to manipulate the value and set the manipulated value on the Eloquent model's internal `$attributes` property. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr "該更動子會接收目前正在設定的屬性的值，讓你可以更改其值並將更改過的值設定在 Eloquent Model 內部的 `$attributes` 屬性上。若要使用這個更動子，只需要在 Eloquent Model 上設定 `first_name` 屬性即可："

#: docs/8.x/eloquent-mutators.md:block 24 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->first_name = 'Sally';\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->first_name = 'Sally';\n"

#: docs/8.x/eloquent-mutators.md:block 25 (paragraph)
msgid "In this example, the `setFirstNameAttribute` function will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the internal `$attributes` array."
msgstr "在此範例中，`setFirstNameAttribute` 函式會以 `Sally` 值呼叫。改更動子接著會在名字上套用 `strtolower` 韓式，並將其結果設定到內部的 `$attribuets` 陣列上。"

#: docs/8.x/eloquent-mutators.md:block 27 (header)
msgid "Attribute Casting"
msgstr "屬性型別轉換"

#: docs/8.x/eloquent-mutators.md:block 28 (paragraph)
msgid "Attribute casting provides functionality similar to accessors and mutators without requiring you to define any additional methods on your model. Instead, your model's `$casts` property provides a convenient method of converting attributes to common data types."
msgstr "屬性型別轉換提供了與存取子及更動子類似的方法。不過，你不需要手動在 Model 內定義任何額外的方法。通過 Model 上的 `$casts` 屬性，就可以方便地將屬性轉換為常見的資料型別。"

#: docs/8.x/eloquent-mutators.md:block 29 (paragraph)
msgid "The `$casts` property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are:"
msgstr "`$casts` 屬性應為一個陣列，其索引鍵為要進行型別轉換的屬性名稱，而值則為要將該欄位進行型別轉換的型別。支援的轉換型別如下："

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`array`"
msgstr "`array`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`AsStringable::class`"
msgstr "`AsStringable::class`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`boolean`"
msgstr "`boolean`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`collection`"
msgstr "`collection`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`date`"
msgstr "`date`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`datetime`"
msgstr "`datetime`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`immutable_date`"
msgstr "`immutable_date`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`immutable_datetime`"
msgstr "`immutable_datetime`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`decimal:`<code>&lt;digits&gt;</code>"
msgstr "`decimal:`<code>&lt;digits&gt;</code>"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`double`"
msgstr "`double`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`encrypted`"
msgstr "`encrypted`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`encrypted:array`"
msgstr "`encrypted:array`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`encrypted:collection`"
msgstr "`encrypted:collection`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`encrypted:object`"
msgstr "`encrypted:object`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`float`"
msgstr "`float`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`integer`"
msgstr "`integer`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`object`"
msgstr "`object`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`real`"
msgstr "`real`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`string`"
msgstr "`string`"

#: docs/8.x/eloquent-mutators.md:block 31 (unordered list)
msgid "`timestamp`"
msgstr "`timestamp`"

#: docs/8.x/eloquent-mutators.md:block 33 (paragraph)
msgid "To demonstrate attribute casting, let's cast the `is_admin` attribute, which is stored in our database as an integer (`0` or `1`) to a boolean value:"
msgstr "為了演示屬性型別轉換，我們來對 `is_admin` 屬性進行型別轉換。該欄位在資料庫中是以整數 (`0` 或 `1`) 來表示布林值的："

#: docs/8.x/eloquent-mutators.md:block 34 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'is_admin' => 'boolean',\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'is_admin' => 'boolean',\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 35 (paragraph)
msgid "After defining the cast, the `is_admin` attribute will always be cast to a boolean when you access it, even if the underlying value is stored in the database as an integer:"
msgstr "定義好型別轉換後，只要存取 `is_admin` 屬性，即使該屬性在資料庫中以整數來儲存，該屬性值總是會被轉換為布林值："

#: docs/8.x/eloquent-mutators.md:block 36 (code)
msgid "$user = App\\Models\\User::find(1);\n\n"
"if ($user->is_admin) {\n"
"    //\n"
"}\n"
msgstr "$user = App\\Models\\User::find(1);\n\n"
"if ($user->is_admin) {\n"
"    //\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 37 (paragraph)
msgid "If you need to add a new, temporary cast at runtime, you may use the `mergeCasts` method. These cast definitions will be added to any of the casts already defined on the model:"
msgstr "若有需要在執行階段加上新的、臨時的型別轉換，則可使用 `mergeCasts` 方法。這些型別轉換定義會被加到所有在 Model 中已定義的型別轉換上："

#: docs/8.x/eloquent-mutators.md:block 38 (code)
msgid "$user->mergeCasts([\n"
"    'is_admin' => 'integer',\n"
"    'options' => 'object',\n"
"]);\n"
msgstr "$user->mergeCasts([\n"
"    'is_admin' => 'integer',\n"
"    'options' => 'object',\n"
"]);\n"

#: docs/8.x/eloquent-mutators.md:block 39 (quote)
msgid "{note} Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship."
msgstr "{note} `null` 的屬性將不會進行型別轉換。此外，定義型別轉換 (或屬性) 時，也不應有相同名稱的關聯。"

#: docs/8.x/eloquent-mutators.md:block 41 (header)
msgid "Stringable Casting"
msgstr "Stringable 的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 42 (paragraph)
msgid "You may use the `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` cast class to cast a model attribute to a [fluent `Illuminate\\Support\\Stringable` object](/docs/{{version}}/helpers#fluent-strings-method-list):"
msgstr "可以使用 `Illuminate\\Database\\Eloquent\\Casts\\AsStringable` 型別轉換類別來講 Model 屬性轉換為 [Fluent `Illuminate\\Support\\Stringable` 物件] (/docs/{{version}}/helpers#fluent-strings-method-list):"

#: docs/8.x/eloquent-mutators.md:block 43 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'directory' => AsStringable::class,\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\AsStringable;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'directory' => AsStringable::class,\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 45 (header)
msgid "Array & JSON Casting"
msgstr "陣列與 JSON 的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 46 (paragraph)
msgid "The `array` cast is particularly useful when working with columns that are stored as serialized JSON. For example, if your database has a `JSON` or `TEXT` field type that contains serialized JSON, adding the `array` cast to that attribute will automatically deserialize the attribute to a PHP array when you access it on your Eloquent model:"
msgstr "`array` 型別轉換特別適合搭配宜 JSON 序列化保存的欄位。舉例來說，說資料庫內有個包含了序列化 JSON 的 `JSON` 或 `TEXT` 欄位型別，則加上 `array` 型別轉換，就可以在從 Eloquent Model 上存取該欄位時自動將屬性反串聯化為 PHP 陣列："

#: docs/8.x/eloquent-mutators.md:block 47 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => 'array',\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => 'array',\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 48 (paragraph)
msgid "Once the cast is defined, you may access the `options` attribute and it will automatically be deserialized from JSON into a PHP array. When you set the value of the `options` attribute, the given array will automatically be serialized back into JSON for storage:"
msgstr "定義好型別轉換後，存取 `options` 屬性時就會自動從 JSON 反序列化為 PHP 陣列。為 `options` 賦值時，提供的陣列也會被序列化回 JSON 以進行儲存："

#: docs/8.x/eloquent-mutators.md:block 49 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$options = $user->options;\n\n"
"$options['key'] = 'value';\n\n"
"$user->options = $options;\n\n"
"$user->save();\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$options = $user->options;\n\n"
"$options['key'] = 'value';\n\n"
"$user->options = $options;\n\n"
"$user->save();\n"

#: docs/8.x/eloquent-mutators.md:block 50 (paragraph)
msgid "To update a single field of a JSON attribute with a more terse syntax, you may use the `->` operator when calling the `update` method:"
msgstr "若要使用更精簡的方法來更新 JSON 屬性中的單一欄位，可以在呼叫 `update` 方法時使用 `->` 運算子："

#: docs/8.x/eloquent-mutators.md:block 51 (code)
msgid "$user = User::find(1);\n\n"
"$user->update(['options->key' => 'value']);\n"
msgstr "$user = User::find(1);\n\n"
"$user->update(['options->key' => 'value']);\n"

#: docs/8.x/eloquent-mutators.md:block 53 (header)
msgid "Array Object & Collection Casting"
msgstr "陣列物件與 Collection 的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 54 (paragraph)
msgid "Although the standard `array` cast is sufficient for many applications, it does have some disadvantages. Since the `array` cast returns a primitive type, it is not possible to mutate an offset of the array directly. For example, the following code will trigger a PHP error:"
msgstr "雖然使用標準的 `array` 型別轉換對於大多數專案就夠用了，但 `array` 也有一些缺點。由於 `array` 型別轉換回傳的是原生型別，因此我們無法直接更改陣列的元素。舉例來說，下列程式碼會觸發 PHP 錯誤："

#: docs/8.x/eloquent-mutators.md:block 55 (code)
msgid "$user = User::find(1);\n\n"
"$user->options['key'] = $value;\n"
msgstr "$user = User::find(1);\n\n"
"$user->options['key'] = $value;\n"

#: docs/8.x/eloquent-mutators.md:block 56 (paragraph)
msgid "To solve this, Laravel offers an `AsArrayObject` cast that casts your JSON attribute to an [ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) class. This feature is implemented using Laravel's [custom cast](#custom-casts) implementation, which allows Laravel to intelligently cache and transform the mutated object such that individual offsets may be modified without triggering a PHP error. To use the `AsArrayObject` cast, simply assign it to an attribute:"
msgstr "為了解決這個問題，Laravel 提供了一個 `AsArrayObject` 型別轉換，可用來將 JSON 屬性轉換為 [ArrayObject](https://www.php.net/manual/en/class.arrayobject.php) 類別。改功能使用 Laravel 的[自訂型別轉換](#custom-casts)實作，可讓 Laravel 進行智慧快取並變換更改過的物件，也能讓個別元素在修改時不觸發 PHP 錯誤。若要使用 `AsArrayObject` 型別轉換，只需要將其指派給屬性即可："

#: docs/8.x/eloquent-mutators.md:block 57 (code)
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsArrayObject::class,\n"
"];\n"
msgstr "use Illuminate\\Database\\Eloquent\\Casts\\AsArrayObject;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsArrayObject::class,\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 58 (paragraph)
msgid "Similarly, Laravel offers an `AsCollection` cast that casts your JSON attribute to a Laravel [Collection](/docs/{{version}}/collections) instance:"
msgstr "Laravel 還提供了一個類似的 `AsCollection` 型別轉換，可將 JSON 屬性轉換為 Laravel 的 [Collection](/docs/{{version}}/collections) 實體："

#: docs/8.x/eloquent-mutators.md:block 59 (code)
msgid "use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsCollection::class,\n"
"];\n"
msgstr "use Illuminate\\Database\\Eloquent\\Casts\\AsCollection;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'options' => AsCollection::class,\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 61 (header)
msgid "Date Casting"
msgstr "日期的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 62 (paragraph)
msgid "By default, Eloquent will cast the `created_at` and `updated_at` columns to instances of [Carbon](https://github.com/briannesbitt/Carbon), which extends the PHP `DateTime` class and provides an assortment of helpful methods. You may cast additional date attributes by defining additional date casts within your model's `$casts` property array. Typically, dates should be cast using the `datetime` or `immutable_datetime` cast types."
msgstr "預設情況下，Eloquent 會將 `created_at` 與 `updated_at` 欄位轉換為 [Carbon](https://github.com/briannesbitt/Carbon) 實體。Carbon 繼承自 PHP 的 `DateTime` 類別，並提供了各種實用方法。可以通過往 Model 的 `$casts` 屬性陣列內定義額外的日期型別轉換來給其他日期屬性進行轉換。通常來說，日期應使用 `datetime` 或 `immutable_datetime` 型別轉換類型。"

#: docs/8.x/eloquent-mutators.md:block 63 (paragraph)
msgid "When defining a `date` or `datetime` cast, you may also specify the date's format. This format will be used when the [model is serialized to an array or JSON](/docs/{{version}}/eloquent-serialization):"
msgstr "在定義 `date` 或 `datetime` 型別轉換時，也可以指定日期的格式。該格式會在 [Model 被序列化成陣列或 JSON](/docs/{{version}}/eloquent-serialization) 時使用："

#: docs/8.x/eloquent-mutators.md:block 64 (code)
msgid "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'created_at' => 'datetime:Y-m-d',\n"
"];\n"
msgstr "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'created_at' => 'datetime:Y-m-d',\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 65 (paragraph)
msgid "When a column is cast as a date, you may set the corresponding model attribute value to a UNIX timestamp, date string (`Y-m-d`), date-time string, or a `DateTime` / `Carbon` instance. The date's value will be correctly converted and stored in your database."
msgstr "在將欄位轉換為日期時，可以將相應的 Model 屬性值設為 UNIX 時戳、日期字串 (`Y-m-d`)、日期與時間字串、或是 `DateTime` / `Carbon` 實體。日期的值會被正確地轉換並保存在資料庫中。"

#: docs/8.x/eloquent-mutators.md:block 66 (paragraph)
msgid "You may customize the default serialization format for all of your model's dates by defining a `serializeDate` method on your model. This method does not affect how your dates are formatted for storage in the database:"
msgstr "在 Model 中定義 `serializeDate` 方法，即可為 Model 中所有的日期定義預設的序列化方法。改方法並不會影響日期儲存到資料庫時的格式化方法："

#: docs/8.x/eloquent-mutators.md:block 67 (code)
msgid "/**\n"
" * Prepare a date for array / JSON serialization.\n"
" *\n"
" * @param  \\DateTimeInterface  $date\n"
" * @return string\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date)\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}\n"
msgstr "/**\n"
" * Prepare a date for array / JSON serialization.\n"
" *\n"
" * @param  \\DateTimeInterface  $date\n"
" * @return string\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date)\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 68 (paragraph)
msgid "To specify the format that should be used when actually storing a model's dates within your database, you should define a `$dateFormat` property on your model:"
msgstr "若要指定用來將 Model 日期保存在資料庫時使用的格式，可在 Model 中定義 `$dateFormat` 屬性："

#: docs/8.x/eloquent-mutators.md:block 69 (code)
msgid "/**\n"
" * The storage format of the model's date columns.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $dateFormat = 'U';\n"
msgstr "/**\n"
" * The storage format of the model's date columns.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $dateFormat = 'U';\n"

#: docs/8.x/eloquent-mutators.md:block 71 (header)
msgid "Date Casting, Serialization, & Timezones"
msgstr "日期型別轉換、序列化、與時區"

#: docs/8.x/eloquent-mutators.md:block 72 (paragraph)
msgid "By default, the `date` and `datetime` casts will serialize dates to a UTC ISO-8601 date string (`1986-05-28T21:05:54.000000Z`), regardless of the timezone specified in your application's `timezone` configuration option. You are strongly encouraged to always use this serialization format, as well as to store your application's dates in the UTC timezone by not changing your application's `timezone` configuration option from its default `UTC` value. Consistently using the UTC timezone throughout your application will provide the maximum level of interoperability with other date manipulation libraries written in PHP and JavaScript."
msgstr "預設情況下，不論專案的 `timezone` 設定選項設為哪個時區，`date` 與 `datetime` 都會將日期序列化為 UTC 的 ISO-8601 日期字串 (`1986-05-28T21:05:54.000000Z`)。我們強烈建議你保持使用這個序列化格式，也建議你只將專案的 `timezone` 設定選項設為預設的 `UTC`，並讓專案中以 UTC 來儲存所有的日期時間。在專案中保持一致地使用 UTC 時區，可為其他 PHP 與 JavaScript 的日期操作函示庫提供最大的互用性。"

#: docs/8.x/eloquent-mutators.md:block 73 (paragraph)
msgid "If a custom format is applied to the `date` or `datetime` cast, such as `datetime:Y-m-d H:i:s`, the inner timezone of the Carbon instance will be used during date serialization. Typically, this will be the timezone specified in your application's `timezone` configuration option."
msgstr "若有在 `date` 或 `datetime` 型別轉換內提供自訂格式，如 `datetime:Y-m-d H:i:s`，則在進行日期序列化時，會使用 Carbon 實體內部的時區。一般來說，這個時區就是專案的 `timezone` 設定選項。"

#: docs/8.x/eloquent-mutators.md:block 75 (header)
msgid "Enum Casting"
msgstr "Enum 的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 76 (quote)
msgid "{note} Enum casting is only available for PHP 8.1+."
msgstr "{note} Enum 型別轉換只可在 PHP 8.1 以上使用。"

#: docs/8.x/eloquent-mutators.md:block 77 (paragraph)
msgid "Eloquent also allows you to cast your attribute values to PHP enums. To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr "Eloquent 也能讓我們將屬性值轉換為 PHP Enum。為此，可在 Model 中的 `$casts` 屬性陣列中指定要型別轉換的屬性與 Enum："

#: docs/8.x/eloquent-mutators.md:block 78 (code)
msgid "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];\n"
msgstr "use App\\Enums\\ServerStatus;\n\n"
"/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'status' => ServerStatus::class,\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 79 (paragraph)
msgid "Once you have defined the cast on your model, the specified attribute will be automatically cast to and from an enum when you interact with the attribute:"
msgstr "定義好 Model 的型別轉換後，每次存取該屬性時就會自動轉換對 Enum 進行轉換："

#: docs/8.x/eloquent-mutators.md:block 80 (code)
msgid "if ($server->status == ServerStatus::provisioned) {\n"
"    $server->status = ServerStatus::ready;\n\n"
"    $server->save();\n"
"}\n"
msgstr "if ($server->status == ServerStatus::provisioned) {\n"
"    $server->status = ServerStatus::ready;\n\n"
"    $server->save();\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 82 (header)
msgid "Encrypted Casting"
msgstr "加密的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 83 (paragraph)
msgid "The `encrypted` cast will encrypt a model's attribute value using Laravel's built-in [encryption](/docs/{{version}}/encryption) features. In addition, the `encrypted:array`, `encrypted:collection`, `encrypted:object`, `AsEncryptedArrayObject`, and `AsEncryptedCollection` casts work like their unencrypted counterparts; however, as you might expect, the underlying value is encrypted when stored in your database."
msgstr "`encrypted` 型別轉換會通過 Laravel 的內建[加密](/docs/{{version}}/encryption)功能來加密 Model 的屬性值。此外，還有 `encrypted:array`, `encrypted:collection`, `encrypted:object`, `AsEncryptedArrayObject`, 與 `AsEncryptedCollection` 等型別轉換，這些型別轉換都與其未加密的版本一樣以相同方式運作。不過，可想而知，底層的值會先加密才保存進資料庫。"

#: docs/8.x/eloquent-mutators.md:block 84 (paragraph)
msgid "As the final length of the encrypted text is not predictable and is longer than its plain text counterpart, make sure the associated database column is of `TEXT` type or larger. In addition, since the values are encrypted in the database, you will not be able to query or search encrypted attribute values."
msgstr "由於加密後的文字長度時無法預測的，且通常比明文的版本還要長，因此請確保其資料庫欄位為 `TEXT` 型別或更大的型別。此外，由於在資料庫中值都是經過加密的，因此你也沒辦法查詢或搜尋加密過的屬性質。"

#: docs/8.x/eloquent-mutators.md:block 86 (header)
msgid "Query Time Casting"
msgstr "查詢時的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 87 (paragraph)
msgid "Sometimes you may need to apply casts while executing a query, such as when selecting a raw value from a table. For example, consider the following query:"
msgstr "有時候我們可能會需要在執行查詢時套用型別轉換，例如從資料表中選擇原始資料時。舉例來說，假設有下列查詢："

#: docs/8.x/eloquent-mutators.md:block 88 (code)
msgid "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->get();\n"
msgstr "use App\\Models\\Post;\n"
"use App\\Models\\User;\n\n"
"$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->get();\n"

#: docs/8.x/eloquent-mutators.md:block 89 (paragraph)
msgid "The `last_posted_at` attribute on the results of this query will be a simple string. It would be wonderful if we could apply a `datetime` cast to this attribute when executing the query. Thankfully, we may accomplish this using the `withCasts` method:"
msgstr "查詢結果中的 `last_posted_at` 屬性會是字串。如果我們可以將 `datetime` 型別轉換在執行查詢時套用到這個屬性上就好了。好佳在，我們可以通過使用 `withCasts` 方法來達成："

#: docs/8.x/eloquent-mutators.md:block 90 (code)
msgid "$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->withCasts([\n"
"    'last_posted_at' => 'datetime'\n"
"])->get();\n"
msgstr "$users = User::select([\n"
"    'users.*',\n"
"    'last_posted_at' => Post::selectRaw('MAX(created_at)')\n"
"            ->whereColumn('user_id', 'users.id')\n"
"])->withCasts([\n"
"    'last_posted_at' => 'datetime'\n"
"])->get();\n"

#: docs/8.x/eloquent-mutators.md:block 92 (header)
msgid "Custom Casts"
msgstr "自訂型別轉換"

#: docs/8.x/eloquent-mutators.md:block 93 (paragraph)
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. You may accomplish this by defining a class that implements the `CastsAttributes` interface."
msgstr "Laravel 中有各式內建的實用型別轉換類型。不過，有時候我們也會需要定義自己的型別轉換類型。我們可以通過實作 `CastsAttributes` 介面來自訂型別轉換類型。"

#: docs/8.x/eloquent-mutators.md:block 94 (paragraph)
msgid "Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr "實作了這個介面的類別必須定義一組 `get` 與 `set` 方法。`get` 方法用於將儲存在資料庫內的原始值轉換為型別值；`set` 方法則負責將型別值轉換為可儲存在資料庫內的原始值。在這裡，我們將重新實作一個內建的 `json` 型別轉換類型為例："

#: docs/8.x/eloquent-mutators.md:block 95 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Json implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_decode($value, true);\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_encode($value);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Json implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_decode($value, true);\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return json_encode($value);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 96 (paragraph)
msgid "Once you have defined a custom cast type, you may attach it to a model attribute using its class name:"
msgstr "定義好自訂的型別轉換類型後，就可以使用類別名稱將其附加到 Model 屬性內："

#: docs/8.x/eloquent-mutators.md:block 97 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Casts\\Json;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => Json::class,\n"
"    ];\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use App\\Casts\\Json;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * The attributes that should be cast.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $casts = [\n"
"        'options' => Json::class,\n"
"    ];\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 99 (header)
msgid "Value Object Casting"
msgstr "數值物件的型別轉換"

#: docs/8.x/eloquent-mutators.md:block 100 (paragraph)
msgid "You are not limited to casting values to primitive types. You may also cast values to objects. Defining custom casts that cast values to objects is very similar to casting to primitive types; however, the `set` method should return an array of key / value pairs that will be used to set raw, storable values on the model."
msgstr "進行型別轉換時，我們不只可以將值轉換為 PHP 的原生型別，我們還可以將值轉換為物件。定義這種將值轉換為物件的自訂型別轉換就跟轉換成原生型別類似。不過，在這種型別轉換類別中的 `set` 方法應回傳一組在 Model 上用於設定原始、可儲存值的索引鍵/值配對。"

#: docs/8.x/eloquent-mutators.md:block 101 (paragraph)
msgid "As an example, we will define a custom cast class that casts multiple model values into a single `Address` value object. We will assume the `Address` value has two public properties: `lineOne` and `lineTwo`:"
msgstr "在這裡，我們以將多個 Model 值轉換到單一 `Address` 數值物件的自訂型別轉換類別為例。我們假設 `Address` 值有兩個公用屬性：`lineOne` 與 `lineTwo`："

#: docs/8.x/eloquent-mutators.md:block 102 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\Models\\Address as AddressModel;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\Models\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressModel(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\Models\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressModel) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\Models\\Address as AddressModel;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\Models\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressModel(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\Models\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressModel) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 103 (paragraph)
msgid "When casting to value objects, any changes made to the value object will automatically be synced back to the model before the model is saved:"
msgstr "對數值物件進行型別轉換時，對數值物件進行的所有更改都會在 Model 儲存前同步回 Model 上："

#: docs/8.x/eloquent-mutators.md:block 104 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Value';\n\n"
"$user->save();\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Value';\n\n"
"$user->save();\n"

#: docs/8.x/eloquent-mutators.md:block 105 (quote)
msgid "{tip} If you plan to serialize your Eloquent models containing value objects to JSON or arrays, you should implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces on the value object."
msgstr "{tip} 若有打算要將包含數值物件的 Eloquent Model 序列化為 JSON 或陣列，則該數值物件應實作 `Illuminate\\Contracts\\Support\\Arrayable` 與 `JsonSerializable` 介面。"

#: docs/8.x/eloquent-mutators.md:block 107 (header)
msgid "Array / JSON Serialization"
msgstr "Array / JSON 的序列化"

#: docs/8.x/eloquent-mutators.md:block 108 (paragraph)
msgid "When an Eloquent model is converted to an array or JSON using the `toArray` and `toJson` methods, your custom cast value objects will typically be serialized as well as long as they implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces. However, when using value objects provided by third-party libraries, you may not have the ability to add these interfaces to the object."
msgstr "當 Eloquent Model 通過 `toArray` 與 `toJson` 轉換為陣列或 JSON 時，只要自訂的型別轉換數值物件有實作  `Illuminate\\Contracts\\Support\\Arrayable` 與 `JsonSerializable` 介面，該數值物件也會一併被序列化。不過，若我們使用的數值物件是來自第三方套件的，那我們可能就沒辦法提供這些負責序列化介面。"

#: docs/8.x/eloquent-mutators.md:block 109 (paragraph)
msgid "Therefore, you may specify that your custom cast class will be responsible for serializing the value object. To do so, your custom cast class should implement the `Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` interface. This interface states that your class should contain a `serialize` method which should return the serialized form of your value object:"
msgstr "因此，我們可以指定讓自訂型別轉換類別來負責處理數值物件的序列化。為此，自訂型別轉換類別應實作 `Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes` 介面。實作這個介面，就代表該類別中應包含一個 `serialize` 方法，該方法應回傳數值物件的序列化形式："

#: docs/8.x/eloquent-mutators.md:block 110 (code)
msgid "/**\n"
" * Get the serialized representation of the value.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  mixed  $value\n"
" * @param  array  $attributes\n"
" * @return mixed\n"
" */\n"
"public function serialize($model, string $key, $value, array $attributes)\n"
"{\n"
"    return (string) $value;\n"
"}\n"
msgstr "/**\n"
" * Get the serialized representation of the value.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  mixed  $value\n"
" * @param  array  $attributes\n"
" * @return mixed\n"
" */\n"
"public function serialize($model, string $key, $value, array $attributes)\n"
"{\n"
"    return (string) $value;\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 112 (header)
msgid "Inbound Casting"
msgstr "輸入型別轉換"

#: docs/8.x/eloquent-mutators.md:block 113 (paragraph)
msgid "Occasionally, you may need to write a custom cast that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model. A classic example of an inbound only cast is a \"hashing\" cast. Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined."
msgstr "我們偶爾會需要一種型別轉換：只在對 Model 賦值時轉換值，存取時則不進行任何轉換。純輸入的型別轉換最常見的例子就是「雜湊」型別轉換。純輸入的型別轉換應實作 `CastsInboundAttributes` 介面，該介面只要求要定義 `set` 方法。"

#: docs/8.x/eloquent-mutators.md:block 114 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n\n"
"class Hash implements CastsInboundAttributes\n"
"{\n"
"    /**\n"
"     * The hashing algorithm.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $algorithm;\n\n"
"    /**\n"
"     * Create a new cast class instance.\n"
"     *\n"
"     * @param  string|null  $algorithm\n"
"     * @return void\n"
"     */\n"
"    public function __construct($algorithm = null)\n"
"    {\n"
"        $this->algorithm = $algorithm;\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return is_null($this->algorithm)\n"
"                    ? bcrypt($value)\n"
"                    : hash($this->algorithm, $value);\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n\n"
"class Hash implements CastsInboundAttributes\n"
"{\n"
"    /**\n"
"     * The hashing algorithm.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $algorithm;\n\n"
"    /**\n"
"     * Create a new cast class instance.\n"
"     *\n"
"     * @param  string|null  $algorithm\n"
"     * @return void\n"
"     */\n"
"    public function __construct($algorithm = null)\n"
"    {\n"
"        $this->algorithm = $algorithm;\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  array  $value\n"
"     * @param  array  $attributes\n"
"     * @return string\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        return is_null($this->algorithm)\n"
"                    ? bcrypt($value)\n"
"                    : hash($this->algorithm, $value);\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 116 (header)
msgid "Cast Parameters"
msgstr "型別轉換的參數"

#: docs/8.x/eloquent-mutators.md:block 117 (paragraph)
msgid "When attaching a custom cast to a model, cast parameters may be specified by separating them from the class name using a `:` character and comma-delimiting multiple parameters. The parameters will be passed to the constructor of the cast class:"
msgstr "在 Model 上設定自訂型別轉換時，可以指定型別轉換的參數，請使用 `:` 字元來區分型別轉換類別名稱與參數，並使用逗號來區分多個參數。這些參數會傳給型別轉換類別的建構函式："

#: docs/8.x/eloquent-mutators.md:block 118 (code)
msgid "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'secret' => Hash::class.':sha256',\n"
"];\n"
msgstr "/**\n"
" * The attributes that should be cast.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $casts = [\n"
"    'secret' => Hash::class.':sha256',\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 120 (header)
msgid "Castables"
msgstr "Castable"

#: docs/8.x/eloquent-mutators.md:block 121 (paragraph)
msgid "You may want to allow your application's value objects to define their own custom cast classes. Instead of attaching the custom cast class to your model, you may alternatively attach a value object class that implements the `Illuminate\\Contracts\\Database\\Eloquent\\Castable` interface:"
msgstr "我們可以讓專案中的數值物件自己定義自己的自訂型別轉換類別。與在 Model 中設定自訂的型別轉換類別相比，我們可以設定實作了 `Illuminate\\Contracts\\Database\\Eloquent\\Castable` 介面的數值物件類別："

#: docs/8.x/eloquent-mutators.md:block 122 (code)
msgid "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class,\n"
"];\n"
msgstr "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class,\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 123 (paragraph)
msgid "Objects that implement the `Castable` interface must define a `castUsing` method that returns the class name of the custom caster class that is responsible for casting to and from the `Castable` class:"
msgstr "實作了 `Castable` 介面的物件必須定義 `castUsing` 方法。該方法則應回傳用於對  `Castable`  類別進行型別轉換的自訂型別轉換類別名稱："

#: docs/8.x/eloquent-mutators.md:block 124 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use App\\Casts\\Address as AddressCast;\n\n"
"class Address implements Castable\n"
"{\n"
"    /**\n"
"     * Get the name of the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return AddressCast::class;\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use App\\Casts\\Address as AddressCast;\n\n"
"class Address implements Castable\n"
"{\n"
"    /**\n"
"     * Get the name of the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return AddressCast::class;\n"
"    }\n"
"}\n"

#: docs/8.x/eloquent-mutators.md:block 125 (paragraph)
msgid "When using `Castable` classes, you may still provide arguments in the `$casts` definition. The arguments will be passed to the `castUsing` method:"
msgstr "即使是使用 `Castable` 類別，也可以在 `$casts` 定義中提供引數。這些引數會被傳給 `castUsing` 方法："

#: docs/8.x/eloquent-mutators.md:block 126 (code)
msgid "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class.':argument',\n"
"];\n"
msgstr "use App\\Models\\Address;\n\n"
"protected $casts = [\n"
"    'address' => Address::class.':argument',\n"
"];\n"

#: docs/8.x/eloquent-mutators.md:block 128 (header)
msgid "Castables & Anonymous Cast Classes"
msgstr "Castable 與匿名型別轉換類別"

#: docs/8.x/eloquent-mutators.md:block 129 (paragraph)
msgid "By combining \"castables\" with PHP's [anonymous classes](https://www.php.net/manual/en/language.oop5.anonymous.php), you may define a value object and its casting logic as a single castable object. To accomplish this, return an anonymous class from your value object's `castUsing` method. The anonymous class should implement the `CastsAttributes` interface:"
msgstr "通過將「Castable」與 PHP 的[匿名函式](https://www.php.net/manual/en/language.oop5.anonymous.php)搭配使用，我們就能在單一 Castable 物件內定義數值物件與其型別轉換邏輯。為此，請在數值物件的 `castUsing` 方法內回傳一個匿名類別。這個匿名類別應實作 `CastsAttributes` 介面："

#: docs/8.x/eloquent-mutators.md:block 130 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Address implements Castable\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return object|string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return new class implements CastsAttributes\n"
"        {\n"
"            public function get($model, $key, $value, $attributes)\n"
"            {\n"
"                return new Address(\n"
"                    $attributes['address_line_one'],\n"
"                    $attributes['address_line_two']\n"
"                );\n"
"            }\n\n"
"            public function set($model, $key, $value, $attributes)\n"
"            {\n"
"                return [\n"
"                    'address_line_one' => $value->lineOne,\n"
"                    'address_line_two' => $value->lineTwo,\n"
"                ];\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n\n"
"class Address implements Castable\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array  $arguments\n"
"     * @return object|string\n"
"     */\n"
"    public static function castUsing(array $arguments)\n"
"    {\n"
"        return new class implements CastsAttributes\n"
"        {\n"
"            public function get($model, $key, $value, $attributes)\n"
"            {\n"
"                return new Address(\n"
"                    $attributes['address_line_one'],\n"
"                    $attributes['address_line_two']\n"
"                );\n"
"            }\n\n"
"            public function set($model, $key, $value, $attributes)\n"
"            {\n"
"                return [\n"
"                    'address_line_one' => $value->lineOne,\n"
"                    'address_line_two' => $value->lineTwo,\n"
"                ];\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 10 (paragraph)
msgid "An accessor transforms an Eloquent attribute value when it is accessed. To define an accessor, create a protected method on your model to represent the accessible attribute. This method name should correspond to the \"camel case\" representation of the true underlying model attribute / database column when applicable."
msgstr "存取子會在存取 Eloquent 屬性時變換起值。若要定義存取子，請在 Model 上建立一個 protected 方法，用來代表可存取的屬性。當有對應的 Model 屬性或資料庫欄位時，該方法的名稱應為對應屬性或欄位的「駝峰命名法 (camelCase)」形式。"

#: docs/9.x/eloquent-mutators.md:block 11 (paragraph)
msgid "In this example, we'll define an accessor for the `first_name` attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the `first_name` attribute. All attribute accessor / mutator methods must declare a return type-hint of `Illuminate\\Database\\Eloquent\\Casts\\Attribute`:"
msgstr "在此範例中，我們會為 `first_name` 屬性定義一個存取子。當嘗試取得 `first_name` 屬性時，Eloquent 會自動呼叫這個存取子。所有的存取子與更動子方法都必須為回傳值標示型別提示為 `Illuminate\\Database\\Eloquent\\Casts\\Attribute`："

#: docs/9.x/eloquent-mutators.md:block 12 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"        );\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"        );\n"
"    }\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 13 (paragraph)
msgid "All accessor methods return an `Attribute` instance which defines how the attribute will be accessed and, optionally, mutated. In this example, we are only defining how the attribute will be accessed. To do so, we supply the `get` argument to the `Attribute` class constructor."
msgstr "回傳 `Attribute` 實體的存取子方法可用來定義要如何存取該值，以及可選地定義要如何更動值。在此番黎中，我們只有定義該屬性要被如何存取。為此，我們給 `Attribute` 類別的建構函式提供一個 `get` 引數。"

#: docs/9.x/eloquent-mutators.md:block 16 (quote)
msgid "**Note** If you would like these computed values to be added to the array / JSON representations of your model, [you will need to append them](/docs/{{version}}/eloquent-serialization#appending-values-to-json)."
msgstr "**Note** 若想讓過這些計算過的值包含在 Model 的陣列或 JSON 呈現上，則[需要將這些欄位附加上去](/docs/{{version}}/eloquent-serialization#appending-values-to-json)。"

#: docs/9.x/eloquent-mutators.md:block 18 (header)
msgid "Building Value Objects From Multiple Attributes"
msgstr "從多個屬性建立數值物件"

#: docs/9.x/eloquent-mutators.md:block 19 (paragraph)
msgid "Sometimes your accessor may need to transform multiple model attributes into a single \"value object\". To do so, your `get` closure may accept a second argument of `$attributes`, which will be automatically supplied to the closure and will contain an array of all of the model's current attributes:"
msgstr "有時候，我們的存取子可能需要將多個物件屬性轉換為單一「數值物件 (Value Object)」。為此，我們的 `get` 閉包應接受第二個引數 `$attributes`，Laravel 會自動將該變數提供給閉包，而該變數為一組包含 Model 目前屬性的陣列："

#: docs/9.x/eloquent-mutators.md:block 20 (code)
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}\n"
msgstr "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 22 (header)
msgid "Accessor Caching"
msgstr "Accessor 的快取"

#: docs/9.x/eloquent-mutators.md:block 23 (paragraph)
msgid "When returning value objects from accessors, any changes made to the value object will automatically be synced back to the model before the model is saved. This is possible because Eloquent retains instances returned by accessors so it can return the same instance each time the accessor is invoked:"
msgstr "從 Accessor 內回傳數值物件時，任何對數值物件作出的更改也會在保存 Model 前自動同步回來。這是因為 Eloquent 會保留 Accessor 回傳的實體，好讓 Eloquent 能在每次叫用 Accessor 時都回傳相同的實體："

#: docs/9.x/eloquent-mutators.md:block 24 (code)
msgid "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Line 1 Value';\n"
"$user->address->lineTwo = 'Updated Address Line 2 Value';\n\n"
"$user->save();\n"
msgstr "use App\\Models\\User;\n\n"
"$user = User::find(1);\n\n"
"$user->address->lineOne = 'Updated Address Line 1 Value';\n"
"$user->address->lineTwo = 'Updated Address Line 2 Value';\n\n"
"$user->save();\n"

#: docs/9.x/eloquent-mutators.md:block 25 (paragraph)
msgid "However, you may sometimes wish to enable caching for primitive values like strings and booleans, particularly if they are computationally intensive. To accomplish this, you may invoke the `shouldCache` method when defining your accessor:"
msgstr "不過，有時候我們也會想快取一些如字串或布林等的原生型別值，尤其是當需要大量運算時。若要快取原生型別值時，可在定義 Accessor 時叫用 `shouldCache` 方法："

#: docs/9.x/eloquent-mutators.md:block 26 (code)
msgid "protected function hash(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value) => bcrypt(gzuncompress($value)),\n"
"    )->shouldCache();\n"
"}\n"
msgstr "protected function hash(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value) => bcrypt(gzuncompress($value)),\n"
"    )->shouldCache();\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 27 (paragraph)
msgid "If you would like to disable the object caching behavior of attributes, you may invoke the `withoutObjectCaching` method when defining the attribute:"
msgstr "若想進用這個屬性的物件快取行為，可在定義屬性時叫用 `withoutObjectCaching` 方法："

#: docs/9.x/eloquent-mutators.md:block 28 (code)
msgid "/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    )->withoutObjectCaching();\n"
"}\n"
msgstr "/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    )->withoutObjectCaching();\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 31 (paragraph)
msgid "A mutator transforms an Eloquent attribute value when it is set. To define a mutator, you may provide the `set` argument when defining your attribute. Let's define a mutator for the `first_name` attribute. This mutator will be automatically called when we attempt to set the value of the `first_name` attribute on the model:"
msgstr "更動子會在保存 Eloquent 屬性值時更改其值。若要定義更動子，可在定義屬性時提供一個 `set` 引數。讓我們來為 `first_name` 屬性定義一個更動子。每次我們嘗試在該 Model 上設定 `first_name` 屬性值的時候都會自動呼叫這個更動子："

#: docs/9.x/eloquent-mutators.md:block 32 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Interact with the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"            set: fn ($value) => strtolower($value),\n"
"        );\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Interact with the user's first name.\n"
"     *\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn ($value) => ucfirst($value),\n"
"            set: fn ($value) => strtolower($value),\n"
"        );\n"
"    }\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 33 (paragraph)
msgid "The mutator closure will receive the value that is being set on the attribute, allowing you to manipulate the value and return the manipulated value. To use our mutator, we only need to set the `first_name` attribute on an Eloquent model:"
msgstr "該更動子閉包會接收目前正在設定的屬性的值，讓你可以更改其值並回傳更改過的值。若要使用這個更動子，只需要在 Eloquent Model 上設定 `first_name` 屬性即可："

#: docs/9.x/eloquent-mutators.md:block 35 (paragraph)
msgid "In this example, the `set` callback will be called with the value `Sally`. The mutator will then apply the `strtolower` function to the name and set its resulting value in the model's internal `$attributes` array."
msgstr "在此範例中，`set` 閉包會以 `Sally` 值呼叫。更動子接著會在名字上套用 `strtolower` 函式，並將其結果設定到 Model 內部的 `$attribuets` 陣列上。"

#: docs/9.x/eloquent-mutators.md:block 37 (header)
msgid "Mutating Multiple Attributes"
msgstr "更動多個屬性"

#: docs/9.x/eloquent-mutators.md:block 38 (paragraph)
msgid "Sometimes your mutator may need to set multiple attributes on the underlying model. To do so, you may return an array from the `set` closure. Each key in the array should correspond with an underlying attribute / database column associated with the model:"
msgstr "有時候，我們的更動子可能需要在底層的 Model 上設定多個屬性。為此，我們可以在 `set` 閉包內回傳一個陣列。陣列中的索引鍵應對應與 Model 關聯之底層的屬性或資料庫欄位："

#: docs/9.x/eloquent-mutators.md:block 39 (code)
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" *\n"
" * @return  \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn ($value, $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 45 (unordered list)
msgid "<code>decimal:&lt;precision&gt;</code>"
msgstr "<code>decimal:&lt;precision&gt;</code>"

#: docs/9.x/eloquent-mutators.md:block 53 (quote)
msgid "**Warning** Attributes that are `null` will not be cast. In addition, you should never define a cast (or an attribute) that has the same name as a relationship."
msgstr "**Warning** `null` 的屬性將不會進行型別轉換。此外，定義型別轉換 (或屬性) 時，也不應有相同名稱的關聯。"

#: docs/9.x/eloquent-mutators.md:block 90 (quote)
msgid "**Warning** Enum casting is only available for PHP 8.1+."
msgstr "**Warning** Enum 型別轉換只可在 PHP 8.1 以上使用。"

#: docs/9.x/eloquent-mutators.md:block 91 (paragraph)
msgid "Eloquent also allows you to cast your attribute values to PHP [Enums](https://www.php.net/manual/en/language.enumerations.backed.php). To accomplish this, you may specify the attribute and enum you wish to cast in your model's `$casts` property array:"
msgstr "Eloquent 也能讓我們將屬性值轉換為 PHP 的 [Enum](https://www.php.net/manual/en/language.enumerations.backed.php)。若要轉換成 Enum，可在 Model 中的 `$casts` 屬性陣列中指定要型別轉換的屬性與 Enum："

#: docs/9.x/eloquent-mutators.md:block 94 (code)
msgid "if ($server->status == ServerStatus::Provisioned) {\n"
"    $server->status = ServerStatus::Ready;\n\n"
"    $server->save();\n"
"}\n"
msgstr "if ($server->status == ServerStatus::Provisioned) {\n"
"    $server->status = ServerStatus::Ready;\n\n"
"    $server->save();\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 100 (header)
msgid "Key Rotation"
msgstr "更改密鑰"

#: docs/9.x/eloquent-mutators.md:block 101 (paragraph)
msgid "As you may know, Laravel encrypts strings using the `key` configuration value specified in your application's `app` configuration file. Typically, this value corresponds to the value of the `APP_KEY` environment variable. If you need to rotate your application's encryption key, you will need to manually re-encrypt your encrypted attributes using the new key."
msgstr "讀者可能已經知道，Laravel 會使用專案 `app` 設定檔中的 `key` 設定值來加密字串。一般來說，這個設定值對應的是 `APP_KEY` 環境變數。若有需要更改專案的加密密鑰，則我們需要使用新的密鑰來重新加密這些經過加密的屬性。"

#: docs/9.x/eloquent-mutators.md:block 110 (paragraph)
msgid "Laravel has a variety of built-in, helpful cast types; however, you may occasionally need to define your own cast types. To create a cast, execute the `make:cast` Artisan command. The new cast class will be placed in your `app/Casts` directory:"
msgstr "Laravel 中有各種內建的實用型別轉換類型。不過，有時候，我們還是需要定義自定 Cast。若要建立型別轉換程式，請執行 `make:cast` Artisan 指令。新建立的 Cast 類別會被放在 `app/Casts` 目錄下："

#: docs/9.x/eloquent-mutators.md:block 111 (code)
msgid "php artisan make:cast Json\n"
msgstr "php artisan make:cast Json\n"

#: docs/9.x/eloquent-mutators.md:block 112 (paragraph)
msgid "All custom cast classes implement the `CastsAttributes` interface. Classes that implement this interface must define a `get` and `set` method. The `get` method is responsible for transforming a raw value from the database into a cast value, while the `set` method should transform a cast value into a raw value that can be stored in the database. As an example, we will re-implement the built-in `json` cast type as a custom cast type:"
msgstr "所有的自定 Cast 類別都實作了 `CastsAttributes` 界面。實作了這個介面的類別必須定義一組 `get` 與 `set` 方法。`get` 方法用於將儲存在資料庫內的原始值轉換為型別值；`set` 方法則負責將型別值轉換為可儲存在資料庫內的原始值。在這裡，我們將重新實作一個內建的 `json` 型別轉換類型為例："

#: docs/9.x/eloquent-mutators.md:block 120 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\ValueObjects\\Address as AddressValueObject;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\ValueObjects\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressValueObject(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\ValueObjects\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressValueObject) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}\n"
msgstr "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\ValueObjects\\Address as AddressValueObject;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  mixed  $value\n"
"     * @param  array  $attributes\n"
"     * @return \\App\\ValueObjects\\Address\n"
"     */\n"
"    public function get($model, $key, $value, $attributes)\n"
"    {\n"
"        return new AddressValueObject(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
"     * @param  string  $key\n"
"     * @param  \\App\\ValueObjects\\Address  $value\n"
"     * @param  array  $attributes\n"
"     * @return array\n"
"     */\n"
"    public function set($model, $key, $value, $attributes)\n"
"    {\n"
"        if (! $value instanceof AddressValueObject) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}\n"

#: docs/9.x/eloquent-mutators.md:block 123 (quote)
msgid "**Note** If you plan to serialize your Eloquent models containing value objects to JSON or arrays, you should implement the `Illuminate\\Contracts\\Support\\Arrayable` and `JsonSerializable` interfaces on the value object."
msgstr "**Note** 若有打算要將包含數值物件的 Eloquent Model 序列化為 JSON 或陣列，則該數值物件應實作 `Illuminate\\Contracts\\Support\\Arrayable` 與 `JsonSerializable` 介面。"

#: docs/9.x/eloquent-mutators.md:block 131 (paragraph)
msgid "Occasionally, you may need to write a custom cast class that only transforms values that are being set on the model and does not perform any operations when attributes are being retrieved from the model."
msgstr ""

#: docs/9.x/eloquent-mutators.md:block 132 (paragraph)
msgid "Inbound only custom casts should implement the `CastsInboundAttributes` interface, which only requires a `set` method to be defined. The `make:cast` Artisan command may be invoked with the `--inbound` option to generate an inbound only cast class:"
msgstr ""

#: docs/9.x/eloquent-mutators.md:block 133 (code)
msgid "php artisan make:cast Hash --inbound\n"
msgstr ""

#: docs/9.x/eloquent-mutators.md:block 134 (paragraph)
msgid "A classic example of an inbound only cast is a \"hashing\" cast. For example, we may define a cast that hashes inbound values via a given algorithm:"
msgstr ""

#: docs/master/eloquent-mutators.md:block 12 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Get the user's first name.\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn (string $value) => ucfirst($value),\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 20 (code)
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    );\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 26 (code)
msgid "protected function hash(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (string $value) => bcrypt(gzuncompress($value)),\n"
"    )->shouldCache();\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 28 (code)
msgid "/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"    )->withoutObjectCaching();\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 32 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Interact with the user's first name.\n"
"     */\n"
"    protected function firstName(): Attribute\n"
"    {\n"
"        return Attribute::make(\n"
"            get: fn (string $value) => ucfirst($value),\n"
"            set: fn (string $value) => strtolower($value),\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 39 (code)
msgid "use App\\Support\\Address;\n"
"use Illuminate\\Database\\Eloquent\\Casts\\Attribute;\n\n"
"/**\n"
" * Interact with the user's address.\n"
" */\n"
"protected function address(): Attribute\n"
"{\n"
"    return Attribute::make(\n"
"        get: fn (mixed $value, array $attributes) => new Address(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two'],\n"
"        ),\n"
"        set: fn (Address $value) => [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ],\n"
"    );\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 50 (code)
msgid "$user = App\\Models\\User::find(1);\n\n"
"if ($user->is_admin) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 81 (code)
msgid "/**\n"
" * Prepare a date for array / JSON serialization.\n"
" */\n"
"protected function serializeDate(DateTimeInterface $date): string\n"
"{\n"
"    return $date->format('Y-m-d');\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 113 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Json implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function get(Model $model, string $key, mixed $value, array $attributes): array\n"
"    {\n"
"        return json_decode($value, true);\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): string\n"
"    {\n"
"        return json_encode($value);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 120 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use App\\ValueObjects\\Address as AddressValueObject;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"use InvalidArgumentException;\n\n"
"class Address implements CastsAttributes\n"
"{\n"
"    /**\n"
"     * Cast the given value.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function get(Model $model, string $key, mixed $value, array $attributes): AddressValueObject\n"
"    {\n"
"        return new AddressValueObject(\n"
"            $attributes['address_line_one'],\n"
"            $attributes['address_line_two']\n"
"        );\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     * @return array<string, string>\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): array\n"
"    {\n"
"        if (! $value instanceof AddressValueObject) {\n"
"            throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"        }\n\n"
"        return [\n"
"            'address_line_one' => $value->lineOne,\n"
"            'address_line_two' => $value->lineTwo,\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 128 (code)
msgid "/**\n"
" * Get the serialized representation of the value.\n"
" *\n"
" * @param  array<string, mixed>  $attributes\n"
" */\n"
"public function serialize(Model $model, string $key, mixed $value, array $attributes): string\n"
"{\n"
"    return (string) $value;\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 135 (code)
msgid "<?php\n\n"
"namespace App\\Casts;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsInboundAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Hash implements CastsInboundAttributes\n"
"{\n"
"    /**\n"
"     * The hashing algorithm.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $algorithm;\n\n"
"    /**\n"
"     * Create a new cast class instance.\n"
"     */\n"
"    public function __construct(string $algorithm = null)\n"
"    {\n"
"        $this->algorithm = $algorithm;\n"
"    }\n\n"
"    /**\n"
"     * Prepare the given value for storage.\n"
"     *\n"
"     * @param  array<string, mixed>  $attributes\n"
"     */\n"
"    public function set(Model $model, string $key, mixed $value, array $attributes): string\n"
"    {\n"
"        return is_null($this->algorithm)\n"
"                    ? bcrypt($value)\n"
"                    : hash($this->algorithm, $value);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 145 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use App\\Casts\\Address as AddressCast;\n\n"
"class Address implements Castable\n"
"{\n"
"    /**\n"
"     * Get the name of the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array<string, mixed>  $arguments\n"
"     */\n"
"    public static function castUsing(array $arguments): string\n"
"    {\n"
"        return AddressCast::class;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/master/eloquent-mutators.md:block 151 (code)
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\Castable;\n"
"use Illuminate\\Contracts\\Database\\Eloquent\\CastsAttributes;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n\n"
"class Address implements Castable\n"
"{\n"
"    // ...\n\n"
"    /**\n"
"     * Get the caster class to use when casting from / to this cast target.\n"
"     *\n"
"     * @param  array<string, mixed>  $arguments\n"
"     */\n"
"    public static function castUsing(array $arguments): CastsAttributes\n"
"    {\n"
"        return new class implements CastsAttributes\n"
"        {\n"
"            public function get(Model $model, string $key, mixed $value, array $attributes): Address\n"
"            {\n"
"                return new Address(\n"
"                    $attributes['address_line_one'],\n"
"                    $attributes['address_line_two']\n"
"                );\n"
"            }\n\n"
"            public function set(Model $model, string $key, mixed $value, array $attributes): array\n"
"            {\n"
"                return [\n"
"                    'address_line_one' => $value->lineOne,\n"
"                    'address_line_two' => $value->lineTwo,\n"
"                ];\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

