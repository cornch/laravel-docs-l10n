msgid ""
msgstr ""

#: ./docs/8.x/database-testing.md:1
#: ./docs/9.x/database-testing.md:1
#: ./docs/10.x/database-testing.md:1
#: ./docs/11.x/database-testing.md:1
#: ./docs/master/database-testing.md:1
msgctxt "H1"
msgid "Database Testing"
msgstr ""

#: ./docs/8.x/database-testing.md:3
#: ./docs/9.x/database-testing.md:3
#: ./docs/10.x/database-testing.md:3
#: ./docs/11.x/database-testing.md:3
#: ./docs/master/database-testing.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/10.x/database-testing.md:4
#: ./docs/11.x/database-testing.md:4
#: ./docs/master/database-testing.md:4
msgctxt "P"
msgid "[Resetting the Database After Each Test](#resetting-the-database-after-each-test)"
msgstr ""

#: ./docs/8.x/database-testing.md:4
#: ./docs/9.x/database-testing.md:4
msgctxt "P"
msgid "[Resetting The Database After Each Test](#resetting-the-database-after-each-test)"
msgstr ""

#: ./docs/8.x/database-testing.md:5
msgctxt "P"
msgid "[Defining Model Factories](#defining-model-factories)"
msgstr ""

#: ./docs/9.x/database-testing.md:5
#: ./docs/10.x/database-testing.md:5
#: ./docs/11.x/database-testing.md:5
#: ./docs/master/database-testing.md:5
msgctxt "P"
msgid "[Model Factories](#model-factories)"
msgstr ""

#: ./docs/8.x/database-testing.md:6
msgctxt "P"
msgid "[Concept Overview](#concept-overview)"
msgstr ""

#: ./docs/8.x/database-testing.md:7
msgctxt "P"
msgid "[Generating Factories](#generating-factories)"
msgstr ""

#: ./docs/8.x/database-testing.md:8
msgctxt "P"
msgid "[Factory States](#factory-states)"
msgstr ""

#: ./docs/8.x/database-testing.md:9
msgctxt "P"
msgid "[Factory Callbacks](#factory-callbacks)"
msgstr ""

#: ./docs/8.x/database-testing.md:10
msgctxt "P"
msgid "[Creating Models Using Factories](#creating-models-using-factories)"
msgstr ""

#: ./docs/8.x/database-testing.md:11
msgctxt "P"
msgid "[Instantiating Models](#instantiating-models)"
msgstr ""

#: ./docs/8.x/database-testing.md:12
msgctxt "P"
msgid "[Persisting Models](#persisting-models)"
msgstr ""

#: ./docs/8.x/database-testing.md:13
msgctxt "P"
msgid "[Sequences](#sequences)"
msgstr ""

#: ./docs/8.x/database-testing.md:14
msgctxt "P"
msgid "[Factory Relationships](#factory-relationships)"
msgstr ""

#: ./docs/10.x/database-testing.md:15
#: ./docs/11.x/database-testing.md:15
#: ./docs/master/database-testing.md:15
msgctxt "H3"
msgid "Resetting the Database After Each Test"
msgstr ""

#: ./docs/8.x/database-testing.md:15
msgctxt "P"
msgid "[Has Many Relationships](#has-many-relationships)"
msgstr ""

#: ./docs/8.x/database-testing.md:16
msgctxt "P"
msgid "[Belongs To Relationships](#belongs-to-relationships)"
msgstr ""

#: ./docs/8.x/database-testing.md:17
msgctxt "P"
msgid "[Many To Many Relationships](#many-to-many-relationships)"
msgstr ""

#: ./docs/8.x/database-testing.md:18
msgctxt "P"
msgid "[Polymorphic Relationships](#polymorphic-relationships)"
msgstr ""

#: ./docs/10.x/database-testing.md:19
#: ./docs/11.x/database-testing.md:33
#: ./docs/master/database-testing.md:33
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    use RefreshDatabase;\n"
"\n"
"    /**\n"
"     * A basic functional test example.\n"
"     */\n"
"    public function test_basic_example(): void\n"
"    {\n"
"        $response = $this->get('/');\n"
"\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/database-testing.md:19
#: ./docs/master/database-testing.md:19
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"\n"
"uses(RefreshDatabase::class);\n"
"\n"
"test('basic example', function () {\n"
"    $response = $this->get('/');\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/database-testing.md:19
msgctxt "P"
msgid "[Defining Relationships Within Factories](#defining-relationships-within-factories)"
msgstr ""

#: ./docs/8.x/database-testing.md:20
#: ./docs/9.x/database-testing.md:6
#: ./docs/10.x/database-testing.md:6
#: ./docs/11.x/database-testing.md:6
#: ./docs/master/database-testing.md:6
msgctxt "P"
msgid "[Running Seeders](#running-seeders)"
msgstr ""

#: ./docs/8.x/database-testing.md:21
#: ./docs/9.x/database-testing.md:7
#: ./docs/10.x/database-testing.md:7
#: ./docs/11.x/database-testing.md:7
#: ./docs/master/database-testing.md:7
msgctxt "P"
msgid "[Available Assertions](#available-assertions)"
msgstr ""

#: ./docs/8.x/database-testing.md:23
#: ./docs/9.x/database-testing.md:9
#: ./docs/10.x/database-testing.md:9
#: ./docs/11.x/database-testing.md:9
#: ./docs/master/database-testing.md:9
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:24
#: ./docs/9.x/database-testing.md:10
#: ./docs/10.x/database-testing.md:10
#: ./docs/11.x/database-testing.md:10
#: ./docs/master/database-testing.md:10
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/database-testing.md:26
#: ./docs/9.x/database-testing.md:12
#: ./docs/10.x/database-testing.md:12
#: ./docs/11.x/database-testing.md:12
#: ./docs/master/database-testing.md:12
msgctxt "P"
msgid "Laravel provides a variety of helpful tools and assertions to make it easier to test your database driven applications. In addition, Laravel model factories and seeders make it painless to create test database records using your application's Eloquent models and relationships. We'll discuss all of these powerful features in the following documentation."
msgstr ""

#: ./docs/8.x/database-testing.md:28
#: ./docs/9.x/database-testing.md:14
#: ./docs/10.x/database-testing.md:14
#: ./docs/11.x/database-testing.md:14
#: ./docs/master/database-testing.md:14
#~ msgctxt "P"
#~ msgid "<a name=\"resetting-the-database-after-each-test\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:29
#: ./docs/9.x/database-testing.md:15
msgctxt "H3"
msgid "Resetting The Database After Each Test"
msgstr ""

#: ./docs/8.x/database-testing.md:31
#: ./docs/9.x/database-testing.md:17
#: ./docs/10.x/database-testing.md:17
#: ./docs/11.x/database-testing.md:17
#: ./docs/master/database-testing.md:17
msgctxt "P"
msgid "Before proceeding much further, let's discuss how to reset your database after each of your tests so that data from a previous test does not interfere with subsequent tests. Laravel's included `Illuminate\\Foundation\\Testing\\RefreshDatabase` trait will take care of this for you. Simply use the trait on your test class:"
msgstr ""

#: ./docs/8.x/database-testing.md:33
#: ./docs/9.x/database-testing.md:19
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    use RefreshDatabase;\n"
"\n"
"    /**\n"
"     * A basic functional test example.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_basic_example()\n"
"    {\n"
"        $response = $this->get('/');\n"
"\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/database-testing.md:44
#: ./docs/10.x/database-testing.md:41
#: ./docs/11.x/database-testing.md:57
#: ./docs/master/database-testing.md:57
msgctxt "P"
msgid "The `Illuminate\\Foundation\\Testing\\RefreshDatabase` trait does not migrate your database if your schema is up to date. Instead, it will only execute the test within a database transaction. Therefore, any records added to the database by test cases that do not use this trait may still exist in the database."
msgstr ""

#: ./docs/9.x/database-testing.md:46
#: ./docs/10.x/database-testing.md:43
#: ./docs/11.x/database-testing.md:59
#: ./docs/master/database-testing.md:59
msgctxt "P"
msgid "If you would like to totally reset the database, you may use the `Illuminate\\Foundation\\Testing\\DatabaseMigrations` or `Illuminate\\Foundation\\Testing\\DatabaseTruncation` traits instead. However, both of these options are significantly slower than the `RefreshDatabase` trait."
msgstr ""

#: ./docs/9.x/database-testing.md:48
#: ./docs/10.x/database-testing.md:45
#: ./docs/11.x/database-testing.md:61
#: ./docs/master/database-testing.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"model-factories\"></a>"
#~ msgstr ""

#: ./docs/9.x/database-testing.md:49
#: ./docs/10.x/database-testing.md:46
#: ./docs/11.x/database-testing.md:62
#: ./docs/master/database-testing.md:62
msgctxt "H2"
msgid "Model Factories"
msgstr ""

#: ./docs/9.x/database-testing.md:51
#: ./docs/10.x/database-testing.md:48
#: ./docs/11.x/database-testing.md:64
#: ./docs/master/database-testing.md:64
msgctxt "P"
msgid "When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a set of default attributes for each of your [Eloquent models](/docs/{{version}}/eloquent) using [model factories](/docs/{{version}}/eloquent-factories)."
msgstr ""

#: ./docs/10.x/database-testing.md:52
#: ./docs/11.x/database-testing.md:78
#: ./docs/master/database-testing.md:78
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"public function test_models_can_be_instantiated(): void\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/database-testing.md:53
#: ./docs/10.x/database-testing.md:50
#: ./docs/11.x/database-testing.md:66
#: ./docs/master/database-testing.md:66
msgctxt "P"
msgid "To learn more about creating and utilizing model factories to create models, please consult the complete [model factory documentation](/docs/{{version}}/eloquent-factories). Once you have defined a model factory, you may utilize the factory within your test to create models:"
msgstr ""

#: ./docs/9.x/database-testing.md:55
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"public function test_models_can_be_instantiated()\n"
"{\n"
"    $user = User::factory()->create();\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:58
#~ msgctxt "P"
#~ msgid "<a name=\"defining-model-factories\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:59
msgctxt "H2"
msgid "Defining Model Factories"
msgstr ""

#: ./docs/8.x/database-testing.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"concept-overview\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:62
msgctxt "H3"
msgid "Concept Overview"
msgstr ""

#: ./docs/8.x/database-testing.md:64
msgctxt "P"
msgid "First, let's talk about Eloquent model factories. When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a set of default attributes for each of your [Eloquent models](/docs/{{version}}/eloquent) using model factories."
msgstr ""

#: ./docs/10.x/database-testing.md:66
#: ./docs/11.x/database-testing.md:121
#: ./docs/master/database-testing.md:121
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Database\\Seeders\\OrderStatusSeeder;\n"
"use Database\\Seeders\\TransactionStatusSeeder;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    use RefreshDatabase;\n"
"\n"
"    /**\n"
"     * Test creating a new order.\n"
"     */\n"
"    public function test_orders_can_be_created(): void\n"
"    {\n"
"        // Run the DatabaseSeeder...\n"
"        $this->seed();\n"
"\n"
"        // Run a specific seeder...\n"
"        $this->seed(OrderStatusSeeder::class);\n"
"\n"
"        // ...\n"
"\n"
"        // Run an array of specific seeders...\n"
"        $this->seed([\n"
"            OrderStatusSeeder::class,\n"
"            TransactionStatusSeeder::class,\n"
"            // ...\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:66
msgctxt "P"
msgid "To see an example of how to write a factory, take a look at the `database/factories/UserFactory.php` file in your application. This factory is included with all new Laravel applications and contains the following factory definition:"
msgstr ""

#: ./docs/11.x/database-testing.md:68
#: ./docs/master/database-testing.md:68
msgctxt "CODE: php tab=Pest"
msgid ""
"use App\\Models\\User;\n"
"\n"
"test('models can be instantiated', function () {\n"
"    $user = User::factory()->create();\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/database-testing.md:68
msgctxt "CODE"
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function definition()\n"
"    {\n"
"        return [\n"
"            'name' => $this->faker->name(),\n"
"            'email' => $this->faker->unique()->safeEmail(),\n"
"            'email_verified_at' => now(),\n"
"            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n"
"            'remember_token' => Str::random(10),\n"
"        ];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:92
msgctxt "P"
msgid "As you can see, in their most basic form, factories are classes that extend Laravel's base factory class and define `definition` method. The `definition` method returns the default set of attribute values that should be applied when creating a model using the factory."
msgstr ""

#: ./docs/11.x/database-testing.md:94
#: ./docs/master/database-testing.md:94
msgctxt "CODE: php tab=Pest"
msgid ""
"<?php\n"
"\n"
"use Database\\Seeders\\OrderStatusSeeder;\n"
"use Database\\Seeders\\TransactionStatusSeeder;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"\n"
"uses(RefreshDatabase::class);\n"
"\n"
"test('orders can be created', function () {\n"
"    // Run the DatabaseSeeder...\n"
"    $this->seed();\n"
"\n"
"    // Run a specific seeder...\n"
"    $this->seed(OrderStatusSeeder::class);\n"
"\n"
"    // ...\n"
"\n"
"    // Run an array of specific seeders...\n"
"    $this->seed([\n"
"        OrderStatusSeeder::class,\n"
"        TransactionStatusSeeder::class,\n"
"        // ...\n"
"    ]);\n"
"});"
msgstr ""

#: ./docs/8.x/database-testing.md:94
msgctxt "P"
msgid "Via the `faker` property, factories have access to the [Faker](https://github.com/FakerPHP/Faker) PHP library, which allows you to conveniently generate various kinds of random data for testing."
msgstr ""

#: ./docs/8.x/database-testing.md:96
msgctxt "P"
msgid "You can set your application's Faker locale by adding a `faker_locale` option to your `config/app.php` configuration file."
msgstr ""

#: ./docs/8.x/database-testing.md:98
#~ msgctxt "P"
#~ msgid "<a name=\"generating-factories\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:99
msgctxt "H3"
msgid "Generating Factories"
msgstr ""

#: ./docs/8.x/database-testing.md:101
msgctxt "P"
msgid "To create a factory, execute the `make:factory` [Artisan command](/docs/{{version}}/artisan):"
msgstr ""

#: ./docs/8.x/database-testing.md:103
msgctxt "CODE"
msgid "php artisan make:factory PostFactory"
msgstr ""

#: ./docs/8.x/database-testing.md:105
msgctxt "P"
msgid "The new factory class will be placed in your `database/factories` directory."
msgstr ""

#: ./docs/8.x/database-testing.md:107
#~ msgctxt "P"
#~ msgid "<a name=\"factory-and-model-discovery-conventions\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:108
msgctxt "H4"
msgid "Model & Factory Discovery Conventions"
msgstr ""

#: ./docs/8.x/database-testing.md:110
msgctxt "P"
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model."
msgstr ""

#: ./docs/8.x/database-testing.md:112
msgctxt "P"
msgid "The `HasFactory` trait's `factory` method will use conventions to determine the proper factory for the model the trait is assigned to. Specifically, the method will look for a factory in the `Database\\Factories` namespace that has a class name matching the model name and is suffixed with `Factory`. If these conventions do not apply to your particular application or factory, you may overwrite the `newFactory` method on your model to return an instance of the model's corresponding factory directly:"
msgstr ""

#: ./docs/8.x/database-testing.md:114
msgctxt "CODE"
msgid ""
"use Database\\Factories\\Administration\\FlightFactory;\n"
"\n"
"/**\n"
" * Create a new factory instance for the model.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"protected static function newFactory()\n"
"{\n"
"    return FlightFactory::new();\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:126
msgctxt "P"
msgid "Next, define a `model` property on the corresponding factory:"
msgstr ""

#: ./docs/8.x/database-testing.md:128
msgctxt "CODE"
msgid ""
"use App\\Administration\\Flight;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"\n"
"class FlightFactory extends Factory\n"
"{\n"
"    /**\n"
"     * The name of the factory's corresponding model.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $model = Flight::class;\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:141
#~ msgctxt "P"
#~ msgid "<a name=\"factory-states\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:142
msgctxt "H3"
msgid "Factory States"
msgstr ""

#: ./docs/8.x/database-testing.md:144
msgctxt "P"
msgid "State manipulation methods allow you to define discrete modifications that can be applied to your model factories in any combination. For example, your `Database\\Factories\\UserFactory` factory might contain a `suspended` state method that modifies one of its default attribute values."
msgstr ""

#: ./docs/8.x/database-testing.md:146
msgctxt "P"
msgid "State transformation methods typically call the `state` method provided by Laravel's base factory class. The `state` method accepts a closure which will receive the array of raw attributes defined for the factory and should return an array of attributes to modify:"
msgstr ""

#: ./docs/8.x/database-testing.md:148
msgctxt "CODE"
msgid ""
"/**\n"
" * Indicate that the user is suspended.\n"
" *\n"
" * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n"
" */\n"
"public function suspended()\n"
"{\n"
"    return $this->state(function (array $attributes) {\n"
"        return [\n"
"            'account_status' => 'suspended',\n"
"        ];\n"
"    });\n"
"}"
msgstr ""

#: ./docs/11.x/database-testing.md:160
#: ./docs/master/database-testing.md:160
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n"
"\n"
"abstract class TestCase extends BaseTestCase\n"
"{\n"
"    /**\n"
"     * Indicates whether the default seeder should run before each test.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $seed = true;\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:162
#~ msgctxt "P"
#~ msgid "<a name=\"factory-callbacks\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:163
msgctxt "H3"
msgid "Factory Callbacks"
msgstr ""

#: ./docs/8.x/database-testing.md:165
msgctxt "P"
msgid "Factory callbacks are registered using the `afterMaking` and `afterCreating` methods and allow you to perform additional tasks after making or creating a model. You should register these callbacks by defining a `configure` method on your factory class. This method will be automatically called by Laravel when the factory is instantiated:"
msgstr ""

#: ./docs/8.x/database-testing.md:167
msgctxt "CODE"
msgid ""
"namespace Database\\Factories;\n"
"\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n"
"use Illuminate\\Support\\Str;\n"
"\n"
"class UserFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Configure the model factory.\n"
"     *\n"
"     * @return $this\n"
"     */\n"
"    public function configure()\n"
"    {\n"
"        return $this->afterMaking(function (User $user) {\n"
"            //\n"
"        })->afterCreating(function (User $user) {\n"
"            //\n"
"        });\n"
"    }\n"
"\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/database-testing.md:169
#: ./docs/10.x/database-testing.md:163
#: ./docs/11.x/database-testing.md:225
#: ./docs/master/database-testing.md:218
msgctxt "H4"
msgid "assertSoftDeleted"
msgstr ""

#: ./docs/9.x/database-testing.md:175
#: ./docs/10.x/database-testing.md:169
#: ./docs/11.x/database-testing.md:231
#: ./docs/master/database-testing.md:224
#~ msgctxt "P"
#~ msgid "<a name=\"assert-not-deleted\"></a>"
#~ msgstr ""

#: ./docs/9.x/database-testing.md:176
#: ./docs/10.x/database-testing.md:170
#: ./docs/11.x/database-testing.md:232
#: ./docs/master/database-testing.md:225
msgctxt "H4"
msgid "assertNotSoftDeleted"
msgstr ""

#: ./docs/9.x/database-testing.md:178
#: ./docs/10.x/database-testing.md:172
#: ./docs/11.x/database-testing.md:234
#: ./docs/master/database-testing.md:227
msgctxt "P"
msgid "The `assertNotSoftDeleted` method may be used to assert a given Eloquent model hasn't been \"soft deleted\":"
msgstr ""

#: ./docs/9.x/database-testing.md:180
#: ./docs/10.x/database-testing.md:174
#: ./docs/11.x/database-testing.md:236
#: ./docs/master/database-testing.md:229
msgctxt "CODE"
msgid "$this->assertNotSoftDeleted($user);"
msgstr ""

#: ./docs/11.x/database-testing.md:190
#: ./docs/master/database-testing.md:190
msgctxt "P"
msgid "Laravel provides several database assertions for your [Pest](https://pestphp.com) or [PHPUnit](https://phpunit.de) feature tests. We'll discuss each of these assertions below."
msgstr ""

#: ./docs/8.x/database-testing.md:192
#~ msgctxt "P"
#~ msgid "<a name=\"creating-models-using-factories\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:193
msgctxt "H2"
msgid "Creating Models Using Factories"
msgstr ""

#: ./docs/8.x/database-testing.md:195
#~ msgctxt "P"
#~ msgid "<a name=\"instantiating-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:196
msgctxt "H3"
msgid "Instantiating Models"
msgstr ""

#: ./docs/8.x/database-testing.md:198
msgctxt "P"
msgid "Once you have defined your factories, you may use the static `factory` method provided to your models by the `Illuminate\\Database\\Eloquent\\Factories\\HasFactory` trait in order to instantiate a factory instance for that model. Let's take a look at a few examples of creating models. First, we'll use the `make` method to create models without persisting them to the database:"
msgstr ""

#: ./docs/11.x/database-testing.md:199
#~ msgctxt "P"
#~ msgid "<a name=\"assert-database-empty\"></a>"
#~ msgstr ""

#: ./docs/11.x/database-testing.md:200
msgctxt "H4"
msgid "assertDatabaseEmpty"
msgstr ""

#: ./docs/8.x/database-testing.md:200
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"public function test_models_can_be_instantiated()\n"
"{\n"
"    $user = User::factory()->make();\n"
"\n"
"    // Use model in tests...\n"
"}"
msgstr ""

#: ./docs/11.x/database-testing.md:202
msgctxt "P"
msgid "Assert that a table in the database contains no records:"
msgstr ""

#: ./docs/11.x/database-testing.md:204
msgctxt "CODE"
msgid "$this->assertDatabaseEmpty('users');"
msgstr ""

#: ./docs/9.x/database-testing.md:206
#: ./docs/10.x/database-testing.md:200
#: ./docs/11.x/database-testing.md:262
#: ./docs/master/database-testing.md:255
#~ msgctxt "P"
#~ msgid "<a name=\"expects-database-query-count\"></a>"
#~ msgstr ""

#: ./docs/9.x/database-testing.md:207
#: ./docs/10.x/database-testing.md:201
#: ./docs/11.x/database-testing.md:263
#: ./docs/master/database-testing.md:256
msgctxt "H4"
msgid "expectsDatabaseQueryCount"
msgstr ""

#: ./docs/8.x/database-testing.md:209
msgctxt "P"
msgid "You may create a collection of many models using the `count` method:"
msgstr ""

#: ./docs/9.x/database-testing.md:209
#: ./docs/10.x/database-testing.md:203
#: ./docs/11.x/database-testing.md:265
#: ./docs/master/database-testing.md:258
msgctxt "P"
msgid "The `expectsDatabaseQueryCount` method may be invoked at the beginning of your test to specify the total number of database queries that you expect to be run during the test. If the actual number of executed queries does not exactly match this expectation, the test will fail:"
msgstr ""

#: ./docs/8.x/database-testing.md:211
msgctxt "CODE"
msgid "$users = User::factory()->count(3)->make();"
msgstr ""

#: ./docs/9.x/database-testing.md:211
#: ./docs/10.x/database-testing.md:205
#: ./docs/11.x/database-testing.md:267
#: ./docs/master/database-testing.md:260
msgctxt "CODE"
msgid ""
"$this->expectsDatabaseQueryCount(5);\n"
"\n"
"// Test..."
msgstr ""

#: ./docs/8.x/database-testing.md:213
#~ msgctxt "P"
#~ msgid "<a name=\"applying-states\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:214
msgctxt "H4"
msgid "Applying States"
msgstr ""

#: ./docs/8.x/database-testing.md:216
msgctxt "P"
msgid "You may also apply any of your [states](#factory-states) to the models. If you would like to apply multiple state transformations to the models, you may simply call the state transformation methods directly:"
msgstr ""

#: ./docs/8.x/database-testing.md:218
msgctxt "CODE"
msgid "$users = User::factory()->count(5)->suspended()->make();"
msgstr ""

#: ./docs/8.x/database-testing.md:220
#~ msgctxt "P"
#~ msgid "<a name=\"overriding-attributes\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:221
msgctxt "H4"
msgid "Overriding Attributes"
msgstr ""

#: ./docs/8.x/database-testing.md:223
msgctxt "P"
msgid "If you would like to override some of the default values of your models, you may pass an array of values to the `make` method. Only the specified attributes will be replaced while the rest of the attributes remain set to their default values as specified by the factory:"
msgstr ""

#: ./docs/8.x/database-testing.md:225
msgctxt "CODE"
msgid ""
"$user = User::factory()->make([\n"
"    'name' => 'Abigail Otwell',\n"
"]);"
msgstr ""

#: ./docs/8.x/database-testing.md:229
msgctxt "P"
msgid "Alternatively, the `state` method may be called directly on the factory instance to perform an inline state transformation:"
msgstr ""

#: ./docs/8.x/database-testing.md:231
msgctxt "CODE"
msgid ""
"$user = User::factory()->state([\n"
"    'name' => 'Abigail Otwell',\n"
"])->make();"
msgstr ""

#: ./docs/8.x/database-testing.md:235
msgctxt "P"
msgid "[Mass assignment protection](/docs/{{version}}/eloquent#mass-assignment) is automatically disabled when creating models using factories."
msgstr ""

#: ./docs/8.x/database-testing.md:237
#~ msgctxt "P"
#~ msgid "<a name=\"persisting-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:238
msgctxt "H3"
msgid "Persisting Models"
msgstr ""

#: ./docs/8.x/database-testing.md:240
msgctxt "P"
msgid "The `create` method instantiates model instances and persists them to the database using Eloquent's `save` method:"
msgstr ""

#: ./docs/8.x/database-testing.md:242
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"public function test_models_can_be_persisted()\n"
"{\n"
"    // Create a single App\\Models\\User instance...\n"
"    $user = User::factory()->create();\n"
"\n"
"    // Create three App\\Models\\User instances...\n"
"    $users = User::factory()->count(3)->create();\n"
"\n"
"    // Use model in tests...\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:255
msgctxt "P"
msgid "You may override the factory's default model attributes by passing an array of attributes to the `create` method:"
msgstr ""

#: ./docs/8.x/database-testing.md:257
msgctxt "CODE"
msgid ""
"$user = User::factory()->create([\n"
"    'name' => 'Abigail',\n"
"]);"
msgstr ""

#: ./docs/8.x/database-testing.md:261
#~ msgctxt "P"
#~ msgid "<a name=\"sequences\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:262
msgctxt "H3"
msgid "Sequences"
msgstr ""

#: ./docs/8.x/database-testing.md:264
msgctxt "P"
msgid "Sometimes you may wish to alternate the value of a given model attribute for each created model. You may accomplish this by defining a state transformation as a sequence. For example, you may wish to alternate the value of an `admin` column between `Y` and `N` for each created user:"
msgstr ""

#: ./docs/8.x/database-testing.md:266
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\Sequence;\n"
"\n"
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->state(new Sequence(\n"
"                    ['admin' => 'Y'],\n"
"                    ['admin' => 'N'],\n"
"                ))\n"
"                ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:277
msgctxt "P"
msgid "In this example, five users will be created with an `admin` value of `Y` and five users will be created with an `admin` value of `N`."
msgstr ""

#: ./docs/8.x/database-testing.md:279
msgctxt "P"
msgid "If necessary, you may include a closure as a sequence value. The closure will be invoked each time the sequence needs a new value:"
msgstr ""

#: ./docs/8.x/database-testing.md:281
msgctxt "CODE"
msgid ""
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->state(new Sequence(\n"
"                    fn ($sequence) => ['role' => UserRoles::all()->random()],\n"
"                ))\n"
"                ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:288
msgctxt "P"
msgid "Within a sequence closure, you may access the `$index` or `$count` properties on the sequence instance that is injected into the closure. The `$index` property contains the number of iterations through the sequence that have occurred thus far, while the `$count` property contains the total number of times the sequence will be invoked:"
msgstr ""

#: ./docs/8.x/database-testing.md:290
msgctxt "CODE"
msgid ""
"$users = User::factory()\n"
"                ->count(10)\n"
"                ->sequence(fn ($sequence) => ['name' => 'Name '.$sequence->index])\n"
"                ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:295
#~ msgctxt "P"
#~ msgid "<a name=\"factory-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:296
msgctxt "H2"
msgid "Factory Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:298
#~ msgctxt "P"
#~ msgid "<a name=\"has-many-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:299
msgctxt "H3"
msgid "Has Many Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:301
msgctxt "P"
msgid "Next, let's explore building Eloquent model relationships using Laravel's fluent factory methods. First, let's assume our application has an `App\\Models\\User` model and an `App\\Models\\Post` model. Also, let's assume that the `User` model defines a `hasMany` relationship with `Post`. We can create a user that has three posts using the `has` method provided by the Laravel's factories. The `has` method accepts a factory instance:"
msgstr ""

#: ./docs/8.x/database-testing.md:303
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->has(Post::factory()->count(3))\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:310
msgctxt "P"
msgid "By convention, when passing a `Post` model to the `has` method, Laravel will assume that the `User` model must have a `posts` method that defines the relationship. If necessary, you may explicitly specify the name of the relationship that you would like to manipulate:"
msgstr ""

#: ./docs/8.x/database-testing.md:312
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->has(Post::factory()->count(3), 'posts')\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:316
msgctxt "P"
msgid "Of course, you may perform state manipulations on the related models. In addition, you may pass a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#: ./docs/8.x/database-testing.md:318
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->has(\n"
"                Post::factory()\n"
"                        ->count(3)\n"
"                        ->state(function (array $attributes, User $user) {\n"
"                            return ['user_type' => $user->type];\n"
"                        })\n"
"            )\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:328
#~ msgctxt "P"
#~ msgid "<a name=\"has-many-relationships-using-magic-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:329
#: ./docs/8.x/database-testing.md:378
#: ./docs/8.x/database-testing.md:439
msgctxt "H4"
msgid "Using Magic Methods"
msgstr ""

#: ./docs/8.x/database-testing.md:331
msgctxt "P"
msgid "For convenience, you may use Laravel's magic factory relationship methods to build relationships. For example, the following example will use convention to determine that the related models should be created via a `posts` relationship method on the `User` model:"
msgstr ""

#: ./docs/8.x/database-testing.md:333
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3)\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:337
msgctxt "P"
msgid "When using magic methods to create factory relationships, you may pass an array of attributes to override on the related models:"
msgstr ""

#: ./docs/8.x/database-testing.md:339
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3, [\n"
"                'published' => false,\n"
"            ])\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:345
msgctxt "P"
msgid "You may provide a closure based state transformation if your state change requires access to the parent model:"
msgstr ""

#: ./docs/8.x/database-testing.md:347
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->hasPosts(3, function (array $attributes, User $user) {\n"
"                return ['user_type' => $user->type];\n"
"            })\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:353
#~ msgctxt "P"
#~ msgid "<a name=\"belongs-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:354
msgctxt "H3"
msgid "Belongs To Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:356
msgctxt "P"
msgid "Now that we have explored how to build \"has many\" relationships using factories, let's explore the inverse of the relationship. The `for` method may be used to define the parent model that factory created models belong to. For example, we can create three `App\\Models\\Post` model instances that belong to a single user:"
msgstr ""

#: ./docs/8.x/database-testing.md:358
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->for(User::factory()->state([\n"
"                'name' => 'Jessica Archer',\n"
"            ]))\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:368
msgctxt "P"
msgid "If you already have a parent model instance that should be associated with the models you are creating, you may pass the model instance to the `for` method:"
msgstr ""

#: ./docs/8.x/database-testing.md:370
msgctxt "CODE"
msgid ""
"$user = User::factory()->create();\n"
"\n"
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->for($user)\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:377
#~ msgctxt "P"
#~ msgid "<a name=\"belongs-to-relationships-using-magic-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:380
msgctxt "P"
msgid "For convenience, you may use Laravel's magic factory relationship methods to define \"belongs to\" relationships. For example, the following example will use convention to determine that the three posts should belong to the `user` relationship on the `Post` model:"
msgstr ""

#: ./docs/8.x/database-testing.md:382
msgctxt "CODE"
msgid ""
"$posts = Post::factory()\n"
"            ->count(3)\n"
"            ->forUser([\n"
"                'name' => 'Jessica Archer',\n"
"            ])\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:389
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:390
msgctxt "H3"
msgid "Many To Many Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:392
msgctxt "P"
msgid "Like [has many relationships](#has-many-relationships), \"many to many\" relationships may be created using the `has` method:"
msgstr ""

#: ./docs/8.x/database-testing.md:394
msgctxt "CODE"
msgid ""
"use App\\Models\\Role;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->has(Role::factory()->count(3))\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:401
#~ msgctxt "P"
#~ msgid "<a name=\"pivot-table-attributes\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:402
msgctxt "H4"
msgid "Pivot Table Attributes"
msgstr ""

#: ./docs/8.x/database-testing.md:404
msgctxt "P"
msgid "If you need to define attributes that should be set on the pivot / intermediate table linking the models, you may use the `hasAttached` method. This method accepts an array of pivot table attribute names and values as its second argument:"
msgstr ""

#: ./docs/8.x/database-testing.md:406
msgctxt "CODE"
msgid ""
"use App\\Models\\Role;\n"
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()\n"
"            ->hasAttached(\n"
"                Role::factory()->count(3),\n"
"                ['active' => true]\n"
"            )\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:416
msgctxt "P"
msgid "You may provide a closure based state transformation if your state change requires access to the related model:"
msgstr ""

#: ./docs/8.x/database-testing.md:418
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->hasAttached(\n"
"                Role::factory()\n"
"                    ->count(3)\n"
"                    ->state(function (array $attributes, User $user) {\n"
"                        return ['name' => $user->name.' Role'];\n"
"                    }),\n"
"                ['active' => true]\n"
"            )\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:429
msgctxt "P"
msgid "If you already have model instances that you would like to be attached to the models you are creating, you may pass the model instances to the `hasAttached` method. In this example, the same three roles will be attached to all three users:"
msgstr ""

#: ./docs/8.x/database-testing.md:431
msgctxt "CODE"
msgid ""
"$roles = Role::factory()->count(3)->create();\n"
"\n"
"$user = User::factory()\n"
"            ->count(3)\n"
"            ->hasAttached($roles, ['active' => true])\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:438
#~ msgctxt "P"
#~ msgid "<a name=\"many-to-many-relationships-using-magic-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:441
msgctxt "P"
msgid "For convenience, you may use Laravel's magic factory relationship methods to define many to many relationships. For example, the following example will use convention to determine that the related models should be created via a `roles` relationship method on the `User` model:"
msgstr ""

#: ./docs/8.x/database-testing.md:443
msgctxt "CODE"
msgid ""
"$user = User::factory()\n"
"            ->hasRoles(1, [\n"
"                'name' => 'Editor'\n"
"            ])\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:449
#~ msgctxt "P"
#~ msgid "<a name=\"polymorphic-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:450
msgctxt "H3"
msgid "Polymorphic Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:452
msgctxt "P"
msgid "[Polymorphic relationships](/docs/{{version}}/eloquent-relationships#polymorphic-relationships) may also be created using factories. Polymorphic \"morph many\" relationships are created in the same way as typical \"has many\" relationships. For example, if a `App\\Models\\Post` model has a `morphMany` relationship with a `App\\Models\\Comment` model:"
msgstr ""

#: ./docs/8.x/database-testing.md:454
msgctxt "CODE"
msgid ""
"use App\\Models\\Post;\n"
"\n"
"$post = Post::factory()->hasComments(3)->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:458
#~ msgctxt "P"
#~ msgid "<a name=\"morph-to-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:459
msgctxt "H4"
msgid "Morph To Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:461
msgctxt "P"
msgid "Magic methods may not be used to create `morphTo` relationships. Instead, the `for` method must be used directly and the name of the relationship must be explicitly provided. For example, imagine that the `Comment` model has a `commentable` method that defines a `morphTo` relationship. In this situation, we may create three comments that belong to a single post by using the `for` method directly:"
msgstr ""

#: ./docs/8.x/database-testing.md:463
msgctxt "CODE"
msgid ""
"$comments = Comment::factory()->count(3)->for(\n"
"    Post::factory(), 'commentable'\n"
")->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:467
#~ msgctxt "P"
#~ msgid "<a name=\"polymorphic-many-to-many-relationships\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:468
msgctxt "H4"
msgid "Polymorphic Many To Many Relationships"
msgstr ""

#: ./docs/8.x/database-testing.md:470
msgctxt "P"
msgid "Polymorphic \"many to many\" (`morphToMany` / `morphedByMany`) relationships may be created just like non-polymorphic \"many to many\" relationships:"
msgstr ""

#: ./docs/8.x/database-testing.md:472
msgctxt "CODE"
msgid ""
"use App\\Models\\Tag;\n"
"use App\\Models\\Video;\n"
"\n"
"$videos = Video::factory()\n"
"            ->hasAttached(\n"
"                Tag::factory()->count(3),\n"
"                ['public' => true]\n"
"            )\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:482
msgctxt "P"
msgid "Of course, the magic `has` method may also be used to create polymorphic \"many to many\" relationships:"
msgstr ""

#: ./docs/8.x/database-testing.md:484
msgctxt "CODE"
msgid ""
"$videos = Video::factory()\n"
"            ->hasTags(3, ['public' => true])\n"
"            ->create();"
msgstr ""

#: ./docs/8.x/database-testing.md:488
#~ msgctxt "P"
#~ msgid "<a name=\"defining-relationships-within-factories\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:489
msgctxt "H3"
msgid "Defining Relationships Within Factories"
msgstr ""

#: ./docs/8.x/database-testing.md:491
msgctxt "P"
msgid "To define a relationship within your model factory, you will typically assign a new factory instance to the foreign key of the relationship. This is normally done for the \"inverse\" relationships such as `belongsTo` and `morphTo` relationships. For example, if you would like to create a new user when creating a post, you may do the following:"
msgstr ""

#: ./docs/8.x/database-testing.md:493
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array\n"
" */\n"
"public function definition()\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'title' => $this->faker->title(),\n"
"        'content' => $this->faker->paragraph(),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:509
msgctxt "P"
msgid "If the relationship's columns depend on the factory that defines it you may assign a closure to an attribute. The closure will receive the factory's evaluated attribute array:"
msgstr ""

#: ./docs/8.x/database-testing.md:511
msgctxt "CODE"
msgid ""
"/**\n"
" * Define the model's default state.\n"
" *\n"
" * @return array\n"
" */\n"
"public function definition()\n"
"{\n"
"    return [\n"
"        'user_id' => User::factory(),\n"
"        'user_type' => function (array $attributes) {\n"
"            return User::find($attributes['user_id'])->type;\n"
"        },\n"
"        'title' => $this->faker->title(),\n"
"        'content' => $this->faker->paragraph(),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:528
#: ./docs/9.x/database-testing.md:64
#: ./docs/10.x/database-testing.md:61
#: ./docs/11.x/database-testing.md:89
#: ./docs/master/database-testing.md:89
#~ msgctxt "P"
#~ msgid "<a name=\"running-seeders\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:529
#: ./docs/9.x/database-testing.md:65
#: ./docs/10.x/database-testing.md:62
#: ./docs/11.x/database-testing.md:90
#: ./docs/master/database-testing.md:90
msgctxt "H2"
msgid "Running Seeders"
msgstr ""

#: ./docs/8.x/database-testing.md:531
#: ./docs/9.x/database-testing.md:67
#: ./docs/10.x/database-testing.md:64
#: ./docs/11.x/database-testing.md:92
#: ./docs/master/database-testing.md:92
msgctxt "P"
msgid "If you would like to use [database seeders](/docs/{{version}}/seeding) to populate your database during a feature test, you may invoke the `seed` method. By default, the `seed` method will execute the `DatabaseSeeder`, which should execute all of your other seeders. Alternatively, you pass a specific seeder class name to the `seed` method:"
msgstr ""

#: ./docs/8.x/database-testing.md:533
#: ./docs/9.x/database-testing.md:69
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests\\Feature;\n"
"\n"
"use Database\\Seeders\\OrderStatusSeeder;\n"
"use Database\\Seeders\\TransactionStatusSeeder;\n"
"use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n"
"use Illuminate\\Foundation\\Testing\\WithoutMiddleware;\n"
"use Tests\\TestCase;\n"
"\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    use RefreshDatabase;\n"
"\n"
"    /**\n"
"     * Test creating a new order.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function test_orders_can_be_created()\n"
"    {\n"
"        // Run the DatabaseSeeder...\n"
"        $this->seed();\n"
"\n"
"        // Run a specific seeder...\n"
"        $this->seed(OrderStatusSeeder::class);\n"
"\n"
"        // ...\n"
"\n"
"        // Run an array of specific seeders...\n"
"        $this->seed([\n"
"            OrderStatusSeeder::class,\n"
"            TransactionStatusSeeder::class,\n"
"            // ...\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:571
#: ./docs/9.x/database-testing.md:107
#: ./docs/10.x/database-testing.md:101
#: ./docs/11.x/database-testing.md:158
#: ./docs/master/database-testing.md:158
msgctxt "P"
msgid "Alternatively, you may instruct Laravel to automatically seed the database before each test that uses the `RefreshDatabase` trait. You may accomplish this by defining a `$seed` property on your base test class:"
msgstr ""

#: ./docs/8.x/database-testing.md:573
#: ./docs/9.x/database-testing.md:109
#: ./docs/10.x/database-testing.md:103
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace Tests;\n"
"\n"
"use Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n"
"\n"
"abstract class TestCase extends BaseTestCase\n"
"{\n"
"    use CreatesApplication;\n"
"\n"
"    /**\n"
"     * Indicates whether the default seeder should run before each test.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $seed = true;\n"
"}"
msgstr ""

#: ./docs/8.x/database-testing.md:591
#: ./docs/9.x/database-testing.md:127
#: ./docs/10.x/database-testing.md:121
#: ./docs/11.x/database-testing.md:176
#: ./docs/master/database-testing.md:176
msgctxt "P"
msgid "When the `$seed` property is `true`, the test will run the `Database\\Seeders\\DatabaseSeeder` class before each test that uses the `RefreshDatabase` trait. However, you may specify a specific seeder that should be executed by defining a `$seeder` property on your test class:"
msgstr ""

#: ./docs/8.x/database-testing.md:593
#: ./docs/9.x/database-testing.md:129
#: ./docs/10.x/database-testing.md:123
#: ./docs/11.x/database-testing.md:178
#: ./docs/master/database-testing.md:178
msgctxt "CODE"
msgid ""
"use Database\\Seeders\\OrderStatusSeeder;\n"
"\n"
"/**\n"
" * Run a specific seeder before each test.\n"
" *\n"
" * @var string\n"
" */\n"
"protected $seeder = OrderStatusSeeder::class;"
msgstr ""

#: ./docs/8.x/database-testing.md:602
#: ./docs/9.x/database-testing.md:138
#: ./docs/10.x/database-testing.md:132
#: ./docs/11.x/database-testing.md:187
#: ./docs/master/database-testing.md:187
#~ msgctxt "P"
#~ msgid "<a name=\"available-assertions\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:603
#: ./docs/9.x/database-testing.md:139
#: ./docs/10.x/database-testing.md:133
#: ./docs/11.x/database-testing.md:188
#: ./docs/master/database-testing.md:188
msgctxt "H2"
msgid "Available Assertions"
msgstr ""

#: ./docs/8.x/database-testing.md:605
#: ./docs/9.x/database-testing.md:141
#: ./docs/10.x/database-testing.md:135
msgctxt "P"
msgid "Laravel provides several database assertions for your [PHPUnit](https://phpunit.de/) feature tests. We'll discuss each of these assertions below."
msgstr ""

#: ./docs/8.x/database-testing.md:607
#: ./docs/9.x/database-testing.md:143
#: ./docs/10.x/database-testing.md:137
#: ./docs/11.x/database-testing.md:192
#: ./docs/master/database-testing.md:192
#~ msgctxt "P"
#~ msgid "<a name=\"assert-database-count\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:608
#: ./docs/9.x/database-testing.md:144
#: ./docs/10.x/database-testing.md:138
#: ./docs/11.x/database-testing.md:193
#: ./docs/master/database-testing.md:193
msgctxt "H4"
msgid "assertDatabaseCount"
msgstr ""

#: ./docs/8.x/database-testing.md:610
#: ./docs/9.x/database-testing.md:146
#: ./docs/10.x/database-testing.md:140
#: ./docs/11.x/database-testing.md:195
#: ./docs/master/database-testing.md:195
msgctxt "P"
msgid "Assert that a table in the database contains the given number of records:"
msgstr ""

#: ./docs/8.x/database-testing.md:612
#: ./docs/9.x/database-testing.md:148
#: ./docs/10.x/database-testing.md:142
#: ./docs/11.x/database-testing.md:197
#: ./docs/master/database-testing.md:197
msgctxt "CODE"
msgid "$this->assertDatabaseCount('users', 5);"
msgstr ""

#: ./docs/8.x/database-testing.md:614
#: ./docs/9.x/database-testing.md:150
#: ./docs/10.x/database-testing.md:144
#: ./docs/11.x/database-testing.md:206
#: ./docs/master/database-testing.md:199
#~ msgctxt "P"
#~ msgid "<a name=\"assert-database-has\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:615
#: ./docs/9.x/database-testing.md:151
#: ./docs/10.x/database-testing.md:145
#: ./docs/11.x/database-testing.md:207
#: ./docs/master/database-testing.md:200
msgctxt "H4"
msgid "assertDatabaseHas"
msgstr ""

#: ./docs/8.x/database-testing.md:617
#: ./docs/9.x/database-testing.md:153
#: ./docs/10.x/database-testing.md:147
#: ./docs/11.x/database-testing.md:209
#: ./docs/master/database-testing.md:202
msgctxt "P"
msgid "Assert that a table in the database contains records matching the given key / value query constraints:"
msgstr ""

#: ./docs/8.x/database-testing.md:619
#: ./docs/9.x/database-testing.md:155
#: ./docs/10.x/database-testing.md:149
#: ./docs/11.x/database-testing.md:211
#: ./docs/master/database-testing.md:204
msgctxt "CODE"
msgid ""
"$this->assertDatabaseHas('users', [\n"
"    'email' => 'sally@example.com',\n"
"]);"
msgstr ""

#: ./docs/8.x/database-testing.md:623
#: ./docs/9.x/database-testing.md:159
#: ./docs/10.x/database-testing.md:153
#: ./docs/11.x/database-testing.md:215
#: ./docs/master/database-testing.md:208
#~ msgctxt "P"
#~ msgid "<a name=\"assert-database-missing\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:624
#: ./docs/9.x/database-testing.md:160
#: ./docs/10.x/database-testing.md:154
#: ./docs/11.x/database-testing.md:216
#: ./docs/master/database-testing.md:209
msgctxt "H4"
msgid "assertDatabaseMissing"
msgstr ""

#: ./docs/8.x/database-testing.md:626
#: ./docs/9.x/database-testing.md:162
#: ./docs/10.x/database-testing.md:156
#: ./docs/11.x/database-testing.md:218
#: ./docs/master/database-testing.md:211
msgctxt "P"
msgid "Assert that a table in the database does not contain records matching the given key / value query constraints:"
msgstr ""

#: ./docs/8.x/database-testing.md:628
#: ./docs/9.x/database-testing.md:164
#: ./docs/10.x/database-testing.md:158
#: ./docs/11.x/database-testing.md:220
#: ./docs/master/database-testing.md:213
msgctxt "CODE"
msgid ""
"$this->assertDatabaseMissing('users', [\n"
"    'email' => 'sally@example.com',\n"
"]);"
msgstr ""

#: ./docs/8.x/database-testing.md:632
#: ./docs/9.x/database-testing.md:168
#: ./docs/10.x/database-testing.md:162
#: ./docs/11.x/database-testing.md:224
#: ./docs/master/database-testing.md:217
#~ msgctxt "P"
#~ msgid "<a name=\"assert-deleted\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:633
msgctxt "H4"
msgid "assertDeleted"
msgstr ""

#: ./docs/8.x/database-testing.md:635
msgctxt "P"
msgid "The `assertDeleted` asserts that a given Eloquent model has been deleted from the database:"
msgstr ""

#: ./docs/8.x/database-testing.md:637
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$user->delete();\n"
"\n"
"$this->assertDeleted($user);"
msgstr ""

#: ./docs/8.x/database-testing.md:645
#: ./docs/9.x/database-testing.md:171
#: ./docs/10.x/database-testing.md:165
#: ./docs/11.x/database-testing.md:227
#: ./docs/master/database-testing.md:220
msgctxt "P"
msgid "The `assertSoftDeleted` method may be used to assert a given Eloquent model has been \"soft deleted\":"
msgstr ""

#: ./docs/8.x/database-testing.md:647
#: ./docs/9.x/database-testing.md:173
#: ./docs/10.x/database-testing.md:167
#: ./docs/11.x/database-testing.md:229
#: ./docs/master/database-testing.md:222
msgctxt "CODE"
msgid "$this->assertSoftDeleted($user);"
msgstr ""

#: ./docs/8.x/database-testing.md:649
#: ./docs/9.x/database-testing.md:182
#: ./docs/10.x/database-testing.md:176
#: ./docs/11.x/database-testing.md:238
#: ./docs/master/database-testing.md:231
#~ msgctxt "P"
#~ msgid "<a name=\"assert-model-exists\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:650
#: ./docs/9.x/database-testing.md:183
#: ./docs/10.x/database-testing.md:177
#: ./docs/11.x/database-testing.md:239
#: ./docs/master/database-testing.md:232
msgctxt "H4"
msgid "assertModelExists"
msgstr ""

#: ./docs/8.x/database-testing.md:652
#: ./docs/9.x/database-testing.md:185
#: ./docs/10.x/database-testing.md:179
#: ./docs/11.x/database-testing.md:241
#: ./docs/master/database-testing.md:234
msgctxt "P"
msgid "Assert that a given model exists in the database:"
msgstr ""

#: ./docs/8.x/database-testing.md:654
#: ./docs/9.x/database-testing.md:187
#: ./docs/10.x/database-testing.md:181
#: ./docs/11.x/database-testing.md:243
#: ./docs/master/database-testing.md:236
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()->create();\n"
"\n"
"$this->assertModelExists($user);"
msgstr ""

#: ./docs/8.x/database-testing.md:660
#: ./docs/9.x/database-testing.md:193
#: ./docs/10.x/database-testing.md:187
#: ./docs/11.x/database-testing.md:249
#: ./docs/master/database-testing.md:242
#~ msgctxt "P"
#~ msgid "<a name=\"assert-model-missing\"></a>"
#~ msgstr ""

#: ./docs/8.x/database-testing.md:661
#: ./docs/9.x/database-testing.md:194
#: ./docs/10.x/database-testing.md:188
#: ./docs/11.x/database-testing.md:250
#: ./docs/master/database-testing.md:243
msgctxt "H4"
msgid "assertModelMissing"
msgstr ""

#: ./docs/8.x/database-testing.md:663
#: ./docs/9.x/database-testing.md:196
#: ./docs/10.x/database-testing.md:190
#: ./docs/11.x/database-testing.md:252
#: ./docs/master/database-testing.md:245
msgctxt "P"
msgid "Assert that a given model does not exist in the database:"
msgstr ""

#: ./docs/8.x/database-testing.md:665
#: ./docs/9.x/database-testing.md:198
#: ./docs/10.x/database-testing.md:192
#: ./docs/11.x/database-testing.md:254
#: ./docs/master/database-testing.md:247
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::factory()->create();\n"
"\n"
"$user->delete();\n"
"\n"
"$this->assertModelMissing($user);"
msgstr ""
