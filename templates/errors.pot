#
msgid ""
msgstr ""

#: docs/10.x/errors.md:block 1 (header)
msgid "Error Handling"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Configuration](#configuration)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[The Exception Handler](#the-exception-handler)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Reporting Exceptions](#reporting-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Exception Log Levels](#exception-log-levels)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Ignoring Exceptions By Type](#ignoring-exceptions-by-type)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Rendering Exceptions](#rendering-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Reportable & Renderable Exceptions](#renderable-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Throttling Reported Exceptions](#throttling-reported-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[HTTP Exceptions](#http-exceptions)"
msgstr ""

#: docs/10.x/errors.md:block 2 (unordered list)
msgid "[Custom HTTP Error Pages](#custom-http-error-pages)"
msgstr ""

#: docs/10.x/errors.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/errors.md:block 5 (paragraph)
msgid "When you start a new Laravel project, error and exception handling is already configured for you. The `App\\Exceptions\\Handler` class is where all exceptions thrown by your application are logged and then rendered to the user. We'll dive deeper into this class throughout this documentation."
msgstr ""

#: docs/10.x/errors.md:block 7 (header)
msgid "Configuration"
msgstr ""

#: docs/10.x/errors.md:block 8 (paragraph)
msgid "The `debug` option in your `config/app.php` configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the `APP_DEBUG` environment variable, which is stored in your `.env` file."
msgstr ""

#: docs/10.x/errors.md:block 9 (paragraph)
msgid "During local development, you should set the `APP_DEBUG` environment variable to `true`. **In your production environment, this value should always be `false`. If the value is set to `true` in production, you risk exposing sensitive configuration values to your application's end users.**"
msgstr ""

#: docs/10.x/errors.md:block 11 (header)
msgid "The Exception Handler"
msgstr ""

#: docs/10.x/errors.md:block 13 (header)
msgid "Reporting Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 14 (paragraph)
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com), or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: docs/10.x/errors.md:block 15 (paragraph)
msgid "If you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will determine what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: docs/10.x/errors.md:block 16 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        // ...\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 17 (paragraph)
msgid "When you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application. If you wish to stop the propagation of the exception to the default logging stack, you may use the `stop` method when defining your reporting callback or return `false` from the callback:"
msgstr ""

#: docs/10.x/errors.md:block 18 (code)
msgid ""
"$this->reportable(function (InvalidOrderException $e) {\n"
"    // ...\n"
"})->stop();\n"
"\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"
msgstr ""

#: docs/10.x/errors.md:block 19 (quote)
msgid "**Note** To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr ""

#: docs/10.x/errors.md:block 21 (header)
msgid "Global Log Context"
msgstr ""

#: docs/10.x/errors.md:block 22 (paragraph)
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by defining a `context` method on your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr ""

#: docs/10.x/errors.md:block 23 (code)
msgid ""
"/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"protected function context(): array\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 25 (header)
msgid "Exception Log Context"
msgstr ""

#: docs/10.x/errors.md:block 26 (paragraph)
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr ""

#: docs/10.x/errors.md:block 27 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Exceptions;\n"
"\n"
"use Exception;\n"
"\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function context(): array\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 29 (header)
msgid "The `report` Helper"
msgstr ""

#: docs/10.x/errors.md:block 30 (paragraph)
msgid "Sometimes you may need to report an exception but continue handling the current request. The `report` helper function allows you to quickly report an exception via the exception handler without rendering an error page to the user:"
msgstr ""

#: docs/10.x/errors.md:block 31 (code)
msgid ""
"public function isValid(string $value): bool\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n"
"\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 33 (header)
msgid "Deduplicating Reported Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 34 (paragraph)
msgid "If you are using the `report` function throughout your application, you may occasionally report the same exception multiple times, creating duplicate entries in your logs."
msgstr ""

#: docs/10.x/errors.md:block 35 (paragraph)
msgid "If you would like to ensure that a single instance of an exception is only ever reported once, you may set the `$withoutDuplicates` property to `true` within your application's `App\\Exceptions\\Handler` class:"
msgstr ""

#: docs/10.x/errors.md:block 36 (code)
msgid ""
"namespace App\\Exceptions;\n"
"\n"
"use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n"
"\n"
"class Handler extends ExceptionHandler\n"
"{\n"
"    /**\n"
"     * Indicates that an exception instance should only be reported once.\n"
"     *\n"
"     * @var bool\n"
"     */\n"
"    protected $withoutDuplicates = true;\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 37 (paragraph)
msgid "Now, when the `report` helper is called with the same instance of an exception, only the first call will be reported:"
msgstr ""

#: docs/10.x/errors.md:block 38 (code)
msgid ""
"$original = new RuntimeException('Whoops!');\n"
"\n"
"report($original); // reported\n"
"\n"
"try {\n"
"    throw $original;\n"
"} catch (Throwable $caught) {\n"
"    report($caught); // ignored\n"
"}\n"
"\n"
"report($original); // ignored\n"
"report($caught); // ignored\n"
msgstr ""

#: docs/10.x/errors.md:block 40 (header)
msgid "Exception Log Levels"
msgstr ""

#: docs/10.x/errors.md:block 41 (paragraph)
msgid "When messages are written to your application's [logs](/docs/{{version}}/logging), the messages are written at a specified [log level](/docs/{{version}}/logging#log-levels), which indicates the severity or importance of the message being logged."
msgstr ""

#: docs/10.x/errors.md:block 42 (paragraph)
msgid "As noted above, even when you register a custom exception reporting callback using the `reportable` method, Laravel will still log the exception using the default logging configuration for the application; however, since the log level can sometimes influence the channels on which a message is logged, you may wish to configure the log level that certain exceptions are logged at."
msgstr ""

#: docs/10.x/errors.md:block 43 (paragraph)
msgid "To accomplish this, you may define a `$levels` property on your application's exception handler. This property should contain an array of exception types and their associated log levels:"
msgstr ""

#: docs/10.x/errors.md:block 44 (code)
msgid ""
"use PDOException;\n"
"use Psr\\Log\\LogLevel;\n"
"\n"
"/**\n"
" * A list of exception types with their corresponding custom log levels.\n"
" *\n"
" * @var array<class-string<\\Throwable>, \\Psr\\Log\\LogLevel::*>\n"
" */\n"
"protected $levels = [\n"
"    PDOException::class => LogLevel::CRITICAL,\n"
"];\n"
msgstr ""

#: docs/10.x/errors.md:block 46 (header)
msgid "Ignoring Exceptions By Type"
msgstr ""

#: docs/10.x/errors.md:block 47 (paragraph)
msgid "When building your application, there will be some types of exceptions you never want to report. To ignore these exceptions, define a `$dontReport` property on your application's exception handler. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: docs/10.x/errors.md:block 48 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"\n"
"/**\n"
" * A list of the exception types that are not reported.\n"
" *\n"
" * @var array<int, class-string<\\Throwable>>\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"
msgstr ""

#: docs/10.x/errors.md:block 49 (paragraph)
msgid "Internally, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP errors or 419 HTTP responses generated by invalid CSRF tokens. If you would like to instruct Laravel to stop ignoring a given type of exception, you may invoke the `stopIgnoring` method within your exception handler's `register` method:"
msgstr ""

#: docs/10.x/errors.md:block 50 (code)
msgid ""
"use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->stopIgnoring(HttpException::class);\n"
"\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 52 (header)
msgid "Rendering Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 53 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this by invoking the `renderable` method within your exception handler."
msgstr ""

#: docs/10.x/errors.md:block 54 (paragraph)
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will determine what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: docs/10.x/errors.md:block 55 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, Request $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 56 (paragraph)
msgid "You may also use the `renderable` method to override the rendering behavior for built-in Laravel or Symfony exceptions such as `NotFoundHttpException`. If the closure given to the `renderable` method does not return a value, Laravel's default exception rendering will be utilized:"
msgstr ""

#: docs/10.x/errors.md:block 57 (code)
msgid ""
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, Request $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 59 (header)
msgid "Reportable & Renderable Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 60 (paragraph)
msgid "Instead of defining custom reporting and rendering behavior in your exception handler's `register` method, you may define `report` and `render` methods directly on your application's exceptions. When these methods exist, they will automatically be called by the framework:"
msgstr ""

#: docs/10.x/errors.md:block 61 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Exceptions;\n"
"\n"
"use Exception;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Http\\Response;\n"
"\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     */\n"
"    public function report(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     */\n"
"    public function render(Request $request): Response\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 62 (paragraph)
msgid "If your exception extends an exception that is already renderable, such as a built-in Laravel or Symfony exception, you may return `false` from the exception's `render` method to render the exception's default HTTP response:"
msgstr ""

#: docs/10.x/errors.md:block 63 (code)
msgid ""
"/**\n"
" * Render the exception into an HTTP response.\n"
" */\n"
"public function render(Request $request): Response|bool\n"
"{\n"
"    if (/** Determine if the exception needs custom rendering */) {\n"
"\n"
"        return response(/* ... */);\n"
"    }\n"
"\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 64 (paragraph)
msgid "If your exception contains custom reporting logic that is only necessary when certain conditions are met, you may need to instruct Laravel to sometimes report the exception using the default exception handling configuration. To accomplish this, you may return `false` from the exception's `report` method:"
msgstr ""

#: docs/10.x/errors.md:block 65 (code)
msgid ""
"/**\n"
" * Report the exception.\n"
" */\n"
"public function report(): bool\n"
"{\n"
"    if (/** Determine if the exception needs custom reporting */) {\n"
"\n"
"        // ...\n"
"\n"
"        return true;\n"
"    }\n"
"\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 66 (quote)
msgid "**Note** You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/10.x/errors.md:block 68 (header)
msgid "Throttling Reported Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 69 (paragraph)
msgid "If your application reports a very large number of exceptions, you may want to throttle how many exceptions are actually logged or sent to your application's external error tracking service."
msgstr ""

#: docs/10.x/errors.md:block 70 (paragraph)
msgid "To take a random sample rate of exceptions, you can return a `Lottery` instance from your exception handler's `throttle` method. If your `App\\Exceptions\\Handler` class does not contain this method, you may simply add it to the class:"
msgstr ""

#: docs/10.x/errors.md:block 71 (code)
msgid ""
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n"
"\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return Lottery::odds(1, 1000);\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 72 (paragraph)
msgid "It is also possible to conditionally sample based on the exception type. If you would like to only sample instances of a specific exception class, you may return a `Lottery` instance only for that class:"
msgstr ""

#: docs/10.x/errors.md:block 73 (code)
msgid ""
"use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n"
"\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof ApiMonitoringException) {\n"
"        return Lottery::odds(1, 1000);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 74 (paragraph)
msgid "You may also rate limit exceptions logged or sent to an external error tracking service by returning a `Limit` instance instead of a `Lottery`. This is useful if you want to protect against sudden bursts of exceptions flooding your logs, for example, when a third-party service used by your application is down:"
msgstr ""

#: docs/10.x/errors.md:block 75 (code)
msgid ""
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n"
"\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 76 (paragraph)
msgid "By default, limits will use the exception's class as the rate limit key. You can customize this by specifying your own key using the `by` method on the `Limit`:"
msgstr ""

#: docs/10.x/errors.md:block 77 (code)
msgid ""
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Throwable;\n"
"\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    if ($e instanceof BroadcastException) {\n"
"        return Limit::perMinute(300)->by($e->getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 78 (paragraph)
msgid "Of course, you may return a mixture of `Lottery` and `Limit` instances for different exceptions:"
msgstr ""

#: docs/10.x/errors.md:block 79 (code)
msgid ""
"use App\\Exceptions\\ApiMonitoringException;\n"
"use Illuminate\\Broadcasting\\BroadcastException;\n"
"use Illuminate\\Cache\\RateLimiting\\Limit;\n"
"use Illuminate\\Support\\Lottery;\n"
"use Throwable;\n"
"\n"
"/**\n"
" * Throttle incoming exceptions.\n"
" */\n"
"protected function throttle(Throwable $e): mixed\n"
"{\n"
"    return match (true) {\n"
"        $e instanceof BroadcastException => Limit::perMinute(300),\n"
"        $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),\n"
"        default => Limit::none(),\n"
"    };\n"
"}\n"
msgstr ""

#: docs/10.x/errors.md:block 81 (header)
msgid "HTTP Exceptions"
msgstr ""

#: docs/10.x/errors.md:block 82 (paragraph)
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401), or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#: docs/10.x/errors.md:block 83 (code)
msgid "abort(404);\n"
msgstr ""

#: docs/10.x/errors.md:block 85 (header)
msgid "Custom HTTP Error Pages"
msgstr ""

#: docs/10.x/errors.md:block 86 (paragraph)
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered for all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr ""

#: docs/10.x/errors.md:block 87 (code)
msgid "<h2>{{ $exception->getMessage() }}</h2>\n"
msgstr ""

#: docs/10.x/errors.md:block 88 (paragraph)
msgid "You may publish Laravel's default error page templates using the `vendor:publish` Artisan command. Once the templates have been published, you may customize them to your liking:"
msgstr ""

#: docs/10.x/errors.md:block 89 (code)
msgid "php artisan vendor:publish --tag=laravel-errors\n"
msgstr ""

#: docs/10.x/errors.md:block 91 (header)
msgid "Fallback HTTP Error Pages"
msgstr ""

#: docs/10.x/errors.md:block 92 (paragraph)
msgid "You may also define a \"fallback\" error page for a given series of HTTP status codes. This page will be rendered if there is not a corresponding page for the specific HTTP status code that occurred. To accomplish this, define a `4xx.blade.php` template and a `5xx.blade.php` template in your application's `resources/views/errors` directory."
msgstr ""

#: docs/8.x/errors.md:block 2 (unordered list)
msgid "[Mapping Exceptions By Type](#mapping-exceptions-by-type)"
msgstr ""

#: docs/8.x/errors.md:block 14 (paragraph)
msgid "All exceptions are handled by the `App\\Exceptions\\Handler` class. This class contains a `register` method where you may register custom exception reporting and rendering callbacks. We'll examine each of these concepts in detail. Exception reporting is used to log exceptions or send them to an external service like [Flare](https://flareapp.io), [Bugsnag](https://bugsnag.com) or [Sentry](https://github.com/getsentry/sentry-laravel). By default, exceptions will be logged based on your [logging](/docs/{{version}}/logging) configuration. However, you are free to log exceptions however you wish."
msgstr ""

#: docs/8.x/errors.md:block 15 (paragraph)
msgid "For example, if you need to report different types of exceptions in different ways, you may use the `reportable` method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will deduce what type of exception the closure reports by examining the type-hint of the closure:"
msgstr ""

#: docs/8.x/errors.md:block 16 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->reportable(function (InvalidOrderException $e) {\n"
"        //\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 18 (code)
msgid ""
"$this->reportable(function (InvalidOrderException $e) {\n"
"    //\n"
"})->stop();\n"
"\n"
"$this->reportable(function (InvalidOrderException $e) {\n"
"    return false;\n"
"});\n"
msgstr ""

#: docs/8.x/errors.md:block 19 (quote)
msgid "{tip} To customize the exception reporting for a given exception, you may also utilize [reportable exceptions](/docs/{{version}}/errors#renderable-exceptions)."
msgstr ""

#: docs/8.x/errors.md:block 22 (paragraph)
msgid "If available, Laravel automatically adds the current user's ID to every exception's log message as contextual data. You may define your own global contextual data by overriding the `context` method of your application's `App\\Exceptions\\Handler` class. This information will be included in every exception's log message written by your application:"
msgstr ""

#: docs/8.x/errors.md:block 23 (code)
msgid ""
"/**\n"
" * Get the default context variables for logging.\n"
" *\n"
" * @return array\n"
" */\n"
"protected function context()\n"
"{\n"
"    return array_merge(parent::context(), [\n"
"        'foo' => 'bar',\n"
"    ]);\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 26 (paragraph)
msgid "While adding context to every log message can be useful, sometimes a particular exception may have unique context that you would like to include in your logs. By defining a `context` method on one of your application's custom exceptions, you may specify any data relevant to that exception that should be added to the exception's log entry:"
msgstr ""

#: docs/8.x/errors.md:block 27 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Exceptions;\n"
"\n"
"use Exception;\n"
"\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Get the exception's context information.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function context()\n"
"    {\n"
"        return ['order_id' => $this->orderId];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 31 (code)
msgid ""
"public function isValid($value)\n"
"{\n"
"    try {\n"
"        // Validate the value...\n"
"    } catch (Throwable $e) {\n"
"        report($e);\n"
"\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 34 (paragraph)
msgid "When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a `$dontReport` property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"
msgstr ""

#: docs/8.x/errors.md:block 35 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"\n"
"/**\n"
" * A list of the exception types that should not be reported.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $dontReport = [\n"
"    InvalidOrderException::class,\n"
"];\n"
msgstr ""

#: docs/8.x/errors.md:block 36 (quote)
msgid "{tip} Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens."
msgstr ""

#: docs/8.x/errors.md:block 39 (paragraph)
msgid "By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the `renderable` method of your exception handler."
msgstr ""

#: docs/8.x/errors.md:block 40 (paragraph)
msgid "The closure passed to the `renderable` method should return an instance of `Illuminate\\Http\\Response`, which may be generated via the `response` helper. Laravel will deduce what type of exception the closure renders by examining the type-hint of the closure:"
msgstr ""

#: docs/8.x/errors.md:block 41 (code)
msgid ""
"use App\\Exceptions\\InvalidOrderException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (InvalidOrderException $e, $request) {\n"
"        return response()->view('errors.invalid-order', [], 500);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 43 (code)
msgid ""
"use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->renderable(function (NotFoundHttpException $e, $request) {\n"
"        if ($request->is('api/*')) {\n"
"            return response()->json([\n"
"                'message' => 'Record not found.'\n"
"            ], 404);\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 46 (paragraph)
msgid "Instead of type-checking exceptions in the exception handler's `register` method, you may define `report` and `render` methods directly on your custom exceptions. When these methods exist, they will be automatically called by the framework:"
msgstr ""

#: docs/8.x/errors.md:block 47 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Exceptions;\n"
"\n"
"use Exception;\n"
"\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(...);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 49 (code)
msgid ""
"/**\n"
" * Render the exception into an HTTP response.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" */\n"
"public function render($request)\n"
"{\n"
"    // Determine if the exception needs custom rendering...\n"
"\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 51 (code)
msgid ""
"/**\n"
" * Report the exception.\n"
" *\n"
" * @return bool|null\n"
" */\n"
"public function report()\n"
"{\n"
"    // Determine if the exception needs custom reporting...\n"
"\n"
"    return false;\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 52 (quote)
msgid "{tip} You may type-hint any required dependencies of the `report` method and they will automatically be injected into the method by Laravel's [service container](/docs/{{version}}/container)."
msgstr ""

#: docs/8.x/errors.md:block 54 (header)
msgid "Mapping Exceptions By Type"
msgstr ""

#: docs/8.x/errors.md:block 55 (paragraph)
msgid "Sometimes, third-party libraries used by your application may throw exceptions that you wish to make [renderable](#renderable-exceptions), but are unable to do so because you do not have control over the definitions of third-party exceptions."
msgstr ""

#: docs/8.x/errors.md:block 56 (paragraph)
msgid "Thankfully, Laravel allows you to conveniently map these exceptions to other exception types that you manage within your application. To accomplish this, call the `map` method from your exception handler's `register` method:"
msgstr ""

#: docs/8.x/errors.md:block 57 (code)
msgid ""
"use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n"
"\n"
"/**\n"
" * Register the exception handling callbacks for the application.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->map(Exception::class, FilesystemException::class);\n"
"}\n"
msgstr ""

#: docs/8.x/errors.md:block 58 (paragraph)
msgid "If you would like more control over the creation of the target exception, you may pass a closure to the `map` method:"
msgstr ""

#: docs/8.x/errors.md:block 59 (code)
msgid ""
"use League\\Flysystem\\Exception;\n"
"use App\\Exceptions\\FilesystemException;\n"
"\n"
"$this->map(fn (Exception $e) => new FilesystemException($e));\n"
msgstr ""

#: docs/8.x/errors.md:block 62 (paragraph)
msgid "Some exceptions describe HTTP error codes from the server. For example, this may be a \"page not found\" error (404), an \"unauthorized error\" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the `abort` helper:"
msgstr ""

#: docs/8.x/errors.md:block 66 (paragraph)
msgid "Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a `resources/views/errors/404.blade.php` view template. This view will be rendered on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The `Symfony\\Component\\HttpKernel\\Exception\\HttpException` instance raised by the `abort` function will be passed to the view as an `$exception` variable:"
msgstr ""

#: docs/9.x/errors.md:block 36 (paragraph)
msgid "To accomplish this, you may define an array of exception types and their associated log levels within the `$levels` property of your application's exception handler:"
msgstr ""

#: docs/9.x/errors.md:block 42 (quote)
msgid "**Note** Behind the scenes, Laravel already ignores some types of errors for you, such as exceptions resulting from 404 HTTP \"not found\" errors or 419 HTTP responses generated by invalid CSRF tokens."
msgstr ""

#: docs/9.x/errors.md:block 53 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Exceptions;\n"
"\n"
"use Exception;\n"
"\n"
"class InvalidOrderException extends Exception\n"
"{\n"
"    /**\n"
"     * Report the exception.\n"
"     *\n"
"     * @return bool|null\n"
"     */\n"
"    public function report()\n"
"    {\n"
"        //\n"
"    }\n"
"\n"
"    /**\n"
"     * Render the exception into an HTTP response.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function render($request)\n"
"    {\n"
"        return response(/* ... */);\n"
"    }\n"
"}\n"
msgstr ""
