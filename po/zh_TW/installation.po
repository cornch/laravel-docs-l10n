msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/installation.pot\n"
"X-Crowdin-File-ID: 89\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-02-13 07:49\n"

#: docs/8.x/installation.md:block 1 (header)
msgid "Installation"
msgstr "安裝"

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Meet Laravel](#meet-laravel)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Why Laravel?](#why-laravel)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Your First Laravel Project](#your-first-laravel-project)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Getting Started On macOS](#getting-started-on-macos)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Getting Started On Windows](#getting-started-on-windows)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Getting Started On Linux](#getting-started-on-linux)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Choosing Your Sail Services](#choosing-your-sail-services)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Installation Via Composer](#installation-via-composer)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Initial Configuration](#initial-configuration)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Environment Based Configuration](#environment-based-configuration)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Directory Configuration](#directory-configuration)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Next Steps](#next-steps)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Laravel The Full Stack Framework](#laravel-the-fullstack-framework)"
msgstr ""

#: docs/8.x/installation.md:block 2 (unordered list)
msgid "[Laravel The API Backend](#laravel-the-api-backend)"
msgstr ""

#: docs/8.x/installation.md:block 3 (paragraph)
msgid "<a name=\"meet-laravel\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 4 (header)
msgid "Meet Laravel"
msgstr "認識 Laravel"

#: docs/8.x/installation.md:block 5 (paragraph)
msgid "Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details."
msgstr "Laravel 是一個擁有豐富優雅語法的 Web App 框架。網頁框架提供了製作網站的起始架構，讓你專心製作讓人驚艷的作品，而我們則幫你處理掉麻煩的小地方。"

#: docs/8.x/installation.md:block 6 (paragraph)
msgid "Laravel strives to provide an amazing developer experience while providing powerful features such as thorough dependency injection, an expressive database abstraction layer, queues and scheduled jobs, unit and integration testing, and more."
msgstr "Laravel 致力於提供優質的開發體驗，並提供多種強大的功能，包含相依性插入 (Dependency Injection)、描述性的資料庫抽象層、佇列與排程任務、單元測試 (Unit Testing) 與整合測試 (Integration Testing)⋯⋯等功能。"

#: docs/8.x/installation.md:block 7 (paragraph)
msgid "Whether you are new to PHP or web frameworks or have years of experience, Laravel is a framework that can grow with you. We'll help you take your first steps as a web developer or give you a boost as you take your expertise to the next level. We can't wait to see what you build."
msgstr "不管你是 PHP 新手還是網頁框架新手、或者你已經有多年的經驗，Laravel 都是可陪伴你進步的框架。我們可以協助你作為網頁開發人員跨出第一步，或是助你一臂之力，讓你的技術更勝一層樓。我們迫不及待想看看你的成果！"

#: docs/8.x/installation.md:block 8 (paragraph)
msgid "<a name=\"why-laravel\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 9 (header)
msgid "Why Laravel?"
msgstr "為什麼選擇 Laravel？"

#: docs/8.x/installation.md:block 10 (paragraph)
msgid "There are a variety of tools and frameworks available to you when building a web application. However, we believe Laravel is the best choice for building modern, full-stack web applications."
msgstr "市面上有很多種用來製作 Web App 的網頁框架了。不過，我們相信 Laravel 是製作現代、全端 Web App 的最佳選擇。"

#: docs/8.x/installation.md:block 11 (header)
msgid "A Progressive Framework"
msgstr "進步的框架"

#: docs/8.x/installation.md:block 12 (paragraph)
msgid "We like to call Laravel a \"progressive\" framework. By that, we mean that Laravel grows with you. If you're just taking your first steps into web development, Laravel's vast library of documentation, guides, and [video tutorials](https://laracasts.com) will help you learn the ropes without becoming overwhelmed."
msgstr "我們喜歡把 Laravel 稱為一個「進步的 (Prograssive)」框架。我們這麼說是因為 Laravel 可以跟你一起進步。若你是初次踏入網頁開發，Laravel 有許多的說明文件、教學、以及[影片教學](https://laracasts.com)可以讓你無痛學習 Laravel。"

#: docs/8.x/installation.md:block 13 (paragraph)
msgid "If you're a senior developer, Laravel gives you robust tools for [dependency injection](/docs/{{version}}/container), [unit testing](/docs/{{version}}/testing), [queues](/docs/{{version}}/queues), [real-time events](/docs/{{version}}/broadcasting), and more. Laravel is fine-tuned for building professional web applications and ready to handle enterprise work loads."
msgstr "若你是資深開發人員，Laravel 提供了強健的[相依性插入](/docs/{{version}}/container)、[單元測試](/docs/{{version}}/testing)、[佇列](/docs/{{version}}/queues)、[即時事件](/docs/{{version}}/broadcasting)⋯⋯等功能。Laravel 為打造專業的 Web App 做了許多微調，並可處理企業級的任務。"

#: docs/8.x/installation.md:block 14 (header)
msgid "A Scalable Framework"
msgstr "可彈性調整規模的框架"

#: docs/8.x/installation.md:block 15 (paragraph)
msgid "Laravel is incredibly scalable. Thanks to the scaling-friendly nature of PHP and Laravel's built-in support for fast, distributed cache systems like Redis, horizontal scaling with Laravel is a breeze. In fact, Laravel applications have been easily scaled to handle hundreds of millions of requests per month."
msgstr "Laravel 對於規模調整非常地有彈性。多虧於 PHP 本身可彈性調整規模的特性、以及 Laravel 內建了對於如 Redis 等快速、分散式快去系統的支援，在 Laravel 中要水平調整規模非常簡單。其實，使用 Laravel 的專案可以輕鬆地調整為能處理每月數百萬筆請求的等級。"

#: docs/8.x/installation.md:block 16 (paragraph)
msgid "Need extreme scaling? Platforms like [Laravel Vapor](https://vapor.laravel.com) allow you to run your Laravel application at nearly limitless scale on AWS's latest serverless technology."
msgstr "需要極限的可調整性？[Laravel Vapor](https://vapor.laravel.com) 等平台可讓你在 AWS 上最新的 Serverless 技術中以幾乎無限可調整性的方式來執行 Laravel 專案。"

#: docs/8.x/installation.md:block 17 (header)
msgid "A Community Framework"
msgstr "社群的框架"

#: docs/8.x/installation.md:block 18 (paragraph)
msgid "Laravel combines the best packages in the PHP ecosystem to offer the most robust and developer friendly framework available. In addition, thousands of talented developers from around the world have [contributed to the framework](https://github.com/laravel/framework). Who knows, maybe you'll even become a Laravel contributor."
msgstr "Laravel 結合了 PHP 生態系統中多個最好的套件來提供強健且對開發人員友善的框架。此外，來自世界各地數千位優秀的開發人員也[參與貢獻了 Laravel 框架](https://github.com/laravel/framework)。或許，你也有機會成為 Laravel 的貢獻者。"

#: docs/8.x/installation.md:block 19 (paragraph)
msgid "<a name=\"your-first-laravel-project\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 20 (header)
msgid "Your First Laravel Project"
msgstr "你的第一個 Laravel 專案"

#: docs/8.x/installation.md:block 21 (paragraph)
msgid "We want it to be as easy as possible to get started with Laravel. There are a variety of options for developing and running a Laravel project on your own computer. While you may wish to explore these options at a later time, Laravel provides [Sail](/docs/{{version}}/sail), a built-in solution for running your Laravel project using [Docker](https://www.docker.com)."
msgstr "我們想要讓開始入門 Laravel 盡可能地簡單。有幾個選項可讓你在電腦上開發並執行 Laravel 專案。你可以稍後再來進一步瞭解這些選項。Laravel 提供了 [Sail](/docs/{{version}}/sail)，Sail 是一個可以使用 [Docker](https://www.docker.com) 來執行 Laravel 專案的內建方法。"

#: docs/8.x/installation.md:block 22 (paragraph)
msgid "Docker is a tool for running applications and services in small, light-weight \"containers\" which do not interfere with your local computer's installed software or configuration. This means you don't have to worry about configuring or setting up complicated development tools such as web servers and databases on your personal computer. To get started, you only need to install [Docker Desktop](https://www.docker.com/products/docker-desktop)."
msgstr "Docker 是一個可以以小型、輕量的「Container (容器)」執行網站與服務的工具。使用 Container 就不會影響到本機電腦上所安裝的軟體或設定。這表示，我們就不需要擔心如何在自己的電腦上設定複雜的開發工具，如網頁伺服器或資料庫。要開始使用 Sail，只需要先安裝 [Docker Desktop](https://www.docker.com/products/docker-desktop)。"

#: docs/8.x/installation.md:block 23 (paragraph)
msgid "Laravel Sail is a light-weight command-line interface for interacting with Laravel's default Docker configuration. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience."
msgstr "Laravel Sail 是一個輕量的命令列介面，可用來操作 Laravel 預設的 Docker 設定。對於使用 PHP、MySQL 與 Redis 來建立 Laravel 專案，Sail 是一個不錯的入門選項，且不需預先具備有關 Docker 的知識。"

#: docs/8.x/installation.md:block 24 (quote)
msgid "{tip} Already a Docker expert? Don't worry! Everything about Sail can be customized using the `docker-compose.yml` file included with Laravel."
msgstr ""

#: docs/8.x/installation.md:block 25 (paragraph)
msgid "<a name=\"getting-started-on-macos\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 26 (header)
msgid "Getting Started On macOS"
msgstr "使用 macOS 入門"

#: docs/8.x/installation.md:block 27 (paragraph)
msgid "If you're developing on a Mac and [Docker Desktop](https://www.docker.com/products/docker-desktop) is already installed, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr "若要 Mac 上進行開發，且已安裝了 [Docker Desktop](https://www.docker.com/products/docker-desktop)，則可以使用一個簡單的終端機指令來建立新的 Laravel 專案。舉例來說，要在一個名為「example-app」的檔案夾內建立新的 Laravel 專案，可以在終端機內執行下列指令："

#: docs/8.x/installation.md:block 28 (code)
msgid "curl -s \"https://laravel.build/example-app\" | bash\n"
msgstr "curl -s \"https://laravel.build/example-app\" | bash\n"

#: docs/8.x/installation.md:block 29 (paragraph)
msgid "Of course, you can change \"example-app\" in this URL to anything you like. The Laravel application's directory will be created within the directory you execute the command from."
msgstr "當然，可以在這個網址中隨意修改「example-app」。Laravel 專案的檔案夾會被建立在執行該指令的檔案夾內。"

#: docs/8.x/installation.md:block 30 (paragraph)
msgid "After the project has been created, you can navigate to the application directory and start Laravel Sail. Laravel Sail provides a simple command-line interface for interacting with Laravel's default Docker configuration:"
msgstr "建立好專案後，就可以打開該檔案夾並開始 Laravel Sail。Laravel Sail 提供了一個可與 Laravel 預設的 Docker 設定互動的簡單的指令列介面："

#: docs/8.x/installation.md:block 31 (code)
msgid "cd example-app\n\n"
"./vendor/bin/sail up\n"
msgstr "cd example-app\n\n"
"./vendor/bin/sail up\n"

#: docs/8.x/installation.md:block 32 (paragraph)
msgid "The first time you run the Sail `up` command, Sail's application containers will be built on your machine. This could take several minutes. **Don't worry, subsequent attempts to start Sail will be much faster.**"
msgstr "首次執行 Sail 的 `up` 指令時，會在你的電腦上建置 Sail 的專案 Container。這個過程可能需要花費數分鐘的時間。**不過別擔心，之後要開始 Sail 會變得很快。**"

#: docs/8.x/installation.md:block 33 (paragraph)
msgid "Once the application's Docker containers have been started, you can access the application in your web browser at: http://localhost."
msgstr "開啟專案的 Docker Container 後，就可以在瀏覽器中開啟 http://localhost 來存取專案網站。"

#: docs/8.x/installation.md:block 34 (quote)
msgid "{tip} To continue learning more about Laravel Sail, review its [complete documentation](/docs/{{version}}/sail)."
msgstr ""

#: docs/8.x/installation.md:block 35 (paragraph)
msgid "<a name=\"getting-started-on-windows\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 36 (header)
msgid "Getting Started On Windows"
msgstr "使用 Windows 入門"

#: docs/8.x/installation.md:block 37 (paragraph)
msgid "Before we create a new Laravel application on your Windows machine, make sure to install [Docker Desktop](https://www.docker.com/products/docker-desktop). Next, you should ensure that Windows Subsystem for Linux 2 (WSL2) is installed and enabled. WSL allows you to run Linux binary executables natively on Windows 10. Information on how to install and enable WSL2 can be found within Microsoft's [developer environment documentation](https://docs.microsoft.com/en-us/windows/wsl/install-win10)."
msgstr "在 Windows 裝置上建立新的 Laravel 專案前，請先確認一下是否有安裝 [Docker Desktop](https://www.docker.com/products/docker-desktop)。接著，請確保有安裝並啟用適用於 Linux 的 Windows 子系統 2 (WSL2)。使用 WSL 就可以在 Windows 10 上原生地執行 Linux 二進位可執行檔。有關如何安裝並啟用 WSL2 的資訊可以在 Microsoft 的《[開發人員環境說明文件](https://docs.microsoft.com/zh-tw/windows/wsl/install-win10)》。"

#: docs/8.x/installation.md:block 38 (quote)
msgid "{tip} After installing and enabling WSL2, you should ensure that Docker Desktop is [configured to use the WSL2 backend](https://docs.docker.com/docker-for-windows/wsl/)."
msgstr ""

#: docs/8.x/installation.md:block 39 (paragraph)
msgid "Next, you are ready to create your first Laravel project. Launch [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab) and begin a new terminal session for your WSL2 Linux operating system. Next, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr "接著，我們就可以來建立你的第一個 Laravel 專案。請先開啟  [Windows Terminal](https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab)，然後為 WSL2 Linux 作業系統開啟一個新的終端機工作階段。接著，可以使用一個簡單的終端機命令來建立新的 Laravel 專案。舉例來說，若要在名為「example-app」的資料夾內建立一個新的 Laravel 專案，請在終端機內執行下列指令："

#: docs/8.x/installation.md:block 40 (code)
msgid "curl -s https://laravel.build/example-app | bash\n"
msgstr "curl -s https://laravel.build/example-app | bash\n"

#: docs/8.x/installation.md:block 47 (header)
msgid "Developing Within WSL2"
msgstr "在 WSL2 中進行開發"

#: docs/8.x/installation.md:block 48 (paragraph)
msgid "Of course, you will need to be able to modify the Laravel application files that were created within your WSL2 installation. To accomplish this, we recommend using Microsoft's [Visual Studio Code](https://code.visualstudio.com) editor and their first-party extension for [Remote Development](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)."
msgstr "當然，我們還需要能修改建立在 WSL2 安裝內的 Laravel 專案檔案。為此，我們建議使用 Microsoft 的 [Visual Studio Code](https://code.visualstudio.com) 編輯器，並使用用於[遠端開發](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)的第一方擴充功能。"

#: docs/8.x/installation.md:block 49 (paragraph)
msgid "Once these tools are installed, you may open any Laravel project by executing the `code .` command from your application's root directory using Windows Terminal."
msgstr "安裝好這些工具後，就可以用 Windows Terminal 在專案根目錄下執行 `code` 命令來開啟 Laravel 專案。"

#: docs/8.x/installation.md:block 50 (paragraph)
msgid "<a name=\"getting-started-on-linux\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 51 (header)
msgid "Getting Started On Linux"
msgstr "使用 Linux 入門"

#: docs/8.x/installation.md:block 52 (paragraph)
msgid "If you're developing on Linux and [Docker Compose](https://docs.docker.com/compose/install/) is already installed, you can use a simple terminal command to create a new Laravel project. For example, to create a new Laravel application in a directory named \"example-app\", you may run the following command in your terminal:"
msgstr "若要 Linux 上進行開發，且已安裝了[Docker Compose](https://docs.docker.com/compose/install)，則可以使用一個簡單的終端機指令來建立新的 Laravel 專案。舉例來說，要在一個名為「example-app」的目錄內建立新的 Laravel 專案，可以在終端機內執行下列指令："

#: docs/8.x/installation.md:block 60 (paragraph)
msgid "<a name=\"choosing-your-sail-services\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 61 (header)
msgid "Choosing Your Sail Services"
msgstr "選擇 Sail 服務"

#: docs/8.x/installation.md:block 62 (paragraph)
msgid "When creating a new Laravel application via Sail, you may use the `with` query string variable to choose which services should be configured in your new application's `docker-compose.yml` file. Available services include `mysql`, `pgsql`, `mariadb`, `redis`, `memcached`, `meilisearch`, `minio`, `selenium`, and `mailhog`:"
msgstr "通過 Sail 建立新的 Laravel 專案時，可以使用 `with` 查詢字串變數來選擇新專案的 `docker-compose.yml` 檔案內要設定哪些服務。可用的服務包含 `mysql`, `pgsql`, `mariadb`, `redis`, `memcached`, `meilisearch`, `minio`, `selenium`, 與 `mailhog`："

#: docs/8.x/installation.md:block 63 (code)
msgid "curl -s \"https://laravel.build/example-app?with=mysql,redis\" | bash\n"
msgstr "curl -s \"https://laravel.build/example-app?with=mysql,redis\" | bash\n"

#: docs/8.x/installation.md:block 64 (paragraph)
msgid "If you do not specify which services you would like configured, a default stack of `mysql`, `redis`, `meilisearch`, `mailhog`, and `selenium` will be configured."
msgstr "若未指定要設定哪些服務，則預設將設定 `mysql`, `redis`, `meilisearch`, `mailhog`, 與 `selenium`。"

#: docs/8.x/installation.md:block 65 (paragraph)
msgid "<a name=\"installation-via-composer\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 66 (header)
msgid "Installation Via Composer"
msgstr "使用 Composer 安裝"

#: docs/8.x/installation.md:block 67 (paragraph)
msgid "If your computer already has PHP and Composer installed, you may create a new Laravel project by using Composer directly. After the application has been created, you may start Laravel's local development server using the Artisan CLI's `serve` command:"
msgstr "若你的電腦上已安裝了 PHP 與 Composer，則可以直接使用 Composer 來建立新的 Laravel 專案。專案建立好後，可以使用 Artisan CLI 的 `serve` 指令來開啟 Laravel 的本機開發伺服器："

#: docs/8.x/installation.md:block 68 (code)
msgid "composer create-project laravel/laravel:^8.0 example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"
msgstr ""

#: docs/8.x/installation.md:block 69 (paragraph)
msgid "<a name=\"the-laravel-installer\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 70 (header)
msgid "The Laravel Installer"
msgstr "Laravel 安裝程式"

#: docs/8.x/installation.md:block 71 (paragraph)
msgid "Or, you may install the Laravel Installer as a global Composer dependency:"
msgstr "或者，也可以將 Laravel 安裝程式安裝為全域的 Composer 相依性套件："

#: docs/8.x/installation.md:block 72 (code)
msgid "composer global require laravel/installer\n\n"
"laravel new example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"
msgstr "composer global require laravel/installer\n\n"
"laravel new example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"

#: docs/8.x/installation.md:block 73 (paragraph)
msgid "Make sure to place Composer's system-wide vendor bin directory in your `$PATH` so the `laravel` executable can be located by your system. This directory exists in different locations based on your operating system; however, some common locations include:"
msgstr "請確保 Composer 的系統等級 vendor bin 資料夾有放在 `$PATH` 中，這樣作業系統才能找到 `laravel` 可執行檔。這個資料夾在不同作業系統上會在不同位置。不過，常見的位置如下："

#: docs/8.x/installation.md:block 75 (unordered list)
msgid "macOS: `$HOME/.composer/vendor/bin`"
msgstr ""

#: docs/8.x/installation.md:block 75 (unordered list)
msgid "Windows: `%USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin`"
msgstr ""

#: docs/8.x/installation.md:block 75 (unordered list)
msgid "GNU / Linux Distributions: `$HOME/.config/composer/vendor/bin` or `$HOME/.composer/vendor/bin`"
msgstr ""

#: docs/8.x/installation.md:block 77 (paragraph)
msgid "For convenience, the Laravel installer can also create a Git repository for your new project. To indicate that you want a Git repository to be created, pass the `--git` flag when creating a new project:"
msgstr "為了方便起見，Laravel 安裝程式也可以幫你的新專案建立 Git 存放庫。要指定 Laravel 安裝程式建立 Git 存放庫，請在建立新專案時傳入 `--git` 旗標："

#: docs/8.x/installation.md:block 78 (code)
msgid "laravel new example-app --git\n"
msgstr "laravel new example-app --git\n"

#: docs/8.x/installation.md:block 79 (paragraph)
msgid "This command will initialize a new Git repository for your project and automatically commit the base Laravel skeleton. The `git` flag assumes you have properly installed and configured Git. You can also use the `--branch` flag to set the initial branch name:"
msgstr "該指令會在你的專案內初始化一個新的 Git 存放庫，並自動簽入 (commit) Laravel 的基礎架構。使用 `git` 旗標時，Laravel 安裝程式會假設你已經有正確安裝並設定了 Git。也可以使用 `--branch` 起標來設定初試的分支名稱："

#: docs/8.x/installation.md:block 80 (code)
msgid "laravel new example-app --git --branch=\"main\"\n"
msgstr "laravel new example-app --git --branch=\"main\"\n"

#: docs/8.x/installation.md:block 81 (paragraph)
msgid "Instead of using the `--git` flag, you may also use the `--github` flag to create a Git repository and also create a corresponding private repository on GitHub:"
msgstr "除了使用 `--git` 旗標之外，也可以使用 `--github` 起標來建立 Git 存放庫，並同時在 GitHub 上建立相對應的私人存放庫："

#: docs/8.x/installation.md:block 82 (code)
msgid "laravel new example-app --github\n"
msgstr "laravel new example-app --github\n"

#: docs/8.x/installation.md:block 83 (paragraph)
msgid "The created repository will then be available at `https://github.com/<your-account>/example-app`. The `github` flag assumes you have properly installed the [GitHub CLI](https://cli.github.com) and are authenticated with GitHub. Additionally, you should have `git` installed and properly configured. If needed, you can pass additional flags that are supported by the GitHub CLI:"
msgstr ""

#: docs/8.x/installation.md:block 84 (code)
msgid "laravel new example-app --github=\"--public\"\n"
msgstr "laravel new example-app --github=\"--public\"\n"

#: docs/8.x/installation.md:block 85 (paragraph)
msgid "You may use the `--organization` flag to create the repository under a specific GitHub organization:"
msgstr "可以使用 `--organization` 旗標來在指定的 GitHub 組織內建立存放庫："

#: docs/8.x/installation.md:block 86 (code)
msgid "laravel new example-app --github=\"--public\" --organization=\"laravel\"\n"
msgstr "laravel new example-app --github=\"--public\" --organization=\"laravel\"\n"

#: docs/8.x/installation.md:block 87 (paragraph)
msgid "<a name=\"initial-configuration\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 88 (header)
msgid "Initial Configuration"
msgstr "初始化設定"

#: docs/8.x/installation.md:block 89 (paragraph)
msgid "All of the configuration files for the Laravel framework are stored in the `config` directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you."
msgstr "Laravel 框架的所有組態設定檔都儲存在 `config` 目錄內。各個選項都有說明文件，歡迎閱讀這些檔案並熟悉可用的選項。"

#: docs/8.x/installation.md:block 90 (paragraph)
msgid "Laravel needs almost no additional configuration out of the box. You are free to get started developing! However, you may wish to review the `config/app.php` file and its documentation. It contains several options such as `timezone` and `locale` that you may wish to change according to your application."
msgstr "Laravel 預設幾乎不需要進行額外設定。你現在已經可以開始開發了！不過，可以先看看 `config/app.php` 檔案以及其中的說明。該檔案中包含了一些我們可能需要依據不同專案進行修改的設定選項，如： `timezone` (時區) 以及 `locale` (語系) 等。"

#: docs/8.x/installation.md:block 91 (paragraph)
msgid "<a name=\"environment-based-configuration\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 92 (header)
msgid "Environment Based Configuration"
msgstr "基於環境的組態設定"

#: docs/8.x/installation.md:block 93 (paragraph)
msgid "Since many of Laravel's configuration option values may vary depending on whether your application is running on your local computer or on a production web server, many important configuration values are defined using the `.env` file that exists at the root of your application."
msgstr "由於許多的 Laravel 設定選項值都會因為專案執行的環境是本機或正式環境而有所不同，因此許多重要的組態設定值都使用 `.env` 檔案來定義，該檔案位在專案根目錄。"

#: docs/8.x/installation.md:block 94 (paragraph)
msgid "Your `.env` file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed."
msgstr "`.env` 檔不應被簽入應用程式的版本控制中，因為每個使用應用程式的開發人員／伺服器都可能需要不同的環境組態。此外，若將 `.env` 檔簽入版本控制的話，當有入侵者取得了版本控制儲存庫的存取權限，就可能會造成安全性風險，因為其中的機敏認證資料都會被暴露。"

#: docs/8.x/installation.md:block 95 (quote)
msgid "{tip} For more information about the `.env` file and environment based configuration, check out the full [configuration documentation](/docs/{{version}}/configuration#environment-configuration)."
msgstr ""

#: docs/8.x/installation.md:block 96 (paragraph)
msgid "<a name=\"directory-configuration\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 97 (header)
msgid "Directory Configuration"
msgstr "目錄組態設定"

#: docs/8.x/installation.md:block 98 (paragraph)
msgid "Laravel should always be served out of the root of the \"web directory\" configured for your web server. You should not attempt to serve a Laravel application out of a subdirectory of the \"web directory\". Attempting to do so could expose sensitive files that exist within your application."
msgstr "Laravel 只能架設在「網頁目錄」的根目錄下。請不要嘗試將 Laravel 專案架設在「網頁目錄」的子目錄下。若嘗試這麼做可能會將專案的機敏檔案暴露在外。"

#: docs/8.x/installation.md:block 99 (paragraph)
msgid "<a name=\"next-steps\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 100 (header)
msgid "Next Steps"
msgstr "接下來"

#: docs/8.x/installation.md:block 101 (paragraph)
msgid "Now that you have created your Laravel project, you may be wondering what to learn next. First, we strongly recommend becoming familiar with how Laravel works by reading the following documentation:"
msgstr "現在，你已經建立好 Laravel 專案了，你可能會想知道接下來該學些什麼。首先，我們強烈建議你先閱讀下列說明文件來熟悉一下 Laravel 是怎麼運作的："

#: docs/8.x/installation.md:block 103 (unordered list)
msgid "[Request Lifecycle](/docs/{{version}}/lifecycle)"
msgstr ""

#: docs/8.x/installation.md:block 103 (unordered list)
msgid "[Configuration](/docs/{{version}}/configuration)"
msgstr ""

#: docs/8.x/installation.md:block 103 (unordered list)
msgid "[Directory Structure](/docs/{{version}}/structure)"
msgstr ""

#: docs/8.x/installation.md:block 103 (unordered list)
msgid "[Service Container](/docs/{{version}}/container)"
msgstr ""

#: docs/8.x/installation.md:block 103 (unordered list)
msgid "[Facades](/docs/{{version}}/facades)"
msgstr ""

#: docs/8.x/installation.md:block 105 (paragraph)
msgid "How you want to use Laravel will also dictate the next steps on your journey. There are a variety of ways to use Laravel, and we'll explore two primary use cases for the framework below."
msgstr "你想要如何使用 Laravel 也會影響學習的下一步。使用 Laravel 的方法不只一種，我們稍後也會來探索一下幾種使用 Laravel 的主要方法。"

#: docs/8.x/installation.md:block 106 (paragraph)
msgid "<a name=\"laravel-the-fullstack-framework\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 107 (header)
msgid "Laravel The Full Stack Framework"
msgstr "Laravel - 全端框架"

#: docs/8.x/installation.md:block 108 (paragraph)
msgid "Laravel may serve as a full stack framework. By \"full stack\" framework we mean that you are going to use Laravel to route requests to your application and render your frontend via [Blade templates](/docs/{{version}}/blade) or using a single-page application hybrid technology like [Inertia.js](https://inertiajs.com). This is the most common way to use the Laravel framework."
msgstr "可以將 Laravel 當作全端框架使用。我們說「全端框架」是指你會使用 Laravel 來將請求路由到專案中，並使用 [Blade 樣板](/docs/{{version}}/blade)來轉譯前端界面。或是使用如 [Inertia.js](https://inertiajs.com) 這類的 SPA (單頁面應用程式，Single-Page Application) 混合技術。這種使用 Laravel 的方法是最常見的。"

#: docs/8.x/installation.md:block 109 (paragraph)
msgid "If this is how you plan to use Laravel, you may want to check out our documentation on [routing](/docs/{{version}}/routing), [views](/docs/{{version}}/views), or the [Eloquent ORM](/docs/{{version}}/eloquent). In addition, you might be interested in learning about community packages like [Livewire](https://laravel-livewire.com) and [Inertia.js](https://inertiajs.com). These packages allow you to use Laravel as a full-stack framework while enjoying many of the UI benefits provided by single-page JavaScript applications."
msgstr "若你就是這麼打算使用 Laravel 的，則你可能會想看看有關[路由](/docs/{{version}}/routing)、[View](/docs/{{version}}/views)、或 [Eloquent ORM](/docs/{{version}}/eloquent) 的說明文件。此外，你可能也有興趣想了解一下如 [Livewire](https://laravel-livewire.com) 或 [Inertia.js](https://inertiajs.com) 等由社群開發的套件。這些套件能讓你在使用 Laravel 作為全端框架的同時，還能享受到許多由 JavaScript SPA 提供的 UI 的好處。"

#: docs/8.x/installation.md:block 110 (paragraph)
msgid "If you are using Laravel as a full stack framework, we also strongly encourage you to learn how to compile your application's CSS and JavaScript using [Laravel Mix](/docs/{{version}}/mix)."
msgstr "若你要使用 Laravel 作為全端框架，我們也強烈建議你瞭解一下如何使用 [Laravel Mix](/docs/{{version}}/mix) 來編譯網站的 CSS 與 JavaScript。"

#: docs/8.x/installation.md:block 111 (quote)
msgid "{tip} If you want to get a head start building your application, check out one of our official [application starter kits](/docs/{{version}}/starter-kits)."
msgstr ""

#: docs/8.x/installation.md:block 112 (paragraph)
msgid "<a name=\"laravel-the-api-backend\"></a>"
msgstr ""

#: docs/8.x/installation.md:block 113 (header)
msgid "Laravel The API Backend"
msgstr "Laravel - API 後端"

#: docs/8.x/installation.md:block 114 (paragraph)
msgid "Laravel may also serve as an API backend to a JavaScript single-page application or mobile application. For example, you might use Laravel as an API backend for your [Next.js](https://nextjs.org) application. In this context, you may use Laravel to provide [authentication](/docs/{{version}}/sanctum) and data storage / retrieval for your application, while also taking advantage of Laravel's powerful services such as queues, emails, notifications, and more."
msgstr "也可以將 Laravel 作為 API 後端來提供給 JavaScript SPA 或手機 App 使用。舉例來說，你可以使用 Laravel 作為 [Next.js](https://nextjs.org) App 的 API 後端來使用。在這種情況下，你可以使用 Laravel 來提供[登入認證](/docs/{{version}}/sanctum)，並為 App 提供資料的儲存、取得功能，同時也能使用到 Laravel 的一些如佇列、E-Mail、通知⋯⋯等強大的功能。"

#: docs/8.x/installation.md:block 115 (paragraph)
msgid "If this is how you plan to use Laravel, you may want to check out our documentation on [routing](/docs/{{version}}/routing), [Laravel Sanctum](/docs/{{version}}/sanctum), and the [Eloquent ORM](/docs/{{version}}/eloquent)."
msgstr "若你打算這樣使用 Laravel，則可以看看有關[路由](/docs/{{version}}/routing)、[Laravel Sanctum](/docs/{{version}}/sanctum)、以及 [Eloquent ORM](/docs/{{version}}/eloquent) 的說明文件。"

#: docs/8.x/installation.md:block 116 (quote)
msgid "{tip} Need a head start scaffolding your Laravel backend and Next.js frontend? Laravel Breeze offers an [API stack](/docs/{{version}}/starter-kits#breeze-and-next) as well as a [Next.js frontend implementation](https://github.com/laravel/breeze-next) so you can get started in minutes."
msgstr ""

#: docs/9.x/installation.md:block 65 (paragraph)
msgid "You may instruct Sail to install a default [Devcontainer](/docs/{{version}}/sail#using-devcontainers) by adding the `devcontainer` parameter to the URL:"
msgstr "只要在網址後加上 `devcontainer` 參數，就可以讓 Sail 安裝一個預設的 [Devcontainer](/docs/{{version}}/sail#using-devcontainers)："

#: docs/9.x/installation.md:block 66 (code)
msgid "curl -s \"https://laravel.build/example-app?with=mysql,redis&devcontainer\" | bash\n"
msgstr "curl -s \"https://laravel.build/example-app?with=mysql,redis&devcontainer\" | bash\n"

#: docs/9.x/installation.md:block 70 (code)
msgid "composer create-project laravel/laravel example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"
msgstr "composer create-project laravel/laravel example-app\n\n"
"cd example-app\n\n"
"php artisan serve\n"

