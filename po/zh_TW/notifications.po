msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/notifications.pot\n"
"X-Crowdin-File-ID: 109\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 05:57\n"

#: ./docs/8.x/notifications.md:1
#: ./docs/9.x/notifications.md:1
#: ./docs/10.x/notifications.md:1
#: ./docs/11.x/notifications.md:1
#: ./docs/master/notifications.md:1
msgid "Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:3
#: ./docs/9.x/notifications.md:3
#: ./docs/10.x/notifications.md:3
#: ./docs/11.x/notifications.md:3
#: ./docs/master/notifications.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/notifications.md:4
#: ./docs/9.x/notifications.md:4
#: ./docs/10.x/notifications.md:4
#: ./docs/11.x/notifications.md:4
#: ./docs/master/notifications.md:4
msgid "[Generating Notifications](#generating-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:5
#: ./docs/9.x/notifications.md:5
#: ./docs/10.x/notifications.md:5
#: ./docs/11.x/notifications.md:5
#: ./docs/master/notifications.md:5
msgid "[Sending Notifications](#sending-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:6
#: ./docs/11.x/notifications.md:6
#: ./docs/master/notifications.md:6
msgid "[Using the Notifiable Trait](#using-the-notifiable-trait)"
msgstr ""

#: ./docs/8.x/notifications.md:6
#: ./docs/9.x/notifications.md:6
msgid "[Using The Notifiable Trait](#using-the-notifiable-trait)"
msgstr ""

#: ./docs/10.x/notifications.md:7
#: ./docs/11.x/notifications.md:7
#: ./docs/master/notifications.md:7
msgid "[Using the Notification Facade](#using-the-notification-facade)"
msgstr ""

#: ./docs/8.x/notifications.md:7
#: ./docs/9.x/notifications.md:7
msgid "[Using The Notification Facade](#using-the-notification-facade)"
msgstr ""

#: ./docs/8.x/notifications.md:8
#: ./docs/9.x/notifications.md:8
#: ./docs/10.x/notifications.md:8
#: ./docs/11.x/notifications.md:8
#: ./docs/master/notifications.md:8
msgid "[Specifying Delivery Channels](#specifying-delivery-channels)"
msgstr ""

#: ./docs/8.x/notifications.md:9
#: ./docs/9.x/notifications.md:9
#: ./docs/10.x/notifications.md:9
#: ./docs/11.x/notifications.md:9
#: ./docs/master/notifications.md:9
msgid "[Queueing Notifications](#queueing-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:10
#: ./docs/9.x/notifications.md:10
#: ./docs/10.x/notifications.md:10
#: ./docs/11.x/notifications.md:10
#: ./docs/master/notifications.md:10
msgid "[On-Demand Notifications](#on-demand-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:11
#: ./docs/9.x/notifications.md:11
#: ./docs/10.x/notifications.md:11
#: ./docs/11.x/notifications.md:11
#: ./docs/master/notifications.md:11
msgid "[Mail Notifications](#mail-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:12
#: ./docs/9.x/notifications.md:12
#: ./docs/10.x/notifications.md:12
#: ./docs/11.x/notifications.md:12
#: ./docs/master/notifications.md:12
msgid "[Formatting Mail Messages](#formatting-mail-messages)"
msgstr ""

#: ./docs/10.x/notifications.md:13
#: ./docs/11.x/notifications.md:13
#: ./docs/master/notifications.md:13
msgid "[Customizing the Sender](#customizing-the-sender)"
msgstr ""

#: ./docs/8.x/notifications.md:13
#: ./docs/9.x/notifications.md:13
msgid "[Customizing The Sender](#customizing-the-sender)"
msgstr ""

#: ./docs/10.x/notifications.md:14
#: ./docs/11.x/notifications.md:14
#: ./docs/master/notifications.md:14
msgid "[Customizing the Recipient](#customizing-the-recipient)"
msgstr ""

#: ./docs/8.x/notifications.md:14
#: ./docs/9.x/notifications.md:14
msgid "[Customizing The Recipient](#customizing-the-recipient)"
msgstr ""

#: ./docs/10.x/notifications.md:15
#: ./docs/11.x/notifications.md:15
#: ./docs/master/notifications.md:15
msgid "[Customizing the Subject](#customizing-the-subject)"
msgstr ""

#: ./docs/8.x/notifications.md:15
#: ./docs/9.x/notifications.md:15
msgid "[Customizing The Subject](#customizing-the-subject)"
msgstr ""

#: ./docs/10.x/notifications.md:16
#: ./docs/11.x/notifications.md:16
#: ./docs/master/notifications.md:16
msgid "[Customizing the Mailer](#customizing-the-mailer)"
msgstr ""

#: ./docs/8.x/notifications.md:16
#: ./docs/9.x/notifications.md:16
msgid "[Customizing The Mailer](#customizing-the-mailer)"
msgstr ""

#: ./docs/10.x/notifications.md:17
#: ./docs/11.x/notifications.md:17
#: ./docs/master/notifications.md:17
msgid "[Customizing the Templates](#customizing-the-templates)"
msgstr ""

#: ./docs/8.x/notifications.md:17
#: ./docs/9.x/notifications.md:17
msgid "[Customizing The Templates](#customizing-the-templates)"
msgstr ""

#: ./docs/8.x/notifications.md:18
#: ./docs/9.x/notifications.md:18
#: ./docs/10.x/notifications.md:18
#: ./docs/11.x/notifications.md:18
#: ./docs/master/notifications.md:18
msgid "[Attachments](#mail-attachments)"
msgstr ""

#: ./docs/10.x/notifications.md:19
#: ./docs/11.x/notifications.md:19
#: ./docs/master/notifications.md:19
msgid "[Adding Tags and Metadata](#adding-tags-metadata)"
msgstr ""

#: ./docs/8.x/notifications.md:19
#: ./docs/9.x/notifications.md:21
#: ./docs/10.x/notifications.md:21
#: ./docs/11.x/notifications.md:21
#: ./docs/master/notifications.md:21
msgid "[Using Mailables](#using-mailables)"
msgstr ""

#: ./docs/9.x/notifications.md:19
msgid "[Adding Tags & Metadata](#adding-tags-metadata)"
msgstr ""

#: ./docs/10.x/notifications.md:20
#: ./docs/11.x/notifications.md:20
#: ./docs/master/notifications.md:20
msgid "[Customizing the Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: ./docs/8.x/notifications.md:20
#: ./docs/9.x/notifications.md:22
#: ./docs/10.x/notifications.md:22
#: ./docs/11.x/notifications.md:22
#: ./docs/master/notifications.md:22
msgid "[Previewing Mail Notifications](#previewing-mail-notifications)"
msgstr ""

#: ./docs/9.x/notifications.md:20
msgid "[Customizing The Symfony Message](#customizing-the-symfony-message)"
msgstr ""

#: ./docs/8.x/notifications.md:21
#: ./docs/9.x/notifications.md:23
#: ./docs/10.x/notifications.md:23
#: ./docs/11.x/notifications.md:23
#: ./docs/master/notifications.md:23
msgid "[Markdown Mail Notifications](#markdown-mail-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:22
#: ./docs/9.x/notifications.md:24
msgid "[Generating The Message](#generating-the-message)"
msgstr ""

#: ./docs/8.x/notifications.md:23
#: ./docs/9.x/notifications.md:25
msgid "[Writing The Message](#writing-the-message)"
msgstr ""

#: ./docs/10.x/notifications.md:24
#: ./docs/11.x/notifications.md:24
#: ./docs/master/notifications.md:24
msgid "[Generating the Message](#generating-the-message)"
msgstr ""

#: ./docs/8.x/notifications.md:24
#: ./docs/9.x/notifications.md:26
msgid "[Customizing The Components](#customizing-the-components)"
msgstr ""

#: ./docs/10.x/notifications.md:25
#: ./docs/11.x/notifications.md:25
#: ./docs/master/notifications.md:25
msgid "[Writing the Message](#writing-the-message)"
msgstr ""

#: ./docs/8.x/notifications.md:25
#: ./docs/9.x/notifications.md:27
#: ./docs/10.x/notifications.md:27
#: ./docs/11.x/notifications.md:27
#: ./docs/master/notifications.md:27
msgid "[Database Notifications](#database-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:26
#: ./docs/11.x/notifications.md:26
#: ./docs/master/notifications.md:26
msgid "[Customizing the Components](#customizing-the-components)"
msgstr ""

#: ./docs/8.x/notifications.md:26
#: ./docs/9.x/notifications.md:28
#: ./docs/10.x/notifications.md:28
#: ./docs/11.x/notifications.md:28
#: ./docs/master/notifications.md:28
msgid "[Prerequisites](#database-prerequisites)"
msgstr ""

#: ./docs/8.x/notifications.md:27
#: ./docs/9.x/notifications.md:29
#: ./docs/10.x/notifications.md:29
#: ./docs/11.x/notifications.md:29
#: ./docs/master/notifications.md:29
msgid "[Formatting Database Notifications](#formatting-database-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:28
#: ./docs/9.x/notifications.md:30
msgid "[Accessing The Notifications](#accessing-the-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:29
#: ./docs/9.x/notifications.md:31
msgid "[Marking Notifications As Read](#marking-notifications-as-read)"
msgstr ""

#: ./docs/10.x/notifications.md:30
#: ./docs/11.x/notifications.md:30
#: ./docs/master/notifications.md:30
msgid "[Accessing the Notifications](#accessing-the-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:30
#: ./docs/9.x/notifications.md:32
#: ./docs/10.x/notifications.md:32
#: ./docs/11.x/notifications.md:32
#: ./docs/master/notifications.md:32
msgid "[Broadcast Notifications](#broadcast-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:31
#: ./docs/11.x/notifications.md:31
#: ./docs/master/notifications.md:31
msgid "[Marking Notifications as Read](#marking-notifications-as-read)"
msgstr ""

#: ./docs/8.x/notifications.md:31
#: ./docs/9.x/notifications.md:33
#: ./docs/10.x/notifications.md:33
#: ./docs/11.x/notifications.md:33
#: ./docs/master/notifications.md:33
msgid "[Prerequisites](#broadcast-prerequisites)"
msgstr ""

#: ./docs/8.x/notifications.md:32
#: ./docs/9.x/notifications.md:34
#: ./docs/10.x/notifications.md:34
#: ./docs/11.x/notifications.md:34
#: ./docs/master/notifications.md:34
msgid "[Formatting Broadcast Notifications](#formatting-broadcast-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:33
#: ./docs/9.x/notifications.md:35
msgid "[Listening For Notifications](#listening-for-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:34
#: ./docs/9.x/notifications.md:36
#: ./docs/10.x/notifications.md:36
#: ./docs/11.x/notifications.md:36
#: ./docs/master/notifications.md:36
msgid "[SMS Notifications](#sms-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:35
#: ./docs/11.x/notifications.md:35
#: ./docs/master/notifications.md:35
msgid "[Listening for Notifications](#listening-for-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:35
#: ./docs/9.x/notifications.md:37
#: ./docs/10.x/notifications.md:37
#: ./docs/11.x/notifications.md:37
#: ./docs/master/notifications.md:37
msgid "[Prerequisites](#sms-prerequisites)"
msgstr ""

#: ./docs/8.x/notifications.md:36
#: ./docs/9.x/notifications.md:38
#: ./docs/10.x/notifications.md:38
#: ./docs/11.x/notifications.md:38
#: ./docs/master/notifications.md:38
msgid "[Formatting SMS Notifications](#formatting-sms-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:37
#: ./docs/9.x/notifications.md:39
msgid "[Formatting Shortcode Notifications](#formatting-shortcode-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:38
#: ./docs/9.x/notifications.md:40
msgid "[Customizing The \"From\" Number](#customizing-the-from-number)"
msgstr ""

#: ./docs/10.x/notifications.md:39
#: ./docs/11.x/notifications.md:39
#: ./docs/master/notifications.md:39
msgid "[Unicode Content](#unicode-content)"
msgstr ""

#: ./docs/8.x/notifications.md:39
#: ./docs/9.x/notifications.md:41
msgid "[Adding A Client Reference](#adding-a-client-reference)"
msgstr ""

#: ./docs/10.x/notifications.md:40
#: ./docs/11.x/notifications.md:40
#: ./docs/master/notifications.md:40
msgid "[Customizing the \"From\" Number](#customizing-the-from-number)"
msgstr ""

#: ./docs/8.x/notifications.md:40
#: ./docs/9.x/notifications.md:42
#: ./docs/10.x/notifications.md:42
#: ./docs/11.x/notifications.md:42
#: ./docs/master/notifications.md:42
msgid "[Routing SMS Notifications](#routing-sms-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:41
#: ./docs/11.x/notifications.md:41
#: ./docs/master/notifications.md:41
msgid "[Adding a Client Reference](#adding-a-client-reference)"
msgstr ""

#: ./docs/8.x/notifications.md:41
#: ./docs/9.x/notifications.md:43
#: ./docs/10.x/notifications.md:43
#: ./docs/11.x/notifications.md:43
#: ./docs/master/notifications.md:43
msgid "[Slack Notifications](#slack-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:42
#: ./docs/9.x/notifications.md:44
#: ./docs/10.x/notifications.md:44
#: ./docs/11.x/notifications.md:44
#: ./docs/master/notifications.md:44
msgid "[Prerequisites](#slack-prerequisites)"
msgstr ""

#: ./docs/8.x/notifications.md:43
#: ./docs/9.x/notifications.md:45
#: ./docs/10.x/notifications.md:45
#: ./docs/11.x/notifications.md:45
#: ./docs/master/notifications.md:45
msgid "[Formatting Slack Notifications](#formatting-slack-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:44
#: ./docs/9.x/notifications.md:46
msgid "[Slack Attachments](#slack-attachments)"
msgstr ""

#: ./docs/8.x/notifications.md:45
#: ./docs/9.x/notifications.md:47
#: ./docs/10.x/notifications.md:47
#: ./docs/11.x/notifications.md:47
#: ./docs/master/notifications.md:47
msgid "[Routing Slack Notifications](#routing-slack-notifications)"
msgstr ""

#: ./docs/10.x/notifications.md:46
#: ./docs/11.x/notifications.md:46
#: ./docs/master/notifications.md:46
msgid "[Slack Interactivity](#slack-interactivity)"
msgstr ""

#: ./docs/8.x/notifications.md:46
#: ./docs/9.x/notifications.md:48
#: ./docs/10.x/notifications.md:49
#: ./docs/11.x/notifications.md:49
#: ./docs/master/notifications.md:49
msgid "[Localizing Notifications](#localizing-notifications)"
msgstr ""

#: ./docs/8.x/notifications.md:47
#: ./docs/9.x/notifications.md:49
#: ./docs/10.x/notifications.md:51
#: ./docs/11.x/notifications.md:51
#: ./docs/master/notifications.md:51
msgid "[Notification Events](#notification-events)"
msgstr ""

#: ./docs/10.x/notifications.md:48
#: ./docs/11.x/notifications.md:48
#: ./docs/master/notifications.md:48
msgid "[Notifying External Slack Workspaces](#notifying-external-slack-workspaces)"
msgstr ""

#: ./docs/8.x/notifications.md:48
#: ./docs/9.x/notifications.md:50
#: ./docs/10.x/notifications.md:52
#: ./docs/11.x/notifications.md:52
#: ./docs/master/notifications.md:52
msgid "[Custom Channels](#custom-channels)"
msgstr ""

#: ./docs/10.x/notifications.md:50
#: ./docs/11.x/notifications.md:50
#: ./docs/master/notifications.md:50
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/8.x/notifications.md:50
#: ./docs/9.x/notifications.md:52
#: ./docs/10.x/notifications.md:54
#: ./docs/11.x/notifications.md:54
#: ./docs/master/notifications.md:54
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:51
#: ./docs/9.x/notifications.md:53
#: ./docs/10.x/notifications.md:55
#: ./docs/11.x/notifications.md:55
#: ./docs/master/notifications.md:55
msgid "Introduction"
msgstr ""

#: ./docs/8.x/notifications.md:53
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notification over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#: ./docs/8.x/notifications.md:55
#: ./docs/9.x/notifications.md:57
#: ./docs/10.x/notifications.md:59
#: ./docs/11.x/notifications.md:59
#: ./docs/master/notifications.md:59
msgid "Typically, notifications should be short, informational messages that notify users of something that occurred in your application. For example, if you are writing a billing application, you might send an \"Invoice Paid\" notification to your users via the email and SMS channels."
msgstr ""

#: ./docs/9.x/notifications.md:55
#: ./docs/10.x/notifications.md:57
#: ./docs/11.x/notifications.md:57
#: ./docs/master/notifications.md:57
msgid "In addition to support for [sending email](/docs/{{version}}/mail), Laravel provides support for sending notifications across a variety of delivery channels, including email, SMS (via [Vonage](https://www.vonage.com/communications-apis/), formerly known as Nexmo), and [Slack](https://slack.com). In addition, a variety of [community built notification channels](https://laravel-notification-channels.com/about/#suggesting-a-new-channel) have been created to send notifications over dozens of different channels! Notifications may also be stored in a database so they may be displayed in your web interface."
msgstr ""

#: ./docs/8.x/notifications.md:57
#: ./docs/9.x/notifications.md:59
#: ./docs/10.x/notifications.md:61
#: ./docs/11.x/notifications.md:61
#: ./docs/master/notifications.md:61
#~ msgctxt "P"
#~ msgid "<a name=\"generating-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:58
#: ./docs/9.x/notifications.md:60
#: ./docs/10.x/notifications.md:62
#: ./docs/11.x/notifications.md:62
#: ./docs/master/notifications.md:62
msgid "Generating Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:60
#: ./docs/9.x/notifications.md:62
#: ./docs/10.x/notifications.md:64
#: ./docs/11.x/notifications.md:64
#: ./docs/master/notifications.md:64
msgid "In Laravel, each notification is represented by a single class that is typically stored in the `app/Notifications` directory. Don't worry if you don't see this directory in your application - it will be created for you when you run the `make:notification` Artisan command:"
msgstr ""

#: ./docs/8.x/notifications.md:62
#: ./docs/9.x/notifications.md:64
#: ./docs/10.x/notifications.md:66
#: ./docs/11.x/notifications.md:66
#: ./docs/master/notifications.md:66
msgid "php artisan make:notification InvoicePaid"
msgstr ""

#: ./docs/8.x/notifications.md:64
#: ./docs/9.x/notifications.md:68
#: ./docs/10.x/notifications.md:70
#: ./docs/11.x/notifications.md:70
#: ./docs/master/notifications.md:70
msgid "This command will place a fresh notification class in your `app/Notifications` directory. Each notification class contains a `via` method and a variable number of message building methods, such as `toMail` or `toDatabase`, that convert the notification to a message tailored for that particular channel."
msgstr ""

#: ./docs/8.x/notifications.md:66
#: ./docs/9.x/notifications.md:70
#: ./docs/10.x/notifications.md:72
#: ./docs/11.x/notifications.md:72
#: ./docs/master/notifications.md:72
#~ msgctxt "P"
#~ msgid "<a name=\"sending-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:67
#: ./docs/9.x/notifications.md:71
#: ./docs/10.x/notifications.md:73
#: ./docs/11.x/notifications.md:73
#: ./docs/master/notifications.md:73
msgid "Sending Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:69
#: ./docs/9.x/notifications.md:73
#: ./docs/10.x/notifications.md:75
#: ./docs/11.x/notifications.md:75
#: ./docs/master/notifications.md:75
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-notifiable-trait\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:70
#: ./docs/9.x/notifications.md:74
msgid "Using The Notifiable Trait"
msgstr ""

#: ./docs/8.x/notifications.md:72
#: ./docs/9.x/notifications.md:76
#: ./docs/10.x/notifications.md:78
#: ./docs/11.x/notifications.md:78
#: ./docs/master/notifications.md:78
msgid "Notifications may be sent in two ways: using the `notify` method of the `Notifiable` trait or using the `Notification` [facade](/docs/{{version}}/facades). The `Notifiable` trait is included on your application's `App\\Models\\User` model by default:"
msgstr ""

#: ./docs/8.x/notifications.md:74
#: ./docs/9.x/notifications.md:78
#: ./docs/10.x/notifications.md:80
#: ./docs/11.x/notifications.md:80
#: ./docs/master/notifications.md:80
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:76
#: ./docs/11.x/notifications.md:76
#: ./docs/master/notifications.md:76
msgid "Using the Notifiable Trait"
msgstr ""

#: ./docs/8.x/notifications.md:86
#: ./docs/9.x/notifications.md:90
#: ./docs/10.x/notifications.md:92
#: ./docs/11.x/notifications.md:92
#: ./docs/master/notifications.md:92
msgid "The `notify` method that is provided by this trait expects to receive a notification instance:"
msgstr ""

#: ./docs/8.x/notifications.md:88
#: ./docs/9.x/notifications.md:92
#: ./docs/10.x/notifications.md:94
#: ./docs/11.x/notifications.md:94
#: ./docs/master/notifications.md:94
msgid "use App\\Notifications\\InvoicePaid;\n\n"
"$user->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/8.x/notifications.md:92
#: ./docs/9.x/notifications.md:97
#: ./docs/10.x/notifications.md:99
#: ./docs/11.x/notifications.md:99
#: ./docs/master/notifications.md:99
msgid "Remember, you may use the `Notifiable` trait on any of your models. You are not limited to only including it on your `User` model."
msgstr ""

#: ./docs/8.x/notifications.md:94
#: ./docs/9.x/notifications.md:99
#: ./docs/10.x/notifications.md:101
#: ./docs/11.x/notifications.md:101
#: ./docs/master/notifications.md:101
#~ msgctxt "P"
#~ msgid "<a name=\"using-the-notification-facade\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:95
#: ./docs/9.x/notifications.md:100
msgid "Using The Notification Facade"
msgstr ""

#: ./docs/8.x/notifications.md:97
#: ./docs/9.x/notifications.md:102
#: ./docs/10.x/notifications.md:104
#: ./docs/11.x/notifications.md:104
#: ./docs/master/notifications.md:104
msgid "Alternatively, you may send notifications via the `Notification` [facade](/docs/{{version}}/facades). This approach is useful when you need to send a notification to multiple notifiable entities such as a collection of users. To send notifications using the facade, pass all of the notifiable entities and the notification instance to the `send` method:"
msgstr ""

#: ./docs/8.x/notifications.md:99
#: ./docs/9.x/notifications.md:104
#: ./docs/10.x/notifications.md:106
#: ./docs/11.x/notifications.md:106
#: ./docs/master/notifications.md:106
msgid "use Illuminate\\Support\\Facades\\Notification;\n\n"
"Notification::send($users, new InvoicePaid($invoice));"
msgstr ""

#: ./docs/10.x/notifications.md:102
#: ./docs/11.x/notifications.md:102
#: ./docs/master/notifications.md:102
msgid "Using the Notification Facade"
msgstr ""

#: ./docs/8.x/notifications.md:103
#: ./docs/9.x/notifications.md:108
#: ./docs/10.x/notifications.md:110
#: ./docs/11.x/notifications.md:110
#: ./docs/master/notifications.md:110
msgid "You can also send notifications immediately using the `sendNow` method. This method will send the notification immediately even if the notification implements the `ShouldQueue` interface:"
msgstr ""

#: ./docs/8.x/notifications.md:105
#: ./docs/9.x/notifications.md:110
#: ./docs/10.x/notifications.md:112
#: ./docs/11.x/notifications.md:112
#: ./docs/master/notifications.md:112
msgid "Notification::sendNow($developers, new DeploymentCompleted($deployment));"
msgstr ""

#: ./docs/8.x/notifications.md:107
#: ./docs/9.x/notifications.md:112
#: ./docs/10.x/notifications.md:114
#: ./docs/11.x/notifications.md:114
#: ./docs/master/notifications.md:114
#~ msgctxt "P"
#~ msgid "<a name=\"specifying-delivery-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:108
#: ./docs/9.x/notifications.md:113
#: ./docs/10.x/notifications.md:115
#: ./docs/11.x/notifications.md:115
#: ./docs/master/notifications.md:115
msgid "Specifying Delivery Channels"
msgstr ""

#: ./docs/8.x/notifications.md:110
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `nexmo`, and `slack` channels."
msgstr ""

#: ./docs/8.x/notifications.md:112
#: ./docs/9.x/notifications.md:118
#: ./docs/10.x/notifications.md:120
#: ./docs/11.x/notifications.md:120
#: ./docs/master/notifications.md:120
msgid "If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven [Laravel Notification Channels website](http://laravel-notification-channels.com)."
msgstr ""

#: ./docs/8.x/notifications.md:114
#: ./docs/9.x/notifications.md:120
#: ./docs/10.x/notifications.md:122
#: ./docs/11.x/notifications.md:122
#: ./docs/master/notifications.md:122
msgid "The `via` method receives a `$notifiable` instance, which will be an instance of the class to which the notification is being sent. You may use `$notifiable` to determine which channels the notification should be delivered on:"
msgstr ""

#: ./docs/9.x/notifications.md:115
#: ./docs/10.x/notifications.md:117
#: ./docs/11.x/notifications.md:117
#: ./docs/master/notifications.md:117
msgid "Every notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `mail`, `database`, `broadcast`, `vonage`, and `slack` channels."
msgstr ""

#: ./docs/8.x/notifications.md:116
msgid "/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['nexmo'] : ['mail', 'database'];\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:122
msgid "/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function via($notifiable)\n"
"{\n"
"    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:124
#: ./docs/11.x/notifications.md:124
#: ./docs/master/notifications.md:124
msgid "/**\n"
" * Get the notification's delivery channels.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function via(object $notifiable): array\n"
"{\n"
"    return $notifiable->prefers_sms ? ['vonage'] : ['mail', 'database'];\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:127
#: ./docs/9.x/notifications.md:133
#: ./docs/10.x/notifications.md:134
#: ./docs/11.x/notifications.md:134
#: ./docs/master/notifications.md:134
#~ msgctxt "P"
#~ msgid "<a name=\"queueing-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:128
#: ./docs/9.x/notifications.md:134
#: ./docs/10.x/notifications.md:135
#: ./docs/11.x/notifications.md:135
#: ./docs/master/notifications.md:135
msgid "Queueing Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:130
#: ./docs/9.x/notifications.md:137
msgid "Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues)."
msgstr ""

#: ./docs/8.x/notifications.md:132
#: ./docs/9.x/notifications.md:139
#: ./docs/10.x/notifications.md:140
#: ./docs/11.x/notifications.md:140
#: ./docs/master/notifications.md:140
msgid "Sending notifications can take time, especially if the channel needs to make an external API call to deliver the notification. To speed up your application's response time, let your notification be queued by adding the `ShouldQueue` interface and `Queueable` trait to your class. The interface and trait are already imported for all notifications generated using the `make:notification` command, so you may immediately add them to your notification class:"
msgstr ""

#: ./docs/8.x/notifications.md:134
#: ./docs/9.x/notifications.md:141
#: ./docs/10.x/notifications.md:142
#: ./docs/11.x/notifications.md:142
#: ./docs/master/notifications.md:142
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:138
#: ./docs/11.x/notifications.md:138
#: ./docs/master/notifications.md:138
msgid "Before queueing notifications you should configure your queue and [start a worker](/docs/{{version}}/queues#running-the-queue-worker)."
msgstr ""

#: ./docs/8.x/notifications.md:149
#: ./docs/9.x/notifications.md:156
#: ./docs/10.x/notifications.md:157
#: ./docs/11.x/notifications.md:157
#: ./docs/master/notifications.md:157
msgid "Once the `ShouldQueue` interface has been added to your notification, you may send the notification like normal. Laravel will detect the `ShouldQueue` interface on the class and automatically queue the delivery of the notification:"
msgstr ""

#: ./docs/8.x/notifications.md:151
#: ./docs/8.x/notifications.md:1180
#: ./docs/9.x/notifications.md:158
#: ./docs/9.x/notifications.md:1294
#: ./docs/10.x/notifications.md:159
#: ./docs/10.x/notifications.md:1341
#: ./docs/11.x/notifications.md:159
#: ./docs/11.x/notifications.md:1397
#: ./docs/master/notifications.md:159
#: ./docs/master/notifications.md:1341
msgid "$user->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/8.x/notifications.md:153
#: ./docs/9.x/notifications.md:165
#: ./docs/10.x/notifications.md:166
#: ./docs/11.x/notifications.md:166
#: ./docs/master/notifications.md:166
msgid "If you would like to delay the delivery of the notification, you may chain the `delay` method onto your notification instantiation:"
msgstr ""

#: ./docs/8.x/notifications.md:155
#: ./docs/9.x/notifications.md:167
#: ./docs/10.x/notifications.md:168
#: ./docs/11.x/notifications.md:168
#: ./docs/master/notifications.md:168
msgid "$delay = now()->addMinutes(10);\n\n"
"$user->notify((new InvoicePaid($invoice))->delay($delay));"
msgstr ""

#: ./docs/8.x/notifications.md:159
#: ./docs/9.x/notifications.md:174
#: ./docs/10.x/notifications.md:175
#: ./docs/11.x/notifications.md:172
#: ./docs/master/notifications.md:175
msgid "You may pass an array to the `delay` method to specify the delay amount for specific channels:"
msgstr ""

#: ./docs/8.x/notifications.md:161
#: ./docs/9.x/notifications.md:176
#: ./docs/10.x/notifications.md:177
#: ./docs/11.x/notifications.md:174
#: ./docs/master/notifications.md:177
msgid "$user->notify((new InvoicePaid($invoice))->delay([\n"
"    'mail' => now()->addMinutes(5),\n"
"    'sms' => now()->addMinutes(10),\n"
"]));"
msgstr ""

#: ./docs/9.x/notifications.md:162
#: ./docs/10.x/notifications.md:163
#: ./docs/11.x/notifications.md:163
#: ./docs/master/notifications.md:163
#~ msgctxt "P"
#~ msgid "<a name=\"delaying-notifications\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:163
#: ./docs/10.x/notifications.md:164
#: ./docs/11.x/notifications.md:164
#: ./docs/master/notifications.md:164
msgid "Delaying Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:166
#: ./docs/9.x/notifications.md:160
#: ./docs/10.x/notifications.md:161
#: ./docs/11.x/notifications.md:161
#: ./docs/master/notifications.md:161
msgid "When queueing notifications, a queued job will be created for each recipient and channel combination. For example, six jobs will be dispatched to the queue if your notification has three recipients and two channels."
msgstr ""

#: ./docs/8.x/notifications.md:168
#: ./docs/9.x/notifications.md:197
#: ./docs/10.x/notifications.md:197
#: ./docs/11.x/notifications.md:194
#: ./docs/master/notifications.md:197
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-notification-queue-connection\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:169
#: ./docs/9.x/notifications.md:198
msgid "Customizing The Notification Queue Connection"
msgstr ""

#: ./docs/8.x/notifications.md:171
#: ./docs/9.x/notifications.md:200
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may define a `$connection` property on the notification class:"
msgstr ""

#: ./docs/9.x/notifications.md:171
#: ./docs/10.x/notifications.md:172
#: ./docs/master/notifications.md:172
#~ msgctxt "P"
#~ msgid "<a name=\"delaying-notifications-per-channel\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:172
msgid "Delaying Notifications Per Channel"
msgstr ""

#: ./docs/10.x/notifications.md:173
#: ./docs/master/notifications.md:173
msgid "Delaying Notifications per Channel"
msgstr ""

#: ./docs/8.x/notifications.md:173
#: ./docs/9.x/notifications.md:202
msgid "/**\n"
" * The name of the queue connection to use when queueing the notification.\n"
" *\n"
" * @var string\n"
" */\n"
"public $connection = 'redis';"
msgstr ""

#: ./docs/8.x/notifications.md:180
#: ./docs/9.x/notifications.md:224
#: ./docs/10.x/notifications.md:238
#: ./docs/11.x/notifications.md:235
#: ./docs/master/notifications.md:238
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-notification-channel-queues\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:181
#: ./docs/9.x/notifications.md:225
#: ./docs/10.x/notifications.md:239
#: ./docs/11.x/notifications.md:236
#: ./docs/master/notifications.md:239
msgid "Customizing Notification Channel Queues"
msgstr ""

#: ./docs/9.x/notifications.md:181
#: ./docs/10.x/notifications.md:182
#: ./docs/11.x/notifications.md:179
#: ./docs/master/notifications.md:182
msgid "Alternatively, you may define a `withDelay` method on the notification class itself. The `withDelay` method should return an array of channel names and delay values:"
msgstr ""

#: ./docs/8.x/notifications.md:183
#: ./docs/9.x/notifications.md:227
#: ./docs/10.x/notifications.md:241
#: ./docs/11.x/notifications.md:238
#: ./docs/master/notifications.md:241
msgid "If you would like to specify a specific queue that should be used for each notification channel supported by the notification, you may define a `viaQueues` method on your notification. This method should return an array of channel name / queue name pairs:"
msgstr ""

#: ./docs/9.x/notifications.md:183
msgid "/**\n"
" * Determine the notification's delivery delay.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function withDelay($notifiable)\n"
"{\n"
"    return [\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:184
#: ./docs/11.x/notifications.md:181
#: ./docs/master/notifications.md:184
msgid "/**\n"
" * Determine the notification's delivery delay.\n"
" *\n"
" * @return array<string, \\Illuminate\\Support\\Carbon>\n"
" */\n"
"public function withDelay(object $notifiable): array\n"
"{\n"
"    return [\n"
"        'mail' => now()->addMinutes(5),\n"
"        'sms' => now()->addMinutes(10),\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:185
#: ./docs/9.x/notifications.md:229
msgid "/**\n"
" * Determine which queues should be used for each notification channel.\n"
" *\n"
" * @return array\n"
" */\n"
"public function viaQueues()\n"
"{\n"
"    return [\n"
"        'mail' => 'mail-queue',\n"
"        'slack' => 'slack-queue',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:198
#: ./docs/11.x/notifications.md:195
#: ./docs/master/notifications.md:198
msgid "Customizing the Notification Queue Connection"
msgstr ""

#: ./docs/8.x/notifications.md:198
#: ./docs/9.x/notifications.md:242
#: ./docs/10.x/notifications.md:256
#: ./docs/11.x/notifications.md:274
#: ./docs/master/notifications.md:256
#~ msgctxt "P"
#~ msgid "<a name=\"queued-notifications-and-database-transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:199
#: ./docs/9.x/notifications.md:243
msgid "Queued Notifications & Database Transactions"
msgstr ""

#: ./docs/10.x/notifications.md:200
#: ./docs/11.x/notifications.md:197
#: ./docs/master/notifications.md:200
msgid "By default, queued notifications will be queued using your application's default queue connection. If you would like to specify a different connection that should be used for a particular notification, you may call the `onConnection` method from your notification's constructor:"
msgstr ""

#: ./docs/8.x/notifications.md:201
#: ./docs/9.x/notifications.md:245
#: ./docs/10.x/notifications.md:259
#: ./docs/11.x/notifications.md:277
#: ./docs/master/notifications.md:259
msgid "When queued notifications are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your notification depends on these models, unexpected errors can occur when the job that sends the queued notification is processed."
msgstr ""

#: ./docs/10.x/notifications.md:202
#: ./docs/11.x/notifications.md:199
#: ./docs/master/notifications.md:202
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->onConnection('redis');\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:203
#: ./docs/9.x/notifications.md:247
#: ./docs/10.x/notifications.md:261
#: ./docs/11.x/notifications.md:279
#: ./docs/master/notifications.md:261
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular queued notification should be dispatched after all open database transactions have been committed by calling the `afterCommit` method when sending the notification:"
msgstr ""

#: ./docs/8.x/notifications.md:205
#: ./docs/9.x/notifications.md:249
#: ./docs/10.x/notifications.md:263
#: ./docs/11.x/notifications.md:281
#: ./docs/master/notifications.md:263
msgid "use App\\Notifications\\InvoicePaid;\n\n"
"$user->notify((new InvoicePaid($invoice))->afterCommit());"
msgstr ""

#: ./docs/8.x/notifications.md:209
#: ./docs/9.x/notifications.md:253
#: ./docs/10.x/notifications.md:267
#: ./docs/11.x/notifications.md:285
#: ./docs/master/notifications.md:267
msgid "Alternatively, you may call the `afterCommit` method from your notification's constructor:"
msgstr ""

#: ./docs/9.x/notifications.md:209
#: ./docs/10.x/notifications.md:223
#: ./docs/11.x/notifications.md:220
#: ./docs/master/notifications.md:223
msgid "Or, if you would like to specify a specific queue connection that should be used for each notification channel supported by the notification, you may define a `viaConnections` method on your notification. This method should return an array of channel name / queue connection name pairs:"
msgstr ""

#: ./docs/8.x/notifications.md:211
#: ./docs/9.x/notifications.md:255
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:211
msgid "/**\n"
" * Determine which connections should be used for each notification channel.\n"
" *\n"
" * @return array\n"
" */\n"
"public function viaConnections()\n"
"{\n"
"    return [\n"
"        'mail' => 'redis',\n"
"        'database' => 'sync',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:225
#: ./docs/11.x/notifications.md:222
#: ./docs/master/notifications.md:225
msgid "/**\n"
" * Determine which connections should be used for each notification channel.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function viaConnections(): array\n"
"{\n"
"    return [\n"
"        'mail' => 'redis',\n"
"        'database' => 'sync',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:234
#: ./docs/9.x/notifications.md:279
#: ./docs/10.x/notifications.md:291
#: ./docs/11.x/notifications.md:309
#: ./docs/master/notifications.md:291
msgid "To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions)."
msgstr ""

#: ./docs/8.x/notifications.md:236
#: ./docs/9.x/notifications.md:281
#: ./docs/10.x/notifications.md:293
#: ./docs/11.x/notifications.md:311
#: ./docs/master/notifications.md:293
#~ msgctxt "P"
#~ msgid "<a name=\"determining-if-the-queued-notification-should-be-sent\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:237
#: ./docs/9.x/notifications.md:282
msgid "Determining If A Queued Notification Should Be Sent"
msgstr ""

#: ./docs/8.x/notifications.md:239
#: ./docs/9.x/notifications.md:284
#: ./docs/10.x/notifications.md:296
#: ./docs/11.x/notifications.md:314
#: ./docs/master/notifications.md:296
msgid "After a queued notification has been dispatched for the queue for background processing, it will typically be accepted by a queue worker and sent to its intended recipient."
msgstr ""

#: ./docs/8.x/notifications.md:241
#: ./docs/9.x/notifications.md:286
#: ./docs/10.x/notifications.md:298
#: ./docs/11.x/notifications.md:316
#: ./docs/master/notifications.md:298
msgid "However, if you would like to make the final determination on whether the queued notification should be sent after it is being processed by a queue worker, you may define a `shouldSend` method on the notification class. If this method returns `false`, the notification will not be sent:"
msgstr ""

#: ./docs/10.x/notifications.md:243
#: ./docs/11.x/notifications.md:240
#: ./docs/master/notifications.md:243
msgid "/**\n"
" * Determine which queues should be used for each notification channel.\n"
" *\n"
" * @return array<string, string>\n"
" */\n"
"public function viaQueues(): array\n"
"{\n"
"    return [\n"
"        'mail' => 'mail-queue',\n"
"        'slack' => 'slack-queue',\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:243
#: ./docs/9.x/notifications.md:288
msgid "/**\n"
" * Determine if the notification should be sent.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @param  string  $channel\n"
" * @return bool\n"
" */\n"
"public function shouldSend($notifiable, $channel)\n"
"{\n"
"    return $this->invoice->isPaid();\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:253
#~ msgctxt "P"
#~ msgid "<a name=\"queued-notification-middleware\"></a>"
#~ msgstr ""

#: ./docs/11.x/notifications.md:254
msgid "Queued Notification Middleware"
msgstr ""

#: ./docs/8.x/notifications.md:255
#: ./docs/9.x/notifications.md:300
#: ./docs/10.x/notifications.md:308
#: ./docs/10.x/notifications.md:1393
#: ./docs/11.x/notifications.md:326
#: ./docs/11.x/notifications.md:1480
#: ./docs/master/notifications.md:308
#: ./docs/master/notifications.md:1424
#~ msgctxt "P"
#~ msgid "<a name=\"on-demand-notifications\"></a>"
#~ msgstr ""

#: ./docs/11.x/notifications.md:256
msgid "Queued notifications may define middleware [just like queued jobs](/docs/{{version}}/queues#job-middleware). To get started, define a `middleware` method on your notification class. The `middleware` method will receive `$notifiable` and `$channel` variables, which allow you to customize the returned middleware based on the notification's destination:"
msgstr ""

#: ./docs/8.x/notifications.md:256
#: ./docs/9.x/notifications.md:301
#: ./docs/10.x/notifications.md:309
#: ./docs/10.x/notifications.md:1394
#: ./docs/11.x/notifications.md:327
#: ./docs/11.x/notifications.md:1481
#: ./docs/master/notifications.md:309
#: ./docs/master/notifications.md:1425
msgid "On-Demand Notifications"
msgstr ""

#: ./docs/10.x/notifications.md:257
#: ./docs/11.x/notifications.md:275
#: ./docs/master/notifications.md:257
msgid "Queued Notifications and Database Transactions"
msgstr ""

#: ./docs/11.x/notifications.md:258
msgid "use Illuminate\\Queue\\Middleware\\RateLimited;\n\n"
"/**\n"
" * Get the middleware the notification job should pass through.\n"
" *\n"
" * @return array<int, object>\n"
" */\n"
"public function middleware(object $notifiable, string $channel)\n"
"{\n"
"    return match ($channel) {\n"
"        'email' => [new RateLimited('postmark')],\n"
"        'slack' => [new RateLimited('slack')],\n"
"        default => [],\n"
"    };\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:258
#: ./docs/9.x/notifications.md:303
#: ./docs/10.x/notifications.md:311
#: ./docs/11.x/notifications.md:329
#: ./docs/master/notifications.md:311
msgid "Sometimes you may need to send a notification to someone who is not stored as a \"user\" of your application. Using the `Notification` facade's `route` method, you may specify ad-hoc notification routing information before sending the notification:"
msgstr ""

#: ./docs/8.x/notifications.md:260
msgid "Notification::route('mail', 'taylor@example.com')\n"
"            ->route('nexmo', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/8.x/notifications.md:265
#: ./docs/9.x/notifications.md:314
#: ./docs/10.x/notifications.md:322
#: ./docs/11.x/notifications.md:340
#: ./docs/master/notifications.md:322
msgid "If you would like to provide the recipient's name when sending an on-demand notification to the `mail` route, you may provide an array that contains the email address as the key and the name as the value of the first element in the array:"
msgstr ""

#: ./docs/8.x/notifications.md:267
#: ./docs/9.x/notifications.md:316
#: ./docs/10.x/notifications.md:324
#: ./docs/11.x/notifications.md:342
#: ./docs/master/notifications.md:324
msgid "Notification::route('mail', [\n"
"    'barrett@example.com' => 'Barrett Blair',\n"
"])->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/10.x/notifications.md:269
#: ./docs/11.x/notifications.md:287
#: ./docs/master/notifications.md:269
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification implements ShouldQueue\n"
"{\n"
"    use Queueable;\n\n"
"    /**\n"
"     * Create a new notification instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->afterCommit();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:271
#: ./docs/9.x/notifications.md:320
#: ./docs/10.x/notifications.md:335
#: ./docs/11.x/notifications.md:353
#: ./docs/master/notifications.md:335
#~ msgctxt "P"
#~ msgid "<a name=\"mail-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:272
#: ./docs/9.x/notifications.md:321
#: ./docs/10.x/notifications.md:336
#: ./docs/11.x/notifications.md:354
#: ./docs/master/notifications.md:336
msgid "Mail Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:274
#: ./docs/9.x/notifications.md:323
#: ./docs/10.x/notifications.md:338
#: ./docs/11.x/notifications.md:356
#: ./docs/master/notifications.md:338
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-mail-messages\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:275
#: ./docs/9.x/notifications.md:324
#: ./docs/10.x/notifications.md:339
#: ./docs/11.x/notifications.md:357
#: ./docs/master/notifications.md:339
msgid "Formatting Mail Messages"
msgstr ""

#: ./docs/8.x/notifications.md:277
#: ./docs/9.x/notifications.md:326
#: ./docs/10.x/notifications.md:341
#: ./docs/11.x/notifications.md:359
#: ./docs/master/notifications.md:341
msgid "If a notification supports being sent as an email, you should define a `toMail` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\MailMessage` instance."
msgstr ""

#: ./docs/8.x/notifications.md:279
#: ./docs/9.x/notifications.md:328
#: ./docs/10.x/notifications.md:343
#: ./docs/11.x/notifications.md:361
#: ./docs/master/notifications.md:343
msgid "The `MailMessage` class contains a few simple methods to help you build transactional email messages. Mail messages may contain lines of text as well as a \"call to action\". Let's take a look at an example `toMail` method:"
msgstr ""

#: ./docs/8.x/notifications.md:281
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:294
#: ./docs/11.x/notifications.md:312
#: ./docs/master/notifications.md:294
msgid "Determining if a Queued Notification Should Be Sent"
msgstr ""

#: ./docs/8.x/notifications.md:298
#: ./docs/9.x/notifications.md:349
#: ./docs/10.x/notifications.md:361
#: ./docs/11.x/notifications.md:379
#: ./docs/master/notifications.md:361
msgid "Note we are using `$this->invoice->id` in our `toMail` method. You may pass any data your notification needs to generate its message into the notification's constructor."
msgstr ""

#: ./docs/10.x/notifications.md:300
#: ./docs/11.x/notifications.md:318
#: ./docs/master/notifications.md:300
msgid "/**\n"
" * Determine if the notification should be sent.\n"
" */\n"
"public function shouldSend(object $notifiable, string $channel): bool\n"
"{\n"
"    return $this->invoice->isPaid();\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:300
#: ./docs/9.x/notifications.md:351
#: ./docs/10.x/notifications.md:363
#: ./docs/11.x/notifications.md:381
#: ./docs/master/notifications.md:363
msgid "In this example, we register a greeting, a line of text, a call to action, and then another line of text. These methods provided by the `MailMessage` object make it simple and fast to format small transactional emails. The mail channel will then translate the message components into a beautiful, responsive HTML email template with a plain-text counterpart. Here is an example of an email generated by the `mail` channel:"
msgstr ""

#: ./docs/8.x/notifications.md:304
#: ./docs/9.x/notifications.md:356
#: ./docs/10.x/notifications.md:368
#: ./docs/11.x/notifications.md:386
#: ./docs/master/notifications.md:368
msgid "When sending mail notifications, be sure to set the `name` configuration option in your `config/app.php` configuration file. This value will be used in the header and footer of your mail notification messages."
msgstr ""

#: ./docs/9.x/notifications.md:305
msgid "use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Support\\Facades\\Notification;\n\n"
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', 'https://hooks.slack.com/services/...')\n"
"            ->route('broadcast', [new Channel('channel-name')])\n"
"            ->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/8.x/notifications.md:306
#: ./docs/9.x/notifications.md:377
#: ./docs/10.x/notifications.md:386
#: ./docs/11.x/notifications.md:404
#: ./docs/master/notifications.md:386
#~ msgctxt "P"
#~ msgid "<a name=\"other-mail-notification-formatting-options\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:307
#: ./docs/9.x/notifications.md:378
#: ./docs/10.x/notifications.md:387
#: ./docs/11.x/notifications.md:405
#: ./docs/master/notifications.md:387
msgid "Other Mail Notification Formatting Options"
msgstr ""

#: ./docs/8.x/notifications.md:309
#: ./docs/9.x/notifications.md:380
#: ./docs/10.x/notifications.md:389
#: ./docs/11.x/notifications.md:407
#: ./docs/master/notifications.md:389
msgid "Instead of defining the \"lines\" of text in the notification class, you may use the `view` method to specify a custom template that should be used to render the notification email:"
msgstr ""

#: ./docs/8.x/notifications.md:311
#: ./docs/9.x/notifications.md:382
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        'emails.name', ['invoice' => $this->invoice]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:313
#: ./docs/11.x/notifications.md:331
#: ./docs/master/notifications.md:313
msgid "use Illuminate\\Broadcasting\\Channel;\n"
"use Illuminate\\Support\\Facades\\Notification;\n\n"
"Notification::route('mail', 'taylor@example.com')\n"
"            ->route('vonage', '5555555555')\n"
"            ->route('slack', '#slack-channel')\n"
"            ->route('broadcast', [new Channel('channel-name')])\n"
"            ->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/8.x/notifications.md:324
#: ./docs/9.x/notifications.md:395
#: ./docs/10.x/notifications.md:401
#: ./docs/11.x/notifications.md:419
#: ./docs/master/notifications.md:401
msgid "You may specify a plain-text view for the mail message by passing the view name as the second element of an array that is given to the `view` method:"
msgstr ""

#: ./docs/8.x/notifications.md:326
#: ./docs/9.x/notifications.md:397
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        ['emails.name.html', 'emails.name.plain'],\n"
"        ['invoice' => $this->invoice]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:328
#: ./docs/11.x/notifications.md:346
#: ./docs/master/notifications.md:328
msgid "Using the `routes` method, you may provide ad-hoc routing information for multiple notification channels at once:"
msgstr ""

#: ./docs/10.x/notifications.md:330
#: ./docs/11.x/notifications.md:348
#: ./docs/master/notifications.md:330
msgid "Notification::routes([\n"
"    'mail' => ['barrett@example.com' => 'Barrett Blair'],\n"
"    'vonage' => '5555555555',\n"
"])->notify(new InvoicePaid($invoice));"
msgstr ""

#: ./docs/9.x/notifications.md:330
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->lineIf($this->amount > 0, \"Amount paid: {$this->amount}\")\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:340
#: ./docs/9.x/notifications.md:358
#: ./docs/10.x/notifications.md:370
#: ./docs/11.x/notifications.md:388
#: ./docs/master/notifications.md:370
#~ msgctxt "P"
#~ msgid "<a name=\"error-messages\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:341
#: ./docs/9.x/notifications.md:359
#: ./docs/10.x/notifications.md:371
#: ./docs/11.x/notifications.md:389
#: ./docs/master/notifications.md:371
msgid "Error Messages"
msgstr ""

#: ./docs/8.x/notifications.md:343
#: ./docs/9.x/notifications.md:361
#: ./docs/10.x/notifications.md:373
#: ./docs/11.x/notifications.md:391
#: ./docs/master/notifications.md:373
msgid "Some notifications inform users of errors, such as a failed invoice payment. You may indicate that a mail message is regarding an error by calling the `error` method when building your message. When using the `error` method on a mail message, the call to action button will be red instead of black:"
msgstr ""

#: ./docs/10.x/notifications.md:345
#: ./docs/11.x/notifications.md:363
#: ./docs/master/notifications.md:345
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->line('One of your invoices has been paid!')\n"
"                ->lineIf($this->amount > 0, \"Amount paid: {$this->amount}\")\n"
"                ->action('View Invoice', $url)\n"
"                ->line('Thank you for using our application!');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:345
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Message\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:359
#: ./docs/9.x/notifications.md:411
#: ./docs/10.x/notifications.md:426
#: ./docs/11.x/notifications.md:444
#: ./docs/master/notifications.md:426
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-sender\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:360
#: ./docs/9.x/notifications.md:412
msgid "Customizing The Sender"
msgstr ""

#: ./docs/8.x/notifications.md:362
#: ./docs/9.x/notifications.md:414
#: ./docs/10.x/notifications.md:429
#: ./docs/11.x/notifications.md:447
#: ./docs/master/notifications.md:429
msgid "By default, the email's sender / from address is defined in the `config/mail.php` configuration file. However, you may specify the from address for a specific notification using the `from` method:"
msgstr ""

#: ./docs/9.x/notifications.md:363
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Invoice Payment Failed')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:364
#: ./docs/9.x/notifications.md:416
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->from('barrett@example.com', 'Barrett Blair')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:375
#: ./docs/11.x/notifications.md:393
#: ./docs/master/notifications.md:375
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->error()\n"
"                ->subject('Invoice Payment Failed')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:377
#: ./docs/9.x/notifications.md:429
#: ./docs/10.x/notifications.md:441
#: ./docs/11.x/notifications.md:459
#: ./docs/master/notifications.md:441
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-recipient\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:378
#: ./docs/9.x/notifications.md:430
msgid "Customizing The Recipient"
msgstr ""

#: ./docs/8.x/notifications.md:380
#: ./docs/9.x/notifications.md:432
#: ./docs/10.x/notifications.md:444
#: ./docs/11.x/notifications.md:462
#: ./docs/master/notifications.md:444
msgid "When sending notifications via the `mail` channel, the notification system will automatically look for an `email` property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a `routeNotificationForMail` method on the notifiable entity:"
msgstr ""

#: ./docs/8.x/notifications.md:382
#: ./docs/9.x/notifications.md:434
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the mail channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return array|string\n"
"     */\n"
"    public function routeNotificationForMail($notification)\n"
"    {\n"
"        // Return email address only...\n"
"        return $this->email_address;\n\n"
"        // Return email address and name...\n"
"        return [$this->email_address => $this->name];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:391
#: ./docs/11.x/notifications.md:409
#: ./docs/master/notifications.md:391
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        'mail.invoice.paid', ['invoice' => $this->invoice]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:403
#: ./docs/11.x/notifications.md:421
#: ./docs/master/notifications.md:403
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)->view(\n"
"        ['mail.invoice.paid', 'mail.invoice.paid-text'],\n"
"        ['invoice' => $this->invoice]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:409
#: ./docs/9.x/notifications.md:461
#: ./docs/10.x/notifications.md:473
#: ./docs/11.x/notifications.md:491
#: ./docs/master/notifications.md:473
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-subject\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:410
#: ./docs/9.x/notifications.md:462
msgid "Customizing The Subject"
msgstr ""

#: ./docs/8.x/notifications.md:412
#: ./docs/9.x/notifications.md:464
#: ./docs/10.x/notifications.md:476
#: ./docs/11.x/notifications.md:494
#: ./docs/master/notifications.md:476
msgid "By default, the email's subject is the class name of the notification formatted to \"Title Case\". So, if your notification class is named `InvoicePaid`, the email's subject will be `Invoice Paid`. If you would like to specify a different subject for the message, you may call the `subject` method when building your message:"
msgstr ""

#: ./docs/10.x/notifications.md:414
#: ./docs/11.x/notifications.md:432
#: ./docs/master/notifications.md:414
msgid "Or, if your message only has a plain-text view, you may utilize the `text` method:"
msgstr ""

#: ./docs/8.x/notifications.md:414
#: ./docs/9.x/notifications.md:466
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:416
#: ./docs/11.x/notifications.md:434
#: ./docs/master/notifications.md:416
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)->text(\n"
"        'mail.invoice.paid-text', ['invoice' => $this->invoice]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:427
#: ./docs/11.x/notifications.md:445
#: ./docs/master/notifications.md:427
msgid "Customizing the Sender"
msgstr ""

#: ./docs/8.x/notifications.md:427
#: ./docs/9.x/notifications.md:479
#: ./docs/10.x/notifications.md:488
#: ./docs/11.x/notifications.md:506
#: ./docs/master/notifications.md:488
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-mailer\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:428
#: ./docs/9.x/notifications.md:480
msgid "Customizing The Mailer"
msgstr ""

#: ./docs/8.x/notifications.md:430
#: ./docs/9.x/notifications.md:482
#: ./docs/10.x/notifications.md:491
#: ./docs/11.x/notifications.md:509
#: ./docs/master/notifications.md:491
msgid "By default, the email notification will be sent using the default mailer defined in the `config/mail.php` configuration file. However, you may specify a different mailer at runtime by calling the `mailer` method when building your message:"
msgstr ""

#: ./docs/10.x/notifications.md:431
#: ./docs/11.x/notifications.md:449
#: ./docs/master/notifications.md:431
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->from('barrett@example.com', 'Barrett Blair')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:432
#: ./docs/9.x/notifications.md:484
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->mailer('postmark')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:442
#: ./docs/11.x/notifications.md:460
#: ./docs/master/notifications.md:442
msgid "Customizing the Recipient"
msgstr ""

#: ./docs/8.x/notifications.md:445
#: ./docs/9.x/notifications.md:497
#: ./docs/10.x/notifications.md:503
#: ./docs/11.x/notifications.md:521
#: ./docs/master/notifications.md:503
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-templates\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:446
#: ./docs/11.x/notifications.md:464
#: ./docs/master/notifications.md:446
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the mail channel.\n"
"     *\n"
"     * @return  array<string, string>|string\n"
"     */\n"
"    public function routeNotificationForMail(Notification $notification): array|string\n"
"    {\n"
"        // Return email address only...\n"
"        return $this->email_address;\n\n"
"        // Return email address and name...\n"
"        return [$this->email_address => $this->name];\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:446
#: ./docs/9.x/notifications.md:498
msgid "Customizing The Templates"
msgstr ""

#: ./docs/8.x/notifications.md:448
#: ./docs/9.x/notifications.md:500
#: ./docs/10.x/notifications.md:506
#: ./docs/11.x/notifications.md:524
#: ./docs/master/notifications.md:506
msgid "You can modify the HTML and plain-text template used by mail notifications by publishing the notification package's resources. After running this command, the mail notification templates will be located in the `resources/views/vendor/notifications` directory:"
msgstr ""

#: ./docs/8.x/notifications.md:450
#: ./docs/9.x/notifications.md:502
#: ./docs/10.x/notifications.md:508
#: ./docs/11.x/notifications.md:526
#: ./docs/master/notifications.md:508
msgid "php artisan vendor:publish --tag=laravel-notifications"
msgstr ""

#: ./docs/8.x/notifications.md:452
#: ./docs/9.x/notifications.md:506
#: ./docs/10.x/notifications.md:512
#: ./docs/11.x/notifications.md:530
#: ./docs/master/notifications.md:512
#~ msgctxt "P"
#~ msgid "<a name=\"mail-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:453
#: ./docs/9.x/notifications.md:507
#: ./docs/10.x/notifications.md:513
#: ./docs/11.x/notifications.md:531
#: ./docs/master/notifications.md:513
msgid "Attachments"
msgstr ""

#: ./docs/8.x/notifications.md:455
#: ./docs/9.x/notifications.md:509
#: ./docs/10.x/notifications.md:515
#: ./docs/11.x/notifications.md:533
#: ./docs/master/notifications.md:515
msgid "To add attachments to an email notification, use the `attach` method while building your message. The `attach` method accepts the absolute path to the file as its first argument:"
msgstr ""

#: ./docs/8.x/notifications.md:457
#: ./docs/9.x/notifications.md:511
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:470
#: ./docs/9.x/notifications.md:527
#: ./docs/10.x/notifications.md:530
#: ./docs/11.x/notifications.md:548
#: ./docs/master/notifications.md:530
msgid "When attaching files to a message, you may also specify the display name and / or MIME type by passing an `array` as the second argument to the `attach` method:"
msgstr ""

#: ./docs/8.x/notifications.md:472
#: ./docs/9.x/notifications.md:529
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:474
#: ./docs/11.x/notifications.md:492
#: ./docs/master/notifications.md:474
msgid "Customizing the Subject"
msgstr ""

#: ./docs/10.x/notifications.md:478
#: ./docs/11.x/notifications.md:496
#: ./docs/master/notifications.md:478
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->subject('Notification Subject')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:488
#: ./docs/9.x/notifications.md:545
#: ./docs/10.x/notifications.md:545
#: ./docs/11.x/notifications.md:563
#: ./docs/master/notifications.md:545
msgid "Unlike attaching files in mailable objects, you may not attach a file directly from a storage disk using `attachFromStorage`. You should rather use the `attach` method with an absolute path to the file on the storage disk. Alternatively, you could return a [mailable](/docs/{{version}}/mail#generating-mailables) from the `toMail` method:"
msgstr ""

#: ./docs/10.x/notifications.md:489
#: ./docs/11.x/notifications.md:507
#: ./docs/master/notifications.md:489
msgid "Customizing the Mailer"
msgstr ""

#: ./docs/8.x/notifications.md:490
#: ./docs/9.x/notifications.md:547
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email)\n"
"                ->attachFromStorage('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:493
#: ./docs/11.x/notifications.md:511
#: ./docs/master/notifications.md:493
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->mailer('postmark')\n"
"                ->line('...');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:504
#: ./docs/11.x/notifications.md:522
#: ./docs/master/notifications.md:504
msgid "Customizing the Templates"
msgstr ""

#: ./docs/8.x/notifications.md:505
#: ./docs/9.x/notifications.md:583
#: ./docs/10.x/notifications.md:577
#: ./docs/11.x/notifications.md:595
#: ./docs/master/notifications.md:577
#~ msgctxt "P"
#~ msgid "<a name=\"raw-data-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:506
#: ./docs/9.x/notifications.md:584
#: ./docs/10.x/notifications.md:578
#: ./docs/11.x/notifications.md:596
#: ./docs/master/notifications.md:578
msgid "Raw Data Attachments"
msgstr ""

#: ./docs/8.x/notifications.md:508
#: ./docs/9.x/notifications.md:586
#: ./docs/10.x/notifications.md:580
#: ./docs/11.x/notifications.md:598
#: ./docs/master/notifications.md:580
msgid "The `attachData` method may be used to attach a raw string of bytes as an attachment. When calling the `attachData` method, you should provide the filename that should be assigned to the attachment:"
msgstr ""

#: ./docs/8.x/notifications.md:510
#: ./docs/9.x/notifications.md:588
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:517
#: ./docs/11.x/notifications.md:535
#: ./docs/master/notifications.md:517
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:525
#: ./docs/9.x/notifications.md:649
#: ./docs/10.x/notifications.md:634
#: ./docs/11.x/notifications.md:652
#: ./docs/master/notifications.md:634
#~ msgctxt "P"
#~ msgid "<a name=\"using-mailables\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:525
#: ./docs/10.x/notifications.md:528
#: ./docs/11.x/notifications.md:546
#: ./docs/master/notifications.md:528
msgid "The `attach` method offered by notification mail messages also accepts [attachable objects](/docs/{{version}}/mail#attachable-objects). Please consult the comprehensive [attachable object documentation](/docs/{{version}}/mail#attachable-objects) to learn more."
msgstr ""

#: ./docs/8.x/notifications.md:526
#: ./docs/9.x/notifications.md:650
#: ./docs/10.x/notifications.md:635
#: ./docs/11.x/notifications.md:653
#: ./docs/master/notifications.md:635
msgid "Using Mailables"
msgstr ""

#: ./docs/8.x/notifications.md:528
#: ./docs/9.x/notifications.md:652
#: ./docs/10.x/notifications.md:637
#: ./docs/11.x/notifications.md:655
#: ./docs/master/notifications.md:637
msgid "If needed, you may return a full [mailable object](/docs/{{version}}/mail) from your notification's `toMail` method. When returning a `Mailable` instead of a `MailMessage`, you will need to specify the message recipient using the mailable object's `to` method:"
msgstr ""

#: ./docs/8.x/notifications.md:530
#: ./docs/9.x/notifications.md:654
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:532
#: ./docs/11.x/notifications.md:550
#: ./docs/master/notifications.md:532
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attach('/path/to/file', [\n"
"                    'as' => 'name.pdf',\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:544
#: ./docs/9.x/notifications.md:668
#: ./docs/10.x/notifications.md:651
#: ./docs/11.x/notifications.md:669
#: ./docs/master/notifications.md:651
#~ msgctxt "P"
#~ msgid "<a name=\"mailables-and-on-demand-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:545
#: ./docs/9.x/notifications.md:669
msgid "Mailables & On-Demand Notifications"
msgstr ""

#: ./docs/10.x/notifications.md:547
#: ./docs/11.x/notifications.md:565
#: ./docs/master/notifications.md:547
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email)\n"
"                ->attachFromStorage('/path/to/file');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:547
#: ./docs/9.x/notifications.md:671
#: ./docs/10.x/notifications.md:654
#: ./docs/11.x/notifications.md:672
#: ./docs/master/notifications.md:654
msgid "If you are sending an [on-demand notification](#on-demand-notifications), the `$notifiable` instance given to the `toMail` method will be an instance of `Illuminate\\Notifications\\AnonymousNotifiable`, which offers a `routeNotificationFor` method that may be used to retrieve the email address the on-demand notification should be sent to:"
msgstr ""

#: ./docs/8.x/notifications.md:549
#: ./docs/9.x/notifications.md:673
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Notifications\\AnonymousNotifiable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return Mailable\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $address = $notifiable instanceof AnonymousNotifiable\n"
"            ? $notifiable->routeNotificationFor('mail')\n"
"            : $notifiable->email;\n\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($address);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:561
#: ./docs/11.x/notifications.md:579
#: ./docs/master/notifications.md:561
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachMany([\n"
"                    '/path/to/forge.svg',\n"
"                    '/path/to/vapor.svg' => [\n"
"                        'as' => 'Logo.svg',\n"
"                        'mime' => 'image/svg+xml',\n"
"                    ],\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:562
#: ./docs/10.x/notifications.md:559
#: ./docs/11.x/notifications.md:577
#: ./docs/master/notifications.md:559
msgid "When necessary, multiple files may be attached to a message using the `attachMany` method:"
msgstr ""

#: ./docs/9.x/notifications.md:564
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachMany([\n"
"                    '/path/to/forge.svg',\n"
"                    '/path/to/vapor.svg' => [\n"
"                        'as' => 'Logo.svg',\n"
"                        'mime' => 'image/svg+xml',\n"
"                    ],\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:568
#: ./docs/9.x/notifications.md:692
#: ./docs/10.x/notifications.md:673
#: ./docs/11.x/notifications.md:691
#: ./docs/master/notifications.md:673
#~ msgctxt "P"
#~ msgid "<a name=\"previewing-mail-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:569
#: ./docs/9.x/notifications.md:693
#: ./docs/10.x/notifications.md:674
#: ./docs/11.x/notifications.md:692
#: ./docs/master/notifications.md:674
msgid "Previewing Mail Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:571
#: ./docs/9.x/notifications.md:695
#: ./docs/10.x/notifications.md:676
#: ./docs/11.x/notifications.md:694
#: ./docs/master/notifications.md:676
msgid "When designing a mail notification template, it is convenient to quickly preview the rendered mail message in your browser like a typical Blade template. For this reason, Laravel allows you to return any mail message generated by a mail notification directly from a route closure or controller. When a `MailMessage` is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:"
msgstr ""

#: ./docs/8.x/notifications.md:573
#: ./docs/9.x/notifications.md:697
#: ./docs/10.x/notifications.md:678
#: ./docs/11.x/notifications.md:696
#: ./docs/master/notifications.md:678
msgid "use App\\Models\\Invoice;\n"
"use App\\Notifications\\InvoicePaid;\n\n"
"Route::get('/notification', function () {\n"
"    $invoice = Invoice::find(1);\n\n"
"    return (new InvoicePaid($invoice))\n"
"                ->toMail($invoice->user);\n"
"});"
msgstr ""

#: ./docs/10.x/notifications.md:582
#: ./docs/11.x/notifications.md:600
#: ./docs/master/notifications.md:582
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Hello!')\n"
"                ->attachData($this->pdf, 'name.pdf', [\n"
"                    'mime' => 'application/pdf',\n"
"                ]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:583
#: ./docs/9.x/notifications.md:707
#: ./docs/10.x/notifications.md:688
#: ./docs/11.x/notifications.md:706
#: ./docs/master/notifications.md:688
#~ msgctxt "P"
#~ msgid "<a name=\"markdown-mail-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:584
#: ./docs/9.x/notifications.md:708
#: ./docs/10.x/notifications.md:689
#: ./docs/11.x/notifications.md:707
#: ./docs/master/notifications.md:689
msgid "Markdown Mail Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:586
#: ./docs/9.x/notifications.md:710
#: ./docs/10.x/notifications.md:691
#: ./docs/11.x/notifications.md:709
#: ./docs/master/notifications.md:691
msgid "Markdown mail notifications allow you to take advantage of the pre-built templates of mail notifications, while giving you more freedom to write longer, customized messages. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart."
msgstr ""

#: ./docs/8.x/notifications.md:588
#: ./docs/9.x/notifications.md:712
#: ./docs/10.x/notifications.md:693
#: ./docs/11.x/notifications.md:711
#: ./docs/master/notifications.md:693
#~ msgctxt "P"
#~ msgid "<a name=\"generating-the-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:589
#: ./docs/9.x/notifications.md:713
msgid "Generating The Message"
msgstr ""

#: ./docs/8.x/notifications.md:591
#: ./docs/9.x/notifications.md:715
#: ./docs/10.x/notifications.md:696
#: ./docs/11.x/notifications.md:714
#: ./docs/master/notifications.md:696
msgid "To generate a notification with a corresponding Markdown template, you may use the `--markdown` option of the `make:notification` Artisan command:"
msgstr ""

#: ./docs/8.x/notifications.md:593
#: ./docs/9.x/notifications.md:717
#: ./docs/10.x/notifications.md:698
#: ./docs/11.x/notifications.md:716
#: ./docs/master/notifications.md:698
msgid "php artisan make:notification InvoicePaid --markdown=mail.invoice.paid"
msgstr ""

#: ./docs/10.x/notifications.md:595
#: ./docs/11.x/notifications.md:613
#: ./docs/master/notifications.md:595
msgid "Adding Tags and Metadata"
msgstr ""

#: ./docs/8.x/notifications.md:595
#: ./docs/9.x/notifications.md:721
#: ./docs/10.x/notifications.md:702
#: ./docs/11.x/notifications.md:720
#: ./docs/master/notifications.md:702
msgid "Like all other mail notifications, notifications that use Markdown templates should define a `toMail` method on their notification class. However, instead of using the `line` and `action` methods to construct the notification, use the `markdown` method to specify the name of the Markdown template that should be used. An array of data you wish to make available to the template may be passed as the method's second argument:"
msgstr ""

#: ./docs/8.x/notifications.md:597
#: ./docs/9.x/notifications.md:723
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n\n"
"    return (new MailMessage)\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:599
#: ./docs/11.x/notifications.md:617
#: ./docs/master/notifications.md:599
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Comment Upvoted!')\n"
"                ->tag('upvote')\n"
"                ->metadata('comment_id', $this->comment->id);\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:603
#: ./docs/10.x/notifications.md:594
#: ./docs/11.x/notifications.md:612
#: ./docs/master/notifications.md:594
#~ msgctxt "P"
#~ msgid "<a name=\"adding-tags-metadata\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:604
msgid "Adding Tags & Metadata"
msgstr ""

#: ./docs/9.x/notifications.md:606
#: ./docs/10.x/notifications.md:597
#: ./docs/11.x/notifications.md:615
#: ./docs/master/notifications.md:597
msgid "Some third-party email providers such as Mailgun and Postmark support message \"tags\" and \"metadata\", which may be used to group and track emails sent by your application. You may add tags and metadata to an email message via the `tag` and `metadata` methods:"
msgstr ""

#: ./docs/9.x/notifications.md:608
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->greeting('Comment Upvoted!')\n"
"                ->tag('upvote')\n"
"                ->metadata('comment_id', $this->comment->id);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:612
#: ./docs/9.x/notifications.md:738
#: ./docs/10.x/notifications.md:716
#: ./docs/11.x/notifications.md:734
#: ./docs/master/notifications.md:716
#~ msgctxt "P"
#~ msgid "<a name=\"writing-the-message\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:613
#: ./docs/9.x/notifications.md:739
msgid "Writing The Message"
msgstr ""

#: ./docs/10.x/notifications.md:615
#: ./docs/11.x/notifications.md:633
#: ./docs/master/notifications.md:615
msgid "Customizing the Symfony Message"
msgstr ""

#: ./docs/8.x/notifications.md:615
#: ./docs/9.x/notifications.md:741
#: ./docs/10.x/notifications.md:719
#: ./docs/11.x/notifications.md:737
#: ./docs/master/notifications.md:719
msgid "Markdown mail notifications use a combination of Blade components and Markdown syntax which allow you to easily construct notifications while leveraging Laravel's pre-crafted notification components:"
msgstr ""

#: ./docs/8.x/notifications.md:617
msgid "@component('mail::message')\n"
"# Invoice Paid\n\n"
"Your invoice has been paid!\n\n"
"@component('mail::button', ['url' => $url])\n"
"View Invoice\n"
"@endcomponent\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"@endcomponent"
msgstr ""

#: ./docs/10.x/notifications.md:619
#: ./docs/11.x/notifications.md:637
#: ./docs/master/notifications.md:619
msgid "use Symfony\\Component\\Mime\\Email;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->withSymfonyMessage(function (Email $message) {\n"
"                    $message->getHeaders()->addTextHeader(\n"
"                        'Custom-Header', 'Header Value'\n"
"                    );\n"
"                });\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:622
#: ./docs/10.x/notifications.md:610
#: ./docs/11.x/notifications.md:628
#: ./docs/master/notifications.md:610
msgid "If your application is using the Mailgun driver, you may consult Mailgun's documentation for more information on [tags](https://documentation.mailgun.com/en/latest/user_manual.html#tagging-1) and [metadata](https://documentation.mailgun.com/en/latest/user_manual.html#attaching-data-to-messages). Likewise, the Postmark documentation may also be consulted for more information on their support for [tags](https://postmarkapp.com/blog/tags-support-for-smtp) and [metadata](https://postmarkapp.com/support/article/1125-custom-metadata-faq)."
msgstr ""

#: ./docs/9.x/notifications.md:624
#: ./docs/10.x/notifications.md:612
#: ./docs/11.x/notifications.md:630
#: ./docs/master/notifications.md:612
msgid "If your application is using Amazon SES to send emails, you should use the `metadata` method to attach [SES \"tags\"](https://docs.aws.amazon.com/ses/latest/APIReference/API_MessageTag.html) to the message."
msgstr ""

#: ./docs/9.x/notifications.md:626
#: ./docs/10.x/notifications.md:614
#: ./docs/11.x/notifications.md:632
#: ./docs/master/notifications.md:614
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-symfony-message\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:627
msgid "Customizing The Symfony Message"
msgstr ""

#: ./docs/9.x/notifications.md:629
#: ./docs/10.x/notifications.md:617
#: ./docs/11.x/notifications.md:635
#: ./docs/master/notifications.md:617
msgid "The `withSymfonyMessage` method of the `MailMessage` class allows you to register a closure which will be invoked with the Symfony Message instance before sending the message. This gives you an opportunity to deeply customize the message before it is delivered:"
msgstr ""

#: ./docs/8.x/notifications.md:630
#: ./docs/9.x/notifications.md:758
#: ./docs/10.x/notifications.md:736
#: ./docs/11.x/notifications.md:754
#: ./docs/master/notifications.md:736
#~ msgctxt "P"
#~ msgid "<a name=\"button-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:631
#: ./docs/9.x/notifications.md:759
#: ./docs/10.x/notifications.md:737
#: ./docs/11.x/notifications.md:755
#: ./docs/master/notifications.md:737
msgid "Button Component"
msgstr ""

#: ./docs/9.x/notifications.md:631
msgid "use Symfony\\Component\\Mime\\Email;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->withSymfonyMessage(function (Email $message) {\n"
"                    $message->getHeaders()->addTextHeader(\n"
"                        'Custom-Header', 'Header Value'\n"
"                    );\n"
"                });\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:633
#: ./docs/9.x/notifications.md:761
#: ./docs/10.x/notifications.md:739
#: ./docs/11.x/notifications.md:757
#: ./docs/master/notifications.md:739
msgid "The button component renders a centered button link. The component accepts two arguments, a `url` and an optional `color`. Supported colors are `primary`, `green`, and `red`. You may add as many button components to a notification as you wish:"
msgstr ""

#: ./docs/8.x/notifications.md:635
msgid "@component('mail::button', ['url' => $url, 'color' => 'green'])\n"
"View Invoice\n"
"@endcomponent"
msgstr ""

#: ./docs/10.x/notifications.md:639
#: ./docs/11.x/notifications.md:657
#: ./docs/master/notifications.md:639
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Mail\\Mailable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($notifiable->email);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:639
#: ./docs/9.x/notifications.md:769
#: ./docs/10.x/notifications.md:747
#: ./docs/11.x/notifications.md:765
#: ./docs/master/notifications.md:747
#~ msgctxt "P"
#~ msgid "<a name=\"panel-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:640
#: ./docs/9.x/notifications.md:770
#: ./docs/10.x/notifications.md:748
#: ./docs/11.x/notifications.md:766
#: ./docs/master/notifications.md:748
msgid "Panel Component"
msgstr ""

#: ./docs/8.x/notifications.md:642
#: ./docs/9.x/notifications.md:772
#: ./docs/10.x/notifications.md:750
#: ./docs/11.x/notifications.md:768
#: ./docs/master/notifications.md:750
msgid "The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the notification. This allows you to draw attention to a given block of text:"
msgstr ""

#: ./docs/8.x/notifications.md:644
msgid "@component('mail::panel')\n"
"This is the panel content.\n"
"@endcomponent"
msgstr ""

#: ./docs/8.x/notifications.md:648
#: ./docs/9.x/notifications.md:780
#: ./docs/10.x/notifications.md:758
#: ./docs/11.x/notifications.md:776
#: ./docs/master/notifications.md:758
#~ msgctxt "P"
#~ msgid "<a name=\"table-component\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:649
#: ./docs/9.x/notifications.md:781
#: ./docs/10.x/notifications.md:759
#: ./docs/11.x/notifications.md:777
#: ./docs/master/notifications.md:759
msgid "Table Component"
msgstr ""

#: ./docs/8.x/notifications.md:651
#: ./docs/9.x/notifications.md:783
#: ./docs/10.x/notifications.md:761
#: ./docs/11.x/notifications.md:779
#: ./docs/master/notifications.md:761
msgid "The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:"
msgstr ""

#: ./docs/10.x/notifications.md:652
#: ./docs/11.x/notifications.md:670
#: ./docs/master/notifications.md:652
msgid "Mailables and On-Demand Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:653
msgid "@component('mail::table')\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"@endcomponent"
msgstr ""

#: ./docs/10.x/notifications.md:656
#: ./docs/11.x/notifications.md:674
#: ./docs/master/notifications.md:656
msgid "use App\\Mail\\InvoicePaid as InvoicePaidMailable;\n"
"use Illuminate\\Notifications\\AnonymousNotifiable;\n"
"use Illuminate\\Mail\\Mailable;\n\n"
"/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): Mailable\n"
"{\n"
"    $address = $notifiable instanceof AnonymousNotifiable\n"
"            ? $notifiable->routeNotificationFor('mail')\n"
"            : $notifiable->email;\n\n"
"    return (new InvoicePaidMailable($this->invoice))\n"
"                ->to($address);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:660
#: ./docs/9.x/notifications.md:794
#: ./docs/10.x/notifications.md:772
#: ./docs/11.x/notifications.md:790
#: ./docs/master/notifications.md:772
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-components\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:661
#: ./docs/9.x/notifications.md:795
msgid "Customizing The Components"
msgstr ""

#: ./docs/8.x/notifications.md:663
#: ./docs/9.x/notifications.md:797
#: ./docs/10.x/notifications.md:775
#: ./docs/11.x/notifications.md:793
#: ./docs/master/notifications.md:775
msgid "You may export all of the Markdown notification components to your own application for customization. To export the components, use the `vendor:publish` Artisan command to publish the `laravel-mail` asset tag:"
msgstr ""

#: ./docs/8.x/notifications.md:665
#: ./docs/9.x/notifications.md:799
#: ./docs/10.x/notifications.md:777
#: ./docs/11.x/notifications.md:795
#: ./docs/master/notifications.md:777
msgid "php artisan vendor:publish --tag=laravel-mail"
msgstr ""

#: ./docs/8.x/notifications.md:667
#: ./docs/9.x/notifications.md:803
#: ./docs/10.x/notifications.md:781
#: ./docs/11.x/notifications.md:799
#: ./docs/master/notifications.md:781
msgid "This command will publish the Markdown mail components to the `resources/views/vendor/mail` directory. The `mail` directory will contain an `html` and a `text` directory, each containing their respective representations of every available component. You are free to customize these components however you like."
msgstr ""

#: ./docs/8.x/notifications.md:669
#: ./docs/9.x/notifications.md:805
#: ./docs/10.x/notifications.md:783
#: ./docs/11.x/notifications.md:801
#: ./docs/master/notifications.md:783
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-css\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:670
#: ./docs/9.x/notifications.md:806
msgid "Customizing The CSS"
msgstr ""

#: ./docs/8.x/notifications.md:672
#: ./docs/9.x/notifications.md:808
#: ./docs/10.x/notifications.md:786
#: ./docs/11.x/notifications.md:804
#: ./docs/master/notifications.md:786
msgid "After exporting the components, the `resources/views/vendor/mail/html/themes` directory will contain a `default.css` file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown notifications."
msgstr ""

#: ./docs/8.x/notifications.md:674
#: ./docs/9.x/notifications.md:810
#: ./docs/10.x/notifications.md:788
#: ./docs/11.x/notifications.md:806
#: ./docs/master/notifications.md:788
msgid "If you would like to build an entirely new theme for Laravel's Markdown components, you may place a CSS file within the `html/themes` directory. After naming and saving your CSS file, update the `theme` option of the `mail` configuration file to match the name of your new theme."
msgstr ""

#: ./docs/8.x/notifications.md:676
#: ./docs/9.x/notifications.md:812
#: ./docs/10.x/notifications.md:790
#: ./docs/11.x/notifications.md:808
#: ./docs/master/notifications.md:790
msgid "To customize the theme for an individual notification, you may call the `theme` method while building the notification's mail message. The `theme` method accepts the name of the theme that should be used when sending the notification:"
msgstr ""

#: ./docs/8.x/notifications.md:678
#: ./docs/9.x/notifications.md:814
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\MailMessage\n"
" */\n"
"public function toMail($notifiable)\n"
"{\n"
"    return (new MailMessage)\n"
"                ->theme('invoice')\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:692
#: ./docs/9.x/notifications.md:828
#: ./docs/10.x/notifications.md:803
#: ./docs/11.x/notifications.md:821
#: ./docs/master/notifications.md:803
#~ msgctxt "P"
#~ msgid "<a name=\"database-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:693
#: ./docs/9.x/notifications.md:829
#: ./docs/10.x/notifications.md:804
#: ./docs/11.x/notifications.md:822
#: ./docs/master/notifications.md:804
msgid "Database Notifications"
msgstr ""

#: ./docs/10.x/notifications.md:694
#: ./docs/11.x/notifications.md:712
#: ./docs/master/notifications.md:694
msgid "Generating the Message"
msgstr ""

#: ./docs/8.x/notifications.md:695
#: ./docs/9.x/notifications.md:831
#: ./docs/10.x/notifications.md:806
#: ./docs/11.x/notifications.md:824
#: ./docs/master/notifications.md:806
#~ msgctxt "P"
#~ msgid "<a name=\"database-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:696
#: ./docs/8.x/notifications.md:780
#: ./docs/8.x/notifications.md:873
#: ./docs/8.x/notifications.md:1015
#: ./docs/9.x/notifications.md:832
#: ./docs/9.x/notifications.md:919
#: ./docs/9.x/notifications.md:1012
#: ./docs/9.x/notifications.md:1127
#: ./docs/10.x/notifications.md:807
#: ./docs/10.x/notifications.md:908
#: ./docs/10.x/notifications.md:992
#: ./docs/10.x/notifications.md:1101
#: ./docs/11.x/notifications.md:825
#: ./docs/11.x/notifications.md:926
#: ./docs/11.x/notifications.md:1010
#: ./docs/11.x/notifications.md:1119
#: ./docs/master/notifications.md:807
#: ./docs/master/notifications.md:908
#: ./docs/master/notifications.md:992
#: ./docs/master/notifications.md:1101
msgid "Prerequisites"
msgstr ""

#: ./docs/8.x/notifications.md:698
#: ./docs/9.x/notifications.md:834
#: ./docs/10.x/notifications.md:809
#: ./docs/11.x/notifications.md:827
#: ./docs/master/notifications.md:809
msgid "The `database` notification channel stores the notification information in a database table. This table will contain information such as the notification type as well as a JSON data structure that describes the notification."
msgstr ""

#: ./docs/8.x/notifications.md:700
#: ./docs/9.x/notifications.md:836
#: ./docs/10.x/notifications.md:811
msgid "You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the `notifications:table` command to generate a [migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#: ./docs/8.x/notifications.md:702
#: ./docs/9.x/notifications.md:838
#: ./docs/10.x/notifications.md:813
msgid "php artisan notifications:table\n\n"
"php artisan migrate"
msgstr ""

#: ./docs/10.x/notifications.md:704
#: ./docs/11.x/notifications.md:722
#: ./docs/master/notifications.md:704
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    $url = url('/invoice/'.$this->invoice->id);\n\n"
"    return (new MailMessage)\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:706
#: ./docs/9.x/notifications.md:844
#: ./docs/10.x/notifications.md:822
#: ./docs/11.x/notifications.md:840
#: ./docs/master/notifications.md:822
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-database-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:707
#: ./docs/9.x/notifications.md:845
#: ./docs/10.x/notifications.md:823
#: ./docs/11.x/notifications.md:841
#: ./docs/master/notifications.md:823
msgid "Formatting Database Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:709
#: ./docs/9.x/notifications.md:847
#: ./docs/10.x/notifications.md:825
#: ./docs/11.x/notifications.md:843
#: ./docs/master/notifications.md:825
msgid "If a notification supports being stored in a database table, you should define a `toDatabase` or `toArray` method on the notification class. This method will receive a `$notifiable` entity and should return a plain PHP array. The returned array will be encoded as JSON and stored in the `data` column of your `notifications` table. Let's take a look at an example `toArray` method:"
msgstr ""

#: ./docs/8.x/notifications.md:711
#: ./docs/9.x/notifications.md:849
msgid "/**\n"
" * Get the array representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toArray($notifiable)\n"
"{\n"
"    return [\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:717
#: ./docs/11.x/notifications.md:735
#: ./docs/master/notifications.md:717
msgid "Writing the Message"
msgstr ""

#: ./docs/8.x/notifications.md:725
#: ./docs/9.x/notifications.md:863
#: ./docs/10.x/notifications.md:852
#: ./docs/11.x/notifications.md:870
#: ./docs/master/notifications.md:852
#~ msgctxt "P"
#~ msgid "<a name=\"todatabase-vs-toarray\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:726
#: ./docs/9.x/notifications.md:864
msgid "`toDatabase` Vs. `toArray`"
msgstr ""

#: ./docs/8.x/notifications.md:728
#: ./docs/9.x/notifications.md:866
#: ./docs/10.x/notifications.md:855
#: ./docs/11.x/notifications.md:873
#: ./docs/master/notifications.md:855
msgid "The `toArray` method is also used by the `broadcast` channel to determine which data to broadcast to your JavaScript powered frontend. If you would like to have two different array representations for the `database` and `broadcast` channels, you should define a `toDatabase` method instead of a `toArray` method."
msgstr ""

#: ./docs/8.x/notifications.md:730
#: ./docs/9.x/notifications.md:868
#: ./docs/10.x/notifications.md:857
#: ./docs/11.x/notifications.md:875
#: ./docs/master/notifications.md:857
#~ msgctxt "P"
#~ msgid "<a name=\"accessing-the-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:731
#: ./docs/9.x/notifications.md:869
msgid "Accessing The Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:733
#: ./docs/9.x/notifications.md:871
#: ./docs/10.x/notifications.md:860
#: ./docs/11.x/notifications.md:878
#: ./docs/master/notifications.md:860
msgid "Once notifications are stored in the database, you need a convenient way to access them from your notifiable entities. The `Illuminate\\Notifications\\Notifiable` trait, which is included on Laravel's default `App\\Models\\User` model, includes a `notifications` [Eloquent relationship](/docs/{{version}}/eloquent-relationships) that returns the notifications for the entity. To fetch notifications, you may access this method like any other Eloquent relationship. By default, notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: ./docs/8.x/notifications.md:735
#: ./docs/9.x/notifications.md:873
#: ./docs/10.x/notifications.md:862
#: ./docs/11.x/notifications.md:880
#: ./docs/master/notifications.md:862
msgid "$user = App\\Models\\User::find(1);\n\n"
"foreach ($user->notifications as $notification) {\n"
"    echo $notification->type;\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:741
#: ./docs/9.x/notifications.md:879
#: ./docs/10.x/notifications.md:868
#: ./docs/11.x/notifications.md:886
#: ./docs/master/notifications.md:868
msgid "If you want to retrieve only the \"unread\" notifications, you may use the `unreadNotifications` relationship. Again, these notifications will be sorted by the `created_at` timestamp with the most recent notifications at the beginning of the collection:"
msgstr ""

#: ./docs/8.x/notifications.md:743
#: ./docs/9.x/notifications.md:881
#: ./docs/10.x/notifications.md:870
#: ./docs/11.x/notifications.md:888
#: ./docs/master/notifications.md:870
msgid "$user = App\\Models\\User::find(1);\n\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    echo $notification->type;\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:743
#: ./docs/10.x/notifications.md:721
#: ./docs/11.x/notifications.md:739
#: ./docs/master/notifications.md:721
msgid "<x-mail::message>\n"
"# Invoice Paid\n\n"
"Your invoice has been paid!\n\n"
"<x-mail::button :url=\"$url\">\n"
"View Invoice\n"
"</x-mail::button>\n\n"
"Thanks,<br>\n"
"{{ config('app.name') }}\n"
"</x-mail::message>"
msgstr ""

#: ./docs/8.x/notifications.md:749
#: ./docs/9.x/notifications.md:888
#: ./docs/10.x/notifications.md:877
#: ./docs/11.x/notifications.md:895
#: ./docs/master/notifications.md:877
msgid "To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller's URL from your JavaScript client."
msgstr ""

#: ./docs/8.x/notifications.md:751
#: ./docs/9.x/notifications.md:890
#: ./docs/10.x/notifications.md:879
#: ./docs/11.x/notifications.md:897
#: ./docs/master/notifications.md:879
#~ msgctxt "P"
#~ msgid "<a name=\"marking-notifications-as-read\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:752
#: ./docs/9.x/notifications.md:891
msgid "Marking Notifications As Read"
msgstr ""

#: ./docs/8.x/notifications.md:754
#: ./docs/9.x/notifications.md:893
#: ./docs/10.x/notifications.md:882
#: ./docs/11.x/notifications.md:900
#: ./docs/master/notifications.md:882
msgid "Typically, you will want to mark a notification as \"read\" when a user views it. The `Illuminate\\Notifications\\Notifiable` trait provides a `markAsRead` method, which updates the `read_at` column on the notification's database record:"
msgstr ""

#: ./docs/8.x/notifications.md:756
#: ./docs/9.x/notifications.md:895
#: ./docs/10.x/notifications.md:884
#: ./docs/11.x/notifications.md:902
#: ./docs/master/notifications.md:884
msgid "$user = App\\Models\\User::find(1);\n\n"
"foreach ($user->unreadNotifications as $notification) {\n"
"    $notification->markAsRead();\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:762
#: ./docs/9.x/notifications.md:901
#: ./docs/10.x/notifications.md:890
#: ./docs/11.x/notifications.md:908
#: ./docs/master/notifications.md:890
msgid "However, instead of looping through each notification, you may use the `markAsRead` method directly on a collection of notifications:"
msgstr ""

#: ./docs/9.x/notifications.md:763
#: ./docs/10.x/notifications.md:741
#: ./docs/11.x/notifications.md:759
#: ./docs/master/notifications.md:741
msgid "<x-mail::button :url=\"$url\" color=\"green\">\n"
"View Invoice\n"
"</x-mail::button>"
msgstr ""

#: ./docs/8.x/notifications.md:764
#: ./docs/9.x/notifications.md:903
#: ./docs/10.x/notifications.md:892
#: ./docs/11.x/notifications.md:910
#: ./docs/master/notifications.md:892
msgid "$user->unreadNotifications->markAsRead();"
msgstr ""

#: ./docs/8.x/notifications.md:766
#: ./docs/9.x/notifications.md:905
#: ./docs/10.x/notifications.md:894
#: ./docs/11.x/notifications.md:912
#: ./docs/master/notifications.md:894
msgid "You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:"
msgstr ""

#: ./docs/8.x/notifications.md:768
#: ./docs/9.x/notifications.md:907
#: ./docs/10.x/notifications.md:896
#: ./docs/11.x/notifications.md:914
#: ./docs/master/notifications.md:896
msgid "$user = App\\Models\\User::find(1);\n\n"
"$user->unreadNotifications()->update(['read_at' => now()]);"
msgstr ""

#: ./docs/8.x/notifications.md:772
#: ./docs/9.x/notifications.md:911
#: ./docs/10.x/notifications.md:900
#: ./docs/11.x/notifications.md:918
#: ./docs/master/notifications.md:900
msgid "You may `delete` the notifications to remove them from the table entirely:"
msgstr ""

#: ./docs/10.x/notifications.md:773
#: ./docs/11.x/notifications.md:791
#: ./docs/master/notifications.md:773
msgid "Customizing the Components"
msgstr ""

#: ./docs/8.x/notifications.md:774
#: ./docs/9.x/notifications.md:913
#: ./docs/10.x/notifications.md:902
#: ./docs/11.x/notifications.md:920
#: ./docs/master/notifications.md:902
msgid "$user->notifications()->delete();"
msgstr ""

#: ./docs/9.x/notifications.md:774
#: ./docs/10.x/notifications.md:752
#: ./docs/11.x/notifications.md:770
#: ./docs/master/notifications.md:752
msgid "<x-mail::panel>\n"
"This is the panel content.\n"
"</x-mail::panel>"
msgstr ""

#: ./docs/8.x/notifications.md:776
#: ./docs/9.x/notifications.md:915
#: ./docs/10.x/notifications.md:904
#: ./docs/11.x/notifications.md:922
#: ./docs/master/notifications.md:904
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:777
#: ./docs/9.x/notifications.md:916
#: ./docs/10.x/notifications.md:905
#: ./docs/11.x/notifications.md:923
#: ./docs/master/notifications.md:905
msgid "Broadcast Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:779
#: ./docs/9.x/notifications.md:918
#: ./docs/10.x/notifications.md:907
#: ./docs/11.x/notifications.md:925
#: ./docs/master/notifications.md:907
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/11.x/notifications.md:781
msgid "<x-mail::table>\n"
"| Laravel       | Table         | Example       |\n"
"| ------------- | :-----------: | ------------: |\n"
"| Col 2 is      | Centered      | $10           |\n"
"| Col 3 is      | Right-Aligned | $20           |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/notifications.md:782
#: ./docs/9.x/notifications.md:921
#: ./docs/10.x/notifications.md:910
#: ./docs/11.x/notifications.md:928
#: ./docs/master/notifications.md:910
msgid "Before broadcasting notifications, you should configure and be familiar with Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services. Event broadcasting provides a way to react to server-side Laravel events from your JavaScript powered frontend."
msgstr ""

#: ./docs/10.x/notifications.md:784
#: ./docs/11.x/notifications.md:802
#: ./docs/master/notifications.md:784
msgid "Customizing the CSS"
msgstr ""

#: ./docs/8.x/notifications.md:784
#: ./docs/9.x/notifications.md:923
#: ./docs/10.x/notifications.md:912
#: ./docs/11.x/notifications.md:930
#: ./docs/master/notifications.md:912
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-broadcast-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:785
#: ./docs/9.x/notifications.md:924
#: ./docs/10.x/notifications.md:913
#: ./docs/11.x/notifications.md:931
#: ./docs/master/notifications.md:913
msgid "Formatting Broadcast Notifications"
msgstr ""

#: ./docs/9.x/notifications.md:785
#: ./docs/10.x/notifications.md:763
#: ./docs/master/notifications.md:763
msgid "<x-mail::table>\n"
"| Laravel       | Table         | Example  |\n"
"| ------------- |:-------------:| --------:|\n"
"| Col 2 is      | Centered      | $10      |\n"
"| Col 3 is      | Right-Aligned | $20      |\n"
"</x-mail::table>"
msgstr ""

#: ./docs/8.x/notifications.md:787
#: ./docs/9.x/notifications.md:926
#: ./docs/10.x/notifications.md:915
#: ./docs/11.x/notifications.md:933
#: ./docs/master/notifications.md:915
msgid "The `broadcast` channel broadcasts notifications using Laravel's [event broadcasting](/docs/{{version}}/broadcasting) services, allowing your JavaScript powered frontend to catch notifications in realtime. If a notification supports broadcasting, you can define a `toBroadcast` method on the notification class. This method will receive a `$notifiable` entity and should return a `BroadcastMessage` instance. If the `toBroadcast` method does not exist, the `toArray` method will be used to gather the data that should be broadcast. The returned data will be encoded as JSON and broadcast to your JavaScript powered frontend. Let's take a look at an example `toBroadcast` method:"
msgstr ""

#: ./docs/8.x/notifications.md:789
#: ./docs/9.x/notifications.md:928
msgid "use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\n"
"/**\n"
" * Get the broadcastable representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return BroadcastMessage\n"
" */\n"
"public function toBroadcast($notifiable)\n"
"{\n"
"    return new BroadcastMessage([\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:792
#: ./docs/11.x/notifications.md:810
#: ./docs/master/notifications.md:792
msgid "/**\n"
" * Get the mail representation of the notification.\n"
" */\n"
"public function toMail(object $notifiable): MailMessage\n"
"{\n"
"    return (new MailMessage)\n"
"                ->theme('invoice')\n"
"                ->subject('Invoice Paid')\n"
"                ->markdown('mail.invoice.paid', ['url' => $url]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:805
#: ./docs/9.x/notifications.md:944
#: ./docs/10.x/notifications.md:930
#: ./docs/11.x/notifications.md:948
#: ./docs/master/notifications.md:930
#~ msgctxt "P"
#~ msgid "<a name=\"broadcast-queue-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:806
#: ./docs/9.x/notifications.md:945
#: ./docs/10.x/notifications.md:931
#: ./docs/11.x/notifications.md:949
#: ./docs/master/notifications.md:931
msgid "Broadcast Queue Configuration"
msgstr ""

#: ./docs/8.x/notifications.md:808
#: ./docs/9.x/notifications.md:947
#: ./docs/10.x/notifications.md:933
#: ./docs/11.x/notifications.md:951
#: ./docs/master/notifications.md:933
msgid "All broadcast notifications are queued for broadcasting. If you would like to configure the queue connection or queue name that is used to queue the broadcast operation, you may use the `onConnection` and `onQueue` methods of the `BroadcastMessage`:"
msgstr ""

#: ./docs/8.x/notifications.md:810
#: ./docs/9.x/notifications.md:949
#: ./docs/10.x/notifications.md:935
#: ./docs/11.x/notifications.md:953
#: ./docs/master/notifications.md:935
msgid "return (new BroadcastMessage($data))\n"
"                ->onConnection('sqs')\n"
"                ->onQueue('broadcasts');"
msgstr ""

#: ./docs/8.x/notifications.md:814
#: ./docs/9.x/notifications.md:953
#: ./docs/10.x/notifications.md:939
#: ./docs/11.x/notifications.md:957
#: ./docs/master/notifications.md:939
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-notification-type\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:815
#: ./docs/9.x/notifications.md:954
msgid "Customizing The Notification Type"
msgstr ""

#: ./docs/8.x/notifications.md:817
#: ./docs/9.x/notifications.md:956
#: ./docs/10.x/notifications.md:942
#: ./docs/11.x/notifications.md:960
#: ./docs/master/notifications.md:942
msgid "In addition to the data you specify, all broadcast notifications also have a `type` field containing the full class name of the notification. If you would like to customize the notification `type`, you may define a `broadcastType` method on the notification class:"
msgstr ""

#: ./docs/8.x/notifications.md:819
#: ./docs/9.x/notifications.md:958
msgid "use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\n"
"/**\n"
" * Get the type of the notification being broadcast.\n"
" *\n"
" * @return string\n"
" */\n"
"public function broadcastType()\n"
"{\n"
"    return 'broadcast.message';\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:820
#: ./docs/11.x/notifications.md:838
#: ./docs/master/notifications.md:820
msgid "If your notifiable models are using [UUID or ULID primary keys](/docs/{{version}}/eloquent#uuid-and-ulid-keys), you should replace the `morphs` method with [`uuidMorphs`](/docs/{{version}}/migrations#column-method-uuidMorphs) or [`ulidMorphs`](/docs/{{version}}/migrations#column-method-ulidMorphs) in the notification table migration."
msgstr ""

#: ./docs/10.x/notifications.md:827
#: ./docs/11.x/notifications.md:845
#: ./docs/master/notifications.md:827
msgid "/**\n"
" * Get the array representation of the notification.\n"
" *\n"
" * @return array<string, mixed>\n"
" */\n"
"public function toArray(object $notifiable): array\n"
"{\n"
"    return [\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:829
#: ./docs/master/notifications.md:811
msgid "You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the `make:notifications-table` command to generate a [migration](/docs/{{version}}/migrations) with the proper table schema:"
msgstr ""

#: ./docs/11.x/notifications.md:831
#: ./docs/master/notifications.md:813
msgid "php artisan make:notifications-table\n\n"
"php artisan migrate"
msgstr ""

#: ./docs/8.x/notifications.md:831
#: ./docs/9.x/notifications.md:970
#: ./docs/10.x/notifications.md:952
#: ./docs/11.x/notifications.md:970
#: ./docs/master/notifications.md:952
#~ msgctxt "P"
#~ msgid "<a name=\"listening-for-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:832
#: ./docs/9.x/notifications.md:971
msgid "Listening For Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:834
#: ./docs/9.x/notifications.md:973
#: ./docs/10.x/notifications.md:955
#: ./docs/11.x/notifications.md:973
#: ./docs/master/notifications.md:955
msgid "Notifications will broadcast on a private channel formatted using a `{notifiable}.{id}` convention. So, if you are sending a notification to an `App\\Models\\User` instance with an ID of `1`, the notification will be broadcast on the `App.Models.User.1` private channel. When using [Laravel Echo](/docs/{{version}}/broadcasting#client-side-installation), you may easily listen for notifications on a channel using the `notification` method:"
msgstr ""

#: ./docs/8.x/notifications.md:836
#: ./docs/9.x/notifications.md:975
#: ./docs/10.x/notifications.md:957
#: ./docs/11.x/notifications.md:975
#: ./docs/master/notifications.md:957
msgid "Echo.private('App.Models.User.' + userId)\n"
"    .notification((notification) => {\n"
"        console.log(notification.type);\n"
"    });"
msgstr ""

#: ./docs/10.x/notifications.md:840
#: ./docs/11.x/notifications.md:858
#: ./docs/master/notifications.md:840
msgid "When the notification is stored in your application's database, the `type` column will be populated with the notification's class name. However, you may customize this behavior by defining a `databaseType` method on your notification class:"
msgstr ""

#: ./docs/8.x/notifications.md:841
#: ./docs/9.x/notifications.md:980
#: ./docs/10.x/notifications.md:962
#: ./docs/11.x/notifications.md:980
#: ./docs/master/notifications.md:962
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-notification-channel\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:842
#: ./docs/11.x/notifications.md:860
#: ./docs/master/notifications.md:842
msgid "/**\n"
" * Get the notification's database type.\n"
" *\n"
" * @return string\n"
" */\n"
"public function databaseType(object $notifiable): string\n"
"{\n"
"    return 'invoice-paid';\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:842
#: ./docs/9.x/notifications.md:981
msgid "Customizing The Notification Channel"
msgstr ""

#: ./docs/8.x/notifications.md:844
#: ./docs/9.x/notifications.md:983
#: ./docs/10.x/notifications.md:965
#: ./docs/11.x/notifications.md:983
#: ./docs/master/notifications.md:965
msgid "If you would like to customize which channel that an entity's broadcast notifications are broadcast on, you may define a `receivesBroadcastNotificationsOn` method on the notifiable entity:"
msgstr ""

#: ./docs/8.x/notifications.md:846
#: ./docs/9.x/notifications.md:985
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * The channels the user receives notification broadcasts on.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function receivesBroadcastNotificationsOn()\n"
"    {\n"
"        return 'users.'.$this->id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:853
#: ./docs/11.x/notifications.md:871
#: ./docs/master/notifications.md:853
msgid "`toDatabase` vs. `toArray`"
msgstr ""

#: ./docs/10.x/notifications.md:858
#: ./docs/11.x/notifications.md:876
#: ./docs/master/notifications.md:858
msgid "Accessing the Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:869
#: ./docs/9.x/notifications.md:1008
#: ./docs/10.x/notifications.md:988
#: ./docs/11.x/notifications.md:1006
#: ./docs/master/notifications.md:988
#~ msgctxt "P"
#~ msgid "<a name=\"sms-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:870
#: ./docs/9.x/notifications.md:1009
#: ./docs/10.x/notifications.md:989
#: ./docs/11.x/notifications.md:1007
#: ./docs/master/notifications.md:989
msgid "SMS Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:872
#: ./docs/9.x/notifications.md:1011
#: ./docs/10.x/notifications.md:991
#: ./docs/11.x/notifications.md:1009
#: ./docs/master/notifications.md:991
#~ msgctxt "P"
#~ msgid "<a name=\"sms-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:875
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/nexmo-notification-channel` and `nexmo/laravel` Composer packages"
msgstr ""

#: ./docs/8.x/notifications.md:877
msgid "composer require laravel/nexmo-notification-channel nexmo/laravel"
msgstr ""

#: ./docs/8.x/notifications.md:879
msgid "The `nexmo/laravel` package includes [its own configuration file](https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php). However, you are not required to export this configuration file to your own application. You can simply use the `NEXMO_KEY` and `NEXMO_SECRET` environment variables to set your Vonage public and secret key."
msgstr ""

#: ./docs/10.x/notifications.md:880
#: ./docs/11.x/notifications.md:898
#: ./docs/master/notifications.md:880
msgid "Marking Notifications as Read"
msgstr ""

#: ./docs/8.x/notifications.md:881
msgid "Next, you will need to add a `nexmo` configuration entry to your `config/services.php` configuration file. You may copy the example configuration below to get started:"
msgstr ""

#: ./docs/8.x/notifications.md:883
msgid "'nexmo' => [\n"
"    'sms_from' => '15556666666',\n"
"],"
msgstr ""

#: ./docs/8.x/notifications.md:887
msgid "The `sms_from` option is the phone number that your SMS messages will be sent from. You should generate a phone number for your application in the Vonage control panel."
msgstr ""

#: ./docs/8.x/notifications.md:889
#: ./docs/9.x/notifications.md:1024
#: ./docs/10.x/notifications.md:1004
#: ./docs/11.x/notifications.md:1022
#: ./docs/master/notifications.md:1004
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-sms-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:890
#: ./docs/9.x/notifications.md:1025
#: ./docs/10.x/notifications.md:1005
#: ./docs/11.x/notifications.md:1023
#: ./docs/master/notifications.md:1005
msgid "Formatting SMS Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:892
msgid "If a notification supports being sent as an SMS, you should define a `toNexmo` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\NexmoMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:894
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:906
#: ./docs/9.x/notifications.md:1041
#: ./docs/10.x/notifications.md:1020
#: ./docs/11.x/notifications.md:1038
#: ./docs/master/notifications.md:1020
#~ msgctxt "P"
#~ msgid "<a name=\"unicode-content\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:907
#: ./docs/9.x/notifications.md:1042
#: ./docs/10.x/notifications.md:1021
#: ./docs/11.x/notifications.md:1039
#: ./docs/master/notifications.md:1021
msgid "Unicode Content"
msgstr ""

#: ./docs/8.x/notifications.md:909
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `NexmoMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:911
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:917
#: ./docs/11.x/notifications.md:935
#: ./docs/master/notifications.md:917
msgid "use Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\n"
"/**\n"
" * Get the broadcastable representation of the notification.\n"
" */\n"
"public function toBroadcast(object $notifiable): BroadcastMessage\n"
"{\n"
"    return new BroadcastMessage([\n"
"        'invoice_id' => $this->invoice->id,\n"
"        'amount' => $this->invoice->amount,\n"
"    ]);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:924
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-shortcode-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:925
msgid "Formatting Shortcode Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:927
msgid "Laravel also supports sending shortcode notifications, which are pre-defined message templates in your Vonage account. To send a shortcode SMS notification, you should define a `toShortcode` method on your notification class. From within this method, you may return an array specifying the type of notification (`alert`, `2fa`, or `marketing`) as well as the custom values that will populate the template:"
msgstr ""

#: ./docs/8.x/notifications.md:929
msgid "/**\n"
" * Get the Vonage / Shortcode representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return array\n"
" */\n"
"public function toShortcode($notifiable)\n"
"{\n"
"    return [\n"
"        'type' => 'alert',\n"
"        'custom' => [\n"
"            'code' => 'ABC123',\n"
"        ],\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:940
#: ./docs/11.x/notifications.md:958
#: ./docs/master/notifications.md:940
msgid "Customizing the Notification Type"
msgstr ""

#: ./docs/10.x/notifications.md:944
#: ./docs/11.x/notifications.md:962
#: ./docs/master/notifications.md:944
msgid "/**\n"
" * Get the type of the notification being broadcast.\n"
" */\n"
"public function broadcastType(): string\n"
"{\n"
"    return 'broadcast.message';\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:945
msgid "Like [routing SMS Notifications](#routing-sms-notifications), you should implement the `routeNotificationForShortcode` method on your notifiable model."
msgstr ""

#: ./docs/8.x/notifications.md:947
#: ./docs/9.x/notifications.md:1059
#: ./docs/10.x/notifications.md:1037
#: ./docs/11.x/notifications.md:1055
#: ./docs/master/notifications.md:1037
#~ msgctxt "P"
#~ msgid "<a name=\"customizing-the-from-number\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:948
#: ./docs/9.x/notifications.md:1060
msgid "Customizing The \"From\" Number"
msgstr ""

#: ./docs/8.x/notifications.md:950
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified in your `config/services.php` file, you may call the `from` method on a `NexmoMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:952
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:953
#: ./docs/11.x/notifications.md:971
#: ./docs/master/notifications.md:953
msgid "Listening for Notifications"
msgstr ""

#: ./docs/10.x/notifications.md:963
#: ./docs/11.x/notifications.md:981
#: ./docs/master/notifications.md:963
msgid "Customizing the Notification Channel"
msgstr ""

#: ./docs/8.x/notifications.md:965
#: ./docs/9.x/notifications.md:1077
#: ./docs/10.x/notifications.md:1054
#: ./docs/11.x/notifications.md:1072
#: ./docs/master/notifications.md:1054
#~ msgctxt "P"
#~ msgid "<a name=\"adding-a-client-reference\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:966
#: ./docs/9.x/notifications.md:1078
#: ./docs/10.x/notifications.md:1055
#: ./docs/11.x/notifications.md:1073
#: ./docs/master/notifications.md:1055
msgid "Adding a Client Reference"
msgstr ""

#: ./docs/10.x/notifications.md:967
#: ./docs/11.x/notifications.md:985
#: ./docs/master/notifications.md:967
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * The channels the user receives notification broadcasts on.\n"
"     */\n"
"    public function receivesBroadcastNotificationsOn(): string\n"
"    {\n"
"        return 'users.'.$this->id;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:968
#: ./docs/9.x/notifications.md:1080
#: ./docs/10.x/notifications.md:1057
#: ./docs/11.x/notifications.md:1075
#: ./docs/master/notifications.md:1057
msgid "If you would like to keep track of costs per user, team, or client, you may add a \"client reference\" to the notification. Vonage will allow you to generate reports using this client reference so that you can better understand a particular customer's SMS usage. The client reference can be any string up to 40 characters:"
msgstr ""

#: ./docs/8.x/notifications.md:970
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return NexmoMessage\n"
" */\n"
"public function toNexmo($notifiable)\n"
"{\n"
"    return (new NexmoMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:983
#: ./docs/9.x/notifications.md:1095
#: ./docs/10.x/notifications.md:1071
#: ./docs/11.x/notifications.md:1089
#: ./docs/master/notifications.md:1071
#~ msgctxt "P"
#~ msgid "<a name=\"routing-sms-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:984
#: ./docs/9.x/notifications.md:1096
#: ./docs/10.x/notifications.md:1072
#: ./docs/11.x/notifications.md:1090
#: ./docs/master/notifications.md:1072
msgid "Routing SMS Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:986
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForNexmo` method on your notifiable entity:"
msgstr ""

#: ./docs/8.x/notifications.md:988
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Nexmo channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForNexmo($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1009
#: ./docs/11.x/notifications.md:1027
#: ./docs/master/notifications.md:1009
msgid "use Illuminate\\Notifications\\Messages\\VonageMessage;\n\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1011
#: ./docs/9.x/notifications.md:1123
#: ./docs/10.x/notifications.md:1097
#: ./docs/11.x/notifications.md:1115
#: ./docs/master/notifications.md:1097
#~ msgctxt "P"
#~ msgid "<a name=\"slack-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1012
#: ./docs/9.x/notifications.md:1124
#: ./docs/10.x/notifications.md:1098
#: ./docs/11.x/notifications.md:1116
#: ./docs/master/notifications.md:1098
msgid "Slack Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:1014
#: ./docs/9.x/notifications.md:1126
#: ./docs/10.x/notifications.md:1100
#: ./docs/11.x/notifications.md:1118
#: ./docs/master/notifications.md:1100
#~ msgctxt "P"
#~ msgid "<a name=\"slack-prerequisites\"></a>"
#~ msgstr ""

#: ./docs/9.x/notifications.md:1014
#: ./docs/10.x/notifications.md:994
#: ./docs/11.x/notifications.md:1012
#: ./docs/master/notifications.md:994
msgid "Sending SMS notifications in Laravel is powered by [Vonage](https://www.vonage.com/) (formerly known as Nexmo). Before you can send notifications via Vonage, you need to install the `laravel/vonage-notification-channel` and `guzzlehttp/guzzle` packages:"
msgstr ""

#: ./docs/9.x/notifications.md:1016
#: ./docs/10.x/notifications.md:996
#: ./docs/11.x/notifications.md:1014
#: ./docs/master/notifications.md:996
msgid "composer require laravel/vonage-notification-channel guzzlehttp/guzzle"
msgstr ""

#: ./docs/8.x/notifications.md:1017
#: ./docs/9.x/notifications.md:1129
msgid "Before you can send notifications via Slack, you must install the Slack notification channel via Composer:"
msgstr ""

#: ./docs/9.x/notifications.md:1018
#: ./docs/10.x/notifications.md:998
#: ./docs/11.x/notifications.md:1016
#: ./docs/master/notifications.md:998
msgid "The package includes a [configuration file](https://github.com/laravel/vonage-notification-channel/blob/3.x/config/vonage.php). However, you are not required to export this configuration file to your own application. You can simply use the `VONAGE_KEY` and `VONAGE_SECRET` environment variables to define your Vonage public and secret keys."
msgstr ""

#: ./docs/8.x/notifications.md:1019
#: ./docs/9.x/notifications.md:1131
#: ./docs/10.x/notifications.md:1105
#: ./docs/11.x/notifications.md:1123
#: ./docs/master/notifications.md:1105
msgid "composer require laravel/slack-notification-channel"
msgstr ""

#: ./docs/9.x/notifications.md:1020
#: ./docs/10.x/notifications.md:1000
#: ./docs/11.x/notifications.md:1018
#: ./docs/master/notifications.md:1000
msgid "After defining your keys, you should set a `VONAGE_SMS_FROM` environment variable that defines the phone number that your SMS messages should be sent from by default. You may generate this phone number within the Vonage control panel:"
msgstr ""

#: ./docs/8.x/notifications.md:1021
#: ./docs/9.x/notifications.md:1135
msgid "You will also need to create a [Slack App](https://api.slack.com/apps?new_app=1) for your team. After creating the App, you should configure an \"Incoming Webhook\" for the workspace. Slack will then provide you with a webhook URL that you may use when [routing Slack notifications](#routing-slack-notifications)."
msgstr ""

#: ./docs/9.x/notifications.md:1022
#: ./docs/10.x/notifications.md:1002
#: ./docs/11.x/notifications.md:1020
#: ./docs/master/notifications.md:1002
msgid "VONAGE_SMS_FROM=15556666666"
msgstr ""

#: ./docs/8.x/notifications.md:1023
#: ./docs/9.x/notifications.md:1137
#: ./docs/10.x/notifications.md:1127
#: ./docs/11.x/notifications.md:1145
#: ./docs/master/notifications.md:1127
#~ msgctxt "P"
#~ msgid "<a name=\"formatting-slack-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1024
#: ./docs/9.x/notifications.md:1138
#: ./docs/10.x/notifications.md:1128
#: ./docs/11.x/notifications.md:1146
#: ./docs/master/notifications.md:1128
msgid "Formatting Slack Notifications"
msgstr ""

#: ./docs/10.x/notifications.md:1025
#: ./docs/11.x/notifications.md:1043
#: ./docs/master/notifications.md:1025
msgid "use Illuminate\\Notifications\\Messages\\VonageMessage;\n\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1026
#: ./docs/9.x/notifications.md:1140
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\SlackMessage` instance. Slack messages may contain text content as well as an \"attachment\" that formats additional text or an array of fields. Let's take a look at a basic `toSlack` example:"
msgstr ""

#: ./docs/9.x/notifications.md:1027
#: ./docs/10.x/notifications.md:1007
#: ./docs/11.x/notifications.md:1025
#: ./docs/master/notifications.md:1007
msgid "If a notification supports being sent as an SMS, you should define a `toVonage` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Messages\\VonageMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:1028
#: ./docs/9.x/notifications.md:1142
msgid "/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    return (new SlackMessage)\n"
"                ->content('One of your invoices has been paid!');\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1029
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1038
#: ./docs/11.x/notifications.md:1056
#: ./docs/master/notifications.md:1038
msgid "Customizing the \"From\" Number"
msgstr ""

#: ./docs/8.x/notifications.md:1040
#: ./docs/9.x/notifications.md:1154
#~ msgctxt "P"
#~ msgid "<a name=\"slack-attachments\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1041
#: ./docs/9.x/notifications.md:1155
msgid "Slack Attachments"
msgstr ""

#: ./docs/10.x/notifications.md:1042
#: ./docs/11.x/notifications.md:1060
#: ./docs/master/notifications.md:1042
msgid "use Illuminate\\Notifications\\Messages\\VonageMessage;\n\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1043
#: ./docs/9.x/notifications.md:1157
msgid "You may also add \"attachments\" to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:"
msgstr ""

#: ./docs/9.x/notifications.md:1044
#: ./docs/10.x/notifications.md:1023
#: ./docs/11.x/notifications.md:1041
#: ./docs/master/notifications.md:1023
msgid "If your SMS message will contain unicode characters, you should call the `unicode` method when constructing the `VonageMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:1045
#: ./docs/9.x/notifications.md:1159
msgid "/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was not found.');\n"
"                });\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1046
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your unicode message')\n"
"                ->unicode();\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1059
#: ./docs/11.x/notifications.md:1077
#: ./docs/master/notifications.md:1059
msgid "use Illuminate\\Notifications\\Messages\\VonageMessage;\n\n"
"/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" */\n"
"public function toVonage(object $notifiable): VonageMessage\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1062
#: ./docs/10.x/notifications.md:1040
#: ./docs/11.x/notifications.md:1058
#: ./docs/master/notifications.md:1040
msgid "If you would like to send some notifications from a phone number that is different from the phone number specified by your `VONAGE_SMS_FROM` environment variable, you may call the `from` method on a `VonageMessage` instance:"
msgstr ""

#: ./docs/8.x/notifications.md:1064
#: ./docs/9.x/notifications.md:1178
msgid "Attachments also allow you to specify an array of data that should be presented to the user. The given data will be presented in a table-style format for easy reading:"
msgstr ""

#: ./docs/9.x/notifications.md:1064
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->content('Your SMS message content')\n"
"                ->from('15554443333');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1066
#: ./docs/9.x/notifications.md:1180
msgid "/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/invoices/'.$this->invoice->id);\n\n"
"    return (new SlackMessage)\n"
"                ->success()\n"
"                ->content('One of your invoices has been paid!')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Invoice 1322', $url)\n"
"                               ->fields([\n"
"                                    'Title' => 'Server Expenses',\n"
"                                    'Amount' => '$1,234',\n"
"                                    'Via' => 'American Express',\n"
"                                    'Was Overdue' => ':-1:',\n"
"                                ]);\n"
"                });\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1076
#: ./docs/11.x/notifications.md:1094
#: ./docs/master/notifications.md:1076
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Vonage channel.\n"
"     */\n"
"    public function routeNotificationForVonage(Notification $notification): string\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1082
msgid "/**\n"
" * Get the Vonage / SMS representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return \\Illuminate\\Notifications\\Messages\\VonageMessage\n"
" */\n"
"public function toVonage($notifiable)\n"
"{\n"
"    return (new VonageMessage)\n"
"                ->clientReference((string) $notifiable->id)\n"
"                ->content('Your SMS message content');\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1090
#: ./docs/9.x/notifications.md:1204
#~ msgctxt "P"
#~ msgid "<a name=\"markdown-attachment-content\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1091
#: ./docs/9.x/notifications.md:1205
msgid "Markdown Attachment Content"
msgstr ""

#: ./docs/8.x/notifications.md:1093
#: ./docs/9.x/notifications.md:1207
msgid "If some of your attachment fields contain Markdown, you may use the `markdown` method to instruct Slack to parse and display the given attachment fields as Markdown formatted text. The values accepted by this method are: `pretext`, `text`, and / or `fields`. For more information about Slack attachment formatting, check out the [Slack API documentation](https://api.slack.com/docs/message-formatting#message_formatting):"
msgstr ""

#: ./docs/8.x/notifications.md:1095
#: ./docs/9.x/notifications.md:1209
msgid "/**\n"
" * Get the Slack representation of the notification.\n"
" *\n"
" * @param  mixed  $notifiable\n"
" * @return SlackMessage\n"
" */\n"
"public function toSlack($notifiable)\n"
"{\n"
"    $url = url('/exceptions/'.$this->exception->id);\n\n"
"    return (new SlackMessage)\n"
"                ->error()\n"
"                ->content('Whoops! Something went wrong.')\n"
"                ->attachment(function ($attachment) use ($url) {\n"
"                    $attachment->title('Exception: File Not Found', $url)\n"
"                               ->content('File [background.jpg] was *not found*.')\n"
"                               ->markdown(['text']);\n"
"                });\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1098
#: ./docs/10.x/notifications.md:1074
#: ./docs/11.x/notifications.md:1092
#: ./docs/master/notifications.md:1074
msgid "To route Vonage notifications to the proper phone number, define a `routeNotificationForVonage` method on your notifiable entity:"
msgstr ""

#: ./docs/9.x/notifications.md:1100
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Vonage channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForVonage($notification)\n"
"    {\n"
"        return $this->phone_number;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1103
#: ./docs/11.x/notifications.md:1121
#: ./docs/master/notifications.md:1103
msgid "Before sending Slack notifications, you should install the Slack notification channel via Composer:"
msgstr ""

#: ./docs/10.x/notifications.md:1109
#: ./docs/11.x/notifications.md:1127
#: ./docs/master/notifications.md:1109
msgid "Additionally, you must create a [Slack App](https://api.slack.com/apps?new_app=1) for your Slack workspace."
msgstr ""

#: ./docs/10.x/notifications.md:1111
#: ./docs/master/notifications.md:1111
msgid "If you only need to send notifications to the same Slack workspace that the App is created in, you should ensure that your App has the `chat:write`, `chat:write.public`, and `chat:write.customize` scopes. These scopes can be added from the \"OAuth & Permissions\" App management tab within Slack."
msgstr ""

#: ./docs/10.x/notifications.md:1113
#: ./docs/11.x/notifications.md:1131
#: ./docs/master/notifications.md:1113
msgid "Next, copy the App's \"Bot User OAuth Token\" and place it within a `slack` configuration array in your application's `services.php` configuration file. This token can be found on the \"OAuth & Permissions\" tab within Slack:"
msgstr ""

#: ./docs/10.x/notifications.md:1115
#: ./docs/11.x/notifications.md:1133
#: ./docs/master/notifications.md:1115
msgid "'slack' => [\n"
"    'notifications' => [\n"
"        'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),\n"
"        'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/notifications.md:1115
#: ./docs/9.x/notifications.md:1229
#: ./docs/10.x/notifications.md:1242
#: ./docs/11.x/notifications.md:1298
#: ./docs/master/notifications.md:1242
#~ msgctxt "P"
#~ msgid "<a name=\"routing-slack-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1116
#: ./docs/9.x/notifications.md:1230
#: ./docs/10.x/notifications.md:1243
#: ./docs/11.x/notifications.md:1299
#: ./docs/master/notifications.md:1243
msgid "Routing Slack Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:1118
#: ./docs/9.x/notifications.md:1232
msgid "To route Slack notifications to the proper Slack team and channel, define a `routeNotificationForSlack` method on your notifiable entity. This should return the webhook URL to which the notification should be delivered. Webhook URLs may be generated by adding an \"Incoming Webhook\" service to your Slack team:"
msgstr ""

#: ./docs/8.x/notifications.md:1120
#: ./docs/9.x/notifications.md:1234
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     *\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return string\n"
"     */\n"
"    public function routeNotificationForSlack($notification)\n"
"    {\n"
"        return 'https://hooks.slack.com/services/...';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1122
#: ./docs/11.x/notifications.md:1140
#: ./docs/master/notifications.md:1122
#~ msgctxt "P"
#~ msgid "<a name=\"slack-app-distribution\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1123
#: ./docs/11.x/notifications.md:1141
#: ./docs/master/notifications.md:1123
msgid "App Distribution"
msgstr ""

#: ./docs/10.x/notifications.md:1125
#: ./docs/11.x/notifications.md:1143
#: ./docs/master/notifications.md:1125
msgid "If your application will be sending notifications to external Slack workspaces that are owned by your application's users, you will need to \"distribute\" your App via Slack. App distribution can be managed from your App's \"Manage Distribution\" tab within Slack. Once your App has been distributed, you may use [Socialite](/docs/{{version}}/socialite) to [obtain Slack Bot tokens](/docs/{{version}}/socialite#slack-bot-scopes) on behalf of your application's users."
msgstr ""

#: ./docs/11.x/notifications.md:1129
msgid "If you only need to send notifications to the same Slack workspace that the App is created in, you should ensure that your App has the `chat:write`, `chat:write.public`, and `chat:write.customize` scopes. If you want to send messages as your Slack App, you should ensure that your App also has the `chat:write:bot` scope. These scopes can be added from the \"OAuth & Permissions\" App management tab within Slack."
msgstr ""

#: ./docs/10.x/notifications.md:1130
#: ./docs/11.x/notifications.md:1148
#: ./docs/master/notifications.md:1130
msgid "If a notification supports being sent as a Slack message, you should define a `toSlack` method on the notification class. This method will receive a `$notifiable` entity and should return an `Illuminate\\Notifications\\Slack\\SlackMessage` instance. You can construct rich notifications using [Slack's Block Kit API](https://api.slack.com/block-kit). The following example may be previewed in [Slack's Block Kit builder](https://app.slack.com/block-kit-builder/T01KWS6K23Z#%7B%22blocks%22:%5B%7B%22type%22:%22header%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Invoice%20Paid%22%7D%7D,%7B%22type%22:%22context%22,%22elements%22:%5B%7B%22type%22:%22plain_text%22,%22text%22:%22Customer%20%231234%22%7D%5D%7D,%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22An%20invoice%20has%20been%20paid.%22%7D,%22fields%22:%5B%7B%22type%22:%22mrkdwn%22,%22text%22:%22*Invoice%20No:*%5Cn1000%22%7D,%7B%22type%22:%22mrkdwn%22,%22text%22:%22*Invoice%20Recipient:*%5Cntaylor@laravel.com%22%7D%5D%7D,%7B%22type%22:%22divider%22%7D,%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Congratulations!%22%7D%7D%5D%7D):"
msgstr ""

#: ./docs/10.x/notifications.md:1132
#: ./docs/11.x/notifications.md:1150
#: ./docs/master/notifications.md:1132
msgid "use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Composites\\ConfirmObject;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"                $block->field(\"*Invoice No:*\\n1000\")->markdown();\n"
"                $block->field(\"*Invoice Recipient:*\\ntaylor@laravel.com\")->markdown();\n"
"            })\n"
"            ->dividerBlock()\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('Congratulations!');\n"
"            });\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1143
#: ./docs/9.x/notifications.md:1257
#: ./docs/10.x/notifications.md:1306
#: ./docs/11.x/notifications.md:1362
#: ./docs/master/notifications.md:1306
#~ msgctxt "P"
#~ msgid "<a name=\"localizing-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1144
#: ./docs/9.x/notifications.md:1258
#: ./docs/10.x/notifications.md:1307
#: ./docs/11.x/notifications.md:1363
#: ./docs/master/notifications.md:1307
msgid "Localizing Notifications"
msgstr ""

#: ./docs/8.x/notifications.md:1146
#: ./docs/9.x/notifications.md:1260
#: ./docs/10.x/notifications.md:1309
#: ./docs/11.x/notifications.md:1365
#: ./docs/master/notifications.md:1309
msgid "Laravel allows you to send notifications in a locale other than the HTTP request's current locale, and will even remember this locale if the notification is queued."
msgstr ""

#: ./docs/8.x/notifications.md:1148
#: ./docs/9.x/notifications.md:1262
#: ./docs/10.x/notifications.md:1311
#: ./docs/11.x/notifications.md:1367
#: ./docs/master/notifications.md:1311
msgid "To accomplish this, the `Illuminate\\Notifications\\Notification` class offers a `locale` method to set the desired language. The application will change into this locale when the notification is being evaluated and then revert back to the previous locale when evaluation is complete:"
msgstr ""

#: ./docs/8.x/notifications.md:1150
#: ./docs/9.x/notifications.md:1264
#: ./docs/10.x/notifications.md:1313
#: ./docs/11.x/notifications.md:1369
#: ./docs/master/notifications.md:1313
msgid "$user->notify((new InvoicePaid($invoice))->locale('es'));"
msgstr ""

#: ./docs/8.x/notifications.md:1152
#: ./docs/9.x/notifications.md:1266
#: ./docs/10.x/notifications.md:1315
#: ./docs/11.x/notifications.md:1371
#: ./docs/master/notifications.md:1315
msgid "Localization of multiple notifiable entries may also be achieved via the `Notification` facade:"
msgstr ""

#: ./docs/8.x/notifications.md:1154
#: ./docs/9.x/notifications.md:1268
#: ./docs/10.x/notifications.md:1317
#: ./docs/11.x/notifications.md:1373
#: ./docs/master/notifications.md:1317
msgid "Notification::locale('es')->send(\n"
"    $users, new InvoicePaid($invoice)\n"
");"
msgstr ""

#: ./docs/8.x/notifications.md:1158
#: ./docs/9.x/notifications.md:1272
#: ./docs/10.x/notifications.md:1321
#: ./docs/11.x/notifications.md:1377
#: ./docs/master/notifications.md:1321
#~ msgctxt "P"
#~ msgid "<a name=\"user-preferred-locales\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1159
#: ./docs/11.x/notifications.md:1215
#: ./docs/master/notifications.md:1159
#~ msgctxt "P"
#~ msgid "<a name=\"slack-interactivity\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1159
#: ./docs/9.x/notifications.md:1273
#: ./docs/10.x/notifications.md:1322
#: ./docs/11.x/notifications.md:1378
#: ./docs/master/notifications.md:1322
msgid "User Preferred Locales"
msgstr ""

#: ./docs/10.x/notifications.md:1160
#: ./docs/11.x/notifications.md:1216
#: ./docs/master/notifications.md:1160
msgid "Slack Interactivity"
msgstr ""

#: ./docs/8.x/notifications.md:1161
#: ./docs/9.x/notifications.md:1275
#: ./docs/10.x/notifications.md:1324
#: ./docs/11.x/notifications.md:1380
#: ./docs/master/notifications.md:1324
msgid "Sometimes, applications store each user's preferred locale. By implementing the `HasLocalePreference` contract on your notifiable model, you may instruct Laravel to use this stored locale when sending a notification:"
msgstr ""

#: ./docs/10.x/notifications.md:1162
#: ./docs/11.x/notifications.md:1218
#: ./docs/master/notifications.md:1162
msgid "Slack's Block Kit notification system provides powerful features to [handle user interaction](https://api.slack.com/interactivity/handling). To utilize these features, your Slack App should have \"Interactivity\" enabled and a \"Request URL\" configured that points to a URL served by your application. These settings can be managed from the \"Interactivity & Shortcuts\" App management tab within Slack."
msgstr ""

#: ./docs/8.x/notifications.md:1163
#: ./docs/9.x/notifications.md:1277
msgid "use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function preferredLocale()\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1164
#: ./docs/11.x/notifications.md:1220
#: ./docs/master/notifications.md:1164
msgid "In the following example, which utilizes the `actionsBlock` method, Slack will send a `POST` request to your \"Request URL\" with a payload containing the Slack user who clicked the button, the ID of the clicked button, and more. Your application can then determine the action to take based on the payload. You should also [verify the request](https://api.slack.com/authentication/verifying-requests-from-slack) was made by Slack:"
msgstr ""

#: ./docs/10.x/notifications.md:1166
#: ./docs/11.x/notifications.md:1222
#: ./docs/master/notifications.md:1166
msgid "use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ActionsBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"            })\n"
"            ->actionsBlock(function (ActionsBlock $block) {\n"
"                 // ID defaults to \"button_acknowledge_invoice\"...\n"
"                $block->button('Acknowledge Invoice')->primary();\n\n"
"                // Manually configure the ID...\n"
"                $block->button('Deny')->danger()->id('deny_invoice');\n"
"            });\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1177
#~ msgctxt "P"
#~ msgid "<a name=\"using-slacks-block-kit-builder-template\"></a>"
#~ msgstr ""

#: ./docs/11.x/notifications.md:1178
msgid "Using Slack's Block Kit Builder Template"
msgstr ""

#: ./docs/8.x/notifications.md:1178
#: ./docs/9.x/notifications.md:1292
#: ./docs/10.x/notifications.md:1339
#: ./docs/11.x/notifications.md:1395
#: ./docs/master/notifications.md:1339
msgid "Once you have implemented the interface, Laravel will automatically use the preferred locale when sending notifications and mailables to the model. Therefore, there is no need to call the `locale` method when using this interface:"
msgstr ""

#: ./docs/11.x/notifications.md:1180
msgid "Instead of using the fluent message builder methods to construct your Block Kit message, you may provide the raw JSON payload generated by Slack's Block Kit Builder to the `usingBlockKitTemplate` method:"
msgstr ""

#: ./docs/11.x/notifications.md:1182
msgid "use Illuminate\\Notifications\\Slack\\SlackMessage;\n"
"use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    $template = <<<JSON\n"
"        {\n"
"          \"blocks\": [\n"
"            {\n"
"              \"type\": \"header\",\n"
"              \"text\": {\n"
"                \"type\": \"plain_text\",\n"
"                \"text\": \"Team Announcement\"\n"
"              }\n"
"            }, \n"
"            {\n"
"              \"type\": \"section\",\n"
"              \"text\": {\n"
"                \"type\": \"plain_text\",\n"
"                \"text\": \"We are hiring!\"\n"
"              }\n"
"            }\n"
"          ]\n"
"        }\n"
"    JSON;\n\n"
"    return (new SlackMessage)\n"
"            ->usingBlockKitTemplate($template);\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1182
#: ./docs/9.x/notifications.md:1296
#: ./docs/10.x/notifications.md:1409
#: ./docs/11.x/notifications.md:1496
#: ./docs/master/notifications.md:1440
#~ msgctxt "P"
#~ msgid "<a name=\"notification-events\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1183
#: ./docs/9.x/notifications.md:1297
#: ./docs/10.x/notifications.md:1410
#: ./docs/11.x/notifications.md:1497
#: ./docs/master/notifications.md:1441
msgid "Notification Events"
msgstr ""

#: ./docs/8.x/notifications.md:1185
#: ./docs/9.x/notifications.md:1299
#: ./docs/10.x/notifications.md:1412
#: ./docs/11.x/notifications.md:1499
#: ./docs/master/notifications.md:1443
#~ msgctxt "P"
#~ msgid "<a name=\"notification-sending-event\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1186
#: ./docs/9.x/notifications.md:1300
#: ./docs/10.x/notifications.md:1413
#: ./docs/11.x/notifications.md:1500
#: ./docs/master/notifications.md:1444
msgid "Notification Sending Event"
msgstr ""

#: ./docs/8.x/notifications.md:1188
#: ./docs/9.x/notifications.md:1302
#: ./docs/10.x/notifications.md:1415
msgid "When a notification is sending, the `Illuminate\\Notifications\\Events\\NotificationSending` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your application's `EventServiceProvider`:"
msgstr ""

#: ./docs/8.x/notifications.md:1190
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSending' => [\n"
"        'App\\Listeners\\CheckNotificationStatus',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/notifications.md:1194
#: ./docs/11.x/notifications.md:1250
#: ./docs/master/notifications.md:1194
#~ msgctxt "P"
#~ msgid "<a name=\"slack-confirmation-modals\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1195
#: ./docs/11.x/notifications.md:1251
#: ./docs/master/notifications.md:1195
msgid "Confirmation Modals"
msgstr ""

#: ./docs/10.x/notifications.md:1197
#: ./docs/11.x/notifications.md:1253
#: ./docs/master/notifications.md:1197
msgid "If you would like users to be required to confirm an action before it is performed, you may invoke the `confirm` method when defining your button. The `confirm` method accepts a message and a closure which receives a `ConfirmObject` instance:"
msgstr ""

#: ./docs/10.x/notifications.md:1199
#: ./docs/11.x/notifications.md:1255
#: ./docs/master/notifications.md:1199
msgid "use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ActionsBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\ContextBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Blocks\\SectionBlock;\n"
"use Illuminate\\Notifications\\Slack\\BlockKit\\Composites\\ConfirmObject;\n"
"use Illuminate\\Notifications\\Slack\\SlackMessage;\n\n"
"/**\n"
" * Get the Slack representation of the notification.\n"
" */\n"
"public function toSlack(object $notifiable): SlackMessage\n"
"{\n"
"    return (new SlackMessage)\n"
"            ->text('One of your invoices has been paid!')\n"
"            ->headerBlock('Invoice Paid')\n"
"            ->contextBlock(function (ContextBlock $block) {\n"
"                $block->text('Customer #1234');\n"
"            })\n"
"            ->sectionBlock(function (SectionBlock $block) {\n"
"                $block->text('An invoice has been paid.');\n"
"            })\n"
"            ->actionsBlock(function (ActionsBlock $block) {\n"
"                $block->button('Acknowledge Invoice')\n"
"                    ->primary()\n"
"                    ->confirm(\n"
"                        'Acknowledge the payment and send a thank you email?',\n"
"                        function (ConfirmObject $dialog) {\n"
"                            $dialog->confirm('Yes');\n"
"                            $dialog->deny('No');\n"
"                        }\n"
"                    );\n"
"            });\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1201
#: ./docs/9.x/notifications.md:1318
#: ./docs/10.x/notifications.md:1431
#: ./docs/11.x/notifications.md:1517
#: ./docs/master/notifications.md:1461
msgid "The notification will not be sent if an event listener for the `NotificationSending` event returns `false` from its `handle` method:"
msgstr ""

#: ./docs/8.x/notifications.md:1203
#: ./docs/9.x/notifications.md:1320
msgid "use Illuminate\\Notifications\\Events\\NotificationSending;\n\n"
"/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1216
#: ./docs/9.x/notifications.md:1333
#: ./docs/10.x/notifications.md:1443
#: ./docs/11.x/notifications.md:1527
#: ./docs/master/notifications.md:1471
msgid "Within an event listener, you may access the `notifiable`, `notification`, and `channel` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: ./docs/8.x/notifications.md:1218
#: ./docs/9.x/notifications.md:1335
msgid "/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSending  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSending $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1231
#: ./docs/9.x/notifications.md:1348
#: ./docs/10.x/notifications.md:1455
#: ./docs/11.x/notifications.md:1539
#: ./docs/master/notifications.md:1483
#~ msgctxt "P"
#~ msgid "<a name=\"notification-sent-event\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1232
#: ./docs/11.x/notifications.md:1288
#: ./docs/master/notifications.md:1232
#~ msgctxt "P"
#~ msgid "<a name=\"inspecting-slack-blocks\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1232
#: ./docs/9.x/notifications.md:1349
#: ./docs/10.x/notifications.md:1456
#: ./docs/11.x/notifications.md:1540
#: ./docs/master/notifications.md:1484
msgid "Notification Sent Event"
msgstr ""

#: ./docs/10.x/notifications.md:1233
#: ./docs/11.x/notifications.md:1289
#: ./docs/master/notifications.md:1233
msgid "Inspecting Slack Blocks"
msgstr ""

#: ./docs/8.x/notifications.md:1234
#: ./docs/9.x/notifications.md:1351
#: ./docs/10.x/notifications.md:1458
msgid "When a notification is sent, the `Illuminate\\Notifications\\Events\\NotificationSent` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may register listeners for this event in your `EventServiceProvider`:"
msgstr ""

#: ./docs/10.x/notifications.md:1235
#: ./docs/11.x/notifications.md:1291
#: ./docs/master/notifications.md:1235
msgid "If you would like to quickly inspect the blocks you've been building, you can invoke the `dd` method on the `SlackMessage` instance. The `dd` method will generate and dump a URL to Slack's [Block Kit Builder](https://app.slack.com/block-kit-builder/), which displays a preview of the payload and notification in your browser. You may pass `true` to the `dd` method to dump the raw payload:"
msgstr ""

#: ./docs/8.x/notifications.md:1236
msgid "/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    'Illuminate\\Notifications\\Events\\NotificationSent' => [\n"
"        'App\\Listeners\\LogNotification',\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/notifications.md:1237
#: ./docs/11.x/notifications.md:1293
#: ./docs/master/notifications.md:1237
msgid "return (new SlackMessage)\n"
"        ->text('One of your invoices has been paid!')\n"
"        ->headerBlock('Invoice Paid')\n"
"        ->dd();"
msgstr ""

#: ./docs/10.x/notifications.md:1245
#: ./docs/11.x/notifications.md:1301
#: ./docs/master/notifications.md:1245
msgid "To direct Slack notifications to the appropriate Slack team and channel, define a `routeNotificationForSlack` method on your notifiable model. This method can return one of three values:"
msgstr ""

#: ./docs/10.x/notifications.md:1247
#: ./docs/11.x/notifications.md:1303
#: ./docs/master/notifications.md:1247
msgid "`null` - which defers routing to the channel configured in the notification itself. You may use the `to` method when building your `SlackMessage` to configure the channel within the notification."
msgstr ""

#: ./docs/8.x/notifications.md:1247
#: ./docs/9.x/notifications.md:1368
#: ./docs/10.x/notifications.md:1475
msgid "After registering listeners in your `EventServiceProvider`, use the `event:generate` Artisan command to quickly generate listener classes."
msgstr ""

#: ./docs/10.x/notifications.md:1248
#: ./docs/11.x/notifications.md:1304
#: ./docs/master/notifications.md:1248
msgid "A string specifying the Slack channel to send the notification to, e.g. `#support-channel`."
msgstr ""

#: ./docs/10.x/notifications.md:1249
#: ./docs/11.x/notifications.md:1305
#: ./docs/master/notifications.md:1249
msgid "A `SlackRoute` instance, which allows you to specify an OAuth token and channel name, e.g. `SlackRoute::make($this->slack_channel, $this->slack_token)`. This method should be used to send notifications to external workspaces."
msgstr ""

#: ./docs/8.x/notifications.md:1249
#: ./docs/9.x/notifications.md:1370
#: ./docs/10.x/notifications.md:1477
#: ./docs/11.x/notifications.md:1557
#: ./docs/master/notifications.md:1501
msgid "Within an event listener, you may access the `notifiable`, `notification`, `channel`, and `response` properties on the event to learn more about the notification recipient or the notification itself:"
msgstr ""

#: ./docs/10.x/notifications.md:1251
#: ./docs/11.x/notifications.md:1307
#: ./docs/master/notifications.md:1251
msgid "For instance, returning `#support-channel` from the `routeNotificationForSlack` method will send the notification to the `#support-channel` channel in the workspace associated with the Bot User OAuth token located in your application's `services.php` configuration file:"
msgstr ""

#: ./docs/8.x/notifications.md:1251
#: ./docs/9.x/notifications.md:1372
msgid "/**\n"
" * Handle the event.\n"
" *\n"
" * @param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n"
" * @return void\n"
" */\n"
"public function handle(NotificationSent $event)\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1253
#: ./docs/11.x/notifications.md:1309
#: ./docs/master/notifications.md:1253
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     */\n"
"    public function routeNotificationForSlack(Notification $notification): mixed\n"
"    {\n"
"        return '#support-channel';\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1265
#: ./docs/9.x/notifications.md:1386
#: ./docs/10.x/notifications.md:1490
#: ./docs/11.x/notifications.md:1570
#: ./docs/master/notifications.md:1514
#~ msgctxt "P"
#~ msgid "<a name=\"custom-channels\"></a>"
#~ msgstr ""

#: ./docs/8.x/notifications.md:1266
#: ./docs/9.x/notifications.md:1387
#: ./docs/10.x/notifications.md:1491
#: ./docs/11.x/notifications.md:1571
#: ./docs/master/notifications.md:1515
msgid "Custom Channels"
msgstr ""

#: ./docs/8.x/notifications.md:1268
#: ./docs/9.x/notifications.md:1389
#: ./docs/10.x/notifications.md:1493
#: ./docs/11.x/notifications.md:1573
#: ./docs/master/notifications.md:1517
msgid "Laravel ships with a handful of notification channels, but you may want to write your own drivers to deliver notifications via other channels. Laravel makes it simple. To get started, define a class that contains a `send` method. The method should receive two arguments: a `$notifiable` and a `$notification`."
msgstr ""

#: ./docs/8.x/notifications.md:1270
#: ./docs/9.x/notifications.md:1391
#: ./docs/10.x/notifications.md:1495
#: ./docs/11.x/notifications.md:1575
#: ./docs/master/notifications.md:1519
msgid "Within the `send` method, you may call methods on the notification to retrieve a message object understood by your channel and then send the notification to the `$notifiable` instance however you wish:"
msgstr ""

#: ./docs/8.x/notifications.md:1272
#: ./docs/9.x/notifications.md:1393
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class VoiceChannel\n"
"{\n"
"    /**\n"
"     * Send the given notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @param  \\Illuminate\\Notifications\\Notification  $notification\n"
"     * @return void\n"
"     */\n"
"    public function send($notifiable, Notification $notification)\n"
"    {\n"
"        $message = $notification->toVoice($notifiable);\n\n"
"        // Send notification to the $notifiable instance...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1274
#: ./docs/11.x/notifications.md:1330
#: ./docs/master/notifications.md:1274
#~ msgctxt "P"
#~ msgid "<a name=\"notifying-external-slack-workspaces\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1275
#: ./docs/11.x/notifications.md:1331
#: ./docs/master/notifications.md:1275
msgid "Notifying External Slack Workspaces"
msgstr ""

#: ./docs/10.x/notifications.md:1278
#: ./docs/11.x/notifications.md:1334
#: ./docs/master/notifications.md:1278
msgid "Before sending notifications to external Slack workspaces, your Slack App must be [distributed](#slack-app-distribution)."
msgstr ""

#: ./docs/10.x/notifications.md:1280
#: ./docs/11.x/notifications.md:1336
#: ./docs/master/notifications.md:1280
msgid "Of course, you will often want to send notifications to the Slack workspaces owned by your application's users. To do so, you will first need to obtain a Slack OAuth token for the user. Thankfully, [Laravel Socialite](/docs/{{version}}/socialite) includes a Slack driver that will allow you to easily authenticate your application's users with Slack and [obtain a bot token](/docs/{{version}}/socialite#slack-bot-scopes)."
msgstr ""

#: ./docs/10.x/notifications.md:1282
#: ./docs/11.x/notifications.md:1338
#: ./docs/master/notifications.md:1282
msgid "Once you have obtained the bot token and stored it within your application's database, you may utilize the `SlackRoute::make` method to route a notification to the user's workspace. In addition, your application will likely need to offer an opportunity for the user to specify which channel notifications should be sent to:"
msgstr ""

#: ./docs/10.x/notifications.md:1284
#: ./docs/11.x/notifications.md:1340
#: ./docs/master/notifications.md:1284
msgid "<?php\n\n"
"namespace App\\Models;\n\n"
"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n"
"use Illuminate\\Notifications\\Notifiable;\n"
"use Illuminate\\Notifications\\Notification;\n"
"use Illuminate\\Notifications\\Slack\\SlackRoute;\n\n"
"class User extends Authenticatable\n"
"{\n"
"    use Notifiable;\n\n"
"    /**\n"
"     * Route notifications for the Slack channel.\n"
"     */\n"
"    public function routeNotificationForSlack(Notification $notification): mixed\n"
"    {\n"
"        return SlackRoute::make($this->slack_channel, $this->slack_token);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/notifications.md:1295
#: ./docs/9.x/notifications.md:1416
#: ./docs/10.x/notifications.md:1516
#: ./docs/11.x/notifications.md:1596
#: ./docs/master/notifications.md:1540
msgid "Once your notification channel class has been defined, you may return the class name from the `via` method of any of your notifications. In this example, the `toVoice` method of your notification can return whatever object you choose to represent voice messages. For example, you might define your own `VoiceMessage` class to represent these messages:"
msgstr ""

#: ./docs/8.x/notifications.md:1297
#: ./docs/9.x/notifications.md:1418
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use App\\Notifications\\Messages\\VoiceMessage;\n"
"use App\\Notifications\\VoiceChannel;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification\n"
"{\n"
"    use Queueable;\n\n"
"    /**\n"
"     * Get the notification channels.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return array|string\n"
"     */\n"
"    public function via($notifiable)\n"
"    {\n"
"        return [VoiceChannel::class];\n"
"    }\n\n"
"    /**\n"
"     * Get the voice representation of the notification.\n"
"     *\n"
"     * @param  mixed  $notifiable\n"
"     * @return VoiceMessage\n"
"     */\n"
"    public function toVoice($notifiable)\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1304
#: ./docs/10.x/notifications.md:1417
msgid "use App\\Listeners\\CheckNotificationStatus;\n"
"use Illuminate\\Notifications\\Events\\NotificationSending;\n\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    NotificationSending::class => [\n"
"        CheckNotificationStatus::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/notifications.md:1326
#: ./docs/11.x/notifications.md:1382
#: ./docs/master/notifications.md:1326
msgid "use Illuminate\\Contracts\\Translation\\HasLocalePreference;\n\n"
"class User extends Model implements HasLocalePreference\n"
"{\n"
"    /**\n"
"     * Get the user's preferred locale.\n"
"     */\n"
"    public function preferredLocale(): string\n"
"    {\n"
"        return $this->locale;\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1343
#: ./docs/11.x/notifications.md:1399
#: ./docs/master/notifications.md:1343
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/10.x/notifications.md:1344
#: ./docs/11.x/notifications.md:1400
#: ./docs/master/notifications.md:1344
msgid "Testing"
msgstr ""

#: ./docs/10.x/notifications.md:1346
#: ./docs/11.x/notifications.md:1402
#: ./docs/master/notifications.md:1346
msgid "You may use the `Notification` facade's `fake` method to prevent notifications from being sent. Typically, sending notifications is unrelated to the code you are actually testing. Most likely, it is sufficient to simply assert that Laravel was instructed to send a given notification."
msgstr ""

#: ./docs/10.x/notifications.md:1348
#: ./docs/11.x/notifications.md:1404
#: ./docs/master/notifications.md:1348
msgid "After calling the `Notification` facade's `fake` method, you may then assert that notifications were instructed to be sent to users and even inspect the data the notifications received:"
msgstr ""

#: ./docs/10.x/notifications.md:1350
#: ./docs/11.x/notifications.md:1435
#: ./docs/master/notifications.md:1379
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use App\\Notifications\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Notification;\n"
"use Tests\\TestCase;\n\n"
"class ExampleTest extends TestCase\n"
"{\n"
"    public function test_orders_can_be_shipped(): void\n"
"    {\n"
"        Notification::fake();\n\n"
"        // Perform order shipping...\n\n"
"        // Assert that no notifications were sent...\n"
"        Notification::assertNothingSent();\n\n"
"        // Assert a notification was sent to the given users...\n"
"        Notification::assertSentTo(\n"
"            [$user], OrderShipped::class\n"
"        );\n\n"
"        // Assert a notification was not sent...\n"
"        Notification::assertNotSentTo(\n"
"            [$user], AnotherNotification::class\n"
"        );\n\n"
"        // Assert that a given number of notifications were sent...\n"
"        Notification::assertCount(3);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/notifications.md:1353
#: ./docs/10.x/notifications.md:1460
msgid "use App\\Listeners\\LogNotification;\n"
"use Illuminate\\Notifications\\Events\\NotificationSent;\n\n"
"/**\n"
" * The event listener mappings for the application.\n"
" *\n"
" * @var array\n"
" */\n"
"protected $listen = [\n"
"    NotificationSent::class => [\n"
"        LogNotification::class,\n"
"    ],\n"
"];"
msgstr ""

#: ./docs/10.x/notifications.md:1384
#: ./docs/11.x/notifications.md:1471
#: ./docs/master/notifications.md:1415
msgid "You may pass a closure to the `assertSentTo` or `assertNotSentTo` methods in order to assert that a notification was sent that passes a given \"truth test\". If at least one notification was sent that passes the given truth test then the assertion will be successful:"
msgstr ""

#: ./docs/10.x/notifications.md:1386
#: ./docs/11.x/notifications.md:1473
#: ./docs/master/notifications.md:1417
msgid "Notification::assertSentTo(\n"
"    $user,\n"
"    function (OrderShipped $notification, array $channels) use ($order) {\n"
"        return $notification->order->id === $order->id;\n"
"    }\n"
");"
msgstr ""

#: ./docs/10.x/notifications.md:1396
#: ./docs/11.x/notifications.md:1483
#: ./docs/master/notifications.md:1427
msgid "If the code you are testing sends [on-demand notifications](#on-demand-notifications), you can test that the on-demand notification was sent via the `assertSentOnDemand` method:"
msgstr ""

#: ./docs/10.x/notifications.md:1398
#: ./docs/11.x/notifications.md:1485
#: ./docs/master/notifications.md:1429
msgid "Notification::assertSentOnDemand(OrderShipped::class);"
msgstr ""

#: ./docs/10.x/notifications.md:1400
#: ./docs/11.x/notifications.md:1487
#: ./docs/master/notifications.md:1431
msgid "By passing a closure as the second argument to the `assertSentOnDemand` method, you may determine if an on-demand notification was sent to the correct \"route\" address:"
msgstr ""

#: ./docs/10.x/notifications.md:1402
#: ./docs/11.x/notifications.md:1489
#: ./docs/master/notifications.md:1433
msgid "Notification::assertSentOnDemand(\n"
"    OrderShipped::class,\n"
"    function (OrderShipped $notification, array $channels, object $notifiable) use ($user) {\n"
"        return $notifiable->routes['mail'] === $user->email;\n"
"    }\n"
");"
msgstr ""

#: ./docs/11.x/notifications.md:1406
#: ./docs/master/notifications.md:1350
msgid "<?php\n\n"
"use App\\Notifications\\OrderShipped;\n"
"use Illuminate\\Support\\Facades\\Notification;\n\n"
"test('orders can be shipped', function () {\n"
"    Notification::fake();\n\n"
"    // Perform order shipping...\n\n"
"    // Assert that no notifications were sent...\n"
"    Notification::assertNothingSent();\n\n"
"    // Assert a notification was sent to the given users...\n"
"    Notification::assertSentTo(\n"
"        [$user], OrderShipped::class\n"
"    );\n\n"
"    // Assert a notification was not sent...\n"
"    Notification::assertNotSentTo(\n"
"        [$user], AnotherNotification::class\n"
"    );\n\n"
"    // Assert that a given number of notifications were sent...\n"
"    Notification::assertCount(3);\n"
"});"
msgstr ""

#: ./docs/10.x/notifications.md:1433
msgid "use Illuminate\\Notifications\\Events\\NotificationSending;\n\n"
"/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSending $event): bool\n"
"{\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1445
msgid "/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSending $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1479
msgid "/**\n"
" * Handle the event.\n"
" */\n"
"public function handle(NotificationSent $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}"
msgstr ""

#: ./docs/master/notifications.md:1488
msgid "use Illuminate\\Notifications\\Events\\NotificationSent;\n\n"
"class LogNotification\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(NotificationSending $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1497
#: ./docs/11.x/notifications.md:1577
#: ./docs/master/notifications.md:1521
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class VoiceChannel\n"
"{\n"
"    /**\n"
"     * Send the given notification.\n"
"     */\n"
"    public function send(object $notifiable, Notification $notification): void\n"
"    {\n"
"        $message = $notification->toVoice($notifiable);\n\n"
"        // Send notification to the $notifiable instance...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1502
#: ./docs/master/notifications.md:1446
msgid "When a notification is sending, the `Illuminate\\Notifications\\Events\\NotificationSending` event is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may create [event listeners](/docs/{{version}}/events) for this event within your application:"
msgstr ""

#: ./docs/11.x/notifications.md:1504
#: ./docs/master/notifications.md:1448
msgid "use Illuminate\\Notifications\\Events\\NotificationSending;\n\n"
"class CheckNotificationStatus\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(NotificationSending $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/notifications.md:1518
#: ./docs/11.x/notifications.md:1598
#: ./docs/master/notifications.md:1542
msgid "<?php\n\n"
"namespace App\\Notifications;\n\n"
"use App\\Notifications\\Messages\\VoiceMessage;\n"
"use App\\Notifications\\VoiceChannel;\n"
"use Illuminate\\Bus\\Queueable;\n"
"use Illuminate\\Contracts\\Queue\\ShouldQueue;\n"
"use Illuminate\\Notifications\\Notification;\n\n"
"class InvoicePaid extends Notification\n"
"{\n"
"    use Queueable;\n\n"
"    /**\n"
"     * Get the notification channels.\n"
"     */\n"
"    public function via(object $notifiable): string\n"
"    {\n"
"        return VoiceChannel::class;\n"
"    }\n\n"
"    /**\n"
"     * Get the voice representation of the notification.\n"
"     */\n"
"    public function toVoice(object $notifiable): VoiceMessage\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1519
#: ./docs/master/notifications.md:1463
msgid "/**\n"
" * Handle the given event.\n"
" */\n"
"public function handle(NotificationSending $event): bool\n"
"{\n"
"    return false;\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1529
#: ./docs/master/notifications.md:1473
msgid "/**\n"
" * Handle the given event.\n"
" */\n"
"public function handle(NotificationSending $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1542
#: ./docs/master/notifications.md:1486
msgid "When a notification is sent, the `Illuminate\\Notifications\\Events\\NotificationSent` [event](/docs/{{version}}/events) is dispatched by the notification system. This contains the \"notifiable\" entity and the notification instance itself. You may create [event listeners](/docs/{{version}}/events) for this event within your application:"
msgstr ""

#: ./docs/11.x/notifications.md:1544
msgid "use Illuminate\\Notifications\\Events\\NotificationSent;\n\n"
"class LogNotification\n"
"{\n"
"    /**\n"
"     * Handle the given event.\n"
"     */\n"
"    public function handle(NotificationSent $event): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/11.x/notifications.md:1559
#: ./docs/master/notifications.md:1503
msgid "/**\n"
" * Handle the given event.\n"
" */\n"
"public function handle(NotificationSent $event): void\n"
"{\n"
"    // $event->channel\n"
"    // $event->notifiable\n"
"    // $event->notification\n"
"    // $event->response\n"
"}"
msgstr ""

