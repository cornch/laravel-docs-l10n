msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"PO-Revision-Date: 2024-06-30 08:17\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Project-Id-Version: laravel-docs\n"
"X-Crowdin-File: /main/templates/billing.pot\n"
"X-Crowdin-File-ID: 15\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"

#: ./docs/8.x/billing.md:1
#: ./docs/9.x/billing.md:1
#: ./docs/10.x/billing.md:1
#: ./docs/11.x/billing.md:1
#: ./docs/master/billing.md:1
msgctxt "H1"
msgid "Laravel Cashier (Stripe)"
msgstr ""

#: ./docs/8.x/billing.md:3
#: ./docs/9.x/billing.md:3
#: ./docs/10.x/billing.md:3
#: ./docs/11.x/billing.md:3
#: ./docs/master/billing.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/billing.md:4
#: ./docs/9.x/billing.md:4
#: ./docs/10.x/billing.md:4
#: ./docs/11.x/billing.md:4
#: ./docs/master/billing.md:4
msgctxt "P"
msgid "[Upgrading Cashier](#upgrading-cashier)"
msgstr ""

#: ./docs/8.x/billing.md:5
#: ./docs/9.x/billing.md:5
#: ./docs/10.x/billing.md:5
#: ./docs/11.x/billing.md:5
#: ./docs/master/billing.md:5
msgctxt "P"
msgid "[Installation](#installation)"
msgstr ""

#: ./docs/8.x/billing.md:6
#: ./docs/9.x/billing.md:6
msgctxt "P"
msgid "[Database Migrations](#database-migrations)"
msgstr ""

#: ./docs/8.x/billing.md:7
#: ./docs/9.x/billing.md:7
#: ./docs/10.x/billing.md:6
#: ./docs/11.x/billing.md:6
#: ./docs/master/billing.md:6
msgctxt "P"
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/8.x/billing.md:8
#: ./docs/9.x/billing.md:8
#: ./docs/10.x/billing.md:7
#: ./docs/11.x/billing.md:7
#: ./docs/master/billing.md:7
msgctxt "P"
msgid "[Billable Model](#billable-model)"
msgstr ""

#: ./docs/8.x/billing.md:9
#: ./docs/9.x/billing.md:9
#: ./docs/10.x/billing.md:8
#: ./docs/11.x/billing.md:8
#: ./docs/master/billing.md:8
msgctxt "P"
msgid "[API Keys](#api-keys)"
msgstr ""

#: ./docs/8.x/billing.md:10
#: ./docs/9.x/billing.md:10
#: ./docs/10.x/billing.md:9
#: ./docs/11.x/billing.md:9
#: ./docs/master/billing.md:9
msgctxt "P"
msgid "[Currency Configuration](#currency-configuration)"
msgstr ""

#: ./docs/8.x/billing.md:11
#: ./docs/9.x/billing.md:11
#: ./docs/10.x/billing.md:10
#: ./docs/11.x/billing.md:10
#: ./docs/master/billing.md:10
msgctxt "P"
msgid "[Tax Configuration](#tax-configuration)"
msgstr ""

#: ./docs/8.x/billing.md:12
#: ./docs/9.x/billing.md:12
#: ./docs/10.x/billing.md:11
#: ./docs/11.x/billing.md:11
#: ./docs/master/billing.md:11
msgctxt "P"
msgid "[Logging](#logging)"
msgstr ""

#: ./docs/10.x/billing.md:13
#: ./docs/11.x/billing.md:13
#: ./docs/master/billing.md:13
msgctxt "P"
msgid "[Quickstart](#quickstart)"
msgstr ""

#: ./docs/8.x/billing.md:13
#: ./docs/9.x/billing.md:13
#: ./docs/10.x/billing.md:12
#: ./docs/11.x/billing.md:12
#: ./docs/master/billing.md:12
msgctxt "P"
msgid "[Using Custom Models](#using-custom-models)"
msgstr ""

#: ./docs/10.x/billing.md:14
#: ./docs/11.x/billing.md:14
#: ./docs/master/billing.md:14
msgctxt "P"
msgid "[Selling Products](#quickstart-selling-products)"
msgstr ""

#: ./docs/8.x/billing.md:14
#: ./docs/9.x/billing.md:14
#: ./docs/10.x/billing.md:16
#: ./docs/11.x/billing.md:16
#: ./docs/master/billing.md:16
msgctxt "P"
msgid "[Customers](#customers)"
msgstr ""

#: ./docs/10.x/billing.md:15
#: ./docs/11.x/billing.md:15
#: ./docs/master/billing.md:15
msgctxt "P"
msgid "[Selling Subscriptions](#quickstart-selling-subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:15
#: ./docs/9.x/billing.md:15
#: ./docs/10.x/billing.md:17
#: ./docs/11.x/billing.md:17
#: ./docs/master/billing.md:17
msgctxt "P"
msgid "[Retrieving Customers](#retrieving-customers)"
msgstr ""

#: ./docs/8.x/billing.md:16
#: ./docs/9.x/billing.md:16
#: ./docs/10.x/billing.md:18
#: ./docs/11.x/billing.md:18
#: ./docs/master/billing.md:18
msgctxt "P"
msgid "[Creating Customers](#creating-customers)"
msgstr ""

#: ./docs/8.x/billing.md:17
#: ./docs/9.x/billing.md:17
#: ./docs/10.x/billing.md:19
#: ./docs/11.x/billing.md:19
#: ./docs/master/billing.md:19
msgctxt "P"
msgid "[Updating Customers](#updating-customers)"
msgstr ""

#: ./docs/8.x/billing.md:18
#: ./docs/9.x/billing.md:18
#: ./docs/10.x/billing.md:20
#: ./docs/11.x/billing.md:20
#: ./docs/master/billing.md:20
msgctxt "P"
msgid "[Balances](#balances)"
msgstr ""

#: ./docs/8.x/billing.md:19
#: ./docs/9.x/billing.md:19
#: ./docs/10.x/billing.md:21
#: ./docs/11.x/billing.md:21
#: ./docs/master/billing.md:21
msgctxt "P"
msgid "[Tax IDs](#tax-ids)"
msgstr ""

#: ./docs/8.x/billing.md:20
#: ./docs/9.x/billing.md:20
#: ./docs/10.x/billing.md:22
#: ./docs/11.x/billing.md:22
#: ./docs/master/billing.md:22
msgctxt "P"
msgid "[Syncing Customer Data With Stripe](#syncing-customer-data-with-stripe)"
msgstr ""

#: ./docs/8.x/billing.md:21
#: ./docs/9.x/billing.md:21
#: ./docs/10.x/billing.md:23
#: ./docs/11.x/billing.md:23
#: ./docs/master/billing.md:23
msgctxt "P"
msgid "[Billing Portal](#billing-portal)"
msgstr ""

#: ./docs/8.x/billing.md:22
#: ./docs/9.x/billing.md:22
#: ./docs/10.x/billing.md:24
#: ./docs/11.x/billing.md:24
#: ./docs/master/billing.md:24
msgctxt "P"
msgid "[Payment Methods](#payment-methods)"
msgstr ""

#: ./docs/8.x/billing.md:23
#: ./docs/9.x/billing.md:23
#: ./docs/10.x/billing.md:25
#: ./docs/11.x/billing.md:25
#: ./docs/master/billing.md:25
msgctxt "P"
msgid "[Storing Payment Methods](#storing-payment-methods)"
msgstr ""

#: ./docs/8.x/billing.md:24
#: ./docs/9.x/billing.md:24
#: ./docs/10.x/billing.md:26
#: ./docs/11.x/billing.md:26
#: ./docs/master/billing.md:26
msgctxt "P"
msgid "[Retrieving Payment Methods](#retrieving-payment-methods)"
msgstr ""

#: ./docs/8.x/billing.md:25
#: ./docs/9.x/billing.md:25
msgctxt "P"
msgid "[Determining If A User Has A Payment Method](#check-for-a-payment-method)"
msgstr ""

#: ./docs/8.x/billing.md:26
#: ./docs/9.x/billing.md:26
msgctxt "P"
msgid "[Updating The Default Payment Method](#updating-the-default-payment-method)"
msgstr ""

#: ./docs/10.x/billing.md:27
#: ./docs/11.x/billing.md:27
#: ./docs/master/billing.md:27
msgctxt "P"
msgid "[Payment Method Presence](#payment-method-presence)"
msgstr ""

#: ./docs/8.x/billing.md:27
#: ./docs/9.x/billing.md:27
#: ./docs/10.x/billing.md:29
#: ./docs/11.x/billing.md:29
#: ./docs/master/billing.md:29
msgctxt "P"
msgid "[Adding Payment Methods](#adding-payment-methods)"
msgstr ""

#: ./docs/10.x/billing.md:28
#: ./docs/11.x/billing.md:28
#: ./docs/master/billing.md:28
msgctxt "P"
msgid "[Updating the Default Payment Method](#updating-the-default-payment-method)"
msgstr ""

#: ./docs/8.x/billing.md:28
#: ./docs/9.x/billing.md:28
#: ./docs/10.x/billing.md:30
#: ./docs/11.x/billing.md:30
#: ./docs/master/billing.md:30
msgctxt "P"
msgid "[Deleting Payment Methods](#deleting-payment-methods)"
msgstr ""

#: ./docs/8.x/billing.md:29
#: ./docs/9.x/billing.md:29
#: ./docs/10.x/billing.md:31
#: ./docs/11.x/billing.md:31
#: ./docs/master/billing.md:31
msgctxt "P"
msgid "[Subscriptions](#subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:30
#: ./docs/9.x/billing.md:30
#: ./docs/10.x/billing.md:32
#: ./docs/11.x/billing.md:32
#: ./docs/master/billing.md:32
msgctxt "P"
msgid "[Creating Subscriptions](#creating-subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:31
#: ./docs/9.x/billing.md:31
#: ./docs/10.x/billing.md:33
#: ./docs/11.x/billing.md:33
#: ./docs/master/billing.md:33
msgctxt "P"
msgid "[Checking Subscription Status](#checking-subscription-status)"
msgstr ""

#: ./docs/8.x/billing.md:32
#: ./docs/9.x/billing.md:32
#: ./docs/10.x/billing.md:34
#: ./docs/11.x/billing.md:34
#: ./docs/master/billing.md:34
msgctxt "P"
msgid "[Changing Prices](#changing-prices)"
msgstr ""

#: ./docs/8.x/billing.md:33
#: ./docs/9.x/billing.md:33
#: ./docs/10.x/billing.md:35
#: ./docs/11.x/billing.md:35
#: ./docs/master/billing.md:35
msgctxt "P"
msgid "[Subscription Quantity](#subscription-quantity)"
msgstr ""

#: ./docs/8.x/billing.md:34
msgctxt "P"
msgid "[Multiprice Subscriptions](#multiprice-subscriptions)"
msgstr ""

#: ./docs/9.x/billing.md:34
#: ./docs/10.x/billing.md:36
#: ./docs/11.x/billing.md:36
#: ./docs/master/billing.md:36
msgctxt "P"
msgid "[Subscriptions With Multiple Products](#subscriptions-with-multiple-products)"
msgstr ""

#: ./docs/8.x/billing.md:35
#: ./docs/9.x/billing.md:36
#: ./docs/10.x/billing.md:38
#: ./docs/11.x/billing.md:38
#: ./docs/master/billing.md:38
msgctxt "P"
msgid "[Metered Billing](#metered-billing)"
msgstr ""

#: ./docs/9.x/billing.md:35
#: ./docs/10.x/billing.md:37
#: ./docs/11.x/billing.md:37
#: ./docs/master/billing.md:37
msgctxt "P"
msgid "[Multiple Subscriptions](#multiple-subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:36
#: ./docs/9.x/billing.md:37
#: ./docs/10.x/billing.md:39
#: ./docs/11.x/billing.md:39
#: ./docs/master/billing.md:39
msgctxt "P"
msgid "[Subscription Taxes](#subscription-taxes)"
msgstr ""

#: ./docs/8.x/billing.md:37
#: ./docs/9.x/billing.md:38
#: ./docs/10.x/billing.md:40
#: ./docs/11.x/billing.md:40
#: ./docs/master/billing.md:40
msgctxt "P"
msgid "[Subscription Anchor Date](#subscription-anchor-date)"
msgstr ""

#: ./docs/8.x/billing.md:38
#: ./docs/9.x/billing.md:39
#: ./docs/10.x/billing.md:41
#: ./docs/11.x/billing.md:41
#: ./docs/master/billing.md:41
msgctxt "P"
msgid "[Canceling Subscriptions](#cancelling-subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:39
#: ./docs/9.x/billing.md:40
#: ./docs/10.x/billing.md:42
#: ./docs/11.x/billing.md:42
#: ./docs/master/billing.md:42
msgctxt "P"
msgid "[Resuming Subscriptions](#resuming-subscriptions)"
msgstr ""

#: ./docs/8.x/billing.md:40
#: ./docs/9.x/billing.md:41
#: ./docs/10.x/billing.md:43
#: ./docs/11.x/billing.md:43
#: ./docs/master/billing.md:43
msgctxt "P"
msgid "[Subscription Trials](#subscription-trials)"
msgstr ""

#: ./docs/8.x/billing.md:41
#: ./docs/9.x/billing.md:42
#: ./docs/10.x/billing.md:44
#: ./docs/11.x/billing.md:44
#: ./docs/master/billing.md:44
msgctxt "P"
msgid "[With Payment Method Up Front](#with-payment-method-up-front)"
msgstr ""

#: ./docs/8.x/billing.md:42
#: ./docs/9.x/billing.md:43
#: ./docs/10.x/billing.md:45
#: ./docs/11.x/billing.md:45
#: ./docs/master/billing.md:45
msgctxt "P"
msgid "[Without Payment Method Up Front](#without-payment-method-up-front)"
msgstr ""

#: ./docs/8.x/billing.md:43
#: ./docs/9.x/billing.md:44
#: ./docs/10.x/billing.md:46
#: ./docs/11.x/billing.md:46
#: ./docs/master/billing.md:46
msgctxt "P"
msgid "[Extending Trials](#extending-trials)"
msgstr ""

#: ./docs/8.x/billing.md:44
#: ./docs/9.x/billing.md:45
#: ./docs/10.x/billing.md:47
#: ./docs/11.x/billing.md:47
#: ./docs/master/billing.md:47
msgctxt "P"
msgid "[Handling Stripe Webhooks](#handling-stripe-webhooks)"
msgstr ""

#: ./docs/8.x/billing.md:45
#: ./docs/9.x/billing.md:46
#: ./docs/10.x/billing.md:48
#: ./docs/11.x/billing.md:48
#: ./docs/master/billing.md:48
msgctxt "P"
msgid "[Defining Webhook Event Handlers](#defining-webhook-event-handlers)"
msgstr ""

#: ./docs/8.x/billing.md:46
#: ./docs/9.x/billing.md:47
#: ./docs/10.x/billing.md:49
#: ./docs/11.x/billing.md:49
#: ./docs/master/billing.md:49
msgctxt "P"
msgid "[Verifying Webhook Signatures](#verifying-webhook-signatures)"
msgstr ""

#: ./docs/8.x/billing.md:47
#: ./docs/9.x/billing.md:48
#: ./docs/10.x/billing.md:50
#: ./docs/11.x/billing.md:50
#: ./docs/master/billing.md:50
msgctxt "P"
msgid "[Single Charges](#single-charges)"
msgstr ""

#: ./docs/8.x/billing.md:48
#: ./docs/9.x/billing.md:49
#: ./docs/10.x/billing.md:51
#: ./docs/11.x/billing.md:51
#: ./docs/master/billing.md:51
msgctxt "P"
msgid "[Simple Charge](#simple-charge)"
msgstr ""

#: ./docs/8.x/billing.md:49
#: ./docs/9.x/billing.md:50
#: ./docs/10.x/billing.md:52
#: ./docs/11.x/billing.md:52
#: ./docs/master/billing.md:52
msgctxt "P"
msgid "[Charge With Invoice](#charge-with-invoice)"
msgstr ""

#: ./docs/8.x/billing.md:50
#: ./docs/9.x/billing.md:52
#: ./docs/10.x/billing.md:54
#: ./docs/11.x/billing.md:54
#: ./docs/master/billing.md:54
msgctxt "P"
msgid "[Refunding Charges](#refunding-charges)"
msgstr ""

#: ./docs/8.x/billing.md:51
#: ./docs/9.x/billing.md:53
#: ./docs/10.x/billing.md:55
#: ./docs/11.x/billing.md:55
#: ./docs/master/billing.md:55
msgctxt "P"
msgid "[Checkout](#checkout)"
msgstr ""

#: ./docs/9.x/billing.md:51
#: ./docs/10.x/billing.md:53
#: ./docs/11.x/billing.md:53
#: ./docs/master/billing.md:53
msgctxt "P"
msgid "[Creating Payment Intents](#creating-payment-intents)"
msgstr ""

#: ./docs/8.x/billing.md:52
#: ./docs/9.x/billing.md:54
#: ./docs/10.x/billing.md:56
#: ./docs/11.x/billing.md:56
#: ./docs/master/billing.md:56
msgctxt "P"
msgid "[Product Checkouts](#product-checkouts)"
msgstr ""

#: ./docs/8.x/billing.md:53
#: ./docs/9.x/billing.md:55
#: ./docs/10.x/billing.md:57
#: ./docs/11.x/billing.md:57
#: ./docs/master/billing.md:57
msgctxt "P"
msgid "[Single Charge Checkouts](#single-charge-checkouts)"
msgstr ""

#: ./docs/8.x/billing.md:54
#: ./docs/9.x/billing.md:56
#: ./docs/10.x/billing.md:58
#: ./docs/11.x/billing.md:58
#: ./docs/master/billing.md:58
msgctxt "P"
msgid "[Subscription Checkouts](#subscription-checkouts)"
msgstr ""

#: ./docs/8.x/billing.md:55
#: ./docs/9.x/billing.md:57
#: ./docs/10.x/billing.md:59
#: ./docs/11.x/billing.md:59
#: ./docs/master/billing.md:59
msgctxt "P"
msgid "[Collecting Tax IDs](#collecting-tax-ids)"
msgstr ""

#: ./docs/8.x/billing.md:56
#: ./docs/9.x/billing.md:59
#: ./docs/10.x/billing.md:61
#: ./docs/11.x/billing.md:61
#: ./docs/master/billing.md:61
msgctxt "P"
msgid "[Invoices](#invoices)"
msgstr ""

#: ./docs/8.x/billing.md:57
#: ./docs/9.x/billing.md:60
#: ./docs/10.x/billing.md:62
#: ./docs/11.x/billing.md:62
#: ./docs/master/billing.md:62
msgctxt "P"
msgid "[Retrieving Invoices](#retrieving-invoices)"
msgstr ""

#: ./docs/8.x/billing.md:58
#: ./docs/9.x/billing.md:61
#: ./docs/10.x/billing.md:63
#: ./docs/11.x/billing.md:63
#: ./docs/master/billing.md:63
msgctxt "P"
msgid "[Upcoming Invoices](#upcoming-invoices)"
msgstr ""

#: ./docs/9.x/billing.md:58
#: ./docs/10.x/billing.md:60
#: ./docs/11.x/billing.md:60
#: ./docs/master/billing.md:60
msgctxt "P"
msgid "[Guest Checkouts](#guest-checkouts)"
msgstr ""

#: ./docs/8.x/billing.md:59
#: ./docs/9.x/billing.md:62
#: ./docs/10.x/billing.md:64
#: ./docs/11.x/billing.md:64
#: ./docs/master/billing.md:64
msgctxt "P"
msgid "[Previewing Subscription Invoices](#previewing-subscription-invoices)"
msgstr ""

#: ./docs/8.x/billing.md:60
#: ./docs/9.x/billing.md:63
#: ./docs/10.x/billing.md:65
#: ./docs/11.x/billing.md:65
#: ./docs/master/billing.md:65
msgctxt "P"
msgid "[Generating Invoice PDFs](#generating-invoice-pdfs)"
msgstr ""

#: ./docs/8.x/billing.md:61
#: ./docs/9.x/billing.md:64
#: ./docs/10.x/billing.md:66
#: ./docs/11.x/billing.md:66
#: ./docs/master/billing.md:66
msgctxt "P"
msgid "[Handling Failed Payments](#handling-failed-payments)"
msgstr ""

#: ./docs/8.x/billing.md:62
#: ./docs/9.x/billing.md:65
#: ./docs/10.x/billing.md:68
#: ./docs/11.x/billing.md:68
#: ./docs/master/billing.md:68
msgctxt "P"
msgid "[Strong Customer Authentication (SCA)](#strong-customer-authentication)"
msgstr ""

#: ./docs/8.x/billing.md:63
#: ./docs/9.x/billing.md:66
#: ./docs/10.x/billing.md:69
#: ./docs/11.x/billing.md:69
#: ./docs/master/billing.md:69
msgctxt "P"
msgid "[Payments Requiring Additional Confirmation](#payments-requiring-additional-confirmation)"
msgstr ""

#: ./docs/8.x/billing.md:64
#: ./docs/9.x/billing.md:67
#: ./docs/10.x/billing.md:70
#: ./docs/11.x/billing.md:70
#: ./docs/master/billing.md:70
msgctxt "P"
msgid "[Off-session Payment Notifications](#off-session-payment-notifications)"
msgstr ""

#: ./docs/8.x/billing.md:65
#: ./docs/9.x/billing.md:68
#: ./docs/10.x/billing.md:71
#: ./docs/11.x/billing.md:71
#: ./docs/master/billing.md:71
msgctxt "P"
msgid "[Stripe SDK](#stripe-sdk)"
msgstr ""

#: ./docs/8.x/billing.md:66
#: ./docs/9.x/billing.md:69
#: ./docs/10.x/billing.md:72
#: ./docs/11.x/billing.md:72
#: ./docs/master/billing.md:72
msgctxt "P"
msgid "[Testing](#testing)"
msgstr ""

#: ./docs/10.x/billing.md:67
#: ./docs/11.x/billing.md:67
#: ./docs/master/billing.md:67
msgctxt "P"
msgid "[Confirming Payments](#confirming-payments)"
msgstr ""

#: ./docs/8.x/billing.md:68
#: ./docs/9.x/billing.md:71
#: ./docs/10.x/billing.md:74
#: ./docs/11.x/billing.md:74
#: ./docs/master/billing.md:74
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:69
#: ./docs/9.x/billing.md:72
#: ./docs/10.x/billing.md:75
#: ./docs/11.x/billing.md:75
#: ./docs/master/billing.md:75
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/billing.md:71
#: ./docs/9.x/billing.md:74
#: ./docs/10.x/billing.md:77
#: ./docs/11.x/billing.md:77
#: ./docs/master/billing.md:77
msgctxt "P"
msgid "[Laravel Cashier Stripe](https://github.com/laravel/cashier-stripe) provides an expressive, fluent interface to [Stripe's](https://stripe.com) subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading writing. In addition to basic subscription management, Cashier can handle coupons, swapping subscription, subscription \"quantities\", cancellation grace periods, and even generate invoice PDFs."
msgstr ""

#: ./docs/8.x/billing.md:73
#: ./docs/9.x/billing.md:76
#: ./docs/10.x/billing.md:79
#: ./docs/11.x/billing.md:79
#: ./docs/master/billing.md:79
#~ msgctxt "P"
#~ msgid "<a name=\"upgrading-cashier\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:74
#: ./docs/9.x/billing.md:77
#: ./docs/10.x/billing.md:80
#: ./docs/11.x/billing.md:80
#: ./docs/master/billing.md:80
msgctxt "H2"
msgid "Upgrading Cashier"
msgstr ""

#: ./docs/8.x/billing.md:76
#: ./docs/9.x/billing.md:79
#: ./docs/10.x/billing.md:82
#: ./docs/11.x/billing.md:82
#: ./docs/master/billing.md:82
msgctxt "P"
msgid "When upgrading to a new version of Cashier, it's important that you carefully review [the upgrade guide](https://github.com/laravel/cashier-stripe/blob/master/UPGRADE.md)."
msgstr ""

#: ./docs/8.x/billing.md:78
msgctxt "P"
msgid "To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 13 utilizes Stripe API version `2020-08-27`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements."
msgstr ""

#: ./docs/8.x/billing.md:80
#: ./docs/9.x/billing.md:84
#: ./docs/10.x/billing.md:87
#: ./docs/11.x/billing.md:87
#: ./docs/master/billing.md:87
#~ msgctxt "P"
#~ msgid "<a name=\"installation\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:81
#: ./docs/9.x/billing.md:85
#: ./docs/10.x/billing.md:88
#: ./docs/11.x/billing.md:88
#: ./docs/master/billing.md:88
msgctxt "H2"
msgid "Installation"
msgstr ""

#: ./docs/9.x/billing.md:82
msgctxt "P"
msgid "To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 14 utilizes Stripe API version `2022-11-15`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements."
msgstr ""

#: ./docs/8.x/billing.md:83
#: ./docs/9.x/billing.md:87
#: ./docs/10.x/billing.md:90
#: ./docs/11.x/billing.md:90
#: ./docs/master/billing.md:90
msgctxt "P"
msgid "First, install the Cashier package for Stripe using the Composer package manager:"
msgstr ""

#: ./docs/10.x/billing.md:85
#: ./docs/11.x/billing.md:85
#: ./docs/master/billing.md:85
msgctxt "P"
msgid "To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 15 utilizes Stripe API version `2023-10-16`. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements."
msgstr ""

#: ./docs/8.x/billing.md:85
#: ./docs/9.x/billing.md:89
#: ./docs/10.x/billing.md:92
#: ./docs/11.x/billing.md:92
#: ./docs/master/billing.md:92
msgctxt "CODE"
msgid "composer require laravel/cashier"
msgstr ""

#: ./docs/8.x/billing.md:87
#: ./docs/9.x/billing.md:94
msgctxt "P"
msgid "To ensure Cashier properly handles all Stripe events, remember to [set up Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: ./docs/8.x/billing.md:89
#: ./docs/9.x/billing.md:96
#~ msgctxt "P"
#~ msgid "<a name=\"database-migrations\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:90
#: ./docs/9.x/billing.md:97
msgctxt "H3"
msgid "Database Migrations"
msgstr ""

#: ./docs/8.x/billing.md:92
#: ./docs/9.x/billing.md:99
msgctxt "P"
msgid "Cashier's service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will add several columns to your `users` table as well as create a new `subscriptions` table to hold all of your customer's subscriptions:"
msgstr ""

#: ./docs/8.x/billing.md:94
#: ./docs/9.x/billing.md:101
#: ./docs/10.x/billing.md:104
#: ./docs/11.x/billing.md:104
#: ./docs/master/billing.md:104
msgctxt "CODE"
msgid "php artisan migrate"
msgstr ""

#: ./docs/10.x/billing.md:96
#: ./docs/11.x/billing.md:96
#: ./docs/master/billing.md:96
msgctxt "P"
msgid "After installing the package, publish Cashier's migrations using the `vendor:publish` Artisan command:"
msgstr ""

#: ./docs/8.x/billing.md:96
#: ./docs/9.x/billing.md:105
msgctxt "P"
msgid "If you need to overwrite the migrations that ship with Cashier, you can publish them using the `vendor:publish` Artisan command:"
msgstr ""

#: ./docs/8.x/billing.md:98
#: ./docs/9.x/billing.md:107
#: ./docs/10.x/billing.md:98
#: ./docs/11.x/billing.md:98
#: ./docs/master/billing.md:98
msgctxt "CODE"
msgid "php artisan vendor:publish --tag=\"cashier-migrations\""
msgstr ""

#: ./docs/8.x/billing.md:100
#: ./docs/9.x/billing.md:111
msgctxt "P"
msgid "If you would like to prevent Cashier's migrations from running entirely, you may use the `ignoreMigrations` method provided by Cashier. Typically, this method should be called in the `register` method of your `AppServiceProvider`:"
msgstr ""

#: ./docs/10.x/billing.md:102
#: ./docs/11.x/billing.md:102
#: ./docs/master/billing.md:102
msgctxt "P"
msgid "Then, migrate your database:"
msgstr ""

#: ./docs/8.x/billing.md:102
#: ./docs/9.x/billing.md:113
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::ignoreMigrations();\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:108
#: ./docs/11.x/billing.md:108
#: ./docs/master/billing.md:108
msgctxt "P"
msgid "Cashier's migrations will add several columns to your `users` table. They will also create a new `subscriptions` table to hold all of your customer's subscriptions and a `subscription_items` table for subscriptions with multiple prices."
msgstr ""

#: ./docs/10.x/billing.md:110
#: ./docs/11.x/billing.md:110
#: ./docs/master/billing.md:110
msgctxt "P"
msgid "If you wish, you can also publish Cashier's configuration file using the `vendor:publish` Artisan command:"
msgstr ""

#: ./docs/10.x/billing.md:112
#: ./docs/11.x/billing.md:112
#: ./docs/master/billing.md:112
msgctxt "CODE: shell"
msgid "php artisan vendor:publish --tag=\"cashier-config\""
msgstr ""

#: ./docs/8.x/billing.md:114
#: ./docs/9.x/billing.md:126
#: ./docs/10.x/billing.md:119
#: ./docs/11.x/billing.md:119
#: ./docs/master/billing.md:119
msgctxt "P"
msgid "Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the `stripe_id` column is set to `utf8_bin` when using MySQL. More information regarding this can be found in the [Stripe documentation](https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible)."
msgstr ""

#: ./docs/10.x/billing.md:116
#: ./docs/11.x/billing.md:116
#: ./docs/master/billing.md:116
msgctxt "P"
msgid "Lastly, to ensure Cashier properly handles all Stripe events, remember to [configure Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: ./docs/8.x/billing.md:116
#: ./docs/9.x/billing.md:128
#: ./docs/10.x/billing.md:121
#: ./docs/11.x/billing.md:121
#: ./docs/master/billing.md:121
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:117
#: ./docs/9.x/billing.md:129
#: ./docs/10.x/billing.md:122
#: ./docs/11.x/billing.md:122
#: ./docs/master/billing.md:122
msgctxt "H2"
msgid "Configuration"
msgstr ""

#: ./docs/8.x/billing.md:119
#: ./docs/9.x/billing.md:131
#: ./docs/10.x/billing.md:124
#: ./docs/11.x/billing.md:124
#: ./docs/master/billing.md:124
#~ msgctxt "P"
#~ msgid "<a name=\"billable-model\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:120
#: ./docs/9.x/billing.md:132
#: ./docs/10.x/billing.md:125
#: ./docs/11.x/billing.md:125
#: ./docs/master/billing.md:125
msgctxt "H3"
msgid "Billable Model"
msgstr ""

#: ./docs/8.x/billing.md:122
#: ./docs/9.x/billing.md:134
#: ./docs/10.x/billing.md:127
#: ./docs/11.x/billing.md:127
#: ./docs/master/billing.md:127
msgctxt "P"
msgid "Before using Cashier, add the `Billable` trait to your billable model definition. Typically, this will be the `App\\Models\\User` model. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons, and updating payment method information:"
msgstr ""

#: ./docs/8.x/billing.md:124
#: ./docs/9.x/billing.md:136
#: ./docs/10.x/billing.md:129
#: ./docs/11.x/billing.md:129
#: ./docs/master/billing.md:129
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Billable;\n"
"\n"
"class User extends Authenticatable\n"
"{\n"
"    use Billable;\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:131
#: ./docs/9.x/billing.md:143
#: ./docs/10.x/billing.md:136
#: ./docs/11.x/billing.md:136
#: ./docs/master/billing.md:136
msgctxt "P"
msgid "Cashier assumes your billable model will be the `App\\Models\\User` class that ships with Laravel. If you wish to change this you may specify a different model via the `useCustomerModel` method. This method should typically be called in the `boot` method of your `AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/billing.md:133
#: ./docs/9.x/billing.md:145
msgctxt "CODE"
msgid ""
"use App\\Models\\Cashier\\User;\n"
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::useCustomerModel(User::class);\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:138
#: ./docs/11.x/billing.md:138
#: ./docs/master/billing.md:138
msgctxt "CODE"
msgid ""
"use App\\Models\\Cashier\\User;\n"
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::useCustomerModel(User::class);\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:146
#: ./docs/9.x/billing.md:159
#: ./docs/10.x/billing.md:150
#: ./docs/11.x/billing.md:150
#: ./docs/master/billing.md:150
msgctxt "P"
msgid "If you're using a model other than Laravel's supplied `App\\Models\\User` model, you'll need to publish and alter the [Cashier migrations](#installation) provided to match your alternative model's table name."
msgstr ""

#: ./docs/8.x/billing.md:148
#: ./docs/9.x/billing.md:161
#: ./docs/10.x/billing.md:152
#: ./docs/11.x/billing.md:152
#: ./docs/master/billing.md:152
#~ msgctxt "P"
#~ msgid "<a name=\"api-keys\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:149
#: ./docs/9.x/billing.md:162
#: ./docs/10.x/billing.md:153
#: ./docs/11.x/billing.md:153
#: ./docs/master/billing.md:153
msgctxt "H3"
msgid "API Keys"
msgstr ""

#: ./docs/8.x/billing.md:151
#: ./docs/9.x/billing.md:164
#: ./docs/10.x/billing.md:155
#: ./docs/11.x/billing.md:155
#: ./docs/master/billing.md:155
msgctxt "P"
msgid "Next, you should configure your Stripe API keys in your application's `.env` file. You can retrieve your Stripe API keys from the Stripe control panel:"
msgstr ""

#: ./docs/8.x/billing.md:153
msgctxt "CODE"
msgid ""
"STRIPE_KEY=your-stripe-key\n"
"STRIPE_SECRET=your-stripe-secret"
msgstr ""

#: ./docs/8.x/billing.md:156
#: ./docs/9.x/billing.md:175
#: ./docs/10.x/billing.md:166
#: ./docs/11.x/billing.md:166
#: ./docs/master/billing.md:166
#~ msgctxt "P"
#~ msgid "<a name=\"currency-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:157
#: ./docs/9.x/billing.md:176
#: ./docs/10.x/billing.md:167
#: ./docs/11.x/billing.md:167
#: ./docs/master/billing.md:167
msgctxt "H3"
msgid "Currency Configuration"
msgstr ""

#: ./docs/8.x/billing.md:159
#: ./docs/9.x/billing.md:178
#: ./docs/10.x/billing.md:169
#: ./docs/11.x/billing.md:169
#: ./docs/master/billing.md:169
msgctxt "P"
msgid "The default Cashier currency is United States Dollars (USD). You can change the default currency by setting the `CASHIER_CURRENCY` environment variable within your application's `.env` file:"
msgstr ""

#: ./docs/8.x/billing.md:161
#: ./docs/9.x/billing.md:180
#: ./docs/10.x/billing.md:171
#: ./docs/11.x/billing.md:171
#: ./docs/master/billing.md:171
msgctxt "CODE"
msgid "CASHIER_CURRENCY=eur"
msgstr ""

#: ./docs/8.x/billing.md:163
#: ./docs/9.x/billing.md:184
#: ./docs/10.x/billing.md:175
#: ./docs/11.x/billing.md:175
#: ./docs/master/billing.md:175
msgctxt "P"
msgid "In addition to configuring Cashier's currency, you may also specify a locale to be used when formatting money values for display on invoices. Internally, Cashier utilizes [PHP's `NumberFormatter` class](https://www.php.net/manual/en/class.numberformatter.php) to set the currency locale:"
msgstr ""

#: ./docs/8.x/billing.md:165
#: ./docs/9.x/billing.md:186
#: ./docs/10.x/billing.md:177
#: ./docs/11.x/billing.md:177
#: ./docs/master/billing.md:177
msgctxt "CODE"
msgid "CASHIER_CURRENCY_LOCALE=nl_BE"
msgstr ""

#: ./docs/9.x/billing.md:166
#: ./docs/10.x/billing.md:157
#: ./docs/11.x/billing.md:157
#: ./docs/master/billing.md:157
msgctxt "CODE: ini"
msgid ""
"STRIPE_KEY=your-stripe-key\n"
"STRIPE_SECRET=your-stripe-secret\n"
"STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret"
msgstr ""

#: ./docs/8.x/billing.md:167
#: ./docs/9.x/billing.md:191
#: ./docs/10.x/billing.md:182
#: ./docs/11.x/billing.md:182
#: ./docs/master/billing.md:182
msgctxt "P"
msgid "In order to use locales other than `en`, ensure the `ext-intl` PHP extension is installed and configured on your server."
msgstr ""

#: ./docs/8.x/billing.md:169
#: ./docs/9.x/billing.md:193
#: ./docs/10.x/billing.md:184
#: ./docs/11.x/billing.md:184
#: ./docs/master/billing.md:184
#~ msgctxt "P"
#~ msgid "<a name=\"tax-configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:170
#: ./docs/9.x/billing.md:194
#: ./docs/10.x/billing.md:185
#: ./docs/11.x/billing.md:185
#: ./docs/master/billing.md:185
msgctxt "H3"
msgid "Tax Configuration"
msgstr ""

#: ./docs/8.x/billing.md:172
#: ./docs/9.x/billing.md:196
#: ./docs/10.x/billing.md:187
#: ./docs/11.x/billing.md:187
#: ./docs/master/billing.md:187
msgctxt "P"
msgid "Thanks to [Stripe Tax](https://stripe.com/tax), it's possible to automatically calculate taxes for all invoices generated by Stripe. You can enable automatic tax calculation by invoking the `calculateTaxes` method in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/9.x/billing.md:173
#: ./docs/10.x/billing.md:164
#: ./docs/11.x/billing.md:164
#: ./docs/master/billing.md:164
msgctxt "P"
msgid "You should ensure that the `STRIPE_WEBHOOK_SECRET` environment variable is defined in your application's `.env` file, as this variable is used to ensure that incoming webhooks are actually from Stripe."
msgstr ""

#: ./docs/8.x/billing.md:174
#: ./docs/9.x/billing.md:198
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::calculateTaxes();\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:186
#: ./docs/9.x/billing.md:210
#: ./docs/10.x/billing.md:199
#: ./docs/11.x/billing.md:199
#: ./docs/master/billing.md:199
msgctxt "P"
msgid "Once tax calculation has been enabled, any new subscriptions and any one-off invoices that are generated will receive automatic tax calculation."
msgstr ""

#: ./docs/8.x/billing.md:188
#: ./docs/9.x/billing.md:212
#: ./docs/10.x/billing.md:201
#: ./docs/11.x/billing.md:201
#: ./docs/master/billing.md:201
msgctxt "P"
msgid "For this feature to work properly, your customer's billing details, such as the customer's name, address, and tax ID, need to be synced to Stripe. You may use the [customer data synchronization](#syncing-customer-data-with-stripe) and [Tax ID](#tax-ids) methods offered by Cashier to accomplish this."
msgstr ""

#: ./docs/10.x/billing.md:189
#: ./docs/11.x/billing.md:189
#: ./docs/master/billing.md:189
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::calculateTaxes();\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:190
msgctxt "P"
msgid "Unfortunately, for now, no tax is calculated for [single charges](#single-charges) or [single charge checkouts](#single-charge-checkouts). In addition, Stripe Tax is currently \"invite-only\" during its beta period. You can request access to Stripe Tax via the [Stripe Tax website](https://stripe.com/tax#request-access)."
msgstr ""

#: ./docs/8.x/billing.md:192
#: ./docs/9.x/billing.md:217
#: ./docs/10.x/billing.md:206
#: ./docs/11.x/billing.md:203
#: ./docs/master/billing.md:206
#~ msgctxt "P"
#~ msgid "<a name=\"logging\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:193
#: ./docs/9.x/billing.md:218
#: ./docs/10.x/billing.md:207
#: ./docs/11.x/billing.md:204
#: ./docs/master/billing.md:207
msgctxt "H3"
msgid "Logging"
msgstr ""

#: ./docs/8.x/billing.md:195
#: ./docs/9.x/billing.md:220
#: ./docs/10.x/billing.md:209
#: ./docs/11.x/billing.md:206
#: ./docs/master/billing.md:209
msgctxt "P"
msgid "Cashier allows you to specify the log channel to be used when logging fatal Stripe errors. You may specify the log channel by defining the `CASHIER_LOGGER` environment variable within your application's `.env` file:"
msgstr ""

#: ./docs/8.x/billing.md:197
#: ./docs/9.x/billing.md:222
#: ./docs/10.x/billing.md:211
#: ./docs/11.x/billing.md:208
#: ./docs/master/billing.md:211
msgctxt "CODE"
msgid "CASHIER_LOGGER=stack"
msgstr ""

#: ./docs/8.x/billing.md:199
#: ./docs/9.x/billing.md:226
#: ./docs/10.x/billing.md:215
#: ./docs/11.x/billing.md:212
#: ./docs/master/billing.md:215
msgctxt "P"
msgid "Exceptions that are generated by API calls to Stripe will be logged through your application's default log channel."
msgstr ""

#: ./docs/8.x/billing.md:201
#: ./docs/9.x/billing.md:228
#: ./docs/10.x/billing.md:217
#: ./docs/11.x/billing.md:214
#: ./docs/master/billing.md:217
#~ msgctxt "P"
#~ msgid "<a name=\"using-custom-models\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:202
#: ./docs/9.x/billing.md:229
#: ./docs/10.x/billing.md:218
#: ./docs/11.x/billing.md:215
#: ./docs/master/billing.md:218
msgctxt "H3"
msgid "Using Custom Models"
msgstr ""

#: ./docs/8.x/billing.md:204
#: ./docs/9.x/billing.md:231
#: ./docs/10.x/billing.md:220
#: ./docs/11.x/billing.md:217
#: ./docs/master/billing.md:220
msgctxt "P"
msgid "You are free to extend the models used internally by Cashier by defining your own model and extending the corresponding Cashier model:"
msgstr ""

#: ./docs/8.x/billing.md:206
#: ./docs/9.x/billing.md:233
#: ./docs/10.x/billing.md:222
#: ./docs/11.x/billing.md:219
#: ./docs/master/billing.md:222
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Subscription as CashierSubscription;\n"
"\n"
"class Subscription extends CashierSubscription\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:213
#: ./docs/9.x/billing.md:240
#: ./docs/10.x/billing.md:229
#: ./docs/11.x/billing.md:226
#: ./docs/master/billing.md:229
msgctxt "P"
msgid "After defining your model, you may instruct Cashier to use your custom model via the `Laravel\\Cashier\\Cashier` class. Typically, you should inform Cashier about your custom models in the `boot` method of your application's `App\\Providers\\AppServiceProvider` class:"
msgstr ""

#: ./docs/8.x/billing.md:215
#: ./docs/9.x/billing.md:242
msgctxt "CODE"
msgid ""
"use App\\Models\\Cashier\\Subscription;\n"
"use App\\Models\\Cashier\\SubscriptionItem;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"    Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:215
#: ./docs/10.x/billing.md:204
#: ./docs/master/billing.md:204
msgctxt "P"
msgid "No tax is calculated for [single charges](#single-charges) or [single charge checkouts](#single-charge-checkouts)."
msgstr ""

#: ./docs/8.x/billing.md:229
#: ./docs/9.x/billing.md:256
#: ./docs/10.x/billing.md:441
#: ./docs/11.x/billing.md:438
#: ./docs/master/billing.md:441
#~ msgctxt "P"
#~ msgid "<a name=\"customers\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:230
#: ./docs/9.x/billing.md:257
#: ./docs/10.x/billing.md:442
#: ./docs/11.x/billing.md:439
#: ./docs/master/billing.md:442
msgctxt "H2"
msgid "Customers"
msgstr ""

#: ./docs/10.x/billing.md:231
#: ./docs/11.x/billing.md:228
#: ./docs/master/billing.md:231
msgctxt "CODE"
msgid ""
"use App\\Models\\Cashier\\Subscription;\n"
"use App\\Models\\Cashier\\SubscriptionItem;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Cashier::useSubscriptionModel(Subscription::class);\n"
"    Cashier::useSubscriptionItemModel(SubscriptionItem::class);\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:232
#: ./docs/9.x/billing.md:259
#: ./docs/10.x/billing.md:444
#: ./docs/11.x/billing.md:441
#: ./docs/master/billing.md:444
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-customers\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:233
#: ./docs/9.x/billing.md:260
#: ./docs/10.x/billing.md:445
#: ./docs/11.x/billing.md:442
#: ./docs/master/billing.md:445
msgctxt "H3"
msgid "Retrieving Customers"
msgstr ""

#: ./docs/8.x/billing.md:235
#: ./docs/9.x/billing.md:262
#: ./docs/10.x/billing.md:447
#: ./docs/11.x/billing.md:444
#: ./docs/master/billing.md:447
msgctxt "P"
msgid "You can retrieve a customer by their Stripe ID using the `Cashier::findBillable` method. This method will return an instance of the billable model:"
msgstr ""

#: ./docs/8.x/billing.md:237
#: ./docs/9.x/billing.md:264
#: ./docs/10.x/billing.md:449
#: ./docs/11.x/billing.md:446
#: ./docs/master/billing.md:449
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"$user = Cashier::findBillable($stripeId);"
msgstr ""

#: ./docs/8.x/billing.md:241
#: ./docs/9.x/billing.md:268
#: ./docs/10.x/billing.md:453
#: ./docs/11.x/billing.md:450
#: ./docs/master/billing.md:453
#~ msgctxt "P"
#~ msgid "<a name=\"creating-customers\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:242
#: ./docs/9.x/billing.md:269
#: ./docs/10.x/billing.md:454
#: ./docs/11.x/billing.md:451
#: ./docs/master/billing.md:454
msgctxt "H3"
msgid "Creating Customers"
msgstr ""

#: ./docs/10.x/billing.md:243
#: ./docs/11.x/billing.md:240
#: ./docs/master/billing.md:243
#~ msgctxt "P"
#~ msgid "<a name=\"quickstart\"></a>"
#~ msgstr ""

#: ./docs/10.x/billing.md:244
#: ./docs/11.x/billing.md:241
#: ./docs/master/billing.md:244
msgctxt "H2"
msgid "Quickstart"
msgstr ""

#: ./docs/8.x/billing.md:244
#: ./docs/9.x/billing.md:271
#: ./docs/10.x/billing.md:456
#: ./docs/11.x/billing.md:453
#: ./docs/master/billing.md:456
msgctxt "P"
msgid "Occasionally, you may wish to create a Stripe customer without beginning a subscription. You may accomplish this using the `createAsStripeCustomer` method:"
msgstr ""

#: ./docs/10.x/billing.md:246
#: ./docs/11.x/billing.md:243
#: ./docs/master/billing.md:246
#~ msgctxt "P"
#~ msgid "<a name=\"quickstart-selling-products\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:246
#: ./docs/9.x/billing.md:273
#: ./docs/10.x/billing.md:458
#: ./docs/11.x/billing.md:455
#: ./docs/master/billing.md:458
msgctxt "CODE"
msgid "$stripeCustomer = $user->createAsStripeCustomer();"
msgstr ""

#: ./docs/10.x/billing.md:247
#: ./docs/11.x/billing.md:244
#: ./docs/master/billing.md:247
msgctxt "H3"
msgid "Selling Products"
msgstr ""

#: ./docs/8.x/billing.md:248
#: ./docs/9.x/billing.md:275
#: ./docs/10.x/billing.md:460
#: ./docs/11.x/billing.md:457
#: ./docs/master/billing.md:460
msgctxt "P"
msgid "Once the customer has been created in Stripe, you may begin a subscription at a later date. You may provide an optional `$options` array to pass in any additional [customer creation parameters that are supported by the Stripe API](https://stripe.com/docs/api/customers/create):"
msgstr ""

#: ./docs/10.x/billing.md:250
#: ./docs/10.x/billing.md:337
#: ./docs/11.x/billing.md:247
#: ./docs/11.x/billing.md:334
#: ./docs/master/billing.md:250
#: ./docs/master/billing.md:337
msgctxt "P"
msgid "Before utilizing Stripe Checkout, you should define Products with fixed prices in your Stripe dashboard. In addition, you should [configure Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: ./docs/8.x/billing.md:250
#: ./docs/9.x/billing.md:277
#: ./docs/10.x/billing.md:462
#: ./docs/11.x/billing.md:459
#: ./docs/master/billing.md:462
msgctxt "CODE"
msgid "$stripeCustomer = $user->createAsStripeCustomer($options);"
msgstr ""

#: ./docs/10.x/billing.md:252
#: ./docs/10.x/billing.md:339
#: ./docs/11.x/billing.md:249
#: ./docs/11.x/billing.md:336
#: ./docs/master/billing.md:252
#: ./docs/master/billing.md:339
msgctxt "P"
msgid "Offering product and subscription billing via your application can be intimidating. However, thanks to Cashier and [Stripe Checkout](https://stripe.com/payments/checkout), you can easily build modern, robust payment integrations."
msgstr ""

#: ./docs/8.x/billing.md:252
#: ./docs/9.x/billing.md:279
#: ./docs/10.x/billing.md:464
#: ./docs/11.x/billing.md:461
#: ./docs/master/billing.md:464
msgctxt "P"
msgid "You may use the `asStripeCustomer` method if you want to return the Stripe customer object for a billable model:"
msgstr ""

#: ./docs/11.x/billing.md:253
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/checkout', function (Request $request) {\n"
"    $stripePriceId = 'price_deluxe_album';\n"
"\n"
"    $quantity = 1;\n"
"\n"
"    return $request->user()->checkout([$stripePriceId => $quantity], [\n"
"        'success_url' => route('checkout-success'),\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"})->name('checkout');\n"
"\n"
"Route::view('/checkout/success', 'checkout.success')->name('checkout-success');\n"
"Route::view('/checkout/cancel', 'checkout.cancel')->name('checkout-cancel');"
msgstr ""

#: ./docs/10.x/billing.md:254
#: ./docs/11.x/billing.md:251
#: ./docs/master/billing.md:254
msgctxt "P"
msgid "To charge customers for non-recurring, single-charge products, we'll utilize Cashier to direct customers to Stripe Checkout, where they will provide their payment details and confirm their purchase. Once the payment has been made via Checkout, the customer will be redirected to a success URL of your choosing within your application:"
msgstr ""

#: ./docs/8.x/billing.md:254
#: ./docs/9.x/billing.md:281
#: ./docs/10.x/billing.md:466
#: ./docs/11.x/billing.md:463
#: ./docs/master/billing.md:466
msgctxt "CODE"
msgid "$stripeCustomer = $user->asStripeCustomer();"
msgstr ""

#: ./docs/10.x/billing.md:256
#: ./docs/master/billing.md:256
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/checkout', function (Request $request) {\n"
"    $stripePriceId = 'price_deluxe_album';\n"
"\n"
"    $quantity = 1;\n"
"\n"
"    return $request->user()->checkout([$stripePriceId => $quantity], [\n"
"        'success_url' => route('checkout-success'),\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"})->name('checkout');\n"
"\n"
"Route::view('checkout.success')->name('checkout-success');\n"
"Route::view('checkout.cancel')->name('checkout-cancel');"
msgstr ""

#: ./docs/8.x/billing.md:256
#: ./docs/9.x/billing.md:283
#: ./docs/10.x/billing.md:468
#: ./docs/11.x/billing.md:465
#: ./docs/master/billing.md:468
msgctxt "P"
msgid "The `createOrGetStripeCustomer` method may be used if you would like to retrieve the Stripe customer object for a given billable model but are not sure whether the billable model is already a customer within Stripe. This method will create a new customer in Stripe if one does not already exist:"
msgstr ""

#: ./docs/8.x/billing.md:258
#: ./docs/9.x/billing.md:285
#: ./docs/10.x/billing.md:470
#: ./docs/11.x/billing.md:467
#: ./docs/master/billing.md:470
msgctxt "CODE"
msgid "$stripeCustomer = $user->createOrGetStripeCustomer();"
msgstr ""

#: ./docs/8.x/billing.md:260
#: ./docs/9.x/billing.md:287
#: ./docs/10.x/billing.md:472
#: ./docs/11.x/billing.md:469
#: ./docs/master/billing.md:472
#~ msgctxt "P"
#~ msgid "<a name=\"updating-customers\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:261
#: ./docs/9.x/billing.md:288
#: ./docs/10.x/billing.md:473
#: ./docs/11.x/billing.md:470
#: ./docs/master/billing.md:473
msgctxt "H3"
msgid "Updating Customers"
msgstr ""

#: ./docs/8.x/billing.md:263
#: ./docs/9.x/billing.md:290
#: ./docs/10.x/billing.md:475
#: ./docs/11.x/billing.md:472
#: ./docs/master/billing.md:475
msgctxt "P"
msgid "Occasionally, you may wish to update the Stripe customer directly with additional information. You may accomplish this using the `updateStripeCustomer` method. This method accepts an array of [customer update options supported by the Stripe API](https://stripe.com/docs/api/customers/update):"
msgstr ""

#: ./docs/8.x/billing.md:265
#: ./docs/9.x/billing.md:292
#: ./docs/10.x/billing.md:477
#: ./docs/11.x/billing.md:474
#: ./docs/master/billing.md:477
msgctxt "CODE"
msgid "$stripeCustomer = $user->updateStripeCustomer($options);"
msgstr ""

#: ./docs/8.x/billing.md:267
#: ./docs/9.x/billing.md:294
#: ./docs/10.x/billing.md:479
#: ./docs/11.x/billing.md:476
#: ./docs/master/billing.md:479
#~ msgctxt "P"
#~ msgid "<a name=\"balances\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:268
#: ./docs/9.x/billing.md:295
#: ./docs/10.x/billing.md:480
#: ./docs/11.x/billing.md:477
#: ./docs/master/billing.md:480
msgctxt "H3"
msgid "Balances"
msgstr ""

#: ./docs/8.x/billing.md:270
#: ./docs/9.x/billing.md:297
#: ./docs/10.x/billing.md:482
#: ./docs/11.x/billing.md:479
#: ./docs/master/billing.md:482
msgctxt "P"
msgid "Stripe allows you to credit or debit a customer's \"balance\". Later, this balance will be credited or debited on new invoices. To check the customer's total balance you may use the `balance` method that is available on your billable model. The `balance` method will return a formatted string representation of the balance in the customer's currency:"
msgstr ""

#: ./docs/10.x/billing.md:272
#: ./docs/11.x/billing.md:269
#: ./docs/master/billing.md:272
msgctxt "P"
msgid "As you can see in the example above, we will utilize Cashier's provided `checkout` method to redirect the customer to Stripe Checkout for a given \"price identifier\". When using Stripe, \"prices\" refer to [defined prices for specific products](https://stripe.com/docs/products-prices/how-products-and-prices-work)."
msgstr ""

#: ./docs/8.x/billing.md:272
#: ./docs/9.x/billing.md:299
#: ./docs/10.x/billing.md:484
#: ./docs/11.x/billing.md:481
#: ./docs/master/billing.md:484
msgctxt "CODE"
msgid "$balance = $user->balance();"
msgstr ""

#: ./docs/10.x/billing.md:274
#: ./docs/11.x/billing.md:271
#: ./docs/master/billing.md:274
msgctxt "P"
msgid "If necessary, the `checkout` method will automatically create a customer in Stripe and connect that Stripe customer record to the corresponding user in your application's database. After completing the checkout session, the customer will be redirected to a dedicated success or cancellation page where you can display an informational message to the customer."
msgstr ""

#: ./docs/8.x/billing.md:274
msgctxt "P"
msgid "To credit a customer's balance, you may provide a negative value to the `applyBalance` method. If you wish, you may also provide a description:"
msgstr ""

#: ./docs/10.x/billing.md:276
#: ./docs/11.x/billing.md:273
#: ./docs/master/billing.md:276
#~ msgctxt "P"
#~ msgid "<a name=\"providing-meta-data-to-stripe-checkout\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:276
msgctxt "CODE"
msgid "$user->applyBalance(-500, 'Premium customer top-up.');"
msgstr ""

#: ./docs/10.x/billing.md:277
#: ./docs/11.x/billing.md:274
#: ./docs/master/billing.md:277
msgctxt "H4"
msgid "Providing Meta Data to Stripe Checkout"
msgstr ""

#: ./docs/8.x/billing.md:278
msgctxt "P"
msgid "Providing a positive value to the `applyBalance` method will debit the customer's balance:"
msgstr ""

#: ./docs/10.x/billing.md:279
#: ./docs/11.x/billing.md:276
#: ./docs/master/billing.md:279
msgctxt "P"
msgid "When selling products, it's common to keep track of completed orders and purchased products via `Cart` and `Order` models defined by your own application. When redirecting customers to Stripe Checkout to complete a purchase, you may need to provide an existing order identifier so that you can associate the completed purchase with the corresponding order when the customer is redirected back to your application."
msgstr ""

#: ./docs/8.x/billing.md:280
msgctxt "CODE"
msgid "$user->applyBalance(300, 'Bad usage penalty.');"
msgstr ""

#: ./docs/10.x/billing.md:281
#: ./docs/11.x/billing.md:278
#: ./docs/master/billing.md:281
msgctxt "P"
msgid "To accomplish this, you may provide an array of `metadata` to the `checkout` method. Let's imagine that a pending `Order` is created within our application when a user begins the checkout process. Remember, the `Cart` and `Order` models in this example are illustrative and not provided by Cashier. You are free to implement these concepts based on the needs of your own application:"
msgstr ""

#: ./docs/8.x/billing.md:282
#: ./docs/9.x/billing.md:309
#: ./docs/10.x/billing.md:494
#: ./docs/11.x/billing.md:491
#: ./docs/master/billing.md:494
msgctxt "P"
msgid "The `applyBalance` method will create new customer balance transactions for the customer. You may retrieve these transaction records using the `balanceTransactions` method, which may be useful in order to provide a log of credits and debits for the customer to review:"
msgstr ""

#: ./docs/10.x/billing.md:283
#: ./docs/11.x/billing.md:280
#: ./docs/master/billing.md:283
msgctxt "CODE"
msgid ""
"use App\\Models\\Cart;\n"
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/cart/{cart}/checkout', function (Request $request, Cart $cart) {\n"
"    $order = Order::create([\n"
"        'cart_id' => $cart->id,\n"
"        'price_ids' => $cart->price_ids,\n"
"        'status' => 'incomplete',\n"
"    ]);\n"
"\n"
"    return $request->user()->checkout($order->price_ids, [\n"
"        'success_url' => route('checkout-success').'?session_id={CHECKOUT_SESSION_ID}',\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"        'metadata' => ['order_id' => $order->id],\n"
"    ]);\n"
"})->name('checkout');"
msgstr ""

#: ./docs/8.x/billing.md:284
#: ./docs/9.x/billing.md:311
#: ./docs/10.x/billing.md:496
#: ./docs/11.x/billing.md:493
#: ./docs/master/billing.md:496
msgctxt "CODE"
msgid ""
"// Retrieve all transactions...\n"
"$transactions = $user->balanceTransactions();\n"
"\n"
"foreach ($transactions as $transaction) {\n"
"    // Transaction amount...\n"
"    $amount = $transaction->amount(); // $2.31\n"
"\n"
"    // Retrieve the related invoice when available...\n"
"    $invoice = $transaction->invoice();\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:295
#: ./docs/9.x/billing.md:322
#: ./docs/10.x/billing.md:507
#: ./docs/11.x/billing.md:504
#: ./docs/master/billing.md:507
#~ msgctxt "P"
#~ msgid "<a name=\"tax-ids\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:296
#: ./docs/9.x/billing.md:323
#: ./docs/10.x/billing.md:508
#: ./docs/11.x/billing.md:505
#: ./docs/master/billing.md:508
msgctxt "H3"
msgid "Tax IDs"
msgstr ""

#: ./docs/8.x/billing.md:298
#: ./docs/9.x/billing.md:325
#: ./docs/10.x/billing.md:510
#: ./docs/11.x/billing.md:507
#: ./docs/master/billing.md:510
msgctxt "P"
msgid "Cashier offers an easy way to manage a customer's tax IDs. For example, the `taxIds` method may be used to retrieve all of the [tax IDs](https://stripe.com/docs/api/customer_tax_ids/object) that are assigned to a customer as a collection:"
msgstr ""

#: ./docs/8.x/billing.md:300
#: ./docs/9.x/billing.md:327
#: ./docs/10.x/billing.md:512
#: ./docs/11.x/billing.md:509
#: ./docs/master/billing.md:512
msgctxt "CODE"
msgid "$taxIds = $user->taxIds();"
msgstr ""

#: ./docs/10.x/billing.md:301
#: ./docs/11.x/billing.md:298
#: ./docs/master/billing.md:301
msgctxt "P"
msgid "As you can see in the example above, when a user begins the checkout process, we will provide all of the cart / order's associated Stripe price identifiers to the `checkout` method. Of course, your application is responsible for associating these items with the \"shopping cart\" or order as a customer adds them. We also provide the order's ID to the Stripe Checkout session via the `metadata` array. Finally, we have added the `CHECKOUT_SESSION_ID` template variable to the Checkout success route. When Stripe redirects customers back to your application, this template variable will automatically be populated with the Checkout session ID."
msgstr ""

#: ./docs/9.x/billing.md:301
#: ./docs/10.x/billing.md:486
#: ./docs/11.x/billing.md:483
#: ./docs/master/billing.md:486
msgctxt "P"
msgid "To credit a customer's balance, you may provide a value to the `creditBalance` method. If you wish, you may also provide a description:"
msgstr ""

#: ./docs/8.x/billing.md:302
#: ./docs/9.x/billing.md:329
#: ./docs/10.x/billing.md:514
#: ./docs/11.x/billing.md:511
#: ./docs/master/billing.md:514
msgctxt "P"
msgid "You can also retrieve a specific tax ID for a customer by its identifier:"
msgstr ""

#: ./docs/10.x/billing.md:303
#: ./docs/11.x/billing.md:300
#: ./docs/master/billing.md:303
msgctxt "P"
msgid "Next, let's build the Checkout success route. This is the route that users will be redirected to after their purchase has been completed via Stripe Checkout. Within this route, we can retrieve the Stripe Checkout session ID and the associated Stripe Checkout instance in order to access our provided meta data and update our customer's order accordingly:"
msgstr ""

#: ./docs/9.x/billing.md:303
#: ./docs/10.x/billing.md:488
#: ./docs/11.x/billing.md:485
#: ./docs/master/billing.md:488
msgctxt "CODE"
msgid "$user->creditBalance(500, 'Premium customer top-up.');"
msgstr ""

#: ./docs/8.x/billing.md:304
#: ./docs/9.x/billing.md:331
#: ./docs/10.x/billing.md:516
#: ./docs/11.x/billing.md:513
#: ./docs/master/billing.md:516
msgctxt "CODE"
msgid "$taxId = $user->findTaxId('txi_belgium');"
msgstr ""

#: ./docs/10.x/billing.md:305
#: ./docs/11.x/billing.md:302
#: ./docs/master/billing.md:305
msgctxt "CODE"
msgid ""
"use App\\Models\\Order;\n"
"use Illuminate\\Http\\Request;\n"
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"Route::get('/checkout/success', function (Request $request) {\n"
"    $sessionId = $request->get('session_id');\n"
"\n"
"    if ($sessionId === null) {\n"
"        return;\n"
"    }\n"
"\n"
"    $session = Cashier::stripe()->checkout->sessions->retrieve($sessionId);\n"
"\n"
"    if ($session->payment_status !== 'paid') {\n"
"        return;\n"
"    }\n"
"\n"
"    $orderId = $session['metadata']['order_id'] ?? null;\n"
"\n"
"    $order = Order::findOrFail($orderId);\n"
"\n"
"    $order->update(['status' => 'completed']);\n"
"\n"
"    return view('checkout-success', ['order' => $order]);\n"
"})->name('checkout-success');"
msgstr ""

#: ./docs/9.x/billing.md:305
#: ./docs/10.x/billing.md:490
#: ./docs/11.x/billing.md:487
#: ./docs/master/billing.md:490
msgctxt "P"
msgid "Providing a value to the `debitBalance` method will debit the customer's balance:"
msgstr ""

#: ./docs/8.x/billing.md:306
#: ./docs/9.x/billing.md:333
#: ./docs/10.x/billing.md:518
#: ./docs/11.x/billing.md:515
#: ./docs/master/billing.md:518
msgctxt "P"
msgid "You may create a new Tax ID by providing a valid [type](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-type) and value to the `createTaxId` method:"
msgstr ""

#: ./docs/9.x/billing.md:307
#: ./docs/10.x/billing.md:492
#: ./docs/11.x/billing.md:489
#: ./docs/master/billing.md:492
msgctxt "CODE"
msgid "$user->debitBalance(300, 'Bad usage penalty.');"
msgstr ""

#: ./docs/8.x/billing.md:308
#: ./docs/9.x/billing.md:335
#: ./docs/10.x/billing.md:520
#: ./docs/11.x/billing.md:517
#: ./docs/master/billing.md:520
msgctxt "CODE"
msgid "$taxId = $user->createTaxId('eu_vat', 'BE0123456789');"
msgstr ""

#: ./docs/8.x/billing.md:310
#: ./docs/9.x/billing.md:337
#: ./docs/10.x/billing.md:522
#: ./docs/11.x/billing.md:519
#: ./docs/master/billing.md:522
msgctxt "P"
msgid "The `createTaxId` method will immediately add the VAT ID to the customer's account. [Verification of VAT IDs is also done by Stripe](https://stripe.com/docs/invoicing/customer/tax-ids#validation); however, this is an asynchronous process. You can be notified of verification updates by subscribing to the `customer.tax_id.updated` webhook event and inspecting [the VAT IDs `verification` parameter](https://stripe.com/docs/api/customer_tax_ids/object#tax_id_object-verification). For more information on handling webhooks, please consult the [documentation on defining webhook handlers](#handling-stripe-webhooks)."
msgstr ""

#: ./docs/8.x/billing.md:312
#: ./docs/9.x/billing.md:339
#: ./docs/10.x/billing.md:524
#: ./docs/11.x/billing.md:521
#: ./docs/master/billing.md:524
msgctxt "P"
msgid "You may delete a tax ID using the `deleteTaxId` method:"
msgstr ""

#: ./docs/8.x/billing.md:314
#: ./docs/9.x/billing.md:341
#: ./docs/10.x/billing.md:526
#: ./docs/11.x/billing.md:523
#: ./docs/master/billing.md:526
msgctxt "CODE"
msgid "$user->deleteTaxId('txi_belgium');"
msgstr ""

#: ./docs/8.x/billing.md:316
#: ./docs/9.x/billing.md:343
#: ./docs/10.x/billing.md:528
#: ./docs/11.x/billing.md:525
#: ./docs/master/billing.md:528
#~ msgctxt "P"
#~ msgid "<a name=\"syncing-customer-data-with-stripe\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:317
#: ./docs/9.x/billing.md:344
#: ./docs/10.x/billing.md:529
#: ./docs/11.x/billing.md:526
#: ./docs/master/billing.md:529
msgctxt "H3"
msgid "Syncing Customer Data With Stripe"
msgstr ""

#: ./docs/8.x/billing.md:319
#: ./docs/9.x/billing.md:346
#: ./docs/10.x/billing.md:531
#: ./docs/11.x/billing.md:528
#: ./docs/master/billing.md:531
msgctxt "P"
msgid "Typically, when your application's users update their name, email address, or other information that is also stored by Stripe, you should inform Stripe of the updates. By doing so, Stripe's copy of the information will be in sync with your application's."
msgstr ""

#: ./docs/8.x/billing.md:321
#: ./docs/9.x/billing.md:348
#: ./docs/10.x/billing.md:533
#: ./docs/11.x/billing.md:530
#: ./docs/master/billing.md:533
msgctxt "P"
msgid "To automate this, you may define an event listener on your billable model that reacts to the model's `updated` event. Then, within your event listener, you may invoke the `syncStripeCustomerDetails` method on the model:"
msgstr ""

#: ./docs/8.x/billing.md:323
#: ./docs/9.x/billing.md:350
msgctxt "CODE"
msgid ""
"use function Illuminate\\Events\\queueable;\n"
"\n"
"/**\n"
" * The \"booted\" method of the model.\n"
" *\n"
" * @return void\n"
" */\n"
"protected static function booted()\n"
"{\n"
"    static::updated(queueable(function ($customer) {\n"
"        if ($customer->hasStripeId()) {\n"
"            $customer->syncStripeCustomerDetails();\n"
"        }\n"
"    }));\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:331
#: ./docs/11.x/billing.md:328
#: ./docs/master/billing.md:331
msgctxt "P"
msgid "Please refer to Stripe's documentation for more information on the [data contained by the Checkout session object](https://stripe.com/docs/api/checkout/sessions/object)."
msgstr ""

#: ./docs/10.x/billing.md:333
#: ./docs/11.x/billing.md:330
#: ./docs/master/billing.md:333
#~ msgctxt "P"
#~ msgid "<a name=\"quickstart-selling-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/10.x/billing.md:334
#: ./docs/11.x/billing.md:331
#: ./docs/master/billing.md:334
msgctxt "H3"
msgid "Selling Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:339
#: ./docs/9.x/billing.md:366
#: ./docs/10.x/billing.md:550
#: ./docs/11.x/billing.md:547
#: ./docs/master/billing.md:550
msgctxt "P"
msgid "Now, every time your customer model is updated, its information will be synced with Stripe. For convenience, Cashier will automatically sync your customer's information with Stripe on the initial creation of the customer."
msgstr ""

#: ./docs/10.x/billing.md:341
#: ./docs/11.x/billing.md:338
#: ./docs/master/billing.md:341
msgctxt "P"
msgid "To learn how to sell subscriptions using Cashier and Stripe Checkout, let's consider the simple scenario of a subscription service with a basic monthly (`price_basic_monthly`) and yearly (`price_basic_yearly`) plan. These two prices could be grouped under a \"Basic\" product (`pro_basic`) in our Stripe dashboard. In addition, our subscription service might offer an Expert plan as `pro_expert`."
msgstr ""

#: ./docs/8.x/billing.md:341
#: ./docs/9.x/billing.md:368
#: ./docs/10.x/billing.md:552
#: ./docs/11.x/billing.md:549
#: ./docs/master/billing.md:552
msgctxt "P"
msgid "You may customize the columns used for syncing customer information to Stripe by overriding a variety of methods provided by Cashier. For example, you may override the `stripeName` method to customize the attribute that should be considered the customer's \"name\" when Cashier syncs customer information to Stripe:"
msgstr ""

#: ./docs/10.x/billing.md:343
#: ./docs/11.x/billing.md:340
#: ./docs/master/billing.md:343
msgctxt "P"
msgid "First, let's discover how a customer can subscribe to our services. Of course, you can imagine the customer might click a \"subscribe\" button for the Basic plan on our application's pricing page. This button or link should direct the user to a Laravel route which creates the Stripe Checkout session for their chosen plan:"
msgstr ""

#: ./docs/8.x/billing.md:343
#: ./docs/9.x/billing.md:370
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the customer name that should be synced to Stripe.\n"
" *\n"
" * @return string|null\n"
" */\n"
"public function stripeName()\n"
"{\n"
"    return $this->company_name;\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:345
#: ./docs/11.x/billing.md:342
#: ./docs/master/billing.md:345
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_basic_monthly')\n"
"        ->trialDays(5)\n"
"        ->allowPromotionCodes()\n"
"        ->checkout([\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:353
msgctxt "P"
msgid "Similarly, you may override the `stripeEmail`, `stripePhone`, and `stripeAddress` methods. These methods will sync information to their corresponding customer parameters when [updating the Stripe customer object](https://stripe.com/docs/api/customers/update). If you wish to take total control over the customer information sync process, you may override the `syncStripeCustomerDetails` method."
msgstr ""

#: ./docs/8.x/billing.md:355
#: ./docs/9.x/billing.md:382
#: ./docs/10.x/billing.md:564
#: ./docs/11.x/billing.md:561
#: ./docs/master/billing.md:564
#~ msgctxt "P"
#~ msgid "<a name=\"billing-portal\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:356
#: ./docs/9.x/billing.md:383
#: ./docs/10.x/billing.md:565
#: ./docs/11.x/billing.md:562
#: ./docs/master/billing.md:565
msgctxt "H3"
msgid "Billing Portal"
msgstr ""

#: ./docs/10.x/billing.md:358
#: ./docs/11.x/billing.md:355
#: ./docs/master/billing.md:358
msgctxt "P"
msgid "As you can see in the example above, we will redirect the customer to a Stripe Checkout session which will allow them to subscribe to our Basic plan. After a successful checkout or cancellation, the customer will be redirected back to the URL we provided to the `checkout` method. To know when their subscription has actually started (since some payment methods require a few seconds to process), we'll also need to [configure Cashier's webhook handling](#handling-stripe-webhooks)."
msgstr ""

#: ./docs/8.x/billing.md:358
#: ./docs/9.x/billing.md:385
#: ./docs/10.x/billing.md:567
#: ./docs/11.x/billing.md:564
#: ./docs/master/billing.md:567
msgctxt "P"
msgid "Stripe offers [an easy way to set up a billing portal](https://stripe.com/docs/billing/subscriptions/customer-portal) so that your customer can manage their subscription, payment methods, and view their billing history. You can redirect your users to the billing portal by invoking the `redirectToBillingPortal` method on the billable model from a controller or route:"
msgstr ""

#: ./docs/10.x/billing.md:360
#: ./docs/11.x/billing.md:357
#: ./docs/master/billing.md:360
msgctxt "P"
msgid "Now that customers can start subscriptions, we need to restrict certain portions of our application so that only subscribed users can access them. Of course, we can always determine a user's current subscription status via the `subscribed` method provided by Cashier's `Billable` trait:"
msgstr ""

#: ./docs/8.x/billing.md:360
#: ./docs/9.x/billing.md:387
#: ./docs/10.x/billing.md:569
#: ./docs/11.x/billing.md:566
#: ./docs/master/billing.md:569
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/billing-portal', function (Request $request) {\n"
"    return $request->user()->redirectToBillingPortal();\n"
"});"
msgstr ""

#: ./docs/10.x/billing.md:362
#: ./docs/11.x/billing.md:359
#: ./docs/master/billing.md:362
msgctxt "CODE: blade"
msgid ""
"@if ($user->subscribed())\n"
"    <p>You are subscribed.</p>\n"
"@endif"
msgstr ""

#: ./docs/8.x/billing.md:366
#: ./docs/9.x/billing.md:393
#: ./docs/10.x/billing.md:575
#: ./docs/11.x/billing.md:572
#: ./docs/master/billing.md:575
msgctxt "P"
msgid "By default, when the user is finished managing their subscription, they will be able to return to the `home` route of your application via a link within the Stripe billing portal. You may provide a custom URL that the user should return to by passing the URL as an argument to the `redirectToBillingPortal` method:"
msgstr ""

#: ./docs/10.x/billing.md:368
#: ./docs/11.x/billing.md:365
#: ./docs/master/billing.md:368
msgctxt "P"
msgid "We can even easily determine if a user is subscribed to specific product or price:"
msgstr ""

#: ./docs/8.x/billing.md:368
#: ./docs/9.x/billing.md:395
#: ./docs/10.x/billing.md:577
#: ./docs/11.x/billing.md:574
#: ./docs/master/billing.md:577
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/billing-portal', function (Request $request) {\n"
"    return $request->user()->redirectToBillingPortal(route('billing'));\n"
"});"
msgstr ""

#: ./docs/10.x/billing.md:370
#: ./docs/11.x/billing.md:367
#: ./docs/master/billing.md:370
msgctxt "CODE: blade"
msgid ""
"@if ($user->subscribedToProduct('pro_basic'))\n"
"    <p>You are subscribed to our Basic product.</p>\n"
"@endif\n"
"\n"
"@if ($user->subscribedToPrice('price_basic_monthly'))\n"
"    <p>You are subscribed to our monthly Basic plan.</p>\n"
"@endif"
msgstr ""

#: ./docs/8.x/billing.md:374
#: ./docs/9.x/billing.md:401
#: ./docs/10.x/billing.md:583
#: ./docs/11.x/billing.md:580
#: ./docs/master/billing.md:583
msgctxt "P"
msgid "If you would like to generate the URL to the billing portal without generating an HTTP redirect response, you may invoke the `billingPortalUrl` method:"
msgstr ""

#: ./docs/8.x/billing.md:376
#: ./docs/9.x/billing.md:403
#: ./docs/10.x/billing.md:585
#: ./docs/11.x/billing.md:582
#: ./docs/master/billing.md:585
msgctxt "CODE"
msgid "$url = $request->user()->billingPortalUrl(route('billing'));"
msgstr ""

#: ./docs/8.x/billing.md:378
#: ./docs/9.x/billing.md:405
#: ./docs/10.x/billing.md:587
#: ./docs/11.x/billing.md:584
#: ./docs/master/billing.md:587
#~ msgctxt "P"
#~ msgid "<a name=\"payment-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:379
#: ./docs/9.x/billing.md:406
#: ./docs/10.x/billing.md:588
#: ./docs/11.x/billing.md:585
#: ./docs/master/billing.md:588
msgctxt "H2"
msgid "Payment Methods"
msgstr ""

#: ./docs/10.x/billing.md:380
#: ./docs/11.x/billing.md:377
#: ./docs/master/billing.md:380
#~ msgctxt "P"
#~ msgid "<a name=\"quickstart-building-a-subscribed-middleware\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:380
#: ./docs/10.x/billing.md:562
#: ./docs/11.x/billing.md:559
#: ./docs/master/billing.md:562
msgctxt "P"
msgid "Similarly, you may override the `stripeEmail`, `stripePhone`, `stripeAddress`, and `stripePreferredLocales` methods. These methods will sync information to their corresponding customer parameters when [updating the Stripe customer object](https://stripe.com/docs/api/customers/update). If you wish to take total control over the customer information sync process, you may override the `syncStripeCustomerDetails` method."
msgstr ""

#: ./docs/10.x/billing.md:381
#: ./docs/11.x/billing.md:378
#: ./docs/master/billing.md:381
msgctxt "H4"
msgid "Building a Subscribed Middleware"
msgstr ""

#: ./docs/8.x/billing.md:381
#: ./docs/9.x/billing.md:408
#: ./docs/10.x/billing.md:590
#: ./docs/11.x/billing.md:587
#: ./docs/master/billing.md:590
#~ msgctxt "P"
#~ msgid "<a name=\"storing-payment-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:382
#: ./docs/9.x/billing.md:409
#: ./docs/10.x/billing.md:591
#: ./docs/11.x/billing.md:588
#: ./docs/master/billing.md:591
msgctxt "H3"
msgid "Storing Payment Methods"
msgstr ""

#: ./docs/10.x/billing.md:383
#: ./docs/11.x/billing.md:380
#: ./docs/master/billing.md:383
msgctxt "P"
msgid "For convenience, you may wish to create a [middleware](/docs/{{version}}/middleware) which determines if the incoming request is from a subscribed user. Once this middleware has been defined, you may easily assign it to a route to prevent users that are not subscribed from accessing the route:"
msgstr ""

#: ./docs/8.x/billing.md:384
msgctxt "P"
msgid "In order to create subscriptions or perform \"one off\" charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish this differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below."
msgstr ""

#: ./docs/10.x/billing.md:385
#: ./docs/11.x/billing.md:382
#: ./docs/master/billing.md:385
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class Subscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if (! $request->user()?->subscribed()) {\n"
"            // Redirect user to billing page and ask them to subscribe...\n"
"            return redirect('/billing');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:386
#: ./docs/9.x/billing.md:413
#: ./docs/10.x/billing.md:595
#: ./docs/11.x/billing.md:592
#: ./docs/master/billing.md:595
#~ msgctxt "P"
#~ msgid "<a name=\"payment-methods-for-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:387
#: ./docs/9.x/billing.md:414
msgctxt "H4"
msgid "Payment Methods For Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:389
#: ./docs/9.x/billing.md:416
#: ./docs/10.x/billing.md:598
#: ./docs/11.x/billing.md:595
#: ./docs/master/billing.md:598
msgctxt "P"
msgid "When storing a customer's credit card information for future use by a subscription, the Stripe \"Setup Intents\" API must be used to securely gather the customer's payment method details. A \"Setup Intent\" indicates to Stripe the intention to charge a customer's payment method. Cashier's `Billable` trait includes the `createSetupIntent` method to easily create a new Setup Intent. You should invoke this method from the route or controller that will render the form which gathers your customer's payment method details:"
msgstr ""

#: ./docs/8.x/billing.md:391
#: ./docs/9.x/billing.md:418
#: ./docs/10.x/billing.md:600
#: ./docs/11.x/billing.md:597
#: ./docs/master/billing.md:600
msgctxt "CODE"
msgid ""
"return view('update-payment-method', [\n"
"    'intent' => $user->createSetupIntent()\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:395
#: ./docs/9.x/billing.md:422
#: ./docs/10.x/billing.md:604
#: ./docs/11.x/billing.md:601
#: ./docs/master/billing.md:604
msgctxt "P"
msgid "After you have created the Setup Intent and passed it to the view, you should attach its secret to the element that will gather the payment method. For example, consider this \"update payment method\" form:"
msgstr ""

#: ./docs/8.x/billing.md:397
#: ./docs/9.x/billing.md:424
#: ./docs/10.x/billing.md:606
#: ./docs/11.x/billing.md:603
#: ./docs/master/billing.md:606
msgctxt "CODE: html"
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">\n"
"    Update Payment Method\n"
"</button>"
msgstr ""

#: ./docs/8.x/billing.md:408
#: ./docs/9.x/billing.md:435
#: ./docs/10.x/billing.md:617
#: ./docs/11.x/billing.md:614
#: ./docs/master/billing.md:617
msgctxt "P"
msgid "Next, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#: ./docs/10.x/billing.md:409
#: ./docs/11.x/billing.md:406
#: ./docs/master/billing.md:409
msgctxt "P"
msgid "Once the middleware has been defined, you may assign it to a route:"
msgstr ""

#: ./docs/8.x/billing.md:410
#: ./docs/8.x/billing.md:470
#: ./docs/9.x/billing.md:437
#: ./docs/9.x/billing.md:498
#: ./docs/10.x/billing.md:619
#: ./docs/10.x/billing.md:680
#: ./docs/11.x/billing.md:616
#: ./docs/11.x/billing.md:677
#: ./docs/master/billing.md:619
#: ./docs/master/billing.md:680
msgctxt "CODE: html"
msgid ""
"<script src=\"https://js.stripe.com/v3/\"></script>\n"
"\n"
"<script>\n"
"    const stripe = Stripe('stripe-public-key');\n"
"\n"
"    const elements = stripe.elements();\n"
"    const cardElement = elements.create('card');\n"
"\n"
"    cardElement.mount('#card-element');\n"
"</script>"
msgstr ""

#: ./docs/10.x/billing.md:411
#: ./docs/11.x/billing.md:408
#: ./docs/master/billing.md:411
msgctxt "CODE"
msgid ""
"use App\\Http\\Middleware\\Subscribed;\n"
"\n"
"Route::get('/dashboard', function () {\n"
"    // ...\n"
"})->middleware([Subscribed::class]);"
msgstr ""

#: ./docs/9.x/billing.md:411
#: ./docs/10.x/billing.md:593
#: ./docs/11.x/billing.md:590
#: ./docs/master/billing.md:593
msgctxt "P"
msgid "In order to create subscriptions or perform \"one-off\" charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish this differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below."
msgstr ""

#: ./docs/10.x/billing.md:417
#: ./docs/11.x/billing.md:414
#: ./docs/master/billing.md:417
#~ msgctxt "P"
#~ msgid "<a name=\"quickstart-allowing-customers-to-manage-their-billing-plan\"></a>"
#~ msgstr ""

#: ./docs/10.x/billing.md:418
#: ./docs/11.x/billing.md:415
#: ./docs/master/billing.md:418
msgctxt "H4"
msgid "Allowing Customers to Manage Their Billing Plan"
msgstr ""

#: ./docs/10.x/billing.md:420
#: ./docs/11.x/billing.md:417
#: ./docs/master/billing.md:420
msgctxt "P"
msgid "Of course, customers may want to change their subscription plan to another product or \"tier\". The easiest way to allow this is by directing customers to Stripe's [Customer Billing Portal](https://stripe.com/docs/no-code/customer-portal), which provides a hosted user interface that allows customers to download invoices, update their payment method, and change subscription plans."
msgstr ""

#: ./docs/10.x/billing.md:422
#: ./docs/11.x/billing.md:419
#: ./docs/master/billing.md:422
msgctxt "P"
msgid "First, define a link or button within your application that directs users to a Laravel route which we will utilize to initiate a Billing Portal session:"
msgstr ""

#: ./docs/8.x/billing.md:423
#: ./docs/9.x/billing.md:450
#: ./docs/10.x/billing.md:632
#: ./docs/11.x/billing.md:629
#: ./docs/master/billing.md:632
msgctxt "P"
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `confirmCardSetup` method](https://stripe.com/docs/js/setup_intents/confirm_card_setup):"
msgstr ""

#: ./docs/10.x/billing.md:424
#: ./docs/11.x/billing.md:421
#: ./docs/master/billing.md:424
msgctxt "CODE: blade"
msgid ""
"<a href=\"{{ route('billing') }}\">\n"
"    Billing\n"
"</a>"
msgstr ""

#: ./docs/8.x/billing.md:425
#: ./docs/9.x/billing.md:452
#: ./docs/10.x/billing.md:634
#: ./docs/11.x/billing.md:631
#: ./docs/master/billing.md:634
msgctxt "CODE: js"
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"const clientSecret = cardButton.dataset.secret;\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { setupIntent, error } = await stripe.confirmCardSetup(\n"
"        clientSecret, {\n"
"            payment_method: {\n"
"                card: cardElement,\n"
"                billing_details: { name: cardHolderName.value }\n"
"            }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});"
msgstr ""

#: ./docs/10.x/billing.md:430
#: ./docs/11.x/billing.md:427
#: ./docs/master/billing.md:430
msgctxt "P"
msgid "Next, let's define the route that initiates a Stripe Customer Billing Portal session and redirects the user to the Portal. The `redirectToBillingPortal` method accepts the URL that users should be returned to when exiting the Portal:"
msgstr ""

#: ./docs/10.x/billing.md:432
#: ./docs/11.x/billing.md:429
#: ./docs/master/billing.md:432
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/billing', function (Request $request) {\n"
"    return $request->user()->redirectToBillingPortal(route('dashboard'));\n"
"})->middleware(['auth'])->name('billing');"
msgstr ""

#: ./docs/11.x/billing.md:436
msgctxt "P"
msgid "As long as you have configured Cashier's webhook handling, Cashier will automatically keep your application's Cashier-related database tables in sync by inspecting the incoming webhooks from Stripe. So, for example, when a user cancels their subscription via Stripe's Customer Billing Portal, Cashier will receive the corresponding webhook and mark the subscription as \"canceled\" in your application's database."
msgstr ""

#: ./docs/10.x/billing.md:439
#: ./docs/master/billing.md:439
msgctxt "P"
msgid "As long as you have configured Cashier's webhook handling, Cashier will automatically keep your application's Cashier-related database tables in sync by inspecting the incoming webhooks from Stripe. So, for example, when a user cancels their subscription via Stripe's Customer Billing Portal, Cashier will receive the corresponding webhook and mark the subscription as \"cancelled\" in your application's database."
msgstr ""

#: ./docs/8.x/billing.md:448
#: ./docs/9.x/billing.md:475
#: ./docs/10.x/billing.md:657
#: ./docs/11.x/billing.md:654
#: ./docs/master/billing.md:657
msgctxt "P"
msgid "After the card has been verified by Stripe, you may pass the resulting `setupIntent.payment_method` identifier to your Laravel application, where it can be attached to the customer. The payment method can either be [added as a new payment method](#adding-payment-methods) or [used to update the default payment method](#updating-the-default-payment-method). You can also immediately use the payment method identifier to [create a new subscription](#creating-subscriptions)."
msgstr ""

#: ./docs/8.x/billing.md:450
#: ./docs/9.x/billing.md:478
#: ./docs/10.x/billing.md:660
#: ./docs/11.x/billing.md:657
#: ./docs/master/billing.md:660
msgctxt "P"
msgid "If you would like more information about Setup Intents and gathering customer payment details please [review this overview provided by Stripe](https://stripe.com/docs/payments/save-and-reuse#php)."
msgstr ""

#: ./docs/8.x/billing.md:452
#: ./docs/9.x/billing.md:480
#: ./docs/10.x/billing.md:662
#: ./docs/11.x/billing.md:659
#: ./docs/master/billing.md:662
#~ msgctxt "P"
#~ msgid "<a name=\"payment-methods-for-single-charges\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:453
#: ./docs/9.x/billing.md:481
msgctxt "H4"
msgid "Payment Methods For Single Charges"
msgstr ""

#: ./docs/8.x/billing.md:455
#: ./docs/9.x/billing.md:483
#: ./docs/10.x/billing.md:665
#: ./docs/11.x/billing.md:662
#: ./docs/master/billing.md:665
msgctxt "P"
msgid "Of course, when making a single charge against a customer's payment method, we will only need to use a payment method identifier once. Due to Stripe limitations, you may not use the stored default payment method of a customer for single charges. You must allow the customer to enter their payment method details using the Stripe.js library. For example, consider the following form:"
msgstr ""

#: ./docs/8.x/billing.md:457
#: ./docs/9.x/billing.md:485
#: ./docs/10.x/billing.md:667
#: ./docs/11.x/billing.md:664
#: ./docs/master/billing.md:667
msgctxt "CODE: html"
msgid ""
"<input id=\"card-holder-name\" type=\"text\">\n"
"\n"
"<!-- Stripe Elements Placeholder -->\n"
"<div id=\"card-element\"></div>\n"
"\n"
"<button id=\"card-button\">\n"
"    Process Payment\n"
"</button>"
msgstr ""

#: ./docs/8.x/billing.md:468
#: ./docs/9.x/billing.md:496
#: ./docs/10.x/billing.md:678
#: ./docs/11.x/billing.md:675
#: ./docs/master/billing.md:678
msgctxt "P"
msgid "After defining such a form, the Stripe.js library may be used to attach a [Stripe Element](https://stripe.com/docs/stripe-js) to the form and securely gather the customer's payment details:"
msgstr ""

#: ./docs/8.x/billing.md:483
#: ./docs/9.x/billing.md:511
#: ./docs/10.x/billing.md:693
#: ./docs/11.x/billing.md:690
#: ./docs/master/billing.md:693
msgctxt "P"
msgid "Next, the card can be verified and a secure \"payment method identifier\" can be retrieved from Stripe using [Stripe's `createPaymentMethod` method](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method):"
msgstr ""

#: ./docs/8.x/billing.md:485
#: ./docs/9.x/billing.md:513
#: ./docs/10.x/billing.md:695
#: ./docs/11.x/billing.md:692
#: ./docs/master/billing.md:695
msgctxt "CODE: js"
msgid ""
"const cardHolderName = document.getElementById('card-holder-name');\n"
"const cardButton = document.getElementById('card-button');\n"
"\n"
"cardButton.addEventListener('click', async (e) => {\n"
"    const { paymentMethod, error } = await stripe.createPaymentMethod(\n"
"        'card', cardElement, {\n"
"            billing_details: { name: cardHolderName.value }\n"
"        }\n"
"    );\n"
"\n"
"    if (error) {\n"
"        // Display \"error.message\" to the user...\n"
"    } else {\n"
"        // The card has been verified successfully...\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:504
#: ./docs/9.x/billing.md:532
#: ./docs/10.x/billing.md:714
#: ./docs/11.x/billing.md:711
#: ./docs/master/billing.md:714
msgctxt "P"
msgid "If the card is verified successfully, you may pass the `paymentMethod.id` to your Laravel application and process a [single charge](#simple-charge)."
msgstr ""

#: ./docs/8.x/billing.md:506
#: ./docs/9.x/billing.md:534
#: ./docs/10.x/billing.md:716
#: ./docs/11.x/billing.md:713
#: ./docs/master/billing.md:716
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-payment-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:507
#: ./docs/9.x/billing.md:535
#: ./docs/10.x/billing.md:717
#: ./docs/11.x/billing.md:714
#: ./docs/master/billing.md:717
msgctxt "H3"
msgid "Retrieving Payment Methods"
msgstr ""

#: ./docs/8.x/billing.md:509
#: ./docs/9.x/billing.md:537
#: ./docs/10.x/billing.md:719
#: ./docs/11.x/billing.md:716
#: ./docs/master/billing.md:719
msgctxt "P"
msgid "The `paymentMethods` method on the billable model instance returns a collection of `Laravel\\Cashier\\PaymentMethod` instances:"
msgstr ""

#: ./docs/8.x/billing.md:511
#: ./docs/9.x/billing.md:539
#: ./docs/10.x/billing.md:721
#: ./docs/11.x/billing.md:718
#: ./docs/master/billing.md:721
msgctxt "CODE"
msgid "$paymentMethods = $user->paymentMethods();"
msgstr ""

#: ./docs/8.x/billing.md:513
#: ./docs/9.x/billing.md:541
msgctxt "P"
msgid "By default, this method will return payment methods of the `card` type. To retrieve payment methods of a different type, you may pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:515
#: ./docs/9.x/billing.md:543
#: ./docs/10.x/billing.md:725
#: ./docs/11.x/billing.md:722
#: ./docs/master/billing.md:725
msgctxt "CODE"
msgid "$paymentMethods = $user->paymentMethods('sepa_debit');"
msgstr ""

#: ./docs/8.x/billing.md:517
#: ./docs/9.x/billing.md:545
#: ./docs/10.x/billing.md:727
#: ./docs/11.x/billing.md:724
#: ./docs/master/billing.md:727
msgctxt "P"
msgid "To retrieve the customer's default payment method, the `defaultPaymentMethod` method may be used:"
msgstr ""

#: ./docs/8.x/billing.md:519
#: ./docs/9.x/billing.md:547
#: ./docs/10.x/billing.md:729
#: ./docs/11.x/billing.md:726
#: ./docs/master/billing.md:729
msgctxt "CODE"
msgid "$paymentMethod = $user->defaultPaymentMethod();"
msgstr ""

#: ./docs/8.x/billing.md:521
#: ./docs/9.x/billing.md:549
#: ./docs/10.x/billing.md:731
#: ./docs/11.x/billing.md:728
#: ./docs/master/billing.md:731
msgctxt "P"
msgid "You can retrieve a specific payment method that is attached to the billable model using the `findPaymentMethod` method:"
msgstr ""

#: ./docs/8.x/billing.md:523
#: ./docs/9.x/billing.md:551
#: ./docs/10.x/billing.md:733
#: ./docs/11.x/billing.md:730
#: ./docs/master/billing.md:733
msgctxt "CODE"
msgid "$paymentMethod = $user->findPaymentMethod($paymentMethodId);"
msgstr ""

#: ./docs/8.x/billing.md:525
#: ./docs/9.x/billing.md:553
#~ msgctxt "P"
#~ msgid "<a name=\"check-for-a-payment-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:526
#: ./docs/9.x/billing.md:554
msgctxt "H3"
msgid "Determining If A User Has A Payment Method"
msgstr ""

#: ./docs/8.x/billing.md:528
#: ./docs/9.x/billing.md:556
#: ./docs/10.x/billing.md:738
#: ./docs/11.x/billing.md:735
#: ./docs/master/billing.md:738
msgctxt "P"
msgid "To determine if a billable model has a default payment method attached to their account, invoke the `hasDefaultPaymentMethod` method:"
msgstr ""

#: ./docs/8.x/billing.md:530
#: ./docs/9.x/billing.md:558
msgctxt "CODE"
msgid ""
"if ($user->hasDefaultPaymentMethod()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:534
#: ./docs/9.x/billing.md:562
#: ./docs/10.x/billing.md:744
#: ./docs/11.x/billing.md:741
#: ./docs/master/billing.md:744
msgctxt "P"
msgid "You may use the `hasPaymentMethod` method to determine if a billable model has at least one payment method attached to their account:"
msgstr ""

#: ./docs/10.x/billing.md:535
#: ./docs/11.x/billing.md:532
#: ./docs/master/billing.md:535
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"use function Illuminate\\Events\\queueable;\n"
"\n"
"/**\n"
" * The \"booted\" method of the model.\n"
" */\n"
"protected static function booted(): void\n"
"{\n"
"    static::updated(queueable(function (User $customer) {\n"
"        if ($customer->hasStripeId()) {\n"
"            $customer->syncStripeCustomerDetails();\n"
"        }\n"
"    }));\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:536
#: ./docs/9.x/billing.md:564
msgctxt "CODE"
msgid ""
"if ($user->hasPaymentMethod()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:540
#: ./docs/9.x/billing.md:568
msgctxt "P"
msgid "This method will determine if the billable model has payment methods of the `card` type. To determine if a payment method of another type exists for the model, you may pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:542
#: ./docs/9.x/billing.md:570
msgctxt "CODE"
msgid ""
"if ($user->hasPaymentMethod('sepa_debit')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:546
#: ./docs/9.x/billing.md:574
#: ./docs/10.x/billing.md:756
#: ./docs/11.x/billing.md:753
#: ./docs/master/billing.md:756
#~ msgctxt "P"
#~ msgid "<a name=\"updating-the-default-payment-method\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:547
#: ./docs/9.x/billing.md:575
msgctxt "H3"
msgid "Updating The Default Payment Method"
msgstr ""

#: ./docs/8.x/billing.md:549
#: ./docs/9.x/billing.md:577
#: ./docs/10.x/billing.md:759
#: ./docs/11.x/billing.md:756
#: ./docs/master/billing.md:759
msgctxt "P"
msgid "The `updateDefaultPaymentMethod` method may be used to update a customer's default payment method information. This method accepts a Stripe payment method identifier and will assign the new payment method as the default billing payment method:"
msgstr ""

#: ./docs/8.x/billing.md:551
#: ./docs/9.x/billing.md:579
#: ./docs/10.x/billing.md:761
#: ./docs/11.x/billing.md:758
#: ./docs/master/billing.md:761
msgctxt "CODE"
msgid "$user->updateDefaultPaymentMethod($paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:553
#: ./docs/9.x/billing.md:581
#: ./docs/10.x/billing.md:763
#: ./docs/11.x/billing.md:760
#: ./docs/master/billing.md:763
msgctxt "P"
msgid "To sync your default payment method information with the customer's default payment method information in Stripe, you may use the `updateDefaultPaymentMethodFromStripe` method:"
msgstr ""

#: ./docs/10.x/billing.md:554
#: ./docs/11.x/billing.md:551
#: ./docs/master/billing.md:554
msgctxt "CODE"
msgid ""
"/**\n"
" * Get the customer name that should be synced to Stripe.\n"
" */\n"
"public function stripeName(): string|null\n"
"{\n"
"    return $this->company_name;\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:555
#: ./docs/9.x/billing.md:583
#: ./docs/10.x/billing.md:765
#: ./docs/11.x/billing.md:762
#: ./docs/master/billing.md:765
msgctxt "CODE"
msgid "$user->updateDefaultPaymentMethodFromStripe();"
msgstr ""

#: ./docs/8.x/billing.md:557
#: ./docs/9.x/billing.md:586
#: ./docs/10.x/billing.md:768
#: ./docs/11.x/billing.md:765
#: ./docs/master/billing.md:768
msgctxt "P"
msgid "The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations imposed by Stripe, it may not be used for single charges."
msgstr ""

#: ./docs/8.x/billing.md:559
#: ./docs/9.x/billing.md:588
#: ./docs/10.x/billing.md:770
#: ./docs/11.x/billing.md:767
#: ./docs/master/billing.md:770
#~ msgctxt "P"
#~ msgid "<a name=\"adding-payment-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:560
#: ./docs/9.x/billing.md:589
#: ./docs/10.x/billing.md:771
#: ./docs/11.x/billing.md:768
#: ./docs/master/billing.md:771
msgctxt "H3"
msgid "Adding Payment Methods"
msgstr ""

#: ./docs/8.x/billing.md:562
#: ./docs/9.x/billing.md:591
#: ./docs/10.x/billing.md:773
#: ./docs/11.x/billing.md:770
#: ./docs/master/billing.md:773
msgctxt "P"
msgid "To add a new payment method, you may call the `addPaymentMethod` method on the billable model, passing the payment method identifier:"
msgstr ""

#: ./docs/8.x/billing.md:564
#: ./docs/9.x/billing.md:593
#: ./docs/10.x/billing.md:775
#: ./docs/11.x/billing.md:772
#: ./docs/master/billing.md:775
msgctxt "CODE"
msgid "$user->addPaymentMethod($paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:566
#: ./docs/9.x/billing.md:596
#: ./docs/10.x/billing.md:778
#: ./docs/11.x/billing.md:775
#: ./docs/master/billing.md:778
msgctxt "P"
msgid "To learn how to retrieve payment method identifiers please review the [payment method storage documentation](#storing-payment-methods)."
msgstr ""

#: ./docs/8.x/billing.md:568
#: ./docs/9.x/billing.md:598
#: ./docs/10.x/billing.md:780
#: ./docs/11.x/billing.md:777
#: ./docs/master/billing.md:780
#~ msgctxt "P"
#~ msgid "<a name=\"deleting-payment-methods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:569
#: ./docs/9.x/billing.md:599
#: ./docs/10.x/billing.md:781
#: ./docs/11.x/billing.md:778
#: ./docs/master/billing.md:781
msgctxt "H3"
msgid "Deleting Payment Methods"
msgstr ""

#: ./docs/8.x/billing.md:571
#: ./docs/9.x/billing.md:601
#: ./docs/10.x/billing.md:783
#: ./docs/11.x/billing.md:780
#: ./docs/master/billing.md:783
msgctxt "P"
msgid "To delete a payment method, you may call the `delete` method on the `Laravel\\Cashier\\PaymentMethod` instance you wish to delete:"
msgstr ""

#: ./docs/8.x/billing.md:573
#: ./docs/9.x/billing.md:603
#: ./docs/10.x/billing.md:785
#: ./docs/11.x/billing.md:782
#: ./docs/master/billing.md:785
msgctxt "CODE"
msgid "$paymentMethod->delete();"
msgstr ""

#: ./docs/8.x/billing.md:575
#: ./docs/9.x/billing.md:605
#: ./docs/10.x/billing.md:787
#: ./docs/11.x/billing.md:784
#: ./docs/master/billing.md:787
msgctxt "P"
msgid "The `deletePaymentMethod` method will delete a specific payment method from the billable model:"
msgstr ""

#: ./docs/8.x/billing.md:577
#: ./docs/9.x/billing.md:607
#: ./docs/10.x/billing.md:789
#: ./docs/11.x/billing.md:786
#: ./docs/master/billing.md:789
msgctxt "CODE"
msgid "$user->deletePaymentMethod('pm_visa');"
msgstr ""

#: ./docs/8.x/billing.md:579
#: ./docs/9.x/billing.md:609
#: ./docs/10.x/billing.md:791
#: ./docs/11.x/billing.md:788
#: ./docs/master/billing.md:791
msgctxt "P"
msgid "The `deletePaymentMethods` method will delete all of the payment method information for the billable model:"
msgstr ""

#: ./docs/8.x/billing.md:581
#: ./docs/9.x/billing.md:611
#: ./docs/10.x/billing.md:793
#: ./docs/11.x/billing.md:790
#: ./docs/master/billing.md:793
msgctxt "CODE"
msgid "$user->deletePaymentMethods();"
msgstr ""

#: ./docs/8.x/billing.md:583
#: ./docs/9.x/billing.md:613
msgctxt "P"
msgid "By default, this method will delete payment methods of the `card` type. To delete payment methods of a different type you can pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:585
#: ./docs/9.x/billing.md:615
#: ./docs/10.x/billing.md:797
#: ./docs/11.x/billing.md:794
#: ./docs/master/billing.md:797
msgctxt "CODE"
msgid "$user->deletePaymentMethods('sepa_debit');"
msgstr ""

#: ./docs/8.x/billing.md:587
#: ./docs/9.x/billing.md:618
#: ./docs/10.x/billing.md:800
#: ./docs/11.x/billing.md:797
#: ./docs/master/billing.md:800
msgctxt "P"
msgid "If a user has an active subscription, your application should not allow them to delete their default payment method."
msgstr ""

#: ./docs/8.x/billing.md:589
#: ./docs/9.x/billing.md:620
#: ./docs/10.x/billing.md:802
#: ./docs/11.x/billing.md:799
#: ./docs/master/billing.md:802
#~ msgctxt "P"
#~ msgid "<a name=\"subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:590
#: ./docs/9.x/billing.md:621
#: ./docs/10.x/billing.md:803
#: ./docs/11.x/billing.md:800
#: ./docs/master/billing.md:803
msgctxt "H2"
msgid "Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:592
#: ./docs/9.x/billing.md:623
#: ./docs/10.x/billing.md:805
#: ./docs/11.x/billing.md:802
#: ./docs/master/billing.md:805
msgctxt "P"
msgid "Subscriptions provide a way to set up recurring payments for your customers. Stripe subscriptions managed by Cashier provide support for multiple subscription prices, subscription quantities, trials, and more."
msgstr ""

#: ./docs/8.x/billing.md:594
#: ./docs/9.x/billing.md:625
#: ./docs/10.x/billing.md:807
#: ./docs/11.x/billing.md:804
#: ./docs/master/billing.md:807
#~ msgctxt "P"
#~ msgid "<a name=\"creating-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:595
#: ./docs/9.x/billing.md:626
#: ./docs/10.x/billing.md:808
#: ./docs/11.x/billing.md:805
#: ./docs/master/billing.md:808
msgctxt "H3"
msgid "Creating Subscriptions"
msgstr ""

#: ./docs/10.x/billing.md:596
#: ./docs/11.x/billing.md:593
#: ./docs/master/billing.md:596
msgctxt "H4"
msgid "Payment Methods for Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:597
#: ./docs/9.x/billing.md:628
#: ./docs/10.x/billing.md:810
#: ./docs/11.x/billing.md:807
#: ./docs/master/billing.md:810
msgctxt "P"
msgid "To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of `App\\Models\\User`. Once you have retrieved the model instance, you may use the `newSubscription` method to create the model's subscription:"
msgstr ""

#: ./docs/8.x/billing.md:599
#: ./docs/9.x/billing.md:630
#: ./docs/10.x/billing.md:812
#: ./docs/11.x/billing.md:809
#: ./docs/master/billing.md:812
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription(\n"
"        'default', 'price_monthly'\n"
"    )->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:609
#: ./docs/9.x/billing.md:640
msgctxt "P"
msgid "The first argument passed to the `newSubscription` method should be the internal name of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. This subscription name is only for internal application usage and is not meant to be shown to users. In addition, it should not contain spaces and it should never be changed after creating the subscription. The second argument is the specific price the user is subscribing to. This value should correspond to the price's identifier in Stripe."
msgstr ""

#: ./docs/8.x/billing.md:611
#: ./docs/9.x/billing.md:642
#: ./docs/10.x/billing.md:824
#: ./docs/11.x/billing.md:821
#: ./docs/master/billing.md:824
msgctxt "P"
msgid "The `create` method, which accepts [a Stripe payment method identifier](#storing-payment-methods) or Stripe `PaymentMethod` object, will begin the subscription as well as update your database with the billable model's Stripe customer ID and other relevant billing information."
msgstr ""

#: ./docs/8.x/billing.md:613
#: ./docs/9.x/billing.md:645
#: ./docs/10.x/billing.md:827
#: ./docs/11.x/billing.md:824
#: ./docs/master/billing.md:827
msgctxt "P"
msgid "Passing a payment method identifier directly to the `create` subscription method will also automatically add it to the user's stored payment methods."
msgstr ""

#: ./docs/8.x/billing.md:615
#: ./docs/9.x/billing.md:647
#: ./docs/10.x/billing.md:829
#: ./docs/11.x/billing.md:826
#: ./docs/master/billing.md:829
#~ msgctxt "P"
#~ msgid "<a name=\"collecting-recurring-payments-via-invoice-emails\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:616
#: ./docs/9.x/billing.md:648
msgctxt "H4"
msgid "Collecting Recurring Payments Via Invoice Emails"
msgstr ""

#: ./docs/8.x/billing.md:618
#: ./docs/9.x/billing.md:650
#: ./docs/10.x/billing.md:832
#: ./docs/11.x/billing.md:829
#: ./docs/master/billing.md:832
msgctxt "P"
msgid "Instead of collecting a customer's recurring payments automatically, you may instruct Stripe to email an invoice to the customer each time their recurring payment is due. Then, the customer may manually pay the invoice once they receive it. The customer does not need to provide a payment method up front when collecting recurring payments via invoices:"
msgstr ""

#: ./docs/8.x/billing.md:620
#: ./docs/9.x/billing.md:652
#: ./docs/10.x/billing.md:834
#: ./docs/11.x/billing.md:831
#: ./docs/master/billing.md:834
msgctxt "CODE"
msgid "$user->newSubscription('default', 'price_monthly')->createAndSendInvoice();"
msgstr ""

#: ./docs/8.x/billing.md:622
msgctxt "P"
msgid "The amount of time a customer has to pay their invoice before their subscription is canceled is determined by your subscription and invoice settings within the [Stripe dashboard](https://dashboard.stripe.com/settings/billing/automatic)."
msgstr ""

#: ./docs/8.x/billing.md:624
#: ./docs/9.x/billing.md:660
#: ./docs/10.x/billing.md:842
#: ./docs/11.x/billing.md:839
#: ./docs/master/billing.md:842
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-quantities\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:625
#: ./docs/8.x/billing.md:991
#: ./docs/9.x/billing.md:661
#: ./docs/9.x/billing.md:1074
#: ./docs/10.x/billing.md:843
#: ./docs/10.x/billing.md:1254
#: ./docs/11.x/billing.md:840
#: ./docs/11.x/billing.md:1251
#: ./docs/master/billing.md:843
#: ./docs/master/billing.md:1254
msgctxt "H4"
msgid "Quantities"
msgstr ""

#: ./docs/8.x/billing.md:627
#: ./docs/9.x/billing.md:663
#: ./docs/10.x/billing.md:845
#: ./docs/11.x/billing.md:842
#: ./docs/master/billing.md:845
msgctxt "P"
msgid "If you would like to set a specific [quantity](https://stripe.com/docs/billing/subscriptions/quantities) for the price when creating the subscription, you should invoke the `quantity` method on the subscription builder before creating the subscription:"
msgstr ""

#: ./docs/8.x/billing.md:629
#: ./docs/9.x/billing.md:665
#: ./docs/10.x/billing.md:847
#: ./docs/11.x/billing.md:844
#: ./docs/master/billing.md:847
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')\n"
"     ->quantity(5)\n"
"     ->create($paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:633
#: ./docs/9.x/billing.md:669
#: ./docs/10.x/billing.md:851
#: ./docs/11.x/billing.md:848
#: ./docs/master/billing.md:851
#~ msgctxt "P"
#~ msgid "<a name=\"additional-details\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:634
#: ./docs/9.x/billing.md:670
#: ./docs/10.x/billing.md:852
#: ./docs/11.x/billing.md:849
#: ./docs/master/billing.md:852
msgctxt "H4"
msgid "Additional Details"
msgstr ""

#: ./docs/8.x/billing.md:636
#: ./docs/9.x/billing.md:672
#: ./docs/10.x/billing.md:854
#: ./docs/11.x/billing.md:851
#: ./docs/master/billing.md:854
msgctxt "P"
msgid "If you would like to specify additional [customer](https://stripe.com/docs/api/customers/create) or [subscription](https://stripe.com/docs/api/subscriptions/create) options supported by Stripe, you may do so by passing them as the second and third arguments to the `create` method:"
msgstr ""

#: ./docs/8.x/billing.md:638
#: ./docs/9.x/billing.md:674
#: ./docs/10.x/billing.md:856
#: ./docs/11.x/billing.md:853
#: ./docs/master/billing.md:856
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')->create($paymentMethod, [\n"
"    'email' => $email,\n"
"], [\n"
"    'metadata' => ['note' => 'Some extra information.'],\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:644
#: ./docs/9.x/billing.md:680
#: ./docs/10.x/billing.md:862
#: ./docs/11.x/billing.md:859
#: ./docs/master/billing.md:862
#~ msgctxt "P"
#~ msgid "<a name=\"coupons\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:645
#: ./docs/9.x/billing.md:681
#: ./docs/10.x/billing.md:863
#: ./docs/11.x/billing.md:860
#: ./docs/master/billing.md:863
msgctxt "H4"
msgid "Coupons"
msgstr ""

#: ./docs/8.x/billing.md:647
#: ./docs/9.x/billing.md:683
#: ./docs/10.x/billing.md:865
#: ./docs/11.x/billing.md:862
#: ./docs/master/billing.md:865
msgctxt "P"
msgid "If you would like to apply a coupon when creating the subscription, you may use the `withCoupon` method:"
msgstr ""

#: ./docs/8.x/billing.md:649
#: ./docs/9.x/billing.md:685
#: ./docs/10.x/billing.md:867
#: ./docs/11.x/billing.md:864
#: ./docs/master/billing.md:867
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')\n"
"     ->withCoupon('code')\n"
"     ->create($paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:653
msgctxt "P"
msgid "Or, if you would like to apply a [Stripe promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you may use the `withPromotionCode` method. The given promotion code ID should be the Stripe API ID assigned to the promotion code and not the customer facing promotion code:"
msgstr ""

#: ./docs/9.x/billing.md:654
#: ./docs/10.x/billing.md:836
#: ./docs/master/billing.md:836
msgctxt "P"
msgid "The amount of time a customer has to pay their invoice before their subscription is cancelled is determined by the `days_until_due` option. By default, this is 30 days; however, you may provide a specific value for this option if you wish:"
msgstr ""

#: ./docs/8.x/billing.md:655
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')\n"
"     ->withPromotionCode('promo_code')\n"
"     ->create($paymentMethod);"
msgstr ""

#: ./docs/9.x/billing.md:656
#: ./docs/10.x/billing.md:838
#: ./docs/11.x/billing.md:835
#: ./docs/master/billing.md:838
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')->createAndSendInvoice([], [\n"
"    'days_until_due' => 30\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:659
#: ./docs/9.x/billing.md:737
#: ./docs/10.x/billing.md:919
#: ./docs/11.x/billing.md:916
#: ./docs/master/billing.md:919
#~ msgctxt "P"
#~ msgid "<a name=\"adding-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:660
#: ./docs/9.x/billing.md:738
#: ./docs/10.x/billing.md:920
#: ./docs/11.x/billing.md:917
#: ./docs/master/billing.md:920
msgctxt "H4"
msgid "Adding Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:662
#: ./docs/9.x/billing.md:740
#: ./docs/10.x/billing.md:922
#: ./docs/11.x/billing.md:919
#: ./docs/master/billing.md:922
msgctxt "P"
msgid "If you would like to add a subscription to a customer who already has a default payment method you may invoke the `add` method on the subscription builder:"
msgstr ""

#: ./docs/10.x/billing.md:663
#: ./docs/11.x/billing.md:660
#: ./docs/master/billing.md:663
msgctxt "H4"
msgid "Payment Methods for Single Charges"
msgstr ""

#: ./docs/8.x/billing.md:664
#: ./docs/9.x/billing.md:742
#: ./docs/10.x/billing.md:924
#: ./docs/11.x/billing.md:921
#: ./docs/master/billing.md:924
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$user->newSubscription('default', 'price_monthly')->add();"
msgstr ""

#: ./docs/8.x/billing.md:670
#: ./docs/9.x/billing.md:748
#: ./docs/10.x/billing.md:930
#: ./docs/11.x/billing.md:927
#: ./docs/master/billing.md:930
#~ msgctxt "P"
#~ msgid "<a name=\"creating-subscriptions-from-the-stripe-dashboard\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:671
#: ./docs/9.x/billing.md:749
msgctxt "H4"
msgid "Creating Subscriptions From The Stripe Dashboard"
msgstr ""

#: ./docs/8.x/billing.md:673
msgctxt "P"
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a name of `default`. To customize the subscription name that is assigned to dashboard created subscriptions, [extend the `WebhookController`](/docs/{{version}}/billing#defining-webhook-event-handlers) and overwrite the `newSubscriptionName` method."
msgstr ""

#: ./docs/8.x/billing.md:675
#: ./docs/9.x/billing.md:753
msgctxt "P"
msgid "In addition, you may only create one type of subscription via the Stripe dashboard. If your application offers multiple subscriptions that use different names, only one type of subscription may be added through the Stripe dashboard."
msgstr ""

#: ./docs/8.x/billing.md:677
msgctxt "P"
msgid "Finally, you should always make sure to only add one active subscription per type of subscription offered by your application. If customer has two `default` subscriptions, only the most recently added subscription will be used by Cashier even though both would be synced with your application's database."
msgstr ""

#: ./docs/8.x/billing.md:679
#: ./docs/9.x/billing.md:757
#: ./docs/10.x/billing.md:939
#: ./docs/11.x/billing.md:936
#: ./docs/master/billing.md:939
#~ msgctxt "P"
#~ msgid "<a name=\"checking-subscription-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:680
#: ./docs/9.x/billing.md:758
#: ./docs/10.x/billing.md:940
#: ./docs/11.x/billing.md:937
#: ./docs/master/billing.md:940
msgctxt "H3"
msgid "Checking Subscription Status"
msgstr ""

#: ./docs/8.x/billing.md:682
#: ./docs/9.x/billing.md:760
msgctxt "P"
msgid "Once a customer is subscribed to your application, you may easily check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the customer has an active subscription, even if the subscription is currently within its trial period. The `subscribed` method accepts the name of the subscription as its first argument:"
msgstr ""

#: ./docs/8.x/billing.md:684
#: ./docs/9.x/billing.md:762
msgctxt "CODE"
msgid ""
"if ($user->subscribed('default')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:688
#: ./docs/9.x/billing.md:766
#: ./docs/10.x/billing.md:948
#: ./docs/11.x/billing.md:945
#: ./docs/master/billing.md:948
msgctxt "P"
msgid "The `subscribed` method also makes a great candidate for a [route middleware](/docs/{{version}}/middleware), allowing you to filter access to routes and controllers based on the user's subscription status:"
msgstr ""

#: ./docs/9.x/billing.md:689
#: ./docs/10.x/billing.md:871
#: ./docs/11.x/billing.md:868
#: ./docs/master/billing.md:871
msgctxt "P"
msgid "Or, if you would like to apply a [Stripe promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes), you may use the `withPromotionCode` method:"
msgstr ""

#: ./docs/8.x/billing.md:690
#: ./docs/9.x/billing.md:768
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\Closure  $next\n"
"     * @return mixed\n"
"     */\n"
"    public function handle($request, Closure $next)\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:691
#: ./docs/10.x/billing.md:873
#: ./docs/11.x/billing.md:870
#: ./docs/master/billing.md:873
msgctxt "CODE"
msgid ""
"$user->newSubscription('default', 'price_monthly')\n"
"     ->withPromotionCode('promo_code_id')\n"
"     ->create($paymentMethod);"
msgstr ""

#: ./docs/9.x/billing.md:695
#: ./docs/10.x/billing.md:877
#: ./docs/11.x/billing.md:874
#: ./docs/master/billing.md:877
msgctxt "P"
msgid "The given promotion code ID should be the Stripe API ID assigned to the promotion code and not the customer facing promotion code. If you need to find a promotion code ID based on a given customer facing promotion code, you may use the `findPromotionCode` method:"
msgstr ""

#: ./docs/9.x/billing.md:697
#: ./docs/10.x/billing.md:879
#: ./docs/11.x/billing.md:876
#: ./docs/master/billing.md:879
msgctxt "CODE"
msgid ""
"// Find a promotion code ID by its customer facing code...\n"
"$promotionCode = $user->findPromotionCode('SUMMERSALE');\n"
"\n"
"// Find an active promotion code ID by its customer facing code...\n"
"$promotionCode = $user->findActivePromotionCode('SUMMERSALE');"
msgstr ""

#: ./docs/9.x/billing.md:703
#: ./docs/10.x/billing.md:885
#: ./docs/11.x/billing.md:882
#: ./docs/master/billing.md:885
msgctxt "P"
msgid "In the example above, the returned `$promotionCode` object is an instance of `Laravel\\Cashier\\PromotionCode`. This class decorates an underlying `Stripe\\PromotionCode` object. You can retrieve the coupon related to the promotion code by invoking the `coupon` method:"
msgstr ""

#: ./docs/9.x/billing.md:705
#: ./docs/10.x/billing.md:887
#: ./docs/11.x/billing.md:884
#: ./docs/master/billing.md:887
msgctxt "CODE"
msgid "$coupon = $user->findPromotionCode('SUMMERSALE')->coupon();"
msgstr ""

#: ./docs/9.x/billing.md:707
#: ./docs/10.x/billing.md:889
#: ./docs/11.x/billing.md:886
#: ./docs/master/billing.md:889
msgctxt "P"
msgid "The coupon instance allows you to determine the discount amount and whether the coupon represents a fixed discount or percentage based discount:"
msgstr ""

#: ./docs/9.x/billing.md:709
#: ./docs/10.x/billing.md:891
#: ./docs/11.x/billing.md:888
#: ./docs/master/billing.md:891
msgctxt "CODE"
msgid ""
"if ($coupon->isPercentage()) {\n"
"    return $coupon->percentOff().'%'; // 21.5%\n"
"} else {\n"
"    return $coupon->amountOff(); // $5.99\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:715
#: ./docs/10.x/billing.md:897
#: ./docs/11.x/billing.md:894
#: ./docs/master/billing.md:897
msgctxt "P"
msgid "You can also retrieve the discounts that are currently applied to a customer or subscription:"
msgstr ""

#: ./docs/8.x/billing.md:716
#: ./docs/9.x/billing.md:794
#: ./docs/10.x/billing.md:976
#: ./docs/11.x/billing.md:973
#: ./docs/master/billing.md:976
msgctxt "P"
msgid "If you would like to determine if a user is still within their trial period, you may use the `onTrial` method. This method can be useful for determining if you should display a warning to the user that they are still on their trial period:"
msgstr ""

#: ./docs/9.x/billing.md:717
#: ./docs/10.x/billing.md:899
#: ./docs/11.x/billing.md:896
#: ./docs/master/billing.md:899
msgctxt "CODE"
msgid ""
"$discount = $billable->discount();\n"
"\n"
"$discount = $subscription->discount();"
msgstr ""

#: ./docs/8.x/billing.md:718
#: ./docs/9.x/billing.md:796
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:721
#: ./docs/10.x/billing.md:903
#: ./docs/11.x/billing.md:900
#: ./docs/master/billing.md:903
msgctxt "P"
msgid "The returned `Laravel\\Cashier\\Discount` instances decorate an underlying `Stripe\\Discount` object instance. You may retrieve the coupon related to this discount by invoking the `coupon` method:"
msgstr ""

#: ./docs/8.x/billing.md:722
#: ./docs/9.x/billing.md:800
#: ./docs/10.x/billing.md:982
#: ./docs/11.x/billing.md:979
#: ./docs/master/billing.md:982
msgctxt "P"
msgid "The `subscribedToProduct` method may be used to determine if the user is subscribed to a given product based on a given Stripe product's identifier. In Stripe, products are collections of prices. In this example, we will determine if the user's `default` subscription is actively subscribed to the application's \"premium\" product. The given Stripe product identifier should correspond to one of your product's identifiers in the Stripe dashboard:"
msgstr ""

#: ./docs/10.x/billing.md:723
#: ./docs/11.x/billing.md:720
#: ./docs/master/billing.md:723
msgctxt "P"
msgid "By default, this method will return payment methods of every type. To retrieve payment methods of a specific type, you may pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/9.x/billing.md:723
#: ./docs/10.x/billing.md:905
#: ./docs/11.x/billing.md:902
#: ./docs/master/billing.md:905
msgctxt "CODE"
msgid "$coupon = $subscription->discount()->coupon();"
msgstr ""

#: ./docs/8.x/billing.md:724
#: ./docs/9.x/billing.md:802
msgctxt "CODE"
msgid ""
"if ($user->subscribedToProduct('prod_premium', 'default')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:725
#: ./docs/10.x/billing.md:907
#: ./docs/11.x/billing.md:904
#: ./docs/master/billing.md:907
msgctxt "P"
msgid "If you would like to apply a new coupon or promotion code to a customer or subscription, you may do so via the `applyCoupon` or `applyPromotionCode` methods:"
msgstr ""

#: ./docs/9.x/billing.md:727
#: ./docs/10.x/billing.md:909
#: ./docs/11.x/billing.md:906
#: ./docs/master/billing.md:909
msgctxt "CODE"
msgid ""
"$billable->applyCoupon('coupon_id');\n"
"$billable->applyPromotionCode('promotion_code_id');\n"
"\n"
"$subscription->applyCoupon('coupon_id');\n"
"$subscription->applyPromotionCode('promotion_code_id');"
msgstr ""

#: ./docs/8.x/billing.md:728
#: ./docs/9.x/billing.md:806
#: ./docs/10.x/billing.md:988
#: ./docs/11.x/billing.md:985
#: ./docs/master/billing.md:988
msgctxt "P"
msgid "By passing an array to the `subscribedToProduct` method, you may determine if the user's `default` subscription is actively subscribed to the application's \"basic\" or \"premium\" product:"
msgstr ""

#: ./docs/8.x/billing.md:730
#: ./docs/9.x/billing.md:808
msgctxt "CODE"
msgid ""
"if ($user->subscribedToProduct(['prod_basic', 'prod_premium'], 'default')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:733
#: ./docs/10.x/billing.md:915
#: ./docs/11.x/billing.md:912
#: ./docs/master/billing.md:915
msgctxt "P"
msgid "Remember, you should use the Stripe API ID assigned to the promotion code and not the customer facing promotion code. Only one coupon or promotion code can be applied to a customer or subscription at a given time."
msgstr ""

#: ./docs/8.x/billing.md:734
#: ./docs/9.x/billing.md:812
#: ./docs/10.x/billing.md:994
#: ./docs/11.x/billing.md:991
#: ./docs/master/billing.md:994
msgctxt "P"
msgid "The `subscribedToPrice` method may be used to determine if a customer's subscription corresponds to a given price ID:"
msgstr ""

#: ./docs/10.x/billing.md:735
#: ./docs/11.x/billing.md:732
#: ./docs/master/billing.md:735
#~ msgctxt "P"
#~ msgid "<a name=\"payment-method-presence\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:735
#: ./docs/10.x/billing.md:917
#: ./docs/11.x/billing.md:914
#: ./docs/master/billing.md:917
msgctxt "P"
msgid "For more info on this subject, please consult the Stripe documentation regarding [coupons](https://stripe.com/docs/billing/subscriptions/coupons) and [promotion codes](https://stripe.com/docs/billing/subscriptions/coupons/codes)."
msgstr ""

#: ./docs/10.x/billing.md:736
#: ./docs/11.x/billing.md:733
#: ./docs/master/billing.md:736
msgctxt "H3"
msgid "Payment Method Presence"
msgstr ""

#: ./docs/8.x/billing.md:736
#: ./docs/9.x/billing.md:814
msgctxt "CODE"
msgid ""
"if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:740
#: ./docs/11.x/billing.md:737
#: ./docs/master/billing.md:740
msgctxt "CODE"
msgid ""
"if ($user->hasDefaultPaymentMethod()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:740
#: ./docs/9.x/billing.md:818
#: ./docs/10.x/billing.md:1000
#: ./docs/11.x/billing.md:997
#: ./docs/master/billing.md:1000
msgctxt "P"
msgid "The `recurring` method may be used to determine if the user is currently subscribed and is no longer within their trial period:"
msgstr ""

#: ./docs/8.x/billing.md:742
#: ./docs/9.x/billing.md:820
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->recurring()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:746
#: ./docs/11.x/billing.md:743
#: ./docs/master/billing.md:746
msgctxt "CODE"
msgid ""
"if ($user->hasPaymentMethod()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:746
#: ./docs/9.x/billing.md:825
msgctxt "P"
msgid "If a user has two subscriptions with the same name, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records named `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review."
msgstr ""

#: ./docs/8.x/billing.md:748
#: ./docs/9.x/billing.md:827
#: ./docs/10.x/billing.md:1009
#: ./docs/11.x/billing.md:1006
#: ./docs/master/billing.md:1009
#~ msgctxt "P"
#~ msgid "<a name=\"cancelled-subscription-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:749
#: ./docs/9.x/billing.md:828
#: ./docs/10.x/billing.md:1010
#: ./docs/11.x/billing.md:1007
#: ./docs/master/billing.md:1010
msgctxt "H4"
msgid "Canceled Subscription Status"
msgstr ""

#: ./docs/10.x/billing.md:750
#: ./docs/11.x/billing.md:747
#: ./docs/master/billing.md:750
msgctxt "P"
msgid "This method will determine if the billable model has any payment method at all. To determine if a payment method of a specific type exists for the model, you may pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:751
#: ./docs/9.x/billing.md:830
#: ./docs/10.x/billing.md:1012
#: ./docs/11.x/billing.md:1009
#: ./docs/master/billing.md:1012
msgctxt "P"
msgid "To determine if the user was once an active subscriber but has canceled their subscription, you may use the `canceled` method:"
msgstr ""

#: ./docs/9.x/billing.md:751
msgctxt "P"
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a name of `default`. To customize the subscription name that is assigned to dashboard created subscriptions, [extend the `WebhookController`](#defining-webhook-event-handlers) and overwrite the `newSubscriptionName` method."
msgstr ""

#: ./docs/10.x/billing.md:752
#: ./docs/11.x/billing.md:749
#: ./docs/master/billing.md:752
msgctxt "CODE"
msgid ""
"if ($user->hasPaymentMethod('sepa_debit')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:753
#: ./docs/9.x/billing.md:832
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->canceled()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:755
#: ./docs/10.x/billing.md:937
#: ./docs/11.x/billing.md:934
#: ./docs/master/billing.md:937
msgctxt "P"
msgid "Finally, you should always make sure to only add one active subscription per type of subscription offered by your application. If a customer has two `default` subscriptions, only the most recently added subscription will be used by Cashier even though both would be synced with your application's database."
msgstr ""

#: ./docs/10.x/billing.md:757
#: ./docs/11.x/billing.md:754
#: ./docs/master/billing.md:757
msgctxt "H3"
msgid "Updating the Default Payment Method"
msgstr ""

#: ./docs/8.x/billing.md:757
#: ./docs/9.x/billing.md:836
#: ./docs/10.x/billing.md:1018
#: ./docs/11.x/billing.md:1015
#: ./docs/master/billing.md:1018
msgctxt "P"
msgid "You may also determine if a user has canceled their subscription but are still on their \"grace period\" until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their \"grace period\" until March 10th. Note that the `subscribed` method still returns `true` during this time:"
msgstr ""

#: ./docs/8.x/billing.md:759
#: ./docs/8.x/billing.md:1197
#: ./docs/9.x/billing.md:838
#: ./docs/9.x/billing.md:1309
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->onGracePeriod()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:763
#: ./docs/9.x/billing.md:842
#: ./docs/10.x/billing.md:1024
#: ./docs/11.x/billing.md:1021
#: ./docs/master/billing.md:1024
msgctxt "P"
msgid "To determine if the user has canceled their subscription and is no longer within their \"grace period\", you may use the `ended` method:"
msgstr ""

#: ./docs/8.x/billing.md:765
#: ./docs/9.x/billing.md:844
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->ended()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:769
#: ./docs/9.x/billing.md:848
#: ./docs/10.x/billing.md:1030
#: ./docs/11.x/billing.md:1027
#: ./docs/master/billing.md:1030
#~ msgctxt "P"
#~ msgid "<a name=\"incomplete-and-past-due-status\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:770
#: ./docs/9.x/billing.md:849
#: ./docs/10.x/billing.md:1031
#: ./docs/11.x/billing.md:1028
#: ./docs/master/billing.md:1031
msgctxt "H4"
msgid "Incomplete and Past Due Status"
msgstr ""

#: ./docs/8.x/billing.md:772
#: ./docs/9.x/billing.md:851
#: ./docs/10.x/billing.md:1033
#: ./docs/11.x/billing.md:1030
#: ./docs/master/billing.md:1033
msgctxt "P"
msgid "If a subscription requires a secondary payment action after creation the subscription will be marked as `incomplete`. Subscription statuses are stored in the `stripe_status` column of Cashier's `subscriptions` database table."
msgstr ""

#: ./docs/8.x/billing.md:774
#: ./docs/9.x/billing.md:853
#: ./docs/10.x/billing.md:1035
#: ./docs/11.x/billing.md:1032
#: ./docs/master/billing.md:1035
msgctxt "P"
msgid "Similarly, if a secondary payment action is required when swapping prices the subscription will be marked as `past_due`. When your subscription is in either of these states it will not be active until the customer has confirmed their payment. Determining if a subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#: ./docs/8.x/billing.md:776
#: ./docs/8.x/billing.md:1812
#: ./docs/9.x/billing.md:855
#: ./docs/9.x/billing.md:2026
msgctxt "CODE"
msgid ""
"if ($user->hasIncompletePayment('default')) {\n"
"    //\n"
"}\n"
"\n"
"if ($user->subscription('default')->hasIncompletePayment()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:784
#: ./docs/9.x/billing.md:863
#: ./docs/10.x/billing.md:1045
#: ./docs/11.x/billing.md:1042
#: ./docs/master/billing.md:1045
msgctxt "P"
msgid "When a subscription has an incomplete payment, you should direct the user to Cashier's payment confirmation page, passing the `latestPayment` identifier. You may use the `latestPayment` method available on subscription instance to retrieve this identifier:"
msgstr ""

#: ./docs/8.x/billing.md:786
#: ./docs/9.x/billing.md:865
#: ./docs/10.x/billing.md:1047
#: ./docs/11.x/billing.md:1044
#: ./docs/master/billing.md:1047
msgctxt "CODE: html"
msgid ""
"<a href=\"{{ route('cashier.payment', $subscription->latestPayment()->id) }}\">\n"
"    Please confirm your payment.\n"
"</a>"
msgstr ""

#: ./docs/8.x/billing.md:792
msgctxt "P"
msgid "If you would like the subscription to still be considered active when it's in a `past_due` state, you may use the `keepPastDueSubscriptionsActive` method provided by Cashier. Typically, this method should be called in the `register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/billing.md:794
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:795
#: ./docs/11.x/billing.md:792
#: ./docs/master/billing.md:795
msgctxt "P"
msgid "By default, this method will delete payment methods of every type. To delete payment methods of a specific type you can pass the `type` as an argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:806
#: ./docs/9.x/billing.md:887
#: ./docs/10.x/billing.md:1067
#: ./docs/11.x/billing.md:1064
#: ./docs/master/billing.md:1067
msgctxt "P"
msgid "When a subscription is in an `incomplete` state it cannot be changed until the payment is confirmed. Therefore, the `swap` and `updateQuantity` methods will throw an exception when the subscription is in an `incomplete` state."
msgstr ""

#: ./docs/8.x/billing.md:808
#: ./docs/9.x/billing.md:889
#: ./docs/10.x/billing.md:1069
#: ./docs/11.x/billing.md:1066
#: ./docs/master/billing.md:1069
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-scopes\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:809
#: ./docs/9.x/billing.md:890
#: ./docs/10.x/billing.md:1070
#: ./docs/11.x/billing.md:1067
#: ./docs/master/billing.md:1070
msgctxt "H4"
msgid "Subscription Scopes"
msgstr ""

#: ./docs/8.x/billing.md:811
#: ./docs/9.x/billing.md:892
#: ./docs/10.x/billing.md:1072
#: ./docs/11.x/billing.md:1069
#: ./docs/master/billing.md:1072
msgctxt "P"
msgid "Most subscription states are also available as query scopes so that you may easily query your database for subscriptions that are in a given state:"
msgstr ""

#: ./docs/8.x/billing.md:813
#: ./docs/9.x/billing.md:894
#: ./docs/10.x/billing.md:1074
#: ./docs/11.x/billing.md:1071
#: ./docs/master/billing.md:1074
msgctxt "CODE"
msgid ""
"// Get all active subscriptions...\n"
"$subscriptions = Subscription::query()->active()->get();\n"
"\n"
"// Get all of the canceled subscriptions for a user...\n"
"$subscriptions = $user->subscriptions()->canceled()->get();"
msgstr ""

#: ./docs/8.x/billing.md:819
#: ./docs/9.x/billing.md:900
#: ./docs/10.x/billing.md:1080
#: ./docs/11.x/billing.md:1077
#: ./docs/master/billing.md:1080
msgctxt "P"
msgid "A complete list of available scopes is available below:"
msgstr ""

#: ./docs/8.x/billing.md:821
#: ./docs/9.x/billing.md:902
#: ./docs/10.x/billing.md:1082
#: ./docs/11.x/billing.md:1079
#: ./docs/master/billing.md:1082
msgctxt "CODE"
msgid ""
"Subscription::query()->active();\n"
"Subscription::query()->canceled();\n"
"Subscription::query()->ended();\n"
"Subscription::query()->incomplete();\n"
"Subscription::query()->notCanceled();\n"
"Subscription::query()->notOnGracePeriod();\n"
"Subscription::query()->notOnTrial();\n"
"Subscription::query()->onGracePeriod();\n"
"Subscription::query()->onTrial();\n"
"Subscription::query()->pastDue();\n"
"Subscription::query()->recurring();"
msgstr ""

#: ./docs/10.x/billing.md:822
#: ./docs/11.x/billing.md:819
#: ./docs/master/billing.md:822
msgctxt "P"
msgid "The first argument passed to the `newSubscription` method should be the internal type of the subscription. If your application only offers a single subscription, you might call this `default` or `primary`. This subscription type is only for internal application usage and is not meant to be shown to users. In addition, it should not contain spaces and it should never be changed after creating the subscription. The second argument is the specific price the user is subscribing to. This value should correspond to the price's identifier in Stripe."
msgstr ""

#: ./docs/10.x/billing.md:830
#: ./docs/11.x/billing.md:827
#: ./docs/master/billing.md:830
msgctxt "H4"
msgid "Collecting Recurring Payments via Invoice Emails"
msgstr ""

#: ./docs/11.x/billing.md:833
msgctxt "P"
msgid "The amount of time a customer has to pay their invoice before their subscription is canceled is determined by the `days_until_due` option. By default, this is 30 days; however, you may provide a specific value for this option if you wish:"
msgstr ""

#: ./docs/8.x/billing.md:833
#: ./docs/9.x/billing.md:914
#: ./docs/10.x/billing.md:1094
#: ./docs/11.x/billing.md:1091
#: ./docs/master/billing.md:1094
#~ msgctxt "P"
#~ msgid "<a name=\"changing-prices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:834
#: ./docs/9.x/billing.md:915
#: ./docs/10.x/billing.md:1095
#: ./docs/11.x/billing.md:1092
#: ./docs/master/billing.md:1095
msgctxt "H3"
msgid "Changing Prices"
msgstr ""

#: ./docs/8.x/billing.md:836
#: ./docs/9.x/billing.md:917
#: ./docs/10.x/billing.md:1097
#: ./docs/11.x/billing.md:1094
#: ./docs/master/billing.md:1097
msgctxt "P"
msgid "After a customer is subscribed to your application, they may occasionally want to change to a new subscription price. To swap a customer to a new price, pass the Stripe price's identifier to the `swap` method. When swapping prices, it is assumed that the user would like to re-activate their subscription if it was previously canceled. The given price identifier should correspond to a Stripe price identifier available in the Stripe dashboard:"
msgstr ""

#: ./docs/8.x/billing.md:838
#: ./docs/9.x/billing.md:919
#: ./docs/10.x/billing.md:1099
#: ./docs/11.x/billing.md:1096
#: ./docs/master/billing.md:1099
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = App\\Models\\User::find(1);\n"
"\n"
"$user->subscription('default')->swap('price_yearly');"
msgstr ""

#: ./docs/8.x/billing.md:844
#: ./docs/9.x/billing.md:925
#: ./docs/10.x/billing.md:1105
#: ./docs/11.x/billing.md:1102
#: ./docs/master/billing.md:1105
msgctxt "P"
msgid "If the customer is on trial, the trial period will be maintained. Additionally, if a \"quantity\" exists for the subscription, that quantity will also be maintained."
msgstr ""

#: ./docs/8.x/billing.md:846
#: ./docs/9.x/billing.md:927
#: ./docs/10.x/billing.md:1107
#: ./docs/11.x/billing.md:1104
#: ./docs/master/billing.md:1107
msgctxt "P"
msgid "If you would like to swap prices and cancel any trial period the customer is currently on, you may invoke the `skipTrial` method:"
msgstr ""

#: ./docs/8.x/billing.md:848
#: ./docs/9.x/billing.md:929
#: ./docs/10.x/billing.md:1109
#: ./docs/11.x/billing.md:1106
#: ./docs/master/billing.md:1109
msgctxt "CODE"
msgid ""
"$user->subscription('default')\n"
"        ->skipTrial()\n"
"        ->swap('price_yearly');"
msgstr ""

#: ./docs/8.x/billing.md:852
#: ./docs/9.x/billing.md:933
#: ./docs/10.x/billing.md:1113
#: ./docs/11.x/billing.md:1110
#: ./docs/master/billing.md:1113
msgctxt "P"
msgid "If you would like to swap prices and immediately invoice the customer instead of waiting for their next billing cycle, you may use the `swapAndInvoice` method:"
msgstr ""

#: ./docs/8.x/billing.md:854
#: ./docs/9.x/billing.md:935
#: ./docs/10.x/billing.md:1115
#: ./docs/11.x/billing.md:1112
#: ./docs/master/billing.md:1115
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->swapAndInvoice('price_yearly');"
msgstr ""

#: ./docs/8.x/billing.md:858
#: ./docs/9.x/billing.md:939
#: ./docs/10.x/billing.md:1119
#: ./docs/11.x/billing.md:1116
#: ./docs/master/billing.md:1119
#~ msgctxt "P"
#~ msgid "<a name=\"prorations\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:859
#: ./docs/9.x/billing.md:940
#: ./docs/10.x/billing.md:1120
#: ./docs/11.x/billing.md:1117
#: ./docs/master/billing.md:1120
msgctxt "H4"
msgid "Prorations"
msgstr ""

#: ./docs/8.x/billing.md:861
#: ./docs/9.x/billing.md:942
#: ./docs/10.x/billing.md:1122
#: ./docs/11.x/billing.md:1119
#: ./docs/master/billing.md:1122
msgctxt "P"
msgid "By default, Stripe prorates charges when swapping between prices. The `noProrate` method may be used to update the subscription's price without prorating the charges:"
msgstr ""

#: ./docs/8.x/billing.md:863
#: ./docs/9.x/billing.md:944
#: ./docs/10.x/billing.md:1124
#: ./docs/11.x/billing.md:1121
#: ./docs/master/billing.md:1124
msgctxt "CODE"
msgid "$user->subscription('default')->noProrate()->swap('price_yearly');"
msgstr ""

#: ./docs/8.x/billing.md:865
#: ./docs/9.x/billing.md:946
#: ./docs/10.x/billing.md:1126
#: ./docs/11.x/billing.md:1123
#: ./docs/master/billing.md:1126
msgctxt "P"
msgid "For more information on subscription proration, consult the [Stripe documentation](https://stripe.com/docs/billing/subscriptions/prorations)."
msgstr ""

#: ./docs/8.x/billing.md:867
#: ./docs/9.x/billing.md:949
#: ./docs/10.x/billing.md:1129
#: ./docs/11.x/billing.md:1126
#: ./docs/master/billing.md:1129
msgctxt "P"
msgid "Executing the `noProrate` method before the `swapAndInvoice` method will have no effect on proration. An invoice will always be issued."
msgstr ""

#: ./docs/8.x/billing.md:869
#: ./docs/9.x/billing.md:951
#: ./docs/10.x/billing.md:1131
#: ./docs/11.x/billing.md:1128
#: ./docs/master/billing.md:1131
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-quantity\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:870
#: ./docs/9.x/billing.md:952
#: ./docs/10.x/billing.md:1132
#: ./docs/11.x/billing.md:1129
#: ./docs/master/billing.md:1132
msgctxt "H3"
msgid "Subscription Quantity"
msgstr ""

#: ./docs/9.x/billing.md:871
#: ./docs/10.x/billing.md:1053
#: ./docs/11.x/billing.md:1050
#: ./docs/master/billing.md:1053
msgctxt "P"
msgid "If you would like the subscription to still be considered active when it's in a `past_due` or `incomplete` state, you may use the `keepPastDueSubscriptionsActive` and `keepIncompleteSubscriptionsActive` methods provided by Cashier. Typically, these methods should be called in the `register` method of your `App\\Providers\\AppServiceProvider`:"
msgstr ""

#: ./docs/8.x/billing.md:872
#: ./docs/9.x/billing.md:954
#: ./docs/10.x/billing.md:1134
#: ./docs/11.x/billing.md:1131
#: ./docs/master/billing.md:1134
msgctxt "P"
msgid "Sometimes subscriptions are affected by \"quantity\". For example, a project management application might charge $10 per month per project. You may use the `incrementQuantity` and `decrementQuantity` methods to easily increment or decrement your subscription quantity:"
msgstr ""

#: ./docs/9.x/billing.md:873
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"    Cashier::keepIncompleteSubscriptionsActive();\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:874
#: ./docs/9.x/billing.md:956
#: ./docs/10.x/billing.md:1136
#: ./docs/11.x/billing.md:1133
#: ./docs/master/billing.md:1136
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->incrementQuantity();\n"
"\n"
"// Add five to the subscription's current quantity...\n"
"$user->subscription('default')->incrementQuantity(5);\n"
"\n"
"$user->subscription('default')->decrementQuantity();\n"
"\n"
"// Subtract five from the subscription's current quantity...\n"
"$user->subscription('default')->decrementQuantity(5);"
msgstr ""

#: ./docs/8.x/billing.md:888
#: ./docs/9.x/billing.md:970
#: ./docs/10.x/billing.md:1150
#: ./docs/11.x/billing.md:1147
#: ./docs/master/billing.md:1150
msgctxt "P"
msgid "Alternatively, you may set a specific quantity using the `updateQuantity` method:"
msgstr ""

#: ./docs/8.x/billing.md:890
#: ./docs/9.x/billing.md:972
#: ./docs/10.x/billing.md:1152
#: ./docs/11.x/billing.md:1149
#: ./docs/master/billing.md:1152
msgctxt "CODE"
msgid "$user->subscription('default')->updateQuantity(10);"
msgstr ""

#: ./docs/8.x/billing.md:892
#: ./docs/9.x/billing.md:974
#: ./docs/10.x/billing.md:1154
#: ./docs/11.x/billing.md:1151
#: ./docs/master/billing.md:1154
msgctxt "P"
msgid "The `noProrate` method may be used to update the subscription's quantity without prorating the charges:"
msgstr ""

#: ./docs/8.x/billing.md:894
#: ./docs/9.x/billing.md:976
#: ./docs/10.x/billing.md:1156
#: ./docs/11.x/billing.md:1153
#: ./docs/master/billing.md:1156
msgctxt "CODE"
msgid "$user->subscription('default')->noProrate()->updateQuantity(10);"
msgstr ""

#: ./docs/8.x/billing.md:896
#: ./docs/9.x/billing.md:978
#: ./docs/10.x/billing.md:1158
#: ./docs/11.x/billing.md:1155
#: ./docs/master/billing.md:1158
msgctxt "P"
msgid "For more information on subscription quantities, consult the [Stripe documentation](https://stripe.com/docs/subscriptions/quantities)."
msgstr ""

#: ./docs/8.x/billing.md:898
#~ msgctxt "P"
#~ msgid "<a name=\"multiprice-subscription-quantities\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:899
msgctxt "H4"
msgid "Multiprice Subscription Quantities"
msgstr ""

#: ./docs/8.x/billing.md:901
msgctxt "P"
msgid "If your subscription is a [multiprice subscription](#multiprice-subscriptions), you should pass the name of the price whose quantity you wish to increment or decrement as the second argument to the increment / decrement methods:"
msgstr ""

#: ./docs/8.x/billing.md:903
#: ./docs/9.x/billing.md:985
#: ./docs/10.x/billing.md:1165
#: ./docs/11.x/billing.md:1162
#: ./docs/master/billing.md:1165
msgctxt "CODE"
msgid "$user->subscription('default')->incrementQuantity(1, 'price_chat');"
msgstr ""

#: ./docs/8.x/billing.md:905
#~ msgctxt "P"
#~ msgid "<a name=\"multiprice-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:906
msgctxt "H3"
msgid "Multiprice Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:908
msgctxt "P"
msgid "[Multiprice subscriptions](https://stripe.com/docs/billing/subscriptions/multiple-products) allow you to assign multiple billing prices to a single subscription. For example, imagine you are building a customer service \"helpdesk\" application that has a base subscription price of $10 per month but offers a live chat add-on price for an additional $15 per month. Multiprice subscription information is stored in Cashier's `subscription_items` database table."
msgstr ""

#: ./docs/8.x/billing.md:910
msgctxt "P"
msgid "You may specify multiple prices for a given subscription by passing an array of prices as the second argument to the `newSubscription` method:"
msgstr ""

#: ./docs/8.x/billing.md:912
#: ./docs/9.x/billing.md:994
#: ./docs/10.x/billing.md:1174
#: ./docs/11.x/billing.md:1171
#: ./docs/master/billing.md:1174
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default', [\n"
"        'price_monthly',\n"
"        'price_chat',\n"
"    ])->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:923
#: ./docs/9.x/billing.md:1005
#: ./docs/10.x/billing.md:1185
#: ./docs/11.x/billing.md:1182
#: ./docs/master/billing.md:1185
msgctxt "P"
msgid "In the example above, the customer will have two prices attached to their `default` subscription. Both prices will be charged on their respective billing intervals. If necessary, you may use the `quantity` method to indicate a specific quantity for each price:"
msgstr ""

#: ./docs/8.x/billing.md:925
#: ./docs/9.x/billing.md:1007
#: ./docs/10.x/billing.md:1187
#: ./docs/11.x/billing.md:1184
#: ./docs/master/billing.md:1187
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->newSubscription('default', ['price_monthly', 'price_chat'])\n"
"    ->quantity(5, 'price_chat')\n"
"    ->create($paymentMethod);"
msgstr ""

#: ./docs/10.x/billing.md:931
#: ./docs/11.x/billing.md:928
#: ./docs/master/billing.md:931
msgctxt "H4"
msgid "Creating Subscriptions From the Stripe Dashboard"
msgstr ""

#: ./docs/8.x/billing.md:931
#: ./docs/9.x/billing.md:1013
#: ./docs/10.x/billing.md:1193
#: ./docs/11.x/billing.md:1190
#: ./docs/master/billing.md:1193
msgctxt "P"
msgid "If you would like to add another price to an existing subscription, you may invoke the subscription's `addPrice` method:"
msgstr ""

#: ./docs/10.x/billing.md:933
#: ./docs/11.x/billing.md:930
#: ./docs/master/billing.md:933
msgctxt "P"
msgid "You may also create subscriptions from the Stripe dashboard itself. When doing so, Cashier will sync newly added subscriptions and assign them a type of `default`. To customize the subscription type that is assigned to dashboard created subscriptions, [define webhook event handlers](#defining-webhook-event-handlers)."
msgstr ""

#: ./docs/8.x/billing.md:933
#: ./docs/9.x/billing.md:1015
#: ./docs/10.x/billing.md:1195
#: ./docs/11.x/billing.md:1192
#: ./docs/master/billing.md:1195
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->addPrice('price_chat');"
msgstr ""

#: ./docs/10.x/billing.md:935
#: ./docs/11.x/billing.md:932
#: ./docs/master/billing.md:935
msgctxt "P"
msgid "In addition, you may only create one type of subscription via the Stripe dashboard. If your application offers multiple subscriptions that use different types, only one type of subscription may be added through the Stripe dashboard."
msgstr ""

#: ./docs/8.x/billing.md:937
#: ./docs/9.x/billing.md:1019
#: ./docs/10.x/billing.md:1199
#: ./docs/11.x/billing.md:1196
#: ./docs/master/billing.md:1199
msgctxt "P"
msgid "The example above will add the new price and the customer will be billed for it on their next billing cycle. If you would like to bill the customer immediately you may use the `addPriceAndInvoice` method:"
msgstr ""

#: ./docs/8.x/billing.md:939
#: ./docs/9.x/billing.md:1021
#: ./docs/10.x/billing.md:1201
#: ./docs/11.x/billing.md:1198
#: ./docs/master/billing.md:1201
msgctxt "CODE"
msgid "$user->subscription('default')->addPriceAndInvoice('price_chat');"
msgstr ""

#: ./docs/8.x/billing.md:941
#: ./docs/9.x/billing.md:1023
#: ./docs/10.x/billing.md:1203
#: ./docs/11.x/billing.md:1200
#: ./docs/master/billing.md:1203
msgctxt "P"
msgid "If you would like to add a price with a specific quantity, you can pass the quantity as the second argument of the `addPrice` or `addPriceAndInvoice` methods:"
msgstr ""

#: ./docs/10.x/billing.md:942
#: ./docs/11.x/billing.md:939
#: ./docs/master/billing.md:942
msgctxt "P"
msgid "Once a customer is subscribed to your application, you may easily check their subscription status using a variety of convenient methods. First, the `subscribed` method returns `true` if the customer has an active subscription, even if the subscription is currently within its trial period. The `subscribed` method accepts the type of the subscription as its first argument:"
msgstr ""

#: ./docs/8.x/billing.md:943
#: ./docs/9.x/billing.md:1025
#: ./docs/10.x/billing.md:1205
#: ./docs/11.x/billing.md:1202
#: ./docs/master/billing.md:1205
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->addPrice('price_chat', 5);"
msgstr ""

#: ./docs/10.x/billing.md:944
#: ./docs/11.x/billing.md:941
#: ./docs/master/billing.md:944
msgctxt "CODE"
msgid ""
"if ($user->subscribed('default')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/11.x/billing.md:947
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('/billing');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:947
#: ./docs/9.x/billing.md:1029
#: ./docs/10.x/billing.md:1209
#: ./docs/11.x/billing.md:1206
#: ./docs/master/billing.md:1209
msgctxt "P"
msgid "You may remove prices from subscriptions using the `removePrice` method:"
msgstr ""

#: ./docs/8.x/billing.md:949
#: ./docs/9.x/billing.md:1031
#: ./docs/10.x/billing.md:1211
#: ./docs/11.x/billing.md:1208
#: ./docs/master/billing.md:1211
msgctxt "CODE"
msgid "$user->subscription('default')->removePrice('price_chat');"
msgstr ""

#: ./docs/10.x/billing.md:950
#: ./docs/master/billing.md:950
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use Closure;\n"
"use Illuminate\\Http\\Request;\n"
"use Symfony\\Component\\HttpFoundation\\Response;\n"
"\n"
"class EnsureUserIsSubscribed\n"
"{\n"
"    /**\n"
"     * Handle an incoming request.\n"
"     *\n"
"     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n"
"     */\n"
"    public function handle(Request $request, Closure $next): Response\n"
"    {\n"
"        if ($request->user() && ! $request->user()->subscribed('default')) {\n"
"            // This user is not a paying customer...\n"
"            return redirect('billing');\n"
"        }\n"
"\n"
"        return $next($request);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:951
#: ./docs/9.x/billing.md:1034
#: ./docs/10.x/billing.md:1214
#: ./docs/11.x/billing.md:1211
#: ./docs/master/billing.md:1214
msgctxt "P"
msgid "You may not remove the last price on a subscription. Instead, you should simply cancel the subscription."
msgstr ""

#: ./docs/8.x/billing.md:953
#: ./docs/9.x/billing.md:1036
#: ./docs/10.x/billing.md:1216
#: ./docs/11.x/billing.md:1213
#: ./docs/master/billing.md:1216
#~ msgctxt "P"
#~ msgid "<a name=\"swapping-prices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:954
#: ./docs/9.x/billing.md:1037
#: ./docs/10.x/billing.md:1217
#: ./docs/11.x/billing.md:1214
#: ./docs/master/billing.md:1217
msgctxt "H4"
msgid "Swapping Prices"
msgstr ""

#: ./docs/8.x/billing.md:956
msgctxt "P"
msgid "You may also change the prices attached to a multiprice subscription. For example, imagine a customer has a `price_basic` subscription with a `price_chat` add-on price and you want to upgrade the customer from the `price_basic` to the `price_pro` price:"
msgstr ""

#: ./docs/8.x/billing.md:958
#: ./docs/9.x/billing.md:1041
#: ./docs/10.x/billing.md:1221
#: ./docs/11.x/billing.md:1218
#: ./docs/master/billing.md:1221
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->swap(['price_pro', 'price_chat']);"
msgstr ""

#: ./docs/8.x/billing.md:964
#: ./docs/9.x/billing.md:1047
#: ./docs/10.x/billing.md:1227
#: ./docs/11.x/billing.md:1224
#: ./docs/master/billing.md:1227
msgctxt "P"
msgid "When executing the example above, the underlying subscription item with the `price_basic` is deleted and the one with the `price_chat` is preserved. Additionally, a new subscription item for the `price_pro` is created."
msgstr ""

#: ./docs/8.x/billing.md:966
#: ./docs/9.x/billing.md:1049
#: ./docs/10.x/billing.md:1229
#: ./docs/11.x/billing.md:1226
#: ./docs/master/billing.md:1229
msgctxt "P"
msgid "You can also specify subscription item options by passing an array of key / value pairs to the `swap` method. For example, you may need to specify the subscription price quantities:"
msgstr ""

#: ./docs/8.x/billing.md:968
#: ./docs/9.x/billing.md:1051
#: ./docs/10.x/billing.md:1231
#: ./docs/11.x/billing.md:1228
#: ./docs/master/billing.md:1231
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->swap([\n"
"    'price_pro' => ['quantity' => 5],\n"
"    'price_chat'\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:975
#: ./docs/9.x/billing.md:1058
#: ./docs/10.x/billing.md:1238
#: ./docs/11.x/billing.md:1235
#: ./docs/master/billing.md:1238
msgctxt "P"
msgid "If you want to swap a single price on a subscription, you may do so using the `swap` method on the subscription item itself. This approach is particularly useful if you would like to preserve all of the existing metadata on the subscription's other prices:"
msgstr ""

#: ./docs/8.x/billing.md:977
#: ./docs/9.x/billing.md:1060
#: ./docs/10.x/billing.md:1240
#: ./docs/11.x/billing.md:1237
#: ./docs/master/billing.md:1240
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')\n"
"        ->findItemOrFail('price_basic')\n"
"        ->swap('price_pro');"
msgstr ""

#: ./docs/10.x/billing.md:978
#: ./docs/11.x/billing.md:975
#: ./docs/master/billing.md:978
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:980
#: ./docs/10.x/billing.md:1160
#: ./docs/11.x/billing.md:1157
#: ./docs/master/billing.md:1160
#~ msgctxt "P"
#~ msgid "<a name=\"quantities-for-subscription-with-multiple-products\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:981
msgctxt "H4"
msgid "Quantities For Subscriptions With Multiple Products"
msgstr ""

#: ./docs/8.x/billing.md:983
#: ./docs/9.x/billing.md:1066
#: ./docs/10.x/billing.md:1246
#: ./docs/11.x/billing.md:1243
#: ./docs/master/billing.md:1246
#~ msgctxt "P"
#~ msgid "<a name=\"proration\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:983
#: ./docs/10.x/billing.md:1163
#: ./docs/11.x/billing.md:1160
#: ./docs/master/billing.md:1163
msgctxt "P"
msgid "If your subscription is a [subscription with multiple products](#subscriptions-with-multiple-products), you should pass the ID of the price whose quantity you wish to increment or decrement as the second argument to the increment / decrement methods:"
msgstr ""

#: ./docs/10.x/billing.md:984
#: ./docs/11.x/billing.md:981
#: ./docs/master/billing.md:984
msgctxt "CODE"
msgid ""
"if ($user->subscribedToProduct('prod_premium', 'default')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:984
#: ./docs/9.x/billing.md:1067
#: ./docs/10.x/billing.md:1247
#: ./docs/11.x/billing.md:1244
#: ./docs/master/billing.md:1247
msgctxt "H4"
msgid "Proration"
msgstr ""

#: ./docs/8.x/billing.md:986
msgctxt "P"
msgid "By default, Stripe will prorate charges when adding or removing prices from a multiprice subscription. If you would like to make a price adjustment without proration, you should chain the `noProrate` method onto your price operation:"
msgstr ""

#: ./docs/9.x/billing.md:987
#: ./docs/10.x/billing.md:1167
#: ./docs/11.x/billing.md:1164
#: ./docs/master/billing.md:1167
#~ msgctxt "P"
#~ msgid "<a name=\"subscriptions-with-multiple-products\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:988
#: ./docs/9.x/billing.md:1071
#: ./docs/10.x/billing.md:1251
#: ./docs/11.x/billing.md:1248
#: ./docs/master/billing.md:1251
msgctxt "CODE"
msgid "$user->subscription('default')->noProrate()->removePrice('price_chat');"
msgstr ""

#: ./docs/9.x/billing.md:988
#: ./docs/10.x/billing.md:1168
#: ./docs/11.x/billing.md:1165
#: ./docs/master/billing.md:1168
msgctxt "H3"
msgid "Subscriptions With Multiple Products"
msgstr ""

#: ./docs/10.x/billing.md:990
#: ./docs/11.x/billing.md:987
#: ./docs/master/billing.md:990
msgctxt "CODE"
msgid ""
"if ($user->subscribedToProduct(['prod_basic', 'prod_premium'], 'default')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:990
#: ./docs/9.x/billing.md:1073
#: ./docs/10.x/billing.md:1253
#: ./docs/11.x/billing.md:1250
#: ./docs/master/billing.md:1253
#~ msgctxt "P"
#~ msgid "<a name=\"swapping-quantities\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:990
#: ./docs/10.x/billing.md:1170
#: ./docs/11.x/billing.md:1167
#: ./docs/master/billing.md:1170
msgctxt "P"
msgid "[Subscription with multiple products](https://stripe.com/docs/billing/subscriptions/multiple-products) allow you to assign multiple billing products to a single subscription. For example, imagine you are building a customer service \"helpdesk\" application that has a base subscription price of $10 per month but offers a live chat add-on product for an additional $15 per month. Information for subscriptions with multiple products is stored in Cashier's `subscription_items` database table."
msgstr ""

#: ./docs/9.x/billing.md:992
#: ./docs/10.x/billing.md:1172
#: ./docs/11.x/billing.md:1169
#: ./docs/master/billing.md:1172
msgctxt "P"
msgid "You may specify multiple products for a given subscription by passing an array of prices as the second argument to the `newSubscription` method:"
msgstr ""

#: ./docs/8.x/billing.md:993
#: ./docs/9.x/billing.md:1076
msgctxt "P"
msgid "If you would like to update quantities on individual subscription prices, you may do so using the [existing quantity methods](#subscription-quantity) by passing the name of the price as an additional argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:995
#: ./docs/9.x/billing.md:1078
#: ./docs/10.x/billing.md:1258
#: ./docs/11.x/billing.md:1255
#: ./docs/master/billing.md:1258
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->incrementQuantity(5, 'price_chat');\n"
"\n"
"$user->subscription('default')->decrementQuantity(3, 'price_chat');\n"
"\n"
"$user->subscription('default')->updateQuantity(10, 'price_chat');"
msgstr ""

#: ./docs/10.x/billing.md:996
#: ./docs/11.x/billing.md:993
#: ./docs/master/billing.md:996
msgctxt "CODE"
msgid ""
"if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:1002
#: ./docs/11.x/billing.md:999
#: ./docs/master/billing.md:1002
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->recurring()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1003
#: ./docs/9.x/billing.md:1087
#: ./docs/10.x/billing.md:1267
#: ./docs/11.x/billing.md:1264
#: ./docs/master/billing.md:1267
msgctxt "P"
msgid "When a subscription has multiple prices the `stripe_price` and `quantity` attributes on the `Subscription` model will be `null`. To access the individual price attributes, you should use the `items` relationship available on the `Subscription` model."
msgstr ""

#: ./docs/8.x/billing.md:1005
#: ./docs/9.x/billing.md:1089
#: ./docs/10.x/billing.md:1269
#: ./docs/11.x/billing.md:1266
#: ./docs/master/billing.md:1269
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-items\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1006
#: ./docs/9.x/billing.md:1090
#: ./docs/10.x/billing.md:1270
#: ./docs/11.x/billing.md:1267
#: ./docs/master/billing.md:1270
msgctxt "H4"
msgid "Subscription Items"
msgstr ""

#: ./docs/10.x/billing.md:1007
#: ./docs/11.x/billing.md:1004
#: ./docs/master/billing.md:1007
msgctxt "P"
msgid "If a user has two subscriptions with the same type, the most recent subscription will always be returned by the `subscription` method. For example, a user might have two subscription records with the type of `default`; however, one of the subscriptions may be an old, expired subscription, while the other is the current, active subscription. The most recent subscription will always be returned while older subscriptions are kept in the database for historical review."
msgstr ""

#: ./docs/8.x/billing.md:1008
#: ./docs/9.x/billing.md:1092
#: ./docs/10.x/billing.md:1272
#: ./docs/11.x/billing.md:1269
#: ./docs/master/billing.md:1272
msgctxt "P"
msgid "When a subscription has multiple prices, it will have multiple subscription \"items\" stored in your database's `subscription_items` table. You may access these via the `items` relationship on the subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1010
#: ./docs/9.x/billing.md:1094
#: ./docs/10.x/billing.md:1274
#: ./docs/11.x/billing.md:1271
#: ./docs/master/billing.md:1274
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$subscriptionItem = $user->subscription('default')->items->first();\n"
"\n"
"// Retrieve the Stripe price and quantity for a specific item...\n"
"$stripePrice = $subscriptionItem->stripe_price;\n"
"$quantity = $subscriptionItem->quantity;"
msgstr ""

#: ./docs/10.x/billing.md:1014
#: ./docs/11.x/billing.md:1011
#: ./docs/master/billing.md:1014
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->canceled()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:1020
#: ./docs/10.x/billing.md:1489
#: ./docs/11.x/billing.md:1017
#: ./docs/11.x/billing.md:1486
#: ./docs/master/billing.md:1020
#: ./docs/master/billing.md:1489
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->onGracePeriod()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1020
#: ./docs/9.x/billing.md:1104
#: ./docs/10.x/billing.md:1284
#: ./docs/11.x/billing.md:1281
#: ./docs/master/billing.md:1284
msgctxt "P"
msgid "You can also retrieve a specific price using the `findItemOrFail` method:"
msgstr ""

#: ./docs/8.x/billing.md:1022
#: ./docs/9.x/billing.md:1106
#: ./docs/10.x/billing.md:1286
#: ./docs/11.x/billing.md:1283
#: ./docs/master/billing.md:1286
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$subscriptionItem = $user->subscription('default')->findItemOrFail('price_chat');"
msgstr ""

#: ./docs/10.x/billing.md:1026
#: ./docs/11.x/billing.md:1023
#: ./docs/master/billing.md:1026
msgctxt "CODE"
msgid ""
"if ($user->subscription('default')->ended()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1026
#: ./docs/9.x/billing.md:1135
#: ./docs/10.x/billing.md:1315
#: ./docs/11.x/billing.md:1312
#: ./docs/master/billing.md:1315
#~ msgctxt "P"
#~ msgid "<a name=\"metered-billing\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1027
#: ./docs/9.x/billing.md:1136
#: ./docs/10.x/billing.md:1316
#: ./docs/11.x/billing.md:1313
#: ./docs/master/billing.md:1316
msgctxt "H3"
msgid "Metered Billing"
msgstr ""

#: ./docs/8.x/billing.md:1029
#: ./docs/9.x/billing.md:1138
#: ./docs/10.x/billing.md:1318
#: ./docs/11.x/billing.md:1315
#: ./docs/master/billing.md:1318
msgctxt "P"
msgid "[Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) allows you to charge customers based on their product usage during a billing cycle. For example, you may charge customers based on the number of text messages or emails they send per month."
msgstr ""

#: ./docs/8.x/billing.md:1031
#: ./docs/9.x/billing.md:1140
#: ./docs/10.x/billing.md:1320
#: ./docs/11.x/billing.md:1317
#: ./docs/master/billing.md:1320
msgctxt "P"
msgid "To start using metered billing, you will first need to create a new product in your Stripe dashboard with a metered price. Then, use the `meteredPrice` to add the metered price ID to a customer subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1033
#: ./docs/9.x/billing.md:1142
#: ./docs/10.x/billing.md:1322
#: ./docs/11.x/billing.md:1319
#: ./docs/master/billing.md:1322
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default')\n"
"        ->meteredPrice('price_metered')\n"
"        ->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/10.x/billing.md:1037
#: ./docs/10.x/billing.md:2204
#: ./docs/11.x/billing.md:1034
#: ./docs/11.x/billing.md:2184
#: ./docs/master/billing.md:1037
#: ./docs/master/billing.md:2187
msgctxt "CODE"
msgid ""
"if ($user->hasIncompletePayment('default')) {\n"
"    // ...\n"
"}\n"
"\n"
"if ($user->subscription('default')->hasIncompletePayment()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1039
#: ./docs/10.x/billing.md:1219
#: ./docs/11.x/billing.md:1216
#: ./docs/master/billing.md:1219
msgctxt "P"
msgid "You may also change the prices attached to a subscription with multiple products. For example, imagine a customer has a `price_basic` subscription with a `price_chat` add-on product and you want to upgrade the customer from the `price_basic` to the `price_pro` price:"
msgstr ""

#: ./docs/8.x/billing.md:1043
#: ./docs/9.x/billing.md:1152
#: ./docs/10.x/billing.md:1332
#: ./docs/11.x/billing.md:1329
#: ./docs/master/billing.md:1332
msgctxt "P"
msgid "You may also start a metered subscription via [Stripe Checkout](#checkout):"
msgstr ""

#: ./docs/8.x/billing.md:1045
#: ./docs/9.x/billing.md:1154
#: ./docs/10.x/billing.md:1334
#: ./docs/11.x/billing.md:1331
#: ./docs/master/billing.md:1334
msgctxt "CODE"
msgid ""
"$checkout = Auth::user()\n"
"        ->newSubscription('default', [])\n"
"        ->meteredPrice('price_metered')\n"
"        ->checkout();\n"
"\n"
"return view('your-checkout-view', [\n"
"    'checkout' => $checkout,\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:1054
#: ./docs/9.x/billing.md:1163
#: ./docs/10.x/billing.md:1343
#: ./docs/11.x/billing.md:1340
#: ./docs/master/billing.md:1343
#~ msgctxt "P"
#~ msgid "<a name=\"reporting-usage\"></a>"
#~ msgstr ""

#: ./docs/10.x/billing.md:1055
#: ./docs/11.x/billing.md:1052
#: ./docs/master/billing.md:1055
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"/**\n"
" * Register any application services.\n"
" */\n"
"public function register(): void\n"
"{\n"
"    Cashier::keepPastDueSubscriptionsActive();\n"
"    Cashier::keepIncompleteSubscriptionsActive();\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1055
#: ./docs/9.x/billing.md:1164
#: ./docs/10.x/billing.md:1344
#: ./docs/11.x/billing.md:1341
#: ./docs/master/billing.md:1344
msgctxt "H4"
msgid "Reporting Usage"
msgstr ""

#: ./docs/8.x/billing.md:1057
#: ./docs/9.x/billing.md:1166
#: ./docs/10.x/billing.md:1346
#: ./docs/11.x/billing.md:1343
#: ./docs/master/billing.md:1346
msgctxt "P"
msgid "As your customer uses your application, you will report their usage to Stripe so that they can be billed accurately. To increment the usage of a metered subscription, you may use the `reportUsage` method:"
msgstr ""

#: ./docs/8.x/billing.md:1059
#: ./docs/9.x/billing.md:1168
#: ./docs/10.x/billing.md:1348
#: ./docs/11.x/billing.md:1345
#: ./docs/master/billing.md:1348
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->reportUsage();"
msgstr ""

#: ./docs/8.x/billing.md:1063
#: ./docs/9.x/billing.md:1172
#: ./docs/10.x/billing.md:1352
#: ./docs/11.x/billing.md:1349
#: ./docs/master/billing.md:1352
msgctxt "P"
msgid "By default, a \"usage quantity\" of 1 is added to the billing period. Alternatively, you may pass a specific amount of \"usage\" to add to the customer's usage for the billing period:"
msgstr ""

#: ./docs/8.x/billing.md:1065
#: ./docs/9.x/billing.md:1174
#: ./docs/10.x/billing.md:1354
#: ./docs/11.x/billing.md:1351
#: ./docs/master/billing.md:1354
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->reportUsage(15);"
msgstr ""

#: ./docs/8.x/billing.md:1069
#: ./docs/9.x/billing.md:1178
#: ./docs/10.x/billing.md:1358
#: ./docs/11.x/billing.md:1355
#: ./docs/master/billing.md:1358
msgctxt "P"
msgid "If your application offers multiple prices on a single subscription, you will need to use the `reportUsageFor` method to specify the metered price you want to report usage for:"
msgstr ""

#: ./docs/9.x/billing.md:1069
#: ./docs/10.x/billing.md:1249
#: ./docs/11.x/billing.md:1246
#: ./docs/master/billing.md:1249
msgctxt "P"
msgid "By default, Stripe will prorate charges when adding or removing prices from a subscription with multiple products. If you would like to make a price adjustment without proration, you should chain the `noProrate` method onto your price operation:"
msgstr ""

#: ./docs/8.x/billing.md:1071
#: ./docs/9.x/billing.md:1180
#: ./docs/10.x/billing.md:1360
#: ./docs/11.x/billing.md:1357
#: ./docs/master/billing.md:1360
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->reportUsageFor('price_metered', 15);"
msgstr ""

#: ./docs/8.x/billing.md:1075
#: ./docs/9.x/billing.md:1184
#: ./docs/10.x/billing.md:1364
#: ./docs/11.x/billing.md:1361
#: ./docs/master/billing.md:1364
msgctxt "P"
msgid "Sometimes, you may need to update usage which you have previously reported. To accomplish this, you may pass a timestamp or a `DateTimeInterface` instance as the second parameter to `reportUsage`. When doing so, Stripe will update the usage that was reported at that given time. You can continue to update previous usage records as the given date and time is still within the current billing period:"
msgstr ""

#: ./docs/8.x/billing.md:1077
#: ./docs/9.x/billing.md:1186
#: ./docs/10.x/billing.md:1366
#: ./docs/11.x/billing.md:1363
#: ./docs/master/billing.md:1366
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->subscription('default')->reportUsage(5, $timestamp);"
msgstr ""

#: ./docs/8.x/billing.md:1081
#: ./docs/9.x/billing.md:1190
#: ./docs/10.x/billing.md:1370
#: ./docs/11.x/billing.md:1367
#: ./docs/master/billing.md:1370
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-usage-records\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1082
#: ./docs/9.x/billing.md:1191
#: ./docs/10.x/billing.md:1371
#: ./docs/11.x/billing.md:1368
#: ./docs/master/billing.md:1371
msgctxt "H4"
msgid "Retrieving Usage Records"
msgstr ""

#: ./docs/8.x/billing.md:1084
#: ./docs/9.x/billing.md:1193
#: ./docs/10.x/billing.md:1373
#: ./docs/11.x/billing.md:1370
#: ./docs/master/billing.md:1373
msgctxt "P"
msgid "To retrieve a customer's past usage, you may use a subscription instance's `usageRecords` method:"
msgstr ""

#: ./docs/8.x/billing.md:1086
#: ./docs/9.x/billing.md:1195
#: ./docs/10.x/billing.md:1375
#: ./docs/11.x/billing.md:1372
#: ./docs/master/billing.md:1375
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$usageRecords = $user->subscription('default')->usageRecords();"
msgstr ""

#: ./docs/8.x/billing.md:1090
#: ./docs/9.x/billing.md:1199
#: ./docs/10.x/billing.md:1379
#: ./docs/11.x/billing.md:1376
#: ./docs/master/billing.md:1379
msgctxt "P"
msgid "If your application offers multiple prices on a single subscription, you may use the `usageRecordsFor` method to specify the metered price that you wish to retrieve usage records for:"
msgstr ""

#: ./docs/8.x/billing.md:1092
#: ./docs/9.x/billing.md:1201
#: ./docs/10.x/billing.md:1381
#: ./docs/11.x/billing.md:1378
#: ./docs/master/billing.md:1381
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$usageRecords = $user->subscription('default')->usageRecordsFor('price_metered');"
msgstr ""

#: ./docs/8.x/billing.md:1096
#: ./docs/9.x/billing.md:1205
#: ./docs/10.x/billing.md:1385
#: ./docs/11.x/billing.md:1382
#: ./docs/master/billing.md:1385
msgctxt "P"
msgid "The `usageRecords` and `usageRecordsFor` methods return a Collection instance containing an associative array of usage records. You may iterate over this array to display a customer's total usage:"
msgstr ""

#: ./docs/8.x/billing.md:1098
#: ./docs/9.x/billing.md:1207
#: ./docs/10.x/billing.md:1387
#: ./docs/11.x/billing.md:1384
#: ./docs/master/billing.md:1387
msgctxt "CODE"
msgid ""
"@foreach ($usageRecords as $usageRecord)\n"
"    - Period Starting: {{ $usageRecord['period']['start'] }}\n"
"    - Period Ending: {{ $usageRecord['period']['end'] }}\n"
"    - Total Usage: {{ $usageRecord['total_usage'] }}\n"
"@endforeach"
msgstr ""

#: ./docs/8.x/billing.md:1104
#: ./docs/9.x/billing.md:1213
#: ./docs/10.x/billing.md:1393
#: ./docs/11.x/billing.md:1390
#: ./docs/master/billing.md:1393
msgctxt "P"
msgid "For a full reference of all usage data returned and how to use Stripe's cursor based pagination, please consult [the official Stripe API documentation](https://stripe.com/docs/api/usage_records/subscription_item_summary_list)."
msgstr ""

#: ./docs/8.x/billing.md:1106
#: ./docs/9.x/billing.md:1215
#: ./docs/10.x/billing.md:1395
#: ./docs/11.x/billing.md:1392
#: ./docs/master/billing.md:1395
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-taxes\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1107
#: ./docs/9.x/billing.md:1216
#: ./docs/10.x/billing.md:1396
#: ./docs/11.x/billing.md:1393
#: ./docs/master/billing.md:1396
msgctxt "H3"
msgid "Subscription Taxes"
msgstr ""

#: ./docs/8.x/billing.md:1109
#: ./docs/9.x/billing.md:1219
#: ./docs/10.x/billing.md:1399
#: ./docs/11.x/billing.md:1396
#: ./docs/master/billing.md:1399
msgctxt "P"
msgid "Instead of calculating Tax Rates manually, you can [automatically calculate taxes using Stripe Tax](#tax-configuration)"
msgstr ""

#: ./docs/9.x/billing.md:1110
#: ./docs/10.x/billing.md:1290
#: ./docs/11.x/billing.md:1287
#: ./docs/master/billing.md:1290
#~ msgctxt "P"
#~ msgid "<a name=\"multiple-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1111
#: ./docs/9.x/billing.md:1221
#: ./docs/10.x/billing.md:1401
#: ./docs/11.x/billing.md:1398
#: ./docs/master/billing.md:1401
msgctxt "P"
msgid "To specify the tax rates a user pays on a subscription, you should implement the `taxRates` method on your billable model and return an array containing the Stripe tax rate IDs. You can define these tax rates in [your Stripe dashboard](https://dashboard.stripe.com/test/tax-rates):"
msgstr ""

#: ./docs/9.x/billing.md:1111
#: ./docs/10.x/billing.md:1291
#: ./docs/11.x/billing.md:1288
#: ./docs/master/billing.md:1291
msgctxt "H3"
msgid "Multiple Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:1113
#: ./docs/9.x/billing.md:1223
msgctxt "CODE"
msgid ""
"/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array\n"
" */\n"
"public function taxRates()\n"
"{\n"
"    return ['txr_id'];\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1113
#: ./docs/10.x/billing.md:1293
#: ./docs/11.x/billing.md:1290
#: ./docs/master/billing.md:1293
msgctxt "P"
msgid "Stripe allows your customers to have multiple subscriptions simultaneously. For example, you may run a gym that offers a swimming subscription and a weight-lifting subscription, and each subscription may have different pricing. Of course, customers should be able to subscribe to either or both plans."
msgstr ""

#: ./docs/9.x/billing.md:1115
msgctxt "P"
msgid "When your application creates subscriptions, you may provide the name of the subscription to the `newSubscription` method. The name may be any string that represents the type of subscription the user is initiating:"
msgstr ""

#: ./docs/9.x/billing.md:1117
#: ./docs/10.x/billing.md:1297
#: ./docs/11.x/billing.md:1294
#: ./docs/master/billing.md:1297
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/swimming/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('swimming')\n"
"        ->price('price_swimming_monthly')\n"
"        ->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1123
#: ./docs/9.x/billing.md:1233
#: ./docs/10.x/billing.md:1413
#: ./docs/11.x/billing.md:1410
#: ./docs/master/billing.md:1413
msgctxt "P"
msgid "The `taxRates` method enables you to apply a tax rate on a customer-by-customer basis, which may be helpful for a user base that spans multiple countries and tax rates."
msgstr ""

#: ./docs/8.x/billing.md:1125
msgctxt "P"
msgid "If you're offering multiprice subscriptions, you may define different tax rates for each price by implementing a `priceTaxRates` method on your billable model:"
msgstr ""

#: ./docs/8.x/billing.md:1127
#: ./docs/9.x/billing.md:1237
msgctxt "CODE"
msgid ""
"/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array\n"
" */\n"
"public function priceTaxRates()\n"
"{\n"
"    return [\n"
"        'price_monthly' => ['txr_id'],\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1127
#: ./docs/10.x/billing.md:1307
#: ./docs/11.x/billing.md:1304
#: ./docs/master/billing.md:1307
msgctxt "P"
msgid "In this example, we initiated a monthly swimming subscription for the customer. However, they may want to swap to a yearly subscription at a later time. When adjusting the customer's subscription, we can simply swap the price on the `swimming` subscription:"
msgstr ""

#: ./docs/9.x/billing.md:1129
#: ./docs/10.x/billing.md:1309
#: ./docs/11.x/billing.md:1306
#: ./docs/master/billing.md:1309
msgctxt "CODE"
msgid "$user->subscription('swimming')->swap('price_swimming_yearly');"
msgstr ""

#: ./docs/9.x/billing.md:1131
#: ./docs/10.x/billing.md:1311
#: ./docs/11.x/billing.md:1308
#: ./docs/master/billing.md:1311
msgctxt "P"
msgid "Of course, you may also cancel the subscription entirely:"
msgstr ""

#: ./docs/9.x/billing.md:1133
#: ./docs/10.x/billing.md:1313
#: ./docs/11.x/billing.md:1310
#: ./docs/master/billing.md:1313
msgctxt "CODE"
msgid "$user->subscription('swimming')->cancel();"
msgstr ""

#: ./docs/8.x/billing.md:1139
msgctxt "P"
msgid "The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one off\" charges, you will need to manually specify the tax rate at that time."
msgstr ""

#: ./docs/8.x/billing.md:1141
#: ./docs/9.x/billing.md:1252
#: ./docs/10.x/billing.md:1432
#: ./docs/11.x/billing.md:1429
#: ./docs/master/billing.md:1432
#~ msgctxt "P"
#~ msgid "<a name=\"syncing-tax-rates\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1142
#: ./docs/9.x/billing.md:1253
#: ./docs/10.x/billing.md:1433
#: ./docs/11.x/billing.md:1430
#: ./docs/master/billing.md:1433
msgctxt "H4"
msgid "Syncing Tax Rates"
msgstr ""

#: ./docs/8.x/billing.md:1144
#: ./docs/9.x/billing.md:1255
#: ./docs/10.x/billing.md:1435
#: ./docs/11.x/billing.md:1432
#: ./docs/master/billing.md:1435
msgctxt "P"
msgid "When changing the hard-coded tax rate IDs returned by the `taxRates` method, the tax settings on any existing subscriptions for the user will remain the same. If you wish to update the tax value for existing subscriptions with the new `taxRates` values, you should call the `syncTaxRates` method on the user's subscription instance:"
msgstr ""

#: ./docs/8.x/billing.md:1146
#: ./docs/9.x/billing.md:1257
#: ./docs/10.x/billing.md:1437
#: ./docs/11.x/billing.md:1434
#: ./docs/master/billing.md:1437
msgctxt "CODE"
msgid "$user->subscription('default')->syncTaxRates();"
msgstr ""

#: ./docs/8.x/billing.md:1148
msgctxt "P"
msgid "This will also sync any multiprice subscription item tax rates. If your application is offering multiprice subscriptions, you should ensure that your billable model implements the `priceTaxRates` method [discussed above](#subscription-taxes)."
msgstr ""

#: ./docs/8.x/billing.md:1150
#: ./docs/9.x/billing.md:1261
#: ./docs/10.x/billing.md:1441
#: ./docs/11.x/billing.md:1438
#: ./docs/master/billing.md:1441
#~ msgctxt "P"
#~ msgid "<a name=\"tax-exemption\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1151
#: ./docs/9.x/billing.md:1262
#: ./docs/10.x/billing.md:1442
#: ./docs/11.x/billing.md:1439
#: ./docs/master/billing.md:1442
msgctxt "H4"
msgid "Tax Exemption"
msgstr ""

#: ./docs/8.x/billing.md:1153
#: ./docs/9.x/billing.md:1264
#: ./docs/10.x/billing.md:1444
#: ./docs/11.x/billing.md:1441
#: ./docs/master/billing.md:1444
msgctxt "P"
msgid "Cashier also offers the `isNotTaxExempt`, `isTaxExempt`, and `reverseChargeApplies` methods to determine if the customer is tax exempt. These methods will call the Stripe API to determine a customer's tax exemption status:"
msgstr ""

#: ./docs/8.x/billing.md:1155
#: ./docs/9.x/billing.md:1266
#: ./docs/10.x/billing.md:1446
#: ./docs/11.x/billing.md:1443
#: ./docs/master/billing.md:1446
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::find(1);\n"
"\n"
"$user->isTaxExempt();\n"
"$user->isNotTaxExempt();\n"
"$user->reverseChargeApplies();"
msgstr ""

#: ./docs/10.x/billing.md:1161
#: ./docs/11.x/billing.md:1158
#: ./docs/master/billing.md:1161
msgctxt "H4"
msgid "Quantities for Subscriptions With Multiple Products"
msgstr ""

#: ./docs/8.x/billing.md:1163
#: ./docs/9.x/billing.md:1275
#: ./docs/10.x/billing.md:1455
#: ./docs/11.x/billing.md:1452
#: ./docs/master/billing.md:1455
msgctxt "P"
msgid "These methods are also available on any `Laravel\\Cashier\\Invoice` object. However, when invoked on an `Invoice` object, the methods will determine the exemption status at the time the invoice was created."
msgstr ""

#: ./docs/8.x/billing.md:1165
#: ./docs/9.x/billing.md:1277
#: ./docs/10.x/billing.md:1457
#: ./docs/11.x/billing.md:1454
#: ./docs/master/billing.md:1457
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-anchor-date\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1166
#: ./docs/9.x/billing.md:1278
#: ./docs/10.x/billing.md:1458
#: ./docs/11.x/billing.md:1455
#: ./docs/master/billing.md:1458
msgctxt "H3"
msgid "Subscription Anchor Date"
msgstr ""

#: ./docs/8.x/billing.md:1168
#: ./docs/9.x/billing.md:1280
#: ./docs/10.x/billing.md:1460
#: ./docs/11.x/billing.md:1457
#: ./docs/master/billing.md:1460
msgctxt "P"
msgid "By default, the billing cycle anchor is the date the subscription was created or, if a trial period is used, the date that the trial ends. If you would like to modify the billing anchor date, you may use the `anchorBillingCycleOn` method:"
msgstr ""

#: ./docs/8.x/billing.md:1170
#: ./docs/9.x/billing.md:1282
#: ./docs/10.x/billing.md:1462
#: ./docs/11.x/billing.md:1459
#: ./docs/master/billing.md:1462
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $anchor = Carbon::parse('first day of next month');\n"
"\n"
"    $request->user()->newSubscription('default', 'price_monthly')\n"
"                ->anchorBillingCycleOn($anchor->startOfDay())\n"
"                ->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1182
#: ./docs/9.x/billing.md:1294
#: ./docs/10.x/billing.md:1474
#: ./docs/11.x/billing.md:1471
#: ./docs/master/billing.md:1474
msgctxt "P"
msgid "For more information on managing subscription billing cycles, consult the [Stripe billing cycle documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)"
msgstr ""

#: ./docs/8.x/billing.md:1184
#: ./docs/9.x/billing.md:1296
#: ./docs/10.x/billing.md:1476
#: ./docs/11.x/billing.md:1473
#: ./docs/master/billing.md:1476
#~ msgctxt "P"
#~ msgid "<a name=\"cancelling-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1185
#: ./docs/9.x/billing.md:1297
#: ./docs/10.x/billing.md:1477
#: ./docs/11.x/billing.md:1474
#: ./docs/master/billing.md:1477
msgctxt "H3"
msgid "Cancelling Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:1187
#: ./docs/9.x/billing.md:1299
#: ./docs/10.x/billing.md:1479
#: ./docs/11.x/billing.md:1476
#: ./docs/master/billing.md:1479
msgctxt "P"
msgid "To cancel a subscription, call the `cancel` method on the user's subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1189
#: ./docs/9.x/billing.md:1301
#: ./docs/10.x/billing.md:1481
#: ./docs/11.x/billing.md:1478
#: ./docs/master/billing.md:1481
msgctxt "CODE"
msgid "$user->subscription('default')->cancel();"
msgstr ""

#: ./docs/8.x/billing.md:1191
#: ./docs/9.x/billing.md:1303
#: ./docs/10.x/billing.md:1483
#: ./docs/11.x/billing.md:1480
#: ./docs/master/billing.md:1483
msgctxt "P"
msgid "When a subscription is canceled, Cashier will automatically set the `ends_at` column in your `subscriptions` database table. This column is used to know when the `subscribed` method should begin returning `false`."
msgstr ""

#: ./docs/8.x/billing.md:1193
#: ./docs/9.x/billing.md:1305
#: ./docs/10.x/billing.md:1485
#: ./docs/11.x/billing.md:1482
#: ./docs/master/billing.md:1485
msgctxt "P"
msgid "For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the `subscribed` method will continue to return `true` until March 5th. This is done because a user is typically allowed to continue using an application until the end of their billing cycle."
msgstr ""

#: ./docs/8.x/billing.md:1195
#: ./docs/9.x/billing.md:1307
#: ./docs/10.x/billing.md:1487
#: ./docs/11.x/billing.md:1484
#: ./docs/master/billing.md:1487
msgctxt "P"
msgid "You may determine if a user has canceled their subscription but are still on their \"grace period\" using the `onGracePeriod` method:"
msgstr ""

#: ./docs/8.x/billing.md:1201
#: ./docs/9.x/billing.md:1313
#: ./docs/10.x/billing.md:1493
#: ./docs/11.x/billing.md:1490
#: ./docs/master/billing.md:1493
msgctxt "P"
msgid "If you wish to cancel a subscription immediately, call the `cancelNow` method on the user's subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1203
#: ./docs/9.x/billing.md:1315
#: ./docs/10.x/billing.md:1495
#: ./docs/11.x/billing.md:1492
#: ./docs/master/billing.md:1495
msgctxt "CODE"
msgid "$user->subscription('default')->cancelNow();"
msgstr ""

#: ./docs/8.x/billing.md:1205
#: ./docs/9.x/billing.md:1317
#: ./docs/10.x/billing.md:1497
#: ./docs/11.x/billing.md:1494
#: ./docs/master/billing.md:1497
msgctxt "P"
msgid "If you wish to cancel a subscription immediately and invoice any remaining un-invoiced metered usage or new / pending proration invoice items, call the `cancelNowAndInvoice` method on the user's subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1207
#: ./docs/9.x/billing.md:1319
#: ./docs/10.x/billing.md:1499
#: ./docs/11.x/billing.md:1496
#: ./docs/master/billing.md:1499
msgctxt "CODE"
msgid "$user->subscription('default')->cancelNowAndInvoice();"
msgstr ""

#: ./docs/8.x/billing.md:1209
#: ./docs/9.x/billing.md:1321
#: ./docs/10.x/billing.md:1501
#: ./docs/11.x/billing.md:1498
#: ./docs/master/billing.md:1501
msgctxt "P"
msgid "You may also choose to cancel the subscription at a specific moment in time:"
msgstr ""

#: ./docs/8.x/billing.md:1211
#: ./docs/9.x/billing.md:1323
#: ./docs/10.x/billing.md:1503
#: ./docs/11.x/billing.md:1500
#: ./docs/master/billing.md:1503
msgctxt "CODE"
msgid ""
"$user->subscription('default')->cancelAt(\n"
"    now()->addDays(10)\n"
");"
msgstr ""

#: ./docs/8.x/billing.md:1215
#: ./docs/9.x/billing.md:1327
#: ./docs/10.x/billing.md:1513
#: ./docs/11.x/billing.md:1510
#: ./docs/master/billing.md:1513
#~ msgctxt "P"
#~ msgid "<a name=\"resuming-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1216
#: ./docs/9.x/billing.md:1328
#: ./docs/10.x/billing.md:1514
#: ./docs/11.x/billing.md:1511
#: ./docs/master/billing.md:1514
msgctxt "H3"
msgid "Resuming Subscriptions"
msgstr ""

#: ./docs/8.x/billing.md:1218
#: ./docs/9.x/billing.md:1330
#: ./docs/10.x/billing.md:1516
#: ./docs/11.x/billing.md:1513
#: ./docs/master/billing.md:1516
msgctxt "P"
msgid "If a customer has canceled their subscription and you wish to resume it, you may invoke the `resume` method on the subscription. The customer must still be within their \"grace period\" in order to resume a subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1220
#: ./docs/9.x/billing.md:1332
#: ./docs/10.x/billing.md:1518
#: ./docs/11.x/billing.md:1515
#: ./docs/master/billing.md:1518
msgctxt "CODE"
msgid "$user->subscription('default')->resume();"
msgstr ""

#: ./docs/8.x/billing.md:1222
#: ./docs/9.x/billing.md:1334
#: ./docs/10.x/billing.md:1520
#: ./docs/11.x/billing.md:1517
#: ./docs/master/billing.md:1520
msgctxt "P"
msgid "If the customer cancels a subscription and then resumes that subscription before the subscription has fully expired the customer will not be billed immediately. Instead, their subscription will be re-activated and they will be billed on the original billing cycle."
msgstr ""

#: ./docs/8.x/billing.md:1224
#: ./docs/9.x/billing.md:1336
#: ./docs/10.x/billing.md:1522
#: ./docs/11.x/billing.md:1519
#: ./docs/master/billing.md:1522
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-trials\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1225
#: ./docs/9.x/billing.md:1337
#: ./docs/10.x/billing.md:1523
#: ./docs/11.x/billing.md:1520
#: ./docs/master/billing.md:1523
msgctxt "H2"
msgid "Subscription Trials"
msgstr ""

#: ./docs/8.x/billing.md:1227
#: ./docs/9.x/billing.md:1339
#: ./docs/10.x/billing.md:1525
#: ./docs/11.x/billing.md:1522
#: ./docs/master/billing.md:1525
#~ msgctxt "P"
#~ msgid "<a name=\"with-payment-method-up-front\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1228
#: ./docs/9.x/billing.md:1340
#: ./docs/10.x/billing.md:1526
#: ./docs/11.x/billing.md:1523
#: ./docs/master/billing.md:1526
msgctxt "H3"
msgid "With Payment Method Up Front"
msgstr ""

#: ./docs/8.x/billing.md:1230
#: ./docs/9.x/billing.md:1342
#: ./docs/10.x/billing.md:1528
#: ./docs/11.x/billing.md:1525
#: ./docs/master/billing.md:1528
msgctxt "P"
msgid "If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the `trialDays` method when creating your subscriptions:"
msgstr ""

#: ./docs/8.x/billing.md:1232
#: ./docs/9.x/billing.md:1344
#: ./docs/10.x/billing.md:1530
#: ./docs/11.x/billing.md:1527
#: ./docs/master/billing.md:1530
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/user/subscribe', function (Request $request) {\n"
"    $request->user()->newSubscription('default', 'price_monthly')\n"
"                ->trialDays(10)\n"
"                ->create($request->paymentMethodId);\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1235
#: ./docs/10.x/billing.md:1415
#: ./docs/11.x/billing.md:1412
#: ./docs/master/billing.md:1415
msgctxt "P"
msgid "If you're offering subscriptions with multiple products, you may define different tax rates for each price by implementing a `priceTaxRates` method on your billable model:"
msgstr ""

#: ./docs/8.x/billing.md:1242
#: ./docs/9.x/billing.md:1354
#: ./docs/10.x/billing.md:1540
#: ./docs/11.x/billing.md:1537
#: ./docs/master/billing.md:1540
msgctxt "P"
msgid "This method will set the trial period ending date on the subscription record within the database and instruct Stripe to not begin billing the customer until after this date. When using the `trialDays` method, Cashier will overwrite any default trial period configured for the price in Stripe."
msgstr ""

#: ./docs/8.x/billing.md:1244
#: ./docs/9.x/billing.md:1357
#: ./docs/10.x/billing.md:1543
#: ./docs/11.x/billing.md:1540
#: ./docs/master/billing.md:1543
msgctxt "P"
msgid "If the customer's subscription is not canceled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date."
msgstr ""

#: ./docs/8.x/billing.md:1246
#: ./docs/9.x/billing.md:1359
#: ./docs/10.x/billing.md:1545
#: ./docs/11.x/billing.md:1542
#: ./docs/master/billing.md:1545
msgctxt "P"
msgid "The `trialUntil` method allows you to provide a `DateTime` instance that specifies when the trial period should end:"
msgstr ""

#: ./docs/8.x/billing.md:1248
#: ./docs/9.x/billing.md:1361
#: ./docs/10.x/billing.md:1547
#: ./docs/11.x/billing.md:1544
#: ./docs/master/billing.md:1547
msgctxt "CODE"
msgid ""
"use Carbon\\Carbon;\n"
"\n"
"$user->newSubscription('default', 'price_monthly')\n"
"            ->trialUntil(Carbon::now()->addDays(10))\n"
"            ->create($paymentMethod);"
msgstr ""

#: ./docs/9.x/billing.md:1250
#: ./docs/10.x/billing.md:1430
#: ./docs/11.x/billing.md:1427
#: ./docs/master/billing.md:1430
msgctxt "P"
msgid "The `taxRates` method only applies to subscription charges. If you use Cashier to make \"one-off\" charges, you will need to manually specify the tax rate at that time."
msgstr ""

#: ./docs/8.x/billing.md:1254
#: ./docs/9.x/billing.md:1367
#: ./docs/10.x/billing.md:1553
#: ./docs/11.x/billing.md:1550
#: ./docs/master/billing.md:1553
msgctxt "P"
msgid "You may determine if a user is within their trial period using either the `onTrial` method of the user instance or the `onTrial` method of the subscription instance. The two examples below are equivalent:"
msgstr ""

#: ./docs/10.x/billing.md:1256
#: ./docs/11.x/billing.md:1253
#: ./docs/master/billing.md:1256
msgctxt "P"
msgid "If you would like to update quantities on individual subscription prices, you may do so using the [existing quantity methods](#subscription-quantity) by passing the ID of the price as an additional argument to the method:"
msgstr ""

#: ./docs/8.x/billing.md:1256
#: ./docs/9.x/billing.md:1369
msgctxt "CODE"
msgid ""
"if ($user->onTrial('default')) {\n"
"    //\n"
"}\n"
"\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1259
#: ./docs/10.x/billing.md:1439
#: ./docs/11.x/billing.md:1436
#: ./docs/master/billing.md:1439
msgctxt "P"
msgid "This will also sync any item tax rates for a subscription with multiple products. If your application is offering subscriptions with multiple products, you should ensure that your billable model implements the `priceTaxRates` method [discussed above](#subscription-taxes)."
msgstr ""

#: ./docs/8.x/billing.md:1264
#: ./docs/9.x/billing.md:1377
#: ./docs/10.x/billing.md:1563
#: ./docs/11.x/billing.md:1560
#: ./docs/master/billing.md:1563
msgctxt "P"
msgid "You may use the `endTrial` method to immediately end a subscription trial:"
msgstr ""

#: ./docs/8.x/billing.md:1266
#: ./docs/9.x/billing.md:1379
#: ./docs/10.x/billing.md:1565
#: ./docs/11.x/billing.md:1562
#: ./docs/master/billing.md:1565
msgctxt "CODE"
msgid "$user->subscription('default')->endTrial();"
msgstr ""

#: ./docs/8.x/billing.md:1268
#: ./docs/9.x/billing.md:1391
#: ./docs/10.x/billing.md:1577
#: ./docs/11.x/billing.md:1574
#: ./docs/master/billing.md:1577
#~ msgctxt "P"
#~ msgid "<a name=\"defining-trial-days-in-stripe-cashier\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1269
#: ./docs/9.x/billing.md:1392
msgctxt "H4"
msgid "Defining Trial Days In Stripe / Cashier"
msgstr ""

#: ./docs/8.x/billing.md:1271
#: ./docs/9.x/billing.md:1394
#: ./docs/10.x/billing.md:1580
#: ./docs/11.x/billing.md:1577
#: ./docs/master/billing.md:1580
msgctxt "P"
msgid "You may choose to define how many trial days your price's receive in the Stripe dashboard or always pass them explicitly using Cashier. If you choose to define your price's trial days in Stripe you should be aware that new subscriptions, including new subscriptions for a customer that had a subscription in the past, will always receive a trial period unless you explicitly call the `skipTrial()` method."
msgstr ""

#: ./docs/8.x/billing.md:1273
#: ./docs/9.x/billing.md:1396
#: ./docs/10.x/billing.md:1582
#: ./docs/11.x/billing.md:1579
#: ./docs/master/billing.md:1582
#~ msgctxt "P"
#~ msgid "<a name=\"without-payment-method-up-front\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1274
#: ./docs/9.x/billing.md:1397
#: ./docs/10.x/billing.md:1583
#: ./docs/11.x/billing.md:1580
#: ./docs/master/billing.md:1583
msgctxt "H3"
msgid "Without Payment Method Up Front"
msgstr ""

#: ./docs/8.x/billing.md:1276
#: ./docs/9.x/billing.md:1399
#: ./docs/10.x/billing.md:1585
#: ./docs/11.x/billing.md:1582
#: ./docs/master/billing.md:1585
msgctxt "P"
msgid "If you would like to offer trial periods without collecting the user's payment method information up front, you may set the `trial_ends_at` column on the user record to your desired trial ending date. This is typically done during user registration:"
msgstr ""

#: ./docs/8.x/billing.md:1278
#: ./docs/9.x/billing.md:1401
#: ./docs/10.x/billing.md:1587
#: ./docs/11.x/billing.md:1584
#: ./docs/master/billing.md:1587
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$user = User::create([\n"
"    // ...\n"
"    'trial_ends_at' => now()->addDays(10),\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:1285
msgctxt "P"
msgid "Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators##date-casting) for the `trial_ends_at` attribute within your billable model's class definition."
msgstr ""

#: ./docs/8.x/billing.md:1287
#: ./docs/9.x/billing.md:1411
#: ./docs/10.x/billing.md:1597
#: ./docs/11.x/billing.md:1594
#: ./docs/master/billing.md:1597
msgctxt "P"
msgid "Cashier refers to this type of trial as a \"generic trial\", since it is not attached to any existing subscription. The `onTrial` method on the billable model instance will return `true` if the current date is not past the value of `trial_ends_at`:"
msgstr ""

#: ./docs/8.x/billing.md:1289
#: ./docs/9.x/billing.md:1413
#: ./docs/10.x/billing.md:1599
#: ./docs/11.x/billing.md:1596
#: ./docs/master/billing.md:1599
msgctxt "CODE"
msgid ""
"if ($user->onTrial()) {\n"
"    // User is within their trial period...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1293
#: ./docs/9.x/billing.md:1417
#: ./docs/10.x/billing.md:1603
#: ./docs/11.x/billing.md:1600
#: ./docs/master/billing.md:1603
msgctxt "P"
msgid "Once you are ready to create an actual subscription for the user, you may use the `newSubscription` method as usual:"
msgstr ""

#: ./docs/10.x/billing.md:1295
#: ./docs/11.x/billing.md:1292
#: ./docs/master/billing.md:1295
msgctxt "P"
msgid "When your application creates subscriptions, you may provide the type of the subscription to the `newSubscription` method. The type may be any string that represents the type of subscription the user is initiating:"
msgstr ""

#: ./docs/8.x/billing.md:1295
#: ./docs/9.x/billing.md:1419
#: ./docs/10.x/billing.md:1605
#: ./docs/11.x/billing.md:1602
#: ./docs/master/billing.md:1605
msgctxt "CODE"
msgid ""
"$user = User::find(1);\n"
"\n"
"$user->newSubscription('default', 'price_monthly')->create($paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:1299
#: ./docs/9.x/billing.md:1423
msgctxt "P"
msgid "To retrieve the user's trial ending date, you may use the `trialEndsAt` method. This method will return a Carbon date instance if a user is on a trial or `null` if they aren't. You may also pass an optional subscription name parameter if you would like to get the trial ending date for a specific subscription other than the default one:"
msgstr ""

#: ./docs/8.x/billing.md:1301
#: ./docs/9.x/billing.md:1425
#: ./docs/10.x/billing.md:1611
#: ./docs/11.x/billing.md:1608
#: ./docs/master/billing.md:1611
msgctxt "CODE"
msgid ""
"if ($user->onTrial()) {\n"
"    $trialEndsAt = $user->trialEndsAt('main');\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1305
#: ./docs/9.x/billing.md:1429
#: ./docs/10.x/billing.md:1615
#: ./docs/11.x/billing.md:1612
#: ./docs/master/billing.md:1615
msgctxt "P"
msgid "You may also use the `onGenericTrial` method if you wish to know specifically that the user is within their \"generic\" trial period and has not yet created an actual subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1307
#: ./docs/9.x/billing.md:1431
#: ./docs/10.x/billing.md:1617
#: ./docs/11.x/billing.md:1614
#: ./docs/master/billing.md:1617
msgctxt "CODE"
msgid ""
"if ($user->onGenericTrial()) {\n"
"    // User is within their \"generic\" trial period...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1311
#: ./docs/9.x/billing.md:1435
#: ./docs/10.x/billing.md:1621
#: ./docs/11.x/billing.md:1618
#: ./docs/master/billing.md:1621
#~ msgctxt "P"
#~ msgid "<a name=\"extending-trials\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1312
#: ./docs/9.x/billing.md:1436
#: ./docs/10.x/billing.md:1622
#: ./docs/11.x/billing.md:1619
#: ./docs/master/billing.md:1622
msgctxt "H3"
msgid "Extending Trials"
msgstr ""

#: ./docs/8.x/billing.md:1314
#: ./docs/9.x/billing.md:1438
#: ./docs/10.x/billing.md:1624
#: ./docs/11.x/billing.md:1621
#: ./docs/master/billing.md:1624
msgctxt "P"
msgid "The `extendTrial` method allows you to extend the trial period of a subscription after the subscription has been created. If the trial has already expired and the customer is already being billed for the subscription, you can still offer them an extended trial. The time spent within the trial period will be deducted from the customer's next invoice:"
msgstr ""

#: ./docs/8.x/billing.md:1316
#: ./docs/9.x/billing.md:1440
#: ./docs/10.x/billing.md:1626
#: ./docs/11.x/billing.md:1623
#: ./docs/master/billing.md:1626
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$subscription = User::find(1)->subscription('default');\n"
"\n"
"// End the trial 7 days from now...\n"
"$subscription->extendTrial(\n"
"    now()->addDays(7)\n"
");\n"
"\n"
"// Add an additional 5 days to the trial...\n"
"$subscription->extendTrial(\n"
"    $subscription->trial_ends_at->addDays(5)\n"
");"
msgstr ""

#: ./docs/8.x/billing.md:1330
#: ./docs/9.x/billing.md:1454
#: ./docs/10.x/billing.md:1640
#: ./docs/11.x/billing.md:1637
#: ./docs/master/billing.md:1640
#~ msgctxt "P"
#~ msgid "<a name=\"handling-stripe-webhooks\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1331
#: ./docs/9.x/billing.md:1455
#: ./docs/10.x/billing.md:1641
#: ./docs/11.x/billing.md:1638
#: ./docs/master/billing.md:1641
msgctxt "H2"
msgid "Handling Stripe Webhooks"
msgstr ""

#: ./docs/8.x/billing.md:1333
#: ./docs/9.x/billing.md:1458
#: ./docs/10.x/billing.md:1644
#: ./docs/11.x/billing.md:1641
#: ./docs/master/billing.md:1644
msgctxt "P"
msgid "You may use [the Stripe CLI](https://stripe.com/docs/stripe-cli) to help test webhooks during local development."
msgstr ""

#: ./docs/8.x/billing.md:1335
#: ./docs/9.x/billing.md:1460
#: ./docs/10.x/billing.md:1646
#: ./docs/11.x/billing.md:1643
#: ./docs/master/billing.md:1646
msgctxt "P"
msgid "Stripe can notify your application of a variety of events via webhooks. By default, a route that points to Cashier's webhook controller is automatically registered by the Cashier service provider. This controller will handle all incoming webhook requests."
msgstr ""

#: ./docs/8.x/billing.md:1337
#: ./docs/9.x/billing.md:1462
#: ./docs/10.x/billing.md:1648
#: ./docs/11.x/billing.md:1645
#: ./docs/master/billing.md:1648
msgctxt "P"
msgid "By default, the Cashier webhook controller will automatically handle cancelling subscriptions that have too many failed charges (as defined by your Stripe settings), customer updates, customer deletions, subscription updates, and payment method changes; however, as we'll soon discover, you can extend this controller to handle any Stripe webhook event you like."
msgstr ""

#: ./docs/8.x/billing.md:1339
#: ./docs/9.x/billing.md:1464
#: ./docs/10.x/billing.md:1650
#: ./docs/11.x/billing.md:1647
#: ./docs/master/billing.md:1650
msgctxt "P"
msgid "To ensure your application can handle Stripe webhooks, be sure to configure the webhook URL in the Stripe control panel. By default, Cashier's webhook controller responds to the `/stripe/webhook` URL path. The full list of all webhooks you should enable in the Stripe control panel are:"
msgstr ""

#: ./docs/8.x/billing.md:1341
#: ./docs/9.x/billing.md:1466
#: ./docs/10.x/billing.md:1652
#: ./docs/11.x/billing.md:1649
#: ./docs/master/billing.md:1652
msgctxt "P"
msgid "`customer.subscription.created`"
msgstr ""

#: ./docs/8.x/billing.md:1342
#: ./docs/9.x/billing.md:1467
#: ./docs/10.x/billing.md:1653
#: ./docs/11.x/billing.md:1650
#: ./docs/master/billing.md:1653
msgctxt "P"
msgid "`customer.subscription.updated`"
msgstr ""

#: ./docs/8.x/billing.md:1343
#: ./docs/9.x/billing.md:1468
#: ./docs/10.x/billing.md:1654
#: ./docs/11.x/billing.md:1651
#: ./docs/master/billing.md:1654
msgctxt "P"
msgid "`customer.subscription.deleted`"
msgstr ""

#: ./docs/8.x/billing.md:1344
#: ./docs/9.x/billing.md:1469
#: ./docs/10.x/billing.md:1655
#: ./docs/11.x/billing.md:1652
#: ./docs/master/billing.md:1655
msgctxt "P"
msgid "`customer.updated`"
msgstr ""

#: ./docs/8.x/billing.md:1345
#: ./docs/9.x/billing.md:1470
#: ./docs/10.x/billing.md:1656
#: ./docs/11.x/billing.md:1653
#: ./docs/master/billing.md:1656
msgctxt "P"
msgid "`customer.deleted`"
msgstr ""

#: ./docs/8.x/billing.md:1346
#: ./docs/9.x/billing.md:1472
#: ./docs/10.x/billing.md:1658
#: ./docs/11.x/billing.md:1655
#: ./docs/master/billing.md:1658
msgctxt "P"
msgid "`invoice.payment_action_required`"
msgstr ""

#: ./docs/8.x/billing.md:1348
#: ./docs/9.x/billing.md:1475
#: ./docs/10.x/billing.md:1661
#: ./docs/11.x/billing.md:1658
#: ./docs/master/billing.md:1661
msgctxt "P"
msgid "For convenience, Cashier includes a `cashier:webhook` Artisan command. This command will create a webhook in Stripe that listens to all of the events required by Cashier:"
msgstr ""

#: ./docs/8.x/billing.md:1350
#: ./docs/9.x/billing.md:1477
#: ./docs/10.x/billing.md:1663
#: ./docs/11.x/billing.md:1660
#: ./docs/master/billing.md:1663
msgctxt "CODE"
msgid "php artisan cashier:webhook"
msgstr ""

#: ./docs/8.x/billing.md:1352
#: ./docs/9.x/billing.md:1481
#: ./docs/10.x/billing.md:1667
#: ./docs/11.x/billing.md:1664
#: ./docs/master/billing.md:1667
msgctxt "P"
msgid "By default, the created webhook will point to the URL defined by the `APP_URL` environment variable and the `cashier.webhook` route that is included with Cashier. You may provide the `--url` option when invoking the command if you would like to use a different URL:"
msgstr ""

#: ./docs/8.x/billing.md:1354
#: ./docs/9.x/billing.md:1483
#: ./docs/10.x/billing.md:1669
#: ./docs/11.x/billing.md:1666
#: ./docs/master/billing.md:1669
msgctxt "CODE"
msgid "php artisan cashier:webhook --url \"https://example.com/stripe/webhook\""
msgstr ""

#: ./docs/8.x/billing.md:1356
#: ./docs/9.x/billing.md:1487
#: ./docs/10.x/billing.md:1673
#: ./docs/11.x/billing.md:1670
#: ./docs/master/billing.md:1673
msgctxt "P"
msgid "The webhook that is created will use the Stripe API version that your version of Cashier is compatible with. If you would like to use a different Stripe version, you may provide the `--api-version` option:"
msgstr ""

#: ./docs/8.x/billing.md:1358
#: ./docs/9.x/billing.md:1489
#: ./docs/10.x/billing.md:1675
#: ./docs/11.x/billing.md:1672
#: ./docs/master/billing.md:1675
msgctxt "CODE"
msgid "php artisan cashier:webhook --api-version=\"2019-12-03\""
msgstr ""

#: ./docs/8.x/billing.md:1360
#: ./docs/9.x/billing.md:1493
#: ./docs/10.x/billing.md:1679
#: ./docs/11.x/billing.md:1676
#: ./docs/master/billing.md:1679
msgctxt "P"
msgid "After creation, the webhook will be immediately active. If you wish to create the webhook but have it disabled until you're ready, you may provide the `--disabled` option when invoking the command:"
msgstr ""

#: ./docs/8.x/billing.md:1362
#: ./docs/9.x/billing.md:1495
#: ./docs/10.x/billing.md:1681
#: ./docs/11.x/billing.md:1678
#: ./docs/master/billing.md:1681
msgctxt "CODE"
msgid "php artisan cashier:webhook --disabled"
msgstr ""

#: ./docs/8.x/billing.md:1364
#: ./docs/9.x/billing.md:1500
#: ./docs/10.x/billing.md:1686
#: ./docs/11.x/billing.md:1683
#: ./docs/master/billing.md:1686
msgctxt "P"
msgid "Make sure you protect incoming Stripe webhook requests with Cashier's included [webhook signature verification](#verifying-webhook-signatures) middleware."
msgstr ""

#: ./docs/8.x/billing.md:1366
#: ./docs/9.x/billing.md:1502
#: ./docs/10.x/billing.md:1688
#: ./docs/11.x/billing.md:1685
#: ./docs/master/billing.md:1688
#~ msgctxt "P"
#~ msgid "<a name=\"webhooks-csrf-protection\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1367
#: ./docs/9.x/billing.md:1503
msgctxt "H4"
msgid "Webhooks & CSRF Protection"
msgstr ""

#: ./docs/8.x/billing.md:1369
#: ./docs/9.x/billing.md:1505
#: ./docs/10.x/billing.md:1691
msgctxt "P"
msgid "Since Stripe webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), be sure to list the URI as an exception in your application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the `web` middleware group:"
msgstr ""

#: ./docs/8.x/billing.md:1371
#: ./docs/9.x/billing.md:1507
#: ./docs/10.x/billing.md:1693
msgctxt "CODE"
msgid ""
"protected $except = [\n"
"    'stripe/*',\n"
"];"
msgstr ""

#: ./docs/8.x/billing.md:1375
#: ./docs/9.x/billing.md:1511
#: ./docs/10.x/billing.md:1697
#: ./docs/11.x/billing.md:1696
#: ./docs/master/billing.md:1699
#~ msgctxt "P"
#~ msgid "<a name=\"defining-webhook-event-handlers\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1376
#: ./docs/9.x/billing.md:1512
#: ./docs/10.x/billing.md:1698
#: ./docs/11.x/billing.md:1697
#: ./docs/master/billing.md:1700
msgctxt "H3"
msgid "Defining Webhook Event Handlers"
msgstr ""

#: ./docs/8.x/billing.md:1378
#: ./docs/9.x/billing.md:1514
#: ./docs/10.x/billing.md:1700
#: ./docs/11.x/billing.md:1699
#: ./docs/master/billing.md:1702
msgctxt "P"
msgid "Cashier automatically handles subscription cancellations for failed charges and other common Stripe webhook events. However, if you have additional webhook events you would like to handle, you may do so by listening to the following events that are dispatched by Cashier:"
msgstr ""

#: ./docs/8.x/billing.md:1380
#: ./docs/9.x/billing.md:1516
#: ./docs/10.x/billing.md:1702
#: ./docs/11.x/billing.md:1701
#: ./docs/master/billing.md:1704
msgctxt "P"
msgid "`Laravel\\Cashier\\Events\\WebhookReceived`"
msgstr ""

#: ./docs/8.x/billing.md:1381
#: ./docs/9.x/billing.md:1517
#: ./docs/10.x/billing.md:1703
#: ./docs/11.x/billing.md:1702
#: ./docs/master/billing.md:1705
msgctxt "P"
msgid "`Laravel\\Cashier\\Events\\WebhookHandled`"
msgstr ""

#: ./docs/9.x/billing.md:1381
#: ./docs/10.x/billing.md:1567
#: ./docs/11.x/billing.md:1564
#: ./docs/master/billing.md:1567
msgctxt "P"
msgid "To determine if an existing trial has expired, you may use the `hasExpiredTrial` methods:"
msgstr ""

#: ./docs/8.x/billing.md:1383
#: ./docs/9.x/billing.md:1519
#: ./docs/10.x/billing.md:1705
#: ./docs/11.x/billing.md:1704
#: ./docs/master/billing.md:1707
msgctxt "P"
msgid "Both events contain the full payload of the Stripe webhook. For example, if you wish to handle the `invoice.payment_succeeded` webhook, you may register a [listener](/docs/{{version}}/events#defining-listeners) that will handle the event:"
msgstr ""

#: ./docs/9.x/billing.md:1383
msgctxt "CODE"
msgid ""
"if ($user->hasExpiredTrial('default')) {\n"
"    //\n"
"}\n"
"\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1385
#: ./docs/9.x/billing.md:1521
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n"
"\n"
"class StripeEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Stripe webhooks.\n"
"     *\n"
"     * @param  \\Laravel\\Cashier\\Events\\WebhookReceived  $event\n"
"     * @return void\n"
"     */\n"
"    public function handle(WebhookReceived $event)\n"
"    {\n"
"        if ($event->payload['type'] === 'invoice.payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:1403
#: ./docs/11.x/billing.md:1400
#: ./docs/master/billing.md:1403
msgctxt "CODE"
msgid ""
"/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array<int, string>\n"
" */\n"
"public function taxRates(): array\n"
"{\n"
"    return ['txr_id'];\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1407
#: ./docs/9.x/billing.md:1543
#: ./docs/10.x/billing.md:1726
msgctxt "P"
msgid "Once your listener has been defined, you may register it within your application's `EventServiceProvider`:"
msgstr ""

#: ./docs/8.x/billing.md:1409
#: ./docs/9.x/billing.md:1545
#: ./docs/10.x/billing.md:1728
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Listeners\\StripeEventListener;\n"
"use Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n"
"\n"
"class EventServiceProvider extends ServiceProvider\n"
"{\n"
"    protected $listen = [\n"
"        WebhookReceived::class => [\n"
"            StripeEventListener::class,\n"
"        ],\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1409
#: ./docs/10.x/billing.md:1595
#: ./docs/11.x/billing.md:1592
#: ./docs/master/billing.md:1595
msgctxt "P"
msgid "Be sure to add a [date cast](/docs/{{version}}/eloquent-mutators#date-casting) for the `trial_ends_at` attribute within your billable model's class definition."
msgstr ""

#: ./docs/10.x/billing.md:1417
#: ./docs/11.x/billing.md:1414
#: ./docs/master/billing.md:1417
msgctxt "CODE"
msgid ""
"/**\n"
" * The tax rates that should apply to the customer's subscriptions.\n"
" *\n"
" * @return array<string, array<int, string>>\n"
" */\n"
"public function priceTaxRates(): array\n"
"{\n"
"    return [\n"
"        'price_monthly' => ['txr_id'],\n"
"    ];\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1426
#: ./docs/9.x/billing.md:1562
#: ./docs/10.x/billing.md:1745
#: ./docs/11.x/billing.md:1725
#: ./docs/master/billing.md:1728
#~ msgctxt "P"
#~ msgid "<a name=\"verifying-webhook-signatures\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1427
#: ./docs/9.x/billing.md:1563
#: ./docs/10.x/billing.md:1746
#: ./docs/11.x/billing.md:1726
#: ./docs/master/billing.md:1729
msgctxt "H3"
msgid "Verifying Webhook Signatures"
msgstr ""

#: ./docs/8.x/billing.md:1429
#: ./docs/9.x/billing.md:1565
#: ./docs/10.x/billing.md:1748
#: ./docs/11.x/billing.md:1728
#: ./docs/master/billing.md:1731
msgctxt "P"
msgid "To secure your webhooks, you may use [Stripe's webhook signatures](https://stripe.com/docs/webhooks/signatures). For convenience, Cashier automatically includes a middleware which validates that the incoming Stripe webhook request is valid."
msgstr ""

#: ./docs/8.x/billing.md:1431
#: ./docs/9.x/billing.md:1567
#: ./docs/10.x/billing.md:1750
#: ./docs/11.x/billing.md:1730
#: ./docs/master/billing.md:1733
msgctxt "P"
msgid "To enable webhook verification, ensure that the `STRIPE_WEBHOOK_SECRET` environment variable is set in your application's `.env` file. The webhook `secret` may be retrieved from your Stripe account dashboard."
msgstr ""

#: ./docs/8.x/billing.md:1433
#: ./docs/9.x/billing.md:1569
#: ./docs/10.x/billing.md:1752
#: ./docs/11.x/billing.md:1732
#: ./docs/master/billing.md:1735
#~ msgctxt "P"
#~ msgid "<a name=\"single-charges\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1434
#: ./docs/9.x/billing.md:1570
#: ./docs/10.x/billing.md:1753
#: ./docs/11.x/billing.md:1733
#: ./docs/master/billing.md:1736
msgctxt "H2"
msgid "Single Charges"
msgstr ""

#: ./docs/8.x/billing.md:1436
#: ./docs/9.x/billing.md:1572
#: ./docs/10.x/billing.md:1755
#: ./docs/11.x/billing.md:1735
#: ./docs/master/billing.md:1738
#~ msgctxt "P"
#~ msgid "<a name=\"simple-charge\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1437
#: ./docs/9.x/billing.md:1573
#: ./docs/10.x/billing.md:1756
#: ./docs/11.x/billing.md:1736
#: ./docs/master/billing.md:1739
msgctxt "H3"
msgid "Simple Charge"
msgstr ""

#: ./docs/8.x/billing.md:1439
msgctxt "P"
msgid "The `charge` method accepts the amount you would like to charge in the lowest denominator of the currency used by your application. For example, when using United States Dollars, amounts should be specified in pennies."
msgstr ""

#: ./docs/8.x/billing.md:1441
#: ./docs/9.x/billing.md:1575
#: ./docs/10.x/billing.md:1758
#: ./docs/11.x/billing.md:1738
#: ./docs/master/billing.md:1741
msgctxt "P"
msgid "If you would like to make a one-time charge against a customer, you may use the `charge` method on a billable model instance. You will need to [provide a payment method identifier](#payment-methods-for-single-charges) as the second argument to the `charge` method:"
msgstr ""

#: ./docs/8.x/billing.md:1443
#: ./docs/9.x/billing.md:1577
#: ./docs/10.x/billing.md:1760
#: ./docs/11.x/billing.md:1740
#: ./docs/master/billing.md:1743
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/purchase', function (Request $request) {\n"
"    $stripeCharge = $request->user()->charge(\n"
"        100, $request->paymentMethodId\n"
"    );\n"
"\n"
"    // ...\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1453
#: ./docs/9.x/billing.md:1587
#: ./docs/10.x/billing.md:1770
#: ./docs/11.x/billing.md:1750
#: ./docs/master/billing.md:1753
msgctxt "P"
msgid "The `charge` method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Stripe charge creation. More information regarding the options available to you when creating charges may be found in the [Stripe documentation](https://stripe.com/docs/api/charges/create):"
msgstr ""

#: ./docs/8.x/billing.md:1455
#: ./docs/9.x/billing.md:1589
#: ./docs/10.x/billing.md:1772
#: ./docs/11.x/billing.md:1752
#: ./docs/master/billing.md:1755
msgctxt "CODE"
msgid ""
"$user->charge(100, $paymentMethod, [\n"
"    'custom_option' => $value,\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:1459
#: ./docs/9.x/billing.md:1593
#: ./docs/10.x/billing.md:1776
#: ./docs/11.x/billing.md:1756
#: ./docs/master/billing.md:1759
msgctxt "P"
msgid "You may also use the `charge` method without an underlying customer or user. To accomplish this, invoke the `charge` method on a new instance of your application's billable model:"
msgstr ""

#: ./docs/8.x/billing.md:1461
#: ./docs/9.x/billing.md:1595
#: ./docs/10.x/billing.md:1778
#: ./docs/11.x/billing.md:1758
#: ./docs/master/billing.md:1761
msgctxt "CODE"
msgid ""
"use App\\Models\\User;\n"
"\n"
"$stripeCharge = (new User)->charge(100, $paymentMethod);"
msgstr ""

#: ./docs/8.x/billing.md:1465
#: ./docs/9.x/billing.md:1599
#: ./docs/10.x/billing.md:1782
#: ./docs/11.x/billing.md:1762
#: ./docs/master/billing.md:1765
msgctxt "P"
msgid "The `charge` method will throw an exception if the charge fails. If the charge is successful, an instance of `Laravel\\Cashier\\Payment` will be returned from the method:"
msgstr ""

#: ./docs/8.x/billing.md:1467
#: ./docs/9.x/billing.md:1601
msgctxt "CODE"
msgid ""
"try {\n"
"    $payment = $user->charge(100, $paymentMethod);\n"
"} catch (Exception $e) {\n"
"    //\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1471
#: ./docs/10.x/billing.md:1657
#: ./docs/11.x/billing.md:1654
#: ./docs/master/billing.md:1657
msgctxt "P"
msgid "`payment_method.automatically_updated`"
msgstr ""

#: ./docs/8.x/billing.md:1473
#: ./docs/9.x/billing.md:1610
#: ./docs/10.x/billing.md:1793
#: ./docs/11.x/billing.md:1773
#: ./docs/master/billing.md:1776
#~ msgctxt "P"
#~ msgid "<a name=\"charge-with-invoice\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:1473
#: ./docs/10.x/billing.md:1659
#: ./docs/11.x/billing.md:1656
#: ./docs/master/billing.md:1659
msgctxt "P"
msgid "`invoice.payment_succeeded`"
msgstr ""

#: ./docs/8.x/billing.md:1474
#: ./docs/9.x/billing.md:1611
#: ./docs/10.x/billing.md:1794
#: ./docs/11.x/billing.md:1774
#: ./docs/master/billing.md:1777
msgctxt "H3"
msgid "Charge With Invoice"
msgstr ""

#: ./docs/8.x/billing.md:1476
#: ./docs/9.x/billing.md:1613
msgctxt "P"
msgid "Sometimes you may need to make a one-time charge and offer a PDF receipt to your customer. The `invoicePrice` method lets you do just that. For example, let's invoice a customer for five new shirts:"
msgstr ""

#: ./docs/8.x/billing.md:1478
#: ./docs/9.x/billing.md:1615
#: ./docs/10.x/billing.md:1798
#: ./docs/11.x/billing.md:1778
#: ./docs/master/billing.md:1781
msgctxt "CODE"
msgid "$user->invoicePrice('price_tshirt', 5);"
msgstr ""

#: ./docs/8.x/billing.md:1480
#: ./docs/9.x/billing.md:1617
#: ./docs/10.x/billing.md:1800
#: ./docs/11.x/billing.md:1780
#: ./docs/master/billing.md:1783
msgctxt "P"
msgid "The invoice will be immediately charged against the user's default payment method. The `invoicePrice` method also accepts an array as its third argument. This array contains the billing options for the invoice item. The fourth argument accepted by the method is also an array which should contain the billing options for the invoice itself:"
msgstr ""

#: ./docs/8.x/billing.md:1482
#: ./docs/9.x/billing.md:1619
#: ./docs/10.x/billing.md:1802
#: ./docs/11.x/billing.md:1782
#: ./docs/master/billing.md:1785
msgctxt "CODE"
msgid ""
"$user->invoicePrice('price_tshirt', 5, [\n"
"    'discounts' => [\n"
"        ['coupon' => 'SUMMER21SALE']\n"
"    ],\n"
"], [\n"
"    'default_tax_rates' => ['txr_id'],\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:1490
#: ./docs/9.x/billing.md:1633
#: ./docs/10.x/billing.md:1816
#: ./docs/11.x/billing.md:1796
#: ./docs/master/billing.md:1799
msgctxt "P"
msgid "Alternatively, you may use the `invoiceFor` method to make a \"one-off\" charge against the customer's default payment method:"
msgstr ""

#: ./docs/8.x/billing.md:1492
#: ./docs/9.x/billing.md:1635
#: ./docs/10.x/billing.md:1818
#: ./docs/11.x/billing.md:1798
#: ./docs/master/billing.md:1801
msgctxt "CODE"
msgid "$user->invoiceFor('One Time Fee', 500);"
msgstr ""

#: ./docs/8.x/billing.md:1494
msgctxt "P"
msgid "Although the `invoiceFor` method is available for you to use, it is recommendeded that you use the `invoicePrice` method with pre-defined prices. By doing so, you will have access to better analytics and data within your Stripe dashboard regarding your sales on a per-product basis."
msgstr ""

#: ./docs/8.x/billing.md:1496
msgctxt "P"
msgid "The `invoicePrice` and `invoiceFor` methods will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge."
msgstr ""

#: ./docs/8.x/billing.md:1498
#: ./docs/9.x/billing.md:1674
#: ./docs/10.x/billing.md:1857
#: ./docs/11.x/billing.md:1837
#: ./docs/master/billing.md:1840
#~ msgctxt "P"
#~ msgid "<a name=\"refunding-charges\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1499
#: ./docs/9.x/billing.md:1675
#: ./docs/10.x/billing.md:1858
#: ./docs/11.x/billing.md:1838
#: ./docs/master/billing.md:1841
msgctxt "H3"
msgid "Refunding Charges"
msgstr ""

#: ./docs/8.x/billing.md:1501
#: ./docs/9.x/billing.md:1677
#: ./docs/10.x/billing.md:1860
#: ./docs/11.x/billing.md:1840
#: ./docs/master/billing.md:1843
msgctxt "P"
msgid "If you need to refund a Stripe charge, you may use the `refund` method. This method accepts the Stripe [payment intent ID](#payment-methods-for-single-charges) as its first argument:"
msgstr ""

#: ./docs/8.x/billing.md:1503
#: ./docs/9.x/billing.md:1679
#: ./docs/10.x/billing.md:1862
#: ./docs/11.x/billing.md:1842
#: ./docs/master/billing.md:1845
msgctxt "CODE"
msgid ""
"$payment = $user->charge(100, $paymentMethodId);\n"
"\n"
"$user->refund($payment->id);"
msgstr ""

#: ./docs/10.x/billing.md:1507
#: ./docs/11.x/billing.md:1504
#: ./docs/master/billing.md:1507
msgctxt "P"
msgid "Finally, you should always cancel user subscriptions before deleting the associated user model:"
msgstr ""

#: ./docs/8.x/billing.md:1507
#: ./docs/9.x/billing.md:1683
#: ./docs/10.x/billing.md:1866
#: ./docs/11.x/billing.md:1846
#: ./docs/master/billing.md:1849
#~ msgctxt "P"
#~ msgid "<a name=\"invoices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1508
#: ./docs/9.x/billing.md:1684
#: ./docs/10.x/billing.md:1867
#: ./docs/11.x/billing.md:1847
#: ./docs/master/billing.md:1850
msgctxt "H2"
msgid "Invoices"
msgstr ""

#: ./docs/10.x/billing.md:1509
#: ./docs/11.x/billing.md:1506
#: ./docs/master/billing.md:1509
msgctxt "CODE"
msgid ""
"$user->subscription('default')->cancelNow();\n"
"\n"
"$user->delete();"
msgstr ""

#: ./docs/8.x/billing.md:1510
#: ./docs/9.x/billing.md:1686
#: ./docs/10.x/billing.md:1869
#: ./docs/11.x/billing.md:1849
#: ./docs/master/billing.md:1852
#~ msgctxt "P"
#~ msgid "<a name=\"retrieving-invoices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1511
#: ./docs/9.x/billing.md:1687
#: ./docs/10.x/billing.md:1870
#: ./docs/11.x/billing.md:1850
#: ./docs/master/billing.md:1853
msgctxt "H3"
msgid "Retrieving Invoices"
msgstr ""

#: ./docs/8.x/billing.md:1513
#: ./docs/9.x/billing.md:1689
#: ./docs/10.x/billing.md:1872
#: ./docs/11.x/billing.md:1852
#: ./docs/master/billing.md:1855
msgctxt "P"
msgid "You may easily retrieve an array of a billable model's invoices using the `invoices` method. The `invoices` method returns a collection of `Laravel\\Cashier\\Invoice` instances:"
msgstr ""

#: ./docs/8.x/billing.md:1515
#: ./docs/9.x/billing.md:1691
#: ./docs/10.x/billing.md:1874
#: ./docs/11.x/billing.md:1854
#: ./docs/master/billing.md:1857
msgctxt "CODE"
msgid "$invoices = $user->invoices();"
msgstr ""

#: ./docs/8.x/billing.md:1517
#: ./docs/9.x/billing.md:1693
#: ./docs/10.x/billing.md:1876
#: ./docs/11.x/billing.md:1856
#: ./docs/master/billing.md:1859
msgctxt "P"
msgid "If you would like to include pending invoices in the results, you may use the `invoicesIncludingPending` method:"
msgstr ""

#: ./docs/8.x/billing.md:1519
#: ./docs/9.x/billing.md:1695
#: ./docs/10.x/billing.md:1878
#: ./docs/11.x/billing.md:1858
#: ./docs/master/billing.md:1861
msgctxt "CODE"
msgid "$invoices = $user->invoicesIncludingPending();"
msgstr ""

#: ./docs/8.x/billing.md:1521
#: ./docs/9.x/billing.md:1697
#: ./docs/10.x/billing.md:1880
#: ./docs/11.x/billing.md:1860
#: ./docs/master/billing.md:1863
msgctxt "P"
msgid "You may use the `findInvoice` method to retrieve a specific invoice by its ID:"
msgstr ""

#: ./docs/8.x/billing.md:1523
#: ./docs/9.x/billing.md:1699
#: ./docs/10.x/billing.md:1882
#: ./docs/11.x/billing.md:1862
#: ./docs/master/billing.md:1865
msgctxt "CODE"
msgid "$invoice = $user->findInvoice($invoiceId);"
msgstr ""

#: ./docs/8.x/billing.md:1525
#: ./docs/9.x/billing.md:1701
#: ./docs/10.x/billing.md:1884
#: ./docs/11.x/billing.md:1864
#: ./docs/master/billing.md:1867
#~ msgctxt "P"
#~ msgid "<a name=\"displaying-invoice-information\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1526
#: ./docs/9.x/billing.md:1702
#: ./docs/10.x/billing.md:1885
#: ./docs/11.x/billing.md:1865
#: ./docs/master/billing.md:1868
msgctxt "H4"
msgid "Displaying Invoice Information"
msgstr ""

#: ./docs/8.x/billing.md:1528
#: ./docs/9.x/billing.md:1704
#: ./docs/10.x/billing.md:1887
#: ./docs/11.x/billing.md:1867
#: ./docs/master/billing.md:1870
msgctxt "P"
msgid "When listing the invoices for the customer, you may use the invoice's methods to display the relevant invoice information. For example, you may wish to list every invoice in a table, allowing the user to easily download any of them:"
msgstr ""

#: ./docs/8.x/billing.md:1530
#: ./docs/9.x/billing.md:1706
#: ./docs/10.x/billing.md:1889
#: ./docs/11.x/billing.md:1869
#: ./docs/master/billing.md:1872
msgctxt "CODE"
msgid ""
"<table>\n"
"    @foreach ($invoices as $invoice)\n"
"        <tr>\n"
"            <td>{{ $invoice->date()->toFormattedDateString() }}</td>\n"
"            <td>{{ $invoice->total() }}</td>\n"
"            <td><a href=\"/user/invoice/{{ $invoice->id }}\">Download</a></td>\n"
"        </tr>\n"
"    @endforeach\n"
"</table>"
msgstr ""

#: ./docs/8.x/billing.md:1540
#: ./docs/9.x/billing.md:1716
#: ./docs/10.x/billing.md:1899
#: ./docs/11.x/billing.md:1879
#: ./docs/master/billing.md:1882
#~ msgctxt "P"
#~ msgid "<a name=\"upcoming-invoices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1541
#: ./docs/9.x/billing.md:1717
#: ./docs/10.x/billing.md:1900
#: ./docs/11.x/billing.md:1880
#: ./docs/master/billing.md:1883
msgctxt "H3"
msgid "Upcoming Invoices"
msgstr ""

#: ./docs/8.x/billing.md:1543
#: ./docs/9.x/billing.md:1719
#: ./docs/10.x/billing.md:1902
#: ./docs/11.x/billing.md:1882
#: ./docs/master/billing.md:1885
msgctxt "P"
msgid "To retrieve the upcoming invoice for a customer, you may use the `upcomingInvoice` method:"
msgstr ""

#: ./docs/8.x/billing.md:1545
#: ./docs/9.x/billing.md:1721
#: ./docs/10.x/billing.md:1904
#: ./docs/11.x/billing.md:1884
#: ./docs/master/billing.md:1887
msgctxt "CODE"
msgid "$invoice = $user->upcomingInvoice();"
msgstr ""

#: ./docs/8.x/billing.md:1547
msgctxt "P"
msgid "Similary, if the customer has multiple subscriptions, you can also retrieve the upcoming invoice for a specific subscription:"
msgstr ""

#: ./docs/8.x/billing.md:1549
#: ./docs/9.x/billing.md:1725
#: ./docs/10.x/billing.md:1908
#: ./docs/11.x/billing.md:1888
#: ./docs/master/billing.md:1891
msgctxt "CODE"
msgid "$invoice = $user->subscription('default')->upcomingInvoice();"
msgstr ""

#: ./docs/8.x/billing.md:1551
#: ./docs/9.x/billing.md:1727
#: ./docs/10.x/billing.md:1910
#: ./docs/11.x/billing.md:1890
#: ./docs/master/billing.md:1893
#~ msgctxt "P"
#~ msgid "<a name=\"previewing-subscription-invoices\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1552
msgctxt "H3"
msgid "Previewing Subscription Invoice"
msgstr ""

#: ./docs/8.x/billing.md:1554
#: ./docs/9.x/billing.md:1730
#: ./docs/10.x/billing.md:1913
#: ./docs/11.x/billing.md:1893
#: ./docs/master/billing.md:1896
msgctxt "P"
msgid "Using the `previewInvoice` method, you can preview an invoice before making price changes. This will allow you to determine what your customer's invoice will look like when a given price change is made:"
msgstr ""

#: ./docs/10.x/billing.md:1555
#: ./docs/11.x/billing.md:1552
#: ./docs/master/billing.md:1555
msgctxt "CODE"
msgid ""
"if ($user->onTrial('default')) {\n"
"    // ...\n"
"}\n"
"\n"
"if ($user->subscription('default')->onTrial()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1556
#: ./docs/9.x/billing.md:1732
#: ./docs/10.x/billing.md:1915
#: ./docs/11.x/billing.md:1895
#: ./docs/master/billing.md:1898
msgctxt "CODE"
msgid "$invoice = $user->subscription('default')->previewInvoice('price_yearly');"
msgstr ""

#: ./docs/8.x/billing.md:1558
#: ./docs/9.x/billing.md:1734
#: ./docs/10.x/billing.md:1917
#: ./docs/11.x/billing.md:1897
#: ./docs/master/billing.md:1900
msgctxt "P"
msgid "You may pass an array of prices to the `previewInvoice` method in order to preview invoices with multiple new prices:"
msgstr ""

#: ./docs/8.x/billing.md:1560
#: ./docs/9.x/billing.md:1736
#: ./docs/10.x/billing.md:1919
#: ./docs/11.x/billing.md:1899
#: ./docs/master/billing.md:1902
msgctxt "CODE"
msgid "$invoice = $user->subscription('default')->previewInvoice(['price_yearly', 'price_metered']);"
msgstr ""

#: ./docs/8.x/billing.md:1562
#: ./docs/9.x/billing.md:1738
#: ./docs/10.x/billing.md:1921
#: ./docs/11.x/billing.md:1901
#: ./docs/master/billing.md:1904
#~ msgctxt "P"
#~ msgid "<a name=\"generating-invoice-pdfs\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1563
#: ./docs/9.x/billing.md:1739
#: ./docs/10.x/billing.md:1922
#: ./docs/11.x/billing.md:1902
#: ./docs/master/billing.md:1905
msgctxt "H3"
msgid "Generating Invoice PDFs"
msgstr ""

#: ./docs/8.x/billing.md:1565
#: ./docs/9.x/billing.md:1747
#: ./docs/10.x/billing.md:1930
#: ./docs/11.x/billing.md:1910
#: ./docs/master/billing.md:1913
msgctxt "P"
msgid "From within a route or controller, you may use the `downloadInvoice` method to generate a PDF download of a given invoice. This method will automatically generate the proper HTTP response needed to download the invoice:"
msgstr ""

#: ./docs/8.x/billing.md:1567
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId, [\n"
"        'vendor' => 'Your Company',\n"
"        'product' => 'Your Product',\n"
"    ]);\n"
"});"
msgstr ""

#: ./docs/10.x/billing.md:1569
#: ./docs/11.x/billing.md:1566
#: ./docs/master/billing.md:1569
msgctxt "CODE"
msgid ""
"if ($user->hasExpiredTrial('default')) {\n"
"    // ...\n"
"}\n"
"\n"
"if ($user->subscription('default')->hasExpiredTrial()) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1576
msgctxt "P"
msgid "By default, all data on the invoice is derived from the customer and invoice data stored in Stripe. However, you can customize some of this data by providing an array as the second argument to the `downloadInvoice` method. This array allows you to customize information such as your company and product details:"
msgstr ""

#: ./docs/10.x/billing.md:1578
#: ./docs/11.x/billing.md:1575
#: ./docs/master/billing.md:1578
msgctxt "H4"
msgid "Defining Trial Days in Stripe / Cashier"
msgstr ""

#: ./docs/8.x/billing.md:1578
msgctxt "CODE"
msgid ""
"return $request->user()->downloadInvoice($invoiceId, [\n"
"    'vendor' => 'Your Company',\n"
"    'product' => 'Your Product',\n"
"    'street' => 'Main Str. 1',\n"
"    'location' => '2000 Antwerp, Belgium',\n"
"    'phone' => '+32 499 00 00 00',\n"
"    'email' => 'info@example.com',\n"
"    'url' => 'https://example.com',\n"
"    'vendorVat' => 'BE123456789',\n"
"], 'my-invoice');"
msgstr ""

#: ./docs/8.x/billing.md:1589
#: ./docs/9.x/billing.md:1768
#: ./docs/10.x/billing.md:1951
#: ./docs/11.x/billing.md:1931
#: ./docs/master/billing.md:1934
msgctxt "P"
msgid "The `downloadInvoice` method also allows for a custom filename via its third argument. This filename will automatically be suffixed with `.pdf`:"
msgstr ""

#: ./docs/8.x/billing.md:1591
#: ./docs/9.x/billing.md:1770
#: ./docs/10.x/billing.md:1953
#: ./docs/11.x/billing.md:1933
#: ./docs/master/billing.md:1936
msgctxt "CODE"
msgid "return $request->user()->downloadInvoice($invoiceId, [], 'my-invoice');"
msgstr ""

#: ./docs/8.x/billing.md:1593
#: ./docs/9.x/billing.md:1772
#: ./docs/10.x/billing.md:1955
#: ./docs/11.x/billing.md:1935
#: ./docs/master/billing.md:1938
#~ msgctxt "P"
#~ msgid "<a name=\"custom-invoice-render\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1594
#: ./docs/9.x/billing.md:1773
#: ./docs/10.x/billing.md:1956
#: ./docs/11.x/billing.md:1936
#: ./docs/master/billing.md:1939
msgctxt "H4"
msgid "Custom Invoice Renderer"
msgstr ""

#: ./docs/8.x/billing.md:1596
#: ./docs/9.x/billing.md:1775
#: ./docs/10.x/billing.md:1958
#: ./docs/11.x/billing.md:1938
#: ./docs/master/billing.md:1941
msgctxt "P"
msgid "Cashier also makes it possible to use a custom invoice renderer. By default, Cashier uses the `DompdfInvoiceRenderer` implementation, which utilizes the [dompdf](https://github.com/dompdf/dompdf) PHP library to generate Cashier's invoices. However, you may use any renderer you wish by implementing the `Laravel\\Cashier\\Contracts\\InvoiceRenderer` interface. For example, you may wish to render an invoice PDF using an API call to a third-party PDF rendering service:"
msgstr ""

#: ./docs/8.x/billing.md:1598
#: ./docs/9.x/billing.md:1777
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Http;\n"
"use Laravel\\Cashier\\Contracts\\InvoiceRenderer;\n"
"use Laravel\\Cashier\\Invoice;\n"
"\n"
"class ApiInvoiceRenderer implements InvoiceRenderer\n"
"{\n"
"    /**\n"
"     * Render the given invoice and return the raw PDF bytes.\n"
"     *\n"
"     * @param  \\Laravel\\Cashier\\Invoice. $invoice\n"
"     * @param  array  $data\n"
"     * @param  array  $options\n"
"     * @return string\n"
"     */\n"
"    public function render(Invoice $invoice, array $data = [], array $options = []): string\n"
"    {\n"
"        $html = $invoice->view($data)->render();\n"
"\n"
"        return Http::get('https://example.com/html-to-pdf', ['html' => $html])->get()->body();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1608
#: ./docs/10.x/billing.md:1791
#: ./docs/11.x/billing.md:1771
#: ./docs/master/billing.md:1774
msgctxt "P"
msgid "The `charge` method accepts the payment amount in the lowest denominator of the currency used by your application. For example, if customers are paying in United States Dollars, amounts should be specified in pennies."
msgstr ""

#: ./docs/10.x/billing.md:1609
#: ./docs/11.x/billing.md:1606
#: ./docs/master/billing.md:1609
msgctxt "P"
msgid "To retrieve the user's trial ending date, you may use the `trialEndsAt` method. This method will return a Carbon date instance if a user is on a trial or `null` if they aren't. You may also pass an optional subscription type parameter if you would like to get the trial ending date for a specific subscription other than the default one:"
msgstr ""

#: ./docs/8.x/billing.md:1620
#: ./docs/9.x/billing.md:1799
#: ./docs/10.x/billing.md:1977
#: ./docs/11.x/billing.md:1957
#: ./docs/master/billing.md:1960
msgctxt "P"
msgid "Once you have implemented the invoice renderer contract, you should update the `cashier.invoices.renderer` configuration value in your application's `config/cashier.php` configuration file. This configuration value should be set to the class name of your custom renderer implementation."
msgstr ""

#: ./docs/8.x/billing.md:1622
#: ./docs/9.x/billing.md:1801
#: ./docs/10.x/billing.md:1979
#: ./docs/11.x/billing.md:1959
#: ./docs/master/billing.md:1962
#~ msgctxt "P"
#~ msgid "<a name=\"checkout\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1623
#: ./docs/9.x/billing.md:1802
#: ./docs/10.x/billing.md:1980
#: ./docs/11.x/billing.md:1960
#: ./docs/master/billing.md:1963
msgctxt "H2"
msgid "Checkout"
msgstr ""

#: ./docs/8.x/billing.md:1625
#: ./docs/9.x/billing.md:1804
#: ./docs/10.x/billing.md:1982
#: ./docs/11.x/billing.md:1962
#: ./docs/master/billing.md:1965
msgctxt "P"
msgid "Cashier Stripe also provides support for [Stripe Checkout](https://stripe.com/payments/checkout). Stripe Checkout takes the pain out of implementing custom pages to accept payments by providing a pre-built, hosted payment page."
msgstr ""

#: ./docs/8.x/billing.md:1627
#: ./docs/9.x/billing.md:1806
#: ./docs/10.x/billing.md:1984
#: ./docs/11.x/billing.md:1964
#: ./docs/master/billing.md:1967
msgctxt "P"
msgid "The following documentation contains information on how to get started using Stripe Checkout with Cashier. To learn more about Stripe Checkout, you should also consider reviewing [Stripe's own documentation on Checkout](https://stripe.com/docs/payments/checkout)."
msgstr ""

#: ./docs/9.x/billing.md:1627
#: ./docs/10.x/billing.md:1810
#: ./docs/11.x/billing.md:1790
#: ./docs/master/billing.md:1793
msgctxt "P"
msgid "Similarly to `invoicePrice`, you may use the `tabPrice` method to create a one-time charge for multiple items (up to 250 items per invoice) by adding them to the customer's \"tab\" and then invoicing the customer. For example, we may invoice a customer for five shirts and two mugs:"
msgstr ""

#: ./docs/8.x/billing.md:1629
#: ./docs/9.x/billing.md:1808
#: ./docs/10.x/billing.md:1986
#: ./docs/11.x/billing.md:1966
#: ./docs/master/billing.md:1969
#~ msgctxt "P"
#~ msgid "<a name=\"product-checkouts\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:1629
#: ./docs/10.x/billing.md:1812
#: ./docs/11.x/billing.md:1792
#: ./docs/master/billing.md:1795
msgctxt "CODE"
msgid ""
"$user->tabPrice('price_tshirt', 5);\n"
"$user->tabPrice('price_mug', 2);\n"
"$user->invoice();"
msgstr ""

#: ./docs/8.x/billing.md:1630
#: ./docs/9.x/billing.md:1809
#: ./docs/10.x/billing.md:1987
#: ./docs/11.x/billing.md:1967
#: ./docs/master/billing.md:1970
msgctxt "H3"
msgid "Product Checkouts"
msgstr ""

#: ./docs/8.x/billing.md:1632
#: ./docs/9.x/billing.md:1811
#: ./docs/10.x/billing.md:1989
#: ./docs/11.x/billing.md:1969
#: ./docs/master/billing.md:1972
msgctxt "P"
msgid "You may perform a checkout for an existing product that has been created within your Stripe dashboard using the `checkout` method on a billable model. The `checkout` method will initiate a new Stripe Checkout session. By default, you're required to pass a Stripe Price ID:"
msgstr ""

#: ./docs/8.x/billing.md:1634
#: ./docs/9.x/billing.md:1813
#: ./docs/10.x/billing.md:1991
#: ./docs/11.x/billing.md:1971
#: ./docs/master/billing.md:1974
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout('price_tshirt');\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1637
#: ./docs/10.x/billing.md:1820
#: ./docs/11.x/billing.md:1800
#: ./docs/master/billing.md:1803
msgctxt "P"
msgid "Although the `invoiceFor` method is available for you to use, it is recommended that you use the `invoicePrice` and `tabPrice` methods with pre-defined prices. By doing so, you will have access to better analytics and data within your Stripe dashboard regarding your sales on a per-product basis."
msgstr ""

#: ./docs/8.x/billing.md:1640
#: ./docs/9.x/billing.md:1819
#: ./docs/10.x/billing.md:1997
#: ./docs/11.x/billing.md:1977
#: ./docs/master/billing.md:1980
msgctxt "P"
msgid "If needed, you may also specify a product quantity:"
msgstr ""

#: ./docs/9.x/billing.md:1640
#: ./docs/10.x/billing.md:1823
#: ./docs/11.x/billing.md:1803
#: ./docs/master/billing.md:1806
msgctxt "P"
msgid "The `invoice`, `invoicePrice`, and `invoiceFor` methods will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge."
msgstr ""

#: ./docs/8.x/billing.md:1642
#: ./docs/9.x/billing.md:1821
#: ./docs/10.x/billing.md:1999
#: ./docs/11.x/billing.md:1979
#: ./docs/master/billing.md:1982
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 15]);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1642
#: ./docs/10.x/billing.md:1825
#: ./docs/11.x/billing.md:1805
#: ./docs/master/billing.md:1808
#~ msgctxt "P"
#~ msgid "<a name=\"creating-payment-intents\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:1643
#: ./docs/10.x/billing.md:1826
#: ./docs/11.x/billing.md:1806
#: ./docs/master/billing.md:1809
msgctxt "H3"
msgid "Creating Payment Intents"
msgstr ""

#: ./docs/9.x/billing.md:1645
#: ./docs/10.x/billing.md:1828
#: ./docs/11.x/billing.md:1808
#: ./docs/master/billing.md:1811
msgctxt "P"
msgid "You can create a new Stripe payment intent by invoking the `pay` method on a billable model instance. Calling this method will create a payment intent that is wrapped in a `Laravel\\Cashier\\Payment` instance:"
msgstr ""

#: ./docs/9.x/billing.md:1647
#: ./docs/10.x/billing.md:1830
#: ./docs/11.x/billing.md:1810
#: ./docs/master/billing.md:1813
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/pay', function (Request $request) {\n"
"    $payment = $request->user()->pay(\n"
"        $request->get('amount')\n"
"    );\n"
"\n"
"    return $payment->client_secret;\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1648
#: ./docs/9.x/billing.md:1827
#: ./docs/10.x/billing.md:2005
#: ./docs/11.x/billing.md:1985
#: ./docs/master/billing.md:1988
msgctxt "P"
msgid "When a customer visits this route they will be redirected to Stripe's Checkout page. By default, when a user successfully completes or cancels a purchase they will be redirected to your `home` route location, but you may specify custom callback URLs using the `success_url` and `cancel_url` options:"
msgstr ""

#: ./docs/8.x/billing.md:1650
#: ./docs/9.x/billing.md:1829
#: ./docs/10.x/billing.md:2007
#: ./docs/11.x/billing.md:1987
#: ./docs/master/billing.md:1990
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1657
#: ./docs/10.x/billing.md:1840
#: ./docs/11.x/billing.md:1820
#: ./docs/master/billing.md:1823
msgctxt "P"
msgid "After creating the payment intent, you can return the client secret to your application's frontend so that the user can complete the payment in their browser. To read more about building entire payment flows using Stripe payment intents, please consult the [Stripe documentation](https://stripe.com/docs/payments/accept-a-payment?platform=web)."
msgstr ""

#: ./docs/8.x/billing.md:1659
#: ./docs/9.x/billing.md:1838
#: ./docs/10.x/billing.md:2016
#: ./docs/11.x/billing.md:1996
#: ./docs/master/billing.md:1999
msgctxt "P"
msgid "When defining your `success_url` checkout option, you may instruct Stripe to add the checkout session ID as a query string parameter when invoking your URL. To do so, add the literal string `{CHECKOUT_SESSION_ID}` to your `success_url` query string. Stripe will replace this placeholder with the actual checkout session ID:"
msgstr ""

#: ./docs/9.x/billing.md:1659
#: ./docs/10.x/billing.md:1842
#: ./docs/11.x/billing.md:1822
#: ./docs/master/billing.md:1825
msgctxt "P"
msgid "When using the `pay` method, the default payment methods that are enabled within your Stripe dashboard will be available to the customer. Alternatively, if you only want to allow for some specific payment methods to be used, you may use the `payWith` method:"
msgstr ""

#: ./docs/8.x/billing.md:1661
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"use Stripe\\Checkout\\Session;\n"
"use Stripe\\Customer;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('checkout-success') . '?session_id={CHECKOUT_SESSION_ID}',\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"});\n"
"\n"
"Route::get('/checkout-success', function (Request $request) {\n"
"    $checkoutSession = $request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n"
"\n"
"    return view('checkout.success', ['checkoutSession' => $checkoutSession]);\n"
"})->name('checkout-success');"
msgstr ""

#: ./docs/9.x/billing.md:1661
#: ./docs/10.x/billing.md:1844
#: ./docs/11.x/billing.md:1824
#: ./docs/master/billing.md:1827
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::post('/pay', function (Request $request) {\n"
"    $payment = $request->user()->payWith(\n"
"        $request->get('amount'), ['card', 'bancontact']\n"
"    );\n"
"\n"
"    return $payment->client_secret;\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1672
#: ./docs/10.x/billing.md:1855
#: ./docs/11.x/billing.md:1835
#: ./docs/master/billing.md:1838
msgctxt "P"
msgid "The `pay` and `payWith` methods accept the payment amount in the lowest denominator of the currency used by your application. For example, if customers are paying in United States Dollars, amounts should be specified in pennies."
msgstr ""

#: ./docs/8.x/billing.md:1678
#: ./docs/9.x/billing.md:1857
#: ./docs/10.x/billing.md:2035
#: ./docs/11.x/billing.md:2015
#: ./docs/master/billing.md:2018
#~ msgctxt "P"
#~ msgid "<a name=\"checkout-promotion-codes\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1679
#: ./docs/9.x/billing.md:1858
#: ./docs/10.x/billing.md:2036
#: ./docs/11.x/billing.md:2016
#: ./docs/master/billing.md:2019
msgctxt "H4"
msgid "Promotion Codes"
msgstr ""

#: ./docs/8.x/billing.md:1681
#: ./docs/9.x/billing.md:1860
#: ./docs/10.x/billing.md:2038
#: ./docs/11.x/billing.md:2018
#: ./docs/master/billing.md:2021
msgctxt "P"
msgid "By default, Stripe Checkout does not allow [user redeemable promotion codes](https://stripe.com/docs/billing/subscriptions/discounts/codes). Luckily, there's an easy way to enable these for your Checkout page. To do so, you may invoke the `allowPromotionCodes` method:"
msgstr ""

#: ./docs/8.x/billing.md:1683
#: ./docs/9.x/billing.md:1862
#: ./docs/10.x/billing.md:2040
#: ./docs/11.x/billing.md:2020
#: ./docs/master/billing.md:2023
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->allowPromotionCodes()\n"
"        ->checkout('price_tshirt');\n"
"});"
msgstr ""

#: ./docs/11.x/billing.md:1688
#: ./docs/master/billing.md:1691
msgctxt "P"
msgid "Since Stripe webhooks need to bypass Laravel's [CSRF protection](/docs/{{version}}/csrf), you should ensure that Laravel does not attempt to validate the CSRF token for incoming Stripe webhooks. To accomplish this, you should exclude `stripe/*` from CSRF protection in your application's `bootstrap/app.php` file:"
msgstr ""

#: ./docs/10.x/billing.md:1689
#: ./docs/11.x/billing.md:1686
#: ./docs/master/billing.md:1689
msgctxt "H4"
msgid "Webhooks and CSRF Protection"
msgstr ""

#: ./docs/11.x/billing.md:1690
#: ./docs/master/billing.md:1693
msgctxt "CODE"
msgid ""
"->withMiddleware(function (Middleware $middleware) {\n"
"    $middleware->validateCsrfTokens(except: [\n"
"        'stripe/*',\n"
"    ]);\n"
"})"
msgstr ""

#: ./docs/8.x/billing.md:1691
#: ./docs/9.x/billing.md:1870
#: ./docs/10.x/billing.md:2048
#: ./docs/11.x/billing.md:2028
#: ./docs/master/billing.md:2031
#~ msgctxt "P"
#~ msgid "<a name=\"single-charge-checkouts\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1692
#: ./docs/9.x/billing.md:1871
#: ./docs/10.x/billing.md:2049
#: ./docs/11.x/billing.md:2029
#: ./docs/master/billing.md:2032
msgctxt "H3"
msgid "Single Charge Checkouts"
msgstr ""

#: ./docs/8.x/billing.md:1694
#: ./docs/9.x/billing.md:1873
#: ./docs/10.x/billing.md:2051
#: ./docs/11.x/billing.md:2031
#: ./docs/master/billing.md:2034
msgctxt "P"
msgid "You can also perform a simple charge for an ad-hoc product that has not been created in your Stripe dashboard. To do so you may use the `checkoutCharge` method on a billable model and pass it a chargeable amount, a product name, and an optional quantity. When a customer visits this route they will be redirected to Stripe's Checkout page:"
msgstr ""

#: ./docs/8.x/billing.md:1696
#: ./docs/9.x/billing.md:1875
#: ./docs/10.x/billing.md:2053
#: ./docs/11.x/billing.md:2033
#: ./docs/master/billing.md:2036
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/charge-checkout', function (Request $request) {\n"
"    return $request->user()->checkoutCharge(1200, 'T-Shirt', 5);\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1702
#: ./docs/9.x/billing.md:1882
#: ./docs/10.x/billing.md:2060
#: ./docs/11.x/billing.md:2040
#: ./docs/master/billing.md:2043
msgctxt "P"
msgid "When using the `checkoutCharge` method, Stripe will always create a new product and price in your Stripe dashboard. Therefore, we recommend that you create the products up front in your Stripe dashboard and use the `checkout` method instead."
msgstr ""

#: ./docs/8.x/billing.md:1704
#: ./docs/9.x/billing.md:1884
#: ./docs/10.x/billing.md:2062
#: ./docs/11.x/billing.md:2042
#: ./docs/master/billing.md:2045
#~ msgctxt "P"
#~ msgid "<a name=\"subscription-checkouts\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1705
#: ./docs/9.x/billing.md:1885
#: ./docs/10.x/billing.md:2063
#: ./docs/11.x/billing.md:2043
#: ./docs/master/billing.md:2046
msgctxt "H3"
msgid "Subscription Checkouts"
msgstr ""

#: ./docs/10.x/billing.md:1707
#: ./docs/11.x/billing.md:1706
#: ./docs/master/billing.md:1709
msgctxt "CODE"
msgid ""
"<?php\n"
"\n"
"namespace App\\Listeners;\n"
"\n"
"use Laravel\\Cashier\\Events\\WebhookReceived;\n"
"\n"
"class StripeEventListener\n"
"{\n"
"    /**\n"
"     * Handle received Stripe webhooks.\n"
"     */\n"
"    public function handle(WebhookReceived $event): void\n"
"    {\n"
"        if ($event->payload['type'] === 'invoice.payment_succeeded') {\n"
"            // Handle the incoming event...\n"
"        }\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1707
#: ./docs/9.x/billing.md:1888
#: ./docs/10.x/billing.md:2066
#: ./docs/11.x/billing.md:2046
#: ./docs/master/billing.md:2049
msgctxt "P"
msgid "Using Stripe Checkout for subscriptions requires you to enable the `customer.subscription.created` webhook in your Stripe dashboard. This webhook will create the subscription record in your database and store all of the relevant subscription items."
msgstr ""

#: ./docs/8.x/billing.md:1709
#: ./docs/9.x/billing.md:1890
#: ./docs/10.x/billing.md:2068
#: ./docs/11.x/billing.md:2048
#: ./docs/master/billing.md:2051
msgctxt "P"
msgid "You may also use Stripe Checkout to initiate subscriptions. After defining your subscription with Cashier's subscription builder methods, you may call the `checkout `method. When a customer visits this route they will be redirected to Stripe's Checkout page:"
msgstr ""

#: ./docs/8.x/billing.md:1711
#: ./docs/9.x/billing.md:1892
#: ./docs/10.x/billing.md:2070
#: ./docs/11.x/billing.md:2050
#: ./docs/master/billing.md:2053
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->checkout();\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1719
#: ./docs/9.x/billing.md:1900
#: ./docs/10.x/billing.md:2078
#: ./docs/11.x/billing.md:2058
#: ./docs/master/billing.md:2061
msgctxt "P"
msgid "Just as with product checkouts, you may customize the success and cancellation URLs:"
msgstr ""

#: ./docs/8.x/billing.md:1721
#: ./docs/9.x/billing.md:1902
#: ./docs/10.x/billing.md:2080
#: ./docs/11.x/billing.md:2060
#: ./docs/master/billing.md:2063
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->checkout([\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1723
#: ./docs/10.x/billing.md:1906
#: ./docs/11.x/billing.md:1886
#: ./docs/master/billing.md:1889
msgctxt "P"
msgid "Similarly, if the customer has multiple subscriptions, you can also retrieve the upcoming invoice for a specific subscription:"
msgstr ""

#: ./docs/9.x/billing.md:1728
#: ./docs/10.x/billing.md:1911
#: ./docs/11.x/billing.md:1891
#: ./docs/master/billing.md:1894
msgctxt "H3"
msgid "Previewing Subscription Invoices"
msgstr ""

#: ./docs/8.x/billing.md:1732
#: ./docs/9.x/billing.md:1913
#: ./docs/10.x/billing.md:2091
#: ./docs/11.x/billing.md:2071
#: ./docs/master/billing.md:2074
msgctxt "P"
msgid "Of course, you can also enable promotion codes for subscription checkouts:"
msgstr ""

#: ./docs/8.x/billing.md:1734
#: ./docs/9.x/billing.md:1915
#: ./docs/10.x/billing.md:2093
#: ./docs/11.x/billing.md:2073
#: ./docs/master/billing.md:2076
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/subscription-checkout', function (Request $request) {\n"
"    return $request->user()\n"
"        ->newSubscription('default', 'price_monthly')\n"
"        ->allowPromotionCodes()\n"
"        ->checkout();\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1741
#: ./docs/10.x/billing.md:1924
#: ./docs/11.x/billing.md:1904
#: ./docs/master/billing.md:1907
msgctxt "P"
msgid "Before generating invoice PDFs, you should use Composer to install the Dompdf library, which is the default invoice renderer for Cashier:"
msgstr ""

#: ./docs/8.x/billing.md:1743
#: ./docs/9.x/billing.md:1925
#: ./docs/10.x/billing.md:2103
#: ./docs/11.x/billing.md:2083
#: ./docs/master/billing.md:2086
msgctxt "P"
msgid "Unfortunately Stripe Checkout does not support all subscription billing options when starting subscriptions. Using the `anchorBillingCycleOn` method on the subscription builder, setting proration behavior, or setting payment behavior will not have any effect during Stripe Checkout sessions. Please consult [the Stripe Checkout Session API documentation](https://stripe.com/docs/api/checkout/sessions/create) to review which parameters are available."
msgstr ""

#: ./docs/9.x/billing.md:1743
#: ./docs/10.x/billing.md:1926
#: ./docs/11.x/billing.md:1906
#: ./docs/master/billing.md:1909
msgctxt "CODE: php"
msgid "composer require dompdf/dompdf"
msgstr ""

#: ./docs/8.x/billing.md:1745
#: ./docs/9.x/billing.md:1927
#: ./docs/10.x/billing.md:2105
#: ./docs/11.x/billing.md:2085
#: ./docs/master/billing.md:2088
#~ msgctxt "P"
#~ msgid "<a name=\"stripe-checkout-trial-periods\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1746
#: ./docs/9.x/billing.md:1928
msgctxt "H4"
msgid "Stripe Checkout & Trial Periods"
msgstr ""

#: ./docs/8.x/billing.md:1748
#: ./docs/9.x/billing.md:1930
#: ./docs/10.x/billing.md:2108
#: ./docs/11.x/billing.md:2088
#: ./docs/master/billing.md:2091
msgctxt "P"
msgid "Of course, you can define a trial period when building a subscription that will be completed using Stripe Checkout:"
msgstr ""

#: ./docs/9.x/billing.md:1749
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId);\n"
"});"
msgstr ""

#: ./docs/8.x/billing.md:1750
#: ./docs/9.x/billing.md:1932
#: ./docs/10.x/billing.md:2110
#: ./docs/11.x/billing.md:2090
#: ./docs/master/billing.md:2093
msgctxt "CODE"
msgid ""
"$checkout = Auth::user()->newSubscription('default', 'price_monthly')\n"
"    ->trialDays(3)\n"
"    ->checkout();"
msgstr ""

#: ./docs/8.x/billing.md:1754
#: ./docs/9.x/billing.md:1936
#: ./docs/10.x/billing.md:2114
#: ./docs/11.x/billing.md:2094
#: ./docs/master/billing.md:2097
msgctxt "P"
msgid "However, the trial period must be at least 48 hours, which is the minimum amount of trial time supported by Stripe Checkout."
msgstr ""

#: ./docs/9.x/billing.md:1755
#: ./docs/10.x/billing.md:1938
#: ./docs/11.x/billing.md:1918
#: ./docs/master/billing.md:1921
msgctxt "P"
msgid "By default, all data on the invoice is derived from the customer and invoice data stored in Stripe. The filename is based on your `app.name` config value. However, you can customize some of this data by providing an array as the second argument to the `downloadInvoice` method. This array allows you to customize information such as your company and product details:"
msgstr ""

#: ./docs/8.x/billing.md:1756
#: ./docs/9.x/billing.md:1938
#: ./docs/10.x/billing.md:2116
#: ./docs/11.x/billing.md:2096
#: ./docs/master/billing.md:2099
#~ msgctxt "P"
#~ msgid "<a name=\"stripe-checkout-subscriptions-and-webhooks\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1757
#: ./docs/9.x/billing.md:1939
msgctxt "H4"
msgid "Subscriptions & Webhooks"
msgstr ""

#: ./docs/9.x/billing.md:1757
#: ./docs/10.x/billing.md:1940
#: ./docs/11.x/billing.md:1920
#: ./docs/master/billing.md:1923
msgctxt "CODE"
msgid ""
"return $request->user()->downloadInvoice($invoiceId, [\n"
"    'vendor' => 'Your Company',\n"
"    'product' => 'Your Product',\n"
"    'street' => 'Main Str. 1',\n"
"    'location' => '2000 Antwerp, Belgium',\n"
"    'phone' => '+32 499 00 00 00',\n"
"    'email' => 'info@example.com',\n"
"    'url' => 'https://example.com',\n"
"    'vendorVat' => 'BE123456789',\n"
"]);"
msgstr ""

#: ./docs/8.x/billing.md:1759
#: ./docs/9.x/billing.md:1941
#: ./docs/10.x/billing.md:2119
#: ./docs/11.x/billing.md:2099
#: ./docs/master/billing.md:2102
msgctxt "P"
msgid "Remember, Stripe and Cashier update subscription statuses via webhooks, so there's a possibility a subscription might not yet be active when the customer returns to the application after entering their payment information. To handle this scenario, you may wish to display a message informing the user that their payment or subscription is pending."
msgstr ""

#: ./docs/8.x/billing.md:1761
#: ./docs/9.x/billing.md:1943
#: ./docs/10.x/billing.md:2121
#: ./docs/11.x/billing.md:2101
#: ./docs/master/billing.md:2104
#~ msgctxt "P"
#~ msgid "<a name=\"collecting-tax-ids\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1762
#: ./docs/9.x/billing.md:1944
#: ./docs/10.x/billing.md:2122
#: ./docs/11.x/billing.md:2102
#: ./docs/master/billing.md:2105
msgctxt "H3"
msgid "Collecting Tax IDs"
msgstr ""

#: ./docs/8.x/billing.md:1764
#: ./docs/9.x/billing.md:1946
#: ./docs/10.x/billing.md:2124
#: ./docs/11.x/billing.md:2104
#: ./docs/master/billing.md:2107
msgctxt "P"
msgid "Checkout also supports collecting a customer's Tax ID. To enable this on a checkout session, invoke the `collectTaxIds` method when creating the session:"
msgstr ""

#: ./docs/8.x/billing.md:1766
#: ./docs/9.x/billing.md:1948
#: ./docs/10.x/billing.md:2126
#: ./docs/11.x/billing.md:2106
#: ./docs/master/billing.md:2109
msgctxt "CODE"
msgid "$checkout = $user->collectTaxIds()->checkout('price_tshirt');"
msgstr ""

#: ./docs/8.x/billing.md:1768
#: ./docs/9.x/billing.md:1950
#: ./docs/10.x/billing.md:2128
#: ./docs/11.x/billing.md:2108
#: ./docs/master/billing.md:2111
msgctxt "P"
msgid "When this method is invoked, a new checkbox will be available to the customer that allows them to indicate if they're purchasing as a company. If so, they will have the opportunity to provide their Tax ID number."
msgstr ""

#: ./docs/8.x/billing.md:1770
#: ./docs/9.x/billing.md:1953
#: ./docs/10.x/billing.md:2131
#: ./docs/11.x/billing.md:2111
#: ./docs/master/billing.md:2114
msgctxt "P"
msgid "If you have already configured [automatic tax collection](#tax-configuration) in your application's service provider then this feature will be enabled automatically and there is no need to invoke the `collectTaxIds` method."
msgstr ""

#: ./docs/8.x/billing.md:1772
#: ./docs/9.x/billing.md:1986
#: ./docs/10.x/billing.md:2164
#: ./docs/11.x/billing.md:2144
#: ./docs/master/billing.md:2147
#~ msgctxt "P"
#~ msgid "<a name=\"handling-failed-payments\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1773
#: ./docs/9.x/billing.md:1987
#: ./docs/10.x/billing.md:2165
#: ./docs/11.x/billing.md:2145
#: ./docs/master/billing.md:2148
msgctxt "H2"
msgid "Handling Failed Payments"
msgstr ""

#: ./docs/8.x/billing.md:1775
#: ./docs/9.x/billing.md:1989
#: ./docs/10.x/billing.md:2167
#: ./docs/11.x/billing.md:2147
#: ./docs/master/billing.md:2150
msgctxt "P"
msgid "Sometimes, payments for subscriptions or single charges can fail. When this happens, Cashier will throw an `Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you that this happened. After catching this exception, you have two options on how to proceed."
msgstr ""

#: ./docs/8.x/billing.md:1777
#: ./docs/9.x/billing.md:1991
#: ./docs/10.x/billing.md:2169
#: ./docs/11.x/billing.md:2149
#: ./docs/master/billing.md:2152
msgctxt "P"
msgid "First, you could redirect your customer to the dedicated payment confirmation page which is included with Cashier. This page already has an associated named route that is registered via Cashier's service provider. So, you may catch the `IncompletePayment` exception and redirect the user to the payment confirmation page:"
msgstr ""

#: ./docs/8.x/billing.md:1779
#: ./docs/9.x/billing.md:1993
#: ./docs/10.x/billing.md:2171
#: ./docs/11.x/billing.md:2151
#: ./docs/master/billing.md:2154
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n"
"\n"
"try {\n"
"    $subscription = $user->newSubscription('default', 'price_monthly')\n"
"                            ->create($paymentMethod);\n"
"} catch (IncompletePayment $exception) {\n"
"    return redirect()->route(\n"
"        'cashier.payment',\n"
"        [$exception->payment->id, 'redirect' => route('home')]\n"
"    );\n"
"}"
msgstr ""

#: ./docs/10.x/billing.md:1784
#: ./docs/11.x/billing.md:1764
#: ./docs/master/billing.md:1767
msgctxt "CODE"
msgid ""
"try {\n"
"    $payment = $user->charge(100, $paymentMethod);\n"
"} catch (Exception $e) {\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1791
#: ./docs/9.x/billing.md:2005
#: ./docs/10.x/billing.md:2183
#: ./docs/11.x/billing.md:2163
#: ./docs/master/billing.md:2166
msgctxt "P"
msgid "On the payment confirmation page, the customer will be prompted to enter their credit card information again and perform any additional actions required by Stripe, such as \"3D Secure\" confirmation. After confirming their payment, the user will be redirected to the URL provided by the `redirect` parameter specified above. Upon redirection, `message` (string) and `success` (integer) query string variables will be added to the URL. The payment page currently supports the following payment method types:"
msgstr ""

#: ./docs/8.x/billing.md:1795
#: ./docs/9.x/billing.md:2009
#: ./docs/10.x/billing.md:2187
#: ./docs/11.x/billing.md:2167
#: ./docs/master/billing.md:2170
msgctxt "P"
msgid "Credit Cards"
msgstr ""

#: ./docs/10.x/billing.md:1796
#: ./docs/11.x/billing.md:1776
#: ./docs/master/billing.md:1779
msgctxt "P"
msgid "Sometimes you may need to make a one-time charge and offer a PDF invoice to your customer. The `invoicePrice` method lets you do just that. For example, let's invoice a customer for five new shirts:"
msgstr ""

#: ./docs/8.x/billing.md:1796
#: ./docs/9.x/billing.md:2010
#: ./docs/10.x/billing.md:2188
#: ./docs/11.x/billing.md:2168
#: ./docs/master/billing.md:2171
msgctxt "P"
msgid "Alipay"
msgstr ""

#: ./docs/8.x/billing.md:1797
#: ./docs/9.x/billing.md:2011
#: ./docs/10.x/billing.md:2189
#: ./docs/11.x/billing.md:2169
#: ./docs/master/billing.md:2172
msgctxt "P"
msgid "Bancontact"
msgstr ""

#: ./docs/8.x/billing.md:1798
#: ./docs/9.x/billing.md:2012
#: ./docs/10.x/billing.md:2190
#: ./docs/11.x/billing.md:2170
#: ./docs/master/billing.md:2173
msgctxt "P"
msgid "BECS Direct Debit"
msgstr ""

#: ./docs/8.x/billing.md:1799
#: ./docs/9.x/billing.md:2013
#: ./docs/10.x/billing.md:2191
#: ./docs/11.x/billing.md:2171
#: ./docs/master/billing.md:2174
msgctxt "P"
msgid "EPS"
msgstr ""

#: ./docs/8.x/billing.md:1800
#: ./docs/9.x/billing.md:2014
#: ./docs/10.x/billing.md:2192
#: ./docs/11.x/billing.md:2172
#: ./docs/master/billing.md:2175
msgctxt "P"
msgid "Giropay"
msgstr ""

#: ./docs/8.x/billing.md:1801
#: ./docs/9.x/billing.md:2015
#: ./docs/10.x/billing.md:2193
#: ./docs/11.x/billing.md:2173
#: ./docs/master/billing.md:2176
msgctxt "P"
msgid "iDEAL"
msgstr ""

#: ./docs/8.x/billing.md:1802
#: ./docs/9.x/billing.md:2016
#: ./docs/10.x/billing.md:2194
#: ./docs/11.x/billing.md:2174
#: ./docs/master/billing.md:2177
msgctxt "P"
msgid "SEPA Direct Debit"
msgstr ""

#: ./docs/8.x/billing.md:1806
#: ./docs/9.x/billing.md:2020
#: ./docs/10.x/billing.md:2198
#: ./docs/11.x/billing.md:2178
#: ./docs/master/billing.md:2181
msgctxt "P"
msgid "Alternatively, you could allow Stripe to handle the payment confirmation for you. In this case, instead of redirecting to the payment confirmation page, you may [setup Stripe's automatic billing emails](https://dashboard.stripe.com/account/billing/automatic) in your Stripe dashboard. However, if an `IncompletePayment` exception is caught, you should still inform the user they will receive an email with further payment confirmation instructions."
msgstr ""

#: ./docs/8.x/billing.md:1808
#: ./docs/9.x/billing.md:2022
#: ./docs/10.x/billing.md:2200
#: ./docs/11.x/billing.md:2180
#: ./docs/master/billing.md:2183
msgctxt "P"
msgid "Payment exceptions may be thrown for the following methods: `charge`, `invoiceFor`, and `invoice` on models using the `Billable` trait. When interacting with subscriptions, the `create` method on the `SubscriptionBuilder`, and the `incrementAndInvoice` and `swapAndInvoice` methods on the `Subscription` and `SubscriptionItem` models may throw incomplete payment exceptions."
msgstr ""

#: ./docs/8.x/billing.md:1810
#: ./docs/9.x/billing.md:2024
#: ./docs/10.x/billing.md:2202
#: ./docs/11.x/billing.md:2182
#: ./docs/master/billing.md:2185
msgctxt "P"
msgid "Determining if an existing subscription has an incomplete payment may be accomplished using the `hasIncompletePayment` method on the billable model or a subscription instance:"
msgstr ""

#: ./docs/8.x/billing.md:1820
#: ./docs/9.x/billing.md:2034
#: ./docs/10.x/billing.md:2212
#: ./docs/11.x/billing.md:2192
#: ./docs/master/billing.md:2195
msgctxt "P"
msgid "You can derive the specific status of an incomplete payment by inspecting the `payment` property on the exception instance:"
msgstr ""

#: ./docs/8.x/billing.md:1822
#: ./docs/9.x/billing.md:2036
#: ./docs/10.x/billing.md:2214
#: ./docs/11.x/billing.md:2194
#: ./docs/master/billing.md:2197
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Exceptions\\IncompletePayment;\n"
"\n"
"try {\n"
"    $user->charge(1000, 'pm_card_threeDSecure2Required');\n"
"} catch (IncompletePayment $exception) {\n"
"    // Get the payment intent status...\n"
"    $exception->payment->status;\n"
"\n"
"    // Check specific conditions...\n"
"    if ($exception->payment->requiresPaymentMethod()) {\n"
"        // ...\n"
"    } elseif ($exception->payment->requiresConfirmation()) {\n"
"        // ...\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/billing.md:1838
#: ./docs/9.x/billing.md:2052
#: ./docs/10.x/billing.md:2241
#: ./docs/11.x/billing.md:2221
#: ./docs/master/billing.md:2224
#~ msgctxt "P"
#~ msgid "<a name=\"strong-customer-authentication\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1839
#: ./docs/9.x/billing.md:2053
#: ./docs/10.x/billing.md:2242
#: ./docs/11.x/billing.md:2222
#: ./docs/master/billing.md:2225
msgctxt "H2"
msgid "Strong Customer Authentication"
msgstr ""

#: ./docs/9.x/billing.md:1840
#: ./docs/10.x/billing.md:2018
#: ./docs/11.x/billing.md:1998
#: ./docs/master/billing.md:2001
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"use Stripe\\Checkout\\Session;\n"
"use Stripe\\Customer;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return $request->user()->checkout(['price_tshirt' => 1], [\n"
"        'success_url' => route('checkout-success').'?session_id={CHECKOUT_SESSION_ID}',\n"
"        'cancel_url' => route('checkout-cancel'),\n"
"    ]);\n"
"});\n"
"\n"
"Route::get('/checkout-success', function (Request $request) {\n"
"    $checkoutSession = $request->user()->stripe()->checkout->sessions->retrieve($request->get('session_id'));\n"
"\n"
"    return view('checkout.success', ['checkoutSession' => $checkoutSession]);\n"
"})->name('checkout-success');"
msgstr ""

#: ./docs/8.x/billing.md:1841
#: ./docs/9.x/billing.md:2055
#: ./docs/10.x/billing.md:2244
#: ./docs/11.x/billing.md:2224
#: ./docs/master/billing.md:2227
msgctxt "P"
msgid "If your business or one of your customers is based in Europe you will need to abide by the EU's Strong Customer Authentication (SCA) regulations. These regulations were imposed in September 2019 by the European Union to prevent payment fraud. Luckily, Stripe and Cashier are prepared for building SCA compliant applications."
msgstr ""

#: ./docs/8.x/billing.md:1843
#: ./docs/9.x/billing.md:2058
#: ./docs/10.x/billing.md:2247
#: ./docs/11.x/billing.md:2227
#: ./docs/master/billing.md:2230
msgctxt "P"
msgid "Before getting started, review [Stripe's guide on PSD2 and SCA](https://stripe.com/guides/strong-customer-authentication) as well as their [documentation on the new SCA APIs](https://stripe.com/docs/strong-customer-authentication)."
msgstr ""

#: ./docs/8.x/billing.md:1845
#: ./docs/9.x/billing.md:2060
#: ./docs/10.x/billing.md:2249
#: ./docs/11.x/billing.md:2229
#: ./docs/master/billing.md:2232
#~ msgctxt "P"
#~ msgid "<a name=\"payments-requiring-additional-confirmation\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1846
#: ./docs/9.x/billing.md:2061
#: ./docs/10.x/billing.md:2250
#: ./docs/11.x/billing.md:2230
#: ./docs/master/billing.md:2233
msgctxt "H3"
msgid "Payments Requiring Additional Confirmation"
msgstr ""

#: ./docs/8.x/billing.md:1848
#: ./docs/9.x/billing.md:2063
#: ./docs/10.x/billing.md:2252
#: ./docs/11.x/billing.md:2232
#: ./docs/master/billing.md:2235
msgctxt "P"
msgid "SCA regulations often require extra verification in order to confirm and process a payment. When this happens, Cashier will throw a `Laravel\\Cashier\\Exceptions\\IncompletePayment` exception that informs you that extra verification is needed. More information on how to handle these exceptions be found can be found in the documentation on [handling failed payments](#handling-failed-payments)."
msgstr ""

#: ./docs/8.x/billing.md:1850
#: ./docs/9.x/billing.md:2065
#: ./docs/10.x/billing.md:2254
#: ./docs/11.x/billing.md:2234
#: ./docs/master/billing.md:2237
msgctxt "P"
msgid "Payment confirmation screens presented by Stripe or Cashier may be tailored to a specific bank or card issuer's payment flow and can include additional card confirmation, a temporary small charge, separate device authentication, or other forms of verification."
msgstr ""

#: ./docs/8.x/billing.md:1852
#: ./docs/9.x/billing.md:2067
#: ./docs/10.x/billing.md:2256
#: ./docs/11.x/billing.md:2236
#: ./docs/master/billing.md:2239
#~ msgctxt "P"
#~ msgid "<a name=\"incomplete-and-past-due-state\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1853
#: ./docs/9.x/billing.md:2068
#: ./docs/10.x/billing.md:2257
#: ./docs/11.x/billing.md:2237
#: ./docs/master/billing.md:2240
msgctxt "H4"
msgid "Incomplete and Past Due State"
msgstr ""

#: ./docs/8.x/billing.md:1855
#: ./docs/9.x/billing.md:2070
#: ./docs/10.x/billing.md:2259
#: ./docs/11.x/billing.md:2239
#: ./docs/master/billing.md:2242
msgctxt "P"
msgid "When a payment needs additional confirmation, the subscription will remain in an `incomplete` or `past_due` state as indicated by its `stripe_status` database column. Cashier will automatically activate the customer's subscription as soon as payment confirmation is complete and your application is notified by Stripe via webhook of its completion."
msgstr ""

#: ./docs/8.x/billing.md:1857
#: ./docs/9.x/billing.md:2072
#: ./docs/10.x/billing.md:2261
#: ./docs/11.x/billing.md:2241
#: ./docs/master/billing.md:2244
msgctxt "P"
msgid "For more information on `incomplete` and `past_due` states, please refer to [our additional documentation on these states](#incomplete-and-past-due-status)."
msgstr ""

#: ./docs/8.x/billing.md:1859
#: ./docs/9.x/billing.md:2074
#: ./docs/10.x/billing.md:2263
#: ./docs/11.x/billing.md:2243
#: ./docs/master/billing.md:2246
#~ msgctxt "P"
#~ msgid "<a name=\"off-session-payment-notifications\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1860
#: ./docs/9.x/billing.md:2075
#: ./docs/10.x/billing.md:2264
#: ./docs/11.x/billing.md:2244
#: ./docs/master/billing.md:2247
msgctxt "H3"
msgid "Off-Session Payment Notifications"
msgstr ""

#: ./docs/8.x/billing.md:1862
#: ./docs/9.x/billing.md:2077
#: ./docs/10.x/billing.md:2266
#: ./docs/11.x/billing.md:2246
#: ./docs/master/billing.md:2249
msgctxt "P"
msgid "Since SCA regulations require customers to occasionally verify their payment details even while their subscription is active, Cashier can send a notification to the customer when off-session payment confirmation is required. For example, this may occur when a subscription is renewing. Cashier's payment notification can be enabled by setting the `CASHIER_PAYMENT_NOTIFICATION` environment variable to a notification class. By default, this notification is disabled. Of course, Cashier includes a notification class you may use for this purpose, but you are free to provide your own notification class if desired:"
msgstr ""

#: ./docs/8.x/billing.md:1864
#: ./docs/9.x/billing.md:2079
#: ./docs/10.x/billing.md:2268
#: ./docs/11.x/billing.md:2248
#: ./docs/master/billing.md:2251
msgctxt "CODE"
msgid "CASHIER_PAYMENT_NOTIFICATION=Laravel\\Cashier\\Notifications\\ConfirmPayment"
msgstr ""

#: ./docs/8.x/billing.md:1866
#: ./docs/9.x/billing.md:2083
#: ./docs/10.x/billing.md:2272
#: ./docs/11.x/billing.md:2252
#: ./docs/master/billing.md:2255
msgctxt "P"
msgid "To ensure that off-session payment confirmation notifications are delivered, verify that [Stripe webhooks are configured](#handling-stripe-webhooks) for your application and the `invoice.payment_action_required` webhook is enabled in your Stripe dashboard. In addition, your `Billable` model should also use Laravel's `Illuminate\\Notifications\\Notifiable` trait."
msgstr ""

#: ./docs/8.x/billing.md:1868
#: ./docs/9.x/billing.md:2086
#: ./docs/10.x/billing.md:2275
#: ./docs/11.x/billing.md:2255
#: ./docs/master/billing.md:2258
msgctxt "P"
msgid "Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or \"off-session\". But, a customer will simply see a \"Payment Successful\" message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge."
msgstr ""

#: ./docs/8.x/billing.md:1870
#: ./docs/9.x/billing.md:2088
#: ./docs/10.x/billing.md:2277
#: ./docs/11.x/billing.md:2257
#: ./docs/master/billing.md:2260
#~ msgctxt "P"
#~ msgid "<a name=\"stripe-sdk\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1871
#: ./docs/9.x/billing.md:2089
#: ./docs/10.x/billing.md:2278
#: ./docs/11.x/billing.md:2258
#: ./docs/master/billing.md:2261
msgctxt "H2"
msgid "Stripe SDK"
msgstr ""

#: ./docs/8.x/billing.md:1873
#: ./docs/9.x/billing.md:2091
#: ./docs/10.x/billing.md:2280
#: ./docs/11.x/billing.md:2260
#: ./docs/master/billing.md:2263
msgctxt "P"
msgid "Many of Cashier's objects are wrappers around Stripe SDK objects. If you would like to interact with the Stripe objects directly, you may conveniently retrieve them using the `asStripe` method:"
msgstr ""

#: ./docs/8.x/billing.md:1875
#: ./docs/9.x/billing.md:2093
#: ./docs/10.x/billing.md:2282
#: ./docs/11.x/billing.md:2262
#: ./docs/master/billing.md:2265
msgctxt "CODE"
msgid ""
"$stripeSubscription = $subscription->asStripeSubscription();\n"
"\n"
"$stripeSubscription->application_fee_percent = 5;\n"
"\n"
"$stripeSubscription->save();"
msgstr ""

#: ./docs/8.x/billing.md:1881
#: ./docs/9.x/billing.md:2099
#: ./docs/10.x/billing.md:2288
#: ./docs/11.x/billing.md:2268
#: ./docs/master/billing.md:2271
msgctxt "P"
msgid "You may also use the `updateStripeSubscription` method to update a Stripe subscription directly:"
msgstr ""

#: ./docs/8.x/billing.md:1883
#: ./docs/9.x/billing.md:2101
#: ./docs/10.x/billing.md:2290
#: ./docs/11.x/billing.md:2270
#: ./docs/master/billing.md:2273
msgctxt "CODE"
msgid "$subscription->updateStripeSubscription(['application_fee_percent' => 5]);"
msgstr ""

#: ./docs/8.x/billing.md:1885
#: ./docs/9.x/billing.md:2103
#: ./docs/10.x/billing.md:2292
#: ./docs/11.x/billing.md:2272
#: ./docs/master/billing.md:2275
msgctxt "P"
msgid "You may invoke the `stripe` method on the `Cashier` class if you would like to use the `Stripe\\StripeClient` client directly. For example, you could use this method to access the `StripeClient` instance and retrieve a list of prices from your Stripe account:"
msgstr ""

#: ./docs/8.x/billing.md:1887
#: ./docs/9.x/billing.md:2105
#: ./docs/10.x/billing.md:2294
#: ./docs/11.x/billing.md:2274
#: ./docs/master/billing.md:2277
msgctxt "CODE"
msgid ""
"use Laravel\\Cashier\\Cashier;\n"
"\n"
"$prices = Cashier::stripe()->prices->all();"
msgstr ""

#: ./docs/8.x/billing.md:1891
#: ./docs/9.x/billing.md:2109
#: ./docs/10.x/billing.md:2298
#: ./docs/11.x/billing.md:2278
#: ./docs/master/billing.md:2281
#~ msgctxt "P"
#~ msgid "<a name=\"testing\"></a>"
#~ msgstr ""

#: ./docs/8.x/billing.md:1892
#: ./docs/9.x/billing.md:2110
#: ./docs/10.x/billing.md:2299
#: ./docs/11.x/billing.md:2279
#: ./docs/master/billing.md:2282
msgctxt "H2"
msgid "Testing"
msgstr ""

#: ./docs/8.x/billing.md:1894
#: ./docs/9.x/billing.md:2112
#: ./docs/10.x/billing.md:2301
msgctxt "P"
msgid "When testing an application that uses Cashier, you may mock the actual HTTP requests to the Stripe API; however, this requires you to partially re-implement Cashier's own behavior. Therefore, we recommend allowing your tests to hit the actual Stripe API. While this is slower, it provides more confidence that your application is working as expected and any slow tests may be placed within their own PHPUnit testing group."
msgstr ""

#: ./docs/8.x/billing.md:1896
#: ./docs/9.x/billing.md:2114
#: ./docs/10.x/billing.md:2303
#: ./docs/11.x/billing.md:2283
#: ./docs/master/billing.md:2286
msgctxt "P"
msgid "When testing, remember that Cashier itself already has a great test suite, so you should only focus on testing the subscription and payment flow of your own application and not every underlying Cashier behavior."
msgstr ""

#: ./docs/8.x/billing.md:1898
#: ./docs/9.x/billing.md:2116
#: ./docs/10.x/billing.md:2305
#: ./docs/11.x/billing.md:2285
#: ./docs/master/billing.md:2288
msgctxt "P"
msgid "To get started, add the **testing** version of your Stripe secret to your `phpunit.xml` file:"
msgstr ""

#: ./docs/8.x/billing.md:1900
#: ./docs/9.x/billing.md:2118
#: ./docs/10.x/billing.md:2307
#: ./docs/11.x/billing.md:2287
#: ./docs/master/billing.md:2290
msgctxt "CODE"
msgid "<env name=\"STRIPE_SECRET\" value=\"sk_test_<your-key>\"/>"
msgstr ""

#: ./docs/8.x/billing.md:1902
#: ./docs/9.x/billing.md:2120
#: ./docs/10.x/billing.md:2309
#: ./docs/11.x/billing.md:2289
#: ./docs/master/billing.md:2292
msgctxt "P"
msgid "Now, whenever you interact with Cashier while testing, it will send actual API requests to your Stripe testing environment. For convenience, you should pre-fill your Stripe testing account with subscriptions / prices that you may use during testing."
msgstr ""

#: ./docs/8.x/billing.md:1904
#: ./docs/9.x/billing.md:2123
#: ./docs/10.x/billing.md:2312
#: ./docs/11.x/billing.md:2292
#: ./docs/master/billing.md:2295
msgctxt "P"
msgid "In order to test a variety of billing scenarios, such as credit card denials and failures, you may use the vast range of [testing card numbers and tokens](https://stripe.com/docs/testing) provided by Stripe."
msgstr ""

#: ./docs/10.x/billing.md:1932
#: ./docs/11.x/billing.md:1912
#: ./docs/master/billing.md:1915
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"\n"
"Route::get('/user/invoice/{invoice}', function (Request $request, string $invoiceId) {\n"
"    return $request->user()->downloadInvoice($invoiceId);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1955
#: ./docs/10.x/billing.md:2133
#: ./docs/11.x/billing.md:2113
#: ./docs/master/billing.md:2116
#~ msgctxt "P"
#~ msgid "<a name=\"guest-checkouts\"></a>"
#~ msgstr ""

#: ./docs/9.x/billing.md:1956
#: ./docs/10.x/billing.md:2134
#: ./docs/11.x/billing.md:2114
#: ./docs/master/billing.md:2117
msgctxt "H3"
msgid "Guest Checkouts"
msgstr ""

#: ./docs/9.x/billing.md:1958
#: ./docs/10.x/billing.md:2136
#: ./docs/11.x/billing.md:2116
#: ./docs/master/billing.md:2119
msgctxt "P"
msgid "Using the `Checkout::guest` method, you may initiate checkout sessions for guests of your application that do not have an \"account\":"
msgstr ""

#: ./docs/10.x/billing.md:1960
#: ./docs/11.x/billing.md:1940
#: ./docs/master/billing.md:1943
msgctxt "CODE"
msgid ""
"use Illuminate\\Support\\Facades\\Http;\n"
"use Laravel\\Cashier\\Contracts\\InvoiceRenderer;\n"
"use Laravel\\Cashier\\Invoice;\n"
"\n"
"class ApiInvoiceRenderer implements InvoiceRenderer\n"
"{\n"
"    /**\n"
"     * Render the given invoice and return the raw PDF bytes.\n"
"     */\n"
"    public function render(Invoice $invoice, array $data = [], array $options = []): string\n"
"    {\n"
"        $html = $invoice->view($data)->render();\n"
"\n"
"        return Http::get('https://example.com/html-to-pdf', ['html' => $html])->get()->body();\n"
"    }\n"
"}"
msgstr ""

#: ./docs/9.x/billing.md:1960
#: ./docs/10.x/billing.md:2138
#: ./docs/11.x/billing.md:2118
#: ./docs/master/billing.md:2121
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"use Laravel\\Cashier\\Checkout;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return Checkout::guest()->create('price_tshirt', [\n"
"        'success_url' => route('your-success-route'),\n"
"        'cancel_url' => route('your-cancel-route'),\n"
"    ]);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1970
#: ./docs/10.x/billing.md:2148
#: ./docs/11.x/billing.md:2128
#: ./docs/master/billing.md:2131
msgctxt "P"
msgid "Similarly to when creating checkout sessions for existing users, you may utilize additional methods available on the `Laravel\\Cashier\\CheckoutBuilder` instance to customize the guest checkout session:"
msgstr ""

#: ./docs/9.x/billing.md:1972
#: ./docs/10.x/billing.md:2150
#: ./docs/11.x/billing.md:2130
#: ./docs/master/billing.md:2133
msgctxt "CODE"
msgid ""
"use Illuminate\\Http\\Request;\n"
"use Laravel\\Cashier\\Checkout;\n"
"\n"
"Route::get('/product-checkout', function (Request $request) {\n"
"    return Checkout::guest()\n"
"        ->withPromotionCode('promo-code')\n"
"        ->create('price_tshirt', [\n"
"            'success_url' => route('your-success-route'),\n"
"            'cancel_url' => route('your-cancel-route'),\n"
"        ]);\n"
"});"
msgstr ""

#: ./docs/9.x/billing.md:1984
#: ./docs/10.x/billing.md:2162
#: ./docs/11.x/billing.md:2142
#: ./docs/master/billing.md:2145
msgctxt "P"
msgid "After a guest checkout has been completed, Stripe can dispatch a `checkout.session.completed` webhook event, so make sure to [configure your Stripe webhook](https://dashboard.stripe.com/webhooks) to actually send this event to your application. Once the webhook has been enabled within the Stripe dashboard, you may [handle the webhook with Cashier](#handling-stripe-webhooks). The object contained in the webhook payload will be a [`checkout` object](https://stripe.com/docs/api/checkout/sessions/object) that you may inspect in order to fulfill your customer's order."
msgstr ""

#: ./docs/10.x/billing.md:2106
#: ./docs/11.x/billing.md:2086
#: ./docs/master/billing.md:2089
msgctxt "H4"
msgid "Stripe Checkout and Trial Periods"
msgstr ""

#: ./docs/10.x/billing.md:2117
#: ./docs/11.x/billing.md:2097
#: ./docs/master/billing.md:2100
msgctxt "H4"
msgid "Subscriptions and Webhooks"
msgstr ""

#: ./docs/10.x/billing.md:2230
#: ./docs/11.x/billing.md:2210
#: ./docs/master/billing.md:2213
#~ msgctxt "P"
#~ msgid "<a name=\"confirming-payments\"></a>"
#~ msgstr ""

#: ./docs/10.x/billing.md:2231
#: ./docs/11.x/billing.md:2211
#: ./docs/master/billing.md:2214
msgctxt "H3"
msgid "Confirming Payments"
msgstr ""

#: ./docs/10.x/billing.md:2233
#: ./docs/11.x/billing.md:2213
#: ./docs/master/billing.md:2216
msgctxt "P"
msgid "Some payment methods require additional data in order to confirm payments. For example, SEPA payment methods require additional \"mandate\" data during the payment process. You may provide this data to Cashier using the `withPaymentConfirmationOptions` method:"
msgstr ""

#: ./docs/10.x/billing.md:2235
#: ./docs/11.x/billing.md:2215
#: ./docs/master/billing.md:2218
msgctxt "CODE"
msgid ""
"$subscription->withPaymentConfirmationOptions([\n"
"    'mandate_data' => '...',\n"
"])->swap('price_xxx');"
msgstr ""

#: ./docs/10.x/billing.md:2239
#: ./docs/11.x/billing.md:2219
#: ./docs/master/billing.md:2222
msgctxt "P"
msgid "You may consult the [Stripe API documentation](https://stripe.com/docs/api/payment_intents/confirm) to review all of the options accepted when confirming payments."
msgstr ""

#: ./docs/11.x/billing.md:2281
#: ./docs/master/billing.md:2284
msgctxt "P"
msgid "When testing an application that uses Cashier, you may mock the actual HTTP requests to the Stripe API; however, this requires you to partially re-implement Cashier's own behavior. Therefore, we recommend allowing your tests to hit the actual Stripe API. While this is slower, it provides more confidence that your application is working as expected and any slow tests may be placed within their own Pest / PHPUnit testing group."
msgstr ""
