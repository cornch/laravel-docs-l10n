#
msgid ""
msgstr ""

#: docs/8.x/queries.md:block 1 (header)
msgid "Database: Query Builder"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Running Database Queries](#running-database-queries)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Chunking Results](#chunking-results)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Streaming Results Lazily](#streaming-results-lazily)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Aggregates](#aggregates)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Select Statements](#select-statements)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Raw Expressions](#raw-expressions)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Joins](#joins)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Unions](#unions)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Basic Where Clauses](#basic-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Where Clauses](#where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Or Where Clauses](#or-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[JSON Where Clauses](#json-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Additional Where Clauses](#additional-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Logical Grouping](#logical-grouping)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Advanced Where Clauses](#advanced-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Where Exists Clauses](#where-exists-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Subquery Where Clauses](#subquery-where-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Ordering, Grouping, Limit & Offset](#ordering-grouping-limit-and-offset)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Ordering](#ordering)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Grouping](#grouping)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Limit & Offset](#limit-and-offset)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Conditional Clauses](#conditional-clauses)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Insert Statements](#insert-statements)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Upserts](#upserts)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Update Statements](#update-statements)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Updating JSON Columns](#updating-json-columns)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Increment & Decrement](#increment-and-decrement)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Delete Statements](#delete-statements)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Pessimistic Locking](#pessimistic-locking)"
msgstr ""

#: docs/8.x/queries.md:block 2 (unordered list)
msgid "[Debugging](#debugging)"
msgstr ""

#: docs/8.x/queries.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/queries.md:block 5 (paragraph)
msgid "Laravel's database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application and works perfectly with all of Laravel's supported database systems."
msgstr ""

#: docs/8.x/queries.md:block 6 (paragraph)
msgid "The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean or sanitize strings passed to the query builder as query bindings."
msgstr ""

#: docs/8.x/queries.md:block 7 (quote)
msgid "{note} PDO does not support binding column names. Therefore, you should never allow user input to dictate the column names referenced by your queries, including \"order by\" columns."
msgstr ""

#: docs/8.x/queries.md:block 9 (header)
msgid "Running Database Queries"
msgstr ""

#: docs/8.x/queries.md:block 11 (header)
msgid "Retrieving All Rows From A Table"
msgstr ""

#: docs/8.x/queries.md:block 12 (paragraph)
msgid "You may use the `table` method provided by the `DB` facade to begin a query. The `table` method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the `get` method:"
msgstr ""

#: docs/8.x/queries.md:block 13 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show a list of all of the application's users.\n"
"     *\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function index()\n"
"    {\n"
"        $users = DB::table('users')->get();\n"
"\n"
"        return view('user.index', ['users' => $users]);\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/queries.md:block 14 (paragraph)
msgid "The `get` method returns an `Illuminate\\Support\\Collection` instance containing the results of the query where each result is an instance of the PHP `stdClass` object. You may access each column's value by accessing the column as a property of the object:"
msgstr ""

#: docs/8.x/queries.md:block 15 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')->get();\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->name;\n"
"}\n"
msgstr ""

#: docs/8.x/queries.md:block 16 (quote)
msgid "{tip} Laravel collections provide a variety of extremely powerful methods for mapping and reducing data. For more information on Laravel collections, check out the [collection documentation](/docs/{{version}}/collections)."
msgstr ""

#: docs/8.x/queries.md:block 18 (header)
msgid "Retrieving A Single Row / Column From A Table"
msgstr ""

#: docs/8.x/queries.md:block 19 (paragraph)
msgid "If you just need to retrieve a single row from a database table, you may use the `DB` facade's `first` method. This method will return a single `stdClass` object:"
msgstr ""

#: docs/8.x/queries.md:block 20 (code)
msgid ""
"$user = DB::table('users')->where('name', 'John')->first();\n"
"\n"
"return $user->email;\n"
msgstr ""

#: docs/8.x/queries.md:block 21 (paragraph)
msgid "If you don't need an entire row, you may extract a single value from a record using the `value` method. This method will return the value of the column directly:"
msgstr ""

#: docs/8.x/queries.md:block 22 (code)
msgid "$email = DB::table('users')->where('name', 'John')->value('email');\n"
msgstr ""

#: docs/8.x/queries.md:block 23 (paragraph)
msgid "To retrieve a single row by its `id` column value, use the `find` method:"
msgstr ""

#: docs/8.x/queries.md:block 24 (code)
msgid "$user = DB::table('users')->find(3);\n"
msgstr ""

#: docs/8.x/queries.md:block 26 (header)
msgid "Retrieving A List Of Column Values"
msgstr ""

#: docs/8.x/queries.md:block 27 (paragraph)
msgid "If you would like to retrieve an `Illuminate\\Support\\Collection` instance containing the values of a single column, you may use the `pluck` method. In this example, we'll retrieve a collection of user titles:"
msgstr ""

#: docs/8.x/queries.md:block 28 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$titles = DB::table('users')->pluck('title');\n"
"\n"
"foreach ($titles as $title) {\n"
"    echo $title;\n"
"}\n"
msgstr ""

#: docs/8.x/queries.md:block 29 (paragraph)
msgid "You may specify the column that the resulting collection should use as its keys by providing a second argument to the `pluck` method:"
msgstr ""

#: docs/8.x/queries.md:block 30 (code)
msgid ""
"$titles = DB::table('users')->pluck('title', 'name');\n"
"\n"
"foreach ($titles as $name => $title) {\n"
"    echo $title;\n"
"}\n"
msgstr ""

#: docs/8.x/queries.md:block 32 (header)
msgid "Chunking Results"
msgstr ""

#: docs/8.x/queries.md:block 33 (paragraph)
msgid "If you need to work with thousands of database records, consider using the `chunk` method provided by the `DB` facade. This method retrieves a small chunk of results at a time and feeds each chunk into a closure for processing. For example, let's retrieve the entire `users` table in chunks of 100 records at a time:"
msgstr ""

#: docs/8.x/queries.md:block 34 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"    foreach ($users as $user) {\n"
"        //\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/queries.md:block 35 (paragraph)
msgid "You may stop further chunks from being processed by returning `false` from the closure:"
msgstr ""

#: docs/8.x/queries.md:block 36 (code)
msgid ""
"DB::table('users')->orderBy('id')->chunk(100, function ($users) {\n"
"    // Process the records...\n"
"\n"
"    return false;\n"
"});\n"
msgstr ""

#: docs/8.x/queries.md:block 37 (paragraph)
msgid "If you are updating database records while chunking results, your chunk results could change in unexpected ways. If you plan to update the retrieved records while chunking, it is always best to use the `chunkById` method instead. This method will automatically paginate the results based on the record's primary key:"
msgstr ""

#: docs/8.x/queries.md:block 38 (code)
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->chunkById(100, function ($users) {\n"
"        foreach ($users as $user) {\n"
"            DB::table('users')\n"
"                ->where('id', $user->id)\n"
"                ->update(['active' => true]);\n"
"        }\n"
"    });\n"
msgstr ""

#: docs/8.x/queries.md:block 39 (quote)
msgid "{note} When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results."
msgstr ""

#: docs/8.x/queries.md:block 41 (header)
msgid "Streaming Results Lazily"
msgstr ""

#: docs/8.x/queries.md:block 42 (paragraph)
msgid "The `lazy` method works similarly to [the `chunk` method](#chunking-results) in the sense that it executes the query in chunks. However, instead of passing each chunk into a callback, the `lazy()` method returns a [`LazyCollection`](/docs/{{version}}/collections#lazy-collections), which lets you interact with the results as a single stream:"
msgstr ""

#: docs/8.x/queries.md:block 43 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"DB::table('users')->orderBy('id')->lazy()->each(function ($user) {\n"
"    //\n"
"});\n"
msgstr ""

#: docs/8.x/queries.md:block 44 (paragraph)
msgid "Once again, if you plan to update the retrieved records while iterating over them, it is best to use the `lazyById` or `lazyByIdDesc` methods instead. These methods will automatically paginate the results based on the record's primary key:"
msgstr ""

#: docs/8.x/queries.md:block 45 (code)
msgid ""
"DB::table('users')->where('active', false)\n"
"    ->lazyById()->each(function ($user) {\n"
"        DB::table('users')\n"
"            ->where('id', $user->id)\n"
"            ->update(['active' => true]);\n"
"    });\n"
msgstr ""

#: docs/8.x/queries.md:block 46 (quote)
msgid "{note} When updating or deleting records while iterating over them, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the results."
msgstr ""

#: docs/8.x/queries.md:block 48 (header)
msgid "Aggregates"
msgstr ""

#: docs/8.x/queries.md:block 49 (paragraph)
msgid "The query builder also provides a variety of methods for retrieving aggregate values like `count`, `max`, `min`, `avg`, and `sum`. You may call any of these methods after constructing your query:"
msgstr ""

#: docs/8.x/queries.md:block 50 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')->count();\n"
"\n"
"$price = DB::table('orders')->max('price');\n"
msgstr ""

#: docs/8.x/queries.md:block 51 (paragraph)
msgid "Of course, you may combine these methods with other clauses to fine-tune how your aggregate value is calculated:"
msgstr ""

#: docs/8.x/queries.md:block 52 (code)
msgid ""
"$price = DB::table('orders')\n"
"                ->where('finalized', 1)\n"
"                ->avg('price');\n"
msgstr ""

#: docs/8.x/queries.md:block 54 (header)
msgid "Determining If Records Exist"
msgstr ""

#: docs/8.x/queries.md:block 55 (paragraph)
msgid "Instead of using the `count` method to determine if any records exist that match your query's constraints, you may use the `exists` and `doesntExist` methods:"
msgstr ""

#: docs/8.x/queries.md:block 56 (code)
msgid ""
"if (DB::table('orders')->where('finalized', 1)->exists()) {\n"
"    // ...\n"
"}\n"
"\n"
"if (DB::table('orders')->where('finalized', 1)->doesntExist()) {\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/queries.md:block 58 (header)
msgid "Select Statements"
msgstr ""

#: docs/8.x/queries.md:block 60 (header)
msgid "Specifying A Select Clause"
msgstr ""

#: docs/8.x/queries.md:block 61 (paragraph)
msgid "You may not always want to select all columns from a database table. Using the `select` method, you can specify a custom \"select\" clause for the query:"
msgstr ""

#: docs/8.x/queries.md:block 62 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')\n"
"            ->select('name', 'email as user_email')\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 63 (paragraph)
msgid "The `distinct` method allows you to force the query to return distinct results:"
msgstr ""

#: docs/8.x/queries.md:block 64 (code)
msgid "$users = DB::table('users')->distinct()->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 65 (paragraph)
msgid "If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the `addSelect` method:"
msgstr ""

#: docs/8.x/queries.md:block 66 (code)
msgid ""
"$query = DB::table('users')->select('name');\n"
"\n"
"$users = $query->addSelect('age')->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 68 (header)
msgid "Raw Expressions"
msgstr ""

#: docs/8.x/queries.md:block 69 (paragraph)
msgid "Sometimes you may need to insert an arbitrary string into a query. To create a raw string expression, you may use the `raw` method provided by the `DB` facade:"
msgstr ""

#: docs/8.x/queries.md:block 70 (code)
msgid ""
"$users = DB::table('users')\n"
"             ->select(DB::raw('count(*) as user_count, status'))\n"
"             ->where('status', '<>', 1)\n"
"             ->groupBy('status')\n"
"             ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 71 (quote)
msgid "{note} Raw statements will be injected into the query as strings, so you should be extremely careful to avoid creating SQL injection vulnerabilities."
msgstr ""

#: docs/8.x/queries.md:block 73 (header)
msgid "Raw Methods"
msgstr ""

#: docs/8.x/queries.md:block 74 (paragraph)
msgid "Instead of using the `DB::raw` method, you may also use the following methods to insert a raw expression into various parts of your query. **Remember, Laravel can not guarantee that any query using raw expressions is protected against SQL injection vulnerabilities.**"
msgstr ""

#: docs/8.x/queries.md:block 76 (header)
msgid "`selectRaw`"
msgstr ""

#: docs/8.x/queries.md:block 77 (paragraph)
msgid "The `selectRaw` method can be used in place of `addSelect(DB::raw(...))`. This method accepts an optional array of bindings as its second argument:"
msgstr ""

#: docs/8.x/queries.md:block 78 (code)
msgid ""
"$orders = DB::table('orders')\n"
"                ->selectRaw('price * ? as price_with_tax', [1.0825])\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 80 (header)
msgid "`whereRaw / orWhereRaw`"
msgstr ""

#: docs/8.x/queries.md:block 81 (paragraph)
msgid "The `whereRaw` and `orWhereRaw` methods can be used to inject a raw \"where\" clause into your query. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#: docs/8.x/queries.md:block 82 (code)
msgid ""
"$orders = DB::table('orders')\n"
"                ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 84 (header)
msgid "`havingRaw / orHavingRaw`"
msgstr ""

#: docs/8.x/queries.md:block 85 (paragraph)
msgid "The `havingRaw` and `orHavingRaw` methods may be used to provide a raw string as the value of the \"having\" clause. These methods accept an optional array of bindings as their second argument:"
msgstr ""

#: docs/8.x/queries.md:block 86 (code)
msgid ""
"$orders = DB::table('orders')\n"
"                ->select('department', DB::raw('SUM(price) as total_sales'))\n"
"                ->groupBy('department')\n"
"                ->havingRaw('SUM(price) > ?', [2500])\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 88 (header)
msgid "`orderByRaw`"
msgstr ""

#: docs/8.x/queries.md:block 89 (paragraph)
msgid "The `orderByRaw` method may be used to provide a raw string as the value of the \"order by\" clause:"
msgstr ""

#: docs/8.x/queries.md:block 90 (code)
msgid ""
"$orders = DB::table('orders')\n"
"                ->orderByRaw('updated_at - created_at DESC')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 92 (header)
msgid "`groupByRaw`"
msgstr ""

#: docs/8.x/queries.md:block 93 (paragraph)
msgid "The `groupByRaw` method may be used to provide a raw string as the value of the `group by` clause:"
msgstr ""

#: docs/8.x/queries.md:block 94 (code)
msgid ""
"$orders = DB::table('orders')\n"
"                ->select('city', 'state')\n"
"                ->groupByRaw('city, state')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 96 (header)
msgid "Joins"
msgstr ""

#: docs/8.x/queries.md:block 98 (header)
msgid "Inner Join Clause"
msgstr ""

#: docs/8.x/queries.md:block 99 (paragraph)
msgid "The query builder may also be used to add join clauses to your queries. To perform a basic \"inner join\", you may use the `join` method on a query builder instance. The first argument passed to the `join` method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You may even join multiple tables in a single query:"
msgstr ""

#: docs/8.x/queries.md:block 100 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$users = DB::table('users')\n"
"            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n"
"            ->join('orders', 'users.id', '=', 'orders.user_id')\n"
"            ->select('users.*', 'contacts.phone', 'orders.price')\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 102 (header)
msgid "Left Join / Right Join Clause"
msgstr ""

#: docs/8.x/queries.md:block 103 (paragraph)
msgid "If you would like to perform a \"left join\" or \"right join\" instead of an \"inner join\", use the `leftJoin` or `rightJoin` methods. These methods have the same signature as the `join` method:"
msgstr ""

#: docs/8.x/queries.md:block 104 (code)
msgid ""
"$users = DB::table('users')\n"
"            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"            ->get();\n"
"\n"
"$users = DB::table('users')\n"
"            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 106 (header)
msgid "Cross Join Clause"
msgstr ""

#: docs/8.x/queries.md:block 107 (paragraph)
msgid "You may use the `crossJoin` method to perform a \"cross join\". Cross joins generate a cartesian product between the first table and the joined table:"
msgstr ""

#: docs/8.x/queries.md:block 108 (code)
msgid ""
"$sizes = DB::table('sizes')\n"
"            ->crossJoin('colors')\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 110 (header)
msgid "Advanced Join Clauses"
msgstr ""

#: docs/8.x/queries.md:block 111 (paragraph)
msgid "You may also specify more advanced join clauses. To get started, pass a closure as the second argument to the `join` method. The closure will receive a `Illuminate\\Database\\Query\\JoinClause` instance which allows you to specify constraints on the \"join\" clause:"
msgstr ""

#: docs/8.x/queries.md:block 112 (code)
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function ($join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n"
"        })\n"
"        ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 113 (paragraph)
msgid "If you would like to use a \"where\" clause on your joins, you may use the `where` and `orWhere` methods provided by the `JoinClause` instance. Instead of comparing two columns, these methods will compare the column against a value:"
msgstr ""

#: docs/8.x/queries.md:block 114 (code)
msgid ""
"DB::table('users')\n"
"        ->join('contacts', function ($join) {\n"
"            $join->on('users.id', '=', 'contacts.user_id')\n"
"                 ->where('contacts.user_id', '>', 5);\n"
"        })\n"
"        ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 116 (header)
msgid "Subquery Joins"
msgstr ""

#: docs/8.x/queries.md:block 117 (paragraph)
msgid "You may use the `joinSub`, `leftJoinSub`, and `rightJoinSub` methods to join a query to a subquery. Each of these methods receives three arguments: the subquery, its table alias, and a closure that defines the related columns. In this example, we will retrieve a collection of users where each user record also contains the `created_at` timestamp of the user's most recently published blog post:"
msgstr ""

#: docs/8.x/queries.md:block 118 (code)
msgid ""
"$latestPosts = DB::table('posts')\n"
"                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))\n"
"                   ->where('is_published', true)\n"
"                   ->groupBy('user_id');\n"
"\n"
"$users = DB::table('users')\n"
"        ->joinSub($latestPosts, 'latest_posts', function ($join) {\n"
"            $join->on('users.id', '=', 'latest_posts.user_id');\n"
"        })->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 120 (header)
msgid "Unions"
msgstr ""

#: docs/8.x/queries.md:block 121 (paragraph)
msgid "The query builder also provides a convenient method to \"union\" two or more queries together. For example, you may create an initial query and use the `union` method to union it with more queries:"
msgstr ""

#: docs/8.x/queries.md:block 122 (code)
msgid ""
"use Illuminate\\Support\\Facades\\DB;\n"
"\n"
"$first = DB::table('users')\n"
"            ->whereNull('first_name');\n"
"\n"
"$users = DB::table('users')\n"
"            ->whereNull('last_name')\n"
"            ->union($first)\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 123 (paragraph)
msgid "In addition to the `union` method, the query builder provides a `unionAll` method. Queries that are combined using the `unionAll` method will not have their duplicate results removed. The `unionAll` method has the same method signature as the `union` method."
msgstr ""

#: docs/8.x/queries.md:block 125 (header)
msgid "Basic Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 127 (header)
msgid "Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 128 (paragraph)
msgid "You may use the query builder's `where` method to add \"where\" clauses to the query. The most basic call to the `where` method requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. The third argument is the value to compare against the column's value."
msgstr ""

#: docs/8.x/queries.md:block 129 (paragraph)
msgid "For example, the following query retrieves users where the value of the `votes` column is equal to `100` and the value of the `age` column is greater than `35`:"
msgstr ""

#: docs/8.x/queries.md:block 130 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->where('votes', '=', 100)\n"
"                ->where('age', '>', 35)\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 131 (paragraph)
msgid "For convenience, if you want to verify that a column is `=` to a given value, you may pass the value as the second argument to the `where` method. Laravel will assume you would like to use the `=` operator:"
msgstr ""

#: docs/8.x/queries.md:block 132 (code)
msgid "$users = DB::table('users')->where('votes', 100)->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 133 (paragraph)
msgid "As previously mentioned, you may use any operator that is supported by your database system:"
msgstr ""

#: docs/8.x/queries.md:block 134 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->where('votes', '>=', 100)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->where('votes', '<>', 100)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->where('name', 'like', 'T%')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 135 (paragraph)
msgid "You may also pass an array of conditions to the `where` function. Each element of the array should be an array containing the three arguments typically passed to the `where` method:"
msgstr ""

#: docs/8.x/queries.md:block 136 (code)
msgid ""
"$users = DB::table('users')->where([\n"
"    ['status', '=', '1'],\n"
"    ['subscribed', '<>', '1'],\n"
"])->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 139 (header)
msgid "Or Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 140 (paragraph)
msgid "When chaining together calls to the query builder's `where` method, the \"where\" clauses will be joined together using the `and` operator. However, you may use the `orWhere` method to join a clause to the query using the `or` operator. The `orWhere` method accepts the same arguments as the `where` method:"
msgstr ""

#: docs/8.x/queries.md:block 141 (code)
msgid ""
"$users = DB::table('users')\n"
"                    ->where('votes', '>', 100)\n"
"                    ->orWhere('name', 'John')\n"
"                    ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 142 (paragraph)
msgid "If you need to group an \"or\" condition within parentheses, you may pass a closure as the first argument to the `orWhere` method:"
msgstr ""

#: docs/8.x/queries.md:block 143 (code)
msgid ""
"$users = DB::table('users')\n"
"            ->where('votes', '>', 100)\n"
"            ->orWhere(function($query) {\n"
"                $query->where('name', 'Abigail')\n"
"                      ->where('votes', '>', 50);\n"
"            })\n"
"            ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 144 (paragraph)
msgid "The example above will produce the following SQL:"
msgstr ""

#: docs/8.x/queries.md:block 145 (code)
msgid "select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n"
msgstr ""

#: docs/8.x/queries.md:block 146 (quote)
msgid "{note} You should always group `orWhere` calls in order to avoid unexpected behavior when global scopes are applied."
msgstr ""

#: docs/8.x/queries.md:block 148 (header)
msgid "JSON Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 149 (paragraph)
msgid "Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7+, PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the [JSON1 extension](https://www.sqlite.org/json1.html)). To query a JSON column, use the `->` operator:"
msgstr ""

#: docs/8.x/queries.md:block 150 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->where('preferences->dining->meal', 'salad')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 151 (paragraph)
msgid "You may use `whereJsonContains` to query JSON arrays. This feature is not supported by the SQLite database:"
msgstr ""

#: docs/8.x/queries.md:block 152 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonContains('options->languages', 'en')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 153 (paragraph)
msgid "If your application uses the MySQL or PostgreSQL databases, you may pass an array of values to the `whereJsonContains` method:"
msgstr ""

#: docs/8.x/queries.md:block 154 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonContains('options->languages', ['en', 'de'])\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 155 (paragraph)
msgid "You may use `whereJsonLength` method to query JSON arrays by their length:"
msgstr ""

#: docs/8.x/queries.md:block 156 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereJsonLength('options->languages', 0)\n"
"                ->get();\n"
"\n"
"$users = DB::table('users')\n"
"                ->whereJsonLength('options->languages', '>', 1)\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 158 (header)
msgid "Additional Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 159 (paragraph)
msgid "**whereBetween / orWhereBetween**"
msgstr ""

#: docs/8.x/queries.md:block 160 (paragraph)
msgid "The `whereBetween` method verifies that a column's value is between two values:"
msgstr ""

#: docs/8.x/queries.md:block 161 (code)
msgid ""
"$users = DB::table('users')\n"
"           ->whereBetween('votes', [1, 100])\n"
"           ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 162 (paragraph)
msgid "**whereNotBetween / orWhereNotBetween**"
msgstr ""

#: docs/8.x/queries.md:block 163 (paragraph)
msgid "The `whereNotBetween` method verifies that a column's value lies outside of two values:"
msgstr ""

#: docs/8.x/queries.md:block 164 (code)
msgid ""
"$users = DB::table('users')\n"
"                    ->whereNotBetween('votes', [1, 100])\n"
"                    ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 165 (paragraph)
msgid "**whereIn / whereNotIn / orWhereIn / orWhereNotIn**"
msgstr ""

#: docs/8.x/queries.md:block 166 (paragraph)
msgid "The `whereIn` method verifies that a given column's value is contained within the given array:"
msgstr ""

#: docs/8.x/queries.md:block 167 (code)
msgid ""
"$users = DB::table('users')\n"
"                    ->whereIn('id', [1, 2, 3])\n"
"                    ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 168 (paragraph)
msgid "The `whereNotIn` method verifies that the given column's value is not contained in the given array:"
msgstr ""

#: docs/8.x/queries.md:block 169 (code)
msgid ""
"$users = DB::table('users')\n"
"                    ->whereNotIn('id', [1, 2, 3])\n"
"                    ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 170 (quote)
msgid "{note} If you are adding a large array of integer bindings to your query, the `whereIntegerInRaw` or `whereIntegerNotInRaw` methods may be used to greatly reduce your memory usage."
msgstr ""

#: docs/8.x/queries.md:block 171 (paragraph)
msgid "**whereNull / whereNotNull / orWhereNull / orWhereNotNull**"
msgstr ""

#: docs/8.x/queries.md:block 172 (paragraph)
msgid "The `whereNull` method verifies that the value of the given column is `NULL`:"
msgstr ""

#: docs/8.x/queries.md:block 173 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereNull('updated_at')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 174 (paragraph)
msgid "The `whereNotNull` method verifies that the column's value is not `NULL`:"
msgstr ""

#: docs/8.x/queries.md:block 175 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereNotNull('updated_at')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 176 (paragraph)
msgid "**whereDate / whereMonth / whereDay / whereYear / whereTime**"
msgstr ""

#: docs/8.x/queries.md:block 177 (paragraph)
msgid "The `whereDate` method may be used to compare a column's value against a date:"
msgstr ""

#: docs/8.x/queries.md:block 178 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereDate('created_at', '2016-12-31')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 179 (paragraph)
msgid "The `whereMonth` method may be used to compare a column's value against a specific month:"
msgstr ""

#: docs/8.x/queries.md:block 180 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereMonth('created_at', '12')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 181 (paragraph)
msgid "The `whereDay` method may be used to compare a column's value against a specific day of the month:"
msgstr ""

#: docs/8.x/queries.md:block 182 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereDay('created_at', '31')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 183 (paragraph)
msgid "The `whereYear` method may be used to compare a column's value against a specific year:"
msgstr ""

#: docs/8.x/queries.md:block 184 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereYear('created_at', '2016')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 185 (paragraph)
msgid "The `whereTime` method may be used to compare a column's value against a specific time:"
msgstr ""

#: docs/8.x/queries.md:block 186 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereTime('created_at', '=', '11:20:45')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 187 (paragraph)
msgid "**whereColumn / orWhereColumn**"
msgstr ""

#: docs/8.x/queries.md:block 188 (paragraph)
msgid "The `whereColumn` method may be used to verify that two columns are equal:"
msgstr ""

#: docs/8.x/queries.md:block 189 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn('first_name', 'last_name')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 190 (paragraph)
msgid "You may also pass a comparison operator to the `whereColumn` method:"
msgstr ""

#: docs/8.x/queries.md:block 191 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn('updated_at', '>', 'created_at')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 192 (paragraph)
msgid "You may also pass an array of column comparisons to the `whereColumn` method. These conditions will be joined using the `and` operator:"
msgstr ""

#: docs/8.x/queries.md:block 193 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->whereColumn([\n"
"                    ['first_name', '=', 'last_name'],\n"
"                    ['updated_at', '>', 'created_at'],\n"
"                ])->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 195 (header)
msgid "Logical Grouping"
msgstr ""

#: docs/8.x/queries.md:block 196 (paragraph)
msgid "Sometimes you may need to group several \"where\" clauses within parentheses in order to achieve your query's desired logical grouping. In fact, you should generally always group calls to the `orWhere` method in parentheses in order to avoid unexpected query behavior. To accomplish this, you may pass a closure to the `where` method:"
msgstr ""

#: docs/8.x/queries.md:block 197 (code)
msgid ""
"$users = DB::table('users')\n"
"           ->where('name', '=', 'John')\n"
"           ->where(function ($query) {\n"
"               $query->where('votes', '>', 100)\n"
"                     ->orWhere('title', '=', 'Admin');\n"
"           })\n"
"           ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 198 (paragraph)
msgid "As you can see, passing a closure into the `where` method instructs the query builder to begin a constraint group. The closure will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:"
msgstr ""

#: docs/8.x/queries.md:block 199 (code)
msgid "select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n"
msgstr ""

#: docs/8.x/queries.md:block 202 (header)
msgid "Advanced Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 204 (header)
msgid "Where Exists Clauses"
msgstr ""

#: docs/8.x/queries.md:block 205 (paragraph)
msgid "The `whereExists` method allows you to write \"where exists\" SQL clauses. The `whereExists` method accepts a closure which will receive a query builder instance, allowing you to define the query that should be placed inside of the \"exists\" clause:"
msgstr ""

#: docs/8.x/queries.md:block 206 (code)
msgid ""
"$users = DB::table('users')\n"
"           ->whereExists(function ($query) {\n"
"               $query->select(DB::raw(1))\n"
"                     ->from('orders')\n"
"                     ->whereColumn('orders.user_id', 'users.id');\n"
"           })\n"
"           ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 207 (paragraph)
msgid "The query above will produce the following SQL:"
msgstr ""

#: docs/8.x/queries.md:block 208 (code)
msgid ""
"select * from users\n"
"where exists (\n"
"    select 1\n"
"    from orders\n"
"    where orders.user_id = users.id\n"
")\n"
msgstr ""

#: docs/8.x/queries.md:block 210 (header)
msgid "Subquery Where Clauses"
msgstr ""

#: docs/8.x/queries.md:block 211 (paragraph)
msgid "Sometimes you may need to construct a \"where\" clause that compares the results of a subquery to a given value. You may accomplish this by passing a closure and a value to the `where` method. For example, the following query will retrieve all users who have a recent \"membership\" of a given type;"
msgstr ""

#: docs/8.x/queries.md:block 212 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where(function ($query) {\n"
"    $query->select('type')\n"
"        ->from('membership')\n"
"        ->whereColumn('membership.user_id', 'users.id')\n"
"        ->orderByDesc('membership.start_date')\n"
"        ->limit(1);\n"
"}, 'Pro')->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 213 (paragraph)
msgid "Or, you may need to construct a \"where\" clause that compares a column to the results of a subquery. You may accomplish this by passing a column, operator, and closure to the `where` method. For example, the following query will retrieve all income records where the amount is less than average;"
msgstr ""

#: docs/8.x/queries.md:block 214 (code)
msgid ""
"use App\\Models\\Income;\n"
"\n"
"$incomes = Income::where('amount', '<', function ($query) {\n"
"    $query->selectRaw('avg(i.amount)')->from('incomes as i');\n"
"})->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 216 (header)
msgid "Ordering, Grouping, Limit & Offset"
msgstr ""

#: docs/8.x/queries.md:block 218 (header)
msgid "Ordering"
msgstr ""

#: docs/8.x/queries.md:block 220 (header)
msgid "The `orderBy` Method"
msgstr ""

#: docs/8.x/queries.md:block 221 (paragraph)
msgid "The `orderBy` method allows you to sort the results of the query by a given column. The first argument accepted by the `orderBy` method should be the column you wish to sort by, while the second argument determines the direction of the sort and may be either `asc` or `desc`:"
msgstr ""

#: docs/8.x/queries.md:block 222 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->orderBy('name', 'desc')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 223 (paragraph)
msgid "To sort by multiple columns, you may simply invoke `orderBy` as many times as necessary:"
msgstr ""

#: docs/8.x/queries.md:block 224 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->orderBy('name', 'desc')\n"
"                ->orderBy('email', 'asc')\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 226 (header)
msgid "The `latest` & `oldest` Methods"
msgstr ""

#: docs/8.x/queries.md:block 227 (paragraph)
msgid "The `latest` and `oldest` methods allow you to easily order results by date. By default, the result will be ordered by the table's `created_at` column. Or, you may pass the column name that you wish to sort by:"
msgstr ""

#: docs/8.x/queries.md:block 228 (code)
msgid ""
"$user = DB::table('users')\n"
"                ->latest()\n"
"                ->first();\n"
msgstr ""

#: docs/8.x/queries.md:block 230 (header)
msgid "Random Ordering"
msgstr ""

#: docs/8.x/queries.md:block 231 (paragraph)
msgid "The `inRandomOrder` method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:"
msgstr ""

#: docs/8.x/queries.md:block 232 (code)
msgid ""
"$randomUser = DB::table('users')\n"
"                ->inRandomOrder()\n"
"                ->first();\n"
msgstr ""

#: docs/8.x/queries.md:block 234 (header)
msgid "Removing Existing Orderings"
msgstr ""

#: docs/8.x/queries.md:block 235 (paragraph)
msgid "The `reorder` method removes all of the \"order by\" clauses that have previously been applied to the query:"
msgstr ""

#: docs/8.x/queries.md:block 236 (code)
msgid ""
"$query = DB::table('users')->orderBy('name');\n"
"\n"
"$unorderedUsers = $query->reorder()->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 237 (paragraph)
msgid "You may pass a column and direction when calling the `reorder` method in order to remove all existing \"order by\" clauses and apply an entirely new order to the query:"
msgstr ""

#: docs/8.x/queries.md:block 238 (code)
msgid ""
"$query = DB::table('users')->orderBy('name');\n"
"\n"
"$usersOrderedByEmail = $query->reorder('email', 'desc')->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 240 (header)
msgid "Grouping"
msgstr ""

#: docs/8.x/queries.md:block 242 (header)
msgid "The `groupBy` & `having` Methods"
msgstr ""

#: docs/8.x/queries.md:block 243 (paragraph)
msgid "As you might expect, the `groupBy` and `having` methods may be used to group the query results. The `having` method's signature is similar to that of the `where` method:"
msgstr ""

#: docs/8.x/queries.md:block 244 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->groupBy('account_id')\n"
"                ->having('account_id', '>', 100)\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 245 (paragraph)
msgid "You can use the `havingBetween` method to filter the results within a given range:"
msgstr ""

#: docs/8.x/queries.md:block 246 (code)
msgid ""
"$report = DB::table('orders')\n"
"                ->selectRaw('count(id) as number_of_orders, customer_id')\n"
"                ->groupBy('customer_id')\n"
"                ->havingBetween('number_of_orders', [5, 15])\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 247 (paragraph)
msgid "You may pass multiple arguments to the `groupBy` method to group by multiple columns:"
msgstr ""

#: docs/8.x/queries.md:block 248 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->groupBy('first_name', 'status')\n"
"                ->having('account_id', '>', 100)\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 249 (paragraph)
msgid "To build more advanced `having` statements, see the [`havingRaw`](#raw-methods) method."
msgstr ""

#: docs/8.x/queries.md:block 251 (header)
msgid "Limit & Offset"
msgstr ""

#: docs/8.x/queries.md:block 253 (header)
msgid "The `skip` & `take` Methods"
msgstr ""

#: docs/8.x/queries.md:block 254 (paragraph)
msgid "You may use the `skip` and `take` methods to limit the number of results returned from the query or to skip a given number of results in the query:"
msgstr ""

#: docs/8.x/queries.md:block 255 (code)
msgid "$users = DB::table('users')->skip(10)->take(5)->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 256 (paragraph)
msgid "Alternatively, you may use the `limit` and `offset` methods. These methods are functionally equivalent to the `take` and `skip` methods, respectively:"
msgstr ""

#: docs/8.x/queries.md:block 257 (code)
msgid ""
"$users = DB::table('users')\n"
"                ->offset(10)\n"
"                ->limit(5)\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 259 (header)
msgid "Conditional Clauses"
msgstr ""

#: docs/8.x/queries.md:block 260 (paragraph)
msgid "Sometimes you may want certain query clauses to apply to a query based on another condition. For instance, you may only want to apply a `where` statement if a given input value is present on the incoming HTTP request. You may accomplish this using the `when` method:"
msgstr ""

#: docs/8.x/queries.md:block 261 (code)
msgid ""
"$role = $request->input('role');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($role, function ($query, $role) {\n"
"                    return $query->where('role_id', $role);\n"
"                })\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 262 (paragraph)
msgid "The `when` method only executes the given closure when the first argument is `true`. If the first argument is `false`, the closure will not be executed. So, in the example above, the closure given to the `when` method will only be invoked if the `role` field is present on the incoming request and evaluates to `true`."
msgstr ""

#: docs/8.x/queries.md:block 263 (paragraph)
msgid "You may pass another closure as the third argument to the `when` method. This closure will only execute if the first argument evaluates as `false`. To illustrate how this feature may be used, we will use it to configure the default ordering of a query:"
msgstr ""

#: docs/8.x/queries.md:block 264 (code)
msgid ""
"$sortByVotes = $request->input('sort_by_votes');\n"
"\n"
"$users = DB::table('users')\n"
"                ->when($sortByVotes, function ($query, $sortByVotes) {\n"
"                    return $query->orderBy('votes');\n"
"                }, function ($query) {\n"
"                    return $query->orderBy('name');\n"
"                })\n"
"                ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 266 (header)
msgid "Insert Statements"
msgstr ""

#: docs/8.x/queries.md:block 267 (paragraph)
msgid "The query builder also provides an `insert` method that may be used to insert records into the database table. The `insert` method accepts an array of column names and values:"
msgstr ""

#: docs/8.x/queries.md:block 268 (code)
msgid ""
"DB::table('users')->insert([\n"
"    'email' => 'kayla@example.com',\n"
"    'votes' => 0\n"
"]);\n"
msgstr ""

#: docs/8.x/queries.md:block 269 (paragraph)
msgid "You may insert several records at once by passing an array of arrays. Each array represents a record that should be inserted into the table:"
msgstr ""

#: docs/8.x/queries.md:block 270 (code)
msgid ""
"DB::table('users')->insert([\n"
"    ['email' => 'picard@example.com', 'votes' => 0],\n"
"    ['email' => 'janeway@example.com', 'votes' => 0],\n"
"]);\n"
msgstr ""

#: docs/8.x/queries.md:block 271 (paragraph)
msgid "The `insertOrIgnore` method will ignore errors while inserting records into the database:"
msgstr ""

#: docs/8.x/queries.md:block 272 (code)
msgid ""
"DB::table('users')->insertOrIgnore([\n"
"    ['id' => 1, 'email' => 'sisko@example.com'],\n"
"    ['id' => 2, 'email' => 'archer@example.com'],\n"
"]);\n"
msgstr ""

#: docs/8.x/queries.md:block 273 (quote)
msgid "{note} `insertOrIgnore` will ignore duplicate records and also may ignore other types of errors depending on the database engine. For example, `insertOrIgnore` will [bypass MySQL's strict mode](https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-effect-on-execution)."
msgstr ""

#: docs/8.x/queries.md:block 275 (header)
msgid "Auto-Incrementing IDs"
msgstr ""

#: docs/8.x/queries.md:block 276 (paragraph)
msgid "If the table has an auto-incrementing id, use the `insertGetId` method to insert a record and then retrieve the ID:"
msgstr ""

#: docs/8.x/queries.md:block 277 (code)
msgid ""
"$id = DB::table('users')->insertGetId(\n"
"    ['email' => 'john@example.com', 'votes' => 0]\n"
");\n"
msgstr ""

#: docs/8.x/queries.md:block 278 (quote)
msgid "{note} When using PostgreSQL the `insertGetId` method expects the auto-incrementing column to be named `id`. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the `insertGetId` method."
msgstr ""

#: docs/8.x/queries.md:block 280 (header)
msgid "Upserts"
msgstr ""

#: docs/8.x/queries.md:block 281 (paragraph)
msgid "The `upsert` method will insert records that do not exist and update the records that already exist with new values that you may specify. The method's first argument consists of the values to insert or update, while the second argument lists the column(s) that uniquely identify records within the associated table. The method's third and final argument is an array of columns that should be updated if a matching record already exists in the database:"
msgstr ""

#: docs/8.x/queries.md:block 282 (code)
msgid ""
"DB::table('flights')->upsert([\n"
"    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n"
"    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n"
"], ['departure', 'destination'], ['price']);\n"
msgstr ""

#: docs/8.x/queries.md:block 283 (paragraph)
msgid "In the example above, Laravel will attempt to insert two records. If a record already exists with the same `departure` and `destination` column values, Laravel will update that record's `price` column."
msgstr ""

#: docs/8.x/queries.md:block 284 (quote)
msgid "{note} All databases except SQL Server require the columns in the second argument of the `upsert` method to have a \"primary\" or \"unique\" index. In addition, the MySQL database driver ignores the second argument of the `upsert` method and always uses the \"primary\" and \"unique\" indexes of the table to detect existing records."
msgstr ""

#: docs/8.x/queries.md:block 286 (header)
msgid "Update Statements"
msgstr ""

#: docs/8.x/queries.md:block 287 (paragraph)
msgid "In addition to inserting records into the database, the query builder can also update existing records using the `update` method. The `update` method, like the `insert` method, accepts an array of column and value pairs indicating the columns to be updated. The `update` method returns the number of affected rows. You may constrain the `update` query using `where` clauses:"
msgstr ""

#: docs/8.x/queries.md:block 288 (code)
msgid ""
"$affected = DB::table('users')\n"
"              ->where('id', 1)\n"
"              ->update(['votes' => 1]);\n"
msgstr ""

#: docs/8.x/queries.md:block 290 (header)
msgid "Update Or Insert"
msgstr ""

#: docs/8.x/queries.md:block 291 (paragraph)
msgid "Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the `updateOrInsert` method may be used. The `updateOrInsert` method accepts two arguments: an array of conditions by which to find the record, and an array of column and value pairs indicating the columns to be updated."
msgstr ""

#: docs/8.x/queries.md:block 292 (paragraph)
msgid "The `updateOrInsert` method will attempt to locate a matching database record using the first argument's column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:"
msgstr ""

#: docs/8.x/queries.md:block 293 (code)
msgid ""
"DB::table('users')\n"
"    ->updateOrInsert(\n"
"        ['email' => 'john@example.com', 'name' => 'John'],\n"
"        ['votes' => '2']\n"
"    );\n"
msgstr ""

#: docs/8.x/queries.md:block 295 (header)
msgid "Updating JSON Columns"
msgstr ""

#: docs/8.x/queries.md:block 296 (paragraph)
msgid "When updating a JSON column, you should use `->` syntax to update the appropriate key in the JSON object. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+:"
msgstr ""

#: docs/8.x/queries.md:block 297 (code)
msgid ""
"$affected = DB::table('users')\n"
"              ->where('id', 1)\n"
"              ->update(['options->enabled' => true]);\n"
msgstr ""

#: docs/8.x/queries.md:block 299 (header)
msgid "Increment & Decrement"
msgstr ""

#: docs/8.x/queries.md:block 300 (paragraph)
msgid "The query builder also provides convenient methods for incrementing or decrementing the value of a given column. Both of these methods accept at least one argument: the column to modify. A second argument may be provided to specify the amount by which the column should be incremented or decremented:"
msgstr ""

#: docs/8.x/queries.md:block 301 (code)
msgid ""
"DB::table('users')->increment('votes');\n"
"\n"
"DB::table('users')->increment('votes', 5);\n"
"\n"
"DB::table('users')->decrement('votes');\n"
"\n"
"DB::table('users')->decrement('votes', 5);\n"
msgstr ""

#: docs/8.x/queries.md:block 302 (paragraph)
msgid "You may also specify additional columns to update during the operation:"
msgstr ""

#: docs/8.x/queries.md:block 303 (code)
msgid "DB::table('users')->increment('votes', 1, ['name' => 'John']);\n"
msgstr ""

#: docs/8.x/queries.md:block 305 (header)
msgid "Delete Statements"
msgstr ""

#: docs/8.x/queries.md:block 306 (paragraph)
msgid "The query builder's `delete` method may be used to delete records from the table. The `delete` method returns the number of affected rows. You may constrain `delete` statements by adding \"where\" clauses before calling the `delete` method:"
msgstr ""

#: docs/8.x/queries.md:block 307 (code)
msgid ""
"$deleted = DB::table('users')->delete();\n"
"\n"
"$deleted = DB::table('users')->where('votes', '>', 100)->delete();\n"
msgstr ""

#: docs/8.x/queries.md:block 308 (paragraph)
msgid "If you wish to truncate an entire table, which will remove all records from the table and reset the auto-incrementing ID to zero, you may use the `truncate` method:"
msgstr ""

#: docs/8.x/queries.md:block 309 (code)
msgid "DB::table('users')->truncate();\n"
msgstr ""

#: docs/8.x/queries.md:block 311 (header)
msgid "Table Truncation & PostgreSQL"
msgstr ""

#: docs/8.x/queries.md:block 312 (paragraph)
msgid "When truncating a PostgreSQL database, the `CASCADE` behavior will be applied. This means that all foreign key related records in other tables will be deleted as well."
msgstr ""

#: docs/8.x/queries.md:block 314 (header)
msgid "Pessimistic Locking"
msgstr ""

#: docs/8.x/queries.md:block 315 (paragraph)
msgid "The query builder also includes a few functions to help you achieve \"pessimistic locking\" when executing your `select` statements. To execute a statement with a \"shared lock\", you may call the `sharedLock` method. A shared lock prevents the selected rows from being modified until your transaction is committed:"
msgstr ""

#: docs/8.x/queries.md:block 316 (code)
msgid ""
"DB::table('users')\n"
"        ->where('votes', '>', 100)\n"
"        ->sharedLock()\n"
"        ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 317 (paragraph)
msgid "Alternatively, you may use the `lockForUpdate` method. A \"for update\" lock prevents the selected records from being modified or from being selected with another shared lock:"
msgstr ""

#: docs/8.x/queries.md:block 318 (code)
msgid ""
"DB::table('users')\n"
"        ->where('votes', '>', 100)\n"
"        ->lockForUpdate()\n"
"        ->get();\n"
msgstr ""

#: docs/8.x/queries.md:block 320 (header)
msgid "Debugging"
msgstr ""

#: docs/8.x/queries.md:block 321 (paragraph)
msgid "You may use the `dd` and `dump` methods while building a query to dump the current query bindings and SQL. The `dd` method will display the debug information and then stop executing the request. The `dump` method will display the debug information but allow the request to continue executing:"
msgstr ""

#: docs/8.x/queries.md:block 322 (code)
msgid ""
"DB::table('users')->where('votes', '>', 100)->dd();\n"
"\n"
"DB::table('users')->where('votes', '>', 100)->dump();\n"
msgstr ""

#: docs/9.x/queries.md:block 2 (unordered list)
msgid "[Full Text Where Clauses](#full-text-where-clauses)"
msgstr ""

#: docs/9.x/queries.md:block 216 (header)
msgid "Full Text Where Clauses"
msgstr ""

#: docs/9.x/queries.md:block 217 (quote)
msgid "{note} Full text where clauses are currently supported by MySQL and PostgreSQL."
msgstr ""

#: docs/9.x/queries.md:block 218 (paragraph)
msgid "The `whereFullText` and `orWhereFullText` methods may be used to add full text \"where\" clauses to a query for columns that have [full text indexes](/docs/{{version}}/migrations#available-index-types). These methods will be transformed into the appropriate SQL for the underlying database system by Laravel. For example, a `MATCH AGAINST` clause will be generated for applications utilizing MySQL:"
msgstr ""

#: docs/9.x/queries.md:block 219 (code)
msgid ""
"$users = DB::table('users')\n"
"           ->whereFullText('bio', 'web developer')\n"
"           ->get();\n"
msgstr ""
