msgid ""
msgstr ""

# H1
#: ./docs/8.x/eloquent-collections.md:1
#: ./docs/9.x/eloquent-collections.md:1
#: ./docs/10.x/eloquent-collections.md:1
#: ./docs/11.x/eloquent-collections.md:1
#: ./docs/master/eloquent-collections.md:1
msgid "Eloquent: Collections"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:3
#: ./docs/9.x/eloquent-collections.md:3
#: ./docs/10.x/eloquent-collections.md:3
#: ./docs/11.x/eloquent-collections.md:3
#: ./docs/master/eloquent-collections.md:3
msgid "[Introduction](#introduction)"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:4
#: ./docs/9.x/eloquent-collections.md:4
#: ./docs/10.x/eloquent-collections.md:4
#: ./docs/11.x/eloquent-collections.md:4
#: ./docs/master/eloquent-collections.md:4
msgid "[Available Methods](#available-methods)"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:5
#: ./docs/9.x/eloquent-collections.md:5
#: ./docs/10.x/eloquent-collections.md:5
#: ./docs/11.x/eloquent-collections.md:5
#: ./docs/master/eloquent-collections.md:5
msgid "[Custom Collections](#custom-collections)"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:7
#: ./docs/9.x/eloquent-collections.md:7
#: ./docs/10.x/eloquent-collections.md:7
#: ./docs/11.x/eloquent-collections.md:7
#: ./docs/master/eloquent-collections.md:7
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/eloquent-collections.md:8
#: ./docs/9.x/eloquent-collections.md:8
#: ./docs/10.x/eloquent-collections.md:8
#: ./docs/11.x/eloquent-collections.md:8
#: ./docs/master/eloquent-collections.md:8
msgid "Introduction"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:10
#: ./docs/9.x/eloquent-collections.md:10
#: ./docs/10.x/eloquent-collections.md:10
#: ./docs/11.x/eloquent-collections.md:10
#: ./docs/master/eloquent-collections.md:10
msgid "All Eloquent methods that return more than one model result will return instances of the `Illuminate\\Database\\Eloquent\\Collection` class, including results retrieved via the `get` method or accessed via a relationship. The Eloquent collection object extends Laravel's [base collection](/docs/{{version}}/collections), so it naturally inherits dozens of methods used to fluently work with the underlying array of Eloquent models. Be sure to review the Laravel collection documentation to learn all about these helpful methods!"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:12
#: ./docs/9.x/eloquent-collections.md:12
#: ./docs/10.x/eloquent-collections.md:12
#: ./docs/11.x/eloquent-collections.md:12
#: ./docs/master/eloquent-collections.md:12
msgid "All collections also serve as iterators, allowing you to loop over them as if they were simple PHP arrays:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:14
#: ./docs/9.x/eloquent-collections.md:14
#: ./docs/10.x/eloquent-collections.md:14
#: ./docs/11.x/eloquent-collections.md:14
#: ./docs/master/eloquent-collections.md:14
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('active', 1)->get();\n"
"\n"
"foreach ($users as $user) {\n"
"    echo $user->name;\n"
"}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:22
#: ./docs/9.x/eloquent-collections.md:22
#: ./docs/10.x/eloquent-collections.md:22
#: ./docs/11.x/eloquent-collections.md:22
#: ./docs/master/eloquent-collections.md:22
msgid "However, as previously mentioned, collections are much more powerful than arrays and expose a variety of map / reduce operations that may be chained using an intuitive interface. For example, we may remove all inactive models and then gather the first name for each remaining user:"
msgstr ""

# CODE
#: ./docs/10.x/eloquent-collections.md:24
#: ./docs/11.x/eloquent-collections.md:24
#: ./docs/master/eloquent-collections.md:24
msgid ""
"$names = User::all()->reject(function (User $user) {\n"
"    return $user->active === false;\n"
"})->map(function (User $user) {\n"
"    return $user->name;\n"
"});"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:24
#: ./docs/9.x/eloquent-collections.md:24
msgid ""
"$names = User::all()->reject(function ($user) {\n"
"    return $user->active === false;\n"
"})->map(function ($user) {\n"
"    return $user->name;\n"
"});"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:30
#: ./docs/9.x/eloquent-collections.md:30
#: ./docs/10.x/eloquent-collections.md:30
#: ./docs/11.x/eloquent-collections.md:30
#: ./docs/master/eloquent-collections.md:30
#~ msgid "<a name=\"eloquent-collection-conversion\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:31
#: ./docs/9.x/eloquent-collections.md:31
#: ./docs/10.x/eloquent-collections.md:31
#: ./docs/11.x/eloquent-collections.md:31
#: ./docs/master/eloquent-collections.md:31
msgid "Eloquent Collection Conversion"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:33
#: ./docs/9.x/eloquent-collections.md:33
#: ./docs/10.x/eloquent-collections.md:33
#: ./docs/11.x/eloquent-collections.md:33
#: ./docs/master/eloquent-collections.md:33
msgid "While most Eloquent collection methods return a new instance of an Eloquent collection, the `collapse`, `flatten`, `flip`, `keys`, `pluck`, and `zip` methods return a [base collection](/docs/{{version}}/collections) instance. Likewise, if a `map` operation returns a collection that does not contain any Eloquent models, it will be converted to a base collection instance."
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:35
#: ./docs/9.x/eloquent-collections.md:35
#: ./docs/10.x/eloquent-collections.md:35
#: ./docs/11.x/eloquent-collections.md:35
#: ./docs/master/eloquent-collections.md:35
#~ msgid "<a name=\"available-methods\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/eloquent-collections.md:36
#: ./docs/9.x/eloquent-collections.md:36
#: ./docs/10.x/eloquent-collections.md:36
#: ./docs/11.x/eloquent-collections.md:36
#: ./docs/master/eloquent-collections.md:36
msgid "Available Methods"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:38
#: ./docs/9.x/eloquent-collections.md:38
#: ./docs/10.x/eloquent-collections.md:38
#: ./docs/11.x/eloquent-collections.md:38
#: ./docs/master/eloquent-collections.md:38
msgid "All Eloquent collections extend the base [Laravel collection](/docs/{{version}}/collections#available-methods) object; therefore, they inherit all of the powerful methods provided by the base collection class."
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:40
#: ./docs/9.x/eloquent-collections.md:40
#: ./docs/10.x/eloquent-collections.md:40
#: ./docs/11.x/eloquent-collections.md:40
#: ./docs/master/eloquent-collections.md:40
msgid "In addition, the `Illuminate\\Database\\Eloquent\\Collection` class provides a superset of methods to aid with managing your model collections. Most methods return `Illuminate\\Database\\Eloquent\\Collection` instances; however, some methods, like `modelKeys`, return an `Illuminate\\Support\\Collection` instance."
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:63
msgid ""
"[contains](#method-contains)\n"
"[diff](#method-diff)\n"
"[except](#method-except)\n"
"[find](#method-find)\n"
"[fresh](#method-fresh)\n"
"[intersect](#method-intersect)\n"
"[load](#method-load)\n"
"[loadMissing](#method-loadMissing)\n"
"[modelKeys](#method-modelKeys)\n"
"[makeVisible](#method-makeVisible)\n"
"[makeHidden](#method-makeHidden)\n"
"[only](#method-only)\n"
"[toQuery](#method-toquery)\n"
"[unique](#method-unique)"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:65
msgid ""
"[append](#method-append)\n"
"[contains](#method-contains)\n"
"[diff](#method-diff)\n"
"[except](#method-except)\n"
"[find](#method-find)\n"
"[findOrFail](#method-find-or-fail)\n"
"[fresh](#method-fresh)\n"
"[intersect](#method-intersect)\n"
"[load](#method-load)\n"
"[loadMissing](#method-loadMissing)\n"
"[modelKeys](#method-modelKeys)\n"
"[makeVisible](#method-makeVisible)\n"
"[makeHidden](#method-makeHidden)\n"
"[only](#method-only)\n"
"[setVisible](#method-setVisible)\n"
"[setHidden](#method-setHidden)\n"
"[toQuery](#method-toquery)\n"
"[unique](#method-unique)"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:65
#: ./docs/10.x/eloquent-collections.md:65
#: ./docs/master/eloquent-collections.md:65
msgid ""
"[append](#method-append)\n"
"[contains](#method-contains)\n"
"[diff](#method-diff)\n"
"[except](#method-except)\n"
"[find](#method-find)\n"
"[fresh](#method-fresh)\n"
"[intersect](#method-intersect)\n"
"[load](#method-load)\n"
"[loadMissing](#method-loadMissing)\n"
"[modelKeys](#method-modelKeys)\n"
"[makeVisible](#method-makeVisible)\n"
"[makeHidden](#method-makeHidden)\n"
"[only](#method-only)\n"
"[setVisible](#method-setVisible)\n"
"[setHidden](#method-setHidden)\n"
"[toQuery](#method-toquery)\n"
"[unique](#method-unique)"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:80
#: ./docs/9.x/eloquent-collections.md:94
#: ./docs/10.x/eloquent-collections.md:94
#: ./docs/11.x/eloquent-collections.md:95
#: ./docs/master/eloquent-collections.md:94
#~ msgid "<a name=\"method-contains\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:81
msgid "`contains($key, $operator = null, $value = null)` {.collection-method .first-collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:83
#: ./docs/9.x/eloquent-collections.md:97
#: ./docs/10.x/eloquent-collections.md:97
#: ./docs/11.x/eloquent-collections.md:98
#: ./docs/master/eloquent-collections.md:97
msgid "The `contains` method may be used to determine if a given model instance is contained by the collection. This method accepts a primary key or a model instance:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:85
#: ./docs/9.x/eloquent-collections.md:99
#: ./docs/10.x/eloquent-collections.md:99
#: ./docs/11.x/eloquent-collections.md:100
#: ./docs/master/eloquent-collections.md:99
msgid ""
"$users->contains(1);\n"
"\n"
"$users->contains(User::find(1));"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:85
#: ./docs/10.x/eloquent-collections.md:85
#: ./docs/11.x/eloquent-collections.md:86
#: ./docs/master/eloquent-collections.md:85
#~ msgid "<a name=\"method-append\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/eloquent-collections.md:86
#: ./docs/10.x/eloquent-collections.md:86
#: ./docs/11.x/eloquent-collections.md:87
#: ./docs/master/eloquent-collections.md:86
msgid "`append($attributes)` {.collection-method .first-collection-method}"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:88
#: ./docs/10.x/eloquent-collections.md:88
#: ./docs/11.x/eloquent-collections.md:89
#: ./docs/master/eloquent-collections.md:88
msgid "The `append` method may be used to indicate that an attribute should be [appended](/docs/{{version}}/eloquent-serialization#appending-values-to-json) for every model in the collection. This method accepts an array of attributes or a single attribute:"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:89
#: ./docs/9.x/eloquent-collections.md:103
#: ./docs/10.x/eloquent-collections.md:103
#: ./docs/11.x/eloquent-collections.md:104
#: ./docs/master/eloquent-collections.md:103
#~ msgid "<a name=\"method-diff\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:90
#: ./docs/9.x/eloquent-collections.md:104
#: ./docs/10.x/eloquent-collections.md:104
#: ./docs/11.x/eloquent-collections.md:105
#: ./docs/master/eloquent-collections.md:104
msgid "`diff($items)` {.collection-method}"
msgstr ""

# CODE
#: ./docs/9.x/eloquent-collections.md:90
#: ./docs/10.x/eloquent-collections.md:90
#: ./docs/11.x/eloquent-collections.md:91
#: ./docs/master/eloquent-collections.md:90
msgid ""
"$users->append('team');\n"
"\n"
"$users->append(['team', 'is_admin']);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:92
#: ./docs/9.x/eloquent-collections.md:106
#: ./docs/10.x/eloquent-collections.md:106
#: ./docs/11.x/eloquent-collections.md:107
#: ./docs/master/eloquent-collections.md:106
msgid "The `diff` method returns all of the models that are not present in the given collection:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:94
#: ./docs/9.x/eloquent-collections.md:108
#: ./docs/10.x/eloquent-collections.md:108
#: ./docs/11.x/eloquent-collections.md:109
#: ./docs/master/eloquent-collections.md:108
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $users->diff(User::whereIn('id', [1, 2, 3])->get());"
msgstr ""

# H4
#: ./docs/9.x/eloquent-collections.md:95
#: ./docs/10.x/eloquent-collections.md:95
#: ./docs/11.x/eloquent-collections.md:96
#: ./docs/master/eloquent-collections.md:95
msgid "`contains($key, $operator = null, $value = null)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:98
#: ./docs/9.x/eloquent-collections.md:112
#: ./docs/10.x/eloquent-collections.md:112
#: ./docs/11.x/eloquent-collections.md:113
#: ./docs/master/eloquent-collections.md:112
#~ msgid "<a name=\"method-except\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:99
#: ./docs/9.x/eloquent-collections.md:113
#: ./docs/10.x/eloquent-collections.md:113
#: ./docs/11.x/eloquent-collections.md:114
#: ./docs/master/eloquent-collections.md:113
msgid "`except($keys)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:101
#: ./docs/9.x/eloquent-collections.md:115
#: ./docs/10.x/eloquent-collections.md:115
#: ./docs/11.x/eloquent-collections.md:116
#: ./docs/master/eloquent-collections.md:115
msgid "The `except` method returns all of the models that do not have the given primary keys:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:103
#: ./docs/9.x/eloquent-collections.md:117
#: ./docs/10.x/eloquent-collections.md:117
#: ./docs/11.x/eloquent-collections.md:118
#: ./docs/master/eloquent-collections.md:117
msgid "$users = $users->except([1, 2, 3]);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:105
#: ./docs/9.x/eloquent-collections.md:119
#: ./docs/10.x/eloquent-collections.md:119
#: ./docs/11.x/eloquent-collections.md:120
#: ./docs/master/eloquent-collections.md:119
#~ msgid "<a name=\"method-find\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:106
#: ./docs/9.x/eloquent-collections.md:120
#: ./docs/10.x/eloquent-collections.md:120
#: ./docs/11.x/eloquent-collections.md:121
#: ./docs/master/eloquent-collections.md:120
msgid "`find($key)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:108
#: ./docs/9.x/eloquent-collections.md:122
#: ./docs/10.x/eloquent-collections.md:122
#: ./docs/11.x/eloquent-collections.md:123
#: ./docs/master/eloquent-collections.md:122
msgid "The `find` method returns the model that has a primary key matching the given key. If `$key` is a model instance, `find` will attempt to return a model matching the primary key. If `$key` is an array of keys, `find` will return all models which have a primary key in the given array:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:110
#: ./docs/9.x/eloquent-collections.md:124
#: ./docs/10.x/eloquent-collections.md:124
#: ./docs/11.x/eloquent-collections.md:125
#: ./docs/master/eloquent-collections.md:124
msgid ""
"$users = User::all();\n"
"\n"
"$user = $users->find(1);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:114
#: ./docs/9.x/eloquent-collections.md:128
#: ./docs/10.x/eloquent-collections.md:128
#: ./docs/11.x/eloquent-collections.md:138
#: ./docs/master/eloquent-collections.md:128
#~ msgid "<a name=\"method-fresh\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:115
#: ./docs/9.x/eloquent-collections.md:129
#: ./docs/10.x/eloquent-collections.md:129
#: ./docs/11.x/eloquent-collections.md:139
#: ./docs/master/eloquent-collections.md:129
msgid "`fresh($with = [])` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:117
#: ./docs/9.x/eloquent-collections.md:131
#: ./docs/10.x/eloquent-collections.md:131
#: ./docs/11.x/eloquent-collections.md:141
#: ./docs/master/eloquent-collections.md:131
msgid "The `fresh` method retrieves a fresh instance of each model in the collection from the database. In addition, any specified relationships will be eager loaded:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:119
#: ./docs/9.x/eloquent-collections.md:133
#: ./docs/10.x/eloquent-collections.md:133
#: ./docs/11.x/eloquent-collections.md:143
#: ./docs/master/eloquent-collections.md:133
msgid ""
"$users = $users->fresh();\n"
"\n"
"$users = $users->fresh('comments');"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:123
#: ./docs/9.x/eloquent-collections.md:137
#: ./docs/10.x/eloquent-collections.md:137
#: ./docs/11.x/eloquent-collections.md:147
#: ./docs/master/eloquent-collections.md:137
#~ msgid "<a name=\"method-intersect\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:124
#: ./docs/9.x/eloquent-collections.md:138
#: ./docs/10.x/eloquent-collections.md:138
#: ./docs/11.x/eloquent-collections.md:148
#: ./docs/master/eloquent-collections.md:138
msgid "`intersect($items)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:126
#: ./docs/9.x/eloquent-collections.md:140
#: ./docs/10.x/eloquent-collections.md:140
#: ./docs/11.x/eloquent-collections.md:150
#: ./docs/master/eloquent-collections.md:140
msgid "The `intersect` method returns all of the models that are also present in the given collection:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:128
#: ./docs/9.x/eloquent-collections.md:142
#: ./docs/10.x/eloquent-collections.md:142
#: ./docs/11.x/eloquent-collections.md:152
#: ./docs/master/eloquent-collections.md:142
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = $users->intersect(User::whereIn('id', [1, 2, 3])->get());"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:129
#~ msgid "<a name=\"method-find-or-fail\"></a>"
#~ msgstr ""

# H4
#: ./docs/11.x/eloquent-collections.md:130
msgid "`findOrFail($key)` {.collection-method}"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:132
msgid "The `findOrFail` method returns the model that has a primary key matching the given key or throws an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` exception if no matching model can be found in the collection:"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:132
#: ./docs/9.x/eloquent-collections.md:146
#: ./docs/10.x/eloquent-collections.md:146
#: ./docs/11.x/eloquent-collections.md:156
#: ./docs/master/eloquent-collections.md:146
#~ msgid "<a name=\"method-load\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:133
#: ./docs/9.x/eloquent-collections.md:147
#: ./docs/10.x/eloquent-collections.md:147
#: ./docs/11.x/eloquent-collections.md:157
#: ./docs/master/eloquent-collections.md:147
msgid "`load($relations)` {.collection-method}"
msgstr ""

# CODE
#: ./docs/11.x/eloquent-collections.md:134
msgid ""
"$users = User::all();\n"
"\n"
"$user = $users->findOrFail(1);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:135
#: ./docs/9.x/eloquent-collections.md:149
#: ./docs/10.x/eloquent-collections.md:149
#: ./docs/11.x/eloquent-collections.md:159
#: ./docs/master/eloquent-collections.md:149
msgid "The `load` method eager loads the given relationships for all models in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:137
msgid ""
"$users->load(['comments', 'posts']);\n"
"\n"
"$users->load('comments.author');"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:141
#: ./docs/9.x/eloquent-collections.md:157
#: ./docs/10.x/eloquent-collections.md:157
#: ./docs/11.x/eloquent-collections.md:167
#: ./docs/master/eloquent-collections.md:157
#~ msgid "<a name=\"method-loadMissing\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:142
#: ./docs/9.x/eloquent-collections.md:158
#: ./docs/10.x/eloquent-collections.md:158
#: ./docs/11.x/eloquent-collections.md:168
#: ./docs/master/eloquent-collections.md:158
msgid "`loadMissing($relations)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:144
#: ./docs/9.x/eloquent-collections.md:160
#: ./docs/10.x/eloquent-collections.md:160
#: ./docs/11.x/eloquent-collections.md:170
#: ./docs/master/eloquent-collections.md:160
msgid "The `loadMissing` method eager loads the given relationships for all models in the collection if the relationships are not already loaded:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:146
msgid ""
"$users->loadMissing(['comments', 'posts']);\n"
"\n"
"$users->loadMissing('comments.author');"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:150
#: ./docs/9.x/eloquent-collections.md:168
#: ./docs/10.x/eloquent-collections.md:168
#: ./docs/11.x/eloquent-collections.md:178
#: ./docs/master/eloquent-collections.md:168
#~ msgid "<a name=\"method-modelKeys\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:151
#: ./docs/9.x/eloquent-collections.md:169
#: ./docs/10.x/eloquent-collections.md:169
#: ./docs/11.x/eloquent-collections.md:179
#: ./docs/master/eloquent-collections.md:169
msgid "`modelKeys()` {.collection-method}"
msgstr ""

# CODE
#: ./docs/9.x/eloquent-collections.md:151
#: ./docs/10.x/eloquent-collections.md:151
#: ./docs/11.x/eloquent-collections.md:161
#: ./docs/master/eloquent-collections.md:151
msgid ""
"$users->load(['comments', 'posts']);\n"
"\n"
"$users->load('comments.author');\n"
"\n"
"$users->load(['comments', 'posts' => fn ($query) => $query->where('active', 1)]);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:153
#: ./docs/9.x/eloquent-collections.md:171
#: ./docs/10.x/eloquent-collections.md:171
#: ./docs/11.x/eloquent-collections.md:181
#: ./docs/master/eloquent-collections.md:171
msgid "The `modelKeys` method returns the primary keys for all models in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:155
#: ./docs/9.x/eloquent-collections.md:173
#: ./docs/10.x/eloquent-collections.md:173
#: ./docs/11.x/eloquent-collections.md:183
#: ./docs/master/eloquent-collections.md:173
msgid ""
"$users->modelKeys();\n"
"\n"
"// [1, 2, 3, 4, 5]"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:159
#: ./docs/9.x/eloquent-collections.md:177
#: ./docs/10.x/eloquent-collections.md:177
#: ./docs/11.x/eloquent-collections.md:187
#: ./docs/master/eloquent-collections.md:177
#~ msgid "<a name=\"method-makeVisible\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:160
#: ./docs/9.x/eloquent-collections.md:178
#: ./docs/10.x/eloquent-collections.md:178
#: ./docs/11.x/eloquent-collections.md:188
#: ./docs/master/eloquent-collections.md:178
msgid "`makeVisible($attributes)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:162
#: ./docs/9.x/eloquent-collections.md:180
#: ./docs/10.x/eloquent-collections.md:180
#: ./docs/11.x/eloquent-collections.md:190
#: ./docs/master/eloquent-collections.md:180
msgid "The `makeVisible` method [makes attributes visible](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"hidden\" on each model in the collection:"
msgstr ""

# CODE
#: ./docs/9.x/eloquent-collections.md:162
#: ./docs/10.x/eloquent-collections.md:162
#: ./docs/11.x/eloquent-collections.md:172
#: ./docs/master/eloquent-collections.md:162
msgid ""
"$users->loadMissing(['comments', 'posts']);\n"
"\n"
"$users->loadMissing('comments.author');\n"
"\n"
"$users->loadMissing(['comments', 'posts' => fn ($query) => $query->where('active', 1)]);"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:164
#: ./docs/9.x/eloquent-collections.md:182
#: ./docs/10.x/eloquent-collections.md:182
#: ./docs/11.x/eloquent-collections.md:192
#: ./docs/master/eloquent-collections.md:182
msgid "$users = $users->makeVisible(['address', 'phone_number']);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:166
#: ./docs/9.x/eloquent-collections.md:184
#: ./docs/10.x/eloquent-collections.md:184
#: ./docs/11.x/eloquent-collections.md:194
#: ./docs/master/eloquent-collections.md:184
#~ msgid "<a name=\"method-makeHidden\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:167
#: ./docs/9.x/eloquent-collections.md:185
#: ./docs/10.x/eloquent-collections.md:185
#: ./docs/11.x/eloquent-collections.md:195
#: ./docs/master/eloquent-collections.md:185
msgid "`makeHidden($attributes)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:169
#: ./docs/9.x/eloquent-collections.md:187
#: ./docs/10.x/eloquent-collections.md:187
#: ./docs/11.x/eloquent-collections.md:197
#: ./docs/master/eloquent-collections.md:187
msgid "The `makeHidden` method [hides attributes](/docs/{{version}}/eloquent-serialization#hiding-attributes-from-json) that are typically \"visible\" on each model in the collection:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:171
#: ./docs/9.x/eloquent-collections.md:189
#: ./docs/10.x/eloquent-collections.md:189
#: ./docs/11.x/eloquent-collections.md:199
#: ./docs/master/eloquent-collections.md:189
msgid "$users = $users->makeHidden(['address', 'phone_number']);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:173
#: ./docs/9.x/eloquent-collections.md:191
#: ./docs/10.x/eloquent-collections.md:191
#: ./docs/11.x/eloquent-collections.md:201
#: ./docs/master/eloquent-collections.md:191
#~ msgid "<a name=\"method-only\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:174
#: ./docs/9.x/eloquent-collections.md:192
#: ./docs/10.x/eloquent-collections.md:192
#: ./docs/11.x/eloquent-collections.md:202
#: ./docs/master/eloquent-collections.md:192
msgid "`only($keys)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:176
#: ./docs/9.x/eloquent-collections.md:194
#: ./docs/10.x/eloquent-collections.md:194
#: ./docs/11.x/eloquent-collections.md:204
#: ./docs/master/eloquent-collections.md:194
msgid "The `only` method returns all of the models that have the given primary keys:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:178
#: ./docs/9.x/eloquent-collections.md:196
#: ./docs/10.x/eloquent-collections.md:196
#: ./docs/11.x/eloquent-collections.md:206
#: ./docs/master/eloquent-collections.md:196
msgid "$users = $users->only([1, 2, 3]);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:180
#: ./docs/9.x/eloquent-collections.md:212
#: ./docs/10.x/eloquent-collections.md:212
#: ./docs/11.x/eloquent-collections.md:222
#: ./docs/master/eloquent-collections.md:212
#~ msgid "<a name=\"method-toquery\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:181
#: ./docs/9.x/eloquent-collections.md:213
#: ./docs/10.x/eloquent-collections.md:213
#: ./docs/11.x/eloquent-collections.md:223
#: ./docs/master/eloquent-collections.md:213
msgid "`toQuery()` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:183
#: ./docs/9.x/eloquent-collections.md:215
#: ./docs/10.x/eloquent-collections.md:215
#: ./docs/11.x/eloquent-collections.md:225
#: ./docs/master/eloquent-collections.md:215
msgid "The `toQuery` method returns an Eloquent query builder instance containing a `whereIn` constraint on the collection model's primary keys:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:185
#: ./docs/9.x/eloquent-collections.md:217
#: ./docs/10.x/eloquent-collections.md:217
#: ./docs/11.x/eloquent-collections.md:227
#: ./docs/master/eloquent-collections.md:217
msgid ""
"use App\\Models\\User;\n"
"\n"
"$users = User::where('status', 'VIP')->get();\n"
"\n"
"$users->toQuery()->update([\n"
"    'status' => 'Administrator',\n"
"]);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:193
#: ./docs/9.x/eloquent-collections.md:225
#: ./docs/10.x/eloquent-collections.md:225
#: ./docs/11.x/eloquent-collections.md:235
#: ./docs/master/eloquent-collections.md:225
#~ msgid "<a name=\"method-unique\"></a>"
#~ msgstr ""

# H4
#: ./docs/8.x/eloquent-collections.md:194
#: ./docs/9.x/eloquent-collections.md:226
#: ./docs/10.x/eloquent-collections.md:226
#: ./docs/11.x/eloquent-collections.md:236
#: ./docs/master/eloquent-collections.md:226
msgid "`unique($key = null, $strict = false)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:196
#: ./docs/9.x/eloquent-collections.md:228
#: ./docs/10.x/eloquent-collections.md:228
#: ./docs/master/eloquent-collections.md:228
msgid "The `unique` method returns all of the unique models in the collection. Any models of the same type with the same primary key as another model in the collection are removed:"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:198
#: ./docs/9.x/eloquent-collections.md:230
#: ./docs/10.x/eloquent-collections.md:230
#: ./docs/11.x/eloquent-collections.md:240
#: ./docs/master/eloquent-collections.md:230
msgid "$users = $users->unique();"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:198
#: ./docs/10.x/eloquent-collections.md:198
#: ./docs/11.x/eloquent-collections.md:208
#: ./docs/master/eloquent-collections.md:198
#~ msgid "<a name=\"method-setVisible\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/eloquent-collections.md:199
#: ./docs/10.x/eloquent-collections.md:199
#: ./docs/11.x/eloquent-collections.md:209
#: ./docs/master/eloquent-collections.md:199
msgid "`setVisible($attributes)` {.collection-method}"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:200
#: ./docs/9.x/eloquent-collections.md:232
#: ./docs/10.x/eloquent-collections.md:232
#: ./docs/11.x/eloquent-collections.md:242
#: ./docs/master/eloquent-collections.md:232
#~ msgid "<a name=\"custom-collections\"></a>"
#~ msgstr ""

# H2
#: ./docs/8.x/eloquent-collections.md:201
#: ./docs/9.x/eloquent-collections.md:233
#: ./docs/10.x/eloquent-collections.md:233
#: ./docs/11.x/eloquent-collections.md:243
#: ./docs/master/eloquent-collections.md:233
msgid "Custom Collections"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:201
#: ./docs/10.x/eloquent-collections.md:201
#: ./docs/11.x/eloquent-collections.md:211
#: ./docs/master/eloquent-collections.md:201
msgid "The `setVisible` method [temporarily overrides](/docs/{{version}}/eloquent-serialization#temporarily-modifying-attribute-visibility) all of the visible attributes on each model in the collection:"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:203
#: ./docs/9.x/eloquent-collections.md:235
#: ./docs/10.x/eloquent-collections.md:235
#: ./docs/master/eloquent-collections.md:235
msgid "If you would like to use a custom `Collection` object when interacting with a given model, you may define a `newCollection` method on your model:"
msgstr ""

# CODE
#: ./docs/9.x/eloquent-collections.md:203
#: ./docs/10.x/eloquent-collections.md:203
#: ./docs/11.x/eloquent-collections.md:213
#: ./docs/master/eloquent-collections.md:203
msgid "$users = $users->setVisible(['id', 'name']);"
msgstr ""

# CODE
#: ./docs/8.x/eloquent-collections.md:205
#: ./docs/9.x/eloquent-collections.md:237
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Support\\UserCollection;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Create a new Eloquent Collection instance.\n"
"     *\n"
"     * @param  array  $models\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Collection\n"
"     */\n"
"    public function newCollection(array $models = [])\n"
"    {\n"
"        return new UserCollection($models);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:205
#: ./docs/10.x/eloquent-collections.md:205
#: ./docs/11.x/eloquent-collections.md:215
#: ./docs/master/eloquent-collections.md:205
#~ msgid "<a name=\"method-setHidden\"></a>"
#~ msgstr ""

# H4
#: ./docs/9.x/eloquent-collections.md:206
#: ./docs/10.x/eloquent-collections.md:206
#: ./docs/11.x/eloquent-collections.md:216
#: ./docs/master/eloquent-collections.md:206
msgid "`setHidden($attributes)` {.collection-method}"
msgstr ""

# P
#: ./docs/9.x/eloquent-collections.md:208
#: ./docs/10.x/eloquent-collections.md:208
#: ./docs/11.x/eloquent-collections.md:218
#: ./docs/master/eloquent-collections.md:208
msgid "The `setHidden` method [temporarily overrides](/docs/{{version}}/eloquent-serialization#temporarily-modifying-attribute-visibility) all of the hidden attributes on each model in the collection:"
msgstr ""

# CODE
#: ./docs/9.x/eloquent-collections.md:210
#: ./docs/10.x/eloquent-collections.md:210
#: ./docs/11.x/eloquent-collections.md:220
#: ./docs/master/eloquent-collections.md:210
msgid "$users = $users->setHidden(['email', 'password', 'remember_token']);"
msgstr ""

# P
#: ./docs/8.x/eloquent-collections.md:226
#: ./docs/9.x/eloquent-collections.md:258
#: ./docs/10.x/eloquent-collections.md:259
#: ./docs/master/eloquent-collections.md:259
msgid "Once you have defined a `newCollection` method, you will receive an instance of your custom collection anytime Eloquent would normally return an `Illuminate\\Database\\Eloquent\\Collection` instance. If you would like to use a custom collection for every model in your application, you should define the `newCollection` method on a base model class that is extended by all of your application's models."
msgstr ""

# CODE
#: ./docs/10.x/eloquent-collections.md:237
#: ./docs/11.x/eloquent-collections.md:263
#: ./docs/master/eloquent-collections.md:237
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Support\\UserCollection;\n"
"use Illuminate\\Database\\Eloquent\\Collection;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class User extends Model\n"
"{\n"
"    /**\n"
"     * Create a new Eloquent Collection instance.\n"
"     *\n"
"     * @param  array<int, \\Illuminate\\Database\\Eloquent\\Model>  $models\n"
"     * @return \\Illuminate\\Database\\Eloquent\\Collection<int, \\Illuminate\\Database\\Eloquent\\Model>\n"
"     */\n"
"    public function newCollection(array $models = []): Collection\n"
"    {\n"
"        return new UserCollection($models);\n"
"    }\n"
"}"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:238
msgid "The `unique` method returns all of the unique models in the collection. Any models with the same primary key as another model in the collection are removed:"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:245
msgid "If you would like to use a custom `Collection` object when interacting with a given model, you may add the `CollectedBy` attribute to your model:"
msgstr ""

# CODE
#: ./docs/11.x/eloquent-collections.md:247
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use App\\Support\\UserCollection;\n"
"use Illuminate\\Database\\Eloquent\\Attributes\\CollectedBy;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"#[CollectedBy(UserCollection::class)]\n"
"class User extends Model\n"
"{\n"
"    // ...\n"
"}"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:261
msgid "Alternatively, you may define a `newCollection` method on your model:"
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:285
msgid "Once you have defined a `newCollection` method or added the `CollectedBy` attribute to your model, you will receive an instance of your custom collection anytime Eloquent would normally return an `Illuminate\\Database\\Eloquent\\Collection` instance."
msgstr ""

# P
#: ./docs/11.x/eloquent-collections.md:287
msgid "If you would like to use a custom collection for every model in your application, you should define the `newCollection` method on a base model class that is extended by all of your application's models."
msgstr ""
