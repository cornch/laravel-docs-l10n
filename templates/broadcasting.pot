# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-30 12:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
#
#. type: Title #
# File: docs/8.x/broadcasting.md, line: 1
# File: docs/master/broadcasting.md, line: 1
#, no-wrap
msgid "Broadcasting"
msgstr ""
#
#. type: Bullet: '- '
# File: docs/8.x/broadcasting.md, line: 40
# File: docs/master/broadcasting.md, line: 40
msgid "[Introduction](#introduction)"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 40
# File: docs/master/broadcasting.md, line: 40
#, no-wrap
msgid ""
"- [Server Side Installation](#server-side-installation)\n"
"    - [Configuration](#configuration)\n"
"    - [Pusher Channels](#pusher-channels)\n"
"    - [Ably](#ably)\n"
"    - [Open Source Alternatives](#open-source-alternatives)\n"
"- [Client Side Installation](#client-side-installation)\n"
"    - [Pusher Channels](#client-pusher-channels)\n"
"    - [Ably](#client-ably)\n"
"- [Concept Overview](#concept-overview)\n"
"    - [Using An Example Application](#using-example-application)\n"
"- [Defining Broadcast Events](#defining-broadcast-events)\n"
"    - [Broadcast Name](#broadcast-name)\n"
"    - [Broadcast Data](#broadcast-data)\n"
"    - [Broadcast Queue](#broadcast-queue)\n"
"    - [Broadcast Conditions](#broadcast-conditions)\n"
"    - [Broadcasting & Database Transactions](#broadcasting-and-database-transactions)\n"
"- [Authorizing Channels](#authorizing-channels)\n"
"    - [Defining Authorization Routes](#defining-authorization-routes)\n"
"    - [Defining Authorization Callbacks](#defining-authorization-callbacks)\n"
"    - [Defining Channel Classes](#defining-channel-classes)\n"
"- [Broadcasting Events](#broadcasting-events)\n"
"    - [Only To Others](#only-to-others)\n"
"    - [Customizing The Connection](#customizing-the-connection)\n"
"- [Receiving Broadcasts](#receiving-broadcasts)\n"
"    - [Listening For Events](#listening-for-events)\n"
"    - [Leaving A Channel](#leaving-a-channel)\n"
"    - [Namespaces](#namespaces)\n"
"- [Presence Channels](#presence-channels)\n"
"    - [Authorizing Presence Channels](#authorizing-presence-channels)\n"
"    - [Joining Presence Channels](#joining-presence-channels)\n"
"    - [Broadcasting To Presence Channels](#broadcasting-to-presence-channels)\n"
"- [Model Broadcasting](#model-broadcasting)\n"
"    - [Model Broadcasting Conventions](#model-broadcasting-conventions)\n"
"    - [Listening For Model Broadcasts](#listening-for-model-broadcasts)\n"
"- [Client Events](#client-events)\n"
"- [Notifications](#notifications)\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 42
# File: docs/master/broadcasting.md, line: 42
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 42
# File: docs/master/broadcasting.md, line: 42
#, no-wrap
msgid "Introduction"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 45
# File: docs/master/broadcasting.md, line: 45
msgid "In many modern web applications, WebSockets are used to implement realtime, live-updating user interfaces. When some data is updated on the server, a message is typically sent over a WebSocket connection to be handled by the client. WebSockets provide a more efficient alternative to continually polling your application's server for data changes that should be reflected in your UI."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 47
# File: docs/master/broadcasting.md, line: 47
msgid "For example, imagine your application is able to export a user's data to a CSV file and email it to them. However, creating this CSV file takes several minutes so you choose to create and mail the CSV within a [queued job](/docs/{{version}}/queues). When the CSV has been created and mailed to the user, we can use event broadcasting to dispatch a `App\\Events\\UserDataExported` event that is received by our application's JavaScript. Once the event is received, we can display a message to the user that their CSV has been emailed to them without them ever needing to refresh the page."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 49
# File: docs/master/broadcasting.md, line: 49
msgid "To assist you in building these types of features, Laravel makes it easy to \"broadcast\" your server-side Laravel [events](/docs/{{version}}/events) over a WebSocket connection. Broadcasting your Laravel events allows you to share the same event names and data between your server-side Laravel application and your client-side JavaScript application."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 51
# File: docs/master/broadcasting.md, line: 51
msgid "The core concepts behind broadcasting are simple: clients connect to named channels on the frontend, while your Laravel application broadcasts events to these channels on the backend. These events can contain any additional data you wish to make available to the frontend."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 53
# File: docs/master/broadcasting.md, line: 53
#, no-wrap
msgid "<a name=\"supported-drivers\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 53
# File: docs/master/broadcasting.md, line: 53
#, no-wrap
msgid "Supported Drivers"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 56
# File: docs/master/broadcasting.md, line: 56
msgid "By default, Laravel includes two server-side broadcasting drivers for you to choose from: [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io). However, community driven packages such as [laravel-websockets](https://beyondco.de/docs/laravel-websockets/getting-started/introduction) and [soketi](https://docs.soketi.app/) provide additional broadcasting drivers that do not require commercial broadcasting providers."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 58
# File: docs/master/broadcasting.md, line: 58
#, no-wrap
msgid "> {tip} Before diving into event broadcasting, make sure you have read Laravel's documentation on [events and listeners](/docs/{{version}}/events).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 60
# File: docs/master/broadcasting.md, line: 60
#, no-wrap
msgid "<a name=\"server-side-installation\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 60
# File: docs/master/broadcasting.md, line: 60
#, no-wrap
msgid "Server Side Installation"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 63
# File: docs/master/broadcasting.md, line: 63
msgid "To get started using Laravel's event broadcasting, we need to do some configuration within the Laravel application as well as install a few packages."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 65
# File: docs/master/broadcasting.md, line: 65
msgid "Event broadcasting is accomplished by a server-side broadcasting driver that broadcasts your Laravel events so that Laravel Echo (a JavaScript library) can receive them within the browser client. Don't worry - we'll walk through each part of the installation process step-by-step."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 67
# File: docs/master/broadcasting.md, line: 67
#, no-wrap
msgid "<a name=\"configuration\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 67
# File: docs/8.x/broadcasting.md, line: 658
# File: docs/master/broadcasting.md, line: 67
# File: docs/master/broadcasting.md, line: 658
#, no-wrap
msgid "Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 70
# File: docs/master/broadcasting.md, line: 70
msgid "All of your application's event broadcasting configuration is stored in the `config/broadcasting.php` configuration file. Laravel supports several broadcast drivers out of the box: [Pusher Channels](https://pusher.com/channels), [Redis](/docs/{{version}}/redis), and a `log` driver for local development and debugging. Additionally, a `null` driver is included which allows you to totally disable broadcasting during testing. A configuration example is included for each of these drivers in the `config/broadcasting.php` configuration file."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 72
# File: docs/master/broadcasting.md, line: 72
#, no-wrap
msgid "<a name=\"broadcast-service-provider\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 72
# File: docs/master/broadcasting.md, line: 72
#, no-wrap
msgid "Broadcast Service Provider"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 75
# File: docs/master/broadcasting.md, line: 75
msgid "Before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In new Laravel applications, you only need to uncomment this provider in the `providers` array of your `config/app.php` configuration file. This `BroadcastServiceProvider` contains the code necessary to register the broadcast authorization routes and callbacks."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 77
# File: docs/master/broadcasting.md, line: 77
#, no-wrap
msgid "<a name=\"queue-configuration\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 77
# File: docs/master/broadcasting.md, line: 77
#, no-wrap
msgid "Queue Configuration"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 80
# File: docs/master/broadcasting.md, line: 80
msgid "You will also need to configure and run a [queue worker](/docs/{{version}}/queues). All event broadcasting is done via queued jobs so that the response time of your application is not seriously affected by events being broadcast."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 82
# File: docs/master/broadcasting.md, line: 82
#, no-wrap
msgid "<a name=\"pusher-channels\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 82
# File: docs/8.x/broadcasting.md, line: 142
# File: docs/master/broadcasting.md, line: 82
# File: docs/master/broadcasting.md, line: 142
#, no-wrap
msgid "Pusher Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 85
# File: docs/master/broadcasting.md, line: 85
msgid "If you plan to broadcast your events using [Pusher Channels](https://pusher.com/channels), you should install the Pusher Channels PHP SDK using the Composer package manager:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 87
# File: docs/master/broadcasting.md, line: 87
#, no-wrap
msgid "    composer require pusher/pusher-php-server\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 89
# File: docs/master/broadcasting.md, line: 89
msgid "Next, you should configure your Pusher Channels credentials in the `config/broadcasting.php` configuration file. An example Pusher Channels configuration is already included in this file, allowing you to quickly specify your key, secret, and application ID. Typically, these values should be set via the `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_ID` [environment variables](/docs/{{version}}/configuration#environment-configuration):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 94
# File: docs/master/broadcasting.md, line: 94
#, no-wrap
msgid ""
"    PUSHER_APP_ID=your-pusher-app-id\n"
"    PUSHER_APP_KEY=your-pusher-key\n"
"    PUSHER_APP_SECRET=your-pusher-secret\n"
"    PUSHER_APP_CLUSTER=mt1\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 96
# File: docs/master/broadcasting.md, line: 96
msgid "The `config/broadcasting.php` file's `pusher` configuration also allows you to specify additional `options` that are supported by Channels, such as the cluster."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 98
# File: docs/master/broadcasting.md, line: 98
msgid "Next, you will need to change your broadcast driver to `pusher` in your `.env` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 100
# File: docs/master/broadcasting.md, line: 100
#, no-wrap
msgid "    BROADCAST_DRIVER=pusher\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 102
# File: docs/8.x/broadcasting.md, line: 124
# File: docs/master/broadcasting.md, line: 102
# File: docs/master/broadcasting.md, line: 124
msgid "Finally, you are ready to install and configure [Laravel Echo](#client-side-installation), which will receive the broadcast events on the client-side."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 104
# File: docs/master/broadcasting.md, line: 104
#, no-wrap
msgid "<a name=\"pusher-compatible-open-source-alternatives\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 104
# File: docs/master/broadcasting.md, line: 104
#, no-wrap
msgid "Open Source Pusher Alternatives"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 107
# File: docs/master/broadcasting.md, line: 107
msgid "The [laravel-websockets](https://github.com/beyondcode/laravel-websockets) and [soketi](https://docs.soketi.app/) packages provide Pusher compatible WebSocket servers for Laravel. These packages allow you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using these packages, please consult our documentation on [open source alternatives](#open-source-alternatives)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 109
# File: docs/master/broadcasting.md, line: 109
#, no-wrap
msgid "<a name=\"ably\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 109
# File: docs/8.x/broadcasting.md, line: 189
# File: docs/master/broadcasting.md, line: 109
# File: docs/master/broadcasting.md, line: 189
#, no-wrap
msgid "Ably"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 112
# File: docs/master/broadcasting.md, line: 112
msgid "If you plan to broadcast your events using [Ably](https://ably.io), you should install the Ably PHP SDK using the Composer package manager:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 114
# File: docs/master/broadcasting.md, line: 114
#, no-wrap
msgid "    composer require ably/ably-php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 116
# File: docs/master/broadcasting.md, line: 116
msgid "Next, you should configure your Ably credentials in the `config/broadcasting.php` configuration file. An example Ably configuration is already included in this file, allowing you to quickly specify your key. Typically, this value should be set via the `ABLY_KEY` [environment variable](/docs/{{version}}/configuration#environment-configuration):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 118
# File: docs/master/broadcasting.md, line: 118
#, no-wrap
msgid "    ABLY_KEY=your-ably-key\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 120
# File: docs/master/broadcasting.md, line: 120
msgid "Next, you will need to change your broadcast driver to `ably` in your `.env` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 122
# File: docs/master/broadcasting.md, line: 122
#, no-wrap
msgid "    BROADCAST_DRIVER=ably\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 126
# File: docs/master/broadcasting.md, line: 126
#, no-wrap
msgid "<a name=\"open-source-alternatives\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 126
# File: docs/master/broadcasting.md, line: 126
#, no-wrap
msgid "Open Source Alternatives"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 129
# File: docs/master/broadcasting.md, line: 129
#, no-wrap
msgid "<a name=\"open-source-alternatives-php\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 129
# File: docs/master/broadcasting.md, line: 129
#, no-wrap
msgid "PHP"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 132
# File: docs/master/broadcasting.md, line: 132
msgid "The [laravel-websockets](https://github.com/beyondcode/laravel-websockets) package is a pure PHP, Pusher compatible WebSocket package for Laravel. This package allows you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using this package, please consult its [official documentation](https://beyondco.de/docs/laravel-websockets)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 134
# File: docs/master/broadcasting.md, line: 134
#, no-wrap
msgid "<a name=\"open-source-alternatives-node\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 134
# File: docs/master/broadcasting.md, line: 134
#, no-wrap
msgid "Node"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 137
# File: docs/master/broadcasting.md, line: 137
msgid "[Soketi](https://github.com/soketi/soketi) is a Node based, Pusher compatible WebSocket server for Laravel. Under the hood, Soketi utilizes µWebSockets.js for extreme scalability and speed. This package allows you to leverage the full power of Laravel broadcasting without a commercial WebSocket provider. For more information on installing and using this package, please consult its [official documentation](https://docs.soketi.app/)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 139
# File: docs/master/broadcasting.md, line: 139
#, no-wrap
msgid "<a name=\"client-side-installation\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 139
# File: docs/master/broadcasting.md, line: 139
#, no-wrap
msgid "Client Side Installation"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 142
# File: docs/master/broadcasting.md, line: 142
#, no-wrap
msgid "<a name=\"client-pusher-channels\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 145
# File: docs/master/broadcasting.md, line: 145
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package since we will be using the Pusher Channels broadcaster:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/broadcasting.md, line: 146
# File: docs/8.x/broadcasting.md, line: 195
# File: docs/master/broadcasting.md, line: 146
# File: docs/master/broadcasting.md, line: 195
#, no-wrap
msgid "bash"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 146
# File: docs/8.x/broadcasting.md, line: 195
# File: docs/master/broadcasting.md, line: 146
# File: docs/master/broadcasting.md, line: 195
#, no-wrap
msgid "npm install --save-dev laravel-echo pusher-js\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 151
# File: docs/master/broadcasting.md, line: 151
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file - you simply need to uncomment it:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/broadcasting.md, line: 152
# File: docs/8.x/broadcasting.md, line: 176
# File: docs/8.x/broadcasting.md, line: 203
# File: docs/8.x/broadcasting.md, line: 305
# File: docs/8.x/broadcasting.md, line: 712
# File: docs/8.x/broadcasting.md, line: 721
# File: docs/8.x/broadcasting.md, line: 733
# File: docs/8.x/broadcasting.md, line: 743
# File: docs/8.x/broadcasting.md, line: 749
# File: docs/8.x/broadcasting.md, line: 757
# File: docs/8.x/broadcasting.md, line: 767
# File: docs/8.x/broadcasting.md, line: 1029
# File: docs/master/broadcasting.md, line: 152
# File: docs/master/broadcasting.md, line: 176
# File: docs/master/broadcasting.md, line: 203
# File: docs/master/broadcasting.md, line: 305
# File: docs/master/broadcasting.md, line: 712
# File: docs/master/broadcasting.md, line: 721
# File: docs/master/broadcasting.md, line: 733
# File: docs/master/broadcasting.md, line: 743
# File: docs/master/broadcasting.md, line: 749
# File: docs/master/broadcasting.md, line: 757
# File: docs/master/broadcasting.md, line: 767
# File: docs/master/broadcasting.md, line: 1029
#, no-wrap
msgid "js"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 152
# File: docs/master/broadcasting.md, line: 152
#, no-wrap
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"window.Pusher = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_PUSHER_APP_KEY,\n"
"    cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n"
"    forceTLS: true\n"
"});\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 166
# File: docs/8.x/broadcasting.md, line: 221
# File: docs/master/broadcasting.md, line: 166
# File: docs/master/broadcasting.md, line: 221
msgid "Once you have uncommented and adjusted the Echo configuration according to your needs, you may compile your application's assets:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 168
# File: docs/8.x/broadcasting.md, line: 223
# File: docs/master/broadcasting.md, line: 168
# File: docs/master/broadcasting.md, line: 223
#, no-wrap
msgid "    npm run dev\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 170
# File: docs/8.x/broadcasting.md, line: 225
# File: docs/master/broadcasting.md, line: 170
# File: docs/master/broadcasting.md, line: 225
#, no-wrap
msgid "> {tip} To learn more about compiling your application's JavaScript assets, please consult the documentation on [Laravel Mix](/docs/{{version}}/mix).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 172
# File: docs/master/broadcasting.md, line: 172
#, no-wrap
msgid "<a name=\"using-an-existing-client-instance\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 172
# File: docs/master/broadcasting.md, line: 172
#, no-wrap
msgid "Using An Existing Client Instance"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 175
# File: docs/master/broadcasting.md, line: 175
msgid "If you already have a pre-configured Pusher Channels client instance that you would like Echo to utilize, you may pass it to Echo via the `client` configuration option:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 176
# File: docs/master/broadcasting.md, line: 176
#, no-wrap
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"const client = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: 'your-pusher-channels-key',\n"
"    client: client\n"
"});\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 189
# File: docs/master/broadcasting.md, line: 189
#, no-wrap
msgid "<a name=\"client-ably\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 192
# File: docs/master/broadcasting.md, line: 192
msgid "[Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the `pusher-js` package."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 194
# File: docs/master/broadcasting.md, line: 194
msgid "You may wonder why we would install the `pusher-js` JavaScript library even though we are using Ably to broadcast our events. Thankfully, Ably includes a Pusher compatibility mode which lets us use the Pusher protocol when listening for events in our client-side application:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 200
# File: docs/master/broadcasting.md, line: 200
#, no-wrap
msgid "**Before continuing, you should enable Pusher protocol support in your Ably application settings. You may enable this feature within the \"Protocol Adapter Settings\" portion of your Ably application's settings dashboard.**\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 202
# File: docs/master/broadcasting.md, line: 202
msgid "Once Echo is installed, you are ready to create a fresh Echo instance in your application's JavaScript. A great place to do this is at the bottom of the `resources/js/bootstrap.js` file that is included with the Laravel framework. By default, an example Echo configuration is already included in this file; however, the default configuration in the `bootstrap.js` file is intended for Pusher. You may copy the configuration below to transition your configuration to Ably:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 203
# File: docs/master/broadcasting.md, line: 203
#, no-wrap
msgid ""
"import Echo from 'laravel-echo';\n"
"\n"
"window.Pusher = require('pusher-js');\n"
"\n"
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    key: process.env.MIX_ABLY_PUBLIC_KEY,\n"
"    wsHost: 'realtime-pusher.ably.io',\n"
"    wsPort: 443,\n"
"    disableStats: true,\n"
"    encrypted: true,\n"
"});\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 219
# File: docs/master/broadcasting.md, line: 219
msgid "Note that our Ably Echo configuration references a `MIX_ABLY_PUBLIC_KEY` environment variable. This variable's value should be your Ably public key. Your public key is the portion of your Ably key that occurs before the `:` character."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 227
# File: docs/master/broadcasting.md, line: 227
#, no-wrap
msgid "<a name=\"concept-overview\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 227
# File: docs/master/broadcasting.md, line: 227
#, no-wrap
msgid "Concept Overview"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 230
# File: docs/master/broadcasting.md, line: 230
msgid "Laravel's event broadcasting allows you to broadcast your server-side Laravel events to your client-side JavaScript application using a driver-based approach to WebSockets. Currently, Laravel ships with [Pusher Channels](https://pusher.com/channels) and [Ably](https://ably.io) drivers. The events may be easily consumed on the client-side using the [Laravel Echo](#client-side-installation) JavaScript package."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 232
# File: docs/master/broadcasting.md, line: 232
msgid "Events are broadcast over \"channels\", which may be specified as public or private. Any visitor to your application may subscribe to a public channel without any authentication or authorization; however, in order to subscribe to a private channel, a user must be authenticated and authorized to listen on that channel."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 234
# File: docs/master/broadcasting.md, line: 234
#, no-wrap
msgid "> {tip} If you would like to explore open source alternatives to Pusher, check out the [open source alternatives](#open-source-alternatives).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 236
# File: docs/master/broadcasting.md, line: 236
#, no-wrap
msgid "<a name=\"using-example-application\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 236
# File: docs/master/broadcasting.md, line: 236
#, no-wrap
msgid "Using An Example Application"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 239
# File: docs/master/broadcasting.md, line: 239
msgid "Before diving into each component of event broadcasting, let's take a high level overview using an e-commerce store as an example."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 241
# File: docs/master/broadcasting.md, line: 241
msgid "In our application, let's assume we have a page that allows users to view the shipping status for their orders. Let's also assume that a `OrderShipmentStatusUpdated` event is fired when a shipping status update is processed by the application:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 243
# File: docs/8.x/broadcasting.md, line: 634
# File: docs/8.x/broadcasting.md, line: 643
# File: docs/8.x/broadcasting.md, line: 672
# File: docs/master/broadcasting.md, line: 243
# File: docs/master/broadcasting.md, line: 634
# File: docs/master/broadcasting.md, line: 643
# File: docs/master/broadcasting.md, line: 672
#, no-wrap
msgid "    use App\\Events\\OrderShipmentStatusUpdated;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 245
# File: docs/8.x/broadcasting.md, line: 636
# File: docs/master/broadcasting.md, line: 245
# File: docs/master/broadcasting.md, line: 636
#, no-wrap
msgid "    OrderShipmentStatusUpdated::dispatch($order);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 247
# File: docs/master/broadcasting.md, line: 247
#, no-wrap
msgid "<a name=\"the-shouldbroadcast-interface\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 247
# File: docs/master/broadcasting.md, line: 247
#, no-wrap
msgid "The `ShouldBroadcast` Interface"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 250
# File: docs/master/broadcasting.md, line: 250
msgid "When a user is viewing one of their orders, we don't want them to have to refresh the page to view status updates. Instead, we want to broadcast the updates to the application as they are created. So, we need to mark the `OrderShipmentStatusUpdated` event with the `ShouldBroadcast` interface. This will instruct Laravel to broadcast the event when it is fired:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 252
# File: docs/8.x/broadcasting.md, line: 320
# File: docs/8.x/broadcasting.md, line: 446
# File: docs/8.x/broadcasting.md, line: 477
# File: docs/8.x/broadcasting.md, line: 595
# File: docs/8.x/broadcasting.md, line: 678
# File: docs/master/broadcasting.md, line: 252
# File: docs/master/broadcasting.md, line: 320
# File: docs/master/broadcasting.md, line: 446
# File: docs/master/broadcasting.md, line: 477
# File: docs/master/broadcasting.md, line: 595
# File: docs/master/broadcasting.md, line: 678
#, no-wrap
msgid "    <?php\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 254
# File: docs/8.x/broadcasting.md, line: 322
# File: docs/8.x/broadcasting.md, line: 479
# File: docs/8.x/broadcasting.md, line: 680
# File: docs/master/broadcasting.md, line: 254
# File: docs/master/broadcasting.md, line: 322
# File: docs/master/broadcasting.md, line: 479
# File: docs/master/broadcasting.md, line: 680
#, no-wrap
msgid "    namespace App\\Events;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 262
# File: docs/master/broadcasting.md, line: 262
#, no-wrap
msgid ""
"    use App\\Order;\n"
"    use Illuminate\\Broadcasting\\Channel;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Broadcasting\\PresenceChannel;\n"
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 272
# File: docs/master/broadcasting.md, line: 272
#, no-wrap
msgid ""
"    class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"    {\n"
"        /**\n"
"         * The order instance.\n"
"         *\n"
"         * @var \\App\\Order\n"
"         */\n"
"        public $order;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 274
# File: docs/master/broadcasting.md, line: 274
msgid "The `ShouldBroadcast` interface requires our event to define a `broadcastOn` method. This method is responsible for returning the channels that the event should broadcast on. An empty stub of this method is already defined on generated event classes, so we only need to fill in its details. We only want the creator of the order to be able to view status updates, so we will broadcast the event on a private channel that is tied to the order:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 284
# File: docs/master/broadcasting.md, line: 284
#, no-wrap
msgid ""
"    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return \\Illuminate\\Broadcasting\\PrivateChannel\n"
"     */\n"
"    public function broadcastOn()\n"
"    {\n"
"        return new PrivateChannel('orders.'.$this->order->id);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 286
# File: docs/master/broadcasting.md, line: 286
#, no-wrap
msgid "<a name=\"example-application-authorizing-channels\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 286
# File: docs/8.x/broadcasting.md, line: 493
# File: docs/master/broadcasting.md, line: 286
# File: docs/master/broadcasting.md, line: 493
#, no-wrap
msgid "Authorizing Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 289
# File: docs/master/broadcasting.md, line: 289
msgid "Remember, users must be authorized to listen on private channels. We may define our channel authorization rules in our application's `routes/channels.php` file. In this example, we need to verify that any user attempting to listen on the private `orders.1` channel is actually the creator of the order:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 291
# File: docs/8.x/broadcasting.md, line: 563
# File: docs/master/broadcasting.md, line: 291
# File: docs/master/broadcasting.md, line: 563
#, no-wrap
msgid "    use App\\Models\\Order;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 295
# File: docs/8.x/broadcasting.md, line: 552
# File: docs/master/broadcasting.md, line: 295
# File: docs/master/broadcasting.md, line: 552
#, no-wrap
msgid ""
"    Broadcast::channel('orders.{orderId}', function ($user, $orderId) {\n"
"        return $user->id === Order::findOrNew($orderId)->user_id;\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 297
# File: docs/8.x/broadcasting.md, line: 554
# File: docs/master/broadcasting.md, line: 297
# File: docs/master/broadcasting.md, line: 554
msgid "The `channel` method accepts two arguments: the name of the channel and a callback which returns `true` or `false` indicating whether the user is authorized to listen on the channel."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 299
# File: docs/8.x/broadcasting.md, line: 556
# File: docs/master/broadcasting.md, line: 299
# File: docs/master/broadcasting.md, line: 556
msgid "All authorization callbacks receive the currently authenticated user as their first argument and any additional wildcard parameters as their subsequent arguments. In this example, we are using the `{orderId}` placeholder to indicate that the \"ID\" portion of the channel name is a wildcard."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 301
# File: docs/master/broadcasting.md, line: 301
#, no-wrap
msgid "<a name=\"listening-for-event-broadcasts\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 301
# File: docs/master/broadcasting.md, line: 301
#, no-wrap
msgid "Listening For Event Broadcasts"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 304
# File: docs/master/broadcasting.md, line: 304
msgid "Next, all that remains is to listen for the event in our JavaScript application. We can do this using [Laravel Echo](#client-side-installation). First, we'll use the `private` method to subscribe to the private channel. Then, we may use the `listen` method to listen for the `OrderShipmentStatusUpdated` event. By default, all of the event's public properties will be included on the broadcast event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 305
# File: docs/master/broadcasting.md, line: 305
#, no-wrap
msgid ""
"Echo.private(`orders.${orderId}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 313
# File: docs/master/broadcasting.md, line: 313
#, no-wrap
msgid "<a name=\"defining-broadcast-events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 313
# File: docs/master/broadcasting.md, line: 313
#, no-wrap
msgid "Defining Broadcast Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 316
# File: docs/master/broadcasting.md, line: 316
msgid "To inform Laravel that a given event should be broadcast, you must implement the `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class. This interface is already imported into all event classes generated by the framework so you may easily add it to any of your events."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 318
# File: docs/master/broadcasting.md, line: 318
msgid "The `ShouldBroadcast` interface requires you to implement a single method: `broadcastOn`. The `broadcastOn` method should return a channel or array of channels that the event should broadcast on. The channels should be instances of `Channel`, `PrivateChannel`, or `PresenceChannel`. Instances of `Channel` represent public channels that any user may subscribe to, while `PrivateChannels` and `PresenceChannels` represent private channels that require [channel authorization](#authorizing-channels):"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 330
# File: docs/master/broadcasting.md, line: 330
#, no-wrap
msgid ""
"    use App\\Models\\User;\n"
"    use Illuminate\\Broadcasting\\Channel;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Broadcasting\\PresenceChannel;\n"
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 334
# File: docs/8.x/broadcasting.md, line: 486
# File: docs/master/broadcasting.md, line: 334
# File: docs/master/broadcasting.md, line: 486
#, no-wrap
msgid ""
"    class ServerCreated implements ShouldBroadcast\n"
"    {\n"
"        use SerializesModels;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 341
# File: docs/master/broadcasting.md, line: 341
#, no-wrap
msgid ""
"        /**\n"
"         * The user that created the server.\n"
"         *\n"
"         * @var \\App\\Models\\User\n"
"         */\n"
"        public $user;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 352
# File: docs/master/broadcasting.md, line: 352
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new event instance.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @return void\n"
"         */\n"
"        public function __construct(User $user)\n"
"        {\n"
"            $this->user = $user;\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 363
# File: docs/master/broadcasting.md, line: 363
#, no-wrap
msgid ""
"        /**\n"
"         * Get the channels the event should broadcast on.\n"
"         *\n"
"         * @return Channel|array\n"
"         */\n"
"        public function broadcastOn()\n"
"        {\n"
"            return new PrivateChannel('user.'.$this->user->id);\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 365
# File: docs/master/broadcasting.md, line: 365
msgid "After implementing the `ShouldBroadcast` interface, you only need to [fire the event](/docs/{{version}}/events) as you normally would. Once the event has been fired, a [queued job](/docs/{{version}}/queues) will automatically broadcast the event using your specified broadcast driver."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 367
# File: docs/master/broadcasting.md, line: 367
#, no-wrap
msgid "<a name=\"broadcast-name\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 367
# File: docs/master/broadcasting.md, line: 367
#, no-wrap
msgid "Broadcast Name"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 370
# File: docs/master/broadcasting.md, line: 370
msgid "By default, Laravel will broadcast the event using the event's class name. However, you may customize the broadcast name by defining a `broadcastAs` method on the event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 380
# File: docs/master/broadcasting.md, line: 380
#, no-wrap
msgid ""
"    /**\n"
"     * The event's broadcast name.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function broadcastAs()\n"
"    {\n"
"        return 'server.created';\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 382
# File: docs/master/broadcasting.md, line: 382
msgid "If you customize the broadcast name using the `broadcastAs` method, you should make sure to register your listener with a leading `.` character. This will instruct Echo to not prepend the application's namespace to the event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 386
# File: docs/master/broadcasting.md, line: 386
#, no-wrap
msgid ""
"    .listen('.server.created', function (e) {\n"
"        ....\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 388
# File: docs/master/broadcasting.md, line: 388
#, no-wrap
msgid "<a name=\"broadcast-data\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 388
# File: docs/master/broadcasting.md, line: 388
#, no-wrap
msgid "Broadcast Data"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 391
# File: docs/master/broadcasting.md, line: 391
msgid "When an event is broadcast, all of its `public` properties are automatically serialized and broadcast as the event's payload, allowing you to access any of its public data from your JavaScript application. So, for example, if your event has a single public `$user` property that contains an Eloquent model, the event's broadcast payload would be:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 399
# File: docs/master/broadcasting.md, line: 399
#, no-wrap
msgid ""
"    {\n"
"        \"user\": {\n"
"            \"id\": 1,\n"
"            \"name\": \"Patrick Stewart\"\n"
"            ...\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 401
# File: docs/master/broadcasting.md, line: 401
msgid "However, if you wish to have more fine-grained control over your broadcast payload, you may add a `broadcastWith` method to your event. This method should return the array of data that you wish to broadcast as the event payload:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 411
# File: docs/master/broadcasting.md, line: 411
#, no-wrap
msgid ""
"    /**\n"
"     * Get the data to broadcast.\n"
"     *\n"
"     * @return array\n"
"     */\n"
"    public function broadcastWith()\n"
"    {\n"
"        return ['id' => $this->user->id];\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 413
# File: docs/master/broadcasting.md, line: 413
#, no-wrap
msgid "<a name=\"broadcast-queue\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 413
# File: docs/master/broadcasting.md, line: 413
#, no-wrap
msgid "Broadcast Queue"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 416
# File: docs/master/broadcasting.md, line: 416
msgid "By default, each broadcast event is placed on the default queue for the default queue connection specified in your `queue.php` configuration file. You may customize the queue connection and name used by the broadcaster by defining `connection` and `queue` properties on your event class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 423
# File: docs/master/broadcasting.md, line: 423
#, no-wrap
msgid ""
"    /**\n"
"     * The name of the queue connection to use when broadcasting the event.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $connection = 'redis';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 430
# File: docs/master/broadcasting.md, line: 430
#, no-wrap
msgid ""
"    /**\n"
"     * The name of the queue on which to place the broadcasting job.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public $queue = 'default';\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 432
# File: docs/master/broadcasting.md, line: 432
msgid "Alternatively, you may customize the queue name by defining a `broadcastQueue` method on your event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 442
# File: docs/master/broadcasting.md, line: 442
#, no-wrap
msgid ""
"    /**\n"
"     * The name of the queue on which to place the broadcasting job.\n"
"     *\n"
"     * @return string\n"
"     */\n"
"    public function broadcastQueue()\n"
"    {\n"
"        return 'default';\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 444
# File: docs/master/broadcasting.md, line: 444
msgid "If you would like to broadcast your event using the `sync` queue instead of the default queue driver, you can implement the `ShouldBroadcastNow` interface instead of `ShouldBroadcast`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 448
# File: docs/master/broadcasting.md, line: 448
#, no-wrap
msgid "    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 453
# File: docs/master/broadcasting.md, line: 453
#, no-wrap
msgid ""
"    class OrderShipmentStatusUpdated implements ShouldBroadcastNow\n"
"    {\n"
"        //\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 455
# File: docs/master/broadcasting.md, line: 455
#, no-wrap
msgid "<a name=\"broadcast-conditions\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 455
# File: docs/master/broadcasting.md, line: 455
#, no-wrap
msgid "Broadcast Conditions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 458
# File: docs/master/broadcasting.md, line: 458
msgid "Sometimes you want to broadcast your event only if a given condition is true. You may define these conditions by adding a `broadcastWhen` method to your event class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 468
# File: docs/master/broadcasting.md, line: 468
#, no-wrap
msgid ""
"    /**\n"
"     * Determine if this event should broadcast.\n"
"     *\n"
"     * @return bool\n"
"     */\n"
"    public function broadcastWhen()\n"
"    {\n"
"        return $this->order->value > 100;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 470
# File: docs/master/broadcasting.md, line: 470
#, no-wrap
msgid "<a name=\"broadcasting-and-database-transactions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 470
# File: docs/master/broadcasting.md, line: 470
#, no-wrap
msgid "Broadcasting & Database Transactions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 473
# File: docs/master/broadcasting.md, line: 473
msgid "When broadcast events are dispatched within database transactions, they may be processed by the queue before the database transaction has committed. When this happens, any updates you have made to models or database records during the database transaction may not yet be reflected in the database. In addition, any models or database records created within the transaction may not exist in the database. If your event depends on these models, unexpected errors can occur when the job that broadcasts the event is processed."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 475
# File: docs/master/broadcasting.md, line: 475
msgid "If your queue connection's `after_commit` configuration option is set to `false`, you may still indicate that a particular broadcast event should be dispatched after all open database transactions have been committed by defining an `$afterCommit` property on the event class:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 482
# File: docs/master/broadcasting.md, line: 482
#, no-wrap
msgid ""
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 489
# File: docs/master/broadcasting.md, line: 489
#, no-wrap
msgid ""
"        public $afterCommit = true;\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 491
# File: docs/master/broadcasting.md, line: 491
#, no-wrap
msgid "> {tip} To learn more about working around these issues, please review the documentation regarding [queued jobs and database transactions](/docs/{{version}}/queues#jobs-and-database-transactions).\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 493
# File: docs/master/broadcasting.md, line: 493
#, no-wrap
msgid "<a name=\"authorizing-channels\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 496
# File: docs/master/broadcasting.md, line: 496
msgid "Private channels require you to authorize that the currently authenticated user can actually listen on the channel. This is accomplished by making an HTTP request to your Laravel application with the channel name and allowing your application to determine if the user can listen on that channel. When using [Laravel Echo](#client-side-installation), the HTTP request to authorize subscriptions to private channels will be made automatically; however, you do need to define the proper routes to respond to these requests."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 498
# File: docs/master/broadcasting.md, line: 498
#, no-wrap
msgid "<a name=\"defining-authorization-routes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 498
# File: docs/master/broadcasting.md, line: 498
#, no-wrap
msgid "Defining Authorization Routes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 501
# File: docs/master/broadcasting.md, line: 501
msgid "Thankfully, Laravel makes it easy to define the routes to respond to channel authorization requests. In the `App\\Providers\\BroadcastServiceProvider` included with your Laravel application, you will see a call to the `Broadcast::routes` method. This method will register the `/broadcasting/auth` route to handle authorization requests:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 503
# File: docs/master/broadcasting.md, line: 503
#, no-wrap
msgid "    Broadcast::routes();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 505
# File: docs/master/broadcasting.md, line: 505
msgid "The `Broadcast::routes` method will automatically place its routes within the `web` middleware group; however, you may pass an array of route attributes to the method if you would like to customize the assigned attributes:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 507
# File: docs/master/broadcasting.md, line: 507
#, no-wrap
msgid "    Broadcast::routes($attributes);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 509
# File: docs/master/broadcasting.md, line: 509
#, no-wrap
msgid "<a name=\"customizing-the-authorization-endpoint\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 509
# File: docs/master/broadcasting.md, line: 509
#, no-wrap
msgid "Customizing The Authorization Endpoint"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 512
# File: docs/master/broadcasting.md, line: 512
msgid "By default, Echo will use the `/broadcasting/auth` endpoint to authorize channel access. However, you may specify your own authorization endpoint by passing the `authEndpoint` configuration option to your Echo instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 518
# File: docs/master/broadcasting.md, line: 518
#, no-wrap
msgid ""
"    window.Echo = new Echo({\n"
"        broadcaster: 'pusher',\n"
"        // ...\n"
"        authEndpoint: '/custom/endpoint/auth'\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 520
# File: docs/master/broadcasting.md, line: 520
#, no-wrap
msgid "<a name=\"customizing-the-authorization-request\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 520
# File: docs/master/broadcasting.md, line: 520
#, no-wrap
msgid "Customizing The Authorization Request"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 523
# File: docs/master/broadcasting.md, line: 523
msgid "You can customize how Laravel Echo performs authorization requests by providing a custom authorizer when initializing Echo:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 543
# File: docs/master/broadcasting.md, line: 543
#, no-wrap
msgid ""
"    window.Echo = new Echo({\n"
"        // ...\n"
"        authorizer: (channel, options) => {\n"
"            return {\n"
"                authorize: (socketId, callback) => {\n"
"                    axios.post('/api/broadcasting/auth', {\n"
"                        socket_id: socketId,\n"
"                        channel_name: channel.name\n"
"                    })\n"
"                    .then(response => {\n"
"                        callback(false, response.data);\n"
"                    })\n"
"                    .catch(error => {\n"
"                        callback(true, error);\n"
"                    });\n"
"                }\n"
"            };\n"
"        },\n"
"    })\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 545
# File: docs/master/broadcasting.md, line: 545
#, no-wrap
msgid "<a name=\"defining-authorization-callbacks\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 545
# File: docs/master/broadcasting.md, line: 545
#, no-wrap
msgid "Defining Authorization Callbacks"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 548
# File: docs/master/broadcasting.md, line: 548
msgid "Next, we need to define the logic that will actually determine if the currently authenticated user can listen to a given channel. This is done in the `routes/channels.php` file that is included with your application. In this file, you may use the `Broadcast::channel` method to register channel authorization callbacks:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 558
# File: docs/master/broadcasting.md, line: 558
#, no-wrap
msgid "<a name=\"authorization-callback-model-binding\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 558
# File: docs/master/broadcasting.md, line: 558
#, no-wrap
msgid "Authorization Callback Model Binding"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 561
# File: docs/master/broadcasting.md, line: 561
msgid "Just like HTTP routes, channel routes may also take advantage of implicit and explicit [route model binding](/docs/{{version}}/routing#route-model-binding). For example, instead of receiving a string or numeric order ID, you may request an actual `Order` model instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 567
# File: docs/master/broadcasting.md, line: 567
#, no-wrap
msgid ""
"    Broadcast::channel('orders.{order}', function ($user, Order $order) {\n"
"        return $user->id === $order->user_id;\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 569
# File: docs/master/broadcasting.md, line: 569
#, no-wrap
msgid "> {note} Unlike HTTP route model binding, channel model binding does not support automatic [implicit model binding scoping](/docs/{{version}}/routing#implicit-model-binding-scoping). However, this is rarely a problem because most channels can be scoped based on a single model's unique, primary key.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 571
# File: docs/master/broadcasting.md, line: 571
#, no-wrap
msgid "<a name=\"authorization-callback-authentication\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 571
# File: docs/master/broadcasting.md, line: 571
#, no-wrap
msgid "Authorization Callback Authentication"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 574
# File: docs/master/broadcasting.md, line: 574
msgid "Private and presence broadcast channels authenticate the current user via your application's default authentication guard. If the user is not authenticated, channel authorization is automatically denied and the authorization callback is never executed. However, you may assign multiple, custom guards that should authenticate the incoming request if necessary:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 578
# File: docs/master/broadcasting.md, line: 578
#, no-wrap
msgid ""
"    Broadcast::channel('channel', function () {\n"
"        // ...\n"
"    }, ['guards' => ['web', 'admin']]);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 580
# File: docs/master/broadcasting.md, line: 580
#, no-wrap
msgid "<a name=\"defining-channel-classes\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 580
# File: docs/master/broadcasting.md, line: 580
#, no-wrap
msgid "Defining Channel Classes"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 583
# File: docs/master/broadcasting.md, line: 583
msgid "If your application is consuming many different channels, your `routes/channels.php` file could become bulky. So, instead of using closures to authorize channels, you may use channel classes. To generate a channel class, use the `make:channel` Artisan command. This command will place a new channel class in the `App/Broadcasting` directory."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 585
# File: docs/master/broadcasting.md, line: 585
#, no-wrap
msgid "    php artisan make:channel OrderChannel\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 587
# File: docs/master/broadcasting.md, line: 587
msgid "Next, register your channel in your `routes/channels.php` file:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 589
# File: docs/master/broadcasting.md, line: 589
#, no-wrap
msgid "    use App\\Broadcasting\\OrderChannel;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 591
# File: docs/master/broadcasting.md, line: 591
#, no-wrap
msgid "    Broadcast::channel('orders.{order}', OrderChannel::class);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 593
# File: docs/master/broadcasting.md, line: 593
msgid "Finally, you may place the authorization logic for your channel in the channel class' `join` method. This `join` method will house the same logic you would have typically placed in your channel authorization closure. You may also take advantage of channel model binding:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 597
# File: docs/master/broadcasting.md, line: 597
#, no-wrap
msgid "    namespace App\\Broadcasting;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 600
# File: docs/master/broadcasting.md, line: 600
#, no-wrap
msgid ""
"    use App\\Models\\Order;\n"
"    use App\\Models\\User;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 612
# File: docs/master/broadcasting.md, line: 612
#, no-wrap
msgid ""
"    class OrderChannel\n"
"    {\n"
"        /**\n"
"         * Create a new channel instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 625
# File: docs/master/broadcasting.md, line: 625
#, no-wrap
msgid ""
"        /**\n"
"         * Authenticate the user's access to the channel.\n"
"         *\n"
"         * @param  \\App\\Models\\User  $user\n"
"         * @param  \\App\\Models\\Order  $order\n"
"         * @return array|bool\n"
"         */\n"
"        public function join(User $user, Order $order)\n"
"        {\n"
"            return $user->id === $order->user_id;\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 627
# File: docs/master/broadcasting.md, line: 627
#, no-wrap
msgid "> {tip} Like many other classes in Laravel, channel classes will automatically be resolved by the [service container](/docs/{{version}}/container). So, you may type-hint any dependencies required by your channel in its constructor.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 629
# File: docs/master/broadcasting.md, line: 629
#, no-wrap
msgid "<a name=\"broadcasting-events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 629
# File: docs/master/broadcasting.md, line: 629
#, no-wrap
msgid "Broadcasting Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 632
# File: docs/master/broadcasting.md, line: 632
msgid "Once you have defined an event and marked it with the `ShouldBroadcast` interface, you only need to fire the event using the event's dispatch method. The event dispatcher will notice that the event is marked with the `ShouldBroadcast` interface and will queue the event for broadcasting:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 638
# File: docs/master/broadcasting.md, line: 638
#, no-wrap
msgid "<a name=\"only-to-others\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 638
# File: docs/master/broadcasting.md, line: 638
#, no-wrap
msgid "Only To Others"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 641
# File: docs/master/broadcasting.md, line: 641
msgid "When building an application that utilizes event broadcasting, you may occasionally need to broadcast an event to all subscribers to a given channel except for the current user. You may accomplish this using the `broadcast` helper and the `toOthers` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 645
# File: docs/master/broadcasting.md, line: 645
#, no-wrap
msgid "    broadcast(new OrderShipmentStatusUpdated($update))->toOthers();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 647
# File: docs/master/broadcasting.md, line: 647
msgid "To better understand when you may want to use the `toOthers` method, let's imagine a task list application where a user may create a new task by entering a task name. To create a task, your application might make a request to a `/task` URL which broadcasts the task's creation and returns a JSON representation of the new task. When your JavaScript application receives the response from the end-point, it might directly insert the new task into its task list like so:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 652
# File: docs/master/broadcasting.md, line: 652
#, no-wrap
msgid ""
"    axios.post('/task', task)\n"
"        .then((response) => {\n"
"            this.tasks.push(response.data);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 654
# File: docs/master/broadcasting.md, line: 654
msgid "However, remember that we also broadcast the task's creation. If your JavaScript application is also listening for this event in order to add tasks to the task list, you will have duplicate tasks in your list: one from the end-point and one from the broadcast. You may solve this by using the `toOthers` method to instruct the broadcaster to not broadcast the event to the current user."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 656
# File: docs/master/broadcasting.md, line: 656
#, no-wrap
msgid "> {note} Your event must use the `Illuminate\\Broadcasting\\InteractsWithSockets` trait in order to call the `toOthers` method.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 658
# File: docs/master/broadcasting.md, line: 658
#, no-wrap
msgid "<a name=\"only-to-others-configuration\"></a>\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 661
# File: docs/master/broadcasting.md, line: 661
msgid "When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using a global [Axios](https://github.com/mzabriskie/axios) instance to make HTTP requests from your JavaScript application, the socket ID will automatically be attached to every outgoing request as a `X-Socket-ID` header. Then, when you call the `toOthers` method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 663
# File: docs/master/broadcasting.md, line: 663
msgid "If you are not using a global Axios instance, you will need to manually configure your JavaScript application to send the `X-Socket-ID` header with all outgoing requests. You may retrieve the socket ID using the `Echo.socketId` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 665
# File: docs/master/broadcasting.md, line: 665
#, no-wrap
msgid "    var socketId = Echo.socketId();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 667
# File: docs/master/broadcasting.md, line: 667
#, no-wrap
msgid "<a name=\"customizing-the-connection\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 667
# File: docs/master/broadcasting.md, line: 667
#, no-wrap
msgid "Customizing The Connection"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 670
# File: docs/master/broadcasting.md, line: 670
msgid "If your application interacts with multiple broadcast connections and you want to broadcast an event using a broadcaster other than your default, you may specify which connection to push an event to using the `via` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 674
# File: docs/master/broadcasting.md, line: 674
#, no-wrap
msgid "    broadcast(new OrderShipmentStatusUpdated($update))->via('pusher');\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 676
# File: docs/master/broadcasting.md, line: 676
msgid "Alternatively, you may specify the event's broadcast connection by calling the `broadcastVia` method within the event's constructor. However, before doing so, you should ensure that the event class uses the `InteractsWithBroadcasting` trait:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 688
# File: docs/master/broadcasting.md, line: 688
#, no-wrap
msgid ""
"    use Illuminate\\Broadcasting\\Channel;\n"
"    use Illuminate\\Broadcasting\\InteractsWithBroadcasting;\n"
"    use Illuminate\\Broadcasting\\InteractsWithSockets;\n"
"    use Illuminate\\Broadcasting\\PresenceChannel;\n"
"    use Illuminate\\Broadcasting\\PrivateChannel;\n"
"    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n"
"    use Illuminate\\Queue\\SerializesModels;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 692
# File: docs/master/broadcasting.md, line: 692
#, no-wrap
msgid ""
"    class OrderShipmentStatusUpdated implements ShouldBroadcast\n"
"    {\n"
"        use InteractsWithBroadcasting;\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 703
# File: docs/master/broadcasting.md, line: 703
#, no-wrap
msgid ""
"        /**\n"
"         * Create a new event instance.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function __construct()\n"
"        {\n"
"            $this->broadcastVia('pusher');\n"
"        }\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 705
# File: docs/master/broadcasting.md, line: 705
#, no-wrap
msgid "<a name=\"receiving-broadcasts\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 705
# File: docs/master/broadcasting.md, line: 705
#, no-wrap
msgid "Receiving Broadcasts"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 708
# File: docs/master/broadcasting.md, line: 708
#, no-wrap
msgid "<a name=\"listening-for-events\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 708
# File: docs/master/broadcasting.md, line: 708
#, no-wrap
msgid "Listening For Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 711
# File: docs/master/broadcasting.md, line: 711
msgid "Once you have [installed and instantiated Laravel Echo](#client-side-installation), you are ready to start listening for events that are broadcast from your Laravel application. First, use the `channel` method to retrieve an instance of a channel, then call the `listen` method to listen for a specified event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 712
# File: docs/master/broadcasting.md, line: 712
#, no-wrap
msgid ""
"Echo.channel(`orders.${this.order.id}`)\n"
"    .listen('OrderShipmentStatusUpdated', (e) => {\n"
"        console.log(e.order.name);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 720
# File: docs/master/broadcasting.md, line: 720
msgid "If you would like to listen for events on a private channel, use the `private` method instead. You may continue to chain calls to the `listen` method to listen for multiple events on a single channel:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 721
# File: docs/master/broadcasting.md, line: 721
#, no-wrap
msgid ""
"Echo.private(`orders.${this.order.id}`)\n"
"    .listen(...)\n"
"    .listen(...)\n"
"    .listen(...);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 729
# File: docs/master/broadcasting.md, line: 729
#, no-wrap
msgid "<a name=\"stop-listening-for-events\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 729
# File: docs/master/broadcasting.md, line: 729
#, no-wrap
msgid "Stop Listening For Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 732
# File: docs/master/broadcasting.md, line: 732
msgid "If you would like to stop listening to a given event without [leaving the channel](#leaving-a-channel), you may use the `stopListening` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 733
# File: docs/master/broadcasting.md, line: 733
#, no-wrap
msgid ""
"Echo.private(`orders.${this.order.id}`)\n"
"    .stopListening('OrderShipmentStatusUpdated')\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 739
# File: docs/master/broadcasting.md, line: 739
#, no-wrap
msgid "<a name=\"leaving-a-channel\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 739
# File: docs/master/broadcasting.md, line: 739
#, no-wrap
msgid "Leaving A Channel"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 742
# File: docs/master/broadcasting.md, line: 742
msgid "To leave a channel, you may call the `leaveChannel` method on your Echo instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 743
# File: docs/master/broadcasting.md, line: 743
#, no-wrap
msgid "Echo.leaveChannel(`orders.${this.order.id}`);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 748
# File: docs/master/broadcasting.md, line: 748
msgid "If you would like to leave a channel and also its associated private and presence channels, you may call the `leave` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 749
# File: docs/master/broadcasting.md, line: 749
#, no-wrap
msgid "Echo.leave(`orders.${this.order.id}`);\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 753
# File: docs/master/broadcasting.md, line: 753
#, no-wrap
msgid "<a name=\"namespaces\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 753
# File: docs/master/broadcasting.md, line: 753
#, no-wrap
msgid "Namespaces"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 756
# File: docs/master/broadcasting.md, line: 756
msgid "You may have noticed in the examples above that we did not specify the full `App\\Events` namespace for the event classes. This is because Echo will automatically assume the events are located in the `App\\Events` namespace. However, you may configure the root namespace when you instantiate Echo by passing a `namespace` configuration option:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 757
# File: docs/master/broadcasting.md, line: 757
#, no-wrap
msgid ""
"window.Echo = new Echo({\n"
"    broadcaster: 'pusher',\n"
"    // ...\n"
"    namespace: 'App.Other.Namespace'\n"
"});\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 766
# File: docs/master/broadcasting.md, line: 766
msgid "Alternatively, you may prefix event classes with a `.` when subscribing to them using Echo. This will allow you to always specify the fully-qualified class name:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 767
# File: docs/master/broadcasting.md, line: 767
#, no-wrap
msgid ""
"Echo.channel('orders')\n"
"    .listen('.Namespace\\\\Event\\\\Class', (e) => {\n"
"        //\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 775
# File: docs/master/broadcasting.md, line: 775
#, no-wrap
msgid "<a name=\"presence-channels\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 775
# File: docs/master/broadcasting.md, line: 775
#, no-wrap
msgid "Presence Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 778
# File: docs/master/broadcasting.md, line: 778
msgid "Presence channels build on the security of private channels while exposing the additional feature of awareness of who is subscribed to the channel. This makes it easy to build powerful, collaborative application features such as notifying users when another user is viewing the same page or listing the inhabitants of a chat room."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 780
# File: docs/master/broadcasting.md, line: 780
#, no-wrap
msgid "<a name=\"authorizing-presence-channels\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 780
# File: docs/master/broadcasting.md, line: 780
#, no-wrap
msgid "Authorizing Presence Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 783
# File: docs/master/broadcasting.md, line: 783
msgid "All presence channels are also private channels; therefore, users must be [authorized to access them](#authorizing-channels). However, when defining authorization callbacks for presence channels, you will not return `true` if the user is authorized to join the channel. Instead, you should return an array of data about the user."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 785
# File: docs/master/broadcasting.md, line: 785
msgid "The data returned by the authorization callback will be made available to the presence channel event listeners in your JavaScript application. If the user is not authorized to join the presence channel, you should return `false` or `null`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 791
# File: docs/master/broadcasting.md, line: 791
#, no-wrap
msgid ""
"    Broadcast::channel('chat.{roomId}', function ($user, $roomId) {\n"
"        if ($user->canJoinRoom($roomId)) {\n"
"            return ['id' => $user->id, 'name' => $user->name];\n"
"        }\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 793
# File: docs/master/broadcasting.md, line: 793
#, no-wrap
msgid "<a name=\"joining-presence-channels\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 793
# File: docs/master/broadcasting.md, line: 793
#, no-wrap
msgid "Joining Presence Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 796
# File: docs/master/broadcasting.md, line: 796
msgid "To join a presence channel, you may use Echo's `join` method. The `join` method will return a `PresenceChannel` implementation which, along with exposing the `listen` method, allows you to subscribe to the `here`, `joining`, and `leaving` events."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 810
# File: docs/master/broadcasting.md, line: 810
#, no-wrap
msgid ""
"    Echo.join(`chat.${roomId}`)\n"
"        .here((users) => {\n"
"            //\n"
"        })\n"
"        .joining((user) => {\n"
"            console.log(user.name);\n"
"        })\n"
"        .leaving((user) => {\n"
"            console.log(user.name);\n"
"        })\n"
"        .error((error) => {\n"
"            console.error(error);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 812
# File: docs/master/broadcasting.md, line: 812
msgid "The `here` callback will be executed immediately once the channel is joined successfully, and will receive an array containing the user information for all of the other users currently subscribed to the channel. The `joining` method will be executed when a new user joins a channel, while the `leaving` method will be executed when a user leaves the channel. The `error` method will be executed when the authentication endpoint returns a HTTP status code other than 200 or if there is a problem parsing the returned JSON."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 814
# File: docs/master/broadcasting.md, line: 814
#, no-wrap
msgid "<a name=\"broadcasting-to-presence-channels\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 814
# File: docs/master/broadcasting.md, line: 814
#, no-wrap
msgid "Broadcasting To Presence Channels"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 817
# File: docs/master/broadcasting.md, line: 817
msgid "Presence channels may receive events just like public or private channels. Using the example of a chatroom, we may want to broadcast `NewMessage` events to the room's presence channel. To do so, we'll return an instance of `PresenceChannel` from the event's `broadcastOn` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 827
# File: docs/master/broadcasting.md, line: 827
#, no-wrap
msgid ""
"    /**\n"
"     * Get the channels the event should broadcast on.\n"
"     *\n"
"     * @return Channel|array\n"
"     */\n"
"    public function broadcastOn()\n"
"    {\n"
"        return new PresenceChannel('room.'.$this->message->room_id);\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 829
# File: docs/master/broadcasting.md, line: 829
msgid "As with other events, you may use the `broadcast` helper and the `toOthers` method to exclude the current user from receiving the broadcast:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 831
# File: docs/master/broadcasting.md, line: 831
#, no-wrap
msgid "    broadcast(new NewMessage($message));\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 833
# File: docs/master/broadcasting.md, line: 833
#, no-wrap
msgid "    broadcast(new NewMessage($message))->toOthers();\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 835
# File: docs/master/broadcasting.md, line: 835
msgid "As typical of other types of events, you may listen for events sent to presence channels using Echo's `listen` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 843
# File: docs/master/broadcasting.md, line: 843
#, no-wrap
msgid ""
"    Echo.join(`chat.${roomId}`)\n"
"        .here(...)\n"
"        .joining(...)\n"
"        .leaving(...)\n"
"        .listen('NewMessage', (e) => {\n"
"            //\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 845
# File: docs/master/broadcasting.md, line: 845
#, no-wrap
msgid "<a name=\"model-broadcasting\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 845
# File: docs/master/broadcasting.md, line: 845
#, no-wrap
msgid "Model Broadcasting"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 848
# File: docs/master/broadcasting.md, line: 848
#, no-wrap
msgid "> {note} Before reading the following documentation about model broadcasting, we recommend you become familiar with the general concepts of Laravel's model broadcasting services as well as how to manually create and listen to broadcast events.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 850
# File: docs/master/broadcasting.md, line: 850
msgid "It is common to broadcast events when your application's [Eloquent models](/docs/{{version}}/eloquent) are created, updated, or deleted. Of course, this can easily be accomplished by manually [defining custom events for Eloquent model state changes](/docs/{{version}}/eloquent#events) and marking those events with the `ShouldBroadcast` interface."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 852
# File: docs/master/broadcasting.md, line: 852
msgid "However, if you are not using these events for any other purposes in your application, it can be cumbersome to create event classes for the sole purpose of broadcasting them. To remedy this, Laravel allows you to indicate that an Eloquent model should automatically broadcast its state changes."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 854
# File: docs/master/broadcasting.md, line: 854
msgid "To get started, your Eloquent model should use the `Illuminate\\Database\\Eloquent\\BroadcastsEvents` trait. In addition, the model should define a `broadcastsOn` method, which will return an array of channels that the model's events should broadcast on:"
msgstr ""
#
#. type: Code fence info string
# File: docs/8.x/broadcasting.md, line: 855
# File: docs/8.x/broadcasting.md, line: 894
# File: docs/8.x/broadcasting.md, line: 915
# File: docs/8.x/broadcasting.md, line: 942
# File: docs/8.x/broadcasting.md, line: 959
# File: docs/8.x/broadcasting.md, line: 965
# File: docs/8.x/broadcasting.md, line: 990
# File: docs/master/broadcasting.md, line: 855
# File: docs/master/broadcasting.md, line: 894
# File: docs/master/broadcasting.md, line: 915
# File: docs/master/broadcasting.md, line: 942
# File: docs/master/broadcasting.md, line: 959
# File: docs/master/broadcasting.md, line: 965
# File: docs/master/broadcasting.md, line: 990
#, no-wrap
msgid "php"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 855
# File: docs/master/broadcasting.md, line: 855
#, no-wrap
msgid ""
"<?php\n"
"\n"
"namespace App\\Models;\n"
"\n"
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"use Illuminate\\Database\\Eloquent\\BroadcastsEvents;\n"
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Database\\Eloquent\\Model;\n"
"\n"
"class Post extends Model\n"
"{\n"
"    use BroadcastsEvents, HasFactory;\n"
"\n"
"    /**\n"
"     * Get the user that the post belongs to.\n"
"     */\n"
"    public function user()\n"
"    {\n"
"        return $this->belongsTo(User::class);\n"
"    }\n"
"\n"
"    /**\n"
"     * Get the channels that model events should broadcast on.\n"
"     *\n"
"     * @param  string  $event\n"
"     * @return \\Illuminate\\Broadcasting\\Channel|array\n"
"     */\n"
"    public function broadcastOn($event)\n"
"    {\n"
"        return [$this, $this->user];\n"
"    }\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 891
# File: docs/master/broadcasting.md, line: 891
msgid "Once your model includes this trait and defines its broadcast channels, it will begin automatically broadcasting events when a model instance is created, updated, deleted, trashed, or restored."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 893
# File: docs/master/broadcasting.md, line: 893
msgid "In addition, you may have noticed that the `broadcastOn` method receives a string `$event` argument. This argument contains the type of event that has occurred on the model and will have a value of `created`, `updated`, `deleted`, `trashed`, or `restored`. By inspecting the value of this variable, you may determine which channels (if any) the model should broadcast to for a particular event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 894
# File: docs/master/broadcasting.md, line: 894
#, no-wrap
msgid ""
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Broadcasting\\Channel|array\n"
" */\n"
"public function broadcastOn($event)\n"
"{\n"
"    return match ($event) {\n"
"        'deleted' => [],\n"
"        default => [$this, $this->user],\n"
"    };\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 911
# File: docs/master/broadcasting.md, line: 911
#, no-wrap
msgid "<a name=\"customizing-model-broadcasting-event-creation\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 911
# File: docs/master/broadcasting.md, line: 911
#, no-wrap
msgid "Customizing Model Broadcasting Event Creation"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 914
# File: docs/master/broadcasting.md, line: 914
msgid "Occasionally, you may wish to customize how Laravel creates the underlying model broadcasting event. You may accomplish this by defining a `newBroadcastableEvent` method on your Eloquent model. This method should return an `Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred` instance:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 915
# File: docs/master/broadcasting.md, line: 915
#, no-wrap
msgid ""
"use Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred\n"
"\n"
"/**\n"
" * Create a new broadcastable model event for the model.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Database\\Eloquent\\BroadcastableModelEventOccurred\n"
" */\n"
"protected function newBroadcastableEvent($event)\n"
"{\n"
"    return (new BroadcastableModelEventOccurred(\n"
"        $this, $event\n"
"    ))->dontBroadcastToCurrentUser();\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 933
# File: docs/master/broadcasting.md, line: 933
#, no-wrap
msgid "<a name=\"model-broadcasting-conventions\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 933
# File: docs/master/broadcasting.md, line: 933
#, no-wrap
msgid "Model Broadcasting Conventions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 936
# File: docs/master/broadcasting.md, line: 936
#, no-wrap
msgid "<a name=\"model-broadcasting-channel-conventions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 936
# File: docs/master/broadcasting.md, line: 936
#, no-wrap
msgid "Channel Conventions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 939
# File: docs/master/broadcasting.md, line: 939
msgid "As you may have noticed, the `broadcastOn` method in the model example above did not return `Channel` instances. Instead, Eloquent models were returned directly. If an Eloquent model instance is returned by your model's `broadcastOn` method (or is contained in an array returned by the method), Laravel will automatically instantiate a private channel instance for the model using the model's class name and primary key identifier as the channel name."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 941
# File: docs/master/broadcasting.md, line: 941
msgid "So, an `App\\Models\\User` model with an `id` of `1` would be converted into a `Illuminate\\Broadcasting\\PrivateChannel` instance with a name of `App.Models.User.1`. Of course, in addition to returning Eloquent model instances from your model's `broadcastOn` method, you may return complete `Channel` instances in order to have full control over the model's channel names:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 942
# File: docs/master/broadcasting.md, line: 942
#, no-wrap
msgid ""
"use Illuminate\\Broadcasting\\PrivateChannel;\n"
"\n"
"/**\n"
" * Get the channels that model events should broadcast on.\n"
" *\n"
" * @param  string  $event\n"
" * @return \\Illuminate\\Broadcasting\\Channel|array\n"
" */\n"
"public function broadcastOn($event)\n"
"{\n"
"    return [new PrivateChannel('user.'.$this->id)];\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 958
# File: docs/master/broadcasting.md, line: 958
msgid "If you plan to explicitly return a channel instance from your model's `broadcastOn` method, you may pass an Eloquent model instance to the channel's constructor. When doing so, Laravel will use the model channel conventions discussed above to convert the Eloquent model into a channel name string:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 959
# File: docs/master/broadcasting.md, line: 959
#, no-wrap
msgid "return [new Channel($this->user)];\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 964
# File: docs/master/broadcasting.md, line: 964
msgid "If you need to determine the channel name of a model, you may call the `broadcastChannel` method on any model instance. For example, this method returns the string `App.Models.User.1` for a `App\\Models\\User` model with an `id` of `1`:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 965
# File: docs/master/broadcasting.md, line: 965
#, no-wrap
msgid "$user->broadcastChannel()\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 970
# File: docs/master/broadcasting.md, line: 970
#, no-wrap
msgid "<a name=\"model-broadcasting-event-conventions\"></a>\n"
msgstr ""
#
#. type: Title ####
# File: docs/8.x/broadcasting.md, line: 970
# File: docs/master/broadcasting.md, line: 970
#, no-wrap
msgid "Event Conventions"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 973
# File: docs/master/broadcasting.md, line: 973
msgid "Since model broadcast events are not associated with an \"actual\" event within your application's `App\\Events` directory, they are assigned a name and a payload based on conventions. Laravel's convention is to broadcast the event using the class name of the model (not including the namespace) and the name of the model event that triggered the broadcast."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 975
# File: docs/master/broadcasting.md, line: 975
msgid "So, for example, an update to the `App\\Models\\Post` model would broadcast an event to your client-side application as `PostUpdated` with the following payload:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 985
# File: docs/master/broadcasting.md, line: 985
#, no-wrap
msgid ""
"    {\n"
"        \"model\": {\n"
"            \"id\": 1,\n"
"            \"title\": \"My first post\"\n"
"            ...\n"
"        },\n"
"        ...\n"
"        \"socket\": \"someSocketId\",\n"
"    }\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 987
# File: docs/master/broadcasting.md, line: 987
msgid "The deletion of the `App\\Models\\User` model would broadcast an event named `UserDeleted`."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 989
# File: docs/master/broadcasting.md, line: 989
msgid "If you would like, you may define a custom broadcast name and payload by adding a `broadcastAs` and `broadcastWith` method to your model. These methods receive the name of the model event / operation that is occurring, allowing you to customize the event's name and payload for each model operation. If `null` is returned from the `broadcastAs` method, Laravel will use the model broadcasting event name conventions discussed above when broadcasting the event:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 990
# File: docs/master/broadcasting.md, line: 990
#, no-wrap
msgid ""
"/**\n"
" * The model event's broadcast name.\n"
" *\n"
" * @param  string  $event\n"
" * @return string|null\n"
" */\n"
"public function broadcastAs($event)\n"
"{\n"
"    return match ($event) {\n"
"        'created' => 'post.created',\n"
"        default => null,\n"
"    };\n"
"}\n"
"\n"
"/**\n"
" * Get the data to broadcast for the model.\n"
" *\n"
" * @param  string  $event\n"
" * @return array\n"
" */\n"
"public function broadcastWith($event)\n"
"{\n"
"    return match ($event) {\n"
"        'created' => ['title' => $this->title],\n"
"        default => ['model' => $this],\n"
"    };\n"
"}\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1021
# File: docs/master/broadcasting.md, line: 1021
#, no-wrap
msgid "<a name=\"listening-for-model-broadcasts\"></a>\n"
msgstr ""
#
#. type: Title ###
# File: docs/8.x/broadcasting.md, line: 1021
# File: docs/master/broadcasting.md, line: 1021
#, no-wrap
msgid "Listening For Model Broadcasts"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1024
# File: docs/master/broadcasting.md, line: 1024
msgid "Once you have added the `BroadcastsEvents` trait to your model and defined your model's `broadcastOn` method, you are ready to start listening for broadcasted model events within your client-side application. Before getting started, you may wish to consult the complete documentation on [listening for events](#listening-for-events)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1026
# File: docs/master/broadcasting.md, line: 1026
msgid "First, use the `private` method to retrieve an instance of a channel, then call the `listen` method to listen for a specified event. Typically, the channel name given to the `private` method should correspond to Laravel's [model broadcasting conventions](#model-broadcasting-conventions)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1028
# File: docs/master/broadcasting.md, line: 1028
msgid "Once you have obtained a channel instance, you may use the `listen` method to listen for a particular event. Since model broadcast events are not associated with an \"actual\" event within your application's `App\\Events` directory, the [event name](#model-broadcasting-event-conventions) must be prefixed with a `.` to indicate it does not belong to a particular namespace. Each model broadcast event has a `model` property which contains all of the broadcastable properties of the model:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1029
# File: docs/master/broadcasting.md, line: 1029
#, no-wrap
msgid ""
"Echo.private(`App.Models.User.${this.user.id}`)\n"
"    .listen('.PostUpdated', (e) => {\n"
"        console.log(e.model);\n"
"    });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1037
# File: docs/master/broadcasting.md, line: 1037
#, no-wrap
msgid "<a name=\"client-events\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 1037
# File: docs/master/broadcasting.md, line: 1037
#, no-wrap
msgid "Client Events"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1040
# File: docs/master/broadcasting.md, line: 1040
#, no-wrap
msgid "> {tip} When using [Pusher Channels](https://pusher.com/channels), you must enable the \"Client Events\" option in the \"App Settings\" section of your [application dashboard](https://dashboard.pusher.com/) in order to send client events.\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1042
# File: docs/master/broadcasting.md, line: 1042
msgid "Sometimes you may wish to broadcast an event to other connected clients without hitting your Laravel application at all. This can be particularly useful for things like \"typing\" notifications, where you want to alert users of your application that another user is typing a message on a given screen."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1044
# File: docs/master/broadcasting.md, line: 1044
msgid "To broadcast client events, you may use Echo's `whisper` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1049
# File: docs/master/broadcasting.md, line: 1049
#, no-wrap
msgid ""
"    Echo.private(`chat.${roomId}`)\n"
"        .whisper('typing', {\n"
"            name: this.user.name\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1051
# File: docs/master/broadcasting.md, line: 1051
msgid "To listen for client events, you may use the `listenForWhisper` method:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1056
# File: docs/master/broadcasting.md, line: 1056
#, no-wrap
msgid ""
"    Echo.private(`chat.${roomId}`)\n"
"        .listenForWhisper('typing', (e) => {\n"
"            console.log(e.name);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1058
# File: docs/master/broadcasting.md, line: 1058
#, no-wrap
msgid "<a name=\"notifications\"></a>\n"
msgstr ""
#
#. type: Title ##
# File: docs/8.x/broadcasting.md, line: 1058
# File: docs/master/broadcasting.md, line: 1058
#, no-wrap
msgid "Notifications"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1061
# File: docs/master/broadcasting.md, line: 1061
msgid "By pairing event broadcasting with [notifications](/docs/{{version}}/notifications), your JavaScript application may receive new notifications as they occur without needing to refresh the page. Before getting started, be sure to read over the documentation on using [the broadcast notification channel](/docs/{{version}}/notifications#broadcast-notifications)."
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1063
# File: docs/master/broadcasting.md, line: 1063
msgid "Once you have configured a notification to use the broadcast channel, you may listen for the broadcast events using Echo's `notification` method. Remember, the channel name should match the class name of the entity receiving the notifications:"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1068
# File: docs/master/broadcasting.md, line: 1068
#, no-wrap
msgid ""
"    Echo.private(`App.Models.User.${userId}`)\n"
"        .notification((notification) => {\n"
"            console.log(notification.type);\n"
"        });\n"
msgstr ""
#
#. type: Plain text
# File: docs/8.x/broadcasting.md, line: 1069
# File: docs/master/broadcasting.md, line: 1069
msgid "In this example, all notifications sent to `App\\Models\\User` instances via the `broadcast` channel would be received by the callback. A channel authorization callback for the `App.Models.User.{id}` channel is included in the default `BroadcastServiceProvider` that ships with the Laravel framework."
msgstr ""
