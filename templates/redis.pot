msgid ""
msgstr ""

#: ./docs/8.x/redis.md:1
#: ./docs/9.x/redis.md:1
#: ./docs/10.x/redis.md:1
#: ./docs/11.x/redis.md:1
#: ./docs/master/redis.md:1
msgid "Redis"
msgstr ""

#: ./docs/8.x/redis.md:3
#: ./docs/9.x/redis.md:3
#: ./docs/10.x/redis.md:3
#: ./docs/11.x/redis.md:3
#: ./docs/master/redis.md:3
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/redis.md:4
#: ./docs/9.x/redis.md:4
#: ./docs/10.x/redis.md:4
#: ./docs/11.x/redis.md:4
#: ./docs/master/redis.md:4
msgid "[Configuration](#configuration)"
msgstr ""

#: ./docs/8.x/redis.md:5
#: ./docs/9.x/redis.md:5
#: ./docs/10.x/redis.md:5
#: ./docs/11.x/redis.md:5
#: ./docs/master/redis.md:5
msgid "[Clusters](#clusters)"
msgstr ""

#: ./docs/8.x/redis.md:6
#: ./docs/9.x/redis.md:6
#: ./docs/10.x/redis.md:6
#: ./docs/11.x/redis.md:6
#: ./docs/master/redis.md:6
msgid "[Predis](#predis)"
msgstr ""

#: ./docs/10.x/redis.md:7
#: ./docs/11.x/redis.md:7
#: ./docs/master/redis.md:7
msgid "[PhpRedis](#phpredis)"
msgstr ""

#: ./docs/8.x/redis.md:7
#: ./docs/9.x/redis.md:7
msgid "[phpredis](#phpredis)"
msgstr ""

#: ./docs/8.x/redis.md:8
#: ./docs/9.x/redis.md:8
#: ./docs/10.x/redis.md:8
#: ./docs/11.x/redis.md:8
#: ./docs/master/redis.md:8
msgid "[Interacting With Redis](#interacting-with-redis)"
msgstr ""

#: ./docs/8.x/redis.md:9
#: ./docs/9.x/redis.md:9
#: ./docs/10.x/redis.md:9
#: ./docs/11.x/redis.md:9
#: ./docs/master/redis.md:9
msgid "[Transactions](#transactions)"
msgstr ""

#: ./docs/8.x/redis.md:10
#: ./docs/9.x/redis.md:10
#: ./docs/10.x/redis.md:10
#: ./docs/11.x/redis.md:10
#: ./docs/master/redis.md:10
msgid "[Pipelining Commands](#pipelining-commands)"
msgstr ""

#: ./docs/8.x/redis.md:11
#: ./docs/9.x/redis.md:11
#: ./docs/10.x/redis.md:11
#: ./docs/11.x/redis.md:11
#: ./docs/master/redis.md:11
msgid "[Pub / Sub](#pubsub)"
msgstr ""

#: ./docs/8.x/redis.md:13
#: ./docs/9.x/redis.md:13
#: ./docs/10.x/redis.md:13
#: ./docs/11.x/redis.md:13
#: ./docs/master/redis.md:13
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:14
#: ./docs/9.x/redis.md:14
#: ./docs/10.x/redis.md:14
#: ./docs/11.x/redis.md:14
#: ./docs/master/redis.md:14
msgid "Introduction"
msgstr ""

#: ./docs/10.x/redis.md:16
#: ./docs/11.x/redis.md:16
#: ./docs/master/redis.md:16
msgid "[Redis](https://redis.io) is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain [strings](https://redis.io/docs/data-types/strings/), [hashes](https://redis.io/docs/data-types/hashes/), [lists](https://redis.io/docs/data-types/lists/), [sets](https://redis.io/docs/data-types/sets/), and [sorted sets](https://redis.io/docs/data-types/sorted-sets/)."
msgstr ""

#: ./docs/8.x/redis.md:16
#: ./docs/9.x/redis.md:16
msgid "[Redis](https://redis.io) is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain [strings](https://redis.io/topics/data-types#strings), [hashes](https://redis.io/topics/data-types#hashes), [lists](https://redis.io/topics/data-types#lists), [sets](https://redis.io/topics/data-types#sets), and [sorted sets](https://redis.io/topics/data-types#sorted-sets)."
msgstr ""

#: ./docs/10.x/redis.md:18
#: ./docs/11.x/redis.md:18
#: ./docs/master/redis.md:18
msgid "Before using Redis with Laravel, we encourage you to install and use the [PhpRedis](https://github.com/phpredis/phpredis) PHP extension via PECL. The extension is more complex to install compared to \"user-land\" PHP packages but may yield better performance for applications that make heavy use of Redis. If you are using [Laravel Sail](/docs/{{version}}/sail), this extension is already installed in your application's Docker container."
msgstr ""

#: ./docs/8.x/redis.md:18
#: ./docs/9.x/redis.md:18
msgid "Before using Redis with Laravel, we encourage you to install and use the [phpredis](https://github.com/phpredis/phpredis) PHP extension via PECL. The extension is more complex to install compared to \"user-land\" PHP packages but may yield better performance for applications that make heavy use of Redis. If you are using [Laravel Sail](/docs/{{version}}/sail), this extension is already installed in your application's Docker container."
msgstr ""

#: ./docs/10.x/redis.md:20
#: ./docs/11.x/redis.md:20
#: ./docs/master/redis.md:20
msgid "If you are unable to install the PhpRedis extension, you may install the `predis/predis` package via Composer. Predis is a Redis client written entirely in PHP and does not require any additional extensions:"
msgstr ""

#: ./docs/8.x/redis.md:20
#: ./docs/9.x/redis.md:20
msgid "If you are unable to install the phpredis extension, you may install the `predis/predis` package via Composer. Predis is a Redis client written entirely in PHP and does not require any additional extensions:"
msgstr ""

#: ./docs/11.x/redis.md:22
#: ./docs/master/redis.md:22
msgid "composer require predis/predis:^2.0"
msgstr ""

#: ./docs/8.x/redis.md:22
#: ./docs/9.x/redis.md:22
#: ./docs/10.x/redis.md:22
msgid "composer require predis/predis"
msgstr ""

#: ./docs/8.x/redis.md:26
#: ./docs/9.x/redis.md:26
#: ./docs/10.x/redis.md:26
#: ./docs/11.x/redis.md:26
#: ./docs/master/redis.md:26
#~ msgctxt "P"
#~ msgid "<a name=\"configuration\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:27
#: ./docs/9.x/redis.md:27
#: ./docs/10.x/redis.md:27
#: ./docs/11.x/redis.md:27
#: ./docs/master/redis.md:27
msgid "Configuration"
msgstr ""

#: ./docs/8.x/redis.md:29
#: ./docs/9.x/redis.md:29
#: ./docs/10.x/redis.md:29
#: ./docs/11.x/redis.md:29
#: ./docs/master/redis.md:29
msgid "You may configure your application's Redis settings via the `config/database.php` configuration file. Within this file, you will see a `redis` array containing the Redis servers utilized by your application:"
msgstr ""

#: ./docs/11.x/redis.md:31
#: ./docs/master/redis.md:31
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n"
"    ],\n"
"\n"
"    'default' => [\n"
"        'url' => env('REDIS_URL'),\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'username' => env('REDIS_USERNAME'),\n"
"        'password' => env('REDIS_PASSWORD'),\n"
"        'port' => env('REDIS_PORT', '6379'),\n"
"        'database' => env('REDIS_DB', '0'),\n"
"    ],\n"
"\n"
"    'cache' => [\n"
"        'url' => env('REDIS_URL'),\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'username' => env('REDIS_USERNAME'),\n"
"        'password' => env('REDIS_PASSWORD'),\n"
"        'port' => env('REDIS_PORT', '6379'),\n"
"        'database' => env('REDIS_CACHE_DB', '1'),\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:31
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'default' => [\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD', null),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_DB', 0),\n"
"    ],\n"
"\n"
"    'cache' => [\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD', null),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_CACHE_DB', 1),\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/9.x/redis.md:31
#: ./docs/10.x/redis.md:31
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'default' => [\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD'),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_DB', 0),\n"
"    ],\n"
"\n"
"    'cache' => [\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD'),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_CACHE_DB', 1),\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:51
#: ./docs/9.x/redis.md:51
#: ./docs/10.x/redis.md:51
#: ./docs/11.x/redis.md:60
#: ./docs/master/redis.md:60
msgid "Each Redis server defined in your configuration file is required to have a name, host, and a port unless you define a single URL to represent the Redis connection:"
msgstr ""

#: ./docs/8.x/redis.md:53
#: ./docs/9.x/redis.md:53
#: ./docs/10.x/redis.md:53
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'default' => [\n"
"        'url' => 'tcp://127.0.0.1:6379?database=0',\n"
"    ],\n"
"\n"
"    'cache' => [\n"
"        'url' => 'tls://user:password@127.0.0.1:6380?database=1',\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:62
#: ./docs/master/redis.md:62
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n"
"    ],\n"
"\n"
"    'default' => [\n"
"        'url' => 'tcp://127.0.0.1:6379?database=0',\n"
"    ],\n"
"\n"
"    'cache' => [\n"
"        'url' => 'tls://user:password@127.0.0.1:6380?database=1',\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:67
#: ./docs/9.x/redis.md:67
#: ./docs/10.x/redis.md:67
#: ./docs/11.x/redis.md:81
#: ./docs/master/redis.md:81
#~ msgctxt "P"
#~ msgid "<a name=\"configuring-the-connection-scheme\"></a>"
#~ msgstr ""

#: ./docs/10.x/redis.md:68
#: ./docs/11.x/redis.md:82
#: ./docs/master/redis.md:82
msgid "Configuring the Connection Scheme"
msgstr ""

#: ./docs/8.x/redis.md:68
#: ./docs/9.x/redis.md:68
msgid "Configuring The Connection Scheme"
msgstr ""

#: ./docs/8.x/redis.md:70
#: ./docs/9.x/redis.md:70
#: ./docs/10.x/redis.md:70
#: ./docs/11.x/redis.md:84
#: ./docs/master/redis.md:84
msgid "By default, Redis clients will use the `tcp` scheme when connecting to your Redis servers; however, you may use TLS / SSL encryption by specifying a `scheme` configuration option in your Redis server's configuration array:"
msgstr ""

#: ./docs/8.x/redis.md:72
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'default' => [\n"
"        'scheme' => 'tls',\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD', null),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_DB', 0),\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/9.x/redis.md:72
#: ./docs/10.x/redis.md:72
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'default' => [\n"
"        'scheme' => 'tls',\n"
"        'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"        'password' => env('REDIS_PASSWORD'),\n"
"        'port' => env('REDIS_PORT', 6379),\n"
"        'database' => env('REDIS_DB', 0),\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:86
#: ./docs/master/redis.md:86
msgid ""
"'default' => [\n"
"    'scheme' => 'tls',\n"
"    'url' => env('REDIS_URL'),\n"
"    'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"    'username' => env('REDIS_USERNAME'),\n"
"    'password' => env('REDIS_PASSWORD'),\n"
"    'port' => env('REDIS_PORT', '6379'),\n"
"    'database' => env('REDIS_DB', '0'),\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:86
#: ./docs/9.x/redis.md:86
#: ./docs/10.x/redis.md:86
#: ./docs/11.x/redis.md:96
#: ./docs/master/redis.md:96
#~ msgctxt "P"
#~ msgid "<a name=\"clusters\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:87
#: ./docs/9.x/redis.md:87
#: ./docs/10.x/redis.md:87
#: ./docs/11.x/redis.md:97
#: ./docs/master/redis.md:97
msgid "Clusters"
msgstr ""

#: ./docs/8.x/redis.md:89
#: ./docs/9.x/redis.md:89
#: ./docs/10.x/redis.md:89
#: ./docs/11.x/redis.md:99
#: ./docs/master/redis.md:99
msgid "If your application is utilizing a cluster of Redis servers, you should define these clusters within a `clusters` key of your Redis configuration. This configuration key does not exist by default so you will need to create it within your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:91
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'clusters' => [\n"
"        'default' => [\n"
"            [\n"
"                'host' => env('REDIS_HOST', 'localhost'),\n"
"                'password' => env('REDIS_PASSWORD', null),\n"
"                'port' => env('REDIS_PORT', 6379),\n"
"                'database' => 0,\n"
"            ],\n"
"        ],\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/9.x/redis.md:91
#: ./docs/10.x/redis.md:91
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'clusters' => [\n"
"        'default' => [\n"
"            [\n"
"                'host' => env('REDIS_HOST', 'localhost'),\n"
"                'password' => env('REDIS_PASSWORD'),\n"
"                'port' => env('REDIS_PORT', 6379),\n"
"                'database' => 0,\n"
"            ],\n"
"        ],\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:101
#: ./docs/master/redis.md:101
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n"
"    ],\n"
"\n"
"    'clusters' => [\n"
"        'default' => [\n"
"            [\n"
"                'url' => env('REDIS_URL'),\n"
"                'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"                'username' => env('REDIS_USERNAME'),\n"
"                'password' => env('REDIS_PASSWORD'),\n"
"                'port' => env('REDIS_PORT', '6379'),\n"
"                'database' => env('REDIS_DB', '0'),\n"
"            ],\n"
"        ],\n"
"    ],\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:108
#: ./docs/9.x/redis.md:108
#: ./docs/10.x/redis.md:108
msgid "By default, clusters will perform client-side sharding across your nodes, allowing you to pool nodes and create a large amount of available RAM. However, client-side sharding does not handle failover; therefore, it is primarily suited for transient cached data that is available from another primary data store."
msgstr ""

#: ./docs/8.x/redis.md:110
#: ./docs/9.x/redis.md:110
#: ./docs/10.x/redis.md:110
msgid "If you would like to use native Redis clustering instead of client-side sharding, you may specify this by setting the `options.cluster` configuration value to `redis` within your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:112
#: ./docs/9.x/redis.md:112
#: ./docs/10.x/redis.md:112
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"    ],\n"
"\n"
"    'clusters' => [\n"
"        // ...\n"
"    ],\n"
"\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:126
#: ./docs/master/redis.md:126
msgid "By default, Laravel will use native Redis clustering since the `options.cluster` configuration value is set to `redis`. Redis clustering is a great default option, as it gracefully handles failover."
msgstr ""

#: ./docs/8.x/redis.md:126
#: ./docs/9.x/redis.md:126
#: ./docs/10.x/redis.md:126
#: ./docs/11.x/redis.md:143
#: ./docs/master/redis.md:143
#~ msgctxt "P"
#~ msgid "<a name=\"predis\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:127
#: ./docs/9.x/redis.md:127
#: ./docs/10.x/redis.md:127
#: ./docs/11.x/redis.md:144
#: ./docs/master/redis.md:144
msgid "Predis"
msgstr ""

#: ./docs/11.x/redis.md:128
#: ./docs/master/redis.md:128
msgid "Laravel also supports client-side sharding. However, client-side sharding does not handle failover; therefore, it is primarily suited for transient cached data that is available from another primary data store."
msgstr ""

#: ./docs/8.x/redis.md:129
#: ./docs/9.x/redis.md:129
#: ./docs/10.x/redis.md:129
#: ./docs/11.x/redis.md:146
#: ./docs/master/redis.md:146
msgid "If you would like your application to interact with Redis via the Predis package, you should ensure the `REDIS_CLIENT` environment variable's value is `predis`:"
msgstr ""

#: ./docs/11.x/redis.md:130
#: ./docs/master/redis.md:130
msgid "If you would like to use client-side sharding instead of native Redis clustering, you may remove the `options.cluster` configuration value within your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:131
#: ./docs/9.x/redis.md:131
#: ./docs/10.x/redis.md:131
#: ./docs/11.x/redis.md:148
#: ./docs/master/redis.md:148
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'predis'),\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:132
#: ./docs/master/redis.md:132
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'clusters' => [\n"
"        // ...\n"
"    ],\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:138
#: ./docs/9.x/redis.md:138
#: ./docs/10.x/redis.md:138
msgid "In addition to the default `host`, `port`, `database`, and `password` server configuration options, Predis supports additional [connection parameters](https://github.com/nrk/predis/wiki/Connection-Parameters) that may be defined for each of your Redis servers. To utilize these additional configuration options, add them to your Redis server configuration in your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:140
msgid ""
"'default' => [\n"
"    'host' => env('REDIS_HOST', 'localhost'),\n"
"    'password' => env('REDIS_PASSWORD', null),\n"
"    'port' => env('REDIS_PORT', 6379),\n"
"    'database' => 0,\n"
"    'read_write_timeout' => 60,\n"
"],"
msgstr ""

#: ./docs/9.x/redis.md:140
#: ./docs/10.x/redis.md:140
msgid ""
"'default' => [\n"
"    'host' => env('REDIS_HOST', 'localhost'),\n"
"    'password' => env('REDIS_PASSWORD'),\n"
"    'port' => env('REDIS_PORT', 6379),\n"
"    'database' => 0,\n"
"    'read_write_timeout' => 60,\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:148
#: ./docs/9.x/redis.md:148
#: ./docs/10.x/redis.md:148
#~ msgctxt "P"
#~ msgid "<a name=\"the-redis-facade-alias\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:149
#: ./docs/9.x/redis.md:149
#: ./docs/10.x/redis.md:149
msgid "The Redis Facade Alias"
msgstr ""

#: ./docs/10.x/redis.md:151
msgid "Laravel's `config/app.php` configuration file contains an `aliases` array which defines all of the class aliases that will be registered by the framework. By default, no `Redis` alias is included because it would conflict with the `Redis` class name provided by the PhpRedis extension. If you are using the Predis client and would like to add a `Redis` alias, you may add it to the `aliases` array in your application's `config/app.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:151
msgid "Laravel's `config/app.php` configuration file contains an `aliases` array which defines all of the class aliases that will be registered by the framework. For convenience, an alias entry is included for each [facade](/docs/{{version}}/facades) offered by Laravel; however, the `Redis` alias is disabled because it conflicts with the `Redis` class name provided by the phpredis extension. If you are using the Predis client and would like to enable this alias, you may un-comment the alias in your application's `config/app.php` configuration file."
msgstr ""

#: ./docs/9.x/redis.md:151
msgid "Laravel's `config/app.php` configuration file contains an `aliases` array which defines all of the class aliases that will be registered by the framework. By default, no `Redis` alias is included because it would conflict with the `Redis` class name provided by the phpredis extension. If you are using the Predis client and would like to add a `Redis` alias, you may add it to the `aliases` array in your application's `config/app.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:153
#: ./docs/9.x/redis.md:157
#: ./docs/10.x/redis.md:157
#: ./docs/11.x/redis.md:167
#: ./docs/master/redis.md:167
#~ msgctxt "P"
#~ msgid "<a name=\"phpredis\"></a>"
#~ msgstr ""

#: ./docs/9.x/redis.md:153
#: ./docs/10.x/redis.md:153
msgid ""
"'aliases' => Facade::defaultAliases()->merge([\n"
"    'Redis' => Illuminate\\Support\\Facades\\Redis::class,\n"
"])->toArray(),"
msgstr ""

#: ./docs/8.x/redis.md:154
#: ./docs/9.x/redis.md:158
msgid "phpredis"
msgstr ""

#: ./docs/11.x/redis.md:155
#: ./docs/master/redis.md:155
msgid "In addition to the default configuration options, Predis supports additional [connection parameters](https://github.com/nrk/predis/wiki/Connection-Parameters) that may be defined for each of your Redis servers. To utilize these additional configuration options, add them to your Redis server configuration in your application's `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:156
#: ./docs/9.x/redis.md:160
msgid "By default, Laravel will use the phpredis extension to communicate with Redis. The client that Laravel will use to communicate with Redis is dictated by the value of the `redis.client` configuration option, which typically reflects the value of the `REDIS_CLIENT` environment variable:"
msgstr ""

#: ./docs/11.x/redis.md:157
#: ./docs/master/redis.md:157
msgid ""
"'default' => [\n"
"    'url' => env('REDIS_URL'),\n"
"    'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"    'username' => env('REDIS_USERNAME'),\n"
"    'password' => env('REDIS_PASSWORD'),\n"
"    'port' => env('REDIS_PORT', '6379'),\n"
"    'database' => env('REDIS_DB', '0'),\n"
"    'read_write_timeout' => 60,\n"
"],"
msgstr ""

#: ./docs/10.x/redis.md:158
#: ./docs/11.x/redis.md:168
#: ./docs/master/redis.md:168
msgid "PhpRedis"
msgstr ""

#: ./docs/8.x/redis.md:158
#: ./docs/9.x/redis.md:162
#: ./docs/10.x/redis.md:162
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    // Rest of Redis configuration...\n"
"],"
msgstr ""

#: ./docs/10.x/redis.md:160
#: ./docs/11.x/redis.md:170
#: ./docs/master/redis.md:170
msgid "By default, Laravel will use the PhpRedis extension to communicate with Redis. The client that Laravel will use to communicate with Redis is dictated by the value of the `redis.client` configuration option, which typically reflects the value of the `REDIS_CLIENT` environment variable:"
msgstr ""

#: ./docs/8.x/redis.md:165
#: ./docs/9.x/redis.md:169
msgid "In addition to the default `scheme`, `host`, `port`, `database`, and `password` server configuration options, phpredis supports the following additional connection parameters: `name`, `persistent`, `persistent_id`, `prefix`, `read_timeout`, `retry_interval`, `timeout`, and `context`. You may add any of these options to your Redis server configuration in the `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:167
msgid ""
"'default' => [\n"
"    'host' => env('REDIS_HOST', 'localhost'),\n"
"    'password' => env('REDIS_PASSWORD', null),\n"
"    'port' => env('REDIS_PORT', 6379),\n"
"    'database' => 0,\n"
"    'read_timeout' => 60,\n"
"    'context' => [\n"
"        // 'auth' => ['username', 'secret'],\n"
"        // 'stream' => ['verify_peer' => false],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/10.x/redis.md:169
msgid "In addition to the default `scheme`, `host`, `port`, `database`, and `password` server configuration options, PhpRedis supports the following additional connection parameters: `name`, `persistent`, `persistent_id`, `prefix`, `read_timeout`, `retry_interval`, `timeout`, and `context`. You may add any of these options to your Redis server configuration in the `config/database.php` configuration file:"
msgstr ""

#: ./docs/9.x/redis.md:171
#: ./docs/10.x/redis.md:171
msgid ""
"'default' => [\n"
"    'host' => env('REDIS_HOST', 'localhost'),\n"
"    'password' => env('REDIS_PASSWORD'),\n"
"    'port' => env('REDIS_PORT', 6379),\n"
"    'database' => 0,\n"
"    'read_timeout' => 60,\n"
"    'context' => [\n"
"        // 'auth' => ['username', 'secret'],\n"
"        // 'stream' => ['verify_peer' => false],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:172
#: ./docs/master/redis.md:172
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/11.x/redis.md:179
#: ./docs/master/redis.md:179
msgid "In addition to the default configuration options, PhpRedis supports the following additional connection parameters: `name`, `persistent`, `persistent_id`, `prefix`, `read_timeout`, `retry_interval`, `timeout`, and `context`. You may add any of these options to your Redis server configuration in the `config/database.php` configuration file:"
msgstr ""

#: ./docs/8.x/redis.md:179
#: ./docs/9.x/redis.md:183
#: ./docs/10.x/redis.md:183
#: ./docs/11.x/redis.md:195
#: ./docs/master/redis.md:195
#~ msgctxt "P"
#~ msgid "<a name=\"phpredis-serialization\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:180
#: ./docs/9.x/redis.md:184
msgid "phpredis Serialization & Compression"
msgstr ""

#: ./docs/11.x/redis.md:181
#: ./docs/master/redis.md:181
msgid ""
"'default' => [\n"
"    'url' => env('REDIS_URL'),\n"
"    'host' => env('REDIS_HOST', '127.0.0.1'),\n"
"    'username' => env('REDIS_USERNAME'),\n"
"    'password' => env('REDIS_PASSWORD'),\n"
"    'port' => env('REDIS_PORT', '6379'),\n"
"    'database' => env('REDIS_DB', '0'),\n"
"    'read_timeout' => 60,\n"
"    'context' => [\n"
"        // 'auth' => ['username', 'secret'],\n"
"        // 'stream' => ['verify_peer' => false],\n"
"    ],\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:182
msgid "The phpredis extension may also be configured to use a variety serialization and compression algorithms. These algorithms can be configured via the `options` array of your Redis configuration:"
msgstr ""

#: ./docs/10.x/redis.md:184
#: ./docs/11.x/redis.md:196
#: ./docs/master/redis.md:196
msgid "PhpRedis Serialization and Compression"
msgstr ""

#: ./docs/8.x/redis.md:184
msgid ""
"use Redis;\n"
"\n"
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'serializer' => Redis::SERIALIZER_MSGPACK,\n"
"        'compression' => Redis::COMPRESSION_LZ4,\n"
"    ],\n"
"\n"
"    // Rest of Redis configuration...\n"
"],"
msgstr ""

#: ./docs/10.x/redis.md:186
#: ./docs/11.x/redis.md:198
#: ./docs/master/redis.md:198
msgid "The PhpRedis extension may also be configured to use a variety of serializers and compression algorithms. These algorithms can be configured via the `options` array of your Redis configuration:"
msgstr ""

#: ./docs/9.x/redis.md:186
msgid "The phpredis extension may also be configured to use a variety of serialization and compression algorithms. These algorithms can be configured via the `options` array of your Redis configuration:"
msgstr ""

#: ./docs/9.x/redis.md:188
#: ./docs/10.x/redis.md:188
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'serializer' => Redis::SERIALIZER_MSGPACK,\n"
"        'compression' => Redis::COMPRESSION_LZ4,\n"
"    ],\n"
"\n"
"    // Rest of Redis configuration...\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:198
#: ./docs/9.x/redis.md:200
msgid "Currently supported serialization algorithms include: `Redis::SERIALIZER_NONE` (default), `Redis::SERIALIZER_PHP`, `Redis::SERIALIZER_JSON`, `Redis::SERIALIZER_IGBINARY`, and `Redis::SERIALIZER_MSGPACK`."
msgstr ""

#: ./docs/10.x/redis.md:200
#: ./docs/11.x/redis.md:214
#: ./docs/master/redis.md:214
msgid "Currently supported serializers include: `Redis::SERIALIZER_NONE` (default), `Redis::SERIALIZER_PHP`, `Redis::SERIALIZER_JSON`, `Redis::SERIALIZER_IGBINARY`, and `Redis::SERIALIZER_MSGPACK`."
msgstr ""

#: ./docs/11.x/redis.md:200
#: ./docs/master/redis.md:200
msgid ""
"'redis' => [\n"
"\n"
"    'client' => env('REDIS_CLIENT', 'phpredis'),\n"
"\n"
"    'options' => [\n"
"        'cluster' => env('REDIS_CLUSTER', 'redis'),\n"
"        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),\n"
"        'serializer' => Redis::SERIALIZER_MSGPACK,\n"
"        'compression' => Redis::COMPRESSION_LZ4,\n"
"    ],\n"
"\n"
"    // ...\n"
"],"
msgstr ""

#: ./docs/8.x/redis.md:200
#: ./docs/9.x/redis.md:202
#: ./docs/10.x/redis.md:202
#: ./docs/11.x/redis.md:216
#: ./docs/master/redis.md:216
msgid "Supported compression algorithms include: `Redis::COMPRESSION_NONE` (default), `Redis::COMPRESSION_LZF`, `Redis::COMPRESSION_ZSTD`, and `Redis::COMPRESSION_LZ4`."
msgstr ""

#: ./docs/8.x/redis.md:202
#: ./docs/9.x/redis.md:204
#: ./docs/10.x/redis.md:204
#: ./docs/11.x/redis.md:218
#: ./docs/master/redis.md:218
#~ msgctxt "P"
#~ msgid "<a name=\"interacting-with-redis\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:203
#: ./docs/9.x/redis.md:205
#: ./docs/10.x/redis.md:205
#: ./docs/11.x/redis.md:219
#: ./docs/master/redis.md:219
msgid "Interacting With Redis"
msgstr ""

#: ./docs/8.x/redis.md:205
#: ./docs/9.x/redis.md:207
#: ./docs/10.x/redis.md:207
#: ./docs/11.x/redis.md:221
#: ./docs/master/redis.md:221
msgid "You may interact with Redis by calling various methods on the `Redis` [facade](/docs/{{version}}/facades). The `Redis` facade supports dynamic methods, meaning you may call any [Redis command](https://redis.io/commands) on the facade and the command will be passed directly to Redis. In this example, we will call the Redis `GET` command by calling the `get` method on the `Redis` facade:"
msgstr ""

#: ./docs/8.x/redis.md:207
#: ./docs/9.x/redis.md:209
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     *\n"
"     * @param  int  $id\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function show($id)\n"
"    {\n"
"        return view('user.profile', [\n"
"            'user' => Redis::get('user:profile:'.$id)\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/redis.md:209
#: ./docs/11.x/redis.md:223
#: ./docs/master/redis.md:223
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use Illuminate\\Support\\Facades\\Redis;\n"
"use Illuminate\\View\\View;\n"
"\n"
"class UserController extends Controller\n"
"{\n"
"    /**\n"
"     * Show the profile for the given user.\n"
"     */\n"
"    public function show(string $id): View\n"
"    {\n"
"        return view('user.profile', [\n"
"            'user' => Redis::get('user:profile:'.$id)\n"
"        ]);\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/redis.md:230
#: ./docs/9.x/redis.md:232
#: ./docs/10.x/redis.md:230
#: ./docs/11.x/redis.md:244
#: ./docs/master/redis.md:244
msgid "As mentioned above, you may call any of Redis' commands on the `Redis` facade. Laravel uses magic methods to pass the commands to the Redis server. If a Redis command expects arguments, you should pass those to the facade's corresponding method:"
msgstr ""

#: ./docs/8.x/redis.md:232
#: ./docs/9.x/redis.md:234
#: ./docs/10.x/redis.md:232
#: ./docs/11.x/redis.md:246
#: ./docs/master/redis.md:246
msgid ""
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"Redis::set('name', 'Taylor');\n"
"\n"
"$values = Redis::lrange('names', 5, 10);"
msgstr ""

#: ./docs/8.x/redis.md:238
#: ./docs/9.x/redis.md:240
#: ./docs/10.x/redis.md:238
#: ./docs/11.x/redis.md:252
#: ./docs/master/redis.md:252
msgid "Alternatively, you may pass commands to the server using the `Redis` facade's `command` method, which accepts the name of the command as its first argument and an array of values as its second argument:"
msgstr ""

#: ./docs/8.x/redis.md:240
#: ./docs/9.x/redis.md:242
#: ./docs/10.x/redis.md:240
#: ./docs/11.x/redis.md:254
#: ./docs/master/redis.md:254
msgid "$values = Redis::command('lrange', ['name', 5, 10]);"
msgstr ""

#: ./docs/8.x/redis.md:242
#: ./docs/9.x/redis.md:244
#: ./docs/10.x/redis.md:242
#: ./docs/11.x/redis.md:256
#: ./docs/master/redis.md:256
#~ msgctxt "P"
#~ msgid "<a name=\"using-multiple-redis-connections\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:243
#: ./docs/9.x/redis.md:245
#: ./docs/10.x/redis.md:243
#: ./docs/11.x/redis.md:257
#: ./docs/master/redis.md:257
msgid "Using Multiple Redis Connections"
msgstr ""

#: ./docs/8.x/redis.md:245
#: ./docs/9.x/redis.md:247
#: ./docs/10.x/redis.md:245
#: ./docs/11.x/redis.md:259
#: ./docs/master/redis.md:259
msgid "Your application's `config/database.php` configuration file allows you to define multiple Redis connections / servers. You may obtain a connection to a specific Redis connection using the `Redis` facade's `connection` method:"
msgstr ""

#: ./docs/8.x/redis.md:247
#: ./docs/9.x/redis.md:249
#: ./docs/10.x/redis.md:247
#: ./docs/11.x/redis.md:261
#: ./docs/master/redis.md:261
msgid "$redis = Redis::connection('connection-name');"
msgstr ""

#: ./docs/8.x/redis.md:249
#: ./docs/9.x/redis.md:251
#: ./docs/10.x/redis.md:249
#: ./docs/11.x/redis.md:263
#: ./docs/master/redis.md:263
msgid "To obtain an instance of the default Redis connection, you may call the `connection` method without any additional arguments:"
msgstr ""

#: ./docs/8.x/redis.md:251
#: ./docs/9.x/redis.md:253
#: ./docs/10.x/redis.md:251
#: ./docs/11.x/redis.md:265
#: ./docs/master/redis.md:265
msgid "$redis = Redis::connection();"
msgstr ""

#: ./docs/8.x/redis.md:253
#: ./docs/9.x/redis.md:255
#: ./docs/10.x/redis.md:253
#: ./docs/11.x/redis.md:267
#: ./docs/master/redis.md:267
#~ msgctxt "P"
#~ msgid "<a name=\"transactions\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:254
#: ./docs/9.x/redis.md:256
#: ./docs/10.x/redis.md:254
#: ./docs/11.x/redis.md:268
#: ./docs/master/redis.md:268
msgid "Transactions"
msgstr ""

#: ./docs/8.x/redis.md:256
#: ./docs/9.x/redis.md:258
#: ./docs/10.x/redis.md:256
#: ./docs/11.x/redis.md:270
#: ./docs/master/redis.md:270
msgid "The `Redis` facade's `transaction` method provides a convenient wrapper around Redis' native `MULTI` and `EXEC` commands. The `transaction` method accepts a closure as its only argument. This closure will receive a Redis connection instance and may issue any commands it would like to this instance. All of the Redis commands issued within the closure will be executed in a single, atomic transaction:"
msgstr ""

#: ./docs/10.x/redis.md:258
#: ./docs/11.x/redis.md:272
#: ./docs/master/redis.md:272
msgid ""
"use Redis;\n"
"use Illuminate\\Support\\Facades;\n"
"\n"
"Facades\\Redis::transaction(function (Redis $redis) {\n"
"    $redis->incr('user_visits', 1);\n"
"    $redis->incr('total_visits', 1);\n"
"});"
msgstr ""

#: ./docs/8.x/redis.md:258
#: ./docs/9.x/redis.md:260
msgid ""
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"Redis::transaction(function ($redis) {\n"
"    $redis->incr('user_visits', 1);\n"
"    $redis->incr('total_visits', 1);\n"
"});"
msgstr ""

#: ./docs/8.x/redis.md:265
#: ./docs/9.x/redis.md:268
#: ./docs/10.x/redis.md:267
#: ./docs/11.x/redis.md:281
#: ./docs/master/redis.md:281
msgid "When defining a Redis transaction, you may not retrieve any values from the Redis connection. Remember, your transaction is executed as a single, atomic operation and that operation is not executed until your entire closure has finished executing its commands."
msgstr ""

#: ./docs/8.x/redis.md:267
#: ./docs/9.x/redis.md:270
#: ./docs/10.x/redis.md:269
#: ./docs/11.x/redis.md:283
#: ./docs/master/redis.md:283
msgid "Lua Scripts"
msgstr ""

#: ./docs/8.x/redis.md:269
#: ./docs/9.x/redis.md:272
#: ./docs/10.x/redis.md:271
#: ./docs/11.x/redis.md:285
#: ./docs/master/redis.md:285
msgid "The `eval` method provides another method of executing multiple Redis commands in a single, atomic operation. However, the `eval` method has the benefit of being able to interact with and inspect Redis key values during that operation. Redis scripts are written in the [Lua programming language](https://www.lua.org)."
msgstr ""

#: ./docs/8.x/redis.md:271
#: ./docs/9.x/redis.md:274
#: ./docs/10.x/redis.md:273
#: ./docs/11.x/redis.md:287
#: ./docs/master/redis.md:287
msgid "The `eval` method can be a bit scary at first, but we'll explore a basic example to break the ice. The `eval` method expects several arguments. First, you should pass the Lua script (as a string) to the method. Secondly, you should pass the number of keys (as an integer) that the script interacts with. Thirdly, you should pass the names of those keys. Finally, you may pass any other additional arguments that you need to access within your script."
msgstr ""

#: ./docs/8.x/redis.md:273
#: ./docs/9.x/redis.md:276
#: ./docs/10.x/redis.md:275
#: ./docs/11.x/redis.md:289
#: ./docs/master/redis.md:289
msgid "In this example, we will increment a counter, inspect its new value, and increment a second counter if the first counter's value is greater than five. Finally, we will return the value of the first counter:"
msgstr ""

#: ./docs/8.x/redis.md:275
#: ./docs/9.x/redis.md:278
#: ./docs/10.x/redis.md:277
#: ./docs/11.x/redis.md:291
#: ./docs/master/redis.md:291
msgid ""
"$value = Redis::eval(<<<'LUA'\n"
"    local counter = redis.call(\"incr\", KEYS[1])\n"
"\n"
"    if counter > 5 then\n"
"        redis.call(\"incr\", KEYS[2])\n"
"    end\n"
"\n"
"    return counter\n"
"LUA, 2, 'first-counter', 'second-counter');"
msgstr ""

#: ./docs/8.x/redis.md:285
#: ./docs/9.x/redis.md:289
#: ./docs/10.x/redis.md:288
#: ./docs/11.x/redis.md:302
#: ./docs/master/redis.md:302
msgid "Please consult the [Redis documentation](https://redis.io/commands/eval) for more information on Redis scripting."
msgstr ""

#: ./docs/8.x/redis.md:287
#: ./docs/9.x/redis.md:291
#: ./docs/10.x/redis.md:290
#: ./docs/11.x/redis.md:304
#: ./docs/master/redis.md:304
#~ msgctxt "P"
#~ msgid "<a name=\"pipelining-commands\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:288
#: ./docs/9.x/redis.md:292
#: ./docs/10.x/redis.md:291
#: ./docs/11.x/redis.md:305
#: ./docs/master/redis.md:305
msgid "Pipelining Commands"
msgstr ""

#: ./docs/8.x/redis.md:290
#: ./docs/9.x/redis.md:294
#: ./docs/10.x/redis.md:293
#: ./docs/11.x/redis.md:307
#: ./docs/master/redis.md:307
msgid "Sometimes you may need to execute dozens of Redis commands. Instead of making a network trip to your Redis server for each command, you may use the `pipeline` method. The `pipeline` method accepts one argument: a closure that receives a Redis instance. You may issue all of your commands to this Redis instance and they will all be sent to the Redis server at the same time to reduce network trips to the server. The commands will still be executed in the order they were issued:"
msgstr ""

#: ./docs/8.x/redis.md:292
#: ./docs/9.x/redis.md:296
msgid ""
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"Redis::pipeline(function ($pipe) {\n"
"    for ($i = 0; $i < 1000; $i++) {\n"
"        $pipe->set(\"key:$i\", $i);\n"
"    }\n"
"});"
msgstr ""

#: ./docs/10.x/redis.md:295
#: ./docs/11.x/redis.md:309
#: ./docs/master/redis.md:309
msgid ""
"use Redis;\n"
"use Illuminate\\Support\\Facades;\n"
"\n"
"Facades\\Redis::pipeline(function (Redis $pipe) {\n"
"    for ($i = 0; $i < 1000; $i++) {\n"
"        $pipe->set(\"key:$i\", $i);\n"
"    }\n"
"});"
msgstr ""

#: ./docs/8.x/redis.md:300
#: ./docs/9.x/redis.md:304
#: ./docs/10.x/redis.md:304
#: ./docs/11.x/redis.md:318
#: ./docs/master/redis.md:318
#~ msgctxt "P"
#~ msgid "<a name=\"pubsub\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:301
#: ./docs/9.x/redis.md:305
#: ./docs/10.x/redis.md:305
#: ./docs/11.x/redis.md:319
#: ./docs/master/redis.md:319
msgid "Pub / Sub"
msgstr ""

#: ./docs/8.x/redis.md:303
#: ./docs/9.x/redis.md:307
#: ./docs/10.x/redis.md:307
#: ./docs/11.x/redis.md:321
#: ./docs/master/redis.md:321
msgid "Laravel provides a convenient interface to the Redis `publish` and `subscribe` commands. These Redis commands allow you to listen for messages on a given \"channel\". You may publish messages to the channel from another application, or even using another programming language, allowing easy communication between applications and processes."
msgstr ""

#: ./docs/8.x/redis.md:305
#: ./docs/9.x/redis.md:309
#: ./docs/10.x/redis.md:309
#: ./docs/11.x/redis.md:323
#: ./docs/master/redis.md:323
msgid "First, let's setup a channel listener using the `subscribe` method. We'll place this method call within an [Artisan command](/docs/{{version}}/artisan) since calling the `subscribe` method begins a long-running process:"
msgstr ""

#: ./docs/8.x/redis.md:307
#: ./docs/9.x/redis.md:311
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"class RedisSubscribe extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'redis:subscribe';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Subscribe to a Redis channel';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     *\n"
"     * @return mixed\n"
"     */\n"
"    public function handle()\n"
"    {\n"
"        Redis::subscribe(['test-channel'], function ($message) {\n"
"            echo $message;\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/10.x/redis.md:311
#: ./docs/11.x/redis.md:325
#: ./docs/master/redis.md:325
msgid ""
"<?php\n"
"\n"
"namespace App\\Console\\Commands;\n"
"\n"
"use Illuminate\\Console\\Command;\n"
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"class RedisSubscribe extends Command\n"
"{\n"
"    /**\n"
"     * The name and signature of the console command.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $signature = 'redis:subscribe';\n"
"\n"
"    /**\n"
"     * The console command description.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $description = 'Subscribe to a Redis channel';\n"
"\n"
"    /**\n"
"     * Execute the console command.\n"
"     */\n"
"    public function handle(): void\n"
"    {\n"
"        Redis::subscribe(['test-channel'], function (string $message) {\n"
"            echo $message;\n"
"        });\n"
"    }\n"
"}"
msgstr ""

#: ./docs/8.x/redis.md:343
#: ./docs/9.x/redis.md:347
#: ./docs/10.x/redis.md:345
#: ./docs/11.x/redis.md:359
#: ./docs/master/redis.md:359
msgid "Now we may publish messages to the channel using the `publish` method:"
msgstr ""

#: ./docs/8.x/redis.md:345
#: ./docs/9.x/redis.md:349
#: ./docs/10.x/redis.md:347
#: ./docs/11.x/redis.md:361
#: ./docs/master/redis.md:361
msgid ""
"use Illuminate\\Support\\Facades\\Redis;\n"
"\n"
"Route::get('/publish', function () {\n"
"    // ...\n"
"\n"
"    Redis::publish('test-channel', json_encode([\n"
"        'name' => 'Adam Wathan'\n"
"    ]));\n"
"});"
msgstr ""

#: ./docs/8.x/redis.md:355
#: ./docs/9.x/redis.md:359
#: ./docs/10.x/redis.md:357
#: ./docs/11.x/redis.md:371
#: ./docs/master/redis.md:371
#~ msgctxt "P"
#~ msgid "<a name=\"wildcard-subscriptions\"></a>"
#~ msgstr ""

#: ./docs/8.x/redis.md:356
#: ./docs/9.x/redis.md:360
#: ./docs/10.x/redis.md:358
#: ./docs/11.x/redis.md:372
#: ./docs/master/redis.md:372
msgid "Wildcard Subscriptions"
msgstr ""

#: ./docs/8.x/redis.md:358
#: ./docs/9.x/redis.md:362
#: ./docs/10.x/redis.md:360
#: ./docs/11.x/redis.md:374
#: ./docs/master/redis.md:374
msgid "Using the `psubscribe` method, you may subscribe to a wildcard channel, which may be useful for catching all messages on all channels. The channel name will be passed as the second argument to the provided closure:"
msgstr ""

#: ./docs/8.x/redis.md:360
#: ./docs/9.x/redis.md:364
msgid ""
"Redis::psubscribe(['*'], function ($message, $channel) {\n"
"    echo $message;\n"
"});\n"
"\n"
"Redis::psubscribe(['users.*'], function ($message, $channel) {\n"
"    echo $message;\n"
"});"
msgstr ""

#: ./docs/10.x/redis.md:362
#: ./docs/11.x/redis.md:376
#: ./docs/master/redis.md:376
msgid ""
"Redis::psubscribe(['*'], function (string $message, string $channel) {\n"
"    echo $message;\n"
"});\n"
"\n"
"Redis::psubscribe(['users.*'], function (string $message, string $channel) {\n"
"    echo $message;\n"
"});"
msgstr ""
