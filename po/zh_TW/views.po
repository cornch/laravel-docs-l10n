msgid ""
msgstr ""
"Project-Id-Version: laravel-docs\n"
"POT-Creation-Date: 2022-01-29 05:35+0000\n"
"PO-Revision-Date: 2022-02-03 05:19\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/views.pot\n"
"X-Crowdin-File-ID: 175\n"

# File: docs/8.x/views.md, line: 1
# File: docs/master/views.md, line: 1
#. type: Title #
#, no-wrap
msgid "Views"
msgstr "View"

# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
#. type: Bullet: '- '
msgid "[Introduction](#introduction)"
msgstr "[簡介](#introduction)"

# File: docs/8.x/views.md, line: 13
# File: docs/master/views.md, line: 13
#. type: Plain text
#, no-wrap
msgid "- [Creating & Rendering Views](#creating-and-rendering-views)\n"
"    - [Nested View Directories](#nested-view-directories)\n"
"    - [Creating The First Available View](#creating-the-first-available-view)\n"
"    - [Determining If A View Exists](#determining-if-a-view-exists)\n"
"- [Passing Data To Views](#passing-data-to-views)\n"
"    - [Sharing Data With All Views](#sharing-data-with-all-views)\n"
"- [View Composers](#view-composers)\n"
"    - [View Creators](#view-creators)\n"
"- [Optimizing Views](#optimizing-views)\n"
msgstr "- [建立與轉譯 View](#creating-and-rendering-views)\n"
"    - [巢狀的 View 目錄](#nested-view-directories)\n"
"    - [建立第一個可用的 View](#creating-the-first-available-view)\n"
"    - [判斷某個 View 是否存在](#determining-if-a-view-exists)\n"
"- [將資料傳給 View](#passing-data-to-views)\n"
"    - [在所有 View 間共用資料](#sharing-data-with-all-views)\n"
"- [View Composer](#view-composers)\n"
"    - [View Creator](#view-creators)\n"
"- [最佳化 View](#optimizing-views)\n"

# File: docs/8.x/views.md, line: 15
# File: docs/master/views.md, line: 15
#. type: Plain text
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr "<a name=\"introduction\"></a>\n"

# File: docs/8.x/views.md, line: 15
# File: docs/master/views.md, line: 15
#. type: Title ##
#, no-wrap
msgid "Introduction"
msgstr "簡介"

# File: docs/8.x/views.md, line: 18
# File: docs/master/views.md, line: 18
#. type: Plain text
msgid "Of course, it's not practical to return entire HTML documents strings directly from your routes and controllers. Thankfully, views provide a convenient way to place all of our HTML in separate files. Views separate your controller / application logic from your presentation logic and are stored in the `resources/views` directory. A simple view might look something like this:"
msgstr "當然，從 Route 或 Controller 中回傳整個 HTML 文件的字串很不實際。幸好，View 這個功能提供了一個方便的方法，能將我們所有的 HTML 放在與 Route 或 Controller 不同的檔案中。View 將呈現的邏輯從 Controller 或應用程式的邏輯拆分開來。View 保存在 `resources/views` 目錄中。下列是個簡單的 View："

# File: docs/8.x/views.md, line: 19
# File: docs/master/views.md, line: 19
#. type: Code fence info string
#, no-wrap
msgid "html"
msgstr "html"

# File: docs/8.x/views.md, line: 19
# File: docs/master/views.md, line: 19
#. type: Plain text
#, no-wrap
msgid "<!-- View stored in resources/views/greeting.blade.php -->\n\n"
"<html>\n"
"    <body>\n"
"        <h1>Hello, {{ $name }}</h1>\n"
"    </body>\n"
"</html>\n"
msgstr "<!-- View 保存於 resources/views/greeting.blade.php -->\n\n"
"<html>\n"
"    <body>\n"
"        <h1>Hello, {{ $name }}</h1>\n"
"    </body>\n"
"</html>\n"

# File: docs/8.x/views.md, line: 30
# File: docs/master/views.md, line: 30
#. type: Plain text
msgid "Since this view is stored at `resources/views/greeting.blade.php`, we may return it using the global `view` helper like so:"
msgstr "這個 View 保存在 `resources/views/greeting.blade.php`，因此我們可以像這樣使用全域的 `view` 輔助函式來回傳 View："

# File: docs/8.x/views.md, line: 34
# File: docs/8.x/views.md, line: 47
# File: docs/master/views.md, line: 34
# File: docs/master/views.md, line: 47
#. type: Plain text
#, no-wrap
msgid "    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'James']);\n"
"    });\n"
msgstr "    Route::get('/', function () {\n"
"        return view('greeting', ['name' => 'James']);\n"
"    });\n"

# File: docs/8.x/views.md, line: 36
# File: docs/master/views.md, line: 36
#. type: Plain text
#, no-wrap
msgid "> {tip} Looking for more information on how to write Blade templates? Check out the full [Blade documentation](/docs/{{version}}/blade) to get started.\n"
msgstr "> {tip} 想瞭解更多有關如何撰寫 Blade 樣板的資訊嗎？請參考完整的 [Blade 說明文件](/docs/{{version}}/blade)來入門 Blade 樣板。\n"

# File: docs/8.x/views.md, line: 38
# File: docs/master/views.md, line: 38
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-and-rendering-views\"></a>\n"
msgstr "<a name=\"creating-and-rendering-views\"></a>\n"

# File: docs/8.x/views.md, line: 38
# File: docs/master/views.md, line: 38
#. type: Title ##
#, no-wrap
msgid "Creating & Rendering Views"
msgstr "建立與轉譯 View"

# File: docs/8.x/views.md, line: 41
# File: docs/master/views.md, line: 41
#. type: Plain text
msgid "You may create a view by placing a file with the `.blade.php` extension in your application's `resources/views` directory. The `.blade.php` extension informs the framework that the file contains a [Blade template](/docs/{{version}}/blade). Blade templates contain HTML as well as Blade directives that allow you to easily echo values, create \"if\" statements, iterate over data, and more."
msgstr "我們可以在專案的 `resources/views` 目錄下放置一個副檔名為 `.blade.php` 的檔案來建立 View。`.blade.php` 副檔名告訴 Laravel 這個檔案時一個 [Blade 樣板](/docs/{{version}}/blade)。Blade 樣板中包含 HTML 與 Blade 指示詞 (Directive)，Blade 指示詞可用來輕鬆地輸出 (Echo) 資料、建立「if」陳述式、迭代資料⋯⋯等。"

# File: docs/8.x/views.md, line: 43
# File: docs/master/views.md, line: 43
#. type: Plain text
msgid "Once you have created a view, you may return it from one of your application's routes or controllers using the global `view` helper:"
msgstr "建立好 View 之後，就可以在專案的 Route 或 Controller 中使用全域的 `view` 輔助函式來回傳 View："

# File: docs/8.x/views.md, line: 49
# File: docs/master/views.md, line: 49
#. type: Plain text
msgid "Views may also be returned using the `View` facade:"
msgstr "也可以使用 `View` Facade 來回傳 `View`："

# File: docs/8.x/views.md, line: 51
# File: docs/8.x/views.md, line: 71
# File: docs/8.x/views.md, line: 80
# File: docs/8.x/views.md, line: 110
# File: docs/master/views.md, line: 51
# File: docs/master/views.md, line: 71
# File: docs/master/views.md, line: 80
# File: docs/master/views.md, line: 110
#. type: Plain text
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\View;\n"
msgstr "    use Illuminate\\Support\\Facades\\View;\n"

# File: docs/8.x/views.md, line: 53
# File: docs/master/views.md, line: 53
#. type: Plain text
#, no-wrap
msgid "    return View::make('greeting', ['name' => 'James']);\n"
msgstr "    return View::make('greeting', ['name' => 'James']);\n"

# File: docs/8.x/views.md, line: 55
# File: docs/master/views.md, line: 55
#. type: Plain text
msgid "As you can see, the first argument passed to the `view` helper corresponds to the name of the view file in the `resources/views` directory. The second argument is an array of data that should be made available to the view. In this case, we are passing the `name` variable, which is displayed in the view using [Blade syntax](/docs/{{version}}/blade)."
msgstr "就像我們可以看到的，傳給 `view` 輔助函式的第一個引數是 View 檔案在 `resources/view` 目錄下對應的名稱。第二個引數是一組資料陣列，包含要提供給 View 的資料。在這個情況下，我們傳入了一個 `name` 變數，並在 View 裡面使用 [Blade 語法](/docs/{{version}}/blade)來顯示。"

# File: docs/8.x/views.md, line: 57
# File: docs/master/views.md, line: 57
#. type: Plain text
#, no-wrap
msgid "<a name=\"nested-view-directories\"></a>\n"
msgstr "<a name=\"nested-view-directories\"></a>\n"

# File: docs/8.x/views.md, line: 57
# File: docs/master/views.md, line: 57
#. type: Title ###
#, no-wrap
msgid "Nested View Directories"
msgstr "巢狀的 View 目錄"

# File: docs/8.x/views.md, line: 60
# File: docs/master/views.md, line: 60
#. type: Plain text
msgid "Views may also be nested within subdirectories of the `resources/views` directory. \"Dot\" notation may be used to reference nested views. For example, if your view is stored at `resources/views/admin/profile.blade.php`, you may return it from one of your application's routes / controllers like so:"
msgstr "View 也可以巢狀放置在 `resources/views` 目錄中的子目錄。可使用「點 (.)」標記法來參照巢狀的 View。舉例來說，若有個 View 保存在 `resources/views/admin/profile.blade.php`，則我們可以在我們程式的 Route 或 Controller 中像這樣回傳這個 View："

# File: docs/8.x/views.md, line: 62
# File: docs/master/views.md, line: 62
#. type: Plain text
#, no-wrap
msgid "    return view('admin.profile', $data);\n"
msgstr "    return view('admin.profile', $data);\n"

# File: docs/8.x/views.md, line: 64
# File: docs/master/views.md, line: 64
#. type: Plain text
#, no-wrap
msgid "> {note} View directory names should not contain the `.` character.\n"
msgstr "> {note} View 目錄的名稱不可包含 `.` 字元。\n"

# File: docs/8.x/views.md, line: 66
# File: docs/master/views.md, line: 66
#. type: Plain text
#, no-wrap
msgid "<a name=\"creating-the-first-available-view\"></a>\n"
msgstr "<a name=\"creating-the-first-available-view\"></a>\n"

# File: docs/8.x/views.md, line: 66
# File: docs/master/views.md, line: 66
#. type: Title ###
#, no-wrap
msgid "Creating The First Available View"
msgstr "建立第一個可用的 View"

# File: docs/8.x/views.md, line: 69
# File: docs/master/views.md, line: 69
#. type: Plain text
msgid "Using the `View` facade's `first` method, you may create the first view that exists in a given array of views. This may be useful if your application or package allows views to be customized or overwritten:"
msgstr "使用 `View` Facade 的 `first` 方法，就可以建立給定 View 陣列中存在的第一個 View。這個方法適用於你的專案或套件能自訂 View 或複寫 View 時："

# File: docs/8.x/views.md, line: 73
# File: docs/master/views.md, line: 73
#. type: Plain text
#, no-wrap
msgid "    return View::first(['custom.admin', 'admin'], $data);\n"
msgstr "    return View::first(['custom.admin', 'admin'], $data);\n"

# File: docs/8.x/views.md, line: 75
# File: docs/master/views.md, line: 75
#. type: Plain text
#, no-wrap
msgid "<a name=\"determining-if-a-view-exists\"></a>\n"
msgstr "<a name=\"determining-if-a-view-exists\"></a>\n"

# File: docs/8.x/views.md, line: 75
# File: docs/master/views.md, line: 75
#. type: Title ###
#, no-wrap
msgid "Determining If A View Exists"
msgstr "判斷某個 View 是否存在"

# File: docs/8.x/views.md, line: 78
# File: docs/master/views.md, line: 78
#. type: Plain text
msgid "If you need to determine if a view exists, you may use the `View` facade. The `exists` method will return `true` if the view exists:"
msgstr "若有需要判斷某個 View 是否存在，可使用 `View` Facade。`exists` 方法會在 View 存在時回傳 `true`："

# File: docs/8.x/views.md, line: 84
# File: docs/master/views.md, line: 84
#. type: Plain text
#, no-wrap
msgid "    if (View::exists('emails.customer')) {\n"
"        //\n"
"    }\n"
msgstr "    if (View::exists('emails.customer')) {\n"
"        //\n"
"    }\n"

# File: docs/8.x/views.md, line: 86
# File: docs/master/views.md, line: 86
#. type: Plain text
#, no-wrap
msgid "<a name=\"passing-data-to-views\"></a>\n"
msgstr "<a name=\"passing-data-to-views\"></a>\n"

# File: docs/8.x/views.md, line: 86
# File: docs/master/views.md, line: 86
#. type: Title ##
#, no-wrap
msgid "Passing Data To Views"
msgstr "將資料傳給 View"

# File: docs/8.x/views.md, line: 89
# File: docs/master/views.md, line: 89
#. type: Plain text
msgid "As you saw in the previous examples, you may pass an array of data to views to make that data available to the view:"
msgstr "就像我們在前一個範例中看到的一樣，我們可以傳入一組資料陣列給 View 來讓這些資料在 View 中可用："

# File: docs/8.x/views.md, line: 91
# File: docs/master/views.md, line: 91
#. type: Plain text
#, no-wrap
msgid "    return view('greetings', ['name' => 'Victoria']);\n"
msgstr "    return view('greetings', ['name' => 'Victoria']);\n"

# File: docs/8.x/views.md, line: 93
# File: docs/master/views.md, line: 93
#. type: Plain text
#, no-wrap
msgid "When passing information in this manner, the data should be an array with key / value pairs. After providing data to a view, you can then access each value within your view using the data's keys, such as `<?php echo $name; ?>`.\n"
msgstr "用這種方式傳遞資料時，這些專遞的資料應該是有索引鍵 / 值配對的陣列。將資料提供給 View 後，就可以使用這些資料的索引鍵來在 View 中存取其值，如 `<?php echo $name; ?>`。\n"

# File: docs/8.x/views.md, line: 95
# File: docs/master/views.md, line: 95
#. type: Plain text
msgid "As an alternative to passing a complete array of data to the `view` helper function, you may use the `with` method to add individual pieces of data to the view. The `with` method returns an instance of the view object so that you can continue chaining methods before returning the view:"
msgstr "除了將完整的資料陣列傳給 `view` 輔助函式外，也可以使用 `with` 方法來將單一資料項目提供給 View。`with` 方法會回傳 View 物件的實體，這樣一來我們就能在回傳 View 前繼續串上其他方法呼叫："

# File: docs/8.x/views.md, line: 99
# File: docs/master/views.md, line: 99
#. type: Plain text
#, no-wrap
msgid "    return view('greeting')\n"
"                ->with('name', 'Victoria')\n"
"                ->with('occupation', 'Astronaut');\n"
msgstr "    return view('greeting')\n"
"                ->with('name', 'Victoria')\n"
"                ->with('occupation', 'Astronaut');\n"

# File: docs/8.x/views.md, line: 101
# File: docs/master/views.md, line: 101
#. type: Plain text
#, no-wrap
msgid "<a name=\"sharing-data-with-all-views\"></a>\n"
msgstr "<a name=\"sharing-data-with-all-views\"></a>\n"

# File: docs/8.x/views.md, line: 101
# File: docs/master/views.md, line: 101
#. type: Title ###
#, no-wrap
msgid "Sharing Data With All Views"
msgstr "在所有 View 間共用資料"

# File: docs/8.x/views.md, line: 104
# File: docs/master/views.md, line: 104
#. type: Plain text
msgid "Occasionally, you may need to share data with all views that are rendered by your application. You may do so using the `View` facade's `share` method. Typically, you should place calls to the `share` method within a service provider's `boot` method. You are free to add them to the `App\\Providers\\AppServiceProvider` class or generate a separate service provider to house them:"
msgstr "有時候，我們會需要在所有的 View 間共享某個資料。為此，可以使用 `View` Facade 的 `share` 方法。一般來說，我們應該在某個 Service Provider 的 `boot` 方法中呼叫 `share` 方法。我們可以在 `App\\Providers\\AppServiceProvider` 類別中呼叫，或者也可以建立一個獨立的 Service Provider 來放置共享的資料："

# File: docs/8.x/views.md, line: 106
# File: docs/8.x/views.md, line: 144
# File: docs/8.x/views.md, line: 185
# File: docs/master/views.md, line: 106
# File: docs/master/views.md, line: 144
# File: docs/master/views.md, line: 185
#. type: Plain text
#, no-wrap
msgid "    <?php\n"
msgstr "    <?php\n"

# File: docs/8.x/views.md, line: 108
# File: docs/8.x/views.md, line: 146
# File: docs/master/views.md, line: 108
# File: docs/master/views.md, line: 146
#. type: Plain text
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr "    namespace App\\Providers;\n"

# File: docs/8.x/views.md, line: 122
# File: docs/master/views.md, line: 122
#. type: Plain text
#, no-wrap
msgid "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr "    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"

# File: docs/8.x/views.md, line: 133
# File: docs/master/views.md, line: 133
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::share('key', 'value');\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            View::share('key', 'value');\n"
"        }\n"
"    }\n"

# File: docs/8.x/views.md, line: 135
# File: docs/master/views.md, line: 135
#. type: Plain text
#, no-wrap
msgid "<a name=\"view-composers\"></a>\n"
msgstr "<a name=\"view-composers\"></a>\n"

# File: docs/8.x/views.md, line: 135
# File: docs/master/views.md, line: 135
#. type: Title ##
#, no-wrap
msgid "View Composers"
msgstr "View Composer"

# File: docs/8.x/views.md, line: 138
# File: docs/master/views.md, line: 138
#. type: Plain text
msgid "View composers are callbacks or class methods that are called when a view is rendered. If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location. View composers may prove particularly useful if the same view is returned by multiple routes or controllers within your application and always needs a particular piece of data."
msgstr "View Composer 是 View 在轉譯時會呼叫的回呼或類別方法。若你有一筆想在每次轉譯 View 時要繫結到 View 上的資料時，可以使用 View Composer 來協助我們將這類的邏輯拆分到一個地方。當你的程式中有許多的 Route 或 Controller 都回傳相同的 View，且這些 View 都需要同樣的資料時，View Composer 就特別適合。"

# File: docs/8.x/views.md, line: 140
# File: docs/master/views.md, line: 140
#. type: Plain text
msgid "Typically, view composers will be registered within one of your application's [service providers](/docs/{{version}}/providers). In this example, we'll assume that we have created a new `App\\Providers\\ViewServiceProvider` to house this logic."
msgstr "一般來說，我們可以在專案的某個 [Service Providers](/docs/{{version}}/providers) 中註冊 View Composer。在這個例子中，先假設我們建立了一個新的 `App\\Providers\\ViewServiceProvider` 來放置這個邏輯："

# File: docs/8.x/views.md, line: 142
# File: docs/master/views.md, line: 142
#. type: Plain text
msgid "We'll use the `View` facade's `composer` method to register the view composer. Laravel does not include a default directory for class based view composers, so you are free to organize them however you wish. For example, you could create an `app/View/Composers` directory to house all of your application's view composers:"
msgstr "我們會使用 `View` Facade 的 `composer` 方法來註冊 View Composer。Laravel 並沒有提供放置基於類別的 View Composer 用的預設目錄，因此我們可以隨意放置 View Composer。舉例來說，我們可以建立一個 `app/View/Composers` 目錄來放置所有的 View Composer："

# File: docs/8.x/views.md, line: 150
# File: docs/master/views.md, line: 150
#. type: Plain text
#, no-wrap
msgid "    use App\\View\\Composers\\ProfileComposer;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr "    use App\\View\\Composers\\ProfileComposer;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"

# File: docs/8.x/views.md, line: 162
# File: docs/master/views.md, line: 162
#. type: Plain text
#, no-wrap
msgid "    class ViewServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr "    class ViewServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"

# File: docs/8.x/views.md, line: 172
# File: docs/master/views.md, line: 172
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            // Using class based composers...\n"
"            View::composer('profile', ProfileComposer::class);\n"
msgstr "        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            // Using class based composers...\n"
"            View::composer('profile', ProfileComposer::class);\n"

# File: docs/8.x/views.md, line: 179
# File: docs/master/views.md, line: 179
#. type: Plain text
#, no-wrap
msgid "            // Using closure based composers...\n"
"            View::composer('dashboard', function ($view) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"
msgstr "            // 使用基於閉包的 Composer...\n"
"            View::composer('dashboard', function ($view) {\n"
"                //\n"
"            });\n"
"        }\n"
"    }\n"

# File: docs/8.x/views.md, line: 181
# File: docs/master/views.md, line: 181
#. type: Plain text
#, no-wrap
msgid "> {note} Remember, if you create a new service provider to contain your view composer registrations, you will need to add the service provider to the `providers` array in the `config/app.php` configuration file.\n"
msgstr "> {note} 請記得，若要建立一個新的 Service Provider 來放置 View ‘Composer 的註冊，就需要將這個新建立的 Service Provider 新增到 `config/app.php` 設定檔的 `providers` 陣列。\n"

# File: docs/8.x/views.md, line: 183
# File: docs/master/views.md, line: 183
#. type: Plain text
msgid "Now that we have registered the composer, the `compose` method of the `App\\View\\Composers\\ProfileComposer` class will be executed each time the `profile` view is being rendered. Let's take a look at an example of the composer class:"
msgstr "現在，我們已經註冊好 Composer 了。每當轉譯 `profile` View 時，就會執行 `App\\View\\Composers\\ProfileComposer` 類別的 `compose` 方法。我慢來看看這個 Composer 類別的例子："

# File: docs/8.x/views.md, line: 187
# File: docs/master/views.md, line: 187
#. type: Plain text
#, no-wrap
msgid "    namespace App\\View\\Composers;\n"
msgstr "    namespace App\\View\\Composers;\n"

# File: docs/8.x/views.md, line: 190
# File: docs/master/views.md, line: 190
#. type: Plain text
#, no-wrap
msgid "    use App\\Repositories\\UserRepository;\n"
"    use Illuminate\\View\\View;\n"
msgstr "    use App\\Repositories\\UserRepository;\n"
"    use Illuminate\\View\\View;\n"

# File: docs/8.x/views.md, line: 199
# File: docs/master/views.md, line: 199
#. type: Plain text
#, no-wrap
msgid "    class ProfileComposer\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"
msgstr "    class ProfileComposer\n"
"    {\n"
"        /**\n"
"         * The user repository implementation.\n"
"         *\n"
"         * @var \\App\\Repositories\\UserRepository\n"
"         */\n"
"        protected $users;\n"

# File: docs/8.x/views.md, line: 211
# File: docs/master/views.md, line: 211
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies are automatically resolved by the service container...\n"
"            $this->users = $users;\n"
"        }\n"
msgstr "        /**\n"
"         * Create a new profile composer.\n"
"         *\n"
"         * @param  \\App\\Repositories\\UserRepository  $users\n"
"         * @return void\n"
"         */\n"
"        public function __construct(UserRepository $users)\n"
"        {\n"
"            // Dependencies are automatically resolved by the service container...\n"
"            $this->users = $users;\n"
"        }\n"

# File: docs/8.x/views.md, line: 223
# File: docs/master/views.md, line: 223
#. type: Plain text
#, no-wrap
msgid "        /**\n"
"         * Bind data to the view.\n"
"         *\n"
"         * @param  \\Illuminate\\View\\View  $view\n"
"         * @return void\n"
"         */\n"
"        public function compose(View $view)\n"
"        {\n"
"            $view->with('count', $this->users->count());\n"
"        }\n"
"    }\n"
msgstr "        /**\n"
"         * Bind data to the view.\n"
"         *\n"
"         * @param  \\Illuminate\\View\\View  $view\n"
"         * @return void\n"
"         */\n"
"        public function compose(View $view)\n"
"        {\n"
"            $view->with('count', $this->users->count());\n"
"        }\n"
"    }\n"

# File: docs/8.x/views.md, line: 225
# File: docs/master/views.md, line: 225
#. type: Plain text
msgid "As you can see, all view composers are resolved via the [service container](/docs/{{version}}/container), so you may type-hint any dependencies you need within a composer's constructor."
msgstr "就像我們可以看到的，所有的 View Composer 都會經過 [Service Container] 解析，因此我們可以在 Composer 的 Constructor (建構函式) 上型別提示 (Type-Hint) 任何需要的相依性。"

# File: docs/8.x/views.md, line: 227
# File: docs/master/views.md, line: 227
#. type: Plain text
#, no-wrap
msgid "<a name=\"attaching-a-composer-to-multiple-views\"></a>\n"
msgstr "<a name=\"attaching-a-composer-to-multiple-views\"></a>\n"

# File: docs/8.x/views.md, line: 227
# File: docs/master/views.md, line: 227
#. type: Title ####
#, no-wrap
msgid "Attaching A Composer To Multiple Views"
msgstr "將 Composer 附加到多個 View 上"

# File: docs/8.x/views.md, line: 230
# File: docs/master/views.md, line: 230
#. type: Plain text
msgid "You may attach a view composer to multiple views at once by passing an array of views as the first argument to the `composer` method:"
msgstr "只要將一組 View 陣列作為第一個引數傳給 `composer` 方法，我們就可以一次將一個 View Composer 附加到多個 View 上："

# File: docs/8.x/views.md, line: 232
# File: docs/master/views.md, line: 232
#. type: Plain text
#, no-wrap
msgid "    use App\\Views\\Composers\\MultiComposer;\n"
msgstr "    use App\\Views\\Composers\\MultiComposer;\n"

# File: docs/8.x/views.md, line: 237
# File: docs/master/views.md, line: 237
#. type: Plain text
#, no-wrap
msgid "    View::composer(\n"
"        ['profile', 'dashboard'],\n"
"        MultiComposer::class\n"
"    );\n"
msgstr "    View::composer(\n"
"        ['profile', 'dashboard'],\n"
"        MultiComposer::class\n"
"    );\n"

# File: docs/8.x/views.md, line: 239
# File: docs/master/views.md, line: 239
#. type: Plain text
msgid "The `composer` method also accepts the `*` character as a wildcard, allowing you to attach a composer to all views:"
msgstr "`composer` 方法也接受使用 `*` 字元作為萬用字元。這樣我們就可以將某個 Composer 附加到所有 View 上："

# File: docs/8.x/views.md, line: 243
# File: docs/master/views.md, line: 243
#. type: Plain text
#, no-wrap
msgid "    View::composer('*', function ($view) {\n"
"        //\n"
"    });\n"
msgstr "    View::composer('*', function ($view) {\n"
"        //\n"
"    });\n"

# File: docs/8.x/views.md, line: 245
# File: docs/master/views.md, line: 245
#. type: Plain text
#, no-wrap
msgid "<a name=\"view-creators\"></a>\n"
msgstr "<a name=\"view-creators\"></a>\n"

# File: docs/8.x/views.md, line: 245
# File: docs/master/views.md, line: 245
#. type: Title ###
#, no-wrap
msgid "View Creators"
msgstr "View Creator"

# File: docs/8.x/views.md, line: 248
# File: docs/master/views.md, line: 248
#. type: Plain text
msgid "View \"creators\" are very similar to view composers; however, they are executed immediately after the view is instantiated instead of waiting until the view is about to render. To register a view creator, use the `creator` method:"
msgstr "View \"Creator\" 與 View Composer 非常類似。不過，View Creator 會在 View 被初始化後馬上執行，而不是在 View 要轉譯前才執行。若要註冊 View Creator，請使用 `creator` 方法："

# File: docs/8.x/views.md, line: 251
# File: docs/master/views.md, line: 251
#. type: Plain text
#, no-wrap
msgid "    use App\\View\\Creators\\ProfileCreator;\n"
"    use Illuminate\\Support\\Facades\\View;\n"
msgstr "    use App\\View\\Creators\\ProfileCreator;\n"
"    use Illuminate\\Support\\Facades\\View;\n"

# File: docs/8.x/views.md, line: 253
# File: docs/master/views.md, line: 253
#. type: Plain text
#, no-wrap
msgid "    View::creator('profile', ProfileCreator::class);\n"
msgstr "    View::creator('profile', ProfileCreator::class);\n"

# File: docs/8.x/views.md, line: 255
# File: docs/master/views.md, line: 255
#. type: Plain text
#, no-wrap
msgid "<a name=\"optimizing-views\"></a>\n"
msgstr "<a name=\"optimizing-views\"></a>\n"

# File: docs/8.x/views.md, line: 255
# File: docs/master/views.md, line: 255
#. type: Title ##
#, no-wrap
msgid "Optimizing Views"
msgstr "最佳化 View"

# File: docs/8.x/views.md, line: 258
# File: docs/master/views.md, line: 258
#. type: Plain text
msgid "By default, Blade template views are compiled on demand. When a request is executed that renders a view, Laravel will determine if a compiled version of the view exists. If the file exists, Laravel will then determine if the uncompiled view has been modified more recently than the compiled view. If the compiled view either does not exist, or the uncompiled view has been modified, Laravel will recompile the view."
msgstr "預設情況下，Blade 樣板的 View 會在被使用時候才編譯。當正在執行的 Request 要轉譯 View 時，Laravel 會判斷這個 View 是否有已編譯的版本。若有已編譯版本，則 Laravel 會接著比較未編譯版本的 View 是否比已編譯版本新。若這個 View 沒有已編譯好的版本，或是未編譯版本有修改過，則 Laravel 會重新編譯這個 View。"

# File: docs/8.x/views.md, line: 260
# File: docs/master/views.md, line: 260
#. type: Plain text
msgid "Compiling views during the request may have a small negative impact on performance, so Laravel provides the `view:cache` Artisan command to precompile all of the views utilized by your application. For increased performance, you may wish to run this command as part of your deployment process:"
msgstr "在 Request 中編譯 View 會對效能造成一點點的負面影響。因此，Laravel 提供了一個 `view:cache` Artisan 指令，來讓我們預先編譯專案中使用的所有 View。為了提升效能，建議在部署流程中執行這個指令："

# File: docs/8.x/views.md, line: 262
# File: docs/master/views.md, line: 262
#. type: Plain text
#, no-wrap
msgid "    php artisan view:cache\n"
msgstr "    php artisan view:cache\n"

# File: docs/8.x/views.md, line: 264
# File: docs/master/views.md, line: 264
#. type: Plain text
msgid "You may use the `view:clear` command to clear the view cache:"
msgstr "可以使用 `view:clear` 指令來清除 View 快取："

# File: docs/8.x/views.md, line: 265
# File: docs/master/views.md, line: 265
#. type: Plain text
#, no-wrap
msgid "    php artisan view:clear\n"
msgstr "    php artisan view:clear\n"

