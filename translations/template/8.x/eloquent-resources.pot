# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Taylor Otwell
# This file is distributed under the same license as the Laravel Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Laravel Documentation VERSION\n"
"POT-Creation-Date: 2022-01-25 16:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/8.x/eloquent-resources.md:1
#, no-wrap
msgid "Eloquent: API Resources"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-resources.md:14
msgid "[Introduction](#introduction)"
msgstr ""

#. type: Bullet: '- '
#: docs/8.x/eloquent-resources.md:14
msgid "[Generating Resources](#generating-resources)"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:14
#, no-wrap
msgid ""
"- [Concept Overview](#concept-overview)\n"
"    - [Resource Collections](#resource-collections)\n"
"- [Writing Resources](#writing-resources)\n"
"    - [Data Wrapping](#data-wrapping)\n"
"    - [Pagination](#pagination)\n"
"    - [Conditional Attributes](#conditional-attributes)\n"
"    - [Conditional Relationships](#conditional-relationships)\n"
"    - [Adding Meta Data](#adding-meta-data)\n"
"- [Resource Responses](#resource-responses)\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:16
#, no-wrap
msgid "<a name=\"introduction\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:16
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:19
msgid ""
"When building an API, you may need a transformation layer that sits between "
"your Eloquent models and the JSON responses that are actually returned to "
"your application's users. For example, you may wish to display certain "
"attributes for a subset of users and not others, or you may wish to always "
"include certain relationships in the JSON representation of your "
"models. Eloquent's resource classes allow you to expressively and easily "
"transform your models and model collections into JSON."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:21
msgid ""
"Of course, you may always convert Eloquent models or collections to JSON "
"using their `toJson` methods; however, Eloquent resources provide more "
"granular and robust control over the JSON serialization of your models and "
"their relationships."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:23
#, no-wrap
msgid "<a name=\"generating-resources\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:23
#, no-wrap
msgid "Generating Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:26
msgid ""
"To generate a resource class, you may use the `make:resource` Artisan "
"command. By default, resources will be placed in the `app/Http/Resources` "
"directory of your application. Resources extend the "
"`Illuminate\\Http\\Resources\\Json\\JsonResource` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:28
#, no-wrap
msgid "    php artisan make:resource UserResource\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:30
#, no-wrap
msgid "<a name=\"generating-resource-collections\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:30 docs/8.x/eloquent-resources.md:85 docs/8.x/eloquent-resources.md:259
#, no-wrap
msgid "Resource Collections"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:33
msgid ""
"In addition to generating resources that transform individual models, you "
"may generate resources that are responsible for transforming collections of "
"models. This allows your JSON responses to include links and other meta "
"information that is relevant to an entire collection of a given resource."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:35
msgid ""
"To create a resource collection, you should use the `--collection` flag when "
"creating the resource. Or, including the word `Collection` in the resource "
"name will indicate to Laravel that it should create a collection "
"resource. Collection resources extend the "
"`Illuminate\\Http\\Resources\\Json\\ResourceCollection` class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:37
#, no-wrap
msgid "    php artisan make:resource User --collection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:39 docs/8.x/eloquent-resources.md:99
#, no-wrap
msgid "    php artisan make:resource UserCollection\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:41
#, no-wrap
msgid "<a name=\"concept-overview\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:41
#, no-wrap
msgid "Concept Overview"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:44
#, no-wrap
msgid ""
"> {tip} This is a high-level overview of resources and resource "
"collections. You are highly encouraged to read the other sections of this "
"documentation to gain a deeper understanding of the customization and power "
"offered to you by resources.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:46
msgid ""
"Before diving into all of the options available to you when writing "
"resources, let's first take a high-level look at how resources are used "
"within Laravel. A resource class represents a single model that needs to be "
"transformed into a JSON structure. For example, here is a simple "
"`UserResource` resource class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:48 docs/8.x/eloquent-resources.md:103 docs/8.x/eloquent-resources.md:142 docs/8.x/eloquent-resources.md:174 docs/8.x/eloquent-resources.md:197 docs/8.x/eloquent-resources.md:273 docs/8.x/eloquent-resources.md:329 docs/8.x/eloquent-resources.md:347 docs/8.x/eloquent-resources.md:386 docs/8.x/eloquent-resources.md:652 docs/8.x/eloquent-resources.md:722
#, no-wrap
msgid "    <?php\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:50 docs/8.x/eloquent-resources.md:105 docs/8.x/eloquent-resources.md:144 docs/8.x/eloquent-resources.md:176 docs/8.x/eloquent-resources.md:199 docs/8.x/eloquent-resources.md:275 docs/8.x/eloquent-resources.md:331 docs/8.x/eloquent-resources.md:388 docs/8.x/eloquent-resources.md:654 docs/8.x/eloquent-resources.md:724
#, no-wrap
msgid "    namespace App\\Http\\Resources;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:52 docs/8.x/eloquent-resources.md:146 docs/8.x/eloquent-resources.md:201 docs/8.x/eloquent-resources.md:333 docs/8.x/eloquent-resources.md:726
#, no-wrap
msgid "    use Illuminate\\Http\\Resources\\Json\\JsonResource;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:72 docs/8.x/eloquent-resources.md:221
#, no-wrap
msgid ""
"    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Transform the resource into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'id' => $this->id,\n"
"                'name' => $this->name,\n"
"                'email' => $this->email,\n"
"                'created_at' => $this->created_at,\n"
"                'updated_at' => $this->updated_at,\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:74
msgid ""
"Every resource class defines a `toArray` method which returns the array of "
"attributes that should be converted to JSON when the resource is returned as "
"a response from a route or controller method."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:76
msgid ""
"Note that we can access model properties directly from the `$this` "
"variable. This is because a resource class will automatically proxy property "
"and method access down to the underlying model for convenient access. Once "
"the resource is defined, it may be returned from a route or controller. The "
"resource accepts the underlying model instance via its constructor:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:79 docs/8.x/eloquent-resources.md:91 docs/8.x/eloquent-resources.md:161 docs/8.x/eloquent-resources.md:226 docs/8.x/eloquent-resources.md:265 docs/8.x/eloquent-resources.md:703 docs/8.x/eloquent-resources.md:712
#, no-wrap
msgid ""
"    use App\\Http\\Resources\\UserResource;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:83 docs/8.x/eloquent-resources.md:230 docs/8.x/eloquent-resources.md:707
#, no-wrap
msgid ""
"    Route::get('/user/{id}', function ($id) {\n"
"        return new UserResource(User::findOrFail($id));\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:85
#, no-wrap
msgid "<a name=\"resource-collections\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:88
msgid ""
"If you are returning a collection of resources or a paginated response, you "
"should use the `collection` method provided by your resource class when "
"creating the resource instance in your route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:95 docs/8.x/eloquent-resources.md:269
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return UserResource::collection(User::all());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:97
msgid ""
"Note that this does not allow any addition of custom meta data that may need "
"to be returned with your collection. If you would like to customize the "
"resource collection response, you may create a dedicated resource to "
"represent the collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:101
msgid ""
"Once the resource collection class has been generated, you may easily define "
"any meta data that should be included with the response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:107 docs/8.x/eloquent-resources.md:178 docs/8.x/eloquent-resources.md:277 docs/8.x/eloquent-resources.md:390 docs/8.x/eloquent-resources.md:656
#, no-wrap
msgid "    use Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:126 docs/8.x/eloquent-resources.md:296
#, no-wrap
msgid ""
"    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'data' => $this->collection,\n"
"                'links' => [\n"
"                    'self' => 'link-value',\n"
"                ],\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:128
msgid ""
"After defining your resource collection, it may be returned from a route or "
"controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:131 docs/8.x/eloquent-resources.md:301 docs/8.x/eloquent-resources.md:447
#, no-wrap
msgid ""
"    use App\\Http\\Resources\\UserCollection;\n"
"    use App\\Models\\User;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:135 docs/8.x/eloquent-resources.md:305
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return new UserCollection(User::all());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:137
#, no-wrap
msgid "<a name=\"preserving-collection-keys\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:137
#, no-wrap
msgid "Preserving Collection Keys"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:140
msgid ""
"When returning a resource collection from a route, Laravel resets the "
"collection's keys so that they are in numerical order. However, you may add "
"a `preserveKeys` property to your resource class indicating whether a "
"collection's original keys should be preserved:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:156
#, no-wrap
msgid ""
"    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Indicates if the resource's collection keys should be "
"preserved.\n"
"         *\n"
"         * @var bool\n"
"         */\n"
"        public $preserveKeys = true;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:158
msgid ""
"When the `preserveKeys` property is set to `true`, collection keys will be "
"preserved when the collection is returned from a route or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:165
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return UserResource::collection(User::all()->keyBy->id);\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:167
#, no-wrap
msgid "<a name=\"customizing-the-underlying-resource-class\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:167
#, no-wrap
msgid "Customizing The Underlying Resource Class"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:170
#, no-wrap
msgid ""
"Typically, the `$this->collection` property of a resource collection is "
"automatically populated with the result of mapping each item of the "
"collection to its singular resource class. The singular resource class is "
"assumed to be the collection's class name without the trailing `Collection` "
"portion of the class name. In addition, depending on your personal "
"preference, the singular resource class may or may not be suffixed with "
"`Resource`.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:172
msgid ""
"For example, `UserCollection` will attempt to map the given user instances "
"into the `UserResource` resource. To customize this behavior, you may "
"override the `$collects` property of your resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:188
#, no-wrap
msgid ""
"    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * The resource that this resource collects.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public $collects = Member::class;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:190
#, no-wrap
msgid "<a name=\"writing-resources\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:190
#, no-wrap
msgid "Writing Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:193
#, no-wrap
msgid ""
"> {tip} If you have not read the [concept overview](#concept-overview), you "
"are highly encouraged to do so before proceeding with this documentation.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:195
msgid ""
"In essence, resources are simple. They only need to transform a given model "
"into an array. So, each resource contains a `toArray` method which "
"translates your model's attributes into an API friendly array that can be "
"returned from your application's routes or controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:223
msgid ""
"Once a resource has been defined, it may be returned directly from a route "
"or controller:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:232
#, no-wrap
msgid "<a name=\"relationships\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:232
#, no-wrap
msgid "Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:235
msgid ""
"If you would like to include related resources in your response, you may add "
"them to the array returned by your resource's `toArray` method. In this "
"example, we will use the `PostResource` resource's `collection` method to "
"add the user's blog posts to the resource response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:237 docs/8.x/eloquent-resources.md:555
#, no-wrap
msgid "    use App\\Http\\Resources\\PostResource;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:255
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'posts' => PostResource::collection($this->posts),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:257
#, no-wrap
msgid ""
"> {tip} If you would like to include relationships only when they have "
"already been loaded, check out the documentation on [conditional "
"relationships](#conditional-relationships).\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:259
#, no-wrap
msgid "<a name=\"writing-resource-collections\"></a>\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:262
msgid ""
"While resources transform a single model into an array, resource collections "
"transform a collection of models into an array. However, it is not "
"absolutely necessary to define a resource collection class for each one of "
"your models since all resources provide a `collection` method to generate an "
"\"ad-hoc\" resource collection on the fly:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:271
msgid ""
"However, if you need to customize the meta data returned with the "
"collection, it is necessary to define your own resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:298
msgid ""
"Like singular resources, resource collections may be returned directly from "
"routes or controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:307
#, no-wrap
msgid "<a name=\"data-wrapping\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:307
#, no-wrap
msgid "Data Wrapping"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:310
msgid ""
"By default, your outermost resource is wrapped in a `data` key when the "
"resource response is converted to JSON. So, for example, a typical resource "
"collection response looks like the following:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:325
#, no-wrap
msgid ""
"    {\n"
"        \"data\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"name\": \"Eladio Schroeder Sr.\",\n"
"                \"email\": \"therese28@example.com\",\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"name\": \"Liliana Mayert\",\n"
"                \"email\": \"evandervort@example.com\",\n"
"            }\n"
"        ]\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:327
msgid ""
"If you would like to use a custom key instead of `data`, you may define a "
"`$wrap` attribute on the resource class:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:343
#, no-wrap
msgid ""
"    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * The \"data\" wrapper that should be applied.\n"
"         *\n"
"         * @var string\n"
"         */\n"
"        public static $wrap = 'user';\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:345
msgid ""
"If you would like to disable the wrapping of the outermost resource, you "
"should invoke the `withoutWrapping` method on the base "
"`Illuminate\\Http\\Resources\\Json\\JsonResource` class. Typically, you "
"should call this method from your `AppServiceProvider` or another [service "
"provider](/docs/{{version}}/providers) that is loaded on every request to "
"your application:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:349
#, no-wrap
msgid "    namespace App\\Providers;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:352
#, no-wrap
msgid ""
"    use Illuminate\\Http\\Resources\\Json\\JsonResource;\n"
"    use Illuminate\\Support\\ServiceProvider;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:364
#, no-wrap
msgid ""
"    class AppServiceProvider extends ServiceProvider\n"
"    {\n"
"        /**\n"
"         * Register any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function register()\n"
"        {\n"
"            //\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:375
#, no-wrap
msgid ""
"        /**\n"
"         * Bootstrap any application services.\n"
"         *\n"
"         * @return void\n"
"         */\n"
"        public function boot()\n"
"        {\n"
"            JsonResource::withoutWrapping();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:377
#, no-wrap
msgid ""
"> {note} The `withoutWrapping` method only affects the outermost response "
"and will not remove `data` keys that you manually add to your own resource "
"collections.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:379
#, no-wrap
msgid "<a name=\"wrapping-nested-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:379
#, no-wrap
msgid "Wrapping Nested Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:382
msgid ""
"You have total freedom to determine how your resource's relationships are "
"wrapped. If you would like all resource collections to be wrapped in a "
"`data` key, regardless of their nesting, you should define a resource "
"collection class for each resource and return the collection within a `data` "
"key."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:384
msgid ""
"You may be wondering if this will cause your outermost resource to be "
"wrapped in two `data` keys. Don't worry, Laravel will never let your "
"resources be accidentally double-wrapped, so you don't have to be concerned "
"about the nesting level of the resource collection you are transforming:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:404
#, no-wrap
msgid ""
"    class CommentsCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return ['data' => $this->collection];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:406
#, no-wrap
msgid "<a name=\"data-wrapping-and-pagination\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:406
#, no-wrap
msgid "Data Wrapping And Pagination"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:409
msgid ""
"When returning paginated collections via a resource response, Laravel will "
"wrap your resource data in a `data` key even if the `withoutWrapping` method "
"has been called. This is because paginated responses always contain `meta` "
"and `links` keys with information about the paginator's state:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:439 docs/8.x/eloquent-resources.md:483
#, no-wrap
msgid ""
"    {\n"
"        \"data\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"name\": \"Eladio Schroeder Sr.\",\n"
"                \"email\": \"therese28@example.com\",\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"name\": \"Liliana Mayert\",\n"
"                \"email\": \"evandervort@example.com\",\n"
"            }\n"
"        ],\n"
"        \"links\":{\n"
"            \"first\": \"http://example.com/pagination?page=1\",\n"
"            \"last\": \"http://example.com/pagination?page=1\",\n"
"            \"prev\": null,\n"
"            \"next\": null\n"
"        },\n"
"        \"meta\":{\n"
"            \"current_page\": 1,\n"
"            \"from\": 1,\n"
"            \"last_page\": 1,\n"
"            \"path\": \"http://example.com/pagination\",\n"
"            \"per_page\": 15,\n"
"            \"to\": 10,\n"
"            \"total\": 10\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:441
#, no-wrap
msgid "<a name=\"pagination\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:441
#, no-wrap
msgid "Pagination"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:444
msgid ""
"You may pass a Laravel paginator instance to the `collection` method of a "
"resource or to a custom resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:451
#, no-wrap
msgid ""
"    Route::get('/users', function () {\n"
"        return new UserCollection(User::paginate());\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:453
msgid ""
"Paginated responses always contain `meta` and `links` keys with information "
"about the paginator's state:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:485
#, no-wrap
msgid "<a name=\"conditional-attributes\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:485
#, no-wrap
msgid "Conditional Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:488
msgid ""
"Sometimes you may wish to only include an attribute in a resource response "
"if a given condition is met. For example, you may wish to only include a "
"value if the current user is an \"administrator\". Laravel provides a "
"variety of helper methods to assist you in this situation. The `when` method "
"may be used to conditionally add an attribute to a resource response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:490
#, no-wrap
msgid "    use Illuminate\\Support\\Facades\\Auth;\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:508
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'secret' => $this->when(Auth::user()->isAdmin(), "
"'secret-value'),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:510
msgid ""
"In this example, the `secret` key will only be returned in the final "
"resource response if the authenticated user's `isAdmin` method returns "
"`true`. If the method returns `false`, the `secret` key will be removed from "
"the resource response before it is sent to the client. The `when` method "
"allows you to expressively define your resources without resorting to "
"conditional statements when building the array."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:512
msgid ""
"The `when` method also accepts a closure as its second argument, allowing "
"you to calculate the resulting value only if the given condition is `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:516
#, no-wrap
msgid ""
"    'secret' => $this->when(Auth::user()->isAdmin(), function () {\n"
"        return 'secret-value';\n"
"    }),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:518
#, no-wrap
msgid "<a name=\"merging-conditional-attributes\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:518
#, no-wrap
msgid "Merging Conditional Attributes"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:521
msgid ""
"Sometimes you may have several attributes that should only be included in "
"the resource response based on the same condition. In this case, you may use "
"the `mergeWhen` method to include the attributes in the response only when "
"the given condition is `true`:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:542
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            $this->mergeWhen(Auth::user()->isAdmin(), [\n"
"                'first-secret' => 'value',\n"
"                'second-secret' => 'value',\n"
"            ]),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:544
msgid ""
"Again, if the given condition is `false`, these attributes will be removed "
"from the resource response before it is sent to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:546
#, no-wrap
msgid ""
"> {note} The `mergeWhen` method should not be used within arrays that mix "
"string and numeric keys. Furthermore, it should not be used within arrays "
"with numeric keys that are not ordered sequentially.\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:548
#, no-wrap
msgid "<a name=\"conditional-relationships\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:548
#, no-wrap
msgid "Conditional Relationships"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:551
msgid ""
"In addition to conditionally loading attributes, you may conditionally "
"include relationships on your resource responses based on if the "
"relationship has already been loaded on the model. This allows your "
"controller to decide which relationships should be loaded on the model and "
"your resource can easily include them only when they have actually been "
"loaded. Ultimately, this makes it easier to avoid \"N+1\" query problems "
"within your resources."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:553
msgid ""
"The `whenLoaded` method may be used to conditionally load a relationship. In "
"order to avoid unnecessarily loading relationships, this method accepts the "
"name of the relationship instead of the relationship itself:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:573
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'email' => $this->email,\n"
"            'posts' => "
"PostResource::collection($this->whenLoaded('posts')),\n"
"            'created_at' => $this->created_at,\n"
"            'updated_at' => $this->updated_at,\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:575
msgid ""
"In this example, if the relationship has not been loaded, the `posts` key "
"will be removed from the resource response before it is sent to the client."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:577
#, no-wrap
msgid "<a name=\"conditional-pivot-information\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:577
#, no-wrap
msgid "Conditional Pivot Information"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:580
msgid ""
"In addition to conditionally including relationship information in your "
"resource responses, you may conditionally include data from the intermediate "
"tables of many-to-many relationships using the `whenPivotLoaded` method. The "
"`whenPivotLoaded` method accepts the name of the pivot table as its first "
"argument. The second argument should be a closure that returns the value to "
"be returned if the pivot information is available on the model:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:597
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'expires_at' => $this->whenPivotLoaded('role_user', function () "
"{\n"
"                return $this->pivot->expires_at;\n"
"            }),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:599
msgid ""
"If your relationship is using a [custom intermediate table "
"model](/docs/{{version}}/eloquent-relationships#defining-custom-intermediate-table-models), "
"you may pass an instance of the intermediate table model as the first "
"argument to the `whenPivotLoaded` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:603
#, no-wrap
msgid ""
"    'expires_at' => $this->whenPivotLoaded(new Membership, function () {\n"
"        return $this->pivot->expires_at;\n"
"    }),\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:605
msgid ""
"If your intermediate table is using an accessor other than `pivot`, you may "
"use the `whenPivotLoadedAs` method:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:622
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'id' => $this->id,\n"
"            'name' => $this->name,\n"
"            'expires_at' => $this->whenPivotLoadedAs('subscription', "
"'role_user', function () {\n"
"                return $this->subscription->expires_at;\n"
"            }),\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:624
#, no-wrap
msgid "<a name=\"adding-meta-data\"></a>\n"
msgstr ""

#. type: Title ###
#: docs/8.x/eloquent-resources.md:624
#, no-wrap
msgid "Adding Meta Data"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:627
msgid ""
"Some JSON API standards require the addition of meta data to your resource "
"and resource collections responses. This often includes things like `links` "
"to the resource or related resources, or meta data about the resource "
"itself. If you need to return additional meta data about a resource, include "
"it in your `toArray` method. For example, you might include `link` "
"information when transforming a resource collection:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:643
#, no-wrap
msgid ""
"    /**\n"
"     * Transform the resource into an array.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return array\n"
"     */\n"
"    public function toArray($request)\n"
"    {\n"
"        return [\n"
"            'data' => $this->collection,\n"
"            'links' => [\n"
"                'self' => 'link-value',\n"
"            ],\n"
"        ];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:645
msgid ""
"When returning additional meta data from your resources, you never have to "
"worry about accidentally overriding the `links` or `meta` keys that are "
"automatically added by Laravel when returning paginated responses. Any "
"additional `links` you define will be merged with the links provided by the "
"paginator."
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:647
#, no-wrap
msgid "<a name=\"top-level-meta-data\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:647
#, no-wrap
msgid "Top Level Meta Data"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:650
msgid ""
"Sometimes you may wish to only include certain meta data with a resource "
"response if the resource is the outermost resource being "
"returned. Typically, this includes meta information about the response as a "
"whole. To define this meta data, add a `with` method to your resource "
"class. This method should return an array of meta data to be included with "
"the resource response only when the resource is the outermost resource being "
"transformed:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:669
#, no-wrap
msgid ""
"    class UserCollection extends ResourceCollection\n"
"    {\n"
"        /**\n"
"         * Transform the resource collection into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return parent::toArray($request);\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:685
#, no-wrap
msgid ""
"        /**\n"
"         * Get additional data that should be returned with the resource "
"array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function with($request)\n"
"        {\n"
"            return [\n"
"                'meta' => [\n"
"                    'key' => 'value',\n"
"                ],\n"
"            ];\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:687
#, no-wrap
msgid "<a name=\"adding-meta-data-when-constructing-resources\"></a>\n"
msgstr ""

#. type: Title ####
#: docs/8.x/eloquent-resources.md:687
#, no-wrap
msgid "Adding Meta Data When Constructing Resources"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:690
msgid ""
"You may also add top-level data when constructing resource instances in your "
"route or controller. The `additional` method, which is available on all "
"resources, accepts an array of data that should be added to the resource "
"response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:695
#, no-wrap
msgid ""
"    return (new UserCollection(User::all()->load('roles')))\n"
"                    ->additional(['meta' => [\n"
"                        'key' => 'value',\n"
"                    ]]);\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:697
#, no-wrap
msgid "<a name=\"resource-responses\"></a>\n"
msgstr ""

#. type: Title ##
#: docs/8.x/eloquent-resources.md:697
#, no-wrap
msgid "Resource Responses"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:700
msgid ""
"As you have already read, resources may be returned directly from routes and "
"controllers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:709
msgid ""
"However, sometimes you may need to customize the outgoing HTTP response "
"before it is sent to the client. There are two ways to accomplish "
"this. First, you may chain the `response` method onto the resource. This "
"method will return an `Illuminate\\Http\\JsonResponse` instance, giving you "
"full control over the response's headers:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:718
#, no-wrap
msgid ""
"    Route::get('/user', function () {\n"
"        return (new UserResource(User::find(1)))\n"
"                    ->response()\n"
"                    ->header('X-Value', 'True');\n"
"    });\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:720
msgid ""
"Alternatively, you may define a `withResponse` method within the resource "
"itself. This method will be called when the resource is returned as the "
"outermost resource in a response:"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:741
#, no-wrap
msgid ""
"    class UserResource extends JsonResource\n"
"    {\n"
"        /**\n"
"         * Transform the resource into an array.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @return array\n"
"         */\n"
"        public function toArray($request)\n"
"        {\n"
"            return [\n"
"                'id' => $this->id,\n"
"            ];\n"
"        }\n"
msgstr ""

#. type: Plain text
#: docs/8.x/eloquent-resources.md:753
#, no-wrap
msgid ""
"        /**\n"
"         * Customize the outgoing response for the resource.\n"
"         *\n"
"         * @param  \\Illuminate\\Http\\Request  $request\n"
"         * @param  \\Illuminate\\Http\\Response  $response\n"
"         * @return void\n"
"         */\n"
"        public function withResponse($request, $response)\n"
"        {\n"
"            $response->header('X-Value', 'True');\n"
"        }\n"
"    }\n"
msgstr ""
