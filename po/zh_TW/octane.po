msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/octane.pot\n"
"X-Crowdin-File-ID: 111\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-02-13 09:29\n"

#: docs/8.x/octane.md:block 1 (header)
msgid "Laravel Octane"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Installation](#installation)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Server Prerequisites](#server-prerequisites)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[RoadRunner](#roadrunner)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Swoole](#swoole)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application](#serving-your-application)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application Via HTTPS](#serving-your-application-via-https)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Serving Your Application Via Nginx](#serving-your-application-via-nginx)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Watching For File Changes](#watching-for-file-changes)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Specifying The Worker Count](#specifying-the-worker-count)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Specifying The Max Request Count](#specifying-the-max-request-count)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Reloading The Workers](#reloading-the-workers)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Stopping The Server](#stopping-the-server)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Dependency Injection & Octane](#dependency-injection-and-octane)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Container Injection](#container-injection)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Request Injection](#request-injection)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Configuration Repository Injection](#configuration-repository-injection)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Managing Memory Leaks](#managing-memory-leaks)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Concurrent Tasks](#concurrent-tasks)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Ticks & Intervals](#ticks-and-intervals)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[The Octane Cache](#the-octane-cache)"
msgstr ""

#: docs/8.x/octane.md:block 2 (unordered list)
msgid "[Tables](#tables)"
msgstr ""

#: docs/8.x/octane.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/8.x/octane.md:block 5 (paragraph)
msgid "[Laravel Octane](https://github.com/laravel/octane) supercharges your application's performance by serving your application using high-powered application servers, including [Open Swoole](https://swoole.co.uk), [Swoole](https://github.com/swoole/swoole-src), and [RoadRunner](https://roadrunner.dev). Octane boots your application once, keeps it in memory, and then feeds it requests at supersonic speeds."
msgstr ""

#: docs/8.x/octane.md:block 7 (header)
msgid "Installation"
msgstr ""

#: docs/8.x/octane.md:block 8 (paragraph)
msgid "Octane may be installed via the Composer package manager:"
msgstr ""

#: docs/8.x/octane.md:block 9 (code)
msgid "composer require laravel/octane\n"
msgstr ""

#: docs/8.x/octane.md:block 10 (paragraph)
msgid "After installing Octane, you may execute the `octane:install` Artisan command, which will install Octane's configuration file into your application:"
msgstr ""

#: docs/8.x/octane.md:block 11 (code)
msgid "php artisan octane:install\n"
msgstr ""

#: docs/8.x/octane.md:block 13 (header)
msgid "Server Prerequisites"
msgstr ""

#: docs/8.x/octane.md:block 14 (quote)
msgid "{note} Laravel Octane requires [PHP 8.0+](https://php.net/releases/)."
msgstr ""

#: docs/8.x/octane.md:block 16 (header)
msgid "RoadRunner"
msgstr ""

#: docs/8.x/octane.md:block 17 (paragraph)
msgid "[RoadRunner](https://roadrunner.dev) is powered by the RoadRunner binary, which is built using Go. The first time you start a RoadRunner based Octane server, Octane will offer to download and install the RoadRunner binary for you."
msgstr ""

#: docs/8.x/octane.md:block 19 (header)
msgid "RoadRunner Via Laravel Sail"
msgstr ""

#: docs/8.x/octane.md:block 20 (paragraph)
msgid "If you plan to develop your application using [Laravel Sail](/docs/{{version}}/sail), you should run the following commands to install Octane and RoadRunner:"
msgstr ""

#: docs/8.x/octane.md:block 21 (code)
msgid "./vendor/bin/sail up\n\n"
"./vendor/bin/sail composer require laravel/octane spiral/roadrunner\n"
msgstr ""

#: docs/8.x/octane.md:block 22 (paragraph)
msgid "Next, you should start a Sail shell and use the `rr` executable to retrieve the latest Linux based build of the RoadRunner binary:"
msgstr ""

#: docs/8.x/octane.md:block 23 (code)
msgid "./vendor/bin/sail shell\n\n"
"# Within the Sail shell...\n"
"./vendor/bin/rr get-binary\n"
msgstr ""

#: docs/8.x/octane.md:block 24 (paragraph)
msgid "After installing the RoadRunner binary, you may exit your Sail shell session. You will now need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr ""

#: docs/8.x/octane.md:block 25 (code)
msgid "./vendor/bin/sail artisan sail:publish\n"
msgstr ""

#: docs/8.x/octane.md:block 26 (paragraph)
msgid "Next, update the `command` directive of your application's `docker/supervisord.conf` file so that Sail serves your application using Octane instead of the PHP development server:"
msgstr ""

#: docs/8.x/octane.md:block 27 (code)
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=roadrunner --host=0.0.0.0 --rpc-port=6001 --port=8000\n"
msgstr ""

#: docs/8.x/octane.md:block 28 (paragraph)
msgid "Finally, ensure the `rr` binary is executable and build your Sail images:"
msgstr ""

#: docs/8.x/octane.md:block 29 (code)
msgid "chmod +x ./rr\n\n"
"./vendor/bin/sail build --no-cache\n"
msgstr ""

#: docs/8.x/octane.md:block 31 (header)
msgid "Swoole"
msgstr ""

#: docs/8.x/octane.md:block 32 (paragraph)
msgid "If you plan to use the Swoole application server to serve your Laravel Octane application, you must install the Swoole PHP extension. Typically, this can be done via PECL:"
msgstr ""

#: docs/8.x/octane.md:block 33 (code)
msgid "pecl install swoole\n"
msgstr ""

#: docs/8.x/octane.md:block 35 (header)
msgid "Swoole Via Laravel Sail"
msgstr ""

#: docs/8.x/octane.md:block 36 (quote)
msgid "{note} Before serving an Octane application via Sail, ensure you have the latest version of Laravel Sail and execute `./vendor/bin/sail build --no-cache` within your application's root directory."
msgstr ""

#: docs/8.x/octane.md:block 37 (paragraph)
msgid "Alternatively, you may develop your Swoole based Octane application using [Laravel Sail](/docs/{{version}}/sail), the official Docker based development environment for Laravel. Laravel Sail includes the Swoole extension by default. However, you will still need to adjust the `supervisor.conf` file used by Sail to keep your application running. To get started, execute the `sail:publish` Artisan command:"
msgstr ""

#: docs/8.x/octane.md:block 40 (code)
msgid "command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\n"
msgstr ""

#: docs/8.x/octane.md:block 41 (paragraph)
msgid "Finally, build your Sail images:"
msgstr ""

#: docs/8.x/octane.md:block 42 (code)
msgid "./vendor/bin/sail build --no-cache\n"
msgstr ""

#: docs/8.x/octane.md:block 44 (header)
msgid "Swoole Configuration"
msgstr ""

#: docs/8.x/octane.md:block 45 (paragraph)
msgid "Swoole supports a few additional configuration options that you may add to your `octane` configuration file if necessary. Because they rarely need to be modified, these options are not included in the default configuration file:"
msgstr ""

#: docs/8.x/octane.md:block 46 (code)
msgid "'swoole' => [\n"
"    'options' => [\n"
"        'log_file' => storage_path('logs/swoole_http.log'),\n"
"        'package_max_length' => 10 * 1024 * 1024,\n"
"    ],\n"
"];\n"
msgstr ""

#: docs/8.x/octane.md:block 48 (header)
msgid "Serving Your Application"
msgstr ""

#: docs/8.x/octane.md:block 49 (paragraph)
msgid "The Octane server can be started via the `octane:start` Artisan command. By default, this command will utilize the server specified by the `server` configuration option of your application's `octane` configuration file:"
msgstr ""

#: docs/8.x/octane.md:block 50 (code)
msgid "php artisan octane:start\n"
msgstr ""

#: docs/8.x/octane.md:block 51 (paragraph)
msgid "By default, Octane will start the server on port 8000, so you may access your application in a web browser via `http://localhost:8000`."
msgstr ""

#: docs/8.x/octane.md:block 53 (header)
msgid "Serving Your Application Via HTTPS"
msgstr ""

#: docs/8.x/octane.md:block 54 (paragraph)
msgid "By default, applications running via Octane generate links prefixed with `http://`. The `OCTANE_HTTPS` environment variable, used within your application's `config/octane.php` configuration file, can be set to `true` when serving your application via HTTPS. When this configuration value is set to `true`, Octane will instruct Laravel to prefix all generated links with `https://`:"
msgstr ""

#: docs/8.x/octane.md:block 55 (code)
msgid "'https' => env('OCTANE_HTTPS', false),\n"
msgstr ""

#: docs/8.x/octane.md:block 57 (header)
msgid "Serving Your Application Via Nginx"
msgstr ""

#: docs/8.x/octane.md:block 58 (quote)
msgid "{tip} If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel Octane application, check out [Laravel Forge](https://forge.laravel.com)."
msgstr ""

#: docs/8.x/octane.md:block 59 (paragraph)
msgid "In production environments, you should serve your Octane application behind a traditional web server such as a Nginx or Apache. Doing so will allow the web server to serve your static assets such as images and stylesheets, as well as manage your SSL certificate termination."
msgstr ""

#: docs/8.x/octane.md:block 60 (paragraph)
msgid "In the Nginx configuration example below, Nginx will serve the site's static assets and proxy requests to the Octane server that is running on port 8000:"
msgstr ""

#: docs/8.x/octane.md:block 61 (code)
msgid "map $http_upgrade $connection_upgrade {\n"
"    default upgrade;\n"
"    ''      close;\n"
"}\n\n"
"server {\n"
"    listen 80;\n"
"    listen [::]:80;\n"
"    server_name domain.com;\n"
"    server_tokens off;\n"
"    root /home/forge/domain.com/public;\n\n"
"    index index.php;\n\n"
"    charset utf-8;\n\n"
"    location /index.php {\n"
"        try_files /not_exists @octane;\n"
"    }\n\n"
"    location / {\n"
"        try_files $uri $uri/ @octane;\n"
"    }\n\n"
"    location = /favicon.ico { access_log off; log_not_found off; }\n"
"    location = /robots.txt  { access_log off; log_not_found off; }\n\n"
"    access_log off;\n"
"    error_log  /var/log/nginx/domain.com-error.log error;\n\n"
"    error_page 404 /index.php;\n\n"
"    location @octane {\n"
"        set $suffix \"\";\n\n"
"        if ($uri = /index.php) {\n"
"            set $suffix ?$query_string;\n"
"        }\n\n"
"        proxy_http_version 1.1;\n"
"        proxy_set_header Host $http_host;\n"
"        proxy_set_header Scheme $scheme;\n"
"        proxy_set_header SERVER_PORT $server_port;\n"
"        proxy_set_header REMOTE_ADDR $remote_addr;\n"
"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n"
"        proxy_set_header Upgrade $http_upgrade;\n"
"        proxy_set_header Connection $connection_upgrade;\n\n"
"        proxy_pass http://127.0.0.1:8000$suffix;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/octane.md:block 63 (header)
msgid "Watching For File Changes"
msgstr ""

#: docs/8.x/octane.md:block 64 (paragraph)
msgid "Since your application is loaded in memory once when the Octane server starts, any changes to your application's files will not be reflected when you refresh your browser. For example, route definitions added to your `routes/web.php` file will not be reflected until the server is restarted. For convenience, you may use the `--watch` flag to instruct Octane to automatically restart the server on any file changes within your application:"
msgstr ""

#: docs/8.x/octane.md:block 65 (code)
msgid "php artisan octane:start --watch\n"
msgstr ""

#: docs/8.x/octane.md:block 66 (paragraph)
msgid "Before using this feature, you should ensure that [Node](https://nodejs.org) is installed within your local development environment. In addition, you should install the [Chokidar](https://github.com/paulmillr/chokidar) file-watching library within your project:library:"
msgstr ""

#: docs/8.x/octane.md:block 67 (code)
msgid "npm install --save-dev chokidar\n"
msgstr ""

#: docs/8.x/octane.md:block 68 (paragraph)
msgid "You may configure the directories and files that should be watched using the `watch` configuration option within your application's `config/octane.php` configuration file."
msgstr ""

#: docs/8.x/octane.md:block 70 (header)
msgid "Specifying The Worker Count"
msgstr ""

#: docs/8.x/octane.md:block 71 (paragraph)
msgid "By default, Octane will start an application request worker for each CPU core provided by your machine. These workers will then be used to serve incoming HTTP requests as they enter your application. You may manually specify how many workers you would like to start using the `--workers` option when invoking the `octane:start` command:"
msgstr ""

#: docs/8.x/octane.md:block 72 (code)
msgid "php artisan octane:start --workers=4\n"
msgstr ""

#: docs/8.x/octane.md:block 73 (paragraph)
msgid "If you are using the Swoole application server, you may also specify how many [\"task workers\"](#concurrent-tasks) you wish to start:"
msgstr ""

#: docs/8.x/octane.md:block 74 (code)
msgid "php artisan octane:start --workers=4 --task-workers=6\n"
msgstr ""

#: docs/8.x/octane.md:block 76 (header)
msgid "Specifying The Max Request Count"
msgstr ""

#: docs/8.x/octane.md:block 77 (paragraph)
msgid "To help prevent stray memory leaks, Octane can gracefully restart a worker once it has handled a given number of requests. To instruct Octane to do this, you may use the `--max-requests` option:"
msgstr ""

#: docs/8.x/octane.md:block 78 (code)
msgid "php artisan octane:start --max-requests=250\n"
msgstr ""

#: docs/8.x/octane.md:block 80 (header)
msgid "Reloading The Workers"
msgstr ""

#: docs/8.x/octane.md:block 81 (paragraph)
msgid "You may gracefully restart the Octane server's application workers using the `octane:reload` command. Typically, this should be done after deployment so that your newly deployed code is loaded into memory and is used to serve to subsequent requests:"
msgstr ""

#: docs/8.x/octane.md:block 82 (code)
msgid "php artisan octane:reload\n"
msgstr ""

#: docs/8.x/octane.md:block 84 (header)
msgid "Stopping The Server"
msgstr ""

#: docs/8.x/octane.md:block 85 (paragraph)
msgid "You may stop the Octane server using the `octane:stop` Artisan command:"
msgstr ""

#: docs/8.x/octane.md:block 86 (code)
msgid "php artisan octane:stop\n"
msgstr ""

#: docs/8.x/octane.md:block 88 (header)
msgid "Checking The Server Status"
msgstr ""

#: docs/8.x/octane.md:block 89 (paragraph)
msgid "You may check the current status of the Octane server using the `octane:status` Artisan command:"
msgstr ""

#: docs/8.x/octane.md:block 90 (code)
msgid "php artisan octane:status\n"
msgstr ""

#: docs/8.x/octane.md:block 92 (header)
msgid "Dependency Injection & Octane"
msgstr ""

#: docs/8.x/octane.md:block 93 (paragraph)
msgid "Since Octane boots your application once and keeps it in memory while serving requests, there are a few caveats you should consider while building your application. For example, the `register` and `boot` methods of your application's service providers will only be executed once when the request worker initially boots. On subsequent requests, the same application instance will be reused."
msgstr ""

#: docs/8.x/octane.md:block 94 (paragraph)
msgid "In light of this, you should take special care when injecting the application service container or request into any object's constructor. By doing so, that object may have a stale version of the container or request on subsequent requests."
msgstr ""

#: docs/8.x/octane.md:block 95 (paragraph)
msgid "Octane will automatically handle resetting any first-party framework state between requests. However, Octane does not always know how to reset the global state created by your application. Therefore, you should be aware of how to build your application in a way that is Octane friendly. Below, we will discuss the most common situations that may cause problems while using Octane."
msgstr ""

#: docs/8.x/octane.md:block 97 (header)
msgid "Container Injection"
msgstr ""

#: docs/8.x/octane.md:block 98 (paragraph)
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire application service container into an object that is bound as a singleton:"
msgstr ""

#: docs/8.x/octane.md:block 99 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/octane.md:block 100 (paragraph)
msgid "In this example, if the `Service` instance is resolved during the application boot process, the container will be injected into the service and that same container will be held by the `Service` instance on subsequent requests. This **may** not be a problem for your particular application; however, it can lead to the container unexpectedly missing bindings that were added later in the boot cycle or by a subsequent request."
msgstr ""

#: docs/8.x/octane.md:block 101 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a container resolver closure into the service that always resolves the current container instance:"
msgstr ""

#: docs/8.x/octane.md:block 102 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app);\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance());\n"
"});\n"
msgstr ""

#: docs/8.x/octane.md:block 103 (paragraph)
msgid "The global `app` helper and the `Container::getInstance()` method will always return the latest version of the application container."
msgstr ""

#: docs/8.x/octane.md:block 105 (header)
msgid "Request Injection"
msgstr ""

#: docs/8.x/octane.md:block 106 (paragraph)
msgid "In general, you should avoid injecting the application service container or HTTP request instance into the constructors of other objects. For example, the following binding injects the entire request instance into an object that is bound as a singleton:"
msgstr ""

#: docs/8.x/octane.md:block 107 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app['request']);\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/octane.md:block 108 (paragraph)
msgid "In this example, if the `Service` instance is resolved during the application boot process, the HTTP request will be injected into the service and that same request will be held by the `Service` instance on subsequent requests. Therefore, all headers, input, and query string data will be incorrect, as well as all other request data."
msgstr ""

#: docs/8.x/octane.md:block 109 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a request resolver closure into the service that always resolves the current request instance. Or, the most recommended approach is simply to pass the specific request information your object needs to one of the object's methods at runtime:"
msgstr ""

#: docs/8.x/octane.md:block 110 (code)
msgid "use App\\Service;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app['request']);\n"
"});\n\n"
"$this->app->singleton(Service::class, function ($app) {\n"
"    return new Service(fn () => $app['request']);\n"
"});\n\n"
"// Or...\n\n"
"$service->method($request->input('name'));\n"
msgstr ""

#: docs/8.x/octane.md:block 111 (paragraph)
msgid "The global `request` helper will always return the request the application is currently handling and is therefore safe to use within your application."
msgstr ""

#: docs/8.x/octane.md:block 112 (quote)
msgid "{note} It is acceptable to type-hint the `Illuminate\\Http\\Request` instance on your controller methods and route closures."
msgstr ""

#: docs/8.x/octane.md:block 114 (header)
msgid "Configuration Repository Injection"
msgstr ""

#: docs/8.x/octane.md:block 115 (paragraph)
msgid "In general, you should avoid injecting the configuration repository instance into the constructors of other objects. For example, the following binding injects the configuration repository into an object that is bound as a singleton:"
msgstr ""

#: docs/8.x/octane.md:block 116 (code)
msgid "use App\\Service;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function register()\n"
"{\n"
"    $this->app->singleton(Service::class, function ($app) {\n"
"        return new Service($app->make('config'));\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/octane.md:block 117 (paragraph)
msgid "In this example, if the configuration values change between requests, that service will not have access to the new values because it's depending on the original repository instance."
msgstr ""

#: docs/8.x/octane.md:block 118 (paragraph)
msgid "As a work-around, you could either stop registering the binding as a singleton, or you could inject a configuration repository resolver closure to the class:"
msgstr ""

#: docs/8.x/octane.md:block 119 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Container\\Container;\n\n"
"$this->app->bind(Service::class, function ($app) {\n"
"    return new Service($app->make('config'));\n"
"});\n\n"
"$this->app->singleton(Service::class, function () {\n"
"    return new Service(fn () => Container::getInstance()->make('config'));\n"
"});\n"
msgstr ""

#: docs/8.x/octane.md:block 120 (paragraph)
msgid "The global `config` will always return the latest version of the configuration repository and is therefore safe to use within your application."
msgstr ""

#: docs/8.x/octane.md:block 122 (header)
msgid "Managing Memory Leaks"
msgstr ""

#: docs/8.x/octane.md:block 123 (paragraph)
msgid "Remember, Octane keeps your application in memory between requests; therefore, adding data to a statically maintained array will result in a memory leak. For example, the following controller has a memory leak since each request to the application will continue to add data to the static `$data` array:"
msgstr ""

#: docs/8.x/octane.md:block 124 (code)
msgid "use App\\Service;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Str;\n\n"
"/**\n"
" * Handle an incoming request.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return void\n"
" */\n"
"public function index(Request $request)\n"
"{\n"
"    Service::$data[] = Str::random(10);\n\n"
"    // ...\n"
"}\n"
msgstr ""

#: docs/8.x/octane.md:block 125 (paragraph)
msgid "While building your application, you should take special care to avoid creating these types of memory leaks. It is recommended that you monitor your application's memory usage during local development to ensure you are not introducing new memory leaks into your application."
msgstr ""

#: docs/8.x/octane.md:block 127 (header)
msgid "Concurrent Tasks"
msgstr ""

#: docs/8.x/octane.md:block 128 (quote)
msgid "{note} This feature requires [Swoole](#swoole)."
msgstr ""

#: docs/8.x/octane.md:block 129 (paragraph)
msgid "When using Swoole, you may execute operations concurrently via light-weight background tasks. You may accomplish this using Octane's `concurrently` method. You may combine this method with PHP array destructuring to retrieve the results of each operation:"
msgstr ""

#: docs/8.x/octane.md:block 130 (code)
msgid "use App\\User;\n"
"use App\\Server;\n"
"use Laravel\\Octane\\Facades\\Octane;\n\n"
"[$users, $servers] = Octane::concurrently([\n"
"    fn () => User::all(),\n"
"    fn () => Server::all(),\n"
"]);\n"
msgstr ""

#: docs/8.x/octane.md:block 131 (paragraph)
msgid "Concurrent tasks processed by Octane utilize Swoole's \"task workers\", and execute within an entirely different process than the incoming request. The amount of workers available to process concurrent tasks is determined by the `--task-workers` directive on the `octane:start` command:"
msgstr ""

#: docs/8.x/octane.md:block 134 (header)
msgid "Ticks & Intervals"
msgstr ""

#: docs/8.x/octane.md:block 136 (paragraph)
msgid "When using Swoole, you may register \"tick\" operations that will be executed every specified number of seconds. You may register \"tick\" callbacks via the `tick` method. The first argument provided to the `tick` method should be a string that represents the name of the ticker. The second argument should be a callable that will be invoked at the specified interval."
msgstr ""

#: docs/8.x/octane.md:block 137 (paragraph)
msgid "In this example, we will register a closure to be invoked every 10 seconds. Typically, the `tick` method should be called within the `boot` method of one of your application's service providers:"
msgstr ""

#: docs/8.x/octane.md:block 138 (code)
msgid "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10);\n"
msgstr ""

#: docs/8.x/octane.md:block 139 (paragraph)
msgid "Using the `immediate` method, you may instruct Octane to immediately invoke the tick callback when the Octane server initially boots, and every N seconds thereafter:"
msgstr ""

#: docs/8.x/octane.md:block 140 (code)
msgid "Octane::tick('simple-ticker', fn () => ray('Ticking...'))\n"
"        ->seconds(10)\n"
"        ->immediate();\n"
msgstr ""

#: docs/8.x/octane.md:block 142 (header)
msgid "The Octane Cache"
msgstr ""

#: docs/8.x/octane.md:block 144 (paragraph)
msgid "When using Swoole, you may leverage the Octane cache driver, which provides read and write speeds of up to 2 million operations per second. Therefore, this cache driver is an excellent choice for applications that need extreme read / write speeds from their caching layer."
msgstr ""

#: docs/8.x/octane.md:block 145 (paragraph)
msgid "This cache driver is powered by [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). All data stored in the cache is available to all workers on the server. However, the cached data will be flushed when the server is restarted:"
msgstr ""

#: docs/8.x/octane.md:block 146 (code)
msgid "Cache::store('octane')->put('framework', 'Laravel', 30);\n"
msgstr ""

#: docs/8.x/octane.md:block 147 (quote)
msgid "{tip} The maximum number of entries allowed in the Octane cache may be defined in your application's `octane` configuration file."
msgstr ""

#: docs/8.x/octane.md:block 149 (header)
msgid "Cache Intervals"
msgstr ""

#: docs/8.x/octane.md:block 150 (paragraph)
msgid "In addition to the typical methods provided by Laravel's cache system, the Octane cache driver features interval based caches. These caches are automatically refreshed at the specified interval and should be registered within the `boot` method of one of your application's service providers. For example, the following cache will be refreshed every five seconds:"
msgstr ""

#: docs/8.x/octane.md:block 151 (code)
msgid "use Illuminate\\Support\\Str;\n\n"
"Cache::store('octane')->interval('random', function () {\n"
"    return Str::random(10);\n"
"}, seconds: 5)\n"
msgstr ""

#: docs/8.x/octane.md:block 153 (header)
msgid "Tables"
msgstr ""

#: docs/8.x/octane.md:block 155 (paragraph)
msgid "When using Swoole, you may define and interact with your own arbitrary [Swoole tables](https://www.swoole.co.uk/docs/modules/swoole-table). Swoole tables provide extreme performance throughput and the data in these tables can be accessed by all workers on the server. However, the data within them will be lost when the server is restarted."
msgstr ""

#: docs/8.x/octane.md:block 156 (paragraph)
msgid "Tables should be defined within the `tables` configuration array of your application's `octane` configuration file. An example table that allows a maximum of 1000 rows is already configured for you. The maximum size of string columns may be configured by specifying the column size after the column type as seen below:"
msgstr ""

#: docs/8.x/octane.md:block 157 (code)
msgid "'tables' => [\n"
"    'example:1000' => [\n"
"        'name' => 'string:1000',\n"
"        'votes' => 'int',\n"
"    ],\n"
"],\n"
msgstr ""

#: docs/8.x/octane.md:block 158 (paragraph)
msgid "To access a table, you may use the `Octane::table` method:"
msgstr ""

#: docs/8.x/octane.md:block 159 (code)
msgid "use Laravel\\Octane\\Facades\\Octane;\n\n"
"Octane::table('example')->set('uuid', [\n"
"    'name' => 'Nuno Maduro',\n"
"    'votes' => 1000,\n"
"]);\n\n"
"return Octane::table('example')->get('uuid');\n"
msgstr ""

#: docs/8.x/octane.md:block 160 (quote)
msgid "{note} The column types supported by Swoole tables are: `string`, `int`, and `float`."
msgstr ""

