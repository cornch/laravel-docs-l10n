msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/console-tests.pot\n"
"X-Crowdin-File-ID: 29\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2024-11-30 04:57\n"

#: ./docs/8.x/console-tests.md:1
#: ./docs/9.x/console-tests.md:1
#: ./docs/10.x/console-tests.md:1
#: ./docs/11.x/console-tests.md:1
#: ./docs/master/console-tests.md:1
msgctxt "H1"
msgid "Console Tests"
msgstr ""

#: ./docs/8.x/console-tests.md:3
#: ./docs/9.x/console-tests.md:3
#: ./docs/10.x/console-tests.md:3
#: ./docs/11.x/console-tests.md:3
#: ./docs/master/console-tests.md:3
msgctxt "P"
msgid "[Introduction](#introduction)"
msgstr ""

#: ./docs/8.x/console-tests.md:4
#: ./docs/9.x/console-tests.md:4
#: ./docs/10.x/console-tests.md:4
#: ./docs/11.x/console-tests.md:4
#: ./docs/master/console-tests.md:4
msgctxt "P"
msgid "[Success / Failure Expectations](#success-failure-expectations)"
msgstr ""

#: ./docs/8.x/console-tests.md:5
#: ./docs/9.x/console-tests.md:5
#: ./docs/10.x/console-tests.md:5
#: ./docs/11.x/console-tests.md:5
#: ./docs/master/console-tests.md:5
msgctxt "P"
msgid "[Input / Output Expectations](#input-output-expectations)"
msgstr ""

#: ./docs/10.x/console-tests.md:6
#: ./docs/11.x/console-tests.md:6
#: ./docs/master/console-tests.md:6
msgctxt "P"
msgid "[Console Events](#console-events)"
msgstr ""

#: ./docs/8.x/console-tests.md:7
#: ./docs/9.x/console-tests.md:7
#: ./docs/10.x/console-tests.md:8
#: ./docs/11.x/console-tests.md:8
#: ./docs/master/console-tests.md:8
#~ msgctxt "P"
#~ msgid "<a name=\"introduction\"></a>"
#~ msgstr ""

#: ./docs/8.x/console-tests.md:8
#: ./docs/9.x/console-tests.md:8
#: ./docs/10.x/console-tests.md:9
#: ./docs/11.x/console-tests.md:9
#: ./docs/master/console-tests.md:9
msgctxt "H2"
msgid "Introduction"
msgstr ""

#: ./docs/8.x/console-tests.md:10
#: ./docs/9.x/console-tests.md:10
#: ./docs/10.x/console-tests.md:11
#: ./docs/11.x/console-tests.md:11
#: ./docs/master/console-tests.md:11
msgctxt "P"
msgid "In addition to simplifying HTTP testing, Laravel provides a simple API for testing your application's [custom console commands](/docs/{{version}}/artisan)."
msgstr ""

#: ./docs/8.x/console-tests.md:12
#: ./docs/9.x/console-tests.md:12
#: ./docs/10.x/console-tests.md:13
#: ./docs/11.x/console-tests.md:13
#: ./docs/master/console-tests.md:13
#~ msgctxt "P"
#~ msgid "<a name=\"success-failure-expectations\"></a>"
#~ msgstr ""

#: ./docs/8.x/console-tests.md:13
#: ./docs/9.x/console-tests.md:13
#: ./docs/10.x/console-tests.md:14
#: ./docs/11.x/console-tests.md:14
#: ./docs/master/console-tests.md:14
msgctxt "H2"
msgid "Success / Failure Expectations"
msgstr ""

#: ./docs/8.x/console-tests.md:15
#: ./docs/9.x/console-tests.md:15
#: ./docs/10.x/console-tests.md:16
#: ./docs/11.x/console-tests.md:16
#: ./docs/master/console-tests.md:16
msgctxt "P"
msgid "To get started, let's explore how to make assertions regarding an Artisan command's exit code. To accomplish this, we will use the `artisan` method to invoke an Artisan command from our test. Then, we will use the `assertExitCode` method to assert that the command completed with a given exit code:"
msgstr ""

#: ./docs/8.x/console-tests.md:17
#: ./docs/9.x/console-tests.md:17
msgctxt "CODE"
msgid "/**\n"
" * Test a console command.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_console_command()\n"
"{\n"
"    $this->artisan('inspire')->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/10.x/console-tests.md:18
#: ./docs/11.x/console-tests.md:24
#: ./docs/master/console-tests.md:24
msgctxt "CODE"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('inspire')->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:18
#: ./docs/master/console-tests.md:18
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('inspire')->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/8.x/console-tests.md:27
#: ./docs/9.x/console-tests.md:27
#: ./docs/10.x/console-tests.md:26
#: ./docs/11.x/console-tests.md:34
#: ./docs/master/console-tests.md:34
msgctxt "P"
msgid "You may use the `assertNotExitCode` method to assert that the command did not exit with a given exit code:"
msgstr ""

#: ./docs/8.x/console-tests.md:29
#: ./docs/9.x/console-tests.md:29
#: ./docs/10.x/console-tests.md:28
#: ./docs/11.x/console-tests.md:36
#: ./docs/master/console-tests.md:36
msgctxt "CODE"
msgid "$this->artisan('inspire')->assertNotExitCode(1);"
msgstr ""

#: ./docs/8.x/console-tests.md:31
#: ./docs/9.x/console-tests.md:31
#: ./docs/10.x/console-tests.md:30
#: ./docs/11.x/console-tests.md:38
#: ./docs/master/console-tests.md:38
msgctxt "P"
msgid "Of course, all terminal commands typically exit with a status code of `0` when they are successful and a non-zero exit code when they are not successful. Therefore, for convenience, you may utilize the `assertSuccessful` and `assertFailed` assertions to assert that a given command exited with a successful exit code or not:"
msgstr ""

#: ./docs/8.x/console-tests.md:33
#: ./docs/9.x/console-tests.md:33
#: ./docs/10.x/console-tests.md:32
#: ./docs/11.x/console-tests.md:40
#: ./docs/master/console-tests.md:40
msgctxt "CODE"
msgid "$this->artisan('inspire')->assertSuccessful();\n\n"
"$this->artisan('inspire')->assertFailed();"
msgstr ""

#: ./docs/8.x/console-tests.md:37
#: ./docs/9.x/console-tests.md:37
#: ./docs/10.x/console-tests.md:36
#: ./docs/11.x/console-tests.md:44
#: ./docs/master/console-tests.md:44
#~ msgctxt "P"
#~ msgid "<a name=\"input-output-expectations\"></a>"
#~ msgstr ""

#: ./docs/8.x/console-tests.md:38
#: ./docs/9.x/console-tests.md:38
#: ./docs/10.x/console-tests.md:37
#: ./docs/11.x/console-tests.md:45
#: ./docs/master/console-tests.md:45
msgctxt "H2"
msgid "Input / Output Expectations"
msgstr ""

#: ./docs/8.x/console-tests.md:40
#: ./docs/9.x/console-tests.md:40
#: ./docs/10.x/console-tests.md:39
#: ./docs/11.x/console-tests.md:47
#: ./docs/master/console-tests.md:47
msgctxt "P"
msgid "Laravel allows you to easily \"mock\" user input for your console commands using the `expectsQuestion` method. In addition, you may specify the exit code and text that you expect to be output by the console command using the `assertExitCode` and `expectsOutput` methods. For example, consider the following console command:"
msgstr ""

#: ./docs/8.x/console-tests.md:42
#: ./docs/9.x/console-tests.md:42
#: ./docs/10.x/console-tests.md:41
#: ./docs/11.x/console-tests.md:49
#: ./docs/master/console-tests.md:49
msgctxt "CODE"
msgid "Artisan::command('question', function () {\n"
"    $name = $this->ask('What is your name?');\n\n"
"    $language = $this->choice('Which language do you prefer?', [\n"
"        'PHP',\n"
"        'Ruby',\n"
"        'Python',\n"
"    ]);\n\n"
"    $this->line('Your name is '.$name.' and you prefer '.$language.'.');\n"
"});"
msgstr ""

#: ./docs/8.x/console-tests.md:54
msgctxt "P"
msgid "You may test this command with the following test which utilizes the `expectsQuestion`, `expectsOutput`, `doesntExpectOutput`, and `assertExitCode` methods:"
msgstr ""

#: ./docs/9.x/console-tests.md:54
#: ./docs/10.x/console-tests.md:53
#: ./docs/master/console-tests.md:61
msgctxt "P"
msgid "You may test this command with the following test which utilizes the `expectsQuestion`, `expectsOutput`, `doesntExpectOutput`, `expectsOutputToContain`, `doesntExpectOutputToContain`, and `assertExitCode` methods:"
msgstr ""

#: ./docs/10.x/console-tests.md:55
#: ./docs/master/console-tests.md:76
msgctxt "CODE"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->expectsOutputToContain('Taylor Otwell')\n"
"         ->doesntExpectOutputToContain('you prefer Ruby')\n"
"         ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/8.x/console-tests.md:56
msgctxt "CODE"
msgid "/**\n"
" * Test a console command.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_console_command()\n"
"{\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/9.x/console-tests.md:56
msgctxt "CODE"
msgid "/**\n"
" * Test a console command.\n"
" *\n"
" * @return void\n"
" */\n"
"public function test_console_command()\n"
"{\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->expectsOutputToContain('Taylor Otwell')\n"
"         ->doesntExpectOutputToContain('you prefer Ruby')\n"
"         ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:61
msgctxt "P"
msgid "You may test this command with the following test:"
msgstr ""

#: ./docs/11.x/console-tests.md:63
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/master/console-tests.md:63
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->expectsOutputToContain('Taylor Otwell')\n"
"         ->doesntExpectOutputToContain('you prefer Ruby')\n"
"         ->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/8.x/console-tests.md:71
#: ./docs/9.x/console-tests.md:73
#: ./docs/10.x/console-tests.md:70
#: ./docs/11.x/console-tests.md:163
#: ./docs/master/console-tests.md:93
#~ msgctxt "P"
#~ msgid "<a name=\"confirmation-expectations\"></a>"
#~ msgstr ""

#: ./docs/8.x/console-tests.md:72
#: ./docs/9.x/console-tests.md:74
#: ./docs/10.x/console-tests.md:71
#: ./docs/11.x/console-tests.md:164
#: ./docs/master/console-tests.md:94
msgctxt "H4"
msgid "Confirmation Expectations"
msgstr ""

#: ./docs/11.x/console-tests.md:74
msgctxt "CODE: php tab=PHPUnit"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('question')\n"
"         ->expectsQuestion('What is your name?', 'Taylor Otwell')\n"
"         ->expectsQuestion('Which language do you prefer?', 'PHP')\n"
"         ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')\n"
"         ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')\n"
"         ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/8.x/console-tests.md:74
#: ./docs/9.x/console-tests.md:76
#: ./docs/10.x/console-tests.md:73
#: ./docs/11.x/console-tests.md:166
#: ./docs/master/console-tests.md:96
msgctxt "P"
msgid "When writing a command which expects confirmation in the form of a \"yes\" or \"no\" answer, you may utilize the `expectsConfirmation` method:"
msgstr ""

#: ./docs/8.x/console-tests.md:76
#: ./docs/9.x/console-tests.md:78
#: ./docs/10.x/console-tests.md:75
#: ./docs/11.x/console-tests.md:168
#: ./docs/master/console-tests.md:98
msgctxt "CODE"
msgid "$this->artisan('module:import')\n"
"    ->expectsConfirmation('Do you really wish to run this command?', 'no')\n"
"    ->assertExitCode(1);"
msgstr ""

#: ./docs/8.x/console-tests.md:80
#: ./docs/9.x/console-tests.md:82
#: ./docs/10.x/console-tests.md:79
#: ./docs/11.x/console-tests.md:172
#: ./docs/master/console-tests.md:102
#~ msgctxt "P"
#~ msgid "<a name=\"table-expectations\"></a>"
#~ msgstr ""

#: ./docs/8.x/console-tests.md:81
#: ./docs/9.x/console-tests.md:83
#: ./docs/10.x/console-tests.md:80
#: ./docs/11.x/console-tests.md:173
#: ./docs/master/console-tests.md:103
msgctxt "H4"
msgid "Table Expectations"
msgstr ""

#: ./docs/8.x/console-tests.md:83
#: ./docs/9.x/console-tests.md:85
#: ./docs/10.x/console-tests.md:82
#: ./docs/11.x/console-tests.md:175
#: ./docs/master/console-tests.md:105
msgctxt "P"
msgid "If your command displays a table of information using Artisan's `table` method, it can be cumbersome to write output expectations for the entire table. Instead, you may use the `expectsTable` method. This method accepts the table's headers as its first argument and the table's data as its second argument:"
msgstr ""

#: ./docs/8.x/console-tests.md:85
#: ./docs/9.x/console-tests.md:87
#: ./docs/10.x/console-tests.md:84
#: ./docs/11.x/console-tests.md:177
#: ./docs/master/console-tests.md:107
msgctxt "CODE"
msgid "$this->artisan('users:all')\n"
"    ->expectsTable([\n"
"        'ID',\n"
"        'Email',\n"
"    ], [\n"
"        [1, 'taylor@example.com'],\n"
"        [2, 'abigail@example.com'],\n"
"    ]);"
msgstr ""

#: ./docs/11.x/console-tests.md:89
msgctxt "P"
msgid "If you are utilizing the `search` or `multisearch` functions provided by [Laravel Prompts](/docs/{{version}}/prompts), you may use the `expectsSearch` assertion to mock the user's input, search results, and selection:"
msgstr ""

#: ./docs/11.x/console-tests.md:91
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('example')\n"
"         ->expectsSearch('What is your name?', search: 'Tay', answers: [\n"
"            'Taylor Otwell',\n"
"            'Taylor Swift',\n"
"            'Darian Taylor'\n"
"         ], answer: 'Taylor Otwell')\n"
"         ->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/10.x/console-tests.md:93
#: ./docs/11.x/console-tests.md:186
#: ./docs/master/console-tests.md:116
#~ msgctxt "P"
#~ msgid "<a name=\"console-events\"></a>"
#~ msgstr ""

#: ./docs/10.x/console-tests.md:94
#: ./docs/11.x/console-tests.md:187
#: ./docs/master/console-tests.md:117
msgctxt "H2"
msgid "Console Events"
msgstr ""

#: ./docs/10.x/console-tests.md:96
#: ./docs/11.x/console-tests.md:189
#: ./docs/master/console-tests.md:119
msgctxt "P"
msgid "By default, the `Illuminate\\Console\\Events\\CommandStarting` and `Illuminate\\Console\\Events\\CommandFinished` events are not dispatched while running your application's tests. However, you can enable these events for a given test class by adding the `Illuminate\\Foundation\\Testing\\WithConsoleEvents` trait to the class:"
msgstr ""

#: ./docs/10.x/console-tests.md:98
#: ./docs/11.x/console-tests.md:201
#: ./docs/master/console-tests.md:131
msgctxt "CODE"
msgid "<?php\n\n"
"namespace Tests\\Feature;\n\n"
"use Illuminate\\Foundation\\Testing\\WithConsoleEvents;\n"
"use Tests\\TestCase;\n\n"
"class ConsoleEventTest extends TestCase\n"
"{\n"
"    use WithConsoleEvents;\n\n"
"    // ...\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:103
msgctxt "CODE: php tab=PHPUnit"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('example')\n"
"         ->expectsSearch('What is your name?', search: 'Tay', answers: [\n"
"            'Taylor Otwell',\n"
"            'Taylor Swift',\n"
"            'Darian Taylor'\n"
"         ], answer: 'Taylor Otwell')\n"
"         ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:119
msgctxt "P"
msgid "You may also assert that a console command does not generate any output using the `doesntExpectOutput` method:"
msgstr ""

#: ./docs/11.x/console-tests.md:121
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('example')\n"
"         ->doesntExpectOutput()\n"
"         ->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/11.x/console-tests.md:129
msgctxt "CODE: php tab=PHPUnit"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('example')\n"
"            ->doesntExpectOutput()\n"
"            ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:141
msgctxt "P"
msgid "The `expectsOutputToContain` and `doesntExpectOutputToContain` methods may be used to make assertions against a portion of the output:"
msgstr ""

#: ./docs/11.x/console-tests.md:143
msgctxt "CODE: php tab=Pest"
msgid "test('console command', function () {\n"
"    $this->artisan('example')\n"
"         ->expectsOutputToContain('Taylor')\n"
"         ->assertExitCode(0);\n"
"});"
msgstr ""

#: ./docs/11.x/console-tests.md:151
msgctxt "CODE: php tab=PHPUnit"
msgid "/**\n"
" * Test a console command.\n"
" */\n"
"public function test_console_command(): void\n"
"{\n"
"    $this->artisan('example')\n"
"            ->expectsOutputToContain('Taylor')\n"
"            ->assertExitCode(0);\n"
"}"
msgstr ""

#: ./docs/11.x/console-tests.md:191
#: ./docs/master/console-tests.md:121
msgctxt "CODE: php tab=Pest"
msgid "<?php\n\n"
"use Illuminate\\Foundation\\Testing\\WithConsoleEvents;\n\n"
"uses(WithConsoleEvents::class);\n\n"
"// ..."
msgstr ""

