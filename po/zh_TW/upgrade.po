msgid ""
msgstr ""
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: laravel-docs\n"
"X-Crowdin-Project-ID: 447952\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /main/templates/upgrade.pot\n"
"X-Crowdin-File-ID: 165\n"
"Project-Id-Version: laravel-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"PO-Revision-Date: 2022-08-06 05:47\n"

#: docs/8.x/upgrade.md:block 1 (header)
msgid "Upgrade Guide"
msgstr "升級指南"

#: docs/8.x/upgrade.md:block 2 (unordered list)
msgid "[Upgrading To 8.0 From 7.x](#upgrade-8.0)"
msgstr "[從 7.x 升級至 8.0](#upgrade-8.0)"

#: docs/8.x/upgrade.md:block 4 (header)
msgid "High Impact Changes"
msgstr "高度影響的更改"

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Model Factories](#model-factories)"
msgstr "[Model Factory](#model-factories)"

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `retryAfter` Method](#queue-retry-after-method)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `timeoutAt` Property](#queue-timeout-at-property)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Queue `allOnQueue` and `allOnConnection`](#queue-allOnQueue-allOnConnection)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Pagination Defaults](#pagination-defaults)"
msgstr ""

#: docs/8.x/upgrade.md:block 6 (unordered list)
msgid "[Seeder & Factory Namespaces](#seeder-factory-namespaces)"
msgstr ""

#: docs/8.x/upgrade.md:block 9 (header)
msgid "Medium Impact Changes"
msgstr "中度影響的更改"

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[PHP 7.3.0 Required](#php-7.3.0-required)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[Failed Jobs Table Batch Support](#failed-jobs-table-batch-support)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[Maintenance Mode Updates](#maintenance-mode-updates)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[The `php artisan down --message` Option](#artisan-down-message)"
msgstr ""

#: docs/8.x/upgrade.md:block 11 (unordered list)
msgid "[The `assertExactJson` Method](#assert-exact-json-method)"
msgstr ""

#: docs/8.x/upgrade.md:block 14 (header)
msgid "Upgrading To 8.0 From 7.x"
msgstr "從 7.x 升級到 8.0"

#: docs/8.x/upgrade.md:block 16 (header)
msgid "Estimated Upgrade Time: 15 Minutes"
msgstr "預計升級所需時間：15 分鐘"

#: docs/8.x/upgrade.md:block 17 (quote)
msgid "{note} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application."
msgstr "{note} 我們儘量在說明文件中包含所有的^[中斷性變更](Breaking Change)。不過，在 Laravel 中，有些中斷性變更存在一些比較不明顯的地方，且這些更改中幾乎不太會影響到你的專案。"

#: docs/8.x/upgrade.md:block 19 (header)
msgid "PHP 7.3.0 Required"
msgstr "最低版本要求為 PHP 7.3.0"

#: docs/8.x/upgrade.md:block 20 (paragraph)
msgid "**Likelihood Of Impact: Medium**"
msgstr "**受影響的可能性：中等**"

#: docs/8.x/upgrade.md:block 21 (paragraph)
msgid "The new minimum PHP version is now 7.3.0."
msgstr "最低要求的 PHP 版本現為 7.3.0"

#: docs/8.x/upgrade.md:block 23 (header)
msgid "Updating Dependencies"
msgstr "相依性套件更新"

#: docs/8.x/upgrade.md:block 24 (paragraph)
msgid "Update the following dependencies in your `composer.json` file:"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`guzzlehttp/guzzle` to `^7.0.1`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`facade/ignition` to `^2.3.6`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/framework` to `^8.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/ui` to `^3.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`nunomaduro/collision` to `^5.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 26 (unordered list)
msgid "`phpunit/phpunit` to `^9.0`"
msgstr ""

#: docs/8.x/upgrade.md:block 28 (paragraph)
msgid "The following first-party packages have new major releases to support Laravel 8. If applicable, you should read their individual upgrade guides before upgrading:"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Horizon v5.0](https://github.com/laravel/horizon/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Passport v10.0](https://github.com/laravel/passport/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Socialite v5.0](https://github.com/laravel/socialite/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 30 (unordered list)
msgid "[Telescope v4.0](https://github.com/laravel/telescope/blob/master/UPGRADE.md)"
msgstr ""

#: docs/8.x/upgrade.md:block 32 (paragraph)
msgid "In addition, the Laravel installer has been updated to support `composer create-project` and Laravel Jetstream. Any installer older than 4.0 will cease to work after October 2020. You should upgrade your global installer to `^4.0` as soon as possible."
msgstr ""

#: docs/8.x/upgrade.md:block 33 (paragraph)
msgid "Finally, examine any other third-party packages consumed by your application and verify you are using the proper version for Laravel 8 support."
msgstr ""

#: docs/8.x/upgrade.md:block 35 (header)
msgid "Collections"
msgstr "Collections"

#: docs/8.x/upgrade.md:block 37 (header)
msgid "The `isset` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 38 (paragraph)
msgid "**Likelihood Of Impact: Low**"
msgstr "**受影響的可能：低**"

#: docs/8.x/upgrade.md:block 39 (paragraph)
msgid "To be consistent with typical PHP behavior, the `offsetExists` method of `Illuminate\\Support\\Collection` has been updated to use `isset` instead of `array_key_exists`. This may present a change in behavior when dealing with collection items that have a value of `null`:"
msgstr ""

#: docs/8.x/upgrade.md:block 40 (code)
msgid "$collection = collect([null]);\n\n"
"// Laravel 7.x - true\n"
"isset($collection[0]);\n\n"
"// Laravel 8.x - false\n"
"isset($collection[0]);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 42 (header)
msgid "Database"
msgstr "資料庫"

#: docs/8.x/upgrade.md:block 44 (header)
msgid "Seeder & Factory Namespaces"
msgstr ""

#: docs/8.x/upgrade.md:block 45 (paragraph)
msgid "**Likelihood Of Impact: High**"
msgstr "**受影響的可能：高**"

#: docs/8.x/upgrade.md:block 46 (paragraph)
msgid "Seeders and factories are now namespaced. To accommodate for these changes, add the `Database\\Seeders` namespace to your seeder classes. In addition, the previous `database/seeds` directory should be renamed to `database/seeders`:"
msgstr ""

#: docs/8.x/upgrade.md:block 47 (code)
msgid "<?php\n\n"
"namespace Database\\Seeders;\n\n"
"use App\\Models\\User;\n"
"use Illuminate\\Database\\Seeder;\n\n"
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Seed the application's database.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function run()\n"
"    {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 48 (paragraph)
msgid "If you are choosing to use the `laravel/legacy-factories` package, no changes to your factory classes are required. However, if you are upgrading your factories, you should add the `Database\\Factories` namespace to those classes."
msgstr ""

#: docs/8.x/upgrade.md:block 49 (paragraph)
msgid "Next, in your `composer.json` file, remove `classmap` block from the `autoload` section and add the new namespaced class directory mappings:"
msgstr ""

#: docs/8.x/upgrade.md:block 50 (code)
msgid "\"autoload\": {\n"
"    \"psr-4\": {\n"
"        \"App\\\\\": \"app/\",\n"
"        \"Database\\\\Factories\\\\\": \"database/factories/\",\n"
"        \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n"
"    }\n"
"},\n"
msgstr ""

#: docs/8.x/upgrade.md:block 52 (header)
msgid "Eloquent"
msgstr "Eloquent"

#: docs/8.x/upgrade.md:block 54 (header)
msgid "Model Factories"
msgstr ""

#: docs/8.x/upgrade.md:block 56 (paragraph)
msgid "Laravel's [model factories](/docs/{{version}}/database-testing#defining-model-factories) feature has been totally rewritten to support classes and is not compatible with Laravel 7.x style factories. However, to ease the upgrade process, a new `laravel/legacy-factories` package has been created to continue using your existing factories with Laravel 8.x. You may install this package via Composer:"
msgstr ""

#: docs/8.x/upgrade.md:block 57 (code)
msgid "composer require laravel/legacy-factories\n"
msgstr ""

#: docs/8.x/upgrade.md:block 59 (header)
msgid "The `Castable` Interface"
msgstr ""

#: docs/8.x/upgrade.md:block 61 (paragraph)
msgid "The `castUsing` method of the `Castable` interface has been updated to accept an array of arguments. If you are implementing this interface you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 62 (code)
msgid "public static function castUsing(array $arguments);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 64 (header)
msgid "Increment / Decrement Events"
msgstr ""

#: docs/8.x/upgrade.md:block 66 (paragraph)
msgid "Proper \"update\" and \"save\" related model events will now be dispatched when executing the `increment` or `decrement` methods on Eloquent model instances."
msgstr ""

#: docs/8.x/upgrade.md:block 68 (header)
msgid "Events"
msgstr "事件"

#: docs/8.x/upgrade.md:block 70 (header)
msgid "The `EventServiceProvider` Class"
msgstr ""

#: docs/8.x/upgrade.md:block 72 (paragraph)
msgid "If your `App\\Providers\\EventServiceProvider` class contains a `register` function, you should ensure that you call `parent::register` at the beginning of this method. Otherwise, your application's events will not be registered."
msgstr ""

#: docs/8.x/upgrade.md:block 74 (header)
msgid "The `Dispatcher` Contract"
msgstr ""

#: docs/8.x/upgrade.md:block 76 (paragraph)
msgid "The `listen` method of the `Illuminate\\Contracts\\Events\\Dispatcher` contract has been updated to make the `$listener` property optional. This change was made to support automatic detection of handled event types via reflection. If you are manually implementing this interface, you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 77 (code)
msgid "public function listen($events, $listener = null);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 79 (header)
msgid "Framework"
msgstr ""

#: docs/8.x/upgrade.md:block 81 (header)
msgid "Maintenance Mode Updates"
msgstr ""

#: docs/8.x/upgrade.md:block 82 (paragraph)
msgid "**Likelihood Of Impact: Optional**"
msgstr ""

#: docs/8.x/upgrade.md:block 83 (paragraph)
msgid "The [maintenance mode](/docs/{{version}}/configuration#maintenance-mode) feature of Laravel has been improved in Laravel 8.x. Pre-rendering the maintenance mode template is now supported and eliminates the chances of end users encountering errors during maintenance mode. However, to support this, the following lines must be added to your `public/index.php` file. These lines should be placed directly under the existing `LARAVEL_START` constant definition:"
msgstr ""

#: docs/8.x/upgrade.md:block 84 (code)
msgid "define('LARAVEL_START', microtime(true));\n\n"
"if (file_exists(__DIR__.'/../storage/framework/maintenance.php')) {\n"
"    require __DIR__.'/../storage/framework/maintenance.php';\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 86 (header)
msgid "The `php artisan down --message` Option"
msgstr ""

#: docs/8.x/upgrade.md:block 88 (paragraph)
msgid "The `--message` option of the `php artisan down` command has been removed. As an alternative, consider [pre-rendering your maintenance mode views](/docs/{{version}}/configuration#maintenance-mode) with the message of your choice."
msgstr ""

#: docs/8.x/upgrade.md:block 90 (header)
msgid "The `php artisan serve --no-reload` Option"
msgstr ""

#: docs/8.x/upgrade.md:block 92 (paragraph)
msgid "A `--no-reload` option has been added to the `php artisan serve` command. This will instruct the built-in server to not reload the server when environment file changes are detected. This option is primarily helpful when running Laravel Dusk tests in a CI environment."
msgstr ""

#: docs/8.x/upgrade.md:block 94 (header)
msgid "Manager `$app` Property"
msgstr ""

#: docs/8.x/upgrade.md:block 96 (paragraph)
msgid "The previously deprecated `$app` property of the `Illuminate\\Support\\Manager` class has been removed. If you were relying on this property, you should use the `$container` property instead."
msgstr ""

#: docs/8.x/upgrade.md:block 98 (header)
msgid "The `elixir` Helper"
msgstr ""

#: docs/8.x/upgrade.md:block 100 (paragraph)
msgid "The previously deprecated `elixir` helper has been removed. Applications still using this method are encouraged to upgrade to [Laravel Mix](https://github.com/JeffreyWay/laravel-mix)."
msgstr ""

#: docs/8.x/upgrade.md:block 102 (header)
msgid "Mail"
msgstr "郵件"

#: docs/8.x/upgrade.md:block 104 (header)
msgid "The `sendNow` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 106 (paragraph)
msgid "The previously deprecated `sendNow` method has been removed. Instead, please use the `send` method."
msgstr ""

#: docs/8.x/upgrade.md:block 108 (header)
msgid "Pagination"
msgstr "分頁"

#: docs/8.x/upgrade.md:block 110 (header)
msgid "Pagination Defaults"
msgstr ""

#: docs/8.x/upgrade.md:block 112 (paragraph)
msgid "The paginator now uses the [Tailwind CSS framework](https://tailwindcss.com) for its default styling. In order to keep using Bootstrap, you should add the following method call to the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/8.x/upgrade.md:block 113 (code)
msgid "use Illuminate\\Pagination\\Paginator;\n\n"
"Paginator::useBootstrap();\n"
msgstr ""

#: docs/8.x/upgrade.md:block 115 (header)
msgid "Queue"
msgstr "佇列"

#: docs/8.x/upgrade.md:block 117 (header)
msgid "The `retryAfter` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 119 (paragraph)
msgid "For consistency with other features of Laravel, the `retryAfter` method and `retryAfter` property of queued jobs, mailers, notifications, and listeners have been renamed to `backoff`. You should update the name of this method / property in the relevant classes in your application."
msgstr ""

#: docs/8.x/upgrade.md:block 121 (header)
msgid "The `timeoutAt` Property"
msgstr ""

#: docs/8.x/upgrade.md:block 123 (paragraph)
msgid "The `timeoutAt` property of queued jobs, notifications, and listeners has been renamed to `retryUntil`. You should update the name of this property in the relevant classes in your application."
msgstr ""

#: docs/8.x/upgrade.md:block 125 (header)
msgid "The `allOnQueue()` / `allOnConnection()` Methods"
msgstr ""

#: docs/8.x/upgrade.md:block 127 (paragraph)
msgid "For consistency with other dispatching methods, the `allOnQueue()` and `allOnConnection()` methods used with job chaining have been removed. You may use the `onQueue()` and `onConnection()` methods instead. These methods should be called before calling the `dispatch` method:"
msgstr ""

#: docs/8.x/upgrade.md:block 128 (code)
msgid "ProcessPodcast::withChain([\n"
"    new OptimizePodcast,\n"
"    new ReleasePodcast\n"
"])->onConnection('redis')->onQueue('podcasts')->dispatch();\n"
msgstr ""

#: docs/8.x/upgrade.md:block 129 (paragraph)
msgid "Note that this change only affects code using the `withChain` method. The `allOnQueue()` and `allOnConnection()` are still available when using the global `dispatch()` helper."
msgstr ""

#: docs/8.x/upgrade.md:block 131 (header)
msgid "Failed Jobs Table Batch Support"
msgstr ""

#: docs/8.x/upgrade.md:block 133 (paragraph)
msgid "If you plan to use the [job batching](/docs/{{version}}/queues#job-batching) features of Laravel 8.x, your `failed_jobs` database table will need to be updated. First, a new `uuid` column should be added to your table:"
msgstr ""

#: docs/8.x/upgrade.md:block 134 (code)
msgid "use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;\n\n"
"Schema::table('failed_jobs', function (Blueprint $table) {\n"
"    $table->string('uuid')->after('id')->nullable()->unique();\n"
"});\n"
msgstr ""

#: docs/8.x/upgrade.md:block 135 (paragraph)
msgid "Next, the `failed.driver` configuration option within your `queue` configuration file should be updated to `database-uuids`."
msgstr ""

#: docs/8.x/upgrade.md:block 136 (paragraph)
msgid "In addition, you may wish to generate UUIDs for your existing failed jobs:"
msgstr ""

#: docs/8.x/upgrade.md:block 137 (code)
msgid "DB::table('failed_jobs')->whereNull('uuid')->cursor()->each(function ($job) {\n"
"    DB::table('failed_jobs')\n"
"        ->where('id', $job->id)\n"
"        ->update(['uuid' => (string) Illuminate\\Support\\Str::uuid()]);\n"
"});\n"
msgstr ""

#: docs/8.x/upgrade.md:block 139 (header)
msgid "Routing"
msgstr "路由"

#: docs/8.x/upgrade.md:block 141 (header)
msgid "Automatic Controller Namespace Prefixing"
msgstr ""

#: docs/8.x/upgrade.md:block 143 (paragraph)
msgid "In previous releases of Laravel, the `RouteServiceProvider` class contained a `$namespace` property with a value of `App\\Http\\Controllers`. The value of this property was used to automatically prefix controller route declarations and controller route URL generation such as when calling the `action` helper."
msgstr ""

#: docs/8.x/upgrade.md:block 144 (paragraph)
msgid "In Laravel 8, this property is set to `null` by default. This allows your controller route declarations to use the standard PHP callable syntax, which provides better support for jumping to the controller class in many IDEs:"
msgstr ""

#: docs/8.x/upgrade.md:block 145 (code)
msgid "use App\\Http\\Controllers\\UserController;\n\n"
"// Using PHP callable syntax...\n"
"Route::get('/users', [UserController::class, 'index']);\n\n"
"// Using string syntax...\n"
"Route::get('/users', 'App\\Http\\Controllers\\UserController@index');\n"
msgstr ""

#: docs/8.x/upgrade.md:block 146 (paragraph)
msgid "In most cases, this won't impact applications that are being upgraded because your `RouteServiceProvider` will still contain the `$namespace` property with its previous value. However, if you upgrade your application by creating a brand new Laravel project, you may encounter this as a breaking change."
msgstr ""

#: docs/8.x/upgrade.md:block 147 (paragraph)
msgid "If you would like to continue using the original auto-prefixed controller routing, you can simply set the value of the `$namespace` property within your `RouteServiceProvider` and update the route registrations within the `boot` method to use the `$namespace` property:"
msgstr ""

#: docs/8.x/upgrade.md:block 148 (code)
msgid "class RouteServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The path to the \"home\" route for your application.\n"
"     *\n"
"     * This is used by Laravel authentication to redirect users after login.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    public const HOME = '/home';\n\n"
"    /**\n"
"     * If specified, this namespace is automatically applied to your controller routes.\n"
"     *\n"
"     * In addition, it is set as the URL generator's root namespace.\n"
"     *\n"
"     * @var string\n"
"     */\n"
"    protected $namespace = 'App\\Http\\Controllers';\n\n"
"    /**\n"
"     * Define your route model bindings, pattern filters, etc.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->configureRateLimiting();\n\n"
"        $this->routes(function () {\n"
"            Route::middleware('web')\n"
"                ->namespace($this->namespace)\n"
"                ->group(base_path('routes/web.php'));\n\n"
"            Route::prefix('api')\n"
"                ->middleware('api')\n"
"                ->namespace($this->namespace)\n"
"                ->group(base_path('routes/api.php'));\n"
"        });\n"
"    }\n\n"
"    /**\n"
"     * Configure the rate limiters for the application.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    protected function configureRateLimiting()\n"
"    {\n"
"        RateLimiter::for('api', function (Request $request) {\n"
"            return Limit::perMinute(60)->by(optional($request->user())->id ?: $request->ip());\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/upgrade.md:block 150 (header)
msgid "Scheduling"
msgstr ""

#: docs/8.x/upgrade.md:block 152 (header)
msgid "The `cron-expression` Library"
msgstr ""

#: docs/8.x/upgrade.md:block 154 (paragraph)
msgid "Laravel's dependency on `dragonmantank/cron-expression` has been updated from `2.x` to `3.x`. This should not cause any breaking change in your application unless you are interacting with the `cron-expression` library directly. If you are interacting with this library directly, please review its [change log](https://github.com/dragonmantank/cron-expression/blob/master/CHANGELOG.md)."
msgstr ""

#: docs/8.x/upgrade.md:block 156 (header)
msgid "Session"
msgstr "Session"

#: docs/8.x/upgrade.md:block 158 (header)
msgid "The `Session` Contract"
msgstr ""

#: docs/8.x/upgrade.md:block 160 (paragraph)
msgid "The `Illuminate\\Contracts\\Session\\Session` contract has received a new `pull` method. If you are implementing this contract manually, you should update your implementation accordingly:"
msgstr ""

#: docs/8.x/upgrade.md:block 161 (code)
msgid "/**\n"
" * Get the value of a given key and then forget it.\n"
" *\n"
" * @param  string  $key\n"
" * @param  mixed  $default\n"
" * @return mixed\n"
" */\n"
"public function pull($key, $default = null);\n"
msgstr ""

#: docs/8.x/upgrade.md:block 163 (header)
msgid "Testing"
msgstr "測試"

#: docs/8.x/upgrade.md:block 165 (header)
msgid "The `decodeResponseJson` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 167 (paragraph)
msgid "The `decodeResponseJson` method that belongs to the `Illuminate\\Testing\\TestResponse` class no longer accepts any arguments. Please consider using the `json` method instead."
msgstr ""

#: docs/8.x/upgrade.md:block 169 (header)
msgid "The `assertExactJson` Method"
msgstr ""

#: docs/8.x/upgrade.md:block 171 (paragraph)
msgid "The `assertExactJson` method now requires numeric keys of compared arrays to match and be in the same order. If you would like to compare JSON against an array without requiring numerically keyed arrays to have the same order, you may use the `assertSimilarJson` method instead."
msgstr ""

#: docs/8.x/upgrade.md:block 173 (header)
msgid "Validation"
msgstr "表單驗證"

#: docs/8.x/upgrade.md:block 175 (header)
msgid "Database Rule Connections"
msgstr ""

#: docs/8.x/upgrade.md:block 177 (paragraph)
msgid "The `unique` and `exists` rules will now respect the specified connection name (accessed via the model's `getConnectionName` method) of Eloquent models when performing queries."
msgstr ""

#: docs/8.x/upgrade.md:block 179 (header)
msgid "Miscellaneous"
msgstr "其他"

#: docs/8.x/upgrade.md:block 180 (paragraph)
msgid "We also encourage you to view the changes in the `laravel/laravel` [GitHub repository](https://github.com/laravel/laravel). While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the [GitHub comparison tool](https://github.com/laravel/laravel/compare/7.x...8.x) and choose which updates are important to you."
msgstr "我們也鼓勵你檢視 `laravel/laravel` [GitHub 存放庫](https://github.com/laravel/laravel)上的更改。雖然這些更改中大多數都不是必須要進行的，但你可能也會想讓專案中的這些檔案保持同步。其中一些修改有在本升級指南中提到，但有些其他的更改（如設定檔的更改或註解等）就沒有提到。可以通過 [GitHub 的比較工具](https://github.com/laravel/laravel/compare/7.x...8.x)來輕鬆地檢視這些更改，並自行評估哪些更改對你來說比較重要。"

#: docs/9.x/upgrade.md:block 2 (unordered list)
msgid "[Upgrading To 9.0 From 8.x](#upgrade-9.0)"
msgstr "[從 8.x 升級至 9.0](#upgrade-9.0)"

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Updating Dependencies](#updating-dependencies)"
msgstr "[更新相依性套件](#updating-dependencies)"

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Flysystem 3.x](#flysystem-3)"
msgstr "[Flysystem 3.x](#flysystem-3)"

#: docs/9.x/upgrade.md:block 6 (unordered list)
msgid "[Symfony Mailer](#symfony-mailer)"
msgstr "[Symfony Mailer](#symfony-mailer)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Belongs To Many `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods](#belongs-to-many-first-or-new)"
msgstr "[Belongs To Many 的 `firstOrNew`、`firstOrCreate`、`updateOrCreate` 等方法](#belongs-to-many-first-or-new)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Custom Casts & `null`](#custom-casts-and-null)"
msgstr "[自訂型別轉換與 `null`](#custom-casts-and-null)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Default HTTP Client Timeout](#http-client-default-timeout)"
msgstr "[預設 HTTP 用戶端的逾時設定](#http-client-default-timeout)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[PHP Return Types](#php-return-types)"
msgstr "[PHP 回傳型別](#php-return-types)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Postgres \"Schema\" Configuration](#postgres-schema-configuration)"
msgstr "[Postgres的「Schema」設定](#postgres-schema-configuration)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `assertDeleted` Method](#the-assert-deleted-method)"
msgstr "[`assertDeleted` 方法](#the-assert-deleted-method)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `lang` Directory](#the-lang-directory)"
msgstr "[`lang` 目錄](#the-lang-directory)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `password` Rule](#the-password-rule)"
msgstr "[`password` 規則](#the-password-rule)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[The `when` / `unless` Methods](#when-and-unless-methods)"
msgstr "[`when` 與 `unless` 方法](#when-and-unless-methods)"

#: docs/9.x/upgrade.md:block 11 (unordered list)
msgid "[Unvalidated Array Keys](#unvalidated-array-keys)"
msgstr "[未驗證的陣列索引鍵](#unvalidated-array-keys)"

#: docs/9.x/upgrade.md:block 14 (header)
msgid "Upgrading To 9.0 From 8.x"
msgstr "從 8.x 升級到 9.0"

#: docs/9.x/upgrade.md:block 16 (header)
msgid "Estimated Upgrade Time: 30 Minutes"
msgstr "預計升級所需時間：30 分鐘"

#: docs/9.x/upgrade.md:block 17 (quote)
msgid "**Note** We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application. Want to save time? You can use [Laravel Shift](https://laravelshift.com/) to help automate your application upgrades."
msgstr ""

#: docs/9.x/upgrade.md:block 21 (header)
msgid "PHP 8.0.2 Required"
msgstr "最低版本要求為 PHP 8.0.2"

#: docs/9.x/upgrade.md:block 22 (paragraph)
msgid "Laravel now requires PHP 8.0.2 or greater."
msgstr "Laravel 先已要求 PHP 最小版本為 8.0.2。"

#: docs/9.x/upgrade.md:block 23 (header)
msgid "Composer Dependencies"
msgstr "Composer 相依性套件"

#: docs/9.x/upgrade.md:block 24 (paragraph)
msgid "You should update the following dependencies in your application's `composer.json` file:"
msgstr "請在專案的 `composer.json` 檔案中更新下列相依性套件："

#: docs/9.x/upgrade.md:block 26 (unordered list)
msgid "`laravel/framework` to `^9.0`"
msgstr "`laravel/framework` 升級為 `^9.0`"

#: docs/9.x/upgrade.md:block 26 (unordered list)
msgid "`nunomaduro/collision` to `^6.1`"
msgstr "`nunomaduro/collision` 升級為 `^6.1`"

#: docs/9.x/upgrade.md:block 28 (paragraph)
msgid "In addition, please replace `facade/ignition` with `\"spatie/laravel-ignition\": \"^1.0\"` in your application's `composer.json` file."
msgstr "此外，請在 `composer.json` 檔中將 `facade/ignition` 改為 `\"spatie/laravel-ignition\": \"^1.0\"`。"

#: docs/9.x/upgrade.md:block 29 (paragraph)
msgid "Furthermore, the following first-party packages have received new major releases to support Laravel 9.x. If applicable, you should read their individual upgrade guides before upgrading:"
msgstr "此外，下列第一方專案也有更新新的版本以支援 Laravel 9.x。若有使用這些套件，請在升級前先閱讀各套件的升級指南："

#: docs/9.x/upgrade.md:block 31 (unordered list)
msgid "[Vonage Notification Channel (v3.0)](https://github.com/laravel/vonage-notification-channel/blob/3.x/UPGRADE.md) (Replaces Nexmo)"
msgstr "[Vonage 通知通道 (v3.0)](https://github.com/laravel/vonage-notification-channel/blob/3.x/UPGRADE.md) (用以取代 Nexmo)"

#: docs/9.x/upgrade.md:block 33 (paragraph)
msgid "Finally, examine any other third-party packages consumed by your application and verify you are using the proper version for Laravel 9 support."
msgstr "最後，請檢視你的專案使用的其他第三方套件，確認一下是否有使用支援 Laravel 9 的版本。"

#: docs/9.x/upgrade.md:block 35 (header)
msgid "PHP Return Types"
msgstr "PHP Return 型別"

#: docs/9.x/upgrade.md:block 36 (paragraph)
msgid "PHP is beginning to transition to requiring return type definitions on PHP methods such as `offsetGet`, `offsetSet`, etc. In light of this, Laravel 9 has implemented these return types in its code base. Typically, this should not affect user written code; however, if you are overriding one of these methods by extending Laravel's core classes, you will need to add these return types to your own application or package code:"
msgstr "對於一些如 `offsetGet`、`offSet` ⋯⋯等方法，PHP 已經開始進入一個要求回傳型別的過渡階段。因此，Laravel 9 也開始在程式碼中實作這些回傳型別。一般來說，應該是不會影響使用者的程式碼。不過，若你有複寫 Laravel 核心類別中的這些要求回傳型別的方法，則請在你的專案或套件程式碼中加上回傳型別："

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`count(): int`"
msgstr "`count(): int`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`getIterator(): Traversable`"
msgstr "`getIterator(): Traversable`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`getSize(): int`"
msgstr "`getSize(): int`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`jsonSerialize(): array`"
msgstr "`jsonSerialize(): array`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetExists($key): bool`"
msgstr "`offsetExists($key): bool`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetGet($key): mixed`"
msgstr "`offsetGet($key): mixed`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetSet($key, $value): void`"
msgstr "`offsetSet($key, $value): void`"

#: docs/9.x/upgrade.md:block 38 (unordered list)
msgid "`offsetUnset($key): void`"
msgstr "`offsetUnset($key): void`"

#: docs/9.x/upgrade.md:block 40 (paragraph)
msgid "In addition, return types were added to methods implementing PHP's `SessionHandlerInterface`. Again, it is unlikely that this change affects your own application or package code:"
msgstr "此外，PHP `SessionHandlerInterface` 的方法實作中也有新增回傳型別。一樣，通常這不會影響到你的專案或套件程式碼："

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`open($savePath, $sessionName): bool`"
msgstr "`open($savePath, $sessionName): bool`"

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`close(): bool`"
msgstr "`close(): bool`"

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`read($sessionId): string|false`"
msgstr "`read($sessionId): string|false`"

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`write($sessionId, $data): bool`"
msgstr "`write($sessionId, $data): bool`"

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`destroy($sessionId): bool`"
msgstr "`destroy($sessionId): bool`"

#: docs/9.x/upgrade.md:block 42 (unordered list)
msgid "`gc($lifetime): int`"
msgstr "`gc($lifetime): int`"

#: docs/9.x/upgrade.md:block 45 (header)
msgid "Application"
msgstr "Application"

#: docs/9.x/upgrade.md:block 47 (header)
msgid "The `Application` Contract"
msgstr "`Application` Contract"

#: docs/9.x/upgrade.md:block 49 (paragraph)
msgid "The `storagePath` method of the `Illuminate\\Contracts\\Foundation\\Application` interface has been updated to accept a `$path` argument. If you are implementing this interface you should update your implementation accordingly:"
msgstr "`Illuminate\\Contracts\\Foundation\\Application` 介面的 `storagePath` 方法已更新為接受一個 `$path` 引數。若你有實作這個介面，請更新該實作："

#: docs/9.x/upgrade.md:block 50 (code)
msgid "public function storagePath($path = '');\n"
msgstr "public function storagePath($path = '');\n"

#: docs/9.x/upgrade.md:block 51 (paragraph)
msgid "Similarly, the `langPath` method of the `Illuminate\\Foundation\\Application` class has been updated to accept a `$path` argument:"
msgstr ""

#: docs/9.x/upgrade.md:block 52 (code)
msgid "public function langPath($path = '');\n"
msgstr ""

#: docs/9.x/upgrade.md:block 53 (header)
msgid "Exception Handler `ignore` Method"
msgstr "^[Exception Handler](例外處理常式) 的 `ignore` 方法"

#: docs/9.x/upgrade.md:block 55 (paragraph)
msgid "The exception handler's `ignore` method is now `public` instead of `protected`. This method is not included in the default application skeleton; however, if you have manually defined this method you should update its visibility to `public`:"
msgstr "Exception Handler 的 `ignore` 方法現在已從 `protected` 改為 `public`。該方法不包含在預設的專案 Skeleton 內。不過，若你有手動定義這個方法，請將其可見度更改為 `public`："

#: docs/9.x/upgrade.md:block 56 (code)
msgid "public function ignore(string $class);\n"
msgstr "public function ignore(string $class);\n"

#: docs/9.x/upgrade.md:block 57 (header)
msgid "Exception Handler Contract Binding"
msgstr ""

#: docs/9.x/upgrade.md:block 58 (paragraph)
msgid "**Likelihood Of Impact: Very Low**"
msgstr "**受影響的可能：非常低**"

#: docs/9.x/upgrade.md:block 59 (paragraph)
msgid "Previously, in order to override the default Laravel exception handler, custom implementations were bound into the service container using the `\\App\\Exceptions\\Handler::class` type. However, you should now bind custom implementations using the `\\Illuminate\\Contracts\\Debug\\ExceptionHandler::class` type."
msgstr ""

#: docs/9.x/upgrade.md:block 60 (header)
msgid "Blade"
msgstr "Blade"

#: docs/9.x/upgrade.md:block 61 (header)
msgid "Lazy Collections & The `$loop` Variable"
msgstr "Lazy Collection 與 `$loop` 變數"

#: docs/9.x/upgrade.md:block 63 (paragraph)
msgid "When iterating over a `LazyCollection` instance within a Blade template, the `$loop` variable is no longer available, as accessing this variable causes the entire `LazyCollection` to be loaded into memory, thus rendering the usage of lazy collections pointless in this scenario."
msgstr "在 Blade 樣板中迭代 `LazyCollection` 實體時，將不再提供 `$loop` 變數。因為存取 `$loop` 變數會讓整個 `LazyCollection` 都被載入進記憶體內，因此在這種情況下使用 Lazy Collection 來^[轉譯](Render)是沒意義的。"

#: docs/9.x/upgrade.md:block 64 (header)
msgid "Checked / Disabled / Selected Blade Directives"
msgstr ""

#: docs/9.x/upgrade.md:block 66 (paragraph)
msgid "The new `@checked`, `@disabled`, and `@selected` Blade directives may conflict with Vue events of the same name. You may use `@@` to escape the directives and avoid this conflict: `@@selected`."
msgstr ""

#: docs/9.x/upgrade.md:block 68 (header)
msgid "The `Enumerable` Contract"
msgstr "`Enumerable` Contract"

#: docs/9.x/upgrade.md:block 70 (paragraph)
msgid "The `Illuminate\\Support\\Enumerable` contract now defines a `sole` method. If you are manually implementing this interface, you should update your implementation to reflect this new method:"
msgstr "`Illuminate\\Support\\Enumerable` Contract 現在定義了一個 `sole` 方法。若你有手動實作這個介面，請更新你的實作以加上這個新方法："

#: docs/9.x/upgrade.md:block 71 (code)
msgid "public function sole($key = null, $operator = null, $value = null);\n"
msgstr "public function sole($key = null, $operator = null, $value = null);\n"

#: docs/9.x/upgrade.md:block 72 (header)
msgid "The `reduceWithKeys` Method"
msgstr "`reduceWithKeys` 方法"

#: docs/9.x/upgrade.md:block 73 (paragraph)
msgid "The `reduceWithKeys` method has been removed as the `reduce` method provides the same functionality. You may simply update your code to call `reduce` instead of `reduceWithKeys`."
msgstr "`reduceWithKeys` 方法已被移除，因為 `reduce` 方法提供的功能與 `reduceWithKeys` 相同。只要將呼叫 `reduceWithKeys` 的程式碼改成呼叫 `reduce` 即可。"

#: docs/9.x/upgrade.md:block 74 (header)
msgid "The `reduceMany` Method"
msgstr "`reduceMany` 方法"

#: docs/9.x/upgrade.md:block 75 (paragraph)
msgid "The `reduceMany` method has been renamed to `reduceSpread` for naming consistency with other similar methods."
msgstr "`reduceMany` 方法已更名為 `reduceSpread`，以與其他類似方法維持命名的一貫性。"

#: docs/9.x/upgrade.md:block 76 (header)
msgid "Container"
msgstr "Container"

#: docs/9.x/upgrade.md:block 77 (header)
msgid "The `Container` Contract"
msgstr "`Container` Contract"

#: docs/9.x/upgrade.md:block 79 (paragraph)
msgid "The `Illuminate\\Contracts\\Container\\Container` contract has received two method definitions: `scoped` and `scopedIf`. If you are manually implementing this contract, you should update your implementation to reflect these new methods."
msgstr "`Illuminate\\Contracts\\Container\\Container` Contract 現在多了兩個方法定義：`scoped` 與 `scopedIf`。若你有手動實作這個 Contract，請更新你的實作以加上這些新方法。"

#: docs/9.x/upgrade.md:block 80 (header)
msgid "The `ContextualBindingBuilder` Contract"
msgstr "`ContextualBindingBuilder` Contract"

#: docs/9.x/upgrade.md:block 82 (paragraph)
msgid "The `Illuminate\\Contracts\\Container\\ContextualBindingBuilder` contract now defines a `giveConfig` method. If you are manually implementing this interface, you should update your implementation to reflect this new method:"
msgstr "`Illuminate\\Contracts\\Container\\ContextualBindingBuilder` Contract 現在定義了一個 `giveConfig` 方法。若你有手動實作這個方法，請更新你的實作以反應這個新方法："

#: docs/9.x/upgrade.md:block 83 (code)
msgid "public function giveConfig($key, $default = null);\n"
msgstr "public function giveConfig($key, $default = null);\n"

#: docs/9.x/upgrade.md:block 86 (header)
msgid "Postgres \"Schema\" Configuration"
msgstr "Postgres 的「Schema」設定"

#: docs/9.x/upgrade.md:block 88 (paragraph)
msgid "The `schema` configuration option used to configure Postgres connection search paths in your application's `config/database.php` configuration file should be renamed to `search_path`."
msgstr "在 `config/database.php` 設定檔中，用來設定 Postgress 連線搜尋路徑的 `schema` 設定選項已改名為 `search_path`。"

#: docs/9.x/upgrade.md:block 90 (header)
msgid "Schema Builder `registerCustomDoctrineType` Method"
msgstr "Schema Builder `registerCustomDoctrineType` 方法"

#: docs/9.x/upgrade.md:block 92 (paragraph)
msgid "The `registerCustomDoctrineType` method has been removed from the `Illuminate\\Database\\Schema\\Builder` class. You may use the `registerDoctrineType` method on the `DB` facade instead, or register custom Doctrine types in the `config/database.php` configuration file."
msgstr "`registerCustomDoctrineType` 方法已從 `Illuminate\\Database\\Schema\\Builder` 類別內移除。可使用 `DB` Facade 上的 `registerDoctrineType` 方法來代替，或是在 `config/database.php` 設定檔內註冊自訂的 Doctrine 型別。"

#: docs/9.x/upgrade.md:block 95 (header)
msgid "Custom Casts & `null`"
msgstr "自訂 Cast 與 `null`"

#: docs/9.x/upgrade.md:block 97 (paragraph)
msgid "In previous releases of Laravel, the `set` method of custom cast classes was not invoked if the cast attribute was being set to `null`. However, this behavior was inconsistent with the Laravel documentation. In Laravel 9.x, the `set` method of the cast class will be invoked with `null` as the provided `$value` argument. Therefore, you should ensure your custom casts are able to sufficiently handle this scenario:"
msgstr "在之前版本的 Laravel中，在將 Cast 屬性設為 `null` 時不會叫用自訂 Cast 類別的 `set` 方法。不過，這個行為與 Laravel 說明文件中的不一致，因此在 Laravel 9.x 中，會叫用 Cast 類別的 `set` 方法，並提供 `null` 作為 `$value` 引數。因此，請確保你的自訂 Cast 可處理這類狀況："

#: docs/9.x/upgrade.md:block 98 (code)
msgid "/**\n"
" * Prepare the given value for storage.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  AddressModel  $value\n"
" * @param  array  $attributes\n"
" * @return array\n"
" */\n"
"public function set($model, $key, $value, $attributes)\n"
"{\n"
"    if (! $value instanceof AddressModel) {\n"
"        throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"    }\n\n"
"    return [\n"
"        'address_line_one' => $value->lineOne,\n"
"        'address_line_two' => $value->lineTwo,\n"
"    ];\n"
"}\n"
msgstr "/**\n"
" * Prepare the given value for storage.\n"
" *\n"
" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n"
" * @param  string  $key\n"
" * @param  AddressModel  $value\n"
" * @param  array  $attributes\n"
" * @return array\n"
" */\n"
"public function set($model, $key, $value, $attributes)\n"
"{\n"
"    if (! $value instanceof AddressModel) {\n"
"        throw new InvalidArgumentException('The given value is not an Address instance.');\n"
"    }\n\n"
"    return [\n"
"        'address_line_one' => $value->lineOne,\n"
"        'address_line_two' => $value->lineTwo,\n"
"    ];\n"
"}\n"

#: docs/9.x/upgrade.md:block 100 (header)
msgid "Belongs To Many `firstOrNew`, `firstOrCreate`, and `updateOrCreate` Methods"
msgstr "Belongs To Many `firstOrNew`、`firstOrCreate`、`updateOrCreate` 方法"

#: docs/9.x/upgrade.md:block 102 (paragraph)
msgid "The `belongsToMany` relationship's `firstOrNew`, `firstOrCreate`, and `updateOrCreate` methods all accept an array of attributes as their first argument. In previous releases of Laravel, this array of attributes was compared against the \"pivot\" / intermediate table for existing records."
msgstr "`belongsToMany` 關聯的 `firstOrNew`、`firstOrCreate`、`updateOrCreate` 等方法都接受傳入一組屬性陣列作為第一個引數。在之前版本的 Laravel 中，這組屬性變數會先與「^[Pivot](樞紐)」/中介資料表上現有的紀錄做比較。"

#: docs/9.x/upgrade.md:block 103 (paragraph)
msgid "However, this behavior was unexpected and typically unwanted. Instead, these methods now compare the array of attributes against the table of the related model:"
msgstr "不過，由於這個行為是未預期的，且一般來說我們不會想要這個行為。因此，現在這幾個方法已改為以 Model 上對應的資料表來跟屬性陣列做比較："

#: docs/9.x/upgrade.md:block 104 (code)
msgid "$user->roles()->updateOrCreate([\n"
"    'name' => 'Administrator',\n"
"]);\n"
msgstr "$user->roles()->updateOrCreate([\n"
"    'name' => 'Administrator',\n"
"]);\n"

#: docs/9.x/upgrade.md:block 105 (paragraph)
msgid "In addition, the `firstOrCreate` method now accepts a `$values` array as its second argument. This array will be merged with the first argument to the method (`$attributes`) when creating the related model if one does not already exist. This change makes this method consistent with the `firstOrCreate` methods offered by other relationship types:"
msgstr "此外，`firstOrCreate` 方法現已接受一個 `$values` 陣列作為其第二個引數。建立關聯 Model 時若還未有關聯 Model，會將這個陣列與該方法的第一個引數 (`$attributes`) 合併。這個更改即讓該方法與其他關聯型別上提供的 `firstOrCreate` 保持一致："

#: docs/9.x/upgrade.md:block 106 (code)
msgid "$user->roles()->firstOrCreate([\n"
"    'name' => 'Administrator',\n"
"], [\n"
"    'created_by' => $user->id,\n"
"]);\n"
msgstr "$user->roles()->firstOrCreate([\n"
"    'name' => 'Administrator',\n"
"], [\n"
"    'created_by' => $user->id,\n"
"]);\n"

#: docs/9.x/upgrade.md:block 107 (header)
msgid "The `touch` Method"
msgstr "`touch` 方法"

#: docs/9.x/upgrade.md:block 109 (paragraph)
msgid "The `touch` method now accepts an attribute to touch. If you were previously overwriting this method, you should update your method signature to reflect this new argument:"
msgstr "`touch` 方法現已接受一個要被 Touch 的屬性。若你之前有複寫這個方法，請更新方法^[簽章](Signature)以反應出此引數："

#: docs/9.x/upgrade.md:block 110 (code)
msgid "public function touch($attribute = null);\n"
msgstr "public function touch($attribute = null);\n"

#: docs/9.x/upgrade.md:block 111 (header)
msgid "Encryption"
msgstr "Encryption"

#: docs/9.x/upgrade.md:block 112 (header)
msgid "The Encrypter Contract"
msgstr "`Encrypter` Contract"

#: docs/9.x/upgrade.md:block 114 (paragraph)
msgid "The `Illuminate\\Contracts\\Encryption\\Encrypter` contract now defines a `getKey` method. If you are manually implementing this interface, you should update your implementation accordingly:"
msgstr "`Illuminate\\Contracts\\Encryption\\Encrypter` Contract 現已定義了一個 `getKey` 方法。若你有手動實作該介面，請更新該實作："

#: docs/9.x/upgrade.md:block 115 (code)
msgid "public function getKey();\n"
msgstr "public function getKey();\n"

#: docs/9.x/upgrade.md:block 116 (header)
msgid "Facades"
msgstr "Facade"

#: docs/9.x/upgrade.md:block 117 (header)
msgid "The `getFacadeAccessor` Method"
msgstr "`getFacadeAccessor` 方法"

#: docs/9.x/upgrade.md:block 119 (paragraph)
msgid "The `getFacadeAccessor` method must always return a container binding key. In previous releases of Laravel, this method could return an object instance; however, this behavior is no longer supported. If you have written your own facades, you should ensure that this method returns a container binding string:"
msgstr "`getFacadeAccessor` 方法只能回傳 Container 的^[繫結索引鍵](Binding Key)。在之前版本的 Laravel 中，這個方法可以回傳物件實體。不過，現在已不支援這個行為。若你有自行撰寫 Facade，請確保該方法回傳的是 Container 的繫結索引鍵字串："

#: docs/9.x/upgrade.md:block 120 (code)
msgid "/**\n"
" * Get the registered name of the component.\n"
" *\n"
" * @return string\n"
" */\n"
"protected static function getFacadeAccessor()\n"
"{\n"
"    return Example::class;\n"
"}\n"
msgstr "/**\n"
" * Get the registered name of the component.\n"
" *\n"
" * @return string\n"
" */\n"
"protected static function getFacadeAccessor()\n"
"{\n"
"    return Example::class;\n"
"}\n"

#: docs/9.x/upgrade.md:block 121 (header)
msgid "Filesystem"
msgstr "Filesystem"

#: docs/9.x/upgrade.md:block 122 (header)
msgid "The `FILESYSTEM_DRIVER` Environment Variable"
msgstr "`FILESYSTEM_DRIVER` 環境變數"

#: docs/9.x/upgrade.md:block 124 (paragraph)
msgid "The `FILESYSTEM_DRIVER` environment variable has been renamed to `FILESYSTEM_DISK` to more accurately reflect its usage. This change only affects the application skeleton; however, you are welcome to update your own application's environment variables to reflect this change if you wish."
msgstr "`FILESYSTEM_DRIVER` 環境變數已改名為 `FILESYSTEM_DISK`，以更確切反映出其用途。該更改只會影響專案 Skeleton。不過，若你想要的話，也歡迎你更新你專案上的環境變數以反映此更改。"

#: docs/9.x/upgrade.md:block 125 (header)
msgid "The \"Cloud\" Disk"
msgstr "「Cloud」Disk"

#: docs/9.x/upgrade.md:block 127 (paragraph)
msgid "The `cloud` disk configuration option was removed from the default application skeleton in November of 2020. This change only affects the application skeleton. If you are using the `cloud` disk within your application, you should leave this configuration value in your own application's skeleton."
msgstr "從 2020 年 11 月起，`cloud` Disk 設定選項已自預設的專案 Skeleton 中移除。這個更改只影響專案 Skeleton。若你有在專案中使用 `cloud` Disk，可在你自己的專案 Skeleton 中保留此設定值。"

#: docs/9.x/upgrade.md:block 129 (header)
msgid "Flysystem 3.x"
msgstr "Flysystem 3.x"

#: docs/9.x/upgrade.md:block 131 (paragraph)
msgid "Laravel 9.x has migrated from [Flysystem](https://flysystem.thephpleague.com/v2/docs/) 1.x to 3.x. Under the hood, Flysystem powers all of the file manipulation methods provided by the `Storage` facade. In light of this, some changes may be required within your application; however, we have tried to make this transition as seamless as possible."
msgstr "Laravel 9.x 以從 [Flysystem](https://flysystem.thephpleague.com/v2/docs/) 1.x 更新為 3.x。Flysystem 在幕後驅動了 `Storage` Facade 的所有檔案處理方法。有鑑於此，有可能會需要你修改你的專案中的一些地方。不過，我們已盡量讓這些修改變得容易。"

#: docs/9.x/upgrade.md:block 132 (header)
msgid "Driver Prerequisites"
msgstr "Driver 前置需求"

#: docs/9.x/upgrade.md:block 133 (paragraph)
msgid "Before using the S3, FTP, or SFTP drivers, you will need to install the appropriate package via the Composer package manager:"
msgstr "在使用 S3、FTP、SFTP 等 Driver 時，需要使用 Composer 套件管理員安裝適當的套件："

#: docs/9.x/upgrade.md:block 134 (unordered list)
msgid "Amazon S3: `composer require -W league/flysystem-aws-s3-v3 \"^3.0\"`"
msgstr "Amazon S3: `composer require -W league/flysystem-aws-s3-v3 \"^3.0\"`"

#: docs/9.x/upgrade.md:block 134 (unordered list)
msgid "FTP: `composer require league/flysystem-ftp \"^3.0\"`"
msgstr "FTP: `composer require league/flysystem-ftp \"^3.0\"`"

#: docs/9.x/upgrade.md:block 134 (unordered list)
msgid "SFTP: `composer require league/flysystem-sftp-v3 \"^3.0\"`"
msgstr "SFTP: `composer require league/flysystem-sftp-v3 \"^3.0\"`"

#: docs/9.x/upgrade.md:block 135 (header)
msgid "Overwriting Existing Files"
msgstr "覆寫已存在的檔案"

#: docs/9.x/upgrade.md:block 136 (paragraph)
msgid "Write operations such as `put`, `write`, and `writeStream` now overwrite existing files by default. If you do not want to overwrite existing files, you should manually check for the file's existence before performing the write operation."
msgstr ""

#: docs/9.x/upgrade.md:block 137 (header)
msgid "Write Exceptions"
msgstr ""

#: docs/9.x/upgrade.md:block 138 (paragraph)
msgid "Write operations such as `put`, `write`, and `writeStream` no longer throw an exception when a write operation fails. Instead, `false` is returned. If you would like to preserve the previous behavior which threw exceptions, you may define the `throw` option within a filesystem disk's configuration array:"
msgstr ""

#: docs/9.x/upgrade.md:block 139 (code)
msgid "'public' => [\n"
"    'driver' => 'local',\n"
"    // ...\n"
"    'throw' => true,\n"
"],\n"
msgstr ""

#: docs/9.x/upgrade.md:block 140 (header)
msgid "Reading Missing Files"
msgstr "讀取不存在的檔案"

#: docs/9.x/upgrade.md:block 141 (paragraph)
msgid "Attempting to read from a file that does not exist now returns `null`. In previous releases of Laravel, an `Illuminate\\Contracts\\Filesystem\\FileNotFoundException` would have been thrown."
msgstr "若嘗試讀取不存在的檔案，現在會回傳 `null`。在之前版本的 Laravel 中，會^[擲回](Throw) `Illuminate\\Contracts\\Filesystem\\FileNotFoundException`。"

#: docs/9.x/upgrade.md:block 142 (header)
msgid "Deleting Missing Files"
msgstr "刪除不存在的檔案"

#: docs/9.x/upgrade.md:block 143 (paragraph)
msgid "Attempting to `delete` a file that does not exist now returns `true`."
msgstr "嘗試使用 `delete` 刪除不存在的檔案時，現在會回傳 `true`。"

#: docs/9.x/upgrade.md:block 144 (header)
msgid "Cached Adapters"
msgstr "Cached Adapter"

#: docs/9.x/upgrade.md:block 145 (paragraph)
msgid "Flysystem no longer supports \"cached adapters\". Thus, they have been removed from Laravel and any relevant configuration (such as the `cache` key within disk configurations) can be removed."
msgstr "Flysystem 現在不支援「Cached Adapter」了。因此，Laravel 中已移除這些 Adapter，你可以移除一些與其相關的設定 (如 Disk 設定中的 `cache` 索引鍵等)。"

#: docs/9.x/upgrade.md:block 146 (header)
msgid "Custom Filesystems"
msgstr "自訂 Filesystem"

#: docs/9.x/upgrade.md:block 147 (paragraph)
msgid "Slight changes have been made to the steps required to register custom filesystem drivers. Therefore, if you were defining your own custom filesystem drivers, or using packages that define custom drivers, you should update your code and dependencies."
msgstr "要註冊自訂 Filesystem Driver 所需的步驟有一些小更改。因此，若你有定義你自己的自訂 Filesystem Driver，或是使用有定義自訂 Driver 的套件，請更新你的程式碼或相依性套件。"

#: docs/9.x/upgrade.md:block 148 (paragraph)
msgid "For example, in Laravel 8.x, a custom filesystem driver might be registered like so:"
msgstr "舉例來說，Laravel 8.x 中，可以像這樣註冊 Filesystem Driver："

#: docs/9.x/upgrade.md:block 149 (code)
msgid "use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $client = new DropboxClient(\n"
"        $config['authorization_token']\n"
"    );\n\n"
"    return new Filesystem(new DropboxAdapter($client));\n"
"});\n"
msgstr "use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $client = new DropboxClient(\n"
"        $config['authorization_token']\n"
"    );\n\n"
"    return new Filesystem(new DropboxAdapter($client));\n"
"});\n"

#: docs/9.x/upgrade.md:block 150 (paragraph)
msgid "However, in Laravel 9.x, the callback given to the `Storage::extend` method should return an instance of `Illuminate\\Filesystem\\FilesystemAdapter` directly:"
msgstr "不過，在 Laravel 9.x 中，傳給 `Storage::extend` 方法的回呼應直接回傳一個 `Illuminate\\Filesystem\\FilesystemAdapter` 的實體："

#: docs/9.x/upgrade.md:block 151 (code)
msgid "use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $adapter = new DropboxAdapter(\n"
"        new DropboxClient($config['authorization_token'])\n"
"    );\n\n"
"    return new FilesystemAdapter(\n"
"        new Filesystem($adapter, $config),\n"
"        $adapter,\n"
"        $config\n"
"    );\n"
"});\n"
msgstr ""

#: docs/9.x/upgrade.md:block 152 (header)
msgid "Helpers"
msgstr "輔助函式"

#: docs/9.x/upgrade.md:block 154 (header)
msgid "The `data_get` Helper & Iterable Objects"
msgstr "`data_get` 輔助函式與 Iterable 的物件"

#: docs/9.x/upgrade.md:block 156 (paragraph)
msgid "Previously, the `data_get` helper could be used to retrieve nested data on arrays and `Collection` instances; however, this helper can now retrieve nested data on all iterable objects."
msgstr "之前，`data_get` 輔助函式可用來在陣列與 `Collection` 實體上取得巢狀資料。不過，`data_get` 現在已可在所有 Iterable 的物件上取得巢狀資料了。"

#: docs/9.x/upgrade.md:block 158 (header)
msgid "The `str` Helper"
msgstr "`str` 輔助函式"

#: docs/9.x/upgrade.md:block 160 (paragraph)
msgid "Laravel 9.x now includes a global `str` [helper function](/docs/{{version}}/helpers#method-str). If you are defining a global `str` helper in your application, you should rename or remove it so that it does not conflict with Laravel's own `str` helper."
msgstr "Laravel 9.x 現在包含了一個全域的 `str` [輔助函式](/docs/{{version}}/helpers#method-str)。若你有在專案中定義全域的 `str` 輔助函式，請重新命名或移除該函式以避免與 Laravel 的 `str` 輔助函式衝突。"

#: docs/9.x/upgrade.md:block 162 (header)
msgid "The `when` / `unless` Methods"
msgstr "`when` / `unless` 方法"

#: docs/9.x/upgrade.md:block 164 (paragraph)
msgid "As you may know, `when` and `unless` methods are offered by various classes throughout the framework. These methods can be used to conditionally perform an action if the boolean value of the first argument to the method evaluates to `true` or `false`:"
msgstr "讀者可能已經知道，在 Laravel 中有許多類別都提供了 `when` 與 `unless` 方法。可以使用這些方法來依據提供給該方法之第一個引數的布林值是 `true` 還是 `false` 來有條件地進行一些動作："

#: docs/9.x/upgrade.md:block 165 (code)
msgid "$collection->when(true, function ($collection) {\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"
msgstr "$collection->when(true, function ($collection) {\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"

#: docs/9.x/upgrade.md:block 166 (paragraph)
msgid "Therefore, in previous releases of Laravel, passing a closure to the `when` or `unless` methods meant that the conditional operation would always execute, since a loose comparison against a closure object (or any other object) always evaluates to `true`. This often led to unexpected outcomes because developers expect the **result** of the closure to be used as the boolean value that determines if the conditional action executes."
msgstr "因此，在之前版本的 Laravel 中，若傳遞閉包給 `when` 或 `unless` 方法，則一定會執行給定的條件式動作，因為在對閉包物件 (或其他物件) 做鬆散比較時，結果一定會是 `true`。通常來說這會導致一些未預期的結果，因為開發人員通常會預期使用閉包的 **結果** 來作為判斷是否執行條件式動作的布林值。"

#: docs/9.x/upgrade.md:block 167 (paragraph)
msgid "So, in Laravel 9.x, any closures passed to the `when` or `unless` methods will be executed and the value returned by the closure will be considered the boolean value used by the `when` and `unless` methods:"
msgstr "因此，在 Laravel 9.x 中，傳給 `when` 或 `unless` 方法的閉包會被執行，而該閉包回傳的值會被用來當作 `when` 與 `unless` 方法要判斷的布林值："

#: docs/9.x/upgrade.md:block 168 (code)
msgid "$collection->when(function ($collection) {\n"
"    // This closure is executed...\n"
"    return false;\n"
"}, function ($collection) {\n"
"    // Not executed since first closure returned \"false\"...\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"
msgstr "$collection->when(function ($collection) {\n"
"    // 會執行這個閉包...\n"
"    return false;\n"
"}, function ($collection) {\n"
"    // 因為第一個閉包回傳「false」，因此不會執行這個閉包...\n"
"    $collection->merge([1, 2, 3]);\n"
"});\n"

#: docs/9.x/upgrade.md:block 169 (header)
msgid "HTTP Client"
msgstr "HTTP 用戶端"

#: docs/9.x/upgrade.md:block 171 (header)
msgid "Default Timeout"
msgstr "預設的逾時"

#: docs/9.x/upgrade.md:block 173 (paragraph)
msgid "The [HTTP client](/docs/{{version}}/http-client) now has a default timeout of 30 seconds. In other words, if the server does not respond within 30 seconds, an exception will be thrown. Previously, no default timeout length was configured on the HTTP client, causing requests to sometimes \"hang\" indefinitely."
msgstr "[HTTP 用戶端](/docs/{{version}}/http-client) 現在的預設逾時設定為 30 秒。換句話說，若伺服器在 30 秒內未回應，會^[擲回](Throw)一個 Exception。以前，HTTP 用戶端上並沒有設定逾時，因此有時候 Request 可能會無限地「當掉」。"

#: docs/9.x/upgrade.md:block 174 (paragraph)
msgid "If you wish to specify a longer timeout for a given request, you may do so using the `timeout` method:"
msgstr "若想為給定 Request 指定更長的逾時設定，可使用 `timeout` 方法："

#: docs/9.x/upgrade.md:block 175 (code)
msgid "$response = Http::timeout(120)->get(/* ... */);\n"
msgstr ""

#: docs/9.x/upgrade.md:block 176 (header)
msgid "HTTP Fake & Middleware"
msgstr "HTTP Fake 與 Middleware"

#: docs/9.x/upgrade.md:block 178 (paragraph)
msgid "Previously, Laravel would not execute any provided Guzzle HTTP middleware when the [HTTP client](/docs/{{version}}/http-client) was \"faked\". However, in Laravel 9.x, Guzzle HTTP middleware will be executed even when the HTTP client is faked."
msgstr "之前，若使用「^[假的](Fake)」[HTTP 用戶端](/docs/{{version}}/http-client)，Laravel 就不會執行任何提供的 Guzzle HTTP Middleware。不過，在 Laravel 9.x 中，就算有 Fake HTTP 用戶端，還是會執行 Guzzle HTTP Middleware。"

#: docs/9.x/upgrade.md:block 179 (header)
msgid "HTTP Fake & Dependency Injection"
msgstr "HTTP Fake 與相依性插入"

#: docs/9.x/upgrade.md:block 181 (paragraph)
msgid "In previous releases of Laravel, invoking the `Http::fake()` method would not affect instances of the `Illuminate\\Http\\Client\\Factory` that were injected into class constructors. However, in Laravel 9.x, `Http::fake()` will ensure fake responses are returned by HTTP clients injected into other services via dependency injection. This behavior is more consistent with the behavior of other facades and fakes."
msgstr "在之前版本的 Laravel 中，叫用 `Http::fake()` 方法不會影響到插入到類別 ^[Constructor](建構函式) 上的 `Illuminate\\Http\\Client\\Factory` 實體。不過，在 Laravel 9.x 中，`Http::fake()` 會確保使用相依性插入所插入到其他類別的 HTTP 用戶端回傳的是 Fake 過的 Response。這個行為也讓 `Http::fake()` 與其他 Facade、Fake 更一致。"

#: docs/9.x/upgrade.md:block 183 (header)
msgid "Symfony Mailer"
msgstr "Symfony Mailer"

#: docs/9.x/upgrade.md:block 185 (paragraph)
msgid "One of the largest changes in Laravel 9.x is the transition from SwiftMailer, which is no longer maintained as of December 2021, to Symfony Mailer. However, we have tried to make this transition as seamless as possible for your applications. That being said, please thoroughly review the list of changes below to ensure your application is fully compatible."
msgstr "Laravel 9.x 中，其中一個最大的更改就是將 SwiftMailer 更改為 Symfony Mailer。自從 2021 年 12 月起，SwiftMailer 就不再維護了。不過，我們儘量讓你在專案中可以無縫將 SwiftMailer 改為 Symfony Mailer。因此，請檢視下列更改，以確保你的專案有完整支援 Symfony Mailer。"

#: docs/9.x/upgrade.md:block 187 (paragraph)
msgid "To continue using the Mailgun transport, your application should require the `symfony/mailgun-mailer` and `symfony/http-client` Composer packages:"
msgstr "若要繼續使用 Mailgun Transport，請在專案中 Require `symfony/mailgun-mailer` 與 `symfony/http-client` Composer 套件："

#: docs/9.x/upgrade.md:block 188 (code)
msgid "composer require symfony/mailgun-mailer symfony/http-client\n"
msgstr "composer require symfony/mailgun-mailer symfony/http-client\n"

#: docs/9.x/upgrade.md:block 189 (paragraph)
msgid "The `wildbit/swiftmailer-postmark` Composer package should be removed from your application. Instead, your application should require the `symfony/postmark-mailer` and `symfony/http-client` Composer packages:"
msgstr "請從專案中移除 `wildbit/swiftmailer-postmark` Composer 套件，並改 Require `symfony/postmark-mailer` 與 `symfony/http-client` Composer 套件："

#: docs/9.x/upgrade.md:block 190 (code)
msgid "composer require symfony/postmark-mailer symfony/http-client\n"
msgstr "composer require symfony/postmark-mailer symfony/http-client\n"

#: docs/9.x/upgrade.md:block 191 (header)
msgid "Updated Return Types"
msgstr "回傳型別的更新"

#: docs/9.x/upgrade.md:block 192 (paragraph)
msgid "The `send`, `html`, `raw`, and `plain` methods on `Illuminate\\Mail\\Mailer` no longer return `void`. Instead, an instance of `Illuminate\\Mail\\SentMessage` is returned. This object contains an instance of `Symfony\\Component\\Mailer\\SentMessage` that is accessible via the `getSymfonySentMessage` method or by dynamically invoking methods on the object."
msgstr ""

#: docs/9.x/upgrade.md:block 193 (header)
msgid "Renamed \"Swift\" Methods"
msgstr "「Swift」方法的更名"

#: docs/9.x/upgrade.md:block 194 (paragraph)
msgid "Various SwiftMailer related methods, some of which were undocumented, have been renamed to their Symfony Mailer counterparts. For example, the `withSwiftMessage` method has been renamed to `withSymfonyMessage`:"
msgstr "有多個與 SwiftMailer 相關的方法都已改名為與 Symfony Mailer 相應的名稱，其中有些是未包含在說明文件內的。舉例來說，`withSwiftMessage` 方法已更名為 `withSymfonyMessage`："

#: docs/9.x/upgrade.md:block 195 (code)
msgid "// Laravel 8.x...\n"
"$this->withSwiftMessage(function ($message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n\n"
"// Laravel 9.x...\n"
"use Symfony\\Component\\Mime\\Email;\n\n"
"$this->withSymfonyMessage(function (Email $message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n"
msgstr "// Laravel 8.x...\n"
"$this->withSwiftMessage(function ($message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n\n"
"// Laravel 9.x...\n"
"use Symfony\\Component\\Mime\\Email;\n\n"
"$this->withSymfonyMessage(function (Email $message) {\n"
"    $message->getHeaders()->addTextHeader(\n"
"        'Custom-Header', 'Header Value'\n"
"    );\n"
"});\n"

#: docs/9.x/upgrade.md:block 196 (quote)
msgid "**Warning** Please thoroughly review the [Symfony Mailer documentation](https://symfony.com/doc/6.0/mailer.html#creating-sending-messages) for all possible interactions with the `Symfony\\Component\\Mime\\Email` object."
msgstr ""

#: docs/9.x/upgrade.md:block 197 (paragraph)
msgid "The list below contains a more thorough overview of renamed methods. Many of these methods are low-level methods used to interact with SwiftMailer / Symfony Mailer directly, so may not be commonly used within most Laravel applications:"
msgstr "下面詳細列出了針對這些改名過的方法。其中許多方法都是用來直接使用 SwiftMailer / Symfony Mailer 的低階方法，所以在大多數 Laravel 專案中並不常用："

#: docs/9.x/upgrade.md:block 198 (code)
msgid "Message::getSwiftMessage();\n"
"Message::getSymfonyMessage();\n\n"
"Mailable::withSwiftMessage($callback);\n"
"Mailable::withSymfonyMessage($callback);\n\n"
"MailMessage::withSwiftMessage($callback);\n"
"MailMessage::withSymfonyMessage($callback);\n\n"
"Mailer::getSwiftMailer();\n"
"Mailer::getSymfonyTransport();\n\n"
"Mailer::setSwiftMailer($swift);\n"
"Mailer::setSymfonyTransport(TransportInterface $transport);\n\n"
"MailManager::createTransport($config);\n"
"MailManager::createSymfonyTransport($config);\n"
msgstr "Message::getSwiftMessage();\n"
"Message::getSymfonyMessage();\n\n"
"Mailable::withSwiftMessage($callback);\n"
"Mailable::withSymfonyMessage($callback);\n\n"
"MailMessage::withSwiftMessage($callback);\n"
"MailMessage::withSymfonyMessage($callback);\n\n"
"Mailer::getSwiftMailer();\n"
"Mailer::getSymfonyTransport();\n\n"
"Mailer::setSwiftMailer($swift);\n"
"Mailer::setSymfonyTransport(TransportInterface $transport);\n\n"
"MailManager::createTransport($config);\n"
"MailManager::createSymfonyTransport($config);\n"

#: docs/9.x/upgrade.md:block 199 (header)
msgid "Proxied `Illuminate\\Mail\\Message` Methods"
msgstr "經過代理的 `Illuminate\\Mail\\Message` 方法"

#: docs/9.x/upgrade.md:block 200 (paragraph)
msgid "The `Illuminate\\Mail\\Message` typically proxied missing methods to the underlying `Swift_Message` instance. However, missing methods are now proxied to an instance of `Symfony\\Component\\Mime\\Email` instead. So, any code that was previously relying on missing methods to be proxied to SwiftMailer should be updated to their corresponding Symfony Mailer counterparts."
msgstr "`Illuminate\\Mail\\Message` 一般來說都會將不存在的方法代理到底層的 `Swift_Message` 實體上。不過，現在，不存在的方法會改為代理到 `Symfony\\Component\\Mime\\Email` 實體上。因此，若先前有任何仰賴這個將不存在方法代理到 SwiftMailer 的程式碼都應改為使用其在 Symfony Mailer 中相應的部分。"

#: docs/9.x/upgrade.md:block 201 (paragraph)
msgid "Again, many applications may not be interacting with these methods, as they are not documented within the Laravel documentation:"
msgstr "同樣的，許多專案應該都不會使用到這些方法，因為這些方法並沒有寫在 Laravel 說明文件中："

#: docs/9.x/upgrade.md:block 202 (code)
msgid "// Laravel 8.x...\n"
"$message\n"
"    ->setFrom('taylor@laravel.com')\n"
"    ->setTo('example@example.org')\n"
"    ->setSubject('Order Shipped')\n"
"    ->setBody('<h1>HTML</h1>', 'text/html')\n"
"    ->addPart('Plain Text', 'text/plain');\n\n"
"// Laravel 9.x...\n"
"$message\n"
"    ->from('taylor@laravel.com')\n"
"    ->to('example@example.org')\n"
"    ->subject('Order Shipped')\n"
"    ->html('<h1>HTML</h1>')\n"
"    ->text('Plain Text');\n"
msgstr "// Laravel 8.x...\n"
"$message\n"
"    ->setFrom('taylor@laravel.com')\n"
"    ->setTo('example@example.org')\n"
"    ->setSubject('Order Shipped')\n"
"    ->setBody('<h1>HTML</h1>', 'text/html')\n"
"    ->addPart('Plain Text', 'text/plain');\n\n"
"// Laravel 9.x...\n"
"$message\n"
"    ->from('taylor@laravel.com')\n"
"    ->to('example@example.org')\n"
"    ->subject('Order Shipped')\n"
"    ->html('<h1>HTML</h1>')\n"
"    ->text('Plain Text');\n"

#: docs/9.x/upgrade.md:block 203 (header)
msgid "Generated Messages IDs"
msgstr "產生的 Message ID"

#: docs/9.x/upgrade.md:block 204 (paragraph)
msgid "SwiftMailer offered the ability to define a custom domain to include in generated Message IDs via the `mime.idgenerator.idright` configuration option. This is not supported by Symfony Mailer. Instead, Symfony Mailer will automatically generate a Message ID based on the sender."
msgstr "SwiftMailer 提供了可使用 `mime.idgenerator.idright` 設定選項來定義要包含在產生之 Message ID 中的自訂網域。Symfony Mailer 不支援這個功能。Symfony Mailer 只會依據寄件人自動產生 Message ID。"

#: docs/9.x/upgrade.md:block 205 (header)
msgid "`MessageSent` Event Changes"
msgstr ""

#: docs/9.x/upgrade.md:block 206 (paragraph)
msgid "The `message` property of the `Illuminate\\Mail\\Events\\MessageSent` event now contains an instance of `Symfony\\Component\\Mime\\Email` instead of an instance of `Swift_Message`. This message represents the email **before** it is sent."
msgstr ""

#: docs/9.x/upgrade.md:block 207 (paragraph)
msgid "Additionally, a new `sent` property has been added to the `MessageSent` event. This property contains an instance of `Illuminate\\Mail\\SentMessage` and contains information about the sent email, such as the message ID."
msgstr ""

#: docs/9.x/upgrade.md:block 208 (header)
msgid "Forced Reconnections"
msgstr "強制重新連線"

#: docs/9.x/upgrade.md:block 209 (paragraph)
msgid "It is no longer possible to force a transport reconnection (for example when the mailer is running via a daemon process). Instead, Symfony Mailer will attempt to reconnect to the transport automatically and throw an exception if the reconnection fails."
msgstr "現在已經無法再強制 Transport 重新連線了 (如使用 Daemon 處理程序執行 Mailer 時)。Symfony Mailer 會自動嘗試重新連線，並在重新連線失敗時^[擲回](Throw) Exception。"

#: docs/9.x/upgrade.md:block 210 (header)
msgid "SMTP Stream Options"
msgstr "SMTP 串流選項"

#: docs/9.x/upgrade.md:block 211 (paragraph)
msgid "Defining stream options for the SMTP transport is no longer supported. Instead, you must define the relevant options directly within the configuration if they are supported. For example, to disable TLS peer verification:"
msgstr "現在已不支援為 SMTP Transport 定義串流選項。若有支援相應的選項，請改為定義這些選項。舉例來說，若要禁用 TLS Peer Verification："

#: docs/9.x/upgrade.md:block 212 (code)
msgid "'smtp' => [\n"
"    // Laravel 8.x...\n"
"    'stream' => [\n"
"        'ssl' => [\n"
"            'verify_peer' => false,\n"
"        ],\n"
"    ],\n\n"
"    // Laravel 9.x...\n"
"    'verify_peer' => false,\n"
"],\n"
msgstr "'smtp' => [\n"
"    // Laravel 8.x...\n"
"    'stream' => [\n"
"        'ssl' => [\n"
"            'verify_peer' => false,\n"
"        ],\n"
"    ],\n\n"
"    // Laravel 9.x...\n"
"    'verify_peer' => false,\n"
"],\n"

#: docs/9.x/upgrade.md:block 213 (paragraph)
msgid "To learn more about the available configuration options, please review the [Symfony Mailer documentation](https://symfony.com/doc/6.0/mailer.html#transport-setup)."
msgstr "若要瞭解更多可用的選項，請參考 [Symfony Mailer 說明文件](https://symfony.com/doc/6.0/mailer.html#transport-setup)。"

#: docs/9.x/upgrade.md:block 214 (quote)
msgid "**Warning** In spite of the example above, you are not generally advised to disable SSL verification since it introduces the possibility of \"man-in-the-middle\" attacks."
msgstr ""

#: docs/9.x/upgrade.md:block 215 (header)
msgid "SMTP `auth_mode`"
msgstr "SMTP `auth_mode`"

#: docs/9.x/upgrade.md:block 216 (paragraph)
msgid "Defining the SMTP `auth_mode` in the `mail` configuration file is no longer required. The authentication mode will be automatically negotiated between Symfony Mailer and the SMTP server."
msgstr "現在已不支援在 `mail` 設定中定義 SMTP 的 `auth_mode`。Symfony Mailer 會自動與 SMTP 伺服器取得認證方法。"

#: docs/9.x/upgrade.md:block 217 (header)
msgid "Failed Recipients"
msgstr "寄送失敗的收件人"

#: docs/9.x/upgrade.md:block 218 (paragraph)
msgid "It is no longer possible to retrieve a list of failed recipients after sending a message. Instead, a `Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface` exception will be thrown if a message fails to send. Instead of relying on retrieving invalid email addresses after sending a message, we recommend that you validate email addresses before sending the message instead."
msgstr "送出訊息後，現在已無法取得無法寄出的收件人列表。若訊息送出失敗，現在只會^[擲回](Throw)一個 `Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface` Exception。我們建議你不要在送出訊息後去取得無效的 E-Mail 位址，而是在送出訊息前就驗證 E-Mail 位址。"

#: docs/9.x/upgrade.md:block 219 (header)
msgid "Packages"
msgstr "套件"

#: docs/9.x/upgrade.md:block 221 (header)
msgid "The `lang` Directory"
msgstr "`lang` 目錄"

#: docs/9.x/upgrade.md:block 223 (paragraph)
msgid "In new Laravel applications, the `resources/lang` directory is now located in the root project directory (`lang`). If your package is publishing language files to this directory, you should ensure that your package is publishing to `app()->langPath()` instead of a hard-coded path."
msgstr "在新的 Laravel 專案中，`resources/lang` 目錄現在改放在專案根目錄了 (`lang`)。若你的專案有將語系檔安裝到這個資料夾，請確保是使用 `app()->langPath()` 來安裝，而不是使用^[硬式編碼](Hard-Coded)的路徑。"

#: docs/9.x/upgrade.md:block 227 (header)
msgid "The `opis/closure` Library"
msgstr "`opis/closure` 套件"

#: docs/9.x/upgrade.md:block 229 (paragraph)
msgid "Laravel's dependency on `opis/closure` has been replaced by `laravel/serializable-closure`. This should not cause any breaking change in your application unless you are interacting with the `opis/closure` library directly. In addition, the previously deprecated `Illuminate\\Queue\\SerializableClosureFactory` and `Illuminate\\Queue\\SerializableClosure` classes have been removed. If you are interacting with `opis/closure` library directly or using any of the removed classes, you may use [Laravel Serializable Closure](https://github.com/laravel/serializable-closure) instead."
msgstr "Laravel 的 `opis/closure` 相依性套件現已改為 `laravel/serializable-closure`。這應該不會對你的程式造成任何的^[破壞性變更](Breaking Change)，除非你有直接使用到 `opis/closure` 套件。此外，現已移除之前^[已棄用](Deprecated)的 `Illuminate\\Queue\\SerializableClosureFactory` 與 `Illuminate\\Queue\\SerializableClosure`。若你有直接使用到 `opis/closure` 函式庫，或是有使用到任何已移除的類別，可使用 [Laravel Serializable Closure](https://github.com/laravel/serializable-closure) 來代替。"

#: docs/9.x/upgrade.md:block 230 (header)
msgid "The Failed Job Provider `flush` Method"
msgstr "Failed Job Provider 的 `flush` 方法"

#: docs/9.x/upgrade.md:block 232 (paragraph)
msgid "The `flush` method defined by the `Illuminate\\Queue\\Failed\\FailedJobProviderInterface` interface now accepts an `$hours` argument which determines how old a failed job must be (in hours) before it is flushed by the `queue:flush` command. If you are manually implementing the `FailedJobProviderInterface` you should ensure that your implementation is updated to reflect this new argument:"
msgstr "`Illuminate\\Queue\\Failed\\FailedJobProviderInterface` 介面中定義的 `flush` 方法現已支援一個 `$hours` 引數。使用該引數可用來判斷執行失敗的任務在被 `queue:flush` 指令清除前必須要保留多久 (單位：小時)。若你有手動實作 `FailedJobProviderInterface`，請確保有更新該實作以反映這個新引數："

#: docs/9.x/upgrade.md:block 233 (code)
msgid "public function flush($hours = null);\n"
msgstr "public function flush($hours = null);\n"

#: docs/9.x/upgrade.md:block 235 (header)
msgid "The `getSession` Method"
msgstr "`getSession` 方法"

#: docs/9.x/upgrade.md:block 237 (paragraph)
msgid "The `Symfony\\Component\\HttpFoundaton\\Request` class that is extended by Laravel's own `Illuminate\\Http\\Request` class offers a `getSession` method to get the current session storage handler. This method is not documented by Laravel as most Laravel applications interact with the session through Laravel's own `session` method."
msgstr "Laravel 的 `Illuminate\\Http\\Request` 類別所繼承的 `Symfony\\Component\\HttpFoundaton\\Request` 類別現已提供了一個 `getSession` 方法，可用來取得目前的 Session ^[Storage Handler](存放空間處理常式)。Laravel 說明文件中並未提及該方法，因為大多數的 Laravel 專案都使用 Laravel 自己的 `session` 方法來處理 Session。"

#: docs/9.x/upgrade.md:block 238 (paragraph)
msgid "The `getSession` method previously returned an instance of `Illuminate\\Session\\Store` or `null`; however, due to the Symfony 6.x release enforcing a return type of `Symfony\\Component\\HttpFoundation\\Session\\SessionInterface`, the `getSession` now correctly returns a `SessionInterface` implementation or throws an `\\Symfony\\Component\\HttpFoundation\\Exception\\SessionNotFoundException` exception when no session is available."
msgstr "之前，`getSession` 方法會回傳 `Illuminate\\Session\\Store` 實體或 `null`。不過，由於 Symfony 6.x 版本強制回傳型別為 `Symfony\\Component\\HttpFoundation\\Session\\SessionInterface`，因此 `getSession` 現在會回傳一個 `SessionInterface` 實作，或是當沒有可用的 Session 時會^[擲回](Throw) `\\Symfony\\Component\\HttpFoundation\\Exception\\SessionNotFoundException` Exception。"

#: docs/9.x/upgrade.md:block 241 (header)
msgid "The `assertDeleted` Method"
msgstr "`assertDeleted` 方法"

#: docs/9.x/upgrade.md:block 243 (paragraph)
msgid "All calls to the `assertDeleted` method should be updated to `assertModelMissing`."
msgstr "`assertDeleted` 方法的呼叫應更改為 `assertModelMissing`。"

#: docs/9.x/upgrade.md:block 244 (header)
msgid "Trusted Proxies"
msgstr "Trusted Proxies"

#: docs/9.x/upgrade.md:block 246 (paragraph)
msgid "If you are upgrading your Laravel 8 project to Laravel 9 by importing your existing application code into a totally new Laravel 9 application skeleton, you may need to update your application's \"trusted proxy\" middleware."
msgstr "若你是通過將現有程式碼複製到新安裝的 Laravel 9 應用程式 Skeletong 中來從 Laravel 8 升級到 Laravel 9 的話，需要更新專案的「Trusted Proxy」Middleware。"

#: docs/9.x/upgrade.md:block 247 (paragraph)
msgid "Within your `app/Http/Middleware/TrustProxies.php` file, update `use Fideloper\\Proxy\\TrustProxies as Middleware` to `use Illuminate\\Http\\Middleware\\TrustProxies as Middleware`."
msgstr "在 `app/Http/Middleware/TrustProxies.php` 檔案中，請將 `use Fideloper\\Proxy\\TrustProxies as Middleware` 更新為 `use Illuminate\\Http\\Middleware\\TrustProxies as Middleware`。"

#: docs/9.x/upgrade.md:block 248 (paragraph)
msgid "Next, within `app/Http/Middleware/TrustProxies.php`, you should update the `$headers` property definition:"
msgstr "接著，在 `app/Http/Middleware/TrustProxies.php` 中，請更新 `$headers` 屬性的定義："

#: docs/9.x/upgrade.md:block 249 (code)
msgid "// Before...\n"
"protected $headers = Request::HEADER_X_FORWARDED_ALL;\n\n"
"// After...\n"
"protected $headers =\n"
"    Request::HEADER_X_FORWARDED_FOR |\n"
"    Request::HEADER_X_FORWARDED_HOST |\n"
"    Request::HEADER_X_FORWARDED_PORT |\n"
"    Request::HEADER_X_FORWARDED_PROTO |\n"
"    Request::HEADER_X_FORWARDED_AWS_ELB;\n"
msgstr "// 舊的...\n"
"protected $headers = Request::HEADER_X_FORWARDED_ALL;\n\n"
"// 新的...\n"
"protected $headers =\n"
"    Request::HEADER_X_FORWARDED_FOR |\n"
"    Request::HEADER_X_FORWARDED_HOST |\n"
"    Request::HEADER_X_FORWARDED_PORT |\n"
"    Request::HEADER_X_FORWARDED_PROTO |\n"
"    Request::HEADER_X_FORWARDED_AWS_ELB;\n"

#: docs/9.x/upgrade.md:block 250 (paragraph)
msgid "Finally, you can remove the `fideloper/proxy` Composer dependency from your application:"
msgstr "最後，請從專案中移除 `fideloper/proxy` Composer 相依性套件："

#: docs/9.x/upgrade.md:block 251 (code)
msgid "composer remove fideloper/proxy\n"
msgstr "composer remove fideloper/proxy\n"

#: docs/9.x/upgrade.md:block 253 (header)
msgid "Form Request `validated` Method"
msgstr "Form Request 的 `validated` 方法"

#: docs/9.x/upgrade.md:block 255 (paragraph)
msgid "The `validated` method offered by form requests now accepts `$key` and `$default` arguments. If you are manually overwriting the definition of this method, you should update your method's signature to reflect these new arguments:"
msgstr "Form Request 提供的 `validated` 方法現已接受 `$key` 與 `$default` 兩個引數。若有手動複寫該方法的定義，請更新方法^[簽章](Signature)以反映這些新引數："

#: docs/9.x/upgrade.md:block 256 (code)
msgid "public function validated($key = null, $default = null)\n"
msgstr "public function validated($key = null, $default = null)\n"

#: docs/9.x/upgrade.md:block 258 (header)
msgid "The `password` Rule"
msgstr "`password` 規則"

#: docs/9.x/upgrade.md:block 260 (paragraph)
msgid "The `password` rule, which validates that the given input value matches the authenticated user's current password, has been renamed to `current_password`."
msgstr "用來驗證給定輸入值是否符合已登入使用者目前密碼的 `password` 規則，現已更名為 `current_password`。"

#: docs/9.x/upgrade.md:block 262 (header)
msgid "Unvalidated Array Keys"
msgstr "未驗證的陣列索引鍵"

#: docs/9.x/upgrade.md:block 264 (paragraph)
msgid "In previous releases of Laravel, you were required to manually instruct Laravel's validator to exclude unvalidated array keys from the \"validated\" data it returns, especially in combination with an `array` rule that does not specify a list of allowed keys."
msgstr "在之前版本的 Laravel 中，我們可能會需要手動讓 Laravel 的 Validator 從「^[已驗證](Validated)」資料中排除一些未驗證的陣列索引鍵。特別是當我們在使用 `array` 規則時未指定允許的索引鍵時。"

#: docs/9.x/upgrade.md:block 265 (paragraph)
msgid "However, in Laravel 9.x, unvalidated array keys are always excluded from the \"validated\" data even when no allowed keys have been specified via the `array` rule. Typically, this behavior is the most expected behavior and the previous `excludeUnvalidatedArrayKeys` method was only added to Laravel 8.x as a temporary measure in order to preserve backwards compatibility."
msgstr "不過，在 Laravel 9.x 中，未驗證的陣列索引鍵一定會被從「已驗證」陣列中排除。就算在 `array` 規則上未指定允許的索引鍵也一樣。一般來說，這是我們最直覺會預期的行為。而之前在 Laravel 8.x 中加上的 `excludeUnvalidatedArrayKeys` 方法只是一個用來保持向下相容性的臨時方案。"

#: docs/9.x/upgrade.md:block 266 (paragraph)
msgid "Although it is not recommended, you may opt-in to the previous Laravel 8.x behavior by invoking a new `includeUnvalidatedArrayKeys` method within the `boot` method of one of your application's service providers:"
msgstr "雖然我們不建議，但你可以在專案中任何一個 Service Provider 的 `boot` 方法內叫用 `includeUnvalidatedArrayKeys` 方法來使用以前 Laravel 8.x 的行為："

#: docs/9.x/upgrade.md:block 267 (code)
msgid "use Illuminate\\Support\\Facades\\Validator;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::includeUnvalidatedArrayKeys();\n"
"}\n"
msgstr "use Illuminate\\Support\\Facades\\Validator;\n\n"
"/**\n"
" * Register any application services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    Validator::includeUnvalidatedArrayKeys();\n"
"}\n"

#: docs/9.x/upgrade.md:block 270 (paragraph)
msgid "We also encourage you to view the changes in the `laravel/laravel` [GitHub repository](https://github.com/laravel/laravel). While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the [GitHub comparison tool](https://github.com/laravel/laravel/compare/8.x...9.x) and choose which updates are important to you."
msgstr "我們也鼓勵你檢視 `laravel/laravel` [GitHub 存放庫](https://github.com/laravel/laravel)上的更改。雖然這些更改中大多數都不是必須要進行的，但你可能也會想讓專案中的這些檔案保持同步。其中一些修改有在本升級指南中提到，但有些其他的更改（如設定檔的更改或註解等）就沒有提到。可以通過 [GitHub 的比較工具](https://github.com/laravel/laravel/compare/8.x...9.x)來輕鬆地檢視這些更改，並自行評估哪些更改對你來說比較重要。"

#: docs/master/upgrade.md:block 17 (quote)
msgid "{tip} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application. Want to save time? You can use [Laravel Shift](https://laravelshift.com/) to help automate your application upgrades."
msgstr "{tip} 雖然我們已經儘可能地在本說明文件中涵蓋所有^[中斷性變更](Breaking Change)。不過，在 Laravel 中，有些中斷性變更存在一些比較不明顯的地方，且這些更改中幾乎不太會影響到你的專案。 想節省時間嗎？可以使用 [Laravel Shift](https://laravelshift.com/) 來協助你快速升級你的專案。"

#: docs/master/upgrade.md:block 130 (paragraph)
msgid "Write operations such as `put`, `write`, `writeStream` now overwrite existing files by default. If you do not want to overwrite existing files, you should manually check for the file's existence before performing the write operation."
msgstr "如 `put`、`write`、`writeStream` 等寫入操作現在會預設覆蓋現有的檔案。若不想複寫現有的檔案，請在執行寫入動作前先確認檔案是否存在。"

#: docs/master/upgrade.md:block 142 (code)
msgid "use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $adapter = new DropboxAdapter(new DropboxClient(\n"
"        $config['authorization_token']\n"
"    ););\n\n"
"    return new FilesystemAdapter(\n"
"        new Filesystem($adapter, $config),\n"
"        $adapter,\n"
"        $config\n"
"    );\n"
"});\n"
msgstr "use Illuminate\\Filesystem\\FilesystemAdapter;\n"
"use Illuminate\\Support\\Facades\\Storage;\n"
"use League\\Flysystem\\Filesystem;\n"
"use Spatie\\Dropbox\\Client as DropboxClient;\n"
"use Spatie\\FlysystemDropbox\\DropboxAdapter;\n\n"
"Storage::extend('dropbox', function ($app, $config) {\n"
"    $adapter = new DropboxAdapter(new DropboxClient(\n"
"        $config['authorization_token']\n"
"    ););\n\n"
"    return new FilesystemAdapter(\n"
"        new Filesystem($adapter, $config),\n"
"        $adapter,\n"
"        $config\n"
"    );\n"
"});\n"

#: docs/master/upgrade.md:block 166 (code)
msgid "$response = Http::timeout(120)->get(...);\n"
msgstr "$response = Http::timeout(120)->get(...);\n"

#: docs/master/upgrade.md:block 183 (paragraph)
msgid "The `send`, `html`, `text`, and `plain` methods no longer return the number of recipients that received the message. Instead, an instance of `Illuminate\\Mail\\SentMessage` is returned. This object contains an instance of `Symfony\\Component\\Mailer\\SentMessage` that is accessible via the `getSymfonySentMessage` method or by dynamically invoking methods on the object."
msgstr "`send`、`html`、`text`、`plain` 等方法將不再回傳會接受到該訊息的收件人數量了，而是回傳一個 `Illuminate\\Mail\\SentMessage` 實體。這個物件中包含了一個可以通過 `getSymfonySentMessage` 方法或是在該物件上動態叫用方法取得的 `Symfony\\Component\\Mailer\\SentMessage`："

#: docs/master/upgrade.md:block 187 (quote)
msgid "{note} Please thoroughly review the [Symfony Mailer documentation](https://symfony.com/doc/6.0/mailer.html#creating-sending-messages) for all possible interactions with the `Symfony\\Component\\Mime\\Email` object."
msgstr "{note} 請稍微檢視一下 [Symfony Mailer 說明文件](https://symfony.com/doc/6.0/mailer.html#creating-sending-messages)以瞭解所有使用 `Symfony\\Component\\Mime\\Email` 物件的方法。"

#: docs/master/upgrade.md:block 202 (quote)
msgid "{note} In spite of the example above, you are not generally advised to disable SSL verification since it introduces the possibility of \"man-in-the-middle\" attacks."
msgstr "{note} 雖然有上述這樣的範例，但一般來說建議不要禁用 SSL 驗證，因為有可能會導致「^[中間人](man-in-the-middle, MITM)」攻擊"

