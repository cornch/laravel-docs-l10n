#
msgid ""
msgstr ""

#: docs/10.x/authorization.md:block 1 (header)
msgid "Authorization"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Introduction](#introduction)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Gates](#gates)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Writing Gates](#writing-gates)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Authorizing Actions](#authorizing-actions-via-gates)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Gate Responses](#gate-responses)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Intercepting Gate Checks](#intercepting-gate-checks)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Inline Authorization](#inline-authorization)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Creating Policies](#creating-policies)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Generating Policies](#generating-policies)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Registering Policies](#registering-policies)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Writing Policies](#writing-policies)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Methods](#policy-methods)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Responses](#policy-responses)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Methods Without Models](#methods-without-models)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Guest Users](#guest-users)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Policy Filters](#policy-filters)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Authorizing Actions Using Policies](#authorizing-actions-using-policies)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via the User Model](#via-the-user-model)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Controller Helpers](#via-controller-helpers)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Middleware](#via-middleware)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Via Blade Templates](#via-blade-templates)"
msgstr ""

#: docs/10.x/authorization.md:block 2 (unordered list)
msgid "[Supplying Additional Context](#supplying-additional-context)"
msgstr ""

#: docs/10.x/authorization.md:block 4 (header)
msgid "Introduction"
msgstr ""

#: docs/10.x/authorization.md:block 5 (paragraph)
msgid "In addition to providing built-in [authentication](/docs/{{version}}/authentication) services, Laravel also provides a simple way to authorize user actions against a given resource. For example, even though a user is authenticated, they may not be authorized to update or delete certain Eloquent models or database records managed by your application. Laravel's authorization features provide an easy, organized way of managing these types of authorization checks."
msgstr ""

#: docs/10.x/authorization.md:block 6 (paragraph)
msgid "Laravel provides two primary ways of authorizing actions: [gates](#gates) and [policies](#creating-policies). Think of gates and policies like routes and controllers. Gates provide a simple, closure-based approach to authorization while policies, like controllers, group logic around a particular model or resource. In this documentation, we'll explore gates first and then examine policies."
msgstr ""

#: docs/10.x/authorization.md:block 7 (paragraph)
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions that are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr ""

#: docs/10.x/authorization.md:block 9 (header)
msgid "Gates"
msgstr ""

#: docs/10.x/authorization.md:block 11 (header)
msgid "Writing Gates"
msgstr ""

#: docs/10.x/authorization.md:block 12 (quote)
msgid "[!WARNING] Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr ""

#: docs/10.x/authorization.md:block 13 (paragraph)
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AuthServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr ""

#: docs/10.x/authorization.md:block 14 (paragraph)
msgid "In this example, we'll define a gate to determine if a user can update a given `App\\Models\\Post` model. The gate will accomplish this by comparing the user's `id` against the `user_id` of the user that created the post:"
msgstr ""

#: docs/10.x/authorization.md:block 15 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 16 (paragraph)
msgid "Like controllers, gates may also be defined using a class callback array:"
msgstr ""

#: docs/10.x/authorization.md:block 17 (code)
msgid ""
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 19 (header)
msgid "Authorizing Actions"
msgstr ""

#: docs/10.x/authorization.md:block 20 (paragraph)
msgid "To authorize an action using gates, you should use the `allows` or `denies` methods provided by the `Gate` facade. Note that you are not required to pass the currently authenticated user to these methods. Laravel will automatically take care of passing the user into the gate closure. It is typical to call the gate authorization methods within your application's controllers before performing an action that requires authorization:"
msgstr ""

#: docs/10.x/authorization.md:block 21 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Update the post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 22 (paragraph)
msgid "If you would like to determine if a user other than the currently authenticated user is authorized to perform an action, you may use the `forUser` method on the `Gate` facade:"
msgstr ""

#: docs/10.x/authorization.md:block 23 (code)
msgid ""
"if (Gate::forUser($user)->allows('update-post', $post)) {\n"
"    // The user can update the post...\n"
"}\n"
"\n"
"if (Gate::forUser($user)->denies('update-post', $post)) {\n"
"    // The user can't update the post...\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 24 (paragraph)
msgid "You may authorize multiple actions at a time using the `any` or `none` methods:"
msgstr ""

#: docs/10.x/authorization.md:block 25 (code)
msgid ""
"if (Gate::any(['update-post', 'delete-post'], $post)) {\n"
"    // The user can update or delete the post...\n"
"}\n"
"\n"
"if (Gate::none(['update-post', 'delete-post'], $post)) {\n"
"    // The user can't update or delete the post...\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 27 (header)
msgid "Authorizing or Throwing Exceptions"
msgstr ""

#: docs/10.x/authorization.md:block 28 (paragraph)
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler:"
msgstr ""

#: docs/10.x/authorization.md:block 29 (code)
msgid ""
"Gate::authorize('update-post', $post);\n"
"\n"
"// The action is authorized...\n"
msgstr ""

#: docs/10.x/authorization.md:block 31 (header)
msgid "Supplying Additional Context"
msgstr ""

#: docs/10.x/authorization.md:block 32 (paragraph)
msgid "The gate methods for authorizing abilities (`allows`, `denies`, `check`, `any`, `none`, `authorize`, `can`, `cannot`) and the authorization [Blade directives](#via-blade-templates) (`@can`, `@cannot`, `@canany`) can receive an array as their second argument. These array elements are passed as parameters to the gate closure, and can be used for additional context when making authorization decisions:"
msgstr ""

#: docs/10.x/authorization.md:block 33 (code)
msgid ""
"use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::define('create-post', function (User $user, Category $category, bool $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n"
"\n"
"    return true;\n"
"});\n"
"\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 35 (header)
msgid "Gate Responses"
msgstr ""

#: docs/10.x/authorization.md:block 36 (paragraph)
msgid "So far, we have only examined gates that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` from your gate:"
msgstr ""

#: docs/10.x/authorization.md:block 37 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::deny('You must be an administrator.');\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 38 (paragraph)
msgid "Even when you return an authorization response from your gate, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#: docs/10.x/authorization.md:block 39 (code)
msgid ""
"$response = Gate::inspect('edit-settings');\n"
"\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 40 (paragraph)
msgid "When using the `Gate::authorize` method, which throws an `AuthorizationException` if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:"
msgstr ""

#: docs/10.x/authorization.md:block 41 (code)
msgid ""
"Gate::authorize('edit-settings');\n"
"\n"
"// The action is authorized...\n"
msgstr ""

#: docs/10.x/authorization.md:block 43 (header)
msgid "Customizing The HTTP Response Status"
msgstr ""

#: docs/10.x/authorization.md:block 44 (paragraph)
msgid "When an action is denied via a Gate, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr ""

#: docs/10.x/authorization.md:block 45 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 46 (paragraph)
msgid "Because hiding resources via a `404` response is such a common pattern for web applications, the `denyAsNotFound` method is offered for convenience:"
msgstr ""

#: docs/10.x/authorization.md:block 47 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::define('edit-settings', function (User $user) {\n"
"    return $user->isAdmin\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 49 (header)
msgid "Intercepting Gate Checks"
msgstr ""

#: docs/10.x/authorization.md:block 50 (paragraph)
msgid "Sometimes, you may wish to grant all abilities to a specific user. You may use the `before` method to define a closure that is run before all other authorization checks:"
msgstr ""

#: docs/10.x/authorization.md:block 51 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::before(function (User $user, string $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 52 (paragraph)
msgid "If the `before` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#: docs/10.x/authorization.md:block 53 (paragraph)
msgid "You may use the `after` method to define a closure to be executed after all other authorization checks:"
msgstr ""

#: docs/10.x/authorization.md:block 54 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"Gate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 55 (paragraph)
msgid "Similar to the `before` method, if the `after` closure returns a non-null result that result will be considered the result of the authorization check."
msgstr ""

#: docs/10.x/authorization.md:block 57 (header)
msgid "Inline Authorization"
msgstr ""

#: docs/10.x/authorization.md:block 58 (paragraph)
msgid "Occasionally, you may wish to determine if the currently authenticated user is authorized to perform a given action without writing a dedicated gate that corresponds to the action. Laravel allows you to perform these types of \"inline\" authorization checks via the `Gate::allowIf` and `Gate::denyIf` methods. Inline authorization does not execute any defined [\"before\" or \"after\" authorization hooks](#intercepting-gate-checks):"
msgstr ""

#: docs/10.x/authorization.md:block 59 (code)
msgid ""
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::allowIf(fn (User $user) => $user->isAdministrator());\n"
"\n"
"Gate::denyIf(fn (User $user) => $user->banned());\n"
msgstr ""

#: docs/10.x/authorization.md:block 60 (paragraph)
msgid "If the action is not authorized or if no user is currently authenticated, Laravel will automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel's exception handler."
msgstr ""

#: docs/10.x/authorization.md:block 62 (header)
msgid "Creating Policies"
msgstr ""

#: docs/10.x/authorization.md:block 64 (header)
msgid "Generating Policies"
msgstr ""

#: docs/10.x/authorization.md:block 65 (paragraph)
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have an `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#: docs/10.x/authorization.md:block 66 (paragraph)
msgid "You may generate a policy using the `make:policy` Artisan command. The generated policy will be placed in the `app/Policies` directory. If this directory does not exist in your application, Laravel will create it for you:"
msgstr ""

#: docs/10.x/authorization.md:block 67 (code)
msgid "php artisan make:policy PostPolicy\n"
msgstr ""

#: docs/10.x/authorization.md:block 68 (paragraph)
msgid "The `make:policy` command will generate an empty policy class. If you would like to generate a class with example policy methods related to viewing, creating, updating, and deleting the resource, you may provide a `--model` option when executing the command:"
msgstr ""

#: docs/10.x/authorization.md:block 69 (code)
msgid "php artisan make:policy PostPolicy --model=Post\n"
msgstr ""

#: docs/10.x/authorization.md:block 71 (header)
msgid "Registering Policies"
msgstr ""

#: docs/10.x/authorization.md:block 72 (paragraph)
msgid "Once the policy class has been created, it needs to be registered. Registering policies is how we can inform Laravel which policy to use when authorizing actions against a given model type."
msgstr ""

#: docs/10.x/authorization.md:block 73 (paragraph)
msgid "The `App\\Providers\\AuthServiceProvider` included with fresh Laravel applications contains a `policies` property which maps your Eloquent models to their corresponding policies. Registering a policy will instruct Laravel which policy to utilize when authorizing actions against a given Eloquent model:"
msgstr ""

#: docs/10.x/authorization.md:block 74 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n"
"\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     */\n"
"    public function boot(): void\n"
"    {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 76 (header)
msgid "Policy Auto-Discovery"
msgstr ""

#: docs/10.x/authorization.md:block 77 (paragraph)
msgid "Instead of manually registering model policies, Laravel can automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr ""

#: docs/10.x/authorization.md:block 78 (paragraph)
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AuthServiceProvider`:"
msgstr ""

#: docs/10.x/authorization.md:block 79 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::guessPolicyNamesUsing(function (string $modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});\n"
msgstr ""

#: docs/10.x/authorization.md:block 80 (quote)
msgid "[!WARNING] Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr ""

#: docs/10.x/authorization.md:block 82 (header)
msgid "Writing Policies"
msgstr ""

#: docs/10.x/authorization.md:block 84 (header)
msgid "Policy Methods"
msgstr ""

#: docs/10.x/authorization.md:block 85 (paragraph)
msgid "Once the policy class has been registered, you may add methods for each action it authorizes. For example, let's define an `update` method on our `PostPolicy` which determines if a given `App\\Models\\User` can update a given `App\\Models\\Post` instance."
msgstr ""

#: docs/10.x/authorization.md:block 86 (paragraph)
msgid "The `update` method will receive a `User` and a `Post` instance as its arguments, and should return `true` or `false` indicating whether the user is authorized to update the given `Post`. So, in this example, we will verify that the user's `id` matches the `user_id` on the post:"
msgstr ""

#: docs/10.x/authorization.md:block 87 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Policies;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(User $user, Post $post): bool\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 88 (paragraph)
msgid "You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define `view` or `delete` methods to authorize various `Post` related actions, but remember you are free to give your policy methods any name you like."
msgstr ""

#: docs/10.x/authorization.md:block 89 (paragraph)
msgid "If you used the `--model` option when generating your policy via the Artisan console, it will already contain methods for the `viewAny`, `view`, `create`, `update`, `delete`, `restore`, and `forceDelete` actions."
msgstr ""

#: docs/10.x/authorization.md:block 90 (quote)
msgid "[!NOTE] All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr ""

#: docs/10.x/authorization.md:block 92 (header)
msgid "Policy Responses"
msgstr ""

#: docs/10.x/authorization.md:block 93 (paragraph)
msgid "So far, we have only examined policy methods that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an `Illuminate\\Auth\\Access\\Response` instance from your policy method:"
msgstr ""

#: docs/10.x/authorization.md:block 94 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 95 (paragraph)
msgid "When returning an authorization response from your policy, the `Gate::allows` method will still return a simple boolean value; however, you may use the `Gate::inspect` method to get the full authorization response returned by the gate:"
msgstr ""

#: docs/10.x/authorization.md:block 96 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"$response = Gate::inspect('update', $post);\n"
"\n"
"if ($response->allowed()) {\n"
"    // The action is authorized...\n"
"} else {\n"
"    echo $response->message();\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 98 (code)
msgid ""
"Gate::authorize('update', $post);\n"
"\n"
"// The action is authorized...\n"
msgstr ""

#: docs/10.x/authorization.md:block 100 (header)
msgid "Customizing the HTTP Response Status"
msgstr ""

#: docs/10.x/authorization.md:block 101 (paragraph)
msgid "When an action is denied via a policy method, a `403` HTTP response is returned; however, it can sometimes be useful to return an alternative HTTP status code. You may customize the HTTP status code returned for a failed authorization check using the `denyWithStatus` static constructor on the `Illuminate\\Auth\\Access\\Response` class:"
msgstr ""

#: docs/10.x/authorization.md:block 102 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 104 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post): Response\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 106 (header)
msgid "Methods Without Models"
msgstr ""

#: docs/10.x/authorization.md:block 107 (paragraph)
msgid "Some policy methods only receive an instance of the currently authenticated user. This situation is most common when authorizing `create` actions. For example, if you are creating a blog, you may wish to determine if a user is authorized to create any posts at all. In these situations, your policy method should only expect to receive a user instance:"
msgstr ""

#: docs/10.x/authorization.md:block 108 (code)
msgid ""
"/**\n"
" * Determine if the given user can create posts.\n"
" */\n"
"public function create(User $user): bool\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 110 (header)
msgid "Guest Users"
msgstr ""

#: docs/10.x/authorization.md:block 111 (paragraph)
msgid "By default, all gates and policies automatically return `false` if the incoming HTTP request was not initiated by an authenticated user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an \"optional\" type-hint or supplying a `null` default value for the user argument definition:"
msgstr ""

#: docs/10.x/authorization.md:block 112 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Policies;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     */\n"
"    public function update(?User $user, Post $post): bool\n"
"    {\n"
"        return $user?->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 114 (header)
msgid "Policy Filters"
msgstr ""

#: docs/10.x/authorization.md:block 115 (paragraph)
msgid "For certain users, you may wish to authorize all actions within a given policy. To accomplish this, define a `before` method on the policy. The `before` method will be executed before any other methods on the policy, giving you an opportunity to authorize the action before the intended policy method is actually called. This feature is most commonly used for authorizing application administrators to perform any action:"
msgstr ""

#: docs/10.x/authorization.md:block 116 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" */\n"
"public function before(User $user, string $ability): bool|null\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"\n"
"    return null;\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 117 (paragraph)
msgid "If you would like to deny all authorization checks for a particular type of user then you may return `false` from the `before` method. If `null` is returned, the authorization check will fall through to the policy method."
msgstr ""

#: docs/10.x/authorization.md:block 118 (quote)
msgid "[!WARNING] The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr ""

#: docs/10.x/authorization.md:block 120 (header)
msgid "Authorizing Actions Using Policies"
msgstr ""

#: docs/10.x/authorization.md:block 122 (header)
msgid "Via the User Model"
msgstr ""

#: docs/10.x/authorization.md:block 123 (paragraph)
msgid "The `App\\Models\\User` model that is included with your Laravel application includes two helpful methods for authorizing actions: `can` and `cannot`. The `can` and `cannot` methods receive the name of the action you wish to authorize and the relevant model. For example, let's determine if a user is authorized to update a given `App\\Models\\Post` model. Typically, this will be done within a controller method:"
msgstr ""

#: docs/10.x/authorization.md:block 124 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Update the post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 125 (paragraph)
msgid "If a [policy is registered](#registering-policies) for the given model, the `can` method will automatically call the appropriate policy and return the boolean result. If no policy is registered for the model, the `can` method will attempt to call the closure-based Gate matching the given action name."
msgstr ""

#: docs/10.x/authorization.md:block 127 (header)
msgid "Actions That Don't Require Models"
msgstr ""

#: docs/10.x/authorization.md:block 128 (paragraph)
msgid "Remember, some actions may correspond to policy methods like `create` that do not require a model instance. In these situations, you may pass a class name to the `can` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: docs/10.x/authorization.md:block 129 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     */\n"
"    public function store(Request $request): RedirectResponse\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Create the post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 131 (header)
msgid "Via Controller Helpers"
msgstr ""

#: docs/10.x/authorization.md:block 132 (paragraph)
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, Laravel provides a helpful `authorize` method to any of your controllers which extend the `App\\Http\\Controllers\\Controller` base class."
msgstr ""

#: docs/10.x/authorization.md:block 133 (paragraph)
msgid "Like the `can` method, this method accepts the name of the action you wish to authorize and the relevant model. If the action is not authorized, the `authorize` method will throw an `Illuminate\\Auth\\Access\\AuthorizationException` exception which the Laravel exception handler will automatically convert to an HTTP response with a 403 status code:"
msgstr ""

#: docs/10.x/authorization.md:block 134 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        $this->authorize('update', $post);\n"
"\n"
"        // The current user can update the blog post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 137 (paragraph)
msgid "As previously discussed, some policy methods like `create` do not require a model instance. In these situations, you should pass a class name to the `authorize` method. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: docs/10.x/authorization.md:block 138 (code)
msgid ""
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): RedirectResponse\n"
"{\n"
"    $this->authorize('create', Post::class);\n"
"\n"
"    // The current user can create blog posts...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 140 (header)
msgid "Authorizing Resource Controllers"
msgstr ""

#: docs/10.x/authorization.md:block 141 (paragraph)
msgid "If you are utilizing [resource controllers](/docs/{{version}}/controllers#resource-controllers), you may make use of the `authorizeResource` method in your controller's constructor. This method will attach the appropriate `can` middleware definitions to the resource controller's methods."
msgstr ""

#: docs/10.x/authorization.md:block 142 (paragraph)
msgid "The `authorizeResource` method accepts the model's class name as its first argument, and the name of the route / request parameter that will contain the model's ID as its second argument. You should ensure your [resource controller](/docs/{{version}}/controllers#resource-controllers) is created using the `--model` flag so that it has the required method signatures and type hints:"
msgstr ""

#: docs/10.x/authorization.md:block 143 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 144 (paragraph)
msgid "The following controller methods will be mapped to their corresponding policy method. When requests are routed to the given controller method, the corresponding policy method will automatically be invoked before the controller method is executed:"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "Controller Method"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "Policy Method"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "index"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "viewAny"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "show"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "view"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "create"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "store"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "edit"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "update"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "destroy"
msgstr ""

#: docs/10.x/authorization.md:block 146 (table)
msgid "delete"
msgstr ""

#: docs/10.x/authorization.md:block 148 (quote)
msgid "[!NOTE] You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr ""

#: docs/10.x/authorization.md:block 150 (header)
msgid "Via Middleware"
msgstr ""

#: docs/10.x/authorization.md:block 151 (paragraph)
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware is assigned the `can` key in your `App\\Http\\Kernel` class. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#: docs/10.x/authorization.md:block 152 (code)
msgid ""
"use App\\Models\\Post;\n"
"\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->middleware('can:update,post');\n"
msgstr ""

#: docs/10.x/authorization.md:block 153 (paragraph)
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), an `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#: docs/10.x/authorization.md:block 154 (paragraph)
msgid "For convenience, you may also attach the `can` middleware to your route using the `can` method:"
msgstr ""

#: docs/10.x/authorization.md:block 155 (code)
msgid ""
"use App\\Models\\Post;\n"
"\n"
"Route::put('/post/{post}', function (Post $post) {\n"
"    // The current user may update the post...\n"
"})->can('update', 'post');\n"
msgstr ""

#: docs/10.x/authorization.md:block 158 (paragraph)
msgid "Again, some policy methods like `create` do not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:"
msgstr ""

#: docs/10.x/authorization.md:block 159 (code)
msgid ""
"Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->middleware('can:create,App\\Models\\Post');\n"
msgstr ""

#: docs/10.x/authorization.md:block 160 (paragraph)
msgid "Specifying the entire class name within a string middleware definition can become cumbersome. For that reason, you may choose to attach the `can` middleware to your route using the `can` method:"
msgstr ""

#: docs/10.x/authorization.md:block 161 (code)
msgid ""
"use App\\Models\\Post;\n"
"\n"
"Route::post('/post', function () {\n"
"    // The current user may create posts...\n"
"})->can('create', Post::class);\n"
msgstr ""

#: docs/10.x/authorization.md:block 163 (header)
msgid "Via Blade Templates"
msgstr ""

#: docs/10.x/authorization.md:block 164 (paragraph)
msgid "When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the `@can` and `@cannot` directives:"
msgstr ""

#: docs/10.x/authorization.md:block 165 (code)
msgid ""
"@can('update', $post)\n"
"    <!-- The current user can update the post... -->\n"
"@elsecan('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create new posts... -->\n"
"@else\n"
"    <!-- ... -->\n"
"@endcan\n"
"\n"
"@cannot('update', $post)\n"
"    <!-- The current user cannot update the post... -->\n"
"@elsecannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user cannot create new posts... -->\n"
"@endcannot\n"
msgstr ""

#: docs/10.x/authorization.md:block 166 (paragraph)
msgid "These directives are convenient shortcuts for writing `@if` and `@unless` statements. The `@can` and `@cannot` statements above are equivalent to the following statements:"
msgstr ""

#: docs/10.x/authorization.md:block 167 (code)
msgid ""
"@if (Auth::user()->can('update', $post))\n"
"    <!-- The current user can update the post... -->\n"
"@endif\n"
"\n"
"@unless (Auth::user()->can('update', $post))\n"
"    <!-- The current user cannot update the post... -->\n"
"@endunless\n"
msgstr ""

#: docs/10.x/authorization.md:block 168 (paragraph)
msgid "You may also determine if a user is authorized to perform any action from a given array of actions. To accomplish this, use the `@canany` directive:"
msgstr ""

#: docs/10.x/authorization.md:block 169 (code)
msgid ""
"@canany(['update', 'view', 'delete'], $post)\n"
"    <!-- The current user can update, view, or delete the post... -->\n"
"@elsecanany(['create'], \\App\\Models\\Post::class)\n"
"    <!-- The current user can create a post... -->\n"
"@endcanany\n"
msgstr ""

#: docs/10.x/authorization.md:block 172 (paragraph)
msgid "Like most of the other authorization methods, you may pass a class name to the `@can` and `@cannot` directives if the action does not require a model instance:"
msgstr ""

#: docs/10.x/authorization.md:block 173 (code)
msgid ""
"@can('create', App\\Models\\Post::class)\n"
"    <!-- The current user can create posts... -->\n"
"@endcan\n"
"\n"
"@cannot('create', App\\Models\\Post::class)\n"
"    <!-- The current user can't create posts... -->\n"
"@endcannot\n"
msgstr ""

#: docs/10.x/authorization.md:block 176 (paragraph)
msgid "When authorizing actions using policies, you may pass an array as the second argument to the various authorization functions and helpers. The first element in the array will be used to determine which policy should be invoked, while the rest of the array elements are passed as parameters to the policy method and can be used for additional context when making authorization decisions. For example, consider the following `PostPolicy` method definition which contains an additional `$category` parameter:"
msgstr ""

#: docs/10.x/authorization.md:block 177 (code)
msgid ""
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" */\n"
"public function update(User $user, Post $post, int $category): bool\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"
msgstr ""

#: docs/10.x/authorization.md:block 178 (paragraph)
msgid "When attempting to determine if the authenticated user can update a given post, we can invoke this policy method like so:"
msgstr ""

#: docs/10.x/authorization.md:block 179 (code)
msgid ""
"/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): RedirectResponse\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n"
"\n"
"    // The current user can update the blog post...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 2 (unordered list)
msgid "[Via the Gate Facade](#via-the-gate-facade)"
msgstr ""

#: docs/11.x/authorization.md:block 2 (unordered list)
msgid "[Authorization & Inertia](#authorization-and-inertia)"
msgstr ""

#: docs/11.x/authorization.md:block 13 (paragraph)
msgid "Gates are simply closures that determine if a user is authorized to perform a given action. Typically, gates are defined within the `boot` method of the `App\\Providers\\AppServiceProvider` class using the `Gate` facade. Gates always receive a user instance as their first argument and may optionally receive additional arguments such as a relevant Eloquent model."
msgstr ""

#: docs/11.x/authorization.md:block 15 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 17 (code)
msgid ""
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 28 (paragraph)
msgid "If you would like to attempt to authorize an action and automatically throw an `Illuminate\\Auth\\Access\\AuthorizationException` if the user is not allowed to perform the given action, you may use the `Gate` facade's `authorize` method. Instances of `AuthorizationException` are automatically converted to a 403 HTTP response by Laravel:"
msgstr ""

#: docs/11.x/authorization.md:block 73 (header)
msgid "Policy Discovery"
msgstr ""

#: docs/11.x/authorization.md:block 74 (paragraph)
msgid "By default, Laravel automatically discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a `Policies` directory at or above the directory that contains your models. So, for example, the models may be placed in the `app/Models` directory while the policies may be placed in the `app/Policies` directory. In this situation, Laravel will check for policies in `app/Models/Policies` then `app/Policies`. In addition, the policy name must match the model name and have a `Policy` suffix. So, a `User` model would correspond to a `UserPolicy` policy class."
msgstr ""

#: docs/11.x/authorization.md:block 75 (paragraph)
msgid "If you would like to define your own policy discovery logic, you may register a custom policy discovery callback using the `Gate::guessPolicyNamesUsing` method. Typically, this method should be called from the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/11.x/authorization.md:block 78 (header)
msgid "Manually Registering Policies"
msgstr ""

#: docs/11.x/authorization.md:block 79 (paragraph)
msgid "Using the `Gate` facade, you may manually register policies and their corresponding models within the `boot` method of your application's `AppServiceProvider`:"
msgstr ""

#: docs/11.x/authorization.md:block 80 (code)
msgid ""
"use App\\Models\\Order;\n"
"use App\\Policies\\OrderPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Bootstrap any application services.\n"
" */\n"
"public function boot(): void\n"
"{\n"
"    Gate::policy(Order::class, OrderPolicy::class);\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 131 (header)
msgid "Via the `Gate` Facade"
msgstr ""

#: docs/11.x/authorization.md:block 132 (paragraph)
msgid "In addition to helpful methods provided to the `App\\Models\\User` model, you can always authorize actions via the `Gate` facade's `authorize` method."
msgstr ""

#: docs/11.x/authorization.md:block 134 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post): RedirectResponse\n"
"    {\n"
"        Gate::authorize('update', $post);\n"
"\n"
"        // The current user can update the blog post...\n"
"\n"
"        return redirect('/posts');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 138 (code)
msgid ""
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\RedirectResponse;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request): RedirectResponse\n"
"{\n"
"    Gate::authorize('create', Post::class);\n"
"\n"
"    // The current user can create blog posts...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 141 (paragraph)
msgid "Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the `Illuminate\\Auth\\Middleware\\Authorize` middleware may be attached to a route using the `can` [middleware alias](/docs/{{version}}/middleware#middleware-alias), which is automatically registered by Laravel. Let's explore an example of using the `can` middleware to authorize that a user can update a post:"
msgstr ""

#: docs/11.x/authorization.md:block 169 (code)
msgid ""
"/**\n"
" * Update the given blog post.\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post): RedirectResponse\n"
"{\n"
"    Gate::authorize('update', [$post, $request->category]);\n"
"\n"
"    // The current user can update the blog post...\n"
"\n"
"    return redirect('/posts');\n"
"}\n"
msgstr ""

#: docs/11.x/authorization.md:block 171 (header)
msgid "Authorization & Inertia"
msgstr ""

#: docs/11.x/authorization.md:block 172 (paragraph)
msgid "Although authorization must always be handled on the server, it can often be convenient to provide your frontend application with authorization data in order to properly render your application's UI. Laravel does not define a required convention for exposing authorization information to an Inertia powered frontend."
msgstr ""

#: docs/11.x/authorization.md:block 173 (paragraph)
msgid "However, if you are using one of Laravel's Inertia-based [starter kits](/docs/{{version}}/starter-kits), your application already contains a `HandleInertiaRequests` middleware. Within this middleware's `share` method, you may return shared data that will be provided to all Inertia pages in your application. This shared data can serve as a convenient location to define authorization information for the user:"
msgstr ""

#: docs/11.x/authorization.md:block 174 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Middleware;\n"
"\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Inertia\\Middleware;\n"
"\n"
"class HandleInertiaRequests extends Middleware\n"
"{\n"
"    // ...\n"
"\n"
"    /**\n"
"     * Define the props that are shared by default.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function share(Request $request)\n"
"    {\n"
"        return [\n"
"            ...parent::share($request),\n"
"            'auth' => [\n"
"                'user' => $request->user(),\n"
"                'permissions' => [\n"
"                    'post' => [\n"
"                        'create' => $request->user()->can('create', Post::class),\n"
"                    ],\n"
"                ],\n"
"            ],\n"
"        ];\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 2 (unordered list)
msgid "[Via The User Model](#via-the-user-model)"
msgstr ""

#: docs/8.x/authorization.md:block 7 (paragraph)
msgid "You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain some mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource."
msgstr ""

#: docs/8.x/authorization.md:block 12 (quote)
msgid "{note} Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr ""

#: docs/8.x/authorization.md:block 15 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n"
"\n"
"    Gate::define('update-post', function (User $user, Post $post) {\n"
"        return $user->id === $post->user_id;\n"
"    });\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 17 (code)
msgid ""
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"/**\n"
" * Register any authentication / authorization services.\n"
" *\n"
" * @return void\n"
" */\n"
"public function boot()\n"
"{\n"
"    $this->registerPolicies();\n"
"\n"
"    Gate::define('update-post', [PostPolicy::class, 'update']);\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 21 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if (! Gate::allows('update-post', $post)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Update the post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 27 (header)
msgid "Authorizing Or Throwing Exceptions"
msgstr ""

#: docs/8.x/authorization.md:block 33 (code)
msgid ""
"use App\\Models\\Category;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::define('create-post', function (User $user, Category $category, $pinned) {\n"
"    if (! $user->canPublishToGroup($category->group)) {\n"
"        return false;\n"
"    } elseif ($pinned && ! $user->canPinPosts()) {\n"
"        return false;\n"
"    }\n"
"\n"
"    return true;\n"
"});\n"
"\n"
"if (Gate::check('create-post', [$category, $pinned])) {\n"
"    // The user can create the post...\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 45 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::before(function ($user, $ability) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/authorization.md:block 48 (code)
msgid ""
"Gate::after(function ($user, $ability, $result, $arguments) {\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"});\n"
msgstr ""

#: docs/8.x/authorization.md:block 52 (paragraph)
msgid "Occasionally, you may wish to determine if the currently authenticated user is authorized to perform a given action without writing a dedicated gate that corresponds to the action. Laravel allows you to perform these types of \"inline\" authorization checks via the `Gate::allowIf` and `Gate::denyIf` methods:"
msgstr ""

#: docs/8.x/authorization.md:block 53 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Auth;\n"
"\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n"
"\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"
msgstr ""

#: docs/8.x/authorization.md:block 59 (paragraph)
msgid "Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a `App\\Models\\Post` model and a corresponding `App\\Policies\\PostPolicy` to authorize user actions such as creating or updating posts."
msgstr ""

#: docs/8.x/authorization.md:block 68 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Providers;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Policies\\PostPolicy;\n"
"use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n"
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"class AuthServiceProvider extends ServiceProvider\n"
"{\n"
"    /**\n"
"     * The policy mappings for the application.\n"
"     *\n"
"     * @var array\n"
"     */\n"
"    protected $policies = [\n"
"        Post::class => PostPolicy::class,\n"
"    ];\n"
"\n"
"    /**\n"
"     * Register any application authentication / authorization services.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function boot()\n"
"    {\n"
"        $this->registerPolicies();\n"
"\n"
"        //\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 73 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::guessPolicyNamesUsing(function ($modelClass) {\n"
"    // Return the name of the policy class for the given model...\n"
"});\n"
msgstr ""

#: docs/8.x/authorization.md:block 74 (quote)
msgid "{note} Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr ""

#: docs/8.x/authorization.md:block 81 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Policies;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(User $user, Post $post)\n"
"    {\n"
"        return $user->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 84 (quote)
msgid "{tip} All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr ""

#: docs/8.x/authorization.md:block 88 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::deny('You do not own this post.');\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 96 (code)
msgid ""
"/**\n"
" * Determine if the given user can create posts.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @return bool\n"
" */\n"
"public function create(User $user)\n"
"{\n"
"    return $user->role == 'writer';\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 100 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Policies;\n"
"\n"
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"\n"
"class PostPolicy\n"
"{\n"
"    /**\n"
"     * Determine if the given post can be updated by the user.\n"
"     *\n"
"     * @param  \\App\\Models\\User  $user\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return bool\n"
"     */\n"
"    public function update(?User $user, Post $post)\n"
"    {\n"
"        return optional($user)->id === $post->user_id;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 104 (code)
msgid ""
"use App\\Models\\User;\n"
"\n"
"/**\n"
" * Perform pre-authorization checks.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  string  $ability\n"
" * @return void|bool\n"
" */\n"
"public function before(User $user, $ability)\n"
"{\n"
"    if ($user->isAdministrator()) {\n"
"        return true;\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 106 (quote)
msgid "{note} The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr ""

#: docs/8.x/authorization.md:block 110 (header)
msgid "Via The User Model"
msgstr ""

#: docs/8.x/authorization.md:block 112 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        if ($request->user()->cannot('update', $post)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Update the post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 117 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create a post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     */\n"
"    public function store(Request $request)\n"
"    {\n"
"        if ($request->user()->cannot('create', Post::class)) {\n"
"            abort(403);\n"
"        }\n"
"\n"
"        // Create the post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 122 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Update the given blog post.\n"
"     *\n"
"     * @param  \\Illuminate\\Http\\Request  $request\n"
"     * @param  \\App\\Models\\Post  $post\n"
"     * @return \\Illuminate\\Http\\Response\n"
"     *\n"
"     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
"     */\n"
"    public function update(Request $request, Post $post)\n"
"    {\n"
"        $this->authorize('update', $post);\n"
"\n"
"        // The current user can update the blog post...\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 126 (code)
msgid ""
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"/**\n"
" * Create a new blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function create(Request $request)\n"
"{\n"
"    $this->authorize('create', Post::class);\n"
"\n"
"    // The current user can create blog posts...\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 131 (code)
msgid ""
"<?php\n"
"\n"
"namespace App\\Http\\Controllers;\n"
"\n"
"use App\\Http\\Controllers\\Controller;\n"
"use App\\Models\\Post;\n"
"use Illuminate\\Http\\Request;\n"
"\n"
"class PostController extends Controller\n"
"{\n"
"    /**\n"
"     * Create the controller instance.\n"
"     *\n"
"     * @return void\n"
"     */\n"
"    public function __construct()\n"
"    {\n"
"        $this->authorizeResource(Post::class, 'post');\n"
"    }\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 134 (quote)
msgid "{tip} You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr ""

#: docs/8.x/authorization.md:block 139 (paragraph)
msgid "In this example, we're passing the `can` middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using [implicit model binding](/docs/{{version}}/routing#implicit-binding), a `App\\Models\\Post` model will be passed to the policy method. If the user is not authorized to perform the given action, an HTTP response with a 403 status code will be returned by the middleware."
msgstr ""

#: docs/8.x/authorization.md:block 163 (code)
msgid ""
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @param  int  $category\n"
" * @return bool\n"
" */\n"
"public function update(User $user, Post $post, int $category)\n"
"{\n"
"    return $user->id === $post->user_id &&\n"
"           $user->canUpdateCategory($category);\n"
"}\n"
msgstr ""

#: docs/8.x/authorization.md:block 165 (code)
msgid ""
"/**\n"
" * Update the given blog post.\n"
" *\n"
" * @param  \\Illuminate\\Http\\Request  $request\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Http\\Response\n"
" *\n"
" * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n"
" */\n"
"public function update(Request $request, Post $post)\n"
"{\n"
"    $this->authorize('update', [$post, $request->category]);\n"
"\n"
"    // The current user can update the blog post...\n"
"}\n"
msgstr ""

#: docs/9.x/authorization.md:block 12 (quote)
msgid "**Warning** Gates are a great way to learn the basics of Laravel's authorization features; however, when building robust Laravel applications you should consider using [policies](#creating-policies) to organize your authorization rules."
msgstr ""

#: docs/9.x/authorization.md:block 59 (code)
msgid ""
"use Illuminate\\Support\\Facades\\Gate;\n"
"\n"
"Gate::allowIf(fn ($user) => $user->isAdministrator());\n"
"\n"
"Gate::denyIf(fn ($user) => $user->banned());\n"
msgstr ""

#: docs/9.x/authorization.md:block 80 (quote)
msgid "**Warning** Any policies that are explicitly mapped in your `AuthServiceProvider` will take precedence over any potentially auto-discovered policies."
msgstr ""

#: docs/9.x/authorization.md:block 90 (quote)
msgid "**Note** All policies are resolved via the Laravel [service container](/docs/{{version}}/container), allowing you to type-hint any needed dependencies in the policy's constructor to have them automatically injected."
msgstr ""

#: docs/9.x/authorization.md:block 102 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyWithStatus(404);\n"
"}\n"
msgstr ""

#: docs/9.x/authorization.md:block 104 (code)
msgid ""
"use App\\Models\\Post;\n"
"use App\\Models\\User;\n"
"use Illuminate\\Auth\\Access\\Response;\n"
"\n"
"/**\n"
" * Determine if the given post can be updated by the user.\n"
" *\n"
" * @param  \\App\\Models\\User  $user\n"
" * @param  \\App\\Models\\Post  $post\n"
" * @return \\Illuminate\\Auth\\Access\\Response\n"
" */\n"
"public function update(User $user, Post $post)\n"
"{\n"
"    return $user->id === $post->user_id\n"
"                ? Response::allow()\n"
"                : Response::denyAsNotFound();\n"
"}\n"
msgstr ""

#: docs/9.x/authorization.md:block 118 (quote)
msgid "**Warning** The `before` method of a policy class will not be called if the class doesn't contain a method with a name matching the name of the ability being checked."
msgstr ""

#: docs/9.x/authorization.md:block 146 (quote)
msgid "**Note** You may use the `make:policy` command with the `--model` option to quickly generate a policy class for a given model: `php artisan make:policy PostPolicy --model=Post`."
msgstr ""
